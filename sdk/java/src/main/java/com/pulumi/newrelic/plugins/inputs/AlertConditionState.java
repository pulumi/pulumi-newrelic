// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.plugins.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.newrelic.plugins.inputs.AlertConditionTermArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertConditionState extends com.pulumi.resources.ResourceArgs {

    public static final AlertConditionState Empty = new AlertConditionState();

    /**
     * Whether or not this condition is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether or not this condition is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The plugin component IDs to target.
     * 
     */
    @Import(name="entities")
    private @Nullable Output<List<Integer>> entities;

    /**
     * @return The plugin component IDs to target.
     * 
     */
    public Optional<Output<List<Integer>>> entities() {
        return Optional.ofNullable(this.entities);
    }

    /**
     * The plugin metric to evaluate.
     * 
     */
    @Import(name="metric")
    private @Nullable Output<String> metric;

    /**
     * @return The plugin metric to evaluate.
     * 
     */
    public Optional<Output<String>> metric() {
        return Optional.ofNullable(this.metric);
    }

    /**
     * The metric description.
     * 
     */
    @Import(name="metricDescription")
    private @Nullable Output<String> metricDescription;

    /**
     * @return The metric description.
     * 
     */
    public Optional<Output<String>> metricDescription() {
        return Optional.ofNullable(this.metricDescription);
    }

    /**
     * The title of the condition. Must be between 1 and 64 characters, inclusive.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The title of the condition. Must be between 1 and 64 characters, inclusive.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The GUID of the plugin which produces the metric.
     * 
     */
    @Import(name="pluginGuid")
    private @Nullable Output<String> pluginGuid;

    /**
     * @return The GUID of the plugin which produces the metric.
     * 
     */
    public Optional<Output<String>> pluginGuid() {
        return Optional.ofNullable(this.pluginGuid);
    }

    /**
     * The ID of the installed plugin instance which produces the metric.
     * 
     */
    @Import(name="pluginId")
    private @Nullable Output<String> pluginId;

    /**
     * @return The ID of the installed plugin instance which produces the metric.
     * 
     */
    public Optional<Output<String>> pluginId() {
        return Optional.ofNullable(this.pluginId);
    }

    /**
     * The ID of the policy where this condition should be used.
     * 
     */
    @Import(name="policyId")
    private @Nullable Output<Integer> policyId;

    /**
     * @return The ID of the policy where this condition should be used.
     * 
     */
    public Optional<Output<Integer>> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    /**
     * Runbook URL to display in notifications.
     * 
     */
    @Import(name="runbookUrl")
    private @Nullable Output<String> runbookUrl;

    /**
     * @return Runbook URL to display in notifications.
     * 
     */
    public Optional<Output<String>> runbookUrl() {
        return Optional.ofNullable(this.runbookUrl);
    }

    @Import(name="terms")
    private @Nullable Output<List<AlertConditionTermArgs>> terms;

    public Optional<Output<List<AlertConditionTermArgs>>> terms() {
        return Optional.ofNullable(this.terms);
    }

    /**
     * The value function to apply to the metric data. One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.
     * 
     */
    @Import(name="valueFunction")
    private @Nullable Output<String> valueFunction;

    /**
     * @return The value function to apply to the metric data. One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.
     * 
     */
    public Optional<Output<String>> valueFunction() {
        return Optional.ofNullable(this.valueFunction);
    }

    private AlertConditionState() {}

    private AlertConditionState(AlertConditionState $) {
        this.enabled = $.enabled;
        this.entities = $.entities;
        this.metric = $.metric;
        this.metricDescription = $.metricDescription;
        this.name = $.name;
        this.pluginGuid = $.pluginGuid;
        this.pluginId = $.pluginId;
        this.policyId = $.policyId;
        this.runbookUrl = $.runbookUrl;
        this.terms = $.terms;
        this.valueFunction = $.valueFunction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertConditionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertConditionState $;

        public Builder() {
            $ = new AlertConditionState();
        }

        public Builder(AlertConditionState defaults) {
            $ = new AlertConditionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether or not this condition is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether or not this condition is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param entities The plugin component IDs to target.
         * 
         * @return builder
         * 
         */
        public Builder entities(@Nullable Output<List<Integer>> entities) {
            $.entities = entities;
            return this;
        }

        /**
         * @param entities The plugin component IDs to target.
         * 
         * @return builder
         * 
         */
        public Builder entities(List<Integer> entities) {
            return entities(Output.of(entities));
        }

        /**
         * @param entities The plugin component IDs to target.
         * 
         * @return builder
         * 
         */
        public Builder entities(Integer... entities) {
            return entities(List.of(entities));
        }

        /**
         * @param metric The plugin metric to evaluate.
         * 
         * @return builder
         * 
         */
        public Builder metric(@Nullable Output<String> metric) {
            $.metric = metric;
            return this;
        }

        /**
         * @param metric The plugin metric to evaluate.
         * 
         * @return builder
         * 
         */
        public Builder metric(String metric) {
            return metric(Output.of(metric));
        }

        /**
         * @param metricDescription The metric description.
         * 
         * @return builder
         * 
         */
        public Builder metricDescription(@Nullable Output<String> metricDescription) {
            $.metricDescription = metricDescription;
            return this;
        }

        /**
         * @param metricDescription The metric description.
         * 
         * @return builder
         * 
         */
        public Builder metricDescription(String metricDescription) {
            return metricDescription(Output.of(metricDescription));
        }

        /**
         * @param name The title of the condition. Must be between 1 and 64 characters, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The title of the condition. Must be between 1 and 64 characters, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pluginGuid The GUID of the plugin which produces the metric.
         * 
         * @return builder
         * 
         */
        public Builder pluginGuid(@Nullable Output<String> pluginGuid) {
            $.pluginGuid = pluginGuid;
            return this;
        }

        /**
         * @param pluginGuid The GUID of the plugin which produces the metric.
         * 
         * @return builder
         * 
         */
        public Builder pluginGuid(String pluginGuid) {
            return pluginGuid(Output.of(pluginGuid));
        }

        /**
         * @param pluginId The ID of the installed plugin instance which produces the metric.
         * 
         * @return builder
         * 
         */
        public Builder pluginId(@Nullable Output<String> pluginId) {
            $.pluginId = pluginId;
            return this;
        }

        /**
         * @param pluginId The ID of the installed plugin instance which produces the metric.
         * 
         * @return builder
         * 
         */
        public Builder pluginId(String pluginId) {
            return pluginId(Output.of(pluginId));
        }

        /**
         * @param policyId The ID of the policy where this condition should be used.
         * 
         * @return builder
         * 
         */
        public Builder policyId(@Nullable Output<Integer> policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyId The ID of the policy where this condition should be used.
         * 
         * @return builder
         * 
         */
        public Builder policyId(Integer policyId) {
            return policyId(Output.of(policyId));
        }

        /**
         * @param runbookUrl Runbook URL to display in notifications.
         * 
         * @return builder
         * 
         */
        public Builder runbookUrl(@Nullable Output<String> runbookUrl) {
            $.runbookUrl = runbookUrl;
            return this;
        }

        /**
         * @param runbookUrl Runbook URL to display in notifications.
         * 
         * @return builder
         * 
         */
        public Builder runbookUrl(String runbookUrl) {
            return runbookUrl(Output.of(runbookUrl));
        }

        public Builder terms(@Nullable Output<List<AlertConditionTermArgs>> terms) {
            $.terms = terms;
            return this;
        }

        public Builder terms(List<AlertConditionTermArgs> terms) {
            return terms(Output.of(terms));
        }

        public Builder terms(AlertConditionTermArgs... terms) {
            return terms(List.of(terms));
        }

        /**
         * @param valueFunction The value function to apply to the metric data. One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.
         * 
         * @return builder
         * 
         */
        public Builder valueFunction(@Nullable Output<String> valueFunction) {
            $.valueFunction = valueFunction;
            return this;
        }

        /**
         * @param valueFunction The value function to apply to the metric data. One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.
         * 
         * @return builder
         * 
         */
        public Builder valueFunction(String valueFunction) {
            return valueFunction(Output.of(valueFunction));
        }

        public AlertConditionState build() {
            return $;
        }
    }

}
