// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUserArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUserArgs Empty = new GetUserArgs();

    /**
     * The ID of the authentication domain the user to be searched for belongs to.
     * 
     */
    @Import(name="authenticationDomainId", required=true)
    private Output<String> authenticationDomainId;

    /**
     * @return The ID of the authentication domain the user to be searched for belongs to.
     * 
     */
    public Output<String> authenticationDomainId() {
        return this.authenticationDomainId;
    }

    /**
     * The email ID of the user to search for.
     * 
     * It should be noted that either `name` or `email_id` must be specified in order to retrieve a matching user.
     * 
     * &gt; **NOTE** If the `name` specified in the configuration matches the names of multiple users in the account, the data source will return the first match from the list of all matching users retrieved from the API. However, when using the `email_id` argument as the search criterion, only the user with the specified email ID will be returned, as each user has a unique email ID and multiple users cannot have the same email ID.
     * 
     * &gt; **NOTE** The ID of an authentication domain can be retrieved using its name, via the data source `newrelic.getAuthenticationDomain`, as shown in the example above. Head over to the documentation of this data source for more details and examples.
     * 
     */
    @Import(name="emailId")
    private @Nullable Output<String> emailId;

    /**
     * @return The email ID of the user to search for.
     * 
     * It should be noted that either `name` or `email_id` must be specified in order to retrieve a matching user.
     * 
     * &gt; **NOTE** If the `name` specified in the configuration matches the names of multiple users in the account, the data source will return the first match from the list of all matching users retrieved from the API. However, when using the `email_id` argument as the search criterion, only the user with the specified email ID will be returned, as each user has a unique email ID and multiple users cannot have the same email ID.
     * 
     * &gt; **NOTE** The ID of an authentication domain can be retrieved using its name, via the data source `newrelic.getAuthenticationDomain`, as shown in the example above. Head over to the documentation of this data source for more details and examples.
     * 
     */
    public Optional<Output<String>> emailId() {
        return Optional.ofNullable(this.emailId);
    }

    /**
     * The name of the user to search for.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the user to search for.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private GetUserArgs() {}

    private GetUserArgs(GetUserArgs $) {
        this.authenticationDomainId = $.authenticationDomainId;
        this.emailId = $.emailId;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUserArgs $;

        public Builder() {
            $ = new GetUserArgs();
        }

        public Builder(GetUserArgs defaults) {
            $ = new GetUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationDomainId The ID of the authentication domain the user to be searched for belongs to.
         * 
         * @return builder
         * 
         */
        public Builder authenticationDomainId(Output<String> authenticationDomainId) {
            $.authenticationDomainId = authenticationDomainId;
            return this;
        }

        /**
         * @param authenticationDomainId The ID of the authentication domain the user to be searched for belongs to.
         * 
         * @return builder
         * 
         */
        public Builder authenticationDomainId(String authenticationDomainId) {
            return authenticationDomainId(Output.of(authenticationDomainId));
        }

        /**
         * @param emailId The email ID of the user to search for.
         * 
         * It should be noted that either `name` or `email_id` must be specified in order to retrieve a matching user.
         * 
         * &gt; **NOTE** If the `name` specified in the configuration matches the names of multiple users in the account, the data source will return the first match from the list of all matching users retrieved from the API. However, when using the `email_id` argument as the search criterion, only the user with the specified email ID will be returned, as each user has a unique email ID and multiple users cannot have the same email ID.
         * 
         * &gt; **NOTE** The ID of an authentication domain can be retrieved using its name, via the data source `newrelic.getAuthenticationDomain`, as shown in the example above. Head over to the documentation of this data source for more details and examples.
         * 
         * @return builder
         * 
         */
        public Builder emailId(@Nullable Output<String> emailId) {
            $.emailId = emailId;
            return this;
        }

        /**
         * @param emailId The email ID of the user to search for.
         * 
         * It should be noted that either `name` or `email_id` must be specified in order to retrieve a matching user.
         * 
         * &gt; **NOTE** If the `name` specified in the configuration matches the names of multiple users in the account, the data source will return the first match from the list of all matching users retrieved from the API. However, when using the `email_id` argument as the search criterion, only the user with the specified email ID will be returned, as each user has a unique email ID and multiple users cannot have the same email ID.
         * 
         * &gt; **NOTE** The ID of an authentication domain can be retrieved using its name, via the data source `newrelic.getAuthenticationDomain`, as shown in the example above. Head over to the documentation of this data source for more details and examples.
         * 
         * @return builder
         * 
         */
        public Builder emailId(String emailId) {
            return emailId(Output.of(emailId));
        }

        /**
         * @param name The name of the user to search for.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the user to search for.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GetUserArgs build() {
            if ($.authenticationDomainId == null) {
                throw new MissingRequiredPropertyException("GetUserArgs", "authenticationDomainId");
            }
            return $;
        }
    }

}
