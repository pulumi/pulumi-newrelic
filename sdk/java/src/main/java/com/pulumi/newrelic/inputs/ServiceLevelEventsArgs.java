// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.newrelic.inputs.ServiceLevelEventsBadEventsArgs;
import com.pulumi.newrelic.inputs.ServiceLevelEventsGoodEventsArgs;
import com.pulumi.newrelic.inputs.ServiceLevelEventsValidEventsArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceLevelEventsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceLevelEventsArgs Empty = new ServiceLevelEventsArgs();

    /**
     * The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,
     * and that contains the NRDB data for the SLI/SLO calculations. Note that changing the account ID will force a new resource.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<Integer> accountId;

    /**
     * @return The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,
     * and that contains the NRDB data for the SLI/SLO calculations. Note that changing the account ID will force a new resource.
     * 
     */
    public Output<Integer> accountId() {
        return this.accountId;
    }

    /**
     * The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.
     * 
     */
    @Import(name="badEvents")
    private @Nullable Output<ServiceLevelEventsBadEventsArgs> badEvents;

    /**
     * @return The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.
     * 
     */
    public Optional<Output<ServiceLevelEventsBadEventsArgs>> badEvents() {
        return Optional.ofNullable(this.badEvents);
    }

    /**
     * The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.
     * 
     */
    @Import(name="goodEvents")
    private @Nullable Output<ServiceLevelEventsGoodEventsArgs> goodEvents;

    /**
     * @return The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.
     * 
     */
    public Optional<Output<ServiceLevelEventsGoodEventsArgs>> goodEvents() {
        return Optional.ofNullable(this.goodEvents);
    }

    /**
     * The definition of valid requests.
     * 
     */
    @Import(name="validEvents", required=true)
    private Output<ServiceLevelEventsValidEventsArgs> validEvents;

    /**
     * @return The definition of valid requests.
     * 
     */
    public Output<ServiceLevelEventsValidEventsArgs> validEvents() {
        return this.validEvents;
    }

    private ServiceLevelEventsArgs() {}

    private ServiceLevelEventsArgs(ServiceLevelEventsArgs $) {
        this.accountId = $.accountId;
        this.badEvents = $.badEvents;
        this.goodEvents = $.goodEvents;
        this.validEvents = $.validEvents;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceLevelEventsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceLevelEventsArgs $;

        public Builder() {
            $ = new ServiceLevelEventsArgs();
        }

        public Builder(ServiceLevelEventsArgs defaults) {
            $ = new ServiceLevelEventsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,
         * and that contains the NRDB data for the SLI/SLO calculations. Note that changing the account ID will force a new resource.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<Integer> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,
         * and that contains the NRDB data for the SLI/SLO calculations. Note that changing the account ID will force a new resource.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Integer accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param badEvents The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.
         * 
         * @return builder
         * 
         */
        public Builder badEvents(@Nullable Output<ServiceLevelEventsBadEventsArgs> badEvents) {
            $.badEvents = badEvents;
            return this;
        }

        /**
         * @param badEvents The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.
         * 
         * @return builder
         * 
         */
        public Builder badEvents(ServiceLevelEventsBadEventsArgs badEvents) {
            return badEvents(Output.of(badEvents));
        }

        /**
         * @param goodEvents The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.
         * 
         * @return builder
         * 
         */
        public Builder goodEvents(@Nullable Output<ServiceLevelEventsGoodEventsArgs> goodEvents) {
            $.goodEvents = goodEvents;
            return this;
        }

        /**
         * @param goodEvents The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.
         * 
         * @return builder
         * 
         */
        public Builder goodEvents(ServiceLevelEventsGoodEventsArgs goodEvents) {
            return goodEvents(Output.of(goodEvents));
        }

        /**
         * @param validEvents The definition of valid requests.
         * 
         * @return builder
         * 
         */
        public Builder validEvents(Output<ServiceLevelEventsValidEventsArgs> validEvents) {
            $.validEvents = validEvents;
            return this;
        }

        /**
         * @param validEvents The definition of valid requests.
         * 
         * @return builder
         * 
         */
        public Builder validEvents(ServiceLevelEventsValidEventsArgs validEvents) {
            return validEvents(Output.of(validEvents));
        }

        public ServiceLevelEventsArgs build() {
            $.accountId = Objects.requireNonNull($.accountId, "expected parameter 'accountId' to be non-null");
            $.validEvents = Objects.requireNonNull($.validEvents, "expected parameter 'validEvents' to be non-null");
            return $;
        }
    }

}
