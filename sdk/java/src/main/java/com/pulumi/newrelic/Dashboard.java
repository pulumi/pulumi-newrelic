// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.DashboardArgs;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.inputs.DashboardState;
import com.pulumi.newrelic.outputs.DashboardFilter;
import com.pulumi.newrelic.outputs.DashboardWidget;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * New Relic legacy Dashboards reached end of life Wednesday July 28, 2021.
 * 
 * **This resource has been removed.**
 * 
 * For more information, [click here](https://discuss.newrelic.com/t/important-insights-dashboard-api-end-of-life/149357)
 * 
 */
@ResourceType(type="newrelic:index/dashboard:Dashboard")
public class Dashboard extends com.pulumi.resources.CustomResource {
    /**
     * The URL for viewing the dashboard.
     * 
     */
    @Export(name="dashboardUrl", type=String.class, parameters={})
    private Output<String> dashboardUrl;

    /**
     * @return The URL for viewing the dashboard.
     * 
     */
    public Output<String> dashboardUrl() {
        return this.dashboardUrl;
    }
    /**
     * Determines who can edit the dashboard in an account. Valid values are all, editable_by_all, editable_by_owner, or
     * read_only. Defaults to editable_by_all.
     * 
     */
    @Export(name="editable", type=String.class, parameters={})
    private Output</* @Nullable */ String> editable;

    /**
     * @return Determines who can edit the dashboard in an account. Valid values are all, editable_by_all, editable_by_owner, or
     * read_only. Defaults to editable_by_all.
     * 
     */
    public Output<Optional<String>> editable() {
        return Codegen.optional(this.editable);
    }
    /**
     * A nested block that describes a dashboard filter. Exactly one nested filter block is allowed.
     * 
     */
    @Export(name="filter", type=DashboardFilter.class, parameters={})
    private Output</* @Nullable */ DashboardFilter> filter;

    /**
     * @return A nested block that describes a dashboard filter. Exactly one nested filter block is allowed.
     * 
     */
    public Output<Optional<DashboardFilter>> filter() {
        return Codegen.optional(this.filter);
    }
    /**
     * New Relic One supports a 3 column grid or a 12 column grid. New Relic Insights supports a 3 column grid.
     * 
     */
    @Export(name="gridColumnCount", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> gridColumnCount;

    /**
     * @return New Relic One supports a 3 column grid or a 12 column grid. New Relic Insights supports a 3 column grid.
     * 
     */
    public Output<Optional<Integer>> gridColumnCount() {
        return Codegen.optional(this.gridColumnCount);
    }
    /**
     * The icon for the dashboard.
     * 
     */
    @Export(name="icon", type=String.class, parameters={})
    private Output</* @Nullable */ String> icon;

    /**
     * @return The icon for the dashboard.
     * 
     */
    public Output<Optional<String>> icon() {
        return Codegen.optional(this.icon);
    }
    /**
     * The title of the dashboard.
     * 
     */
    @Export(name="title", type=String.class, parameters={})
    private Output<String> title;

    /**
     * @return The title of the dashboard.
     * 
     */
    public Output<String> title() {
        return this.title;
    }
    /**
     * Determines who can see the dashboard in an account. Valid values are all or owner. Defaults to all.
     * 
     */
    @Export(name="visibility", type=String.class, parameters={})
    private Output</* @Nullable */ String> visibility;

    /**
     * @return Determines who can see the dashboard in an account. Valid values are all or owner. Defaults to all.
     * 
     */
    public Output<Optional<String>> visibility() {
        return Codegen.optional(this.visibility);
    }
    /**
     * A nested block that describes a visualization. Up to 300 widget blocks are allowed in a dashboard definition.
     * 
     */
    @Export(name="widgets", type=List.class, parameters={DashboardWidget.class})
    private Output</* @Nullable */ List<DashboardWidget>> widgets;

    /**
     * @return A nested block that describes a visualization. Up to 300 widget blocks are allowed in a dashboard definition.
     * 
     */
    public Output<Optional<List<DashboardWidget>>> widgets() {
        return Codegen.optional(this.widgets);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Dashboard(String name) {
        this(name, DashboardArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Dashboard(String name, DashboardArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Dashboard(String name, DashboardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/dashboard:Dashboard", name, args == null ? DashboardArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Dashboard(String name, Output<String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/dashboard:Dashboard", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Dashboard get(String name, Output<String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Dashboard(name, id, state, options);
    }
}
