// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.newrelic.inputs.OneDashboardVariableItemArgs;
import com.pulumi.newrelic.inputs.OneDashboardVariableNrqlQueryArgs;
import com.pulumi.newrelic.inputs.OneDashboardVariableOptionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OneDashboardVariableArgs extends com.pulumi.resources.ResourceArgs {

    public static final OneDashboardVariableArgs Empty = new OneDashboardVariableArgs();

    /**
     * (Optional) A list of default values for this variable. To select **all** default values, the appropriate value to be used with this argument would be `[&#34;*&#34;]`.
     * 
     */
    @Import(name="defaultValues")
    private @Nullable Output<List<String>> defaultValues;

    /**
     * @return (Optional) A list of default values for this variable. To select **all** default values, the appropriate value to be used with this argument would be `[&#34;*&#34;]`.
     * 
     */
    public Optional<Output<List<String>>> defaultValues() {
        return Optional.ofNullable(this.defaultValues);
    }

    /**
     * (Optional) Indicates whether this variable supports multiple selection or not. Only applies to variables of type `nrql` or `enum`.
     * 
     */
    @Import(name="isMultiSelection")
    private @Nullable Output<Boolean> isMultiSelection;

    /**
     * @return (Optional) Indicates whether this variable supports multiple selection or not. Only applies to variables of type `nrql` or `enum`.
     * 
     */
    public Optional<Output<Boolean>> isMultiSelection() {
        return Optional.ofNullable(this.isMultiSelection);
    }

    /**
     * (Optional) List of possible values for variables of type `enum`. See Nested item blocks below for details.
     * 
     */
    @Import(name="items")
    private @Nullable Output<List<OneDashboardVariableItemArgs>> items;

    /**
     * @return (Optional) List of possible values for variables of type `enum`. See Nested item blocks below for details.
     * 
     */
    public Optional<Output<List<OneDashboardVariableItemArgs>>> items() {
        return Optional.ofNullable(this.items);
    }

    /**
     * The title of the dashboard.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The title of the dashboard.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     * 
     */
    @Import(name="nrqlQuery")
    private @Nullable Output<OneDashboardVariableNrqlQueryArgs> nrqlQuery;

    /**
     * @return (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     * 
     */
    public Optional<Output<OneDashboardVariableNrqlQueryArgs>> nrqlQuery() {
        return Optional.ofNullable(this.nrqlQuery);
    }

    /**
     * (Optional) Specifies additional options to be added to dashboard variables. Supports the following nested attribute(s) -
     * 
     */
    @Import(name="options")
    private @Nullable Output<List<OneDashboardVariableOptionArgs>> options;

    /**
     * @return (Optional) Specifies additional options to be added to dashboard variables. Supports the following nested attribute(s) -
     * 
     */
    public Optional<Output<List<OneDashboardVariableOptionArgs>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * (Optional) Indicates the strategy to apply when replacing a variable in a NRQL query. One of `default`, `identifier`, `number` or `string`.
     * 
     */
    @Import(name="replacementStrategy", required=true)
    private Output<String> replacementStrategy;

    /**
     * @return (Optional) Indicates the strategy to apply when replacing a variable in a NRQL query. One of `default`, `identifier`, `number` or `string`.
     * 
     */
    public Output<String> replacementStrategy() {
        return this.replacementStrategy;
    }

    /**
     * (Optional) A human-friendly display string for this value.
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return (Optional) A human-friendly display string for this value.
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    /**
     * (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private OneDashboardVariableArgs() {}

    private OneDashboardVariableArgs(OneDashboardVariableArgs $) {
        this.defaultValues = $.defaultValues;
        this.isMultiSelection = $.isMultiSelection;
        this.items = $.items;
        this.name = $.name;
        this.nrqlQuery = $.nrqlQuery;
        this.options = $.options;
        this.replacementStrategy = $.replacementStrategy;
        this.title = $.title;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OneDashboardVariableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OneDashboardVariableArgs $;

        public Builder() {
            $ = new OneDashboardVariableArgs();
        }

        public Builder(OneDashboardVariableArgs defaults) {
            $ = new OneDashboardVariableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultValues (Optional) A list of default values for this variable. To select **all** default values, the appropriate value to be used with this argument would be `[&#34;*&#34;]`.
         * 
         * @return builder
         * 
         */
        public Builder defaultValues(@Nullable Output<List<String>> defaultValues) {
            $.defaultValues = defaultValues;
            return this;
        }

        /**
         * @param defaultValues (Optional) A list of default values for this variable. To select **all** default values, the appropriate value to be used with this argument would be `[&#34;*&#34;]`.
         * 
         * @return builder
         * 
         */
        public Builder defaultValues(List<String> defaultValues) {
            return defaultValues(Output.of(defaultValues));
        }

        /**
         * @param defaultValues (Optional) A list of default values for this variable. To select **all** default values, the appropriate value to be used with this argument would be `[&#34;*&#34;]`.
         * 
         * @return builder
         * 
         */
        public Builder defaultValues(String... defaultValues) {
            return defaultValues(List.of(defaultValues));
        }

        /**
         * @param isMultiSelection (Optional) Indicates whether this variable supports multiple selection or not. Only applies to variables of type `nrql` or `enum`.
         * 
         * @return builder
         * 
         */
        public Builder isMultiSelection(@Nullable Output<Boolean> isMultiSelection) {
            $.isMultiSelection = isMultiSelection;
            return this;
        }

        /**
         * @param isMultiSelection (Optional) Indicates whether this variable supports multiple selection or not. Only applies to variables of type `nrql` or `enum`.
         * 
         * @return builder
         * 
         */
        public Builder isMultiSelection(Boolean isMultiSelection) {
            return isMultiSelection(Output.of(isMultiSelection));
        }

        /**
         * @param items (Optional) List of possible values for variables of type `enum`. See Nested item blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder items(@Nullable Output<List<OneDashboardVariableItemArgs>> items) {
            $.items = items;
            return this;
        }

        /**
         * @param items (Optional) List of possible values for variables of type `enum`. See Nested item blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder items(List<OneDashboardVariableItemArgs> items) {
            return items(Output.of(items));
        }

        /**
         * @param items (Optional) List of possible values for variables of type `enum`. See Nested item blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder items(OneDashboardVariableItemArgs... items) {
            return items(List.of(items));
        }

        /**
         * @param name The title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nrqlQuery (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
         * 
         * @return builder
         * 
         */
        public Builder nrqlQuery(@Nullable Output<OneDashboardVariableNrqlQueryArgs> nrqlQuery) {
            $.nrqlQuery = nrqlQuery;
            return this;
        }

        /**
         * @param nrqlQuery (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
         * 
         * @return builder
         * 
         */
        public Builder nrqlQuery(OneDashboardVariableNrqlQueryArgs nrqlQuery) {
            return nrqlQuery(Output.of(nrqlQuery));
        }

        /**
         * @param options (Optional) Specifies additional options to be added to dashboard variables. Supports the following nested attribute(s) -
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<List<OneDashboardVariableOptionArgs>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options (Optional) Specifies additional options to be added to dashboard variables. Supports the following nested attribute(s) -
         * 
         * @return builder
         * 
         */
        public Builder options(List<OneDashboardVariableOptionArgs> options) {
            return options(Output.of(options));
        }

        /**
         * @param options (Optional) Specifies additional options to be added to dashboard variables. Supports the following nested attribute(s) -
         * 
         * @return builder
         * 
         */
        public Builder options(OneDashboardVariableOptionArgs... options) {
            return options(List.of(options));
        }

        /**
         * @param replacementStrategy (Optional) Indicates the strategy to apply when replacing a variable in a NRQL query. One of `default`, `identifier`, `number` or `string`.
         * 
         * @return builder
         * 
         */
        public Builder replacementStrategy(Output<String> replacementStrategy) {
            $.replacementStrategy = replacementStrategy;
            return this;
        }

        /**
         * @param replacementStrategy (Optional) Indicates the strategy to apply when replacing a variable in a NRQL query. One of `default`, `identifier`, `number` or `string`.
         * 
         * @return builder
         * 
         */
        public Builder replacementStrategy(String replacementStrategy) {
            return replacementStrategy(Output.of(replacementStrategy));
        }

        /**
         * @param title (Optional) A human-friendly display string for this value.
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title (Optional) A human-friendly display string for this value.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param type (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public OneDashboardVariableArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("OneDashboardVariableArgs", "name");
            }
            if ($.replacementStrategy == null) {
                throw new MissingRequiredPropertyException("OneDashboardVariableArgs", "replacementStrategy");
            }
            if ($.title == null) {
                throw new MissingRequiredPropertyException("OneDashboardVariableArgs", "title");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("OneDashboardVariableArgs", "type");
            }
            return $;
        }
    }

}
