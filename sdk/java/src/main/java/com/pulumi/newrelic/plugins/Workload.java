// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.plugins;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.plugins.WorkloadArgs;
import com.pulumi.newrelic.plugins.inputs.WorkloadState;
import com.pulumi.newrelic.plugins.outputs.WorkloadEntitySearchQuery;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Use this resource to create, update, and delete a New Relic One workload.
 * 
 * A New Relic User API key is required to provision this resource.  Set the `api_key`
 * attribute in the `provider` block or the `NEW_RELIC_API_KEY` environment
 * variable with your User API key.
 * 
 * ## Example Usage
 * 
 * Include entities with a certain string on the name.
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.plugins.Workload;
 * import com.pulumi.newrelic.plugins.WorkloadArgs;
 * import com.pulumi.newrelic.plugins.inputs.WorkloadEntitySearchQueryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new Workload(&#34;foo&#34;, WorkloadArgs.builder()        
 *             .accountId(12345678)
 *             .entityGuids(&#34;MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1&#34;)
 *             .entitySearchQueries(WorkloadEntitySearchQueryArgs.builder()
 *                 .query(&#34;name like &#39;%Example application%&#39;&#34;)
 *                 .build())
 *             .scopeAccountIds(12345678)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * Include entities with a set of tags.
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.plugins.Workload;
 * import com.pulumi.newrelic.plugins.WorkloadArgs;
 * import com.pulumi.newrelic.plugins.inputs.WorkloadEntitySearchQueryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new Workload(&#34;foo&#34;, WorkloadArgs.builder()        
 *             .accountId(12345678)
 *             .entityGuids(&#34;MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1&#34;)
 *             .entitySearchQueries(WorkloadEntitySearchQueryArgs.builder()
 *                 .query(&#34;tags.accountId = &#39;12345678&#39; AND tags.environment=&#39;production&#39; AND tags.language=&#39;java&#39;&#34;)
 *                 .build())
 *             .scopeAccountIds(12345678)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * New Relic One workloads can be imported using a concatenated string of the format
 * 
 * `&lt;account_id&gt;:&lt;workload_id&gt;:&lt;guid&gt;`, e.g. bash
 * 
 * ```sh
 *  $ pulumi import newrelic:plugins/workload:Workload foo 12345678:1456:MjUyMDUyOHxBUE18QVBRTElDQVRJT058MjE1MDM3Nzk1
 * ```
 * 
 */
@ResourceType(type="newrelic:plugins/workload:Workload")
public class Workload extends com.pulumi.resources.CustomResource {
    /**
     * The New Relic account ID where you want to create the workload.
     * 
     */
    @Export(name="accountId", type=Integer.class, parameters={})
    private Output<Integer> accountId;

    /**
     * @return The New Relic account ID where you want to create the workload.
     * 
     */
    public Output<Integer> accountId() {
        return this.accountId;
    }
    /**
     * The composite query used to compose a dynamic workload.
     * 
     */
    @Export(name="compositeEntitySearchQuery", type=String.class, parameters={})
    private Output<String> compositeEntitySearchQuery;

    /**
     * @return The composite query used to compose a dynamic workload.
     * 
     */
    public Output<String> compositeEntitySearchQuery() {
        return this.compositeEntitySearchQuery;
    }
    /**
     * A list of entity GUIDs manually assigned to this workload.
     * 
     */
    @Export(name="entityGuids", type=List.class, parameters={String.class})
    private Output<List<String>> entityGuids;

    /**
     * @return A list of entity GUIDs manually assigned to this workload.
     * 
     */
    public Output<List<String>> entityGuids() {
        return this.entityGuids;
    }
    /**
     * A list of search queries that define a dynamic workload.  See Nested entity_search_query blocks below for details.
     * 
     */
    @Export(name="entitySearchQueries", type=List.class, parameters={WorkloadEntitySearchQuery.class})
    private Output</* @Nullable */ List<WorkloadEntitySearchQuery>> entitySearchQueries;

    /**
     * @return A list of search queries that define a dynamic workload.  See Nested entity_search_query blocks below for details.
     * 
     */
    public Output<Optional<List<WorkloadEntitySearchQuery>>> entitySearchQueries() {
        return Codegen.optional(this.entitySearchQueries);
    }
    /**
     * The unique entity identifier of the workload in New Relic.
     * 
     */
    @Export(name="guid", type=String.class, parameters={})
    private Output<String> guid;

    /**
     * @return The unique entity identifier of the workload in New Relic.
     * 
     */
    public Output<String> guid() {
        return this.guid;
    }
    /**
     * The workload&#39;s name.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The workload&#39;s name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The URL of the workload.
     * 
     */
    @Export(name="permalink", type=String.class, parameters={})
    private Output<String> permalink;

    /**
     * @return The URL of the workload.
     * 
     */
    public Output<String> permalink() {
        return this.permalink;
    }
    /**
     * A list of account IDs that will be used to get entities from.
     * 
     */
    @Export(name="scopeAccountIds", type=List.class, parameters={Integer.class})
    private Output<List<Integer>> scopeAccountIds;

    /**
     * @return A list of account IDs that will be used to get entities from.
     * 
     */
    public Output<List<Integer>> scopeAccountIds() {
        return this.scopeAccountIds;
    }
    /**
     * The unique entity identifier of the workload.
     * 
     */
    @Export(name="workloadId", type=Integer.class, parameters={})
    private Output<Integer> workloadId;

    /**
     * @return The unique entity identifier of the workload.
     * 
     */
    public Output<Integer> workloadId() {
        return this.workloadId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Workload(String name) {
        this(name, WorkloadArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Workload(String name, @Nullable WorkloadArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Workload(String name, @Nullable WorkloadArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:plugins/workload:Workload", name, args == null ? WorkloadArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Workload(String name, Output<String> id, @Nullable WorkloadState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:plugins/workload:Workload", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Workload get(String name, Output<String> id, @Nullable WorkloadState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Workload(name, id, state, options);
    }
}
