// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OneDashboardPageWidgetJsonDataFormatArgs extends com.pulumi.resources.ResourceArgs {

    public static final OneDashboardPageWidgetJsonDataFormatArgs Empty = new OneDashboardPageWidgetJsonDataFormatArgs();

    /**
     * (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
     * 
     */
    @Import(name="format")
    private @Nullable Output<String> format;

    /**
     * @return (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
     * 
     */
    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * The title of the dashboard.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The title of the dashboard.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
     * 
     */
    @Import(name="precision")
    private @Nullable Output<Integer> precision;

    /**
     * @return (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
     * 
     */
    public Optional<Output<Integer>> precision() {
        return Optional.ofNullable(this.precision);
    }

    /**
     * (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private OneDashboardPageWidgetJsonDataFormatArgs() {}

    private OneDashboardPageWidgetJsonDataFormatArgs(OneDashboardPageWidgetJsonDataFormatArgs $) {
        this.format = $.format;
        this.name = $.name;
        this.precision = $.precision;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OneDashboardPageWidgetJsonDataFormatArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OneDashboardPageWidgetJsonDataFormatArgs $;

        public Builder() {
            $ = new OneDashboardPageWidgetJsonDataFormatArgs();
        }

        public Builder(OneDashboardPageWidgetJsonDataFormatArgs defaults) {
            $ = new OneDashboardPageWidgetJsonDataFormatArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param format (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param name The title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param precision (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
         * 
         * @return builder
         * 
         */
        public Builder precision(@Nullable Output<Integer> precision) {
            $.precision = precision;
            return this;
        }

        /**
         * @param precision (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
         * 
         * @return builder
         * 
         */
        public Builder precision(Integer precision) {
            return precision(Output.of(precision));
        }

        /**
         * @param type (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public OneDashboardPageWidgetJsonDataFormatArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("OneDashboardPageWidgetJsonDataFormatArgs", "name");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("OneDashboardPageWidgetJsonDataFormatArgs", "type");
            }
            return $;
        }
    }

}
