// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventsToMetricsRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventsToMetricsRuleArgs Empty = new EventsToMetricsRuleArgs();

    /**
     * Account with the event and where the metrics will be put.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<Integer> accountId;

    /**
     * @return Account with the event and where the metrics will be put.
     * 
     */
    public Optional<Output<Integer>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Provides additional information about the rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Provides additional information about the rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * True means this rule is enabled. False means the rule is currently not creating metrics.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return True means this rule is enabled. False means the rule is currently not creating metrics.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The name of the rule. This must be unique within an account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the rule. This must be unique within an account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Explains how to create metrics from events.
     * 
     */
    @Import(name="nrql", required=true)
    private Output<String> nrql;

    /**
     * @return Explains how to create metrics from events.
     * 
     */
    public Output<String> nrql() {
        return this.nrql;
    }

    private EventsToMetricsRuleArgs() {}

    private EventsToMetricsRuleArgs(EventsToMetricsRuleArgs $) {
        this.accountId = $.accountId;
        this.description = $.description;
        this.enabled = $.enabled;
        this.name = $.name;
        this.nrql = $.nrql;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventsToMetricsRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventsToMetricsRuleArgs $;

        public Builder() {
            $ = new EventsToMetricsRuleArgs();
        }

        public Builder(EventsToMetricsRuleArgs defaults) {
            $ = new EventsToMetricsRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account with the event and where the metrics will be put.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<Integer> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account with the event and where the metrics will be put.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Integer accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param description Provides additional information about the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Provides additional information about the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled True means this rule is enabled. False means the rule is currently not creating metrics.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled True means this rule is enabled. False means the rule is currently not creating metrics.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name The name of the rule. This must be unique within an account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the rule. This must be unique within an account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nrql Explains how to create metrics from events.
         * 
         * @return builder
         * 
         */
        public Builder nrql(Output<String> nrql) {
            $.nrql = nrql;
            return this;
        }

        /**
         * @param nrql Explains how to create metrics from events.
         * 
         * @return builder
         * 
         */
        public Builder nrql(String nrql) {
            return nrql(Output.of(nrql));
        }

        public EventsToMetricsRuleArgs build() {
            $.nrql = Objects.requireNonNull($.nrql, "expected parameter 'nrql' to be non-null");
            return $;
        }
    }

}
