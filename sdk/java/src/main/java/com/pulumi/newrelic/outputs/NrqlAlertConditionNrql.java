// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NrqlAlertConditionNrql {
    /**
     * @return Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated in one-minute time windows. The start time depends on this value. It&#39;s recommended to set this to 3 minutes. An offset of less than 3 minutes will trigger violations sooner, but you may see more false positives and negatives due to data latency. With `evaluation_offset` set to 3 minutes, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`.&lt;br&gt;
     * &lt;small&gt;\***Note**: One of `evaluation_offset` _or_ `since_value` must be set, but not both.&lt;/small&gt;
     * 
     * @deprecated
     * use `aggregation_method` attribute instead
     * 
     */
    @Deprecated /* use `aggregation_method` attribute instead */
    private @Nullable Integer evaluationOffset;
    /**
     * @return The NRQL query to execute for the condition.
     * 
     */
    private String query;
    /**
     * @return **DEPRECATED:** Use `evaluation_offset` instead. The value to be used in the `SINCE &lt;X&gt; minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive). &lt;br&gt;
     * &lt;small&gt;\***Note**: One of `evaluation_offset` _or_ `since_value` must be set, but not both.&lt;/small&gt;
     * 
     * @deprecated
     * use `aggregation_method` attribute instead
     * 
     */
    @Deprecated /* use `aggregation_method` attribute instead */
    private @Nullable String sinceValue;

    private NrqlAlertConditionNrql() {}
    /**
     * @return Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated in one-minute time windows. The start time depends on this value. It&#39;s recommended to set this to 3 minutes. An offset of less than 3 minutes will trigger violations sooner, but you may see more false positives and negatives due to data latency. With `evaluation_offset` set to 3 minutes, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`.&lt;br&gt;
     * &lt;small&gt;\***Note**: One of `evaluation_offset` _or_ `since_value` must be set, but not both.&lt;/small&gt;
     * 
     * @deprecated
     * use `aggregation_method` attribute instead
     * 
     */
    @Deprecated /* use `aggregation_method` attribute instead */
    public Optional<Integer> evaluationOffset() {
        return Optional.ofNullable(this.evaluationOffset);
    }
    /**
     * @return The NRQL query to execute for the condition.
     * 
     */
    public String query() {
        return this.query;
    }
    /**
     * @return **DEPRECATED:** Use `evaluation_offset` instead. The value to be used in the `SINCE &lt;X&gt; minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive). &lt;br&gt;
     * &lt;small&gt;\***Note**: One of `evaluation_offset` _or_ `since_value` must be set, but not both.&lt;/small&gt;
     * 
     * @deprecated
     * use `aggregation_method` attribute instead
     * 
     */
    @Deprecated /* use `aggregation_method` attribute instead */
    public Optional<String> sinceValue() {
        return Optional.ofNullable(this.sinceValue);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NrqlAlertConditionNrql defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer evaluationOffset;
        private String query;
        private @Nullable String sinceValue;
        public Builder() {}
        public Builder(NrqlAlertConditionNrql defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.evaluationOffset = defaults.evaluationOffset;
    	      this.query = defaults.query;
    	      this.sinceValue = defaults.sinceValue;
        }

        @CustomType.Setter
        public Builder evaluationOffset(@Nullable Integer evaluationOffset) {
            this.evaluationOffset = evaluationOffset;
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            this.query = Objects.requireNonNull(query);
            return this;
        }
        @CustomType.Setter
        public Builder sinceValue(@Nullable String sinceValue) {
            this.sinceValue = sinceValue;
            return this;
        }
        public NrqlAlertConditionNrql build() {
            final var o = new NrqlAlertConditionNrql();
            o.evaluationOffset = evaluationOffset;
            o.query = query;
            o.sinceValue = sinceValue;
            return o;
        }
    }
}
