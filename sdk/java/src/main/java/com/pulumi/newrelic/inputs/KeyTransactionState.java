// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeyTransactionState extends com.pulumi.resources.ResourceArgs {

    public static final KeyTransactionState Empty = new KeyTransactionState();

    /**
     * A decimal value, measuring user satisfaction with response times, ranging from 0 (frustrated) to 1 (satisfied).
     * 
     */
    @Import(name="apdexIndex")
    private @Nullable Output<Double> apdexIndex;

    /**
     * @return A decimal value, measuring user satisfaction with response times, ranging from 0 (frustrated) to 1 (satisfied).
     * 
     */
    public Optional<Output<Double>> apdexIndex() {
        return Optional.ofNullable(this.apdexIndex);
    }

    /**
     * The GUID of the APM Application comprising transactions, of which one would be made a key transaction.
     * 
     */
    @Import(name="applicationGuid")
    private @Nullable Output<String> applicationGuid;

    /**
     * @return The GUID of the APM Application comprising transactions, of which one would be made a key transaction.
     * 
     */
    public Optional<Output<String>> applicationGuid() {
        return Optional.ofNullable(this.applicationGuid);
    }

    /**
     * A decimal value representing the response time threshold for satisfactory experience (e.g., 0.5 seconds).
     * 
     * &gt; **NOTE:** It may be noted that the `metric_name` and `application_guid` of a Key Transaction _cannot_ be updated in a key transaction that has already been created; since this is not supported. As a consequence, altering the values of `application_guid` and/or `metric_name` of a `newrelic.KeyTransaction` resource created (to try updating these values) would result in `pulumi preview` prompting a forced destruction and re-creation of the resource.
     * 
     */
    @Import(name="browserApdexTarget")
    private @Nullable Output<Double> browserApdexTarget;

    /**
     * @return A decimal value representing the response time threshold for satisfactory experience (e.g., 0.5 seconds).
     * 
     * &gt; **NOTE:** It may be noted that the `metric_name` and `application_guid` of a Key Transaction _cannot_ be updated in a key transaction that has already been created; since this is not supported. As a consequence, altering the values of `application_guid` and/or `metric_name` of a `newrelic.KeyTransaction` resource created (to try updating these values) would result in `pulumi preview` prompting a forced destruction and re-creation of the resource.
     * 
     */
    public Optional<Output<Double>> browserApdexTarget() {
        return Optional.ofNullable(this.browserApdexTarget);
    }

    /**
     * The domain of the entity monitored by the key transaction.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The domain of the entity monitored by the key transaction.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * The name of the underlying metric monitored by the key transaction to be created.
     * 
     */
    @Import(name="metricName")
    private @Nullable Output<String> metricName;

    /**
     * @return The name of the underlying metric monitored by the key transaction to be created.
     * 
     */
    public Optional<Output<String>> metricName() {
        return Optional.ofNullable(this.metricName);
    }

    /**
     * The name of the key transaction.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the key transaction.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The type of the entity monitored by the key transaction.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the entity monitored by the key transaction.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private KeyTransactionState() {}

    private KeyTransactionState(KeyTransactionState $) {
        this.apdexIndex = $.apdexIndex;
        this.applicationGuid = $.applicationGuid;
        this.browserApdexTarget = $.browserApdexTarget;
        this.domain = $.domain;
        this.metricName = $.metricName;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyTransactionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyTransactionState $;

        public Builder() {
            $ = new KeyTransactionState();
        }

        public Builder(KeyTransactionState defaults) {
            $ = new KeyTransactionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apdexIndex A decimal value, measuring user satisfaction with response times, ranging from 0 (frustrated) to 1 (satisfied).
         * 
         * @return builder
         * 
         */
        public Builder apdexIndex(@Nullable Output<Double> apdexIndex) {
            $.apdexIndex = apdexIndex;
            return this;
        }

        /**
         * @param apdexIndex A decimal value, measuring user satisfaction with response times, ranging from 0 (frustrated) to 1 (satisfied).
         * 
         * @return builder
         * 
         */
        public Builder apdexIndex(Double apdexIndex) {
            return apdexIndex(Output.of(apdexIndex));
        }

        /**
         * @param applicationGuid The GUID of the APM Application comprising transactions, of which one would be made a key transaction.
         * 
         * @return builder
         * 
         */
        public Builder applicationGuid(@Nullable Output<String> applicationGuid) {
            $.applicationGuid = applicationGuid;
            return this;
        }

        /**
         * @param applicationGuid The GUID of the APM Application comprising transactions, of which one would be made a key transaction.
         * 
         * @return builder
         * 
         */
        public Builder applicationGuid(String applicationGuid) {
            return applicationGuid(Output.of(applicationGuid));
        }

        /**
         * @param browserApdexTarget A decimal value representing the response time threshold for satisfactory experience (e.g., 0.5 seconds).
         * 
         * &gt; **NOTE:** It may be noted that the `metric_name` and `application_guid` of a Key Transaction _cannot_ be updated in a key transaction that has already been created; since this is not supported. As a consequence, altering the values of `application_guid` and/or `metric_name` of a `newrelic.KeyTransaction` resource created (to try updating these values) would result in `pulumi preview` prompting a forced destruction and re-creation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder browserApdexTarget(@Nullable Output<Double> browserApdexTarget) {
            $.browserApdexTarget = browserApdexTarget;
            return this;
        }

        /**
         * @param browserApdexTarget A decimal value representing the response time threshold for satisfactory experience (e.g., 0.5 seconds).
         * 
         * &gt; **NOTE:** It may be noted that the `metric_name` and `application_guid` of a Key Transaction _cannot_ be updated in a key transaction that has already been created; since this is not supported. As a consequence, altering the values of `application_guid` and/or `metric_name` of a `newrelic.KeyTransaction` resource created (to try updating these values) would result in `pulumi preview` prompting a forced destruction and re-creation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder browserApdexTarget(Double browserApdexTarget) {
            return browserApdexTarget(Output.of(browserApdexTarget));
        }

        /**
         * @param domain The domain of the entity monitored by the key transaction.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain of the entity monitored by the key transaction.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param metricName The name of the underlying metric monitored by the key transaction to be created.
         * 
         * @return builder
         * 
         */
        public Builder metricName(@Nullable Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricName The name of the underlying metric monitored by the key transaction to be created.
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        /**
         * @param name The name of the key transaction.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the key transaction.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type The type of the entity monitored by the key transaction.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the entity monitored by the key transaction.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public KeyTransactionState build() {
            return $;
        }
    }

}
