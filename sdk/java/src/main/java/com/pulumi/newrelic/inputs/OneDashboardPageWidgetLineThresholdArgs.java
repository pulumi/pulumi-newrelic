// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OneDashboardPageWidgetLineThresholdArgs extends com.pulumi.resources.ResourceArgs {

    public static final OneDashboardPageWidgetLineThresholdArgs Empty = new OneDashboardPageWidgetLineThresholdArgs();

    /**
     * The value &#39;from&#39; which the threshold would need to be applied.
     * 
     */
    @Import(name="from")
    private @Nullable Output<String> from;

    /**
     * @return The value &#39;from&#39; which the threshold would need to be applied.
     * 
     */
    public Optional<Output<String>> from() {
        return Optional.ofNullable(this.from);
    }

    /**
     * The title of the dashboard.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The title of the dashboard.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The severity of the threshold, which would affect the visual appearance of the threshold (such as its color) accordingly. The value of this attribute would need to be one of the following - `warning`, `severe`, `critical`, `success`, `unavailable` which correspond to the severity labels *Warning*, *Approaching critical*, *Critical*, *Good*, *Neutral* in the dropdown that helps specify the severity of thresholds in table widgets in the UI, respectively.
     * 
     */
    @Import(name="severity")
    private @Nullable Output<String> severity;

    /**
     * @return The severity of the threshold, which would affect the visual appearance of the threshold (such as its color) accordingly. The value of this attribute would need to be one of the following - `warning`, `severe`, `critical`, `success`, `unavailable` which correspond to the severity labels *Warning*, *Approaching critical*, *Critical*, *Good*, *Neutral* in the dropdown that helps specify the severity of thresholds in table widgets in the UI, respectively.
     * 
     */
    public Optional<Output<String>> severity() {
        return Optional.ofNullable(this.severity);
    }

    /**
     * The value until which the threshold would need to be applied.
     * 
     */
    @Import(name="to")
    private @Nullable Output<String> to;

    /**
     * @return The value until which the threshold would need to be applied.
     * 
     */
    public Optional<Output<String>> to() {
        return Optional.ofNullable(this.to);
    }

    private OneDashboardPageWidgetLineThresholdArgs() {}

    private OneDashboardPageWidgetLineThresholdArgs(OneDashboardPageWidgetLineThresholdArgs $) {
        this.from = $.from;
        this.name = $.name;
        this.severity = $.severity;
        this.to = $.to;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OneDashboardPageWidgetLineThresholdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OneDashboardPageWidgetLineThresholdArgs $;

        public Builder() {
            $ = new OneDashboardPageWidgetLineThresholdArgs();
        }

        public Builder(OneDashboardPageWidgetLineThresholdArgs defaults) {
            $ = new OneDashboardPageWidgetLineThresholdArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param from The value &#39;from&#39; which the threshold would need to be applied.
         * 
         * @return builder
         * 
         */
        public Builder from(@Nullable Output<String> from) {
            $.from = from;
            return this;
        }

        /**
         * @param from The value &#39;from&#39; which the threshold would need to be applied.
         * 
         * @return builder
         * 
         */
        public Builder from(String from) {
            return from(Output.of(from));
        }

        /**
         * @param name The title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param severity The severity of the threshold, which would affect the visual appearance of the threshold (such as its color) accordingly. The value of this attribute would need to be one of the following - `warning`, `severe`, `critical`, `success`, `unavailable` which correspond to the severity labels *Warning*, *Approaching critical*, *Critical*, *Good*, *Neutral* in the dropdown that helps specify the severity of thresholds in table widgets in the UI, respectively.
         * 
         * @return builder
         * 
         */
        public Builder severity(@Nullable Output<String> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity The severity of the threshold, which would affect the visual appearance of the threshold (such as its color) accordingly. The value of this attribute would need to be one of the following - `warning`, `severe`, `critical`, `success`, `unavailable` which correspond to the severity labels *Warning*, *Approaching critical*, *Critical*, *Good*, *Neutral* in the dropdown that helps specify the severity of thresholds in table widgets in the UI, respectively.
         * 
         * @return builder
         * 
         */
        public Builder severity(String severity) {
            return severity(Output.of(severity));
        }

        /**
         * @param to The value until which the threshold would need to be applied.
         * 
         * @return builder
         * 
         */
        public Builder to(@Nullable Output<String> to) {
            $.to = to;
            return this;
        }

        /**
         * @param to The value until which the threshold would need to be applied.
         * 
         * @return builder
         * 
         */
        public Builder to(String to) {
            return to(Output.of(to));
        }

        public OneDashboardPageWidgetLineThresholdArgs build() {
            return $;
        }
    }

}
