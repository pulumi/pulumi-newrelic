// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGroupResult {
    private String authenticationDomainId;
    /**
     * @return The ID of the fetched matching group.
     * 
     */
    private String id;
    private String name;
    /**
     * @return IDs of users who belong to the group. In the absence of any users in the group, the value of this attribute would be an empty list.
     * 
     */
    private List<String> userIds;

    private GetGroupResult() {}
    public String authenticationDomainId() {
        return this.authenticationDomainId;
    }
    /**
     * @return The ID of the fetched matching group.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return IDs of users who belong to the group. In the absence of any users in the group, the value of this attribute would be an empty list.
     * 
     */
    public List<String> userIds() {
        return this.userIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authenticationDomainId;
        private String id;
        private String name;
        private List<String> userIds;
        public Builder() {}
        public Builder(GetGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationDomainId = defaults.authenticationDomainId;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.userIds = defaults.userIds;
        }

        @CustomType.Setter
        public Builder authenticationDomainId(String authenticationDomainId) {
            if (authenticationDomainId == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "authenticationDomainId");
            }
            this.authenticationDomainId = authenticationDomainId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder userIds(List<String> userIds) {
            if (userIds == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "userIds");
            }
            this.userIds = userIds;
            return this;
        }
        public Builder userIds(String... userIds) {
            return userIds(List.of(userIds));
        }
        public GetGroupResult build() {
            final var _resultValue = new GetGroupResult();
            _resultValue.authenticationDomainId = authenticationDomainId;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.userIds = userIds;
            return _resultValue;
        }
    }
}
