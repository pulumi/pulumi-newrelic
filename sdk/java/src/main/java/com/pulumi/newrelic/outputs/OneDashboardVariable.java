// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.newrelic.outputs.OneDashboardVariableItem;
import com.pulumi.newrelic.outputs.OneDashboardVariableNrqlQuery;
import com.pulumi.newrelic.outputs.OneDashboardVariableOption;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OneDashboardVariable {
    /**
     * @return (Optional) A list of default values for this variable. To select **all** default values, the appropriate value to be used with this argument would be `[&#34;*&#34;]`.
     * 
     */
    private @Nullable List<String> defaultValues;
    /**
     * @return (Optional) Indicates whether this variable supports multiple selection or not. Only applies to variables of type `nrql` or `enum`.
     * 
     */
    private @Nullable Boolean isMultiSelection;
    /**
     * @return (Optional) List of possible values for variables of type `enum`. See Nested item blocks below for details.
     * 
     */
    private @Nullable List<OneDashboardVariableItem> items;
    /**
     * @return The title of the dashboard.
     * 
     */
    private String name;
    /**
     * @return (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for Variables for details.
     * 
     */
    private @Nullable OneDashboardVariableNrqlQuery nrqlQuery;
    /**
     * @return (Optional) Specifies additional options to be added to dashboard variables. Supports the following nested attribute(s) -
     * 
     */
    private @Nullable List<OneDashboardVariableOption> options;
    /**
     * @return (Optional) Indicates the strategy to apply when replacing a variable in a NRQL query. One of `default`, `identifier`, `number` or `string`.
     * 
     */
    private String replacementStrategy;
    /**
     * @return (Optional) A human-friendly display string for this value.
     * 
     */
    private String title;
    /**
     * @return (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
     * 
     */
    private String type;

    private OneDashboardVariable() {}
    /**
     * @return (Optional) A list of default values for this variable. To select **all** default values, the appropriate value to be used with this argument would be `[&#34;*&#34;]`.
     * 
     */
    public List<String> defaultValues() {
        return this.defaultValues == null ? List.of() : this.defaultValues;
    }
    /**
     * @return (Optional) Indicates whether this variable supports multiple selection or not. Only applies to variables of type `nrql` or `enum`.
     * 
     */
    public Optional<Boolean> isMultiSelection() {
        return Optional.ofNullable(this.isMultiSelection);
    }
    /**
     * @return (Optional) List of possible values for variables of type `enum`. See Nested item blocks below for details.
     * 
     */
    public List<OneDashboardVariableItem> items() {
        return this.items == null ? List.of() : this.items;
    }
    /**
     * @return The title of the dashboard.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for Variables for details.
     * 
     */
    public Optional<OneDashboardVariableNrqlQuery> nrqlQuery() {
        return Optional.ofNullable(this.nrqlQuery);
    }
    /**
     * @return (Optional) Specifies additional options to be added to dashboard variables. Supports the following nested attribute(s) -
     * 
     */
    public List<OneDashboardVariableOption> options() {
        return this.options == null ? List.of() : this.options;
    }
    /**
     * @return (Optional) Indicates the strategy to apply when replacing a variable in a NRQL query. One of `default`, `identifier`, `number` or `string`.
     * 
     */
    public String replacementStrategy() {
        return this.replacementStrategy;
    }
    /**
     * @return (Optional) A human-friendly display string for this value.
     * 
     */
    public String title() {
        return this.title;
    }
    /**
     * @return (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OneDashboardVariable defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> defaultValues;
        private @Nullable Boolean isMultiSelection;
        private @Nullable List<OneDashboardVariableItem> items;
        private String name;
        private @Nullable OneDashboardVariableNrqlQuery nrqlQuery;
        private @Nullable List<OneDashboardVariableOption> options;
        private String replacementStrategy;
        private String title;
        private String type;
        public Builder() {}
        public Builder(OneDashboardVariable defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultValues = defaults.defaultValues;
    	      this.isMultiSelection = defaults.isMultiSelection;
    	      this.items = defaults.items;
    	      this.name = defaults.name;
    	      this.nrqlQuery = defaults.nrqlQuery;
    	      this.options = defaults.options;
    	      this.replacementStrategy = defaults.replacementStrategy;
    	      this.title = defaults.title;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder defaultValues(@Nullable List<String> defaultValues) {

            this.defaultValues = defaultValues;
            return this;
        }
        public Builder defaultValues(String... defaultValues) {
            return defaultValues(List.of(defaultValues));
        }
        @CustomType.Setter
        public Builder isMultiSelection(@Nullable Boolean isMultiSelection) {

            this.isMultiSelection = isMultiSelection;
            return this;
        }
        @CustomType.Setter
        public Builder items(@Nullable List<OneDashboardVariableItem> items) {

            this.items = items;
            return this;
        }
        public Builder items(OneDashboardVariableItem... items) {
            return items(List.of(items));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("OneDashboardVariable", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nrqlQuery(@Nullable OneDashboardVariableNrqlQuery nrqlQuery) {

            this.nrqlQuery = nrqlQuery;
            return this;
        }
        @CustomType.Setter
        public Builder options(@Nullable List<OneDashboardVariableOption> options) {

            this.options = options;
            return this;
        }
        public Builder options(OneDashboardVariableOption... options) {
            return options(List.of(options));
        }
        @CustomType.Setter
        public Builder replacementStrategy(String replacementStrategy) {
            if (replacementStrategy == null) {
              throw new MissingRequiredPropertyException("OneDashboardVariable", "replacementStrategy");
            }
            this.replacementStrategy = replacementStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder title(String title) {
            if (title == null) {
              throw new MissingRequiredPropertyException("OneDashboardVariable", "title");
            }
            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("OneDashboardVariable", "type");
            }
            this.type = type;
            return this;
        }
        public OneDashboardVariable build() {
            final var _resultValue = new OneDashboardVariable();
            _resultValue.defaultValues = defaultValues;
            _resultValue.isMultiSelection = isMultiSelection;
            _resultValue.items = items;
            _resultValue.name = name;
            _resultValue.nrqlQuery = nrqlQuery;
            _resultValue.options = options;
            _resultValue.replacementStrategy = replacementStrategy;
            _resultValue.title = title;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
