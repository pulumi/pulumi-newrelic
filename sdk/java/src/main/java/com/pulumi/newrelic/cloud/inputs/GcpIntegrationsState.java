// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.cloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsAppEngineArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsBigQueryArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsBigTableArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsComposerArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsDataFlowArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsDataProcArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsDataStoreArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsFireBaseDatabaseArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsFireBaseHostingArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsFireBaseStorageArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsFireStoreArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsFunctionsArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsInterconnectArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsKubernetesArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsLoadBalancingArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsMemCacheArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsPubSubArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsRedisArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsRouterArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsRunArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsSpannerArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsSqlArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsStorageArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsVirtualMachinesArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsVpcAccessArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GcpIntegrationsState extends com.pulumi.resources.ResourceArgs {

    public static final GcpIntegrationsState Empty = new GcpIntegrationsState();

    /**
     * The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<Integer> accountId;

    /**
     * @return The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
     * 
     */
    public Optional<Output<Integer>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * App Engine integration. See Integration blocks below for details.
     * 
     */
    @Import(name="appEngine")
    private @Nullable Output<GcpIntegrationsAppEngineArgs> appEngine;

    /**
     * @return App Engine integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsAppEngineArgs>> appEngine() {
        return Optional.ofNullable(this.appEngine);
    }

    /**
     * Biq Query integration. See Integration blocks below for details.
     * 
     */
    @Import(name="bigQuery")
    private @Nullable Output<GcpIntegrationsBigQueryArgs> bigQuery;

    /**
     * @return Biq Query integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsBigQueryArgs>> bigQuery() {
        return Optional.ofNullable(this.bigQuery);
    }

    /**
     * Big Table. See Integration blocks below for details.
     * 
     */
    @Import(name="bigTable")
    private @Nullable Output<GcpIntegrationsBigTableArgs> bigTable;

    /**
     * @return Big Table. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsBigTableArgs>> bigTable() {
        return Optional.ofNullable(this.bigTable);
    }

    /**
     * Composer integration. See Integration blocks below for details.
     * 
     */
    @Import(name="composer")
    private @Nullable Output<GcpIntegrationsComposerArgs> composer;

    /**
     * @return Composer integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsComposerArgs>> composer() {
        return Optional.ofNullable(this.composer);
    }

    /**
     * Data Flow integration. See Integration blocks below for details.
     * 
     */
    @Import(name="dataFlow")
    private @Nullable Output<GcpIntegrationsDataFlowArgs> dataFlow;

    /**
     * @return Data Flow integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsDataFlowArgs>> dataFlow() {
        return Optional.ofNullable(this.dataFlow);
    }

    /**
     * Data Proc integration. See Integration blocks below for details.
     * 
     */
    @Import(name="dataProc")
    private @Nullable Output<GcpIntegrationsDataProcArgs> dataProc;

    /**
     * @return Data Proc integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsDataProcArgs>> dataProc() {
        return Optional.ofNullable(this.dataProc);
    }

    /**
     * Data Store integration. See Integration blocks below for details.
     * 
     */
    @Import(name="dataStore")
    private @Nullable Output<GcpIntegrationsDataStoreArgs> dataStore;

    /**
     * @return Data Store integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsDataStoreArgs>> dataStore() {
        return Optional.ofNullable(this.dataStore);
    }

    /**
     * Fire Base Database integration. See Integration blocks below for details.
     * 
     */
    @Import(name="fireBaseDatabase")
    private @Nullable Output<GcpIntegrationsFireBaseDatabaseArgs> fireBaseDatabase;

    /**
     * @return Fire Base Database integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsFireBaseDatabaseArgs>> fireBaseDatabase() {
        return Optional.ofNullable(this.fireBaseDatabase);
    }

    /**
     * Fire Base Hosting integration. See Integration blocks below for details.
     * 
     */
    @Import(name="fireBaseHosting")
    private @Nullable Output<GcpIntegrationsFireBaseHostingArgs> fireBaseHosting;

    /**
     * @return Fire Base Hosting integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsFireBaseHostingArgs>> fireBaseHosting() {
        return Optional.ofNullable(this.fireBaseHosting);
    }

    /**
     * Fire Base Storage integration. See Integration blocks below for details.
     * 
     */
    @Import(name="fireBaseStorage")
    private @Nullable Output<GcpIntegrationsFireBaseStorageArgs> fireBaseStorage;

    /**
     * @return Fire Base Storage integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsFireBaseStorageArgs>> fireBaseStorage() {
        return Optional.ofNullable(this.fireBaseStorage);
    }

    /**
     * Fire Store integration. See Integration blocks below for details.
     * 
     */
    @Import(name="fireStore")
    private @Nullable Output<GcpIntegrationsFireStoreArgs> fireStore;

    /**
     * @return Fire Store integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsFireStoreArgs>> fireStore() {
        return Optional.ofNullable(this.fireStore);
    }

    /**
     * Functions integration. See Integration blocks below for details.
     * 
     */
    @Import(name="functions")
    private @Nullable Output<GcpIntegrationsFunctionsArgs> functions;

    /**
     * @return Functions integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsFunctionsArgs>> functions() {
        return Optional.ofNullable(this.functions);
    }

    /**
     * Interconnect integration. See Integration blocks below for details.
     * 
     */
    @Import(name="interconnect")
    private @Nullable Output<GcpIntegrationsInterconnectArgs> interconnect;

    /**
     * @return Interconnect integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsInterconnectArgs>> interconnect() {
        return Optional.ofNullable(this.interconnect);
    }

    /**
     * Kubernetes integration. See Integration blocks below for details.
     * 
     */
    @Import(name="kubernetes")
    private @Nullable Output<GcpIntegrationsKubernetesArgs> kubernetes;

    /**
     * @return Kubernetes integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsKubernetesArgs>> kubernetes() {
        return Optional.ofNullable(this.kubernetes);
    }

    /**
     * The ID of the linked GCP account in New Relic.
     * 
     */
    @Import(name="linkedAccountId")
    private @Nullable Output<Integer> linkedAccountId;

    /**
     * @return The ID of the linked GCP account in New Relic.
     * 
     */
    public Optional<Output<Integer>> linkedAccountId() {
        return Optional.ofNullable(this.linkedAccountId);
    }

    /**
     * GCP big table service
     * 
     */
    @Import(name="loadBalancing")
    private @Nullable Output<GcpIntegrationsLoadBalancingArgs> loadBalancing;

    /**
     * @return GCP big table service
     * 
     */
    public Optional<Output<GcpIntegrationsLoadBalancingArgs>> loadBalancing() {
        return Optional.ofNullable(this.loadBalancing);
    }

    /**
     * Mem cache integration. See Integration blocks below for details.
     * 
     */
    @Import(name="memCache")
    private @Nullable Output<GcpIntegrationsMemCacheArgs> memCache;

    /**
     * @return Mem cache integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsMemCacheArgs>> memCache() {
        return Optional.ofNullable(this.memCache);
    }

    /**
     * Pub/Sub integration. See Integration blocks below for details.
     * 
     */
    @Import(name="pubSub")
    private @Nullable Output<GcpIntegrationsPubSubArgs> pubSub;

    /**
     * @return Pub/Sub integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsPubSubArgs>> pubSub() {
        return Optional.ofNullable(this.pubSub);
    }

    /**
     * Redis integration. See Integration blocks below for details.
     * 
     */
    @Import(name="redis")
    private @Nullable Output<GcpIntegrationsRedisArgs> redis;

    /**
     * @return Redis integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsRedisArgs>> redis() {
        return Optional.ofNullable(this.redis);
    }

    /**
     * Router integration. See Integration blocks below for details.
     * 
     */
    @Import(name="router")
    private @Nullable Output<GcpIntegrationsRouterArgs> router;

    /**
     * @return Router integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsRouterArgs>> router() {
        return Optional.ofNullable(this.router);
    }

    /**
     * Run integration. See Integration blocks below for details.
     * 
     */
    @Import(name="run")
    private @Nullable Output<GcpIntegrationsRunArgs> run;

    /**
     * @return Run integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsRunArgs>> run() {
        return Optional.ofNullable(this.run);
    }

    /**
     * Spanner integration. See Integration blocks below for details.
     * 
     */
    @Import(name="spanner")
    private @Nullable Output<GcpIntegrationsSpannerArgs> spanner;

    /**
     * @return Spanner integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsSpannerArgs>> spanner() {
        return Optional.ofNullable(this.spanner);
    }

    /**
     * SQL integration. See Integration blocks below for details.
     * 
     */
    @Import(name="sql")
    private @Nullable Output<GcpIntegrationsSqlArgs> sql;

    /**
     * @return SQL integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsSqlArgs>> sql() {
        return Optional.ofNullable(this.sql);
    }

    /**
     * Storage integration. See Integration blocks below for details.
     * 
     */
    @Import(name="storage")
    private @Nullable Output<GcpIntegrationsStorageArgs> storage;

    /**
     * @return Storage integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsStorageArgs>> storage() {
        return Optional.ofNullable(this.storage);
    }

    /**
     * Virtual machines integration. See Integration blocks below for details.
     * 
     */
    @Import(name="virtualMachines")
    private @Nullable Output<GcpIntegrationsVirtualMachinesArgs> virtualMachines;

    /**
     * @return Virtual machines integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsVirtualMachinesArgs>> virtualMachines() {
        return Optional.ofNullable(this.virtualMachines);
    }

    /**
     * VPC Access integration. See Integration blocks below for details.
     * 
     */
    @Import(name="vpcAccess")
    private @Nullable Output<GcpIntegrationsVpcAccessArgs> vpcAccess;

    /**
     * @return VPC Access integration. See Integration blocks below for details.
     * 
     */
    public Optional<Output<GcpIntegrationsVpcAccessArgs>> vpcAccess() {
        return Optional.ofNullable(this.vpcAccess);
    }

    private GcpIntegrationsState() {}

    private GcpIntegrationsState(GcpIntegrationsState $) {
        this.accountId = $.accountId;
        this.appEngine = $.appEngine;
        this.bigQuery = $.bigQuery;
        this.bigTable = $.bigTable;
        this.composer = $.composer;
        this.dataFlow = $.dataFlow;
        this.dataProc = $.dataProc;
        this.dataStore = $.dataStore;
        this.fireBaseDatabase = $.fireBaseDatabase;
        this.fireBaseHosting = $.fireBaseHosting;
        this.fireBaseStorage = $.fireBaseStorage;
        this.fireStore = $.fireStore;
        this.functions = $.functions;
        this.interconnect = $.interconnect;
        this.kubernetes = $.kubernetes;
        this.linkedAccountId = $.linkedAccountId;
        this.loadBalancing = $.loadBalancing;
        this.memCache = $.memCache;
        this.pubSub = $.pubSub;
        this.redis = $.redis;
        this.router = $.router;
        this.run = $.run;
        this.spanner = $.spanner;
        this.sql = $.sql;
        this.storage = $.storage;
        this.virtualMachines = $.virtualMachines;
        this.vpcAccess = $.vpcAccess;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GcpIntegrationsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GcpIntegrationsState $;

        public Builder() {
            $ = new GcpIntegrationsState();
        }

        public Builder(GcpIntegrationsState defaults) {
            $ = new GcpIntegrationsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<Integer> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Integer accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param appEngine App Engine integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder appEngine(@Nullable Output<GcpIntegrationsAppEngineArgs> appEngine) {
            $.appEngine = appEngine;
            return this;
        }

        /**
         * @param appEngine App Engine integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder appEngine(GcpIntegrationsAppEngineArgs appEngine) {
            return appEngine(Output.of(appEngine));
        }

        /**
         * @param bigQuery Biq Query integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder bigQuery(@Nullable Output<GcpIntegrationsBigQueryArgs> bigQuery) {
            $.bigQuery = bigQuery;
            return this;
        }

        /**
         * @param bigQuery Biq Query integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder bigQuery(GcpIntegrationsBigQueryArgs bigQuery) {
            return bigQuery(Output.of(bigQuery));
        }

        /**
         * @param bigTable Big Table. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder bigTable(@Nullable Output<GcpIntegrationsBigTableArgs> bigTable) {
            $.bigTable = bigTable;
            return this;
        }

        /**
         * @param bigTable Big Table. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder bigTable(GcpIntegrationsBigTableArgs bigTable) {
            return bigTable(Output.of(bigTable));
        }

        /**
         * @param composer Composer integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder composer(@Nullable Output<GcpIntegrationsComposerArgs> composer) {
            $.composer = composer;
            return this;
        }

        /**
         * @param composer Composer integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder composer(GcpIntegrationsComposerArgs composer) {
            return composer(Output.of(composer));
        }

        /**
         * @param dataFlow Data Flow integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder dataFlow(@Nullable Output<GcpIntegrationsDataFlowArgs> dataFlow) {
            $.dataFlow = dataFlow;
            return this;
        }

        /**
         * @param dataFlow Data Flow integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder dataFlow(GcpIntegrationsDataFlowArgs dataFlow) {
            return dataFlow(Output.of(dataFlow));
        }

        /**
         * @param dataProc Data Proc integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder dataProc(@Nullable Output<GcpIntegrationsDataProcArgs> dataProc) {
            $.dataProc = dataProc;
            return this;
        }

        /**
         * @param dataProc Data Proc integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder dataProc(GcpIntegrationsDataProcArgs dataProc) {
            return dataProc(Output.of(dataProc));
        }

        /**
         * @param dataStore Data Store integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder dataStore(@Nullable Output<GcpIntegrationsDataStoreArgs> dataStore) {
            $.dataStore = dataStore;
            return this;
        }

        /**
         * @param dataStore Data Store integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder dataStore(GcpIntegrationsDataStoreArgs dataStore) {
            return dataStore(Output.of(dataStore));
        }

        /**
         * @param fireBaseDatabase Fire Base Database integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder fireBaseDatabase(@Nullable Output<GcpIntegrationsFireBaseDatabaseArgs> fireBaseDatabase) {
            $.fireBaseDatabase = fireBaseDatabase;
            return this;
        }

        /**
         * @param fireBaseDatabase Fire Base Database integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder fireBaseDatabase(GcpIntegrationsFireBaseDatabaseArgs fireBaseDatabase) {
            return fireBaseDatabase(Output.of(fireBaseDatabase));
        }

        /**
         * @param fireBaseHosting Fire Base Hosting integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder fireBaseHosting(@Nullable Output<GcpIntegrationsFireBaseHostingArgs> fireBaseHosting) {
            $.fireBaseHosting = fireBaseHosting;
            return this;
        }

        /**
         * @param fireBaseHosting Fire Base Hosting integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder fireBaseHosting(GcpIntegrationsFireBaseHostingArgs fireBaseHosting) {
            return fireBaseHosting(Output.of(fireBaseHosting));
        }

        /**
         * @param fireBaseStorage Fire Base Storage integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder fireBaseStorage(@Nullable Output<GcpIntegrationsFireBaseStorageArgs> fireBaseStorage) {
            $.fireBaseStorage = fireBaseStorage;
            return this;
        }

        /**
         * @param fireBaseStorage Fire Base Storage integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder fireBaseStorage(GcpIntegrationsFireBaseStorageArgs fireBaseStorage) {
            return fireBaseStorage(Output.of(fireBaseStorage));
        }

        /**
         * @param fireStore Fire Store integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder fireStore(@Nullable Output<GcpIntegrationsFireStoreArgs> fireStore) {
            $.fireStore = fireStore;
            return this;
        }

        /**
         * @param fireStore Fire Store integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder fireStore(GcpIntegrationsFireStoreArgs fireStore) {
            return fireStore(Output.of(fireStore));
        }

        /**
         * @param functions Functions integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder functions(@Nullable Output<GcpIntegrationsFunctionsArgs> functions) {
            $.functions = functions;
            return this;
        }

        /**
         * @param functions Functions integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder functions(GcpIntegrationsFunctionsArgs functions) {
            return functions(Output.of(functions));
        }

        /**
         * @param interconnect Interconnect integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder interconnect(@Nullable Output<GcpIntegrationsInterconnectArgs> interconnect) {
            $.interconnect = interconnect;
            return this;
        }

        /**
         * @param interconnect Interconnect integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder interconnect(GcpIntegrationsInterconnectArgs interconnect) {
            return interconnect(Output.of(interconnect));
        }

        /**
         * @param kubernetes Kubernetes integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder kubernetes(@Nullable Output<GcpIntegrationsKubernetesArgs> kubernetes) {
            $.kubernetes = kubernetes;
            return this;
        }

        /**
         * @param kubernetes Kubernetes integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder kubernetes(GcpIntegrationsKubernetesArgs kubernetes) {
            return kubernetes(Output.of(kubernetes));
        }

        /**
         * @param linkedAccountId The ID of the linked GCP account in New Relic.
         * 
         * @return builder
         * 
         */
        public Builder linkedAccountId(@Nullable Output<Integer> linkedAccountId) {
            $.linkedAccountId = linkedAccountId;
            return this;
        }

        /**
         * @param linkedAccountId The ID of the linked GCP account in New Relic.
         * 
         * @return builder
         * 
         */
        public Builder linkedAccountId(Integer linkedAccountId) {
            return linkedAccountId(Output.of(linkedAccountId));
        }

        /**
         * @param loadBalancing GCP big table service
         * 
         * @return builder
         * 
         */
        public Builder loadBalancing(@Nullable Output<GcpIntegrationsLoadBalancingArgs> loadBalancing) {
            $.loadBalancing = loadBalancing;
            return this;
        }

        /**
         * @param loadBalancing GCP big table service
         * 
         * @return builder
         * 
         */
        public Builder loadBalancing(GcpIntegrationsLoadBalancingArgs loadBalancing) {
            return loadBalancing(Output.of(loadBalancing));
        }

        /**
         * @param memCache Mem cache integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder memCache(@Nullable Output<GcpIntegrationsMemCacheArgs> memCache) {
            $.memCache = memCache;
            return this;
        }

        /**
         * @param memCache Mem cache integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder memCache(GcpIntegrationsMemCacheArgs memCache) {
            return memCache(Output.of(memCache));
        }

        /**
         * @param pubSub Pub/Sub integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder pubSub(@Nullable Output<GcpIntegrationsPubSubArgs> pubSub) {
            $.pubSub = pubSub;
            return this;
        }

        /**
         * @param pubSub Pub/Sub integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder pubSub(GcpIntegrationsPubSubArgs pubSub) {
            return pubSub(Output.of(pubSub));
        }

        /**
         * @param redis Redis integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder redis(@Nullable Output<GcpIntegrationsRedisArgs> redis) {
            $.redis = redis;
            return this;
        }

        /**
         * @param redis Redis integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder redis(GcpIntegrationsRedisArgs redis) {
            return redis(Output.of(redis));
        }

        /**
         * @param router Router integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder router(@Nullable Output<GcpIntegrationsRouterArgs> router) {
            $.router = router;
            return this;
        }

        /**
         * @param router Router integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder router(GcpIntegrationsRouterArgs router) {
            return router(Output.of(router));
        }

        /**
         * @param run Run integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder run(@Nullable Output<GcpIntegrationsRunArgs> run) {
            $.run = run;
            return this;
        }

        /**
         * @param run Run integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder run(GcpIntegrationsRunArgs run) {
            return run(Output.of(run));
        }

        /**
         * @param spanner Spanner integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder spanner(@Nullable Output<GcpIntegrationsSpannerArgs> spanner) {
            $.spanner = spanner;
            return this;
        }

        /**
         * @param spanner Spanner integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder spanner(GcpIntegrationsSpannerArgs spanner) {
            return spanner(Output.of(spanner));
        }

        /**
         * @param sql SQL integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder sql(@Nullable Output<GcpIntegrationsSqlArgs> sql) {
            $.sql = sql;
            return this;
        }

        /**
         * @param sql SQL integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder sql(GcpIntegrationsSqlArgs sql) {
            return sql(Output.of(sql));
        }

        /**
         * @param storage Storage integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder storage(@Nullable Output<GcpIntegrationsStorageArgs> storage) {
            $.storage = storage;
            return this;
        }

        /**
         * @param storage Storage integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder storage(GcpIntegrationsStorageArgs storage) {
            return storage(Output.of(storage));
        }

        /**
         * @param virtualMachines Virtual machines integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder virtualMachines(@Nullable Output<GcpIntegrationsVirtualMachinesArgs> virtualMachines) {
            $.virtualMachines = virtualMachines;
            return this;
        }

        /**
         * @param virtualMachines Virtual machines integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder virtualMachines(GcpIntegrationsVirtualMachinesArgs virtualMachines) {
            return virtualMachines(Output.of(virtualMachines));
        }

        /**
         * @param vpcAccess VPC Access integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder vpcAccess(@Nullable Output<GcpIntegrationsVpcAccessArgs> vpcAccess) {
            $.vpcAccess = vpcAccess;
            return this;
        }

        /**
         * @param vpcAccess VPC Access integration. See Integration blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder vpcAccess(GcpIntegrationsVpcAccessArgs vpcAccess) {
            return vpcAccess(Output.of(vpcAccess));
        }

        public GcpIntegrationsState build() {
            return $;
        }
    }

}
