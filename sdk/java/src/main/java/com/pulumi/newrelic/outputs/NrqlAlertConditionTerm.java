// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NrqlAlertConditionTerm {
    /**
     * @deprecated
     * use `threshold_duration` attribute instead
     * 
     */
    @Deprecated /* use `threshold_duration` attribute instead */
    private @Nullable Integer duration;
    private @Nullable String operator;
    private @Nullable String priority;
    private Double threshold;
    private @Nullable Integer thresholdDuration;
    private @Nullable String thresholdOccurrences;
    /**
     * @deprecated
     * use `threshold_occurrences` attribute instead
     * 
     */
    @Deprecated /* use `threshold_occurrences` attribute instead */
    private @Nullable String timeFunction;

    private NrqlAlertConditionTerm() {}
    /**
     * @deprecated
     * use `threshold_duration` attribute instead
     * 
     */
    @Deprecated /* use `threshold_duration` attribute instead */
    public Optional<Integer> duration() {
        return Optional.ofNullable(this.duration);
    }
    public Optional<String> operator() {
        return Optional.ofNullable(this.operator);
    }
    public Optional<String> priority() {
        return Optional.ofNullable(this.priority);
    }
    public Double threshold() {
        return this.threshold;
    }
    public Optional<Integer> thresholdDuration() {
        return Optional.ofNullable(this.thresholdDuration);
    }
    public Optional<String> thresholdOccurrences() {
        return Optional.ofNullable(this.thresholdOccurrences);
    }
    /**
     * @deprecated
     * use `threshold_occurrences` attribute instead
     * 
     */
    @Deprecated /* use `threshold_occurrences` attribute instead */
    public Optional<String> timeFunction() {
        return Optional.ofNullable(this.timeFunction);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NrqlAlertConditionTerm defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer duration;
        private @Nullable String operator;
        private @Nullable String priority;
        private Double threshold;
        private @Nullable Integer thresholdDuration;
        private @Nullable String thresholdOccurrences;
        private @Nullable String timeFunction;
        public Builder() {}
        public Builder(NrqlAlertConditionTerm defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.duration = defaults.duration;
    	      this.operator = defaults.operator;
    	      this.priority = defaults.priority;
    	      this.threshold = defaults.threshold;
    	      this.thresholdDuration = defaults.thresholdDuration;
    	      this.thresholdOccurrences = defaults.thresholdOccurrences;
    	      this.timeFunction = defaults.timeFunction;
        }

        @CustomType.Setter
        public Builder duration(@Nullable Integer duration) {

            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder operator(@Nullable String operator) {

            this.operator = operator;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable String priority) {

            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(Double threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("NrqlAlertConditionTerm", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder thresholdDuration(@Nullable Integer thresholdDuration) {

            this.thresholdDuration = thresholdDuration;
            return this;
        }
        @CustomType.Setter
        public Builder thresholdOccurrences(@Nullable String thresholdOccurrences) {

            this.thresholdOccurrences = thresholdOccurrences;
            return this;
        }
        @CustomType.Setter
        public Builder timeFunction(@Nullable String timeFunction) {

            this.timeFunction = timeFunction;
            return this;
        }
        public NrqlAlertConditionTerm build() {
            final var _resultValue = new NrqlAlertConditionTerm();
            _resultValue.duration = duration;
            _resultValue.operator = operator;
            _resultValue.priority = priority;
            _resultValue.threshold = threshold;
            _resultValue.thresholdDuration = thresholdDuration;
            _resultValue.thresholdOccurrences = thresholdOccurrences;
            _resultValue.timeFunction = timeFunction;
            return _resultValue;
        }
    }
}
