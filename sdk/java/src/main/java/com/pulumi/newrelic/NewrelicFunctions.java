// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.inputs.GetAccountArgs;
import com.pulumi.newrelic.inputs.GetAccountPlainArgs;
import com.pulumi.newrelic.inputs.GetAlertChannelArgs;
import com.pulumi.newrelic.inputs.GetAlertChannelPlainArgs;
import com.pulumi.newrelic.inputs.GetAlertPolicyArgs;
import com.pulumi.newrelic.inputs.GetAlertPolicyPlainArgs;
import com.pulumi.newrelic.inputs.GetApplicationArgs;
import com.pulumi.newrelic.inputs.GetApplicationPlainArgs;
import com.pulumi.newrelic.inputs.GetCloudAccountArgs;
import com.pulumi.newrelic.inputs.GetCloudAccountPlainArgs;
import com.pulumi.newrelic.inputs.GetEntityArgs;
import com.pulumi.newrelic.inputs.GetEntityPlainArgs;
import com.pulumi.newrelic.inputs.GetKeyTransactionArgs;
import com.pulumi.newrelic.inputs.GetKeyTransactionPlainArgs;
import com.pulumi.newrelic.outputs.GetAccountResult;
import com.pulumi.newrelic.outputs.GetAlertChannelResult;
import com.pulumi.newrelic.outputs.GetAlertPolicyResult;
import com.pulumi.newrelic.outputs.GetApplicationResult;
import com.pulumi.newrelic.outputs.GetCloudAccountResult;
import com.pulumi.newrelic.outputs.GetEntityResult;
import com.pulumi.newrelic.outputs.GetKeyTransactionResult;
import java.util.concurrent.CompletableFuture;

public final class NewrelicFunctions {
    /**
     * Use this data source to get information about a specific account in New Relic.
     * Accounts can be located by ID or name.  Exactly one of the two attributes is
     * required.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var acc = NewrelicFunctions.getAccount(GetAccountArgs.builder()
     *             .scope(&#34;global&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccountResult> getAccount() {
        return getAccount(GetAccountArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific account in New Relic.
     * Accounts can be located by ID or name.  Exactly one of the two attributes is
     * required.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var acc = NewrelicFunctions.getAccount(GetAccountArgs.builder()
     *             .scope(&#34;global&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccountResult> getAccountPlain() {
        return getAccountPlain(GetAccountPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific account in New Relic.
     * Accounts can be located by ID or name.  Exactly one of the two attributes is
     * required.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var acc = NewrelicFunctions.getAccount(GetAccountArgs.builder()
     *             .scope(&#34;global&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccountResult> getAccount(GetAccountArgs args) {
        return getAccount(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific account in New Relic.
     * Accounts can be located by ID or name.  Exactly one of the two attributes is
     * required.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var acc = NewrelicFunctions.getAccount(GetAccountArgs.builder()
     *             .scope(&#34;global&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccountResult> getAccountPlain(GetAccountPlainArgs args) {
        return getAccountPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific account in New Relic.
     * Accounts can be located by ID or name.  Exactly one of the two attributes is
     * required.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var acc = NewrelicFunctions.getAccount(GetAccountArgs.builder()
     *             .scope(&#34;global&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccountResult> getAccount(GetAccountArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("newrelic:index/getAccount:getAccount", TypeShape.of(GetAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about a specific account in New Relic.
     * Accounts can be located by ID or name.  Exactly one of the two attributes is
     * required.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var acc = NewrelicFunctions.getAccount(GetAccountArgs.builder()
     *             .scope(&#34;global&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccountResult> getAccountPlain(GetAccountPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("newrelic:index/getAccount:getAccount", TypeShape.of(GetAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about a specific alert channel in New Relic that already exists.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetAlertChannelArgs;
     * import com.pulumi.newrelic.AlertPolicy;
     * import com.pulumi.newrelic.AlertPolicyChannel;
     * import com.pulumi.newrelic.AlertPolicyChannelArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var fooAlertChannel = NewrelicFunctions.getAlertChannel(GetAlertChannelArgs.builder()
     *             .name(&#34;foo@example.com&#34;)
     *             .build());
     * 
     *         var fooAlertPolicy = new AlertPolicy(&#34;fooAlertPolicy&#34;);
     * 
     *         var fooAlertPolicyChannel = new AlertPolicyChannel(&#34;fooAlertPolicyChannel&#34;, AlertPolicyChannelArgs.builder()        
     *             .policyId(fooAlertPolicy.id())
     *             .channelId(fooAlertChannel.applyValue(getAlertChannelResult -&gt; getAlertChannelResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAlertChannelResult> getAlertChannel(GetAlertChannelArgs args) {
        return getAlertChannel(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific alert channel in New Relic that already exists.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetAlertChannelArgs;
     * import com.pulumi.newrelic.AlertPolicy;
     * import com.pulumi.newrelic.AlertPolicyChannel;
     * import com.pulumi.newrelic.AlertPolicyChannelArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var fooAlertChannel = NewrelicFunctions.getAlertChannel(GetAlertChannelArgs.builder()
     *             .name(&#34;foo@example.com&#34;)
     *             .build());
     * 
     *         var fooAlertPolicy = new AlertPolicy(&#34;fooAlertPolicy&#34;);
     * 
     *         var fooAlertPolicyChannel = new AlertPolicyChannel(&#34;fooAlertPolicyChannel&#34;, AlertPolicyChannelArgs.builder()        
     *             .policyId(fooAlertPolicy.id())
     *             .channelId(fooAlertChannel.applyValue(getAlertChannelResult -&gt; getAlertChannelResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAlertChannelResult> getAlertChannelPlain(GetAlertChannelPlainArgs args) {
        return getAlertChannelPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific alert channel in New Relic that already exists.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetAlertChannelArgs;
     * import com.pulumi.newrelic.AlertPolicy;
     * import com.pulumi.newrelic.AlertPolicyChannel;
     * import com.pulumi.newrelic.AlertPolicyChannelArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var fooAlertChannel = NewrelicFunctions.getAlertChannel(GetAlertChannelArgs.builder()
     *             .name(&#34;foo@example.com&#34;)
     *             .build());
     * 
     *         var fooAlertPolicy = new AlertPolicy(&#34;fooAlertPolicy&#34;);
     * 
     *         var fooAlertPolicyChannel = new AlertPolicyChannel(&#34;fooAlertPolicyChannel&#34;, AlertPolicyChannelArgs.builder()        
     *             .policyId(fooAlertPolicy.id())
     *             .channelId(fooAlertChannel.applyValue(getAlertChannelResult -&gt; getAlertChannelResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAlertChannelResult> getAlertChannel(GetAlertChannelArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("newrelic:index/getAlertChannel:getAlertChannel", TypeShape.of(GetAlertChannelResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about a specific alert channel in New Relic that already exists.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetAlertChannelArgs;
     * import com.pulumi.newrelic.AlertPolicy;
     * import com.pulumi.newrelic.AlertPolicyChannel;
     * import com.pulumi.newrelic.AlertPolicyChannelArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var fooAlertChannel = NewrelicFunctions.getAlertChannel(GetAlertChannelArgs.builder()
     *             .name(&#34;foo@example.com&#34;)
     *             .build());
     * 
     *         var fooAlertPolicy = new AlertPolicy(&#34;fooAlertPolicy&#34;);
     * 
     *         var fooAlertPolicyChannel = new AlertPolicyChannel(&#34;fooAlertPolicyChannel&#34;, AlertPolicyChannelArgs.builder()        
     *             .policyId(fooAlertPolicy.id())
     *             .channelId(fooAlertChannel.applyValue(getAlertChannelResult -&gt; getAlertChannelResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAlertChannelResult> getAlertChannelPlain(GetAlertChannelPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("newrelic:index/getAlertChannel:getAlertChannel", TypeShape.of(GetAlertChannelResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about a specific alert policy in New Relic that already exists.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetAlertChannelArgs;
     * import com.pulumi.newrelic.inputs.GetAlertPolicyArgs;
     * import com.pulumi.newrelic.AlertPolicyChannel;
     * import com.pulumi.newrelic.AlertPolicyChannelArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var fooAlertChannel = NewrelicFunctions.getAlertChannel(GetAlertChannelArgs.builder()
     *             .name(&#34;foo@example.com&#34;)
     *             .build());
     * 
     *         final var fooAlertPolicy = NewrelicFunctions.getAlertPolicy(GetAlertPolicyArgs.builder()
     *             .name(&#34;foo policy&#34;)
     *             .build());
     * 
     *         var fooAlertPolicyChannel = new AlertPolicyChannel(&#34;fooAlertPolicyChannel&#34;, AlertPolicyChannelArgs.builder()        
     *             .policyId(fooAlertPolicy.applyValue(getAlertPolicyResult -&gt; getAlertPolicyResult.id()))
     *             .channelId(fooAlertChannel.applyValue(getAlertChannelResult -&gt; getAlertChannelResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAlertPolicyResult> getAlertPolicy(GetAlertPolicyArgs args) {
        return getAlertPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific alert policy in New Relic that already exists.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetAlertChannelArgs;
     * import com.pulumi.newrelic.inputs.GetAlertPolicyArgs;
     * import com.pulumi.newrelic.AlertPolicyChannel;
     * import com.pulumi.newrelic.AlertPolicyChannelArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var fooAlertChannel = NewrelicFunctions.getAlertChannel(GetAlertChannelArgs.builder()
     *             .name(&#34;foo@example.com&#34;)
     *             .build());
     * 
     *         final var fooAlertPolicy = NewrelicFunctions.getAlertPolicy(GetAlertPolicyArgs.builder()
     *             .name(&#34;foo policy&#34;)
     *             .build());
     * 
     *         var fooAlertPolicyChannel = new AlertPolicyChannel(&#34;fooAlertPolicyChannel&#34;, AlertPolicyChannelArgs.builder()        
     *             .policyId(fooAlertPolicy.applyValue(getAlertPolicyResult -&gt; getAlertPolicyResult.id()))
     *             .channelId(fooAlertChannel.applyValue(getAlertChannelResult -&gt; getAlertChannelResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAlertPolicyResult> getAlertPolicyPlain(GetAlertPolicyPlainArgs args) {
        return getAlertPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific alert policy in New Relic that already exists.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetAlertChannelArgs;
     * import com.pulumi.newrelic.inputs.GetAlertPolicyArgs;
     * import com.pulumi.newrelic.AlertPolicyChannel;
     * import com.pulumi.newrelic.AlertPolicyChannelArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var fooAlertChannel = NewrelicFunctions.getAlertChannel(GetAlertChannelArgs.builder()
     *             .name(&#34;foo@example.com&#34;)
     *             .build());
     * 
     *         final var fooAlertPolicy = NewrelicFunctions.getAlertPolicy(GetAlertPolicyArgs.builder()
     *             .name(&#34;foo policy&#34;)
     *             .build());
     * 
     *         var fooAlertPolicyChannel = new AlertPolicyChannel(&#34;fooAlertPolicyChannel&#34;, AlertPolicyChannelArgs.builder()        
     *             .policyId(fooAlertPolicy.applyValue(getAlertPolicyResult -&gt; getAlertPolicyResult.id()))
     *             .channelId(fooAlertChannel.applyValue(getAlertChannelResult -&gt; getAlertChannelResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAlertPolicyResult> getAlertPolicy(GetAlertPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("newrelic:index/getAlertPolicy:getAlertPolicy", TypeShape.of(GetAlertPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about a specific alert policy in New Relic that already exists.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetAlertChannelArgs;
     * import com.pulumi.newrelic.inputs.GetAlertPolicyArgs;
     * import com.pulumi.newrelic.AlertPolicyChannel;
     * import com.pulumi.newrelic.AlertPolicyChannelArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var fooAlertChannel = NewrelicFunctions.getAlertChannel(GetAlertChannelArgs.builder()
     *             .name(&#34;foo@example.com&#34;)
     *             .build());
     * 
     *         final var fooAlertPolicy = NewrelicFunctions.getAlertPolicy(GetAlertPolicyArgs.builder()
     *             .name(&#34;foo policy&#34;)
     *             .build());
     * 
     *         var fooAlertPolicyChannel = new AlertPolicyChannel(&#34;fooAlertPolicyChannel&#34;, AlertPolicyChannelArgs.builder()        
     *             .policyId(fooAlertPolicy.applyValue(getAlertPolicyResult -&gt; getAlertPolicyResult.id()))
     *             .channelId(fooAlertChannel.applyValue(getAlertChannelResult -&gt; getAlertChannelResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAlertPolicyResult> getAlertPolicyPlain(GetAlertPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("newrelic:index/getAlertPolicy:getAlertPolicy", TypeShape.of(GetAlertPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * #### DEPRECATED! Use at your own risk. Use the `newrelic.getEntity` data source instead. This feature may be removed in the next major release
     * 
     * Use this data source to get information about a specific application in New Relic that already exists.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetApplicationArgs;
     * import com.pulumi.newrelic.AlertPolicy;
     * import com.pulumi.newrelic.AlertCondition;
     * import com.pulumi.newrelic.AlertConditionArgs;
     * import com.pulumi.newrelic.inputs.AlertConditionTermArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var app = NewrelicFunctions.getApplication(GetApplicationArgs.builder()
     *             .name(&#34;my-app&#34;)
     *             .build());
     * 
     *         var fooAlertPolicy = new AlertPolicy(&#34;fooAlertPolicy&#34;);
     * 
     *         var fooAlertCondition = new AlertCondition(&#34;fooAlertCondition&#34;, AlertConditionArgs.builder()        
     *             .policyId(fooAlertPolicy.id())
     *             .type(&#34;apm_app_metric&#34;)
     *             .entities(app.applyValue(getApplicationResult -&gt; getApplicationResult.id()))
     *             .metric(&#34;apdex&#34;)
     *             .runbookUrl(&#34;https://www.example.com&#34;)
     *             .terms(AlertConditionTermArgs.builder()
     *                 .duration(5)
     *                 .operator(&#34;below&#34;)
     *                 .priority(&#34;critical&#34;)
     *                 .threshold(&#34;0.75&#34;)
     *                 .timeFunction(&#34;all&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetApplicationResult> getApplication(GetApplicationArgs args) {
        return getApplication(args, InvokeOptions.Empty);
    }
    /**
     * #### DEPRECATED! Use at your own risk. Use the `newrelic.getEntity` data source instead. This feature may be removed in the next major release
     * 
     * Use this data source to get information about a specific application in New Relic that already exists.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetApplicationArgs;
     * import com.pulumi.newrelic.AlertPolicy;
     * import com.pulumi.newrelic.AlertCondition;
     * import com.pulumi.newrelic.AlertConditionArgs;
     * import com.pulumi.newrelic.inputs.AlertConditionTermArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var app = NewrelicFunctions.getApplication(GetApplicationArgs.builder()
     *             .name(&#34;my-app&#34;)
     *             .build());
     * 
     *         var fooAlertPolicy = new AlertPolicy(&#34;fooAlertPolicy&#34;);
     * 
     *         var fooAlertCondition = new AlertCondition(&#34;fooAlertCondition&#34;, AlertConditionArgs.builder()        
     *             .policyId(fooAlertPolicy.id())
     *             .type(&#34;apm_app_metric&#34;)
     *             .entities(app.applyValue(getApplicationResult -&gt; getApplicationResult.id()))
     *             .metric(&#34;apdex&#34;)
     *             .runbookUrl(&#34;https://www.example.com&#34;)
     *             .terms(AlertConditionTermArgs.builder()
     *                 .duration(5)
     *                 .operator(&#34;below&#34;)
     *                 .priority(&#34;critical&#34;)
     *                 .threshold(&#34;0.75&#34;)
     *                 .timeFunction(&#34;all&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetApplicationResult> getApplicationPlain(GetApplicationPlainArgs args) {
        return getApplicationPlain(args, InvokeOptions.Empty);
    }
    /**
     * #### DEPRECATED! Use at your own risk. Use the `newrelic.getEntity` data source instead. This feature may be removed in the next major release
     * 
     * Use this data source to get information about a specific application in New Relic that already exists.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetApplicationArgs;
     * import com.pulumi.newrelic.AlertPolicy;
     * import com.pulumi.newrelic.AlertCondition;
     * import com.pulumi.newrelic.AlertConditionArgs;
     * import com.pulumi.newrelic.inputs.AlertConditionTermArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var app = NewrelicFunctions.getApplication(GetApplicationArgs.builder()
     *             .name(&#34;my-app&#34;)
     *             .build());
     * 
     *         var fooAlertPolicy = new AlertPolicy(&#34;fooAlertPolicy&#34;);
     * 
     *         var fooAlertCondition = new AlertCondition(&#34;fooAlertCondition&#34;, AlertConditionArgs.builder()        
     *             .policyId(fooAlertPolicy.id())
     *             .type(&#34;apm_app_metric&#34;)
     *             .entities(app.applyValue(getApplicationResult -&gt; getApplicationResult.id()))
     *             .metric(&#34;apdex&#34;)
     *             .runbookUrl(&#34;https://www.example.com&#34;)
     *             .terms(AlertConditionTermArgs.builder()
     *                 .duration(5)
     *                 .operator(&#34;below&#34;)
     *                 .priority(&#34;critical&#34;)
     *                 .threshold(&#34;0.75&#34;)
     *                 .timeFunction(&#34;all&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetApplicationResult> getApplication(GetApplicationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("newrelic:index/getApplication:getApplication", TypeShape.of(GetApplicationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * #### DEPRECATED! Use at your own risk. Use the `newrelic.getEntity` data source instead. This feature may be removed in the next major release
     * 
     * Use this data source to get information about a specific application in New Relic that already exists.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetApplicationArgs;
     * import com.pulumi.newrelic.AlertPolicy;
     * import com.pulumi.newrelic.AlertCondition;
     * import com.pulumi.newrelic.AlertConditionArgs;
     * import com.pulumi.newrelic.inputs.AlertConditionTermArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var app = NewrelicFunctions.getApplication(GetApplicationArgs.builder()
     *             .name(&#34;my-app&#34;)
     *             .build());
     * 
     *         var fooAlertPolicy = new AlertPolicy(&#34;fooAlertPolicy&#34;);
     * 
     *         var fooAlertCondition = new AlertCondition(&#34;fooAlertCondition&#34;, AlertConditionArgs.builder()        
     *             .policyId(fooAlertPolicy.id())
     *             .type(&#34;apm_app_metric&#34;)
     *             .entities(app.applyValue(getApplicationResult -&gt; getApplicationResult.id()))
     *             .metric(&#34;apdex&#34;)
     *             .runbookUrl(&#34;https://www.example.com&#34;)
     *             .terms(AlertConditionTermArgs.builder()
     *                 .duration(5)
     *                 .operator(&#34;below&#34;)
     *                 .priority(&#34;critical&#34;)
     *                 .threshold(&#34;0.75&#34;)
     *                 .timeFunction(&#34;all&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetApplicationResult> getApplicationPlain(GetApplicationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("newrelic:index/getApplication:getApplication", TypeShape.of(GetApplicationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about a specific cloud account linked to New Relic.
     * Accounts can be located by a combination of New Relic Account ID, name and cloud provider (aws, gcp, azure, etc). Name and cloud provider are required attributes. If no account_id is specified on the resource the provider level account_id will be used.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetCloudAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var account = NewrelicFunctions.getCloudAccount(GetCloudAccountArgs.builder()
     *             .accountId(12345)
     *             .cloudProvider(&#34;aws&#34;)
     *             .name(&#34;my aws account&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudAccountResult> getCloudAccount(GetCloudAccountArgs args) {
        return getCloudAccount(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific cloud account linked to New Relic.
     * Accounts can be located by a combination of New Relic Account ID, name and cloud provider (aws, gcp, azure, etc). Name and cloud provider are required attributes. If no account_id is specified on the resource the provider level account_id will be used.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetCloudAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var account = NewrelicFunctions.getCloudAccount(GetCloudAccountArgs.builder()
     *             .accountId(12345)
     *             .cloudProvider(&#34;aws&#34;)
     *             .name(&#34;my aws account&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudAccountResult> getCloudAccountPlain(GetCloudAccountPlainArgs args) {
        return getCloudAccountPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific cloud account linked to New Relic.
     * Accounts can be located by a combination of New Relic Account ID, name and cloud provider (aws, gcp, azure, etc). Name and cloud provider are required attributes. If no account_id is specified on the resource the provider level account_id will be used.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetCloudAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var account = NewrelicFunctions.getCloudAccount(GetCloudAccountArgs.builder()
     *             .accountId(12345)
     *             .cloudProvider(&#34;aws&#34;)
     *             .name(&#34;my aws account&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudAccountResult> getCloudAccount(GetCloudAccountArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("newrelic:index/getCloudAccount:getCloudAccount", TypeShape.of(GetCloudAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about a specific cloud account linked to New Relic.
     * Accounts can be located by a combination of New Relic Account ID, name and cloud provider (aws, gcp, azure, etc). Name and cloud provider are required attributes. If no account_id is specified on the resource the provider level account_id will be used.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetCloudAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var account = NewrelicFunctions.getCloudAccount(GetCloudAccountArgs.builder()
     *             .accountId(12345)
     *             .cloudProvider(&#34;aws&#34;)
     *             .name(&#34;my aws account&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudAccountResult> getCloudAccountPlain(GetCloudAccountPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("newrelic:index/getCloudAccount:getCloudAccount", TypeShape.of(GetCloudAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about a specific entity in New Relic One that already exists.
     * 
     */
    public static Output<GetEntityResult> getEntity(GetEntityArgs args) {
        return getEntity(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific entity in New Relic One that already exists.
     * 
     */
    public static CompletableFuture<GetEntityResult> getEntityPlain(GetEntityPlainArgs args) {
        return getEntityPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific entity in New Relic One that already exists.
     * 
     */
    public static Output<GetEntityResult> getEntity(GetEntityArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("newrelic:index/getEntity:getEntity", TypeShape.of(GetEntityResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about a specific entity in New Relic One that already exists.
     * 
     */
    public static CompletableFuture<GetEntityResult> getEntityPlain(GetEntityPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("newrelic:index/getEntity:getEntity", TypeShape.of(GetEntityResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about a specific key transaction in New Relic that already exists.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetKeyTransactionArgs;
     * import com.pulumi.newrelic.AlertPolicy;
     * import com.pulumi.newrelic.AlertCondition;
     * import com.pulumi.newrelic.AlertConditionArgs;
     * import com.pulumi.newrelic.inputs.AlertConditionTermArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var txn = NewrelicFunctions.getKeyTransaction(GetKeyTransactionArgs.builder()
     *             .name(&#34;txn&#34;)
     *             .build());
     * 
     *         var fooAlertPolicy = new AlertPolicy(&#34;fooAlertPolicy&#34;);
     * 
     *         var fooAlertCondition = new AlertCondition(&#34;fooAlertCondition&#34;, AlertConditionArgs.builder()        
     *             .policyId(fooAlertPolicy.id())
     *             .type(&#34;apm_kt_metric&#34;)
     *             .entities(txn.applyValue(getKeyTransactionResult -&gt; getKeyTransactionResult.id()))
     *             .metric(&#34;error_percentage&#34;)
     *             .runbookUrl(&#34;https://www.example.com&#34;)
     *             .terms(AlertConditionTermArgs.builder()
     *                 .duration(5)
     *                 .operator(&#34;below&#34;)
     *                 .priority(&#34;critical&#34;)
     *                 .threshold(&#34;0.75&#34;)
     *                 .timeFunction(&#34;all&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetKeyTransactionResult> getKeyTransaction(GetKeyTransactionArgs args) {
        return getKeyTransaction(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific key transaction in New Relic that already exists.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetKeyTransactionArgs;
     * import com.pulumi.newrelic.AlertPolicy;
     * import com.pulumi.newrelic.AlertCondition;
     * import com.pulumi.newrelic.AlertConditionArgs;
     * import com.pulumi.newrelic.inputs.AlertConditionTermArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var txn = NewrelicFunctions.getKeyTransaction(GetKeyTransactionArgs.builder()
     *             .name(&#34;txn&#34;)
     *             .build());
     * 
     *         var fooAlertPolicy = new AlertPolicy(&#34;fooAlertPolicy&#34;);
     * 
     *         var fooAlertCondition = new AlertCondition(&#34;fooAlertCondition&#34;, AlertConditionArgs.builder()        
     *             .policyId(fooAlertPolicy.id())
     *             .type(&#34;apm_kt_metric&#34;)
     *             .entities(txn.applyValue(getKeyTransactionResult -&gt; getKeyTransactionResult.id()))
     *             .metric(&#34;error_percentage&#34;)
     *             .runbookUrl(&#34;https://www.example.com&#34;)
     *             .terms(AlertConditionTermArgs.builder()
     *                 .duration(5)
     *                 .operator(&#34;below&#34;)
     *                 .priority(&#34;critical&#34;)
     *                 .threshold(&#34;0.75&#34;)
     *                 .timeFunction(&#34;all&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetKeyTransactionResult> getKeyTransactionPlain(GetKeyTransactionPlainArgs args) {
        return getKeyTransactionPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific key transaction in New Relic that already exists.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetKeyTransactionArgs;
     * import com.pulumi.newrelic.AlertPolicy;
     * import com.pulumi.newrelic.AlertCondition;
     * import com.pulumi.newrelic.AlertConditionArgs;
     * import com.pulumi.newrelic.inputs.AlertConditionTermArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var txn = NewrelicFunctions.getKeyTransaction(GetKeyTransactionArgs.builder()
     *             .name(&#34;txn&#34;)
     *             .build());
     * 
     *         var fooAlertPolicy = new AlertPolicy(&#34;fooAlertPolicy&#34;);
     * 
     *         var fooAlertCondition = new AlertCondition(&#34;fooAlertCondition&#34;, AlertConditionArgs.builder()        
     *             .policyId(fooAlertPolicy.id())
     *             .type(&#34;apm_kt_metric&#34;)
     *             .entities(txn.applyValue(getKeyTransactionResult -&gt; getKeyTransactionResult.id()))
     *             .metric(&#34;error_percentage&#34;)
     *             .runbookUrl(&#34;https://www.example.com&#34;)
     *             .terms(AlertConditionTermArgs.builder()
     *                 .duration(5)
     *                 .operator(&#34;below&#34;)
     *                 .priority(&#34;critical&#34;)
     *                 .threshold(&#34;0.75&#34;)
     *                 .timeFunction(&#34;all&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetKeyTransactionResult> getKeyTransaction(GetKeyTransactionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("newrelic:index/getKeyTransaction:getKeyTransaction", TypeShape.of(GetKeyTransactionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about a specific key transaction in New Relic that already exists.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.NewrelicFunctions;
     * import com.pulumi.newrelic.inputs.GetKeyTransactionArgs;
     * import com.pulumi.newrelic.AlertPolicy;
     * import com.pulumi.newrelic.AlertCondition;
     * import com.pulumi.newrelic.AlertConditionArgs;
     * import com.pulumi.newrelic.inputs.AlertConditionTermArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var txn = NewrelicFunctions.getKeyTransaction(GetKeyTransactionArgs.builder()
     *             .name(&#34;txn&#34;)
     *             .build());
     * 
     *         var fooAlertPolicy = new AlertPolicy(&#34;fooAlertPolicy&#34;);
     * 
     *         var fooAlertCondition = new AlertCondition(&#34;fooAlertCondition&#34;, AlertConditionArgs.builder()        
     *             .policyId(fooAlertPolicy.id())
     *             .type(&#34;apm_kt_metric&#34;)
     *             .entities(txn.applyValue(getKeyTransactionResult -&gt; getKeyTransactionResult.id()))
     *             .metric(&#34;error_percentage&#34;)
     *             .runbookUrl(&#34;https://www.example.com&#34;)
     *             .terms(AlertConditionTermArgs.builder()
     *                 .duration(5)
     *                 .operator(&#34;below&#34;)
     *                 .priority(&#34;critical&#34;)
     *                 .threshold(&#34;0.75&#34;)
     *                 .timeFunction(&#34;all&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetKeyTransactionResult> getKeyTransactionPlain(GetKeyTransactionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("newrelic:index/getKeyTransaction:getKeyTransaction", TypeShape.of(GetKeyTransactionResult.class), args, Utilities.withVersion(options));
    }
}
