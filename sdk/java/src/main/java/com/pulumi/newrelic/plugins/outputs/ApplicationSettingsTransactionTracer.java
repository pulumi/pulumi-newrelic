// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.plugins.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.newrelic.plugins.outputs.ApplicationSettingsTransactionTracerExplainQueryPlan;
import com.pulumi.newrelic.plugins.outputs.ApplicationSettingsTransactionTracerSql;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationSettingsTransactionTracer {
    /**
     * @return Configuration block for query plans. Including this block enables the capture of query plans. The following arguments are supported:
     * 
     */
    private @Nullable List<ApplicationSettingsTransactionTracerExplainQueryPlan> explainQueryPlans;
    /**
     * @return Configuration block for SQL logging.  Including this block enables SQL logging. The following arguments are supported:
     * 
     */
    private @Nullable ApplicationSettingsTransactionTracerSql sql;
    /**
     * @return The response time threshold for collecting stack traces.
     * 
     */
    private @Nullable Double stackTraceThresholdValue;
    /**
     * @return The type of threshold for transactions. Valid values are `VALUE`,`APDEX_F`(4 times your apdex target)
     * 
     */
    private @Nullable String transactionThresholdType;
    /**
     * @return The threshold value for transactions(in seconds).
     * 
     */
    private @Nullable Double transactionThresholdValue;

    private ApplicationSettingsTransactionTracer() {}
    /**
     * @return Configuration block for query plans. Including this block enables the capture of query plans. The following arguments are supported:
     * 
     */
    public List<ApplicationSettingsTransactionTracerExplainQueryPlan> explainQueryPlans() {
        return this.explainQueryPlans == null ? List.of() : this.explainQueryPlans;
    }
    /**
     * @return Configuration block for SQL logging.  Including this block enables SQL logging. The following arguments are supported:
     * 
     */
    public Optional<ApplicationSettingsTransactionTracerSql> sql() {
        return Optional.ofNullable(this.sql);
    }
    /**
     * @return The response time threshold for collecting stack traces.
     * 
     */
    public Optional<Double> stackTraceThresholdValue() {
        return Optional.ofNullable(this.stackTraceThresholdValue);
    }
    /**
     * @return The type of threshold for transactions. Valid values are `VALUE`,`APDEX_F`(4 times your apdex target)
     * 
     */
    public Optional<String> transactionThresholdType() {
        return Optional.ofNullable(this.transactionThresholdType);
    }
    /**
     * @return The threshold value for transactions(in seconds).
     * 
     */
    public Optional<Double> transactionThresholdValue() {
        return Optional.ofNullable(this.transactionThresholdValue);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationSettingsTransactionTracer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ApplicationSettingsTransactionTracerExplainQueryPlan> explainQueryPlans;
        private @Nullable ApplicationSettingsTransactionTracerSql sql;
        private @Nullable Double stackTraceThresholdValue;
        private @Nullable String transactionThresholdType;
        private @Nullable Double transactionThresholdValue;
        public Builder() {}
        public Builder(ApplicationSettingsTransactionTracer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.explainQueryPlans = defaults.explainQueryPlans;
    	      this.sql = defaults.sql;
    	      this.stackTraceThresholdValue = defaults.stackTraceThresholdValue;
    	      this.transactionThresholdType = defaults.transactionThresholdType;
    	      this.transactionThresholdValue = defaults.transactionThresholdValue;
        }

        @CustomType.Setter
        public Builder explainQueryPlans(@Nullable List<ApplicationSettingsTransactionTracerExplainQueryPlan> explainQueryPlans) {

            this.explainQueryPlans = explainQueryPlans;
            return this;
        }
        public Builder explainQueryPlans(ApplicationSettingsTransactionTracerExplainQueryPlan... explainQueryPlans) {
            return explainQueryPlans(List.of(explainQueryPlans));
        }
        @CustomType.Setter
        public Builder sql(@Nullable ApplicationSettingsTransactionTracerSql sql) {

            this.sql = sql;
            return this;
        }
        @CustomType.Setter
        public Builder stackTraceThresholdValue(@Nullable Double stackTraceThresholdValue) {

            this.stackTraceThresholdValue = stackTraceThresholdValue;
            return this;
        }
        @CustomType.Setter
        public Builder transactionThresholdType(@Nullable String transactionThresholdType) {

            this.transactionThresholdType = transactionThresholdType;
            return this;
        }
        @CustomType.Setter
        public Builder transactionThresholdValue(@Nullable Double transactionThresholdValue) {

            this.transactionThresholdValue = transactionThresholdValue;
            return this;
        }
        public ApplicationSettingsTransactionTracer build() {
            final var _resultValue = new ApplicationSettingsTransactionTracer();
            _resultValue.explainQueryPlans = explainQueryPlans;
            _resultValue.sql = sql;
            _resultValue.stackTraceThresholdValue = stackTraceThresholdValue;
            _resultValue.transactionThresholdType = transactionThresholdType;
            _resultValue.transactionThresholdValue = transactionThresholdValue;
            return _resultValue;
        }
    }
}
