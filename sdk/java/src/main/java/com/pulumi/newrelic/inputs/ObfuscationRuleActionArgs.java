// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ObfuscationRuleActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObfuscationRuleActionArgs Empty = new ObfuscationRuleActionArgs();

    /**
     * Attribute names for action. An empty list applies the action to all the attributes.
     * 
     */
    @Import(name="attributes", required=true)
    private Output<List<String>> attributes;

    /**
     * @return Attribute names for action. An empty list applies the action to all the attributes.
     * 
     */
    public Output<List<String>> attributes() {
        return this.attributes;
    }

    /**
     * Expression Id for action.
     * 
     */
    @Import(name="expressionId", required=true)
    private Output<String> expressionId;

    /**
     * @return Expression Id for action.
     * 
     */
    public Output<String> expressionId() {
        return this.expressionId;
    }

    /**
     * Obfuscation method to use. Methods for replacing obfuscated values are `HASH_SHA256` and `MASK`.
     * 
     */
    @Import(name="method", required=true)
    private Output<String> method;

    /**
     * @return Obfuscation method to use. Methods for replacing obfuscated values are `HASH_SHA256` and `MASK`.
     * 
     */
    public Output<String> method() {
        return this.method;
    }

    private ObfuscationRuleActionArgs() {}

    private ObfuscationRuleActionArgs(ObfuscationRuleActionArgs $) {
        this.attributes = $.attributes;
        this.expressionId = $.expressionId;
        this.method = $.method;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObfuscationRuleActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObfuscationRuleActionArgs $;

        public Builder() {
            $ = new ObfuscationRuleActionArgs();
        }

        public Builder(ObfuscationRuleActionArgs defaults) {
            $ = new ObfuscationRuleActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attributes Attribute names for action. An empty list applies the action to all the attributes.
         * 
         * @return builder
         * 
         */
        public Builder attributes(Output<List<String>> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes Attribute names for action. An empty list applies the action to all the attributes.
         * 
         * @return builder
         * 
         */
        public Builder attributes(List<String> attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param attributes Attribute names for action. An empty list applies the action to all the attributes.
         * 
         * @return builder
         * 
         */
        public Builder attributes(String... attributes) {
            return attributes(List.of(attributes));
        }

        /**
         * @param expressionId Expression Id for action.
         * 
         * @return builder
         * 
         */
        public Builder expressionId(Output<String> expressionId) {
            $.expressionId = expressionId;
            return this;
        }

        /**
         * @param expressionId Expression Id for action.
         * 
         * @return builder
         * 
         */
        public Builder expressionId(String expressionId) {
            return expressionId(Output.of(expressionId));
        }

        /**
         * @param method Obfuscation method to use. Methods for replacing obfuscated values are `HASH_SHA256` and `MASK`.
         * 
         * @return builder
         * 
         */
        public Builder method(Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method Obfuscation method to use. Methods for replacing obfuscated values are `HASH_SHA256` and `MASK`.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        public ObfuscationRuleActionArgs build() {
            if ($.attributes == null) {
                throw new MissingRequiredPropertyException("ObfuscationRuleActionArgs", "attributes");
            }
            if ($.expressionId == null) {
                throw new MissingRequiredPropertyException("ObfuscationRuleActionArgs", "expressionId");
            }
            if ($.method == null) {
                throw new MissingRequiredPropertyException("ObfuscationRuleActionArgs", "method");
            }
            return $;
        }
    }

}
