// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.synthetics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitorState extends com.pulumi.resources.ResourceArgs {

    public static final MonitorState Empty = new MonitorState();

    /**
     * Bypass HEAD request.
     * 
     */
    @Import(name="bypassHeadRequest")
    private @Nullable Output<Boolean> bypassHeadRequest;

    /**
     * @return Bypass HEAD request.
     * 
     */
    public Optional<Output<Boolean>> bypassHeadRequest() {
        return Optional.ofNullable(this.bypassHeadRequest);
    }

    /**
     * The interval (in minutes) at which this monitor should run.
     * 
     */
    @Import(name="frequency")
    private @Nullable Output<Integer> frequency;

    /**
     * @return The interval (in minutes) at which this monitor should run.
     * 
     */
    public Optional<Output<Integer>> frequency() {
        return Optional.ofNullable(this.frequency);
    }

    /**
     * The locations in which this monitor should be run.
     * 
     */
    @Import(name="locations")
    private @Nullable Output<List<String>> locations;

    /**
     * @return The locations in which this monitor should be run.
     * 
     */
    public Optional<Output<List<String>>> locations() {
        return Optional.ofNullable(this.locations);
    }

    /**
     * The title of this monitor.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The title of this monitor.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The base threshold for the SLA report.
     * 
     */
    @Import(name="slaThreshold")
    private @Nullable Output<Double> slaThreshold;

    /**
     * @return The base threshold for the SLA report.
     * 
     */
    public Optional<Output<Double>> slaThreshold() {
        return Optional.ofNullable(this.slaThreshold);
    }

    /**
     * The monitor status (i.e. `ENABLED`, `MUTED`, `DISABLED`).
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The monitor status (i.e. `ENABLED`, `MUTED`, `DISABLED`).
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Fail the monitor check if redirected.
     * 
     */
    @Import(name="treatRedirectAsFailure")
    private @Nullable Output<Boolean> treatRedirectAsFailure;

    /**
     * @return Fail the monitor check if redirected.
     * 
     */
    public Optional<Output<Boolean>> treatRedirectAsFailure() {
        return Optional.ofNullable(this.treatRedirectAsFailure);
    }

    /**
     * The monitor type. Valid values are `SIMPLE`, `BROWSER`, `SCRIPT_BROWSER`, and `SCRIPT_API`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The monitor type. Valid values are `SIMPLE`, `BROWSER`, `SCRIPT_BROWSER`, and `SCRIPT_API`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The URI for the monitor to hit.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return The URI for the monitor to hit.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    /**
     * The string to validate against in the response.
     * 
     */
    @Import(name="validationString")
    private @Nullable Output<String> validationString;

    /**
     * @return The string to validate against in the response.
     * 
     */
    public Optional<Output<String>> validationString() {
        return Optional.ofNullable(this.validationString);
    }

    /**
     * Verify SSL.
     * 
     */
    @Import(name="verifySsl")
    private @Nullable Output<Boolean> verifySsl;

    /**
     * @return Verify SSL.
     * 
     */
    public Optional<Output<Boolean>> verifySsl() {
        return Optional.ofNullable(this.verifySsl);
    }

    private MonitorState() {}

    private MonitorState(MonitorState $) {
        this.bypassHeadRequest = $.bypassHeadRequest;
        this.frequency = $.frequency;
        this.locations = $.locations;
        this.name = $.name;
        this.slaThreshold = $.slaThreshold;
        this.status = $.status;
        this.treatRedirectAsFailure = $.treatRedirectAsFailure;
        this.type = $.type;
        this.uri = $.uri;
        this.validationString = $.validationString;
        this.verifySsl = $.verifySsl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorState $;

        public Builder() {
            $ = new MonitorState();
        }

        public Builder(MonitorState defaults) {
            $ = new MonitorState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bypassHeadRequest Bypass HEAD request.
         * 
         * @return builder
         * 
         */
        public Builder bypassHeadRequest(@Nullable Output<Boolean> bypassHeadRequest) {
            $.bypassHeadRequest = bypassHeadRequest;
            return this;
        }

        /**
         * @param bypassHeadRequest Bypass HEAD request.
         * 
         * @return builder
         * 
         */
        public Builder bypassHeadRequest(Boolean bypassHeadRequest) {
            return bypassHeadRequest(Output.of(bypassHeadRequest));
        }

        /**
         * @param frequency The interval (in minutes) at which this monitor should run.
         * 
         * @return builder
         * 
         */
        public Builder frequency(@Nullable Output<Integer> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency The interval (in minutes) at which this monitor should run.
         * 
         * @return builder
         * 
         */
        public Builder frequency(Integer frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param locations The locations in which this monitor should be run.
         * 
         * @return builder
         * 
         */
        public Builder locations(@Nullable Output<List<String>> locations) {
            $.locations = locations;
            return this;
        }

        /**
         * @param locations The locations in which this monitor should be run.
         * 
         * @return builder
         * 
         */
        public Builder locations(List<String> locations) {
            return locations(Output.of(locations));
        }

        /**
         * @param locations The locations in which this monitor should be run.
         * 
         * @return builder
         * 
         */
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }

        /**
         * @param name The title of this monitor.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The title of this monitor.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param slaThreshold The base threshold for the SLA report.
         * 
         * @return builder
         * 
         */
        public Builder slaThreshold(@Nullable Output<Double> slaThreshold) {
            $.slaThreshold = slaThreshold;
            return this;
        }

        /**
         * @param slaThreshold The base threshold for the SLA report.
         * 
         * @return builder
         * 
         */
        public Builder slaThreshold(Double slaThreshold) {
            return slaThreshold(Output.of(slaThreshold));
        }

        /**
         * @param status The monitor status (i.e. `ENABLED`, `MUTED`, `DISABLED`).
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The monitor status (i.e. `ENABLED`, `MUTED`, `DISABLED`).
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param treatRedirectAsFailure Fail the monitor check if redirected.
         * 
         * @return builder
         * 
         */
        public Builder treatRedirectAsFailure(@Nullable Output<Boolean> treatRedirectAsFailure) {
            $.treatRedirectAsFailure = treatRedirectAsFailure;
            return this;
        }

        /**
         * @param treatRedirectAsFailure Fail the monitor check if redirected.
         * 
         * @return builder
         * 
         */
        public Builder treatRedirectAsFailure(Boolean treatRedirectAsFailure) {
            return treatRedirectAsFailure(Output.of(treatRedirectAsFailure));
        }

        /**
         * @param type The monitor type. Valid values are `SIMPLE`, `BROWSER`, `SCRIPT_BROWSER`, and `SCRIPT_API`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The monitor type. Valid values are `SIMPLE`, `BROWSER`, `SCRIPT_BROWSER`, and `SCRIPT_API`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uri The URI for the monitor to hit.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The URI for the monitor to hit.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        /**
         * @param validationString The string to validate against in the response.
         * 
         * @return builder
         * 
         */
        public Builder validationString(@Nullable Output<String> validationString) {
            $.validationString = validationString;
            return this;
        }

        /**
         * @param validationString The string to validate against in the response.
         * 
         * @return builder
         * 
         */
        public Builder validationString(String validationString) {
            return validationString(Output.of(validationString));
        }

        /**
         * @param verifySsl Verify SSL.
         * 
         * @return builder
         * 
         */
        public Builder verifySsl(@Nullable Output<Boolean> verifySsl) {
            $.verifySsl = verifySsl;
            return this;
        }

        /**
         * @param verifySsl Verify SSL.
         * 
         * @return builder
         * 
         */
        public Builder verifySsl(Boolean verifySsl) {
            return verifySsl(Output.of(verifySsl));
        }

        public MonitorState build() {
            return $;
        }
    }

}
