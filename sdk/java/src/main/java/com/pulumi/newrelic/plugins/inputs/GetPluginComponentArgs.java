// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.plugins.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetPluginComponentArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPluginComponentArgs Empty = new GetPluginComponentArgs();

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="pluginId", required=true)
    private Output<Integer> pluginId;

    public Output<Integer> pluginId() {
        return this.pluginId;
    }

    private GetPluginComponentArgs() {}

    private GetPluginComponentArgs(GetPluginComponentArgs $) {
        this.name = $.name;
        this.pluginId = $.pluginId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPluginComponentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPluginComponentArgs $;

        public Builder() {
            $ = new GetPluginComponentArgs();
        }

        public Builder(GetPluginComponentArgs defaults) {
            $ = new GetPluginComponentArgs(Objects.requireNonNull(defaults));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder pluginId(Output<Integer> pluginId) {
            $.pluginId = pluginId;
            return this;
        }

        public Builder pluginId(Integer pluginId) {
            return pluginId(Output.of(pluginId));
        }

        public GetPluginComponentArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.pluginId = Objects.requireNonNull($.pluginId, "expected parameter 'pluginId' to be non-null");
            return $;
        }
    }

}
