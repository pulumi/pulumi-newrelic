// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NrqlDropRuleState extends com.pulumi.resources.ResourceArgs {

    public static final NrqlDropRuleState Empty = new NrqlDropRuleState();

    /**
     * Account where the drop rule will be put. Defaults to the account associated with the API key used.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<Integer> accountId;

    /**
     * @return Account where the drop rule will be put. Defaults to the account associated with the API key used.
     * 
     */
    public Optional<Output<Integer>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * An action type specifying how to apply the NRQL string (either `drop_data`, `drop_attributes`, or `  drop_attributes_from_metric_aggregates `).
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return An action type specifying how to apply the NRQL string (either `drop_data`, `drop_attributes`, or `  drop_attributes_from_metric_aggregates `).
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The description of the drop rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the drop rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A NRQL string that specifies what data types to drop.
     * 
     */
    @Import(name="nrql")
    private @Nullable Output<String> nrql;

    /**
     * @return A NRQL string that specifies what data types to drop.
     * 
     */
    public Optional<Output<String>> nrql() {
        return Optional.ofNullable(this.nrql);
    }

    /**
     * The id, uniquely identifying the rule.
     * 
     */
    @Import(name="ruleId")
    private @Nullable Output<String> ruleId;

    /**
     * @return The id, uniquely identifying the rule.
     * 
     */
    public Optional<Output<String>> ruleId() {
        return Optional.ofNullable(this.ruleId);
    }

    private NrqlDropRuleState() {}

    private NrqlDropRuleState(NrqlDropRuleState $) {
        this.accountId = $.accountId;
        this.action = $.action;
        this.description = $.description;
        this.nrql = $.nrql;
        this.ruleId = $.ruleId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NrqlDropRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NrqlDropRuleState $;

        public Builder() {
            $ = new NrqlDropRuleState();
        }

        public Builder(NrqlDropRuleState defaults) {
            $ = new NrqlDropRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account where the drop rule will be put. Defaults to the account associated with the API key used.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<Integer> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account where the drop rule will be put. Defaults to the account associated with the API key used.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Integer accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param action An action type specifying how to apply the NRQL string (either `drop_data`, `drop_attributes`, or `  drop_attributes_from_metric_aggregates `).
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action An action type specifying how to apply the NRQL string (either `drop_data`, `drop_attributes`, or `  drop_attributes_from_metric_aggregates `).
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param description The description of the drop rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the drop rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param nrql A NRQL string that specifies what data types to drop.
         * 
         * @return builder
         * 
         */
        public Builder nrql(@Nullable Output<String> nrql) {
            $.nrql = nrql;
            return this;
        }

        /**
         * @param nrql A NRQL string that specifies what data types to drop.
         * 
         * @return builder
         * 
         */
        public Builder nrql(String nrql) {
            return nrql(Output.of(nrql));
        }

        /**
         * @param ruleId The id, uniquely identifying the rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(@Nullable Output<String> ruleId) {
            $.ruleId = ruleId;
            return this;
        }

        /**
         * @param ruleId The id, uniquely identifying the rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(String ruleId) {
            return ruleId(Output.of(ruleId));
        }

        public NrqlDropRuleState build() {
            return $;
        }
    }

}
