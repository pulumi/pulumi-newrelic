// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.synthetics.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPrivateLocationPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPrivateLocationPlainArgs Empty = new GetPrivateLocationPlainArgs();

    /**
     * The New Relic account ID of the associated private location. If left empty will default to account ID specified in provider level configuration.
     * 
     */
    @Import(name="accountId")
    private @Nullable Integer accountId;

    /**
     * @return The New Relic account ID of the associated private location. If left empty will default to account ID specified in provider level configuration.
     * 
     */
    public Optional<Integer> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The key of the private location.
     * 
     */
    @Import(name="keys")
    private @Nullable List<String> keys;

    /**
     * @return The key of the private location.
     * 
     */
    public Optional<List<String>> keys() {
        return Optional.ofNullable(this.keys);
    }

    /**
     * The name of the Synthetics monitor private location.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the Synthetics monitor private location.
     * 
     */
    public String name() {
        return this.name;
    }

    private GetPrivateLocationPlainArgs() {}

    private GetPrivateLocationPlainArgs(GetPrivateLocationPlainArgs $) {
        this.accountId = $.accountId;
        this.keys = $.keys;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPrivateLocationPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPrivateLocationPlainArgs $;

        public Builder() {
            $ = new GetPrivateLocationPlainArgs();
        }

        public Builder(GetPrivateLocationPlainArgs defaults) {
            $ = new GetPrivateLocationPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The New Relic account ID of the associated private location. If left empty will default to account ID specified in provider level configuration.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Integer accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param keys The key of the private location.
         * 
         * @return builder
         * 
         */
        public Builder keys(@Nullable List<String> keys) {
            $.keys = keys;
            return this;
        }

        /**
         * @param keys The key of the private location.
         * 
         * @return builder
         * 
         */
        public Builder keys(String... keys) {
            return keys(List.of(keys));
        }

        /**
         * @param name The name of the Synthetics monitor private location.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public GetPrivateLocationPlainArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
