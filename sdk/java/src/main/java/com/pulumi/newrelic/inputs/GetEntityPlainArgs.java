// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.newrelic.inputs.GetEntityTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetEntityPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetEntityPlainArgs Empty = new GetEntityPlainArgs();

    /**
     * The entity&#39;s domain. Valid values are APM, BROWSER, INFRA, MOBILE, SYNTH, and VIZ. If not specified, all domains are searched.
     * 
     */
    @Import(name="domain")
    private @Nullable String domain;

    /**
     * @return The entity&#39;s domain. Valid values are APM, BROWSER, INFRA, MOBILE, SYNTH, and VIZ. If not specified, all domains are searched.
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Ignore case of the `name` when searching for the entity. Defaults to false.
     * 
     */
    @Import(name="ignoreCase")
    private @Nullable Boolean ignoreCase;

    /**
     * @return Ignore case of the `name` when searching for the entity. Defaults to false.
     * 
     */
    public Optional<Boolean> ignoreCase() {
        return Optional.ofNullable(this.ignoreCase);
    }

    /**
     * The name of the entity in New Relic One.  The first entity matching this name for the given search parameters will be returned.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the entity in New Relic One.  The first entity matching this name for the given search parameters will be returned.
     * 
     */
    public String name() {
        return this.name;
    }

    @Import(name="tag")
    private @Nullable GetEntityTag tag;

    public Optional<GetEntityTag> tag() {
        return Optional.ofNullable(this.tag);
    }

    /**
     * The entity&#39;s type. Valid values are APPLICATION, DASHBOARD, HOST, MONITOR, and WORKLOAD.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return The entity&#39;s type. Valid values are APPLICATION, DASHBOARD, HOST, MONITOR, and WORKLOAD.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private GetEntityPlainArgs() {}

    private GetEntityPlainArgs(GetEntityPlainArgs $) {
        this.domain = $.domain;
        this.ignoreCase = $.ignoreCase;
        this.name = $.name;
        this.tag = $.tag;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEntityPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEntityPlainArgs $;

        public Builder() {
            $ = new GetEntityPlainArgs();
        }

        public Builder(GetEntityPlainArgs defaults) {
            $ = new GetEntityPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain The entity&#39;s domain. Valid values are APM, BROWSER, INFRA, MOBILE, SYNTH, and VIZ. If not specified, all domains are searched.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable String domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param ignoreCase Ignore case of the `name` when searching for the entity. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder ignoreCase(@Nullable Boolean ignoreCase) {
            $.ignoreCase = ignoreCase;
            return this;
        }

        /**
         * @param name The name of the entity in New Relic One.  The first entity matching this name for the given search parameters will be returned.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder tag(@Nullable GetEntityTag tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param type The entity&#39;s type. Valid values are APPLICATION, DASHBOARD, HOST, MONITOR, and WORKLOAD.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public GetEntityPlainArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
