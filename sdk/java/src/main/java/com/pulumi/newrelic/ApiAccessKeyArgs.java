// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiAccessKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiAccessKeyArgs Empty = new ApiAccessKeyArgs();

    /**
     * The New Relic account ID where the API access key will be created.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The New Relic account ID where the API access key will be created.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Required if `keyType` is `INGEST`. Valid options are `BROWSER` or `LICENSE` (case-sensitive).
     * 
     */
    @Import(name="ingestType")
    private @Nullable Output<String> ingestType;

    /**
     * @return Required if `keyType` is `INGEST`. Valid options are `BROWSER` or `LICENSE` (case-sensitive).
     * 
     */
    public Optional<Output<String>> ingestType() {
        return Optional.ofNullable(this.ingestType);
    }

    /**
     * The type of API key to create. Valid options are `INGEST` or `USER` (case-sensitive).
     * - If `keyType` is `INGEST`, then `ingestType` must be specified.
     * - If `keyType` is `USER`, then `userId` must be specified.
     * 
     */
    @Import(name="keyType", required=true)
    private Output<String> keyType;

    /**
     * @return The type of API key to create. Valid options are `INGEST` or `USER` (case-sensitive).
     * - If `keyType` is `INGEST`, then `ingestType` must be specified.
     * - If `keyType` is `USER`, then `userId` must be specified.
     * 
     */
    public Output<String> keyType() {
        return this.keyType;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Additional notes about the API access key.
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return Additional notes about the API access key.
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * Required if `keyType` is `USER`. The New Relic user ID for which the API access key will be created.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return Required if `keyType` is `USER`. The New Relic user ID for which the API access key will be created.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private ApiAccessKeyArgs() {}

    private ApiAccessKeyArgs(ApiAccessKeyArgs $) {
        this.accountId = $.accountId;
        this.ingestType = $.ingestType;
        this.keyType = $.keyType;
        this.name = $.name;
        this.notes = $.notes;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiAccessKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiAccessKeyArgs $;

        public Builder() {
            $ = new ApiAccessKeyArgs();
        }

        public Builder(ApiAccessKeyArgs defaults) {
            $ = new ApiAccessKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The New Relic account ID where the API access key will be created.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The New Relic account ID where the API access key will be created.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param ingestType Required if `keyType` is `INGEST`. Valid options are `BROWSER` or `LICENSE` (case-sensitive).
         * 
         * @return builder
         * 
         */
        public Builder ingestType(@Nullable Output<String> ingestType) {
            $.ingestType = ingestType;
            return this;
        }

        /**
         * @param ingestType Required if `keyType` is `INGEST`. Valid options are `BROWSER` or `LICENSE` (case-sensitive).
         * 
         * @return builder
         * 
         */
        public Builder ingestType(String ingestType) {
            return ingestType(Output.of(ingestType));
        }

        /**
         * @param keyType The type of API key to create. Valid options are `INGEST` or `USER` (case-sensitive).
         * - If `keyType` is `INGEST`, then `ingestType` must be specified.
         * - If `keyType` is `USER`, then `userId` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder keyType(Output<String> keyType) {
            $.keyType = keyType;
            return this;
        }

        /**
         * @param keyType The type of API key to create. Valid options are `INGEST` or `USER` (case-sensitive).
         * - If `keyType` is `INGEST`, then `ingestType` must be specified.
         * - If `keyType` is `USER`, then `userId` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder keyType(String keyType) {
            return keyType(Output.of(keyType));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notes Additional notes about the API access key.
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes Additional notes about the API access key.
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param userId Required if `keyType` is `USER`. The New Relic user ID for which the API access key will be created.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId Required if `keyType` is `USER`. The New Relic user ID for which the API access key will be created.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public ApiAccessKeyArgs build() {
            if ($.keyType == null) {
                throw new MissingRequiredPropertyException("ApiAccessKeyArgs", "keyType");
            }
            return $;
        }
    }

}
