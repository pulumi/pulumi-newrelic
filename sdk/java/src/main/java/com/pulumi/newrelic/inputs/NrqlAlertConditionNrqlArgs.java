// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NrqlAlertConditionNrqlArgs extends com.pulumi.resources.ResourceArgs {

    public static final NrqlAlertConditionNrqlArgs Empty = new NrqlAlertConditionNrqlArgs();

    /**
     * The New Relic account ID to use as the basis for the NRQL alert condition&#39;s `query`; will default to `account_id` if unspecified.
     * 
     */
    @Import(name="dataAccountId")
    private @Nullable Output<String> dataAccountId;

    /**
     * @return The New Relic account ID to use as the basis for the NRQL alert condition&#39;s `query`; will default to `account_id` if unspecified.
     * 
     */
    public Optional<Output<String>> dataAccountId() {
        return Optional.ofNullable(this.dataAccountId);
    }

    /**
     * NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition&#39;s `evaluation_offset`.
     * 
     * @deprecated
     * use `aggregation_method` attribute instead
     * 
     */
    @Deprecated /* use `aggregation_method` attribute instead */
    @Import(name="evaluationOffset")
    private @Nullable Output<Integer> evaluationOffset;

    /**
     * @return NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition&#39;s `evaluation_offset`.
     * 
     * @deprecated
     * use `aggregation_method` attribute instead
     * 
     */
    @Deprecated /* use `aggregation_method` attribute instead */
    public Optional<Output<Integer>> evaluationOffset() {
        return Optional.ofNullable(this.evaluationOffset);
    }

    @Import(name="query", required=true)
    private Output<String> query;

    public Output<String> query() {
        return this.query;
    }

    /**
     * NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition&#39;s `since_value`.
     * 
     * @deprecated
     * use `aggregation_method` attribute instead
     * 
     */
    @Deprecated /* use `aggregation_method` attribute instead */
    @Import(name="sinceValue")
    private @Nullable Output<String> sinceValue;

    /**
     * @return NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition&#39;s `since_value`.
     * 
     * @deprecated
     * use `aggregation_method` attribute instead
     * 
     */
    @Deprecated /* use `aggregation_method` attribute instead */
    public Optional<Output<String>> sinceValue() {
        return Optional.ofNullable(this.sinceValue);
    }

    private NrqlAlertConditionNrqlArgs() {}

    private NrqlAlertConditionNrqlArgs(NrqlAlertConditionNrqlArgs $) {
        this.dataAccountId = $.dataAccountId;
        this.evaluationOffset = $.evaluationOffset;
        this.query = $.query;
        this.sinceValue = $.sinceValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NrqlAlertConditionNrqlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NrqlAlertConditionNrqlArgs $;

        public Builder() {
            $ = new NrqlAlertConditionNrqlArgs();
        }

        public Builder(NrqlAlertConditionNrqlArgs defaults) {
            $ = new NrqlAlertConditionNrqlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataAccountId The New Relic account ID to use as the basis for the NRQL alert condition&#39;s `query`; will default to `account_id` if unspecified.
         * 
         * @return builder
         * 
         */
        public Builder dataAccountId(@Nullable Output<String> dataAccountId) {
            $.dataAccountId = dataAccountId;
            return this;
        }

        /**
         * @param dataAccountId The New Relic account ID to use as the basis for the NRQL alert condition&#39;s `query`; will default to `account_id` if unspecified.
         * 
         * @return builder
         * 
         */
        public Builder dataAccountId(String dataAccountId) {
            return dataAccountId(Output.of(dataAccountId));
        }

        /**
         * @param evaluationOffset NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition&#39;s `evaluation_offset`.
         * 
         * @return builder
         * 
         * @deprecated
         * use `aggregation_method` attribute instead
         * 
         */
        @Deprecated /* use `aggregation_method` attribute instead */
        public Builder evaluationOffset(@Nullable Output<Integer> evaluationOffset) {
            $.evaluationOffset = evaluationOffset;
            return this;
        }

        /**
         * @param evaluationOffset NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition&#39;s `evaluation_offset`.
         * 
         * @return builder
         * 
         * @deprecated
         * use `aggregation_method` attribute instead
         * 
         */
        @Deprecated /* use `aggregation_method` attribute instead */
        public Builder evaluationOffset(Integer evaluationOffset) {
            return evaluationOffset(Output.of(evaluationOffset));
        }

        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param sinceValue NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition&#39;s `since_value`.
         * 
         * @return builder
         * 
         * @deprecated
         * use `aggregation_method` attribute instead
         * 
         */
        @Deprecated /* use `aggregation_method` attribute instead */
        public Builder sinceValue(@Nullable Output<String> sinceValue) {
            $.sinceValue = sinceValue;
            return this;
        }

        /**
         * @param sinceValue NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition&#39;s `since_value`.
         * 
         * @return builder
         * 
         * @deprecated
         * use `aggregation_method` attribute instead
         * 
         */
        @Deprecated /* use `aggregation_method` attribute instead */
        public Builder sinceValue(String sinceValue) {
            return sinceValue(Output.of(sinceValue));
        }

        public NrqlAlertConditionNrqlArgs build() {
            if ($.query == null) {
                throw new MissingRequiredPropertyException("NrqlAlertConditionNrqlArgs", "query");
            }
            return $;
        }
    }

}
