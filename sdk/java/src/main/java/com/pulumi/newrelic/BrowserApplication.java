// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.BrowserApplicationArgs;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.inputs.BrowserApplicationState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Use this resource to create, update, and delete a standalone New Relic browser application.
 * 
 * ## Example Usage
 * 
 * Basic usage to create a standalone browser application.
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.BrowserApplication;
 * import com.pulumi.newrelic.BrowserApplicationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new BrowserApplication(&#34;foo&#34;, BrowserApplicationArgs.builder()        
 *             .cookiesEnabled(true)
 *             .distributedTracingEnabled(true)
 *             .loaderType(&#34;SPA&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Browser applications can be imported using the GUID of the browser application. bash
 * 
 * ```sh
 *  $ pulumi import newrelic:index/browserApplication:BrowserApplication foo &lt;GUID&gt;
 * ```
 * 
 */
@ResourceType(type="newrelic:index/browserApplication:BrowserApplication")
public class BrowserApplication extends com.pulumi.resources.CustomResource {
    /**
     * The New Relic account ID of the account you wish to create the browser application. Defaults to the account ID set in your environment variable `NEW_RELIC_ACCOUNT_ID`.
     * 
     */
    @Export(name="accountId", type=Integer.class, parameters={})
    private Output<Integer> accountId;

    /**
     * @return The New Relic account ID of the account you wish to create the browser application. Defaults to the account ID set in your environment variable `NEW_RELIC_ACCOUNT_ID`.
     * 
     */
    public Output<Integer> accountId() {
        return this.accountId;
    }
    /**
     * Configure cookies. The default is enabled: true.
     * 
     */
    @Export(name="cookiesEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> cookiesEnabled;

    /**
     * @return Configure cookies. The default is enabled: true.
     * 
     */
    public Output<Optional<Boolean>> cookiesEnabled() {
        return Codegen.optional(this.cookiesEnabled);
    }
    /**
     * Configure distributed tracing in browser apps. The default is enabled: true.
     * 
     */
    @Export(name="distributedTracingEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> distributedTracingEnabled;

    /**
     * @return Configure distributed tracing in browser apps. The default is enabled: true.
     * 
     */
    public Output<Optional<Boolean>> distributedTracingEnabled() {
        return Codegen.optional(this.distributedTracingEnabled);
    }
    /**
     * The GUID of the browser application.
     * 
     */
    @Export(name="guid", type=String.class, parameters={})
    private Output<String> guid;

    /**
     * @return The GUID of the browser application.
     * 
     */
    public Output<String> guid() {
        return this.guid;
    }
    /**
     * JavaScript configuration of the browser application encoded into a string.
     * 
     */
    @Export(name="jsConfig", type=String.class, parameters={})
    private Output<String> jsConfig;

    /**
     * @return JavaScript configuration of the browser application encoded into a string.
     * 
     */
    public Output<String> jsConfig() {
        return this.jsConfig;
    }
    /**
     * Determines which browser loader is configured. Valid values are `SPA`, `PRO`, and `LITE`. The default is `SPA`. See the [browser agent loader documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for a for information on the valid loader types.
     * 
     */
    @Export(name="loaderType", type=String.class, parameters={})
    private Output</* @Nullable */ String> loaderType;

    /**
     * @return Determines which browser loader is configured. Valid values are `SPA`, `PRO`, and `LITE`. The default is `SPA`. See the [browser agent loader documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for a for information on the valid loader types.
     * 
     */
    public Output<Optional<String>> loaderType() {
        return Codegen.optional(this.loaderType);
    }
    /**
     * The name of the browser application.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the browser application.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BrowserApplication(String name) {
        this(name, BrowserApplicationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BrowserApplication(String name, @Nullable BrowserApplicationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BrowserApplication(String name, @Nullable BrowserApplicationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/browserApplication:BrowserApplication", name, args == null ? BrowserApplicationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private BrowserApplication(String name, Output<String> id, @Nullable BrowserApplicationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/browserApplication:BrowserApplication", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BrowserApplication get(String name, Output<String> id, @Nullable BrowserApplicationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BrowserApplication(name, id, state, options);
    }
}
