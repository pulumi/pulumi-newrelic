// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.newrelic.inputs.WorkflowDestinationArgs;
import com.pulumi.newrelic.inputs.WorkflowEnrichmentsArgs;
import com.pulumi.newrelic.inputs.WorkflowIssuesFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkflowArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkflowArgs Empty = new WorkflowArgs();

    /**
     * Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Notification configuration. See Nested destination blocks below for details.
     * 
     */
    @Import(name="destinations", required=true)
    private Output<List<WorkflowDestinationArgs>> destinations;

    /**
     * @return Notification configuration. See Nested destination blocks below for details.
     * 
     */
    public Output<List<WorkflowDestinationArgs>> destinations() {
        return this.destinations;
    }

    /**
     * **DEPRECATED** Whether destinations are enabled. Please use `enabled` instead:
     * these two are different flags, but they are functionally identical. Defaults to true.
     * 
     * @deprecated
     * Please use &#39;enabled&#39; instead
     * 
     */
    @Deprecated /* Please use 'enabled' instead */
    @Import(name="destinationsEnabled")
    private @Nullable Output<Boolean> destinationsEnabled;

    /**
     * @return **DEPRECATED** Whether destinations are enabled. Please use `enabled` instead:
     * these two are different flags, but they are functionally identical. Defaults to true.
     * 
     * @deprecated
     * Please use &#39;enabled&#39; instead
     * 
     */
    @Deprecated /* Please use 'enabled' instead */
    public Optional<Output<Boolean>> destinationsEnabled() {
        return Optional.ofNullable(this.destinationsEnabled);
    }

    /**
     * Whether workflow is enabled. Defaults to true.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether workflow is enabled. Defaults to true.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Workflow&#39;s enrichments. See Nested enrichments blocks below for details.
     * 
     */
    @Import(name="enrichments")
    private @Nullable Output<WorkflowEnrichmentsArgs> enrichments;

    /**
     * @return Workflow&#39;s enrichments. See Nested enrichments blocks below for details.
     * 
     */
    public Optional<Output<WorkflowEnrichmentsArgs>> enrichments() {
        return Optional.ofNullable(this.enrichments);
    }

    /**
     * Whether enrichments are enabled. Defaults to true.
     * 
     */
    @Import(name="enrichmentsEnabled")
    private @Nullable Output<Boolean> enrichmentsEnabled;

    /**
     * @return Whether enrichments are enabled. Defaults to true.
     * 
     */
    public Optional<Output<Boolean>> enrichmentsEnabled() {
        return Optional.ofNullable(this.enrichmentsEnabled);
    }

    /**
     * A filter used to identify issues handled by this workflow. See Nested issuesFilter blocks below for details.
     * 
     */
    @Import(name="issuesFilter", required=true)
    private Output<WorkflowIssuesFilterArgs> issuesFilter;

    /**
     * @return A filter used to identify issues handled by this workflow. See Nested issuesFilter blocks below for details.
     * 
     */
    public Output<WorkflowIssuesFilterArgs> issuesFilter() {
        return this.issuesFilter;
    }

    /**
     * How to handle muted issues. See Muting Rules below for details.
     * 
     */
    @Import(name="mutingRulesHandling", required=true)
    private Output<String> mutingRulesHandling;

    /**
     * @return How to handle muted issues. See Muting Rules below for details.
     * 
     */
    public Output<String> mutingRulesHandling() {
        return this.mutingRulesHandling;
    }

    /**
     * The name of the workflow.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the workflow.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private WorkflowArgs() {}

    private WorkflowArgs(WorkflowArgs $) {
        this.accountId = $.accountId;
        this.destinations = $.destinations;
        this.destinationsEnabled = $.destinationsEnabled;
        this.enabled = $.enabled;
        this.enrichments = $.enrichments;
        this.enrichmentsEnabled = $.enrichmentsEnabled;
        this.issuesFilter = $.issuesFilter;
        this.mutingRulesHandling = $.mutingRulesHandling;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkflowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkflowArgs $;

        public Builder() {
            $ = new WorkflowArgs();
        }

        public Builder(WorkflowArgs defaults) {
            $ = new WorkflowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param destinations Notification configuration. See Nested destination blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder destinations(Output<List<WorkflowDestinationArgs>> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations Notification configuration. See Nested destination blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder destinations(List<WorkflowDestinationArgs> destinations) {
            return destinations(Output.of(destinations));
        }

        /**
         * @param destinations Notification configuration. See Nested destination blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder destinations(WorkflowDestinationArgs... destinations) {
            return destinations(List.of(destinations));
        }

        /**
         * @param destinationsEnabled **DEPRECATED** Whether destinations are enabled. Please use `enabled` instead:
         * these two are different flags, but they are functionally identical. Defaults to true.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use &#39;enabled&#39; instead
         * 
         */
        @Deprecated /* Please use 'enabled' instead */
        public Builder destinationsEnabled(@Nullable Output<Boolean> destinationsEnabled) {
            $.destinationsEnabled = destinationsEnabled;
            return this;
        }

        /**
         * @param destinationsEnabled **DEPRECATED** Whether destinations are enabled. Please use `enabled` instead:
         * these two are different flags, but they are functionally identical. Defaults to true.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use &#39;enabled&#39; instead
         * 
         */
        @Deprecated /* Please use 'enabled' instead */
        public Builder destinationsEnabled(Boolean destinationsEnabled) {
            return destinationsEnabled(Output.of(destinationsEnabled));
        }

        /**
         * @param enabled Whether workflow is enabled. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether workflow is enabled. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param enrichments Workflow&#39;s enrichments. See Nested enrichments blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder enrichments(@Nullable Output<WorkflowEnrichmentsArgs> enrichments) {
            $.enrichments = enrichments;
            return this;
        }

        /**
         * @param enrichments Workflow&#39;s enrichments. See Nested enrichments blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder enrichments(WorkflowEnrichmentsArgs enrichments) {
            return enrichments(Output.of(enrichments));
        }

        /**
         * @param enrichmentsEnabled Whether enrichments are enabled. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder enrichmentsEnabled(@Nullable Output<Boolean> enrichmentsEnabled) {
            $.enrichmentsEnabled = enrichmentsEnabled;
            return this;
        }

        /**
         * @param enrichmentsEnabled Whether enrichments are enabled. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder enrichmentsEnabled(Boolean enrichmentsEnabled) {
            return enrichmentsEnabled(Output.of(enrichmentsEnabled));
        }

        /**
         * @param issuesFilter A filter used to identify issues handled by this workflow. See Nested issuesFilter blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder issuesFilter(Output<WorkflowIssuesFilterArgs> issuesFilter) {
            $.issuesFilter = issuesFilter;
            return this;
        }

        /**
         * @param issuesFilter A filter used to identify issues handled by this workflow. See Nested issuesFilter blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder issuesFilter(WorkflowIssuesFilterArgs issuesFilter) {
            return issuesFilter(Output.of(issuesFilter));
        }

        /**
         * @param mutingRulesHandling How to handle muted issues. See Muting Rules below for details.
         * 
         * @return builder
         * 
         */
        public Builder mutingRulesHandling(Output<String> mutingRulesHandling) {
            $.mutingRulesHandling = mutingRulesHandling;
            return this;
        }

        /**
         * @param mutingRulesHandling How to handle muted issues. See Muting Rules below for details.
         * 
         * @return builder
         * 
         */
        public Builder mutingRulesHandling(String mutingRulesHandling) {
            return mutingRulesHandling(Output.of(mutingRulesHandling));
        }

        /**
         * @param name The name of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public WorkflowArgs build() {
            if ($.destinations == null) {
                throw new MissingRequiredPropertyException("WorkflowArgs", "destinations");
            }
            if ($.issuesFilter == null) {
                throw new MissingRequiredPropertyException("WorkflowArgs", "issuesFilter");
            }
            if ($.mutingRulesHandling == null) {
                throw new MissingRequiredPropertyException("WorkflowArgs", "mutingRulesHandling");
            }
            return $;
        }
    }

}
