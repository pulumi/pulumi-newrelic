// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.MonitorDowntimeArgs;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.inputs.MonitorDowntimeState;
import com.pulumi.newrelic.outputs.MonitorDowntimeEndRepeat;
import com.pulumi.newrelic.outputs.MonitorDowntimeFrequency;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Use this resource to create, update, and delete [Monitor Downtimes](https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/using-monitors/monitor-downtimes-disable-monitoring-during-scheduled-maintenance-times/) in New Relic.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.MonitorDowntime;
 * import com.pulumi.newrelic.MonitorDowntimeArgs;
 * import com.pulumi.newrelic.inputs.MonitorDowntimeEndRepeatArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new MonitorDowntime("foo", MonitorDowntimeArgs.builder()
 *             .name("Sample Monitor Downtime")
 *             .monitorGuids(            
 *                 "<GUID-1>",
 *                 "<GUID-2>")
 *             .mode("WEEKLY")
 *             .startTime("2023-11-30T10:30:00")
 *             .endTime("2023-12-10T02:45:30")
 *             .timeZone("Asia/Kolkata")
 *             .endRepeat(MonitorDowntimeEndRepeatArgs.builder()
 *                 .onDate("2023-12-20")
 *                 .build())
 *             .maintenanceDays(            
 *                 "FRIDAY",
 *                 "SATURDAY")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * Monitor Downtimes are of four types; **one-time**, **daily**, **weekly** and **monthly**. For more details on each type and the right arguments that go with them, check out the argument reference and examples sections below.
 * 
 * ## Examples
 * 
 * ### One-Time Monitor Downtime
 * 
 * The below example illustrates creating a **one-time** monitor downtime.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.MonitorDowntime;
 * import com.pulumi.newrelic.MonitorDowntimeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sampleOneTimeNewrelicMonitorDowntime = new MonitorDowntime("sampleOneTimeNewrelicMonitorDowntime", MonitorDowntimeArgs.builder()
 *             .name("Sample One Time Monitor Downtime")
 *             .monitorGuids(            
 *                 "<GUID-1>",
 *                 "<GUID-2>")
 *             .mode("ONE_TIME")
 *             .startTime("2023-12-04T10:15:00")
 *             .endTime("2024-01-04T16:24:30")
 *             .timeZone("America/Los_Angeles")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Daily Monitor Downtime
 * 
 * The below example illustrates creating a **daily** monitor downtime.
 * 
 * Note that `end_repeat` has been specified in the configuration; however, this is optional, in accordance with the rules of `end_repeat` specified in the argument reference section above. This example uses the `on_date` nested argument of `end_repeat`, however, the other nested argument, `on_repeat` may also be used _instead_, as you may see in some of the other examples below; though both `on_date` and `on_repeat` cannot be specified together, as they are mutually exclusive.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.MonitorDowntime;
 * import com.pulumi.newrelic.MonitorDowntimeArgs;
 * import com.pulumi.newrelic.inputs.MonitorDowntimeEndRepeatArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sampleDailyNewrelicMonitorDowntime = new MonitorDowntime("sampleDailyNewrelicMonitorDowntime", MonitorDowntimeArgs.builder()
 *             .name("Sample Daily Monitor Downtime")
 *             .monitorGuids(            
 *                 "<GUID-1>",
 *                 "<GUID-2>")
 *             .mode("DAILY")
 *             .startTime("2023-12-04T18:15:00")
 *             .endTime("2024-01-04T07:15:00")
 *             .endRepeat(MonitorDowntimeEndRepeatArgs.builder()
 *                 .onDate("2023-12-25")
 *                 .build())
 *             .timeZone("Asia/Kolkata")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Weekly Monitor Downtime
 * 
 * The below example illustrates creating a **weekly** monitor downtime.
 * 
 * Note that `maintenance_days` has been specified in the configuration as it is required with weekly monitor downtimes; and `end_repeat` has not been specified as it is optional, all in accordance with the rules of these arguments specified in the argument reference section above.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.MonitorDowntime;
 * import com.pulumi.newrelic.MonitorDowntimeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sampleWeeklyNewrelicMonitorDowntime = new MonitorDowntime("sampleWeeklyNewrelicMonitorDowntime", MonitorDowntimeArgs.builder()
 *             .name("Sample Weekly Monitor Downtime")
 *             .monitorGuids(            
 *                 "<GUID-1>",
 *                 "<GUID-2>")
 *             .mode("WEEKLY")
 *             .startTime("2023-12-04T14:15:00")
 *             .endTime("2024-01-04T23:55:00")
 *             .timeZone("US/Hawaii")
 *             .maintenanceDays(            
 *                 "SATURDAY",
 *                 "SUNDAY")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Monthly Monitor Downtime
 * 
 * The below example illustrates creating a **monthly** monitor downtime.
 * 
 * Note that `frequency` has been specified in the configuration as it is required with monthly monitor downtimes, and `end_repeat` has been specified too, though it is optional. `frequency` has been specified with `days_of_week` comprising both of its nested arguments, `ordinal_day_of_month` and `week_day`; all in accordance with the rules of these arguments specified in the argument reference section above.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.MonitorDowntime;
 * import com.pulumi.newrelic.MonitorDowntimeArgs;
 * import com.pulumi.newrelic.inputs.MonitorDowntimeEndRepeatArgs;
 * import com.pulumi.newrelic.inputs.MonitorDowntimeFrequencyArgs;
 * import com.pulumi.newrelic.inputs.MonitorDowntimeFrequencyDaysOfWeekArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sampleMonthlyNewrelicMonitorDowntime = new MonitorDowntime("sampleMonthlyNewrelicMonitorDowntime", MonitorDowntimeArgs.builder()
 *             .name("Sample Monthly Monitor Downtime")
 *             .monitorGuids(            
 *                 "<GUID-1>",
 *                 "<GUID-2>")
 *             .mode("MONTHLY")
 *             .startTime("2023-12-04T07:15:00")
 *             .endTime("2024-01-04T19:15:00")
 *             .endRepeat(MonitorDowntimeEndRepeatArgs.builder()
 *                 .onRepeat(6)
 *                 .build())
 *             .timeZone("Europe/Dublin")
 *             .frequency(MonitorDowntimeFrequencyArgs.builder()
 *                 .daysOfWeek(MonitorDowntimeFrequencyDaysOfWeekArgs.builder()
 *                     .ordinalDayOfMonth("SECOND")
 *                     .weekDay("SATURDAY")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * However, the `frequency` block in monthly monitor downtimes may also be specified with its other nested argument, `days_of_month`, as shown in the example below - though both `days_of_month` and `days_of_week` cannot be specified together, as they are mutually exclusive.
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.MonitorDowntime;
 * import com.pulumi.newrelic.MonitorDowntimeArgs;
 * import com.pulumi.newrelic.inputs.MonitorDowntimeEndRepeatArgs;
 * import com.pulumi.newrelic.inputs.MonitorDowntimeFrequencyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sampleMonthlyNewrelicMonitorDowntime = new MonitorDowntime("sampleMonthlyNewrelicMonitorDowntime", MonitorDowntimeArgs.builder()
 *             .name("Sample Monthly Monitor Downtime")
 *             .monitorGuids(            
 *                 "<GUID-1>",
 *                 "<GUID-2>")
 *             .mode("MONTHLY")
 *             .startTime("2023-12-04T07:15:00")
 *             .endTime("2024-01-04T19:15:00")
 *             .endRepeat(MonitorDowntimeEndRepeatArgs.builder()
 *                 .onRepeat(6)
 *                 .build())
 *             .timeZone("Europe/Dublin")
 *             .frequency(MonitorDowntimeFrequencyArgs.builder()
 *                 .daysOfMonths(                
 *                     3,
 *                     6,
 *                     14,
 *                     23)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * A monitor downtime can be imported into Terraform configuration using its `guid`, i.e.
 * 
 * bash
 * 
 * ```sh
 * $ pulumi import newrelic:index/monitorDowntime:MonitorDowntime monitor &lt;guid&gt;
 * ```
 * 
 */
@ResourceType(type="newrelic:index/monitorDowntime:MonitorDowntime")
public class MonitorDowntime extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the New Relic account in which the Monitor Downtime shall be created. Defaults to the `account_id` in the provider{} configuration if not specified.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return The ID of the New Relic account in which the Monitor Downtime shall be created. Defaults to the `account_id` in the provider{} configuration if not specified.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * A specification of when the Monitor Downtime should end its repeat cycle, by number of occurrences or date.
     * 
     */
    @Export(name="endRepeat", refs={MonitorDowntimeEndRepeat.class}, tree="[0]")
    private Output</* @Nullable */ MonitorDowntimeEndRepeat> endRepeat;

    /**
     * @return A specification of when the Monitor Downtime should end its repeat cycle, by number of occurrences or date.
     * 
     */
    public Output<Optional<MonitorDowntimeEndRepeat>> endRepeat() {
        return Codegen.optional(this.endRepeat);
    }
    /**
     * A datetime stamp signifying the end of the Monitor Downtime.
     * 
     */
    @Export(name="endTime", refs={String.class}, tree="[0]")
    private Output<String> endTime;

    /**
     * @return A datetime stamp signifying the end of the Monitor Downtime.
     * 
     */
    public Output<String> endTime() {
        return this.endTime;
    }
    /**
     * Configuration options for which days of the month a monitor downtime will occur
     * 
     */
    @Export(name="frequency", refs={MonitorDowntimeFrequency.class}, tree="[0]")
    private Output</* @Nullable */ MonitorDowntimeFrequency> frequency;

    /**
     * @return Configuration options for which days of the month a monitor downtime will occur
     * 
     */
    public Output<Optional<MonitorDowntimeFrequency>> frequency() {
        return Codegen.optional(this.frequency);
    }
    /**
     * A list of maintenance days to be included with the created weekly Monitor Downtime.
     * 
     */
    @Export(name="maintenanceDays", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> maintenanceDays;

    /**
     * @return A list of maintenance days to be included with the created weekly Monitor Downtime.
     * 
     */
    public Output<Optional<List<String>>> maintenanceDays() {
        return Codegen.optional(this.maintenanceDays);
    }
    /**
     * An identifier of the type of Monitor Downtime to be created.
     * 
     */
    @Export(name="mode", refs={String.class}, tree="[0]")
    private Output<String> mode;

    /**
     * @return An identifier of the type of Monitor Downtime to be created.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }
    /**
     * A list of GUIDs of monitors, to which the created Monitor Downtime shall be applied.
     * 
     */
    @Export(name="monitorGuids", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> monitorGuids;

    /**
     * @return A list of GUIDs of monitors, to which the created Monitor Downtime shall be applied.
     * 
     */
    public Output<Optional<List<String>>> monitorGuids() {
        return Codegen.optional(this.monitorGuids);
    }
    /**
     * A name to identify the Monitor Downtime to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return A name to identify the Monitor Downtime to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A datetime stamp signifying the start of the Monitor Downtime.
     * 
     */
    @Export(name="startTime", refs={String.class}, tree="[0]")
    private Output<String> startTime;

    /**
     * @return A datetime stamp signifying the start of the Monitor Downtime.
     * 
     */
    public Output<String> startTime() {
        return this.startTime;
    }
    /**
     * The timezone that applies to the Monitor Downtime schedule.
     * 
     */
    @Export(name="timeZone", refs={String.class}, tree="[0]")
    private Output<String> timeZone;

    /**
     * @return The timezone that applies to the Monitor Downtime schedule.
     * 
     */
    public Output<String> timeZone() {
        return this.timeZone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MonitorDowntime(java.lang.String name) {
        this(name, MonitorDowntimeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MonitorDowntime(java.lang.String name, MonitorDowntimeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MonitorDowntime(java.lang.String name, MonitorDowntimeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/monitorDowntime:MonitorDowntime", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private MonitorDowntime(java.lang.String name, Output<java.lang.String> id, @Nullable MonitorDowntimeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/monitorDowntime:MonitorDowntime", name, state, makeResourceOptions(options, id), false);
    }

    private static MonitorDowntimeArgs makeArgs(MonitorDowntimeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? MonitorDowntimeArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MonitorDowntime get(java.lang.String name, Output<java.lang.String> id, @Nullable MonitorDowntimeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MonitorDowntime(name, id, state, options);
    }
}
