// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ServiceLevelObjectiveTimeWindowRolling {
    /**
     * @return Valid values are `1`, `7` and `28`.
     * 
     */
    private Integer count;
    /**
     * @return The only supported value is `DAY`.
     * 
     */
    private String unit;

    private ServiceLevelObjectiveTimeWindowRolling() {}
    /**
     * @return Valid values are `1`, `7` and `28`.
     * 
     */
    public Integer count() {
        return this.count;
    }
    /**
     * @return The only supported value is `DAY`.
     * 
     */
    public String unit() {
        return this.unit;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceLevelObjectiveTimeWindowRolling defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer count;
        private String unit;
        public Builder() {}
        public Builder(ServiceLevelObjectiveTimeWindowRolling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.count = defaults.count;
    	      this.unit = defaults.unit;
        }

        @CustomType.Setter
        public Builder count(Integer count) {
            if (count == null) {
              throw new MissingRequiredPropertyException("ServiceLevelObjectiveTimeWindowRolling", "count");
            }
            this.count = count;
            return this;
        }
        @CustomType.Setter
        public Builder unit(String unit) {
            if (unit == null) {
              throw new MissingRequiredPropertyException("ServiceLevelObjectiveTimeWindowRolling", "unit");
            }
            this.unit = unit;
            return this;
        }
        public ServiceLevelObjectiveTimeWindowRolling build() {
            final var _resultValue = new ServiceLevelObjectiveTimeWindowRolling();
            _resultValue.count = count;
            _resultValue.unit = unit;
            return _resultValue;
        }
    }
}
