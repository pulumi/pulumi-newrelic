// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.OneDashboardArgs;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.inputs.OneDashboardState;
import com.pulumi.newrelic.outputs.OneDashboardPage;
import com.pulumi.newrelic.outputs.OneDashboardVariable;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ### Create a New Relic One Dashboard
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.OneDashboard;
 * import com.pulumi.newrelic.OneDashboardArgs;
 * import com.pulumi.newrelic.inputs.OneDashboardPageArgs;
 * import com.pulumi.newrelic.inputs.OneDashboardVariableArgs;
 * import com.pulumi.newrelic.inputs.OneDashboardVariableNrqlQueryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampledash = new OneDashboard("exampledash", OneDashboardArgs.builder()
 *             .name("New Relic Terraform Example")
 *             .permissions("public_read_only")
 *             .pages(OneDashboardPageArgs.builder()
 *                 .name("New Relic Terraform Example")
 *                 .widgetBillboards(OneDashboardPageWidgetBillboardArgs.builder()
 *                     .title("Requests per minute")
 *                     .row(1)
 *                     .column(1)
 *                     .width(6)
 *                     .height(3)
 *                     .nrqlQueries(OneDashboardPageWidgetBillboardNrqlQueryArgs.builder()
 *                         .query("FROM Transaction SELECT rate(count(*), 1 minute)")
 *                         .build())
 *                     .build())
 *                 .widgetBars(                
 *                     OneDashboardPageWidgetBarArgs.builder()
 *                         .title("Average transaction duration, by application")
 *                         .row(1)
 *                         .column(7)
 *                         .width(6)
 *                         .height(3)
 *                         .nrqlQueries(OneDashboardPageWidgetBarNrqlQueryArgs.builder()
 *                             .accountId(12345)
 *                             .query("FROM Transaction SELECT average(duration) FACET appName")
 *                             .build())
 *                         .linkedEntityGuids("abc123")
 *                         .build(),
 *                     OneDashboardPageWidgetBarArgs.builder()
 *                         .title("Average transaction duration, by application")
 *                         .row(4)
 *                         .column(1)
 *                         .width(6)
 *                         .height(3)
 *                         .nrqlQueries(OneDashboardPageWidgetBarNrqlQueryArgs.builder()
 *                             .accountId(12345)
 *                             .query("FROM Transaction SELECT average(duration) FACET appName")
 *                             .build())
 *                         .filterCurrentDashboard(true)
 *                         .colors(OneDashboardPageWidgetBarColorArgs.builder()
 *                             .color("#722727")
 *                             .seriesOverrides(                            
 *                                 OneDashboardPageWidgetBarColorSeriesOverrideArgs.builder()
 *                                     .color("#722322")
 *                                     .seriesName("Node")
 *                                     .build(),
 *                                 OneDashboardPageWidgetBarColorSeriesOverrideArgs.builder()
 *                                     .color("#236f70")
 *                                     .seriesName("Java")
 *                                     .build())
 *                             .build())
 *                         .build())
 *                 .widgetLines(                
 *                     OneDashboardPageWidgetLineArgs.builder()
 *                         .title("Average transaction duration and the request per minute, by application")
 *                         .row(4)
 *                         .column(7)
 *                         .width(6)
 *                         .height(3)
 *                         .nrqlQueries(                        
 *                             OneDashboardPageWidgetLineNrqlQueryArgs.builder()
 *                                 .accountId(12345)
 *                                 .query("FROM Transaction select max(duration) as 'max duration' where httpResponseCode = '504' timeseries since 5 minutes ago")
 *                                 .build(),
 *                             OneDashboardPageWidgetLineNrqlQueryArgs.builder()
 *                                 .query("FROM Transaction SELECT rate(count(*), 1 minute)")
 *                                 .build())
 *                         .legendEnabled(true)
 *                         .ignoreTimeRange(false)
 *                         .yAxisLeftZero(true)
 *                         .yAxisLeftMin(0)
 *                         .yAxisLeftMax(1)
 *                         .yAxisRight(OneDashboardPageWidgetLineYAxisRightArgs.builder()
 *                             .yAxisRightZero(true)
 *                             .yAxisRightMin(0)
 *                             .yAxisRightMax(300)
 *                             .yAxisRightSeries(                            
 *                                 "A",
 *                                 "B")
 *                             .build())
 *                         .isLabelVisible(true)
 *                         .thresholds(                        
 *                             OneDashboardPageWidgetLineThresholdArgs.builder()
 *                                 .name("Duration Threshold")
 *                                 .from(1)
 *                                 .to(2)
 *                                 .severity("critical")
 *                                 .build(),
 *                             OneDashboardPageWidgetLineThresholdArgs.builder()
 *                                 .name("Duration Threshold Two")
 *                                 .from(2.1)
 *                                 .to(3.3)
 *                                 .severity("warning")
 *                                 .build())
 *                         .units(OneDashboardPageWidgetLineUnitArgs.builder()
 *                             .unit("ms")
 *                             .seriesOverrides(OneDashboardPageWidgetLineUnitSeriesOverrideArgs.builder()
 *                                 .unit("ms")
 *                                 .seriesName("max duration")
 *                                 .build())
 *                             .build())
 *                         .build(),
 *                     OneDashboardPageWidgetLineArgs.builder()
 *                         .title("Overall CPU % Statistics")
 *                         .row(1)
 *                         .column(5)
 *                         .height(3)
 *                         .width(4)
 *                         .nrqlQueries(OneDashboardPageWidgetLineNrqlQueryArgs.builder()
 *                             .query("""
 * SELECT average(cpuSystemPercent), average(cpuUserPercent), average(cpuIdlePercent), average(cpuIOWaitPercent) FROM SystemSample  SINCE 1 hour ago TIMESERIES
 *                             """)
 *                             .build())
 *                         .facetShowOtherSeries(false)
 *                         .legendEnabled(true)
 *                         .ignoreTimeRange(false)
 *                         .yAxisLeftZero(true)
 *                         .yAxisLeftMin(0)
 *                         .yAxisLeftMax(0)
 *                         .nullValues(OneDashboardPageWidgetLineNullValueArgs.builder()
 *                             .nullValue("default")
 *                             .seriesOverrides(                            
 *                                 OneDashboardPageWidgetLineNullValueSeriesOverrideArgs.builder()
 *                                     .nullValue("remove")
 *                                     .seriesName("Avg Cpu User Percent")
 *                                     .build(),
 *                                 OneDashboardPageWidgetLineNullValueSeriesOverrideArgs.builder()
 *                                     .nullValue("zero")
 *                                     .seriesName("Avg Cpu Idle Percent")
 *                                     .build(),
 *                                 OneDashboardPageWidgetLineNullValueSeriesOverrideArgs.builder()
 *                                     .nullValue("default")
 *                                     .seriesName("Avg Cpu IO Wait Percent")
 *                                     .build(),
 *                                 OneDashboardPageWidgetLineNullValueSeriesOverrideArgs.builder()
 *                                     .nullValue("preserve")
 *                                     .seriesName("Avg Cpu System Percent")
 *                                     .build())
 *                             .build())
 *                         .build())
 *                 .widgetMarkdowns(OneDashboardPageWidgetMarkdownArgs.builder()
 *                     .title("Dashboard Note")
 *                     .row(7)
 *                     .column(1)
 *                     .width(12)
 *                     .height(3)
 *                     .text("""
 * ### Helpful Links
 * 
 * * [New Relic One](https://one.newrelic.com)
 * * [Developer Portal](https://developer.newrelic.com)                    """)
 *                     .build())
 *                 .build())
 *             .variables(OneDashboardVariableArgs.builder()
 *                 .defaultValues("value")
 *                 .isMultiSelection(true)
 *                 .items(OneDashboardVariableItemArgs.builder()
 *                     .title("item")
 *                     .value("ITEM")
 *                     .build())
 *                 .name("variable")
 *                 .nrqlQuery(OneDashboardVariableNrqlQueryArgs.builder()
 *                     .accountIds(12345)
 *                     .query("FROM Transaction SELECT average(duration) FACET appName")
 *                     .build())
 *                 .replacementStrategy("default")
 *                 .title("title")
 *                 .type("nrql")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * See additional examples.
 * 
 * ## Import
 * 
 * New Relic dashboards can be imported using their GUID, e.g.
 * 
 * bash
 * 
 * ```sh
 * $ pulumi import newrelic:index/oneDashboard:OneDashboard my_dashboard &lt;dashboard GUID&gt;
 * ```
 * 
 */
@ResourceType(type="newrelic:index/oneDashboard:OneDashboard")
public class OneDashboard extends com.pulumi.resources.CustomResource {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * Brief text describing the dashboard.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Brief text describing the dashboard.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The unique entity identifier of the dashboard page in New Relic.
     * 
     */
    @Export(name="guid", refs={String.class}, tree="[0]")
    private Output<String> guid;

    /**
     * @return The unique entity identifier of the dashboard page in New Relic.
     * 
     */
    public Output<String> guid() {
        return this.guid;
    }
    /**
     * The title of the dashboard.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The title of the dashboard.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A nested block that describes a page. See Nested page blocks below for details.
     * 
     */
    @Export(name="pages", refs={List.class,OneDashboardPage.class}, tree="[0,1]")
    private Output<List<OneDashboardPage>> pages;

    /**
     * @return A nested block that describes a page. See Nested page blocks below for details.
     * 
     */
    public Output<List<OneDashboardPage>> pages() {
        return this.pages;
    }
    /**
     * The URL for viewing the dashboard.
     * 
     */
    @Export(name="permalink", refs={String.class}, tree="[0]")
    private Output<String> permalink;

    /**
     * @return The URL for viewing the dashboard.
     * 
     */
    public Output<String> permalink() {
        return this.permalink;
    }
    /**
     * Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`.  Defaults to `public_read_only`.
     * 
     */
    @Export(name="permissions", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> permissions;

    /**
     * @return Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`.  Defaults to `public_read_only`.
     * 
     */
    public Output<Optional<String>> permissions() {
        return Codegen.optional(this.permissions);
    }
    /**
     * A nested block that describes a dashboard-local variable. See Nested variable blocks below for details.
     * 
     */
    @Export(name="variables", refs={List.class,OneDashboardVariable.class}, tree="[0,1]")
    private Output</* @Nullable */ List<OneDashboardVariable>> variables;

    /**
     * @return A nested block that describes a dashboard-local variable. See Nested variable blocks below for details.
     * 
     */
    public Output<Optional<List<OneDashboardVariable>>> variables() {
        return Codegen.optional(this.variables);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public OneDashboard(java.lang.String name) {
        this(name, OneDashboardArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public OneDashboard(java.lang.String name, OneDashboardArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public OneDashboard(java.lang.String name, OneDashboardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/oneDashboard:OneDashboard", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private OneDashboard(java.lang.String name, Output<java.lang.String> id, @Nullable OneDashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/oneDashboard:OneDashboard", name, state, makeResourceOptions(options, id), false);
    }

    private static OneDashboardArgs makeArgs(OneDashboardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? OneDashboardArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static OneDashboard get(java.lang.String name, Output<java.lang.String> id, @Nullable OneDashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new OneDashboard(name, id, state, options);
    }
}
