// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AlertConditionTerm {
    /**
     * @return In minutes, must be in the range of 5 to 120, inclusive.
     * 
     */
    private Integer duration;
    /**
     * @return One of (above, below, equal). Defaults to equal.
     * 
     */
    private @Nullable String operator;
    /**
     * @return One of (critical, warning). Defaults to critical.
     * 
     */
    private @Nullable String priority;
    /**
     * @return Must be 0 or greater.
     * 
     */
    private Double threshold;
    /**
     * @return One of (all, any).
     * 
     */
    private String timeFunction;

    private AlertConditionTerm() {}
    /**
     * @return In minutes, must be in the range of 5 to 120, inclusive.
     * 
     */
    public Integer duration() {
        return this.duration;
    }
    /**
     * @return One of (above, below, equal). Defaults to equal.
     * 
     */
    public Optional<String> operator() {
        return Optional.ofNullable(this.operator);
    }
    /**
     * @return One of (critical, warning). Defaults to critical.
     * 
     */
    public Optional<String> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return Must be 0 or greater.
     * 
     */
    public Double threshold() {
        return this.threshold;
    }
    /**
     * @return One of (all, any).
     * 
     */
    public String timeFunction() {
        return this.timeFunction;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlertConditionTerm defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer duration;
        private @Nullable String operator;
        private @Nullable String priority;
        private Double threshold;
        private String timeFunction;
        public Builder() {}
        public Builder(AlertConditionTerm defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.duration = defaults.duration;
    	      this.operator = defaults.operator;
    	      this.priority = defaults.priority;
    	      this.threshold = defaults.threshold;
    	      this.timeFunction = defaults.timeFunction;
        }

        @CustomType.Setter
        public Builder duration(Integer duration) {
            if (duration == null) {
              throw new MissingRequiredPropertyException("AlertConditionTerm", "duration");
            }
            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder operator(@Nullable String operator) {

            this.operator = operator;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable String priority) {

            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(Double threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("AlertConditionTerm", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder timeFunction(String timeFunction) {
            if (timeFunction == null) {
              throw new MissingRequiredPropertyException("AlertConditionTerm", "timeFunction");
            }
            this.timeFunction = timeFunction;
            return this;
        }
        public AlertConditionTerm build() {
            final var _resultValue = new AlertConditionTerm();
            _resultValue.duration = duration;
            _resultValue.operator = operator;
            _resultValue.priority = priority;
            _resultValue.threshold = threshold;
            _resultValue.timeFunction = timeFunction;
            return _resultValue;
        }
    }
}
