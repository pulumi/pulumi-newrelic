// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.newrelic.inputs.ObfuscationRuleActionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObfuscationRuleState extends com.pulumi.resources.ResourceArgs {

    public static final ObfuscationRuleState Empty = new ObfuscationRuleState();

    /**
     * The account id associated with the obfuscation rule.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account id associated with the obfuscation rule.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Actions for the rule. The actions will be applied in the order specified by this list.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<ObfuscationRuleActionArgs>> actions;

    /**
     * @return Actions for the rule. The actions will be applied in the order specified by this list.
     * 
     */
    public Optional<Output<List<ObfuscationRuleActionArgs>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * Description of rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the rule should be applied or not to incoming data.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the rule should be applied or not to incoming data.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * NRQL for determining whether a given log record should have obfuscation actions applied.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<String> filter;

    /**
     * @return NRQL for determining whether a given log record should have obfuscation actions applied.
     * 
     */
    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * Name of rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private ObfuscationRuleState() {}

    private ObfuscationRuleState(ObfuscationRuleState $) {
        this.accountId = $.accountId;
        this.actions = $.actions;
        this.description = $.description;
        this.enabled = $.enabled;
        this.filter = $.filter;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObfuscationRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObfuscationRuleState $;

        public Builder() {
            $ = new ObfuscationRuleState();
        }

        public Builder(ObfuscationRuleState defaults) {
            $ = new ObfuscationRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account id associated with the obfuscation rule.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account id associated with the obfuscation rule.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param actions Actions for the rule. The actions will be applied in the order specified by this list.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<List<ObfuscationRuleActionArgs>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions Actions for the rule. The actions will be applied in the order specified by this list.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<ObfuscationRuleActionArgs> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions Actions for the rule. The actions will be applied in the order specified by this list.
         * 
         * @return builder
         * 
         */
        public Builder actions(ObfuscationRuleActionArgs... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param description Description of rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Whether the rule should be applied or not to incoming data.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the rule should be applied or not to incoming data.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param filter NRQL for determining whether a given log record should have obfuscation actions applied.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter NRQL for determining whether a given log record should have obfuscation actions applied.
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param name Name of rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ObfuscationRuleState build() {
            return $;
        }
    }

}
