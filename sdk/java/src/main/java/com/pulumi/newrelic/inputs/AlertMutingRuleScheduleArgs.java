// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertMutingRuleScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertMutingRuleScheduleArgs Empty = new AlertMutingRuleScheduleArgs();

    /**
     * The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: &#39;2020-07-10T15:00:00&#39;. Conflicts with `repeat_count`
     * 
     */
    @Import(name="endRepeat")
    private @Nullable Output<String> endRepeat;

    /**
     * @return The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: &#39;2020-07-10T15:00:00&#39;. Conflicts with `repeat_count`
     * 
     */
    public Optional<Output<String>> endRepeat() {
        return Optional.ofNullable(this.endRepeat);
    }

    /**
     * The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: &#39;2020-07-15T14:30:00&#39;
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: &#39;2020-07-15T14:30:00&#39;
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
     * 
     */
    @Import(name="repeat")
    private @Nullable Output<String> repeat;

    /**
     * @return The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
     * 
     */
    public Optional<Output<String>> repeat() {
        return Optional.ofNullable(this.repeat);
    }

    /**
     * The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `end_repeat`
     * 
     */
    @Import(name="repeatCount")
    private @Nullable Output<Integer> repeatCount;

    /**
     * @return The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `end_repeat`
     * 
     */
    public Optional<Output<Integer>> repeatCount() {
        return Optional.ofNullable(this.repeatCount);
    }

    /**
     * The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: &#39;2020-07-08T14:30:00&#39;
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: &#39;2020-07-08T14:30:00&#39;
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    @Import(name="timeZone", required=true)
    private Output<String> timeZone;

    public Output<String> timeZone() {
        return this.timeZone;
    }

    /**
     * The day(s) of the week that a muting rule should repeat when the repeat field is set to &#39;WEEKLY&#39;. Example: [&#39;MONDAY&#39;, &#39;WEDNESDAY&#39;]
     * 
     */
    @Import(name="weeklyRepeatDays")
    private @Nullable Output<List<String>> weeklyRepeatDays;

    /**
     * @return The day(s) of the week that a muting rule should repeat when the repeat field is set to &#39;WEEKLY&#39;. Example: [&#39;MONDAY&#39;, &#39;WEDNESDAY&#39;]
     * 
     */
    public Optional<Output<List<String>>> weeklyRepeatDays() {
        return Optional.ofNullable(this.weeklyRepeatDays);
    }

    private AlertMutingRuleScheduleArgs() {}

    private AlertMutingRuleScheduleArgs(AlertMutingRuleScheduleArgs $) {
        this.endRepeat = $.endRepeat;
        this.endTime = $.endTime;
        this.repeat = $.repeat;
        this.repeatCount = $.repeatCount;
        this.startTime = $.startTime;
        this.timeZone = $.timeZone;
        this.weeklyRepeatDays = $.weeklyRepeatDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertMutingRuleScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertMutingRuleScheduleArgs $;

        public Builder() {
            $ = new AlertMutingRuleScheduleArgs();
        }

        public Builder(AlertMutingRuleScheduleArgs defaults) {
            $ = new AlertMutingRuleScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endRepeat The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: &#39;2020-07-10T15:00:00&#39;. Conflicts with `repeat_count`
         * 
         * @return builder
         * 
         */
        public Builder endRepeat(@Nullable Output<String> endRepeat) {
            $.endRepeat = endRepeat;
            return this;
        }

        /**
         * @param endRepeat The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: &#39;2020-07-10T15:00:00&#39;. Conflicts with `repeat_count`
         * 
         * @return builder
         * 
         */
        public Builder endRepeat(String endRepeat) {
            return endRepeat(Output.of(endRepeat));
        }

        /**
         * @param endTime The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: &#39;2020-07-15T14:30:00&#39;
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: &#39;2020-07-15T14:30:00&#39;
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param repeat The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
         * 
         * @return builder
         * 
         */
        public Builder repeat(@Nullable Output<String> repeat) {
            $.repeat = repeat;
            return this;
        }

        /**
         * @param repeat The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
         * 
         * @return builder
         * 
         */
        public Builder repeat(String repeat) {
            return repeat(Output.of(repeat));
        }

        /**
         * @param repeatCount The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `end_repeat`
         * 
         * @return builder
         * 
         */
        public Builder repeatCount(@Nullable Output<Integer> repeatCount) {
            $.repeatCount = repeatCount;
            return this;
        }

        /**
         * @param repeatCount The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `end_repeat`
         * 
         * @return builder
         * 
         */
        public Builder repeatCount(Integer repeatCount) {
            return repeatCount(Output.of(repeatCount));
        }

        /**
         * @param startTime The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: &#39;2020-07-08T14:30:00&#39;
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: &#39;2020-07-08T14:30:00&#39;
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public Builder timeZone(Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        /**
         * @param weeklyRepeatDays The day(s) of the week that a muting rule should repeat when the repeat field is set to &#39;WEEKLY&#39;. Example: [&#39;MONDAY&#39;, &#39;WEDNESDAY&#39;]
         * 
         * @return builder
         * 
         */
        public Builder weeklyRepeatDays(@Nullable Output<List<String>> weeklyRepeatDays) {
            $.weeklyRepeatDays = weeklyRepeatDays;
            return this;
        }

        /**
         * @param weeklyRepeatDays The day(s) of the week that a muting rule should repeat when the repeat field is set to &#39;WEEKLY&#39;. Example: [&#39;MONDAY&#39;, &#39;WEDNESDAY&#39;]
         * 
         * @return builder
         * 
         */
        public Builder weeklyRepeatDays(List<String> weeklyRepeatDays) {
            return weeklyRepeatDays(Output.of(weeklyRepeatDays));
        }

        /**
         * @param weeklyRepeatDays The day(s) of the week that a muting rule should repeat when the repeat field is set to &#39;WEEKLY&#39;. Example: [&#39;MONDAY&#39;, &#39;WEDNESDAY&#39;]
         * 
         * @return builder
         * 
         */
        public Builder weeklyRepeatDays(String... weeklyRepeatDays) {
            return weeklyRepeatDays(List.of(weeklyRepeatDays));
        }

        public AlertMutingRuleScheduleArgs build() {
            $.timeZone = Objects.requireNonNull($.timeZone, "expected parameter 'timeZone' to be non-null");
            return $;
        }
    }

}
