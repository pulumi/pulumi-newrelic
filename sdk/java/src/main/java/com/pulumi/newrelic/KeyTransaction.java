// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.KeyTransactionArgs;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.inputs.KeyTransactionState;
import java.lang.Double;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Use this resource to create a new Key Transaction in New Relic.
 * 
 * &gt; **NOTE:** For more information on Key Transactions, head over to [this page](https://docs.newrelic.com/docs/apm/transactions/key-transactions/introduction-key-transactions/) in New Relic&#39;s docs.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.KeyTransaction;
 * import com.pulumi.newrelic.KeyTransactionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new KeyTransaction("foo", KeyTransactionArgs.builder()
 *             .applicationGuid("MzgfNjUyNnxBUE19QVBQTElDQVHJT068NTUfNDT4MjUy")
 *             .apdexIndex(0.5)
 *             .browserApdexTarget(0.5)
 *             .metricName("WebTransaction/Function/__main__:foo_bar")
 *             .name("Sample Key Transaction")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * A Key Transaction in New Relic may be imported into Terraform using its GUID specified in the `&lt;id&gt;` field, in the following command.
 * 
 * bash
 * 
 * ```sh
 * $ pulumi import newrelic:index/keyTransaction:KeyTransaction foo &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="newrelic:index/keyTransaction:KeyTransaction")
public class KeyTransaction extends com.pulumi.resources.CustomResource {
    /**
     * A decimal value, measuring user satisfaction with response times, ranging from 0 (frustrated) to 1 (satisfied).
     * 
     */
    @Export(name="apdexIndex", refs={Double.class}, tree="[0]")
    private Output<Double> apdexIndex;

    /**
     * @return A decimal value, measuring user satisfaction with response times, ranging from 0 (frustrated) to 1 (satisfied).
     * 
     */
    public Output<Double> apdexIndex() {
        return this.apdexIndex;
    }
    /**
     * The GUID of the APM Application comprising transactions, of which one would be made a key transaction.
     * 
     */
    @Export(name="applicationGuid", refs={String.class}, tree="[0]")
    private Output<String> applicationGuid;

    /**
     * @return The GUID of the APM Application comprising transactions, of which one would be made a key transaction.
     * 
     */
    public Output<String> applicationGuid() {
        return this.applicationGuid;
    }
    /**
     * A decimal value representing the response time threshold for satisfactory experience (e.g., 0.5 seconds).
     * 
     * &gt; **NOTE:** It may be noted that the `metric_name` and `application_guid` of a Key Transaction _cannot_ be updated in a key transaction that has already been created; since this is not supported. As a consequence, altering the values of `application_guid` and/or `metric_name` of a `newrelic.KeyTransaction` resource created (to try updating these values) would result in `pulumi preview` prompting a forced destruction and re-creation of the resource.
     * 
     */
    @Export(name="browserApdexTarget", refs={Double.class}, tree="[0]")
    private Output<Double> browserApdexTarget;

    /**
     * @return A decimal value representing the response time threshold for satisfactory experience (e.g., 0.5 seconds).
     * 
     * &gt; **NOTE:** It may be noted that the `metric_name` and `application_guid` of a Key Transaction _cannot_ be updated in a key transaction that has already been created; since this is not supported. As a consequence, altering the values of `application_guid` and/or `metric_name` of a `newrelic.KeyTransaction` resource created (to try updating these values) would result in `pulumi preview` prompting a forced destruction and re-creation of the resource.
     * 
     */
    public Output<Double> browserApdexTarget() {
        return this.browserApdexTarget;
    }
    /**
     * The domain of the entity monitored by the key transaction.
     * 
     */
    @Export(name="domain", refs={String.class}, tree="[0]")
    private Output<String> domain;

    /**
     * @return The domain of the entity monitored by the key transaction.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }
    /**
     * The name of the underlying metric monitored by the key transaction to be created.
     * 
     */
    @Export(name="metricName", refs={String.class}, tree="[0]")
    private Output<String> metricName;

    /**
     * @return The name of the underlying metric monitored by the key transaction to be created.
     * 
     */
    public Output<String> metricName() {
        return this.metricName;
    }
    /**
     * The name of the key transaction.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the key transaction.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The type of the entity monitored by the key transaction.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of the entity monitored by the key transaction.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public KeyTransaction(java.lang.String name) {
        this(name, KeyTransactionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public KeyTransaction(java.lang.String name, KeyTransactionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public KeyTransaction(java.lang.String name, KeyTransactionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/keyTransaction:KeyTransaction", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private KeyTransaction(java.lang.String name, Output<java.lang.String> id, @Nullable KeyTransactionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/keyTransaction:KeyTransaction", name, state, makeResourceOptions(options, id), false);
    }

    private static KeyTransactionArgs makeArgs(KeyTransactionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? KeyTransactionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static KeyTransaction get(java.lang.String name, Output<java.lang.String> id, @Nullable KeyTransactionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new KeyTransaction(name, id, state, options);
    }
}
