// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.synthetics.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecureCredentialPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecureCredentialPlainArgs Empty = new GetSecureCredentialPlainArgs();

    /**
     * The account in New Relic associated with the secure credential. Defaults to the account associated with the API key used.
     * 
     */
    @Import(name="accountId")
    private @Nullable String accountId;

    /**
     * @return The account in New Relic associated with the secure credential. Defaults to the account associated with the API key used.
     * 
     */
    public Optional<String> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The secure credential&#39;s key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.
     * 
     */
    @Import(name="key", required=true)
    private String key;

    /**
     * @return The secure credential&#39;s key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.
     * 
     */
    public String key() {
        return this.key;
    }

    private GetSecureCredentialPlainArgs() {}

    private GetSecureCredentialPlainArgs(GetSecureCredentialPlainArgs $) {
        this.accountId = $.accountId;
        this.key = $.key;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecureCredentialPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecureCredentialPlainArgs $;

        public Builder() {
            $ = new GetSecureCredentialPlainArgs();
        }

        public Builder(GetSecureCredentialPlainArgs defaults) {
            $ = new GetSecureCredentialPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account in New Relic associated with the secure credential. Defaults to the account associated with the API key used.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable String accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param key The secure credential&#39;s key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            $.key = key;
            return this;
        }

        public GetSecureCredentialPlainArgs build() {
            if ($.key == null) {
                throw new MissingRequiredPropertyException("GetSecureCredentialPlainArgs", "key");
            }
            return $;
        }
    }

}
