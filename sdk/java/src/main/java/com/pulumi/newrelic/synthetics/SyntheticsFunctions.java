// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.synthetics;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.synthetics.inputs.GetPrivateLocationArgs;
import com.pulumi.newrelic.synthetics.inputs.GetPrivateLocationPlainArgs;
import com.pulumi.newrelic.synthetics.inputs.GetSecureCredentialArgs;
import com.pulumi.newrelic.synthetics.inputs.GetSecureCredentialPlainArgs;
import com.pulumi.newrelic.synthetics.outputs.GetPrivateLocationResult;
import com.pulumi.newrelic.synthetics.outputs.GetSecureCredentialResult;
import java.util.concurrent.CompletableFuture;

public final class SyntheticsFunctions {
    /**
     * Use this data source to get information about a specific Synthetics monitor private location in New Relic that already exists.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.synthetics.SyntheticsFunctions;
     * import com.pulumi.newrelic.synthetics.inputs.GetPrivateLocationArgs;
     * import com.pulumi.newrelic.synthetics.Monitor;
     * import com.pulumi.newrelic.synthetics.MonitorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = SyntheticsFunctions.getPrivateLocation(GetPrivateLocationArgs.builder()
     *             .accountId(123456)
     *             .name(&#34;My private location&#34;)
     *             .build());
     * 
     *         var foo = new Monitor(&#34;foo&#34;, MonitorArgs.builder()        
     *             .locationsPrivates(example.applyValue(getPrivateLocationResult -&gt; getPrivateLocationResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.synthetics.SyntheticsFunctions;
     * import com.pulumi.newrelic.synthetics.inputs.GetPrivateLocationArgs;
     * import com.pulumi.newrelic.synthetics.StepMonitor;
     * import com.pulumi.newrelic.synthetics.StepMonitorArgs;
     * import com.pulumi.newrelic.synthetics.inputs.StepMonitorLocationPrivateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = SyntheticsFunctions.getPrivateLocation(GetPrivateLocationArgs.builder()
     *             .accountId(123456)
     *             .name(&#34;My private location&#34;)
     *             .build());
     * 
     *         var foo = new StepMonitor(&#34;foo&#34;, StepMonitorArgs.builder()        
     *             .locationPrivates(StepMonitorLocationPrivateArgs.builder()
     *                 .guid(example.applyValue(getPrivateLocationResult -&gt; getPrivateLocationResult.id()))
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrivateLocationResult> getPrivateLocation(GetPrivateLocationArgs args) {
        return getPrivateLocation(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific Synthetics monitor private location in New Relic that already exists.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.synthetics.SyntheticsFunctions;
     * import com.pulumi.newrelic.synthetics.inputs.GetPrivateLocationArgs;
     * import com.pulumi.newrelic.synthetics.Monitor;
     * import com.pulumi.newrelic.synthetics.MonitorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = SyntheticsFunctions.getPrivateLocation(GetPrivateLocationArgs.builder()
     *             .accountId(123456)
     *             .name(&#34;My private location&#34;)
     *             .build());
     * 
     *         var foo = new Monitor(&#34;foo&#34;, MonitorArgs.builder()        
     *             .locationsPrivates(example.applyValue(getPrivateLocationResult -&gt; getPrivateLocationResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.synthetics.SyntheticsFunctions;
     * import com.pulumi.newrelic.synthetics.inputs.GetPrivateLocationArgs;
     * import com.pulumi.newrelic.synthetics.StepMonitor;
     * import com.pulumi.newrelic.synthetics.StepMonitorArgs;
     * import com.pulumi.newrelic.synthetics.inputs.StepMonitorLocationPrivateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = SyntheticsFunctions.getPrivateLocation(GetPrivateLocationArgs.builder()
     *             .accountId(123456)
     *             .name(&#34;My private location&#34;)
     *             .build());
     * 
     *         var foo = new StepMonitor(&#34;foo&#34;, StepMonitorArgs.builder()        
     *             .locationPrivates(StepMonitorLocationPrivateArgs.builder()
     *                 .guid(example.applyValue(getPrivateLocationResult -&gt; getPrivateLocationResult.id()))
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrivateLocationResult> getPrivateLocationPlain(GetPrivateLocationPlainArgs args) {
        return getPrivateLocationPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific Synthetics monitor private location in New Relic that already exists.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.synthetics.SyntheticsFunctions;
     * import com.pulumi.newrelic.synthetics.inputs.GetPrivateLocationArgs;
     * import com.pulumi.newrelic.synthetics.Monitor;
     * import com.pulumi.newrelic.synthetics.MonitorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = SyntheticsFunctions.getPrivateLocation(GetPrivateLocationArgs.builder()
     *             .accountId(123456)
     *             .name(&#34;My private location&#34;)
     *             .build());
     * 
     *         var foo = new Monitor(&#34;foo&#34;, MonitorArgs.builder()        
     *             .locationsPrivates(example.applyValue(getPrivateLocationResult -&gt; getPrivateLocationResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.synthetics.SyntheticsFunctions;
     * import com.pulumi.newrelic.synthetics.inputs.GetPrivateLocationArgs;
     * import com.pulumi.newrelic.synthetics.StepMonitor;
     * import com.pulumi.newrelic.synthetics.StepMonitorArgs;
     * import com.pulumi.newrelic.synthetics.inputs.StepMonitorLocationPrivateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = SyntheticsFunctions.getPrivateLocation(GetPrivateLocationArgs.builder()
     *             .accountId(123456)
     *             .name(&#34;My private location&#34;)
     *             .build());
     * 
     *         var foo = new StepMonitor(&#34;foo&#34;, StepMonitorArgs.builder()        
     *             .locationPrivates(StepMonitorLocationPrivateArgs.builder()
     *                 .guid(example.applyValue(getPrivateLocationResult -&gt; getPrivateLocationResult.id()))
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrivateLocationResult> getPrivateLocation(GetPrivateLocationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("newrelic:synthetics/getPrivateLocation:getPrivateLocation", TypeShape.of(GetPrivateLocationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about a specific Synthetics monitor private location in New Relic that already exists.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.synthetics.SyntheticsFunctions;
     * import com.pulumi.newrelic.synthetics.inputs.GetPrivateLocationArgs;
     * import com.pulumi.newrelic.synthetics.Monitor;
     * import com.pulumi.newrelic.synthetics.MonitorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = SyntheticsFunctions.getPrivateLocation(GetPrivateLocationArgs.builder()
     *             .accountId(123456)
     *             .name(&#34;My private location&#34;)
     *             .build());
     * 
     *         var foo = new Monitor(&#34;foo&#34;, MonitorArgs.builder()        
     *             .locationsPrivates(example.applyValue(getPrivateLocationResult -&gt; getPrivateLocationResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.synthetics.SyntheticsFunctions;
     * import com.pulumi.newrelic.synthetics.inputs.GetPrivateLocationArgs;
     * import com.pulumi.newrelic.synthetics.StepMonitor;
     * import com.pulumi.newrelic.synthetics.StepMonitorArgs;
     * import com.pulumi.newrelic.synthetics.inputs.StepMonitorLocationPrivateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = SyntheticsFunctions.getPrivateLocation(GetPrivateLocationArgs.builder()
     *             .accountId(123456)
     *             .name(&#34;My private location&#34;)
     *             .build());
     * 
     *         var foo = new StepMonitor(&#34;foo&#34;, StepMonitorArgs.builder()        
     *             .locationPrivates(StepMonitorLocationPrivateArgs.builder()
     *                 .guid(example.applyValue(getPrivateLocationResult -&gt; getPrivateLocationResult.id()))
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrivateLocationResult> getPrivateLocationPlain(GetPrivateLocationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("newrelic:synthetics/getPrivateLocation:getPrivateLocation", TypeShape.of(GetPrivateLocationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about a specific Synthetics secure credential in New Relic that already exists.
     * 
     * Note that the secure credential&#39;s value is not returned as an attribute for security reasons.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.synthetics.SyntheticsFunctions;
     * import com.pulumi.newrelic.synthetics.inputs.GetSecureCredentialArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = SyntheticsFunctions.getSecureCredential(GetSecureCredentialArgs.builder()
     *             .key(&#34;MY_KEY&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecureCredentialResult> getSecureCredential(GetSecureCredentialArgs args) {
        return getSecureCredential(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific Synthetics secure credential in New Relic that already exists.
     * 
     * Note that the secure credential&#39;s value is not returned as an attribute for security reasons.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.synthetics.SyntheticsFunctions;
     * import com.pulumi.newrelic.synthetics.inputs.GetSecureCredentialArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = SyntheticsFunctions.getSecureCredential(GetSecureCredentialArgs.builder()
     *             .key(&#34;MY_KEY&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSecureCredentialResult> getSecureCredentialPlain(GetSecureCredentialPlainArgs args) {
        return getSecureCredentialPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about a specific Synthetics secure credential in New Relic that already exists.
     * 
     * Note that the secure credential&#39;s value is not returned as an attribute for security reasons.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.synthetics.SyntheticsFunctions;
     * import com.pulumi.newrelic.synthetics.inputs.GetSecureCredentialArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = SyntheticsFunctions.getSecureCredential(GetSecureCredentialArgs.builder()
     *             .key(&#34;MY_KEY&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecureCredentialResult> getSecureCredential(GetSecureCredentialArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("newrelic:synthetics/getSecureCredential:getSecureCredential", TypeShape.of(GetSecureCredentialResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about a specific Synthetics secure credential in New Relic that already exists.
     * 
     * Note that the secure credential&#39;s value is not returned as an attribute for security reasons.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.newrelic.synthetics.SyntheticsFunctions;
     * import com.pulumi.newrelic.synthetics.inputs.GetSecureCredentialArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = SyntheticsFunctions.getSecureCredential(GetSecureCredentialArgs.builder()
     *             .key(&#34;MY_KEY&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSecureCredentialResult> getSecureCredentialPlain(GetSecureCredentialPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("newrelic:synthetics/getSecureCredential:getSecureCredential", TypeShape.of(GetSecureCredentialResult.class), args, Utilities.withVersion(options));
    }
}
