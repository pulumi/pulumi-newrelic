// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.synthetics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetSecureCredentialArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecureCredentialArgs Empty = new GetSecureCredentialArgs();

    /**
     * The secure credential&#39;s key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return The secure credential&#39;s key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    private GetSecureCredentialArgs() {}

    private GetSecureCredentialArgs(GetSecureCredentialArgs $) {
        this.key = $.key;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecureCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecureCredentialArgs $;

        public Builder() {
            $ = new GetSecureCredentialArgs();
        }

        public Builder(GetSecureCredentialArgs defaults) {
            $ = new GetSecureCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param key The secure credential&#39;s key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The secure credential&#39;s key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        public GetSecureCredentialArgs build() {
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            return $;
        }
    }

}
