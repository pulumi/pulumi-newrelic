// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OneDashboardRawPageWidgetArgs extends com.pulumi.resources.ResourceArgs {

    public static final OneDashboardRawPageWidgetArgs Empty = new OneDashboardRawPageWidgetArgs();

    /**
     * (Required) Column position of widget from top left, starting at `1`.
     * 
     */
    @Import(name="column", required=true)
    private Output<Integer> column;

    /**
     * @return (Required) Column position of widget from top left, starting at `1`.
     * 
     */
    public Output<Integer> column() {
        return this.column;
    }

    /**
     * (Required) The configuration of the widget.
     * 
     */
    @Import(name="configuration", required=true)
    private Output<String> configuration;

    /**
     * @return (Required) The configuration of the widget.
     * 
     */
    public Output<String> configuration() {
        return this.configuration;
    }

    /**
     * (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
     * 
     */
    @Import(name="height")
    private @Nullable Output<Integer> height;

    /**
     * @return (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
     * 
     */
    public Optional<Output<Integer>> height() {
        return Optional.ofNullable(this.height);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * (Optional) Related entity GUIDs.
     * 
     */
    @Import(name="linkedEntityGuids")
    private @Nullable Output<List<String>> linkedEntityGuids;

    /**
     * @return (Optional) Related entity GUIDs.
     * 
     */
    public Optional<Output<List<String>>> linkedEntityGuids() {
        return Optional.ofNullable(this.linkedEntityGuids);
    }

    /**
     * (Required) Row position of widget from top left, starting at `1`.
     * 
     */
    @Import(name="row", required=true)
    private Output<Integer> row;

    /**
     * @return (Required) Row position of widget from top left, starting at `1`.
     * 
     */
    public Output<Integer> row() {
        return this.row;
    }

    /**
     * (Required) A title for the widget.
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return (Required) A title for the widget.
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    /**
     * (Required) The visualization ID of the widget
     * 
     */
    @Import(name="visualizationId", required=true)
    private Output<String> visualizationId;

    /**
     * @return (Required) The visualization ID of the widget
     * 
     */
    public Output<String> visualizationId() {
        return this.visualizationId;
    }

    /**
     * (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
     * 
     */
    @Import(name="width")
    private @Nullable Output<Integer> width;

    /**
     * @return (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
     * 
     */
    public Optional<Output<Integer>> width() {
        return Optional.ofNullable(this.width);
    }

    private OneDashboardRawPageWidgetArgs() {}

    private OneDashboardRawPageWidgetArgs(OneDashboardRawPageWidgetArgs $) {
        this.column = $.column;
        this.configuration = $.configuration;
        this.height = $.height;
        this.id = $.id;
        this.linkedEntityGuids = $.linkedEntityGuids;
        this.row = $.row;
        this.title = $.title;
        this.visualizationId = $.visualizationId;
        this.width = $.width;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OneDashboardRawPageWidgetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OneDashboardRawPageWidgetArgs $;

        public Builder() {
            $ = new OneDashboardRawPageWidgetArgs();
        }

        public Builder(OneDashboardRawPageWidgetArgs defaults) {
            $ = new OneDashboardRawPageWidgetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param column (Required) Column position of widget from top left, starting at `1`.
         * 
         * @return builder
         * 
         */
        public Builder column(Output<Integer> column) {
            $.column = column;
            return this;
        }

        /**
         * @param column (Required) Column position of widget from top left, starting at `1`.
         * 
         * @return builder
         * 
         */
        public Builder column(Integer column) {
            return column(Output.of(column));
        }

        /**
         * @param configuration (Required) The configuration of the widget.
         * 
         * @return builder
         * 
         */
        public Builder configuration(Output<String> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration (Required) The configuration of the widget.
         * 
         * @return builder
         * 
         */
        public Builder configuration(String configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param height (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
         * 
         * @return builder
         * 
         */
        public Builder height(@Nullable Output<Integer> height) {
            $.height = height;
            return this;
        }

        /**
         * @param height (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
         * 
         * @return builder
         * 
         */
        public Builder height(Integer height) {
            return height(Output.of(height));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param linkedEntityGuids (Optional) Related entity GUIDs.
         * 
         * @return builder
         * 
         */
        public Builder linkedEntityGuids(@Nullable Output<List<String>> linkedEntityGuids) {
            $.linkedEntityGuids = linkedEntityGuids;
            return this;
        }

        /**
         * @param linkedEntityGuids (Optional) Related entity GUIDs.
         * 
         * @return builder
         * 
         */
        public Builder linkedEntityGuids(List<String> linkedEntityGuids) {
            return linkedEntityGuids(Output.of(linkedEntityGuids));
        }

        /**
         * @param linkedEntityGuids (Optional) Related entity GUIDs.
         * 
         * @return builder
         * 
         */
        public Builder linkedEntityGuids(String... linkedEntityGuids) {
            return linkedEntityGuids(List.of(linkedEntityGuids));
        }

        /**
         * @param row (Required) Row position of widget from top left, starting at `1`.
         * 
         * @return builder
         * 
         */
        public Builder row(Output<Integer> row) {
            $.row = row;
            return this;
        }

        /**
         * @param row (Required) Row position of widget from top left, starting at `1`.
         * 
         * @return builder
         * 
         */
        public Builder row(Integer row) {
            return row(Output.of(row));
        }

        /**
         * @param title (Required) A title for the widget.
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title (Required) A title for the widget.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param visualizationId (Required) The visualization ID of the widget
         * 
         * @return builder
         * 
         */
        public Builder visualizationId(Output<String> visualizationId) {
            $.visualizationId = visualizationId;
            return this;
        }

        /**
         * @param visualizationId (Required) The visualization ID of the widget
         * 
         * @return builder
         * 
         */
        public Builder visualizationId(String visualizationId) {
            return visualizationId(Output.of(visualizationId));
        }

        /**
         * @param width (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable Output<Integer> width) {
            $.width = width;
            return this;
        }

        /**
         * @param width (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
         * 
         * @return builder
         * 
         */
        public Builder width(Integer width) {
            return width(Output.of(width));
        }

        public OneDashboardRawPageWidgetArgs build() {
            $.column = Objects.requireNonNull($.column, "expected parameter 'column' to be non-null");
            $.configuration = Objects.requireNonNull($.configuration, "expected parameter 'configuration' to be non-null");
            $.row = Objects.requireNonNull($.row, "expected parameter 'row' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            $.visualizationId = Objects.requireNonNull($.visualizationId, "expected parameter 'visualizationId' to be non-null");
            return $;
        }
    }

}
