// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.OneDashboardRawArgs;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.inputs.OneDashboardRawState;
import com.pulumi.newrelic.outputs.OneDashboardRawPage;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ### Create A New Relic One Dashboard With RawConfiguration
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.OneDashboardRaw;
 * import com.pulumi.newrelic.OneDashboardRawArgs;
 * import com.pulumi.newrelic.inputs.OneDashboardRawPageArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampledash = new OneDashboardRaw(&#34;exampledash&#34;, OneDashboardRawArgs.builder()        
 *             .pages(OneDashboardRawPageArgs.builder()
 *                 .name(&#34;Page Name&#34;)
 *                 .widgets(                
 *                     OneDashboardRawPageWidgetArgs.builder()
 *                         .title(&#34;Custom widget&#34;)
 *                         .row(1)
 *                         .column(1)
 *                         .width(1)
 *                         .height(1)
 *                         .visualizationId(&#34;viz.custom&#34;)
 *                         .configuration(&#34;&#34;&#34;
 *       {
 *         &#34;legend&#34;: {
 *           &#34;enabled&#34;: false
 *         },
 *         &#34;nrqlQueries&#34;: [
 *           {
 *             &#34;accountId&#34;: ` + accountID + `,
 *             &#34;query&#34;: &#34;SELECT average(loadAverageOneMinute), average(loadAverageFiveMinute), average(loadAverageFifteenMinute) from SystemSample SINCE 60 minutes ago    TIMESERIES&#34;
 *           }
 *         ],
 *         &#34;yAxisLeft&#34;: {
 *           &#34;max&#34;: 100,
 *           &#34;min&#34;: 50,
 *           &#34;zero&#34;: false
 *         }
 *       }
 *                         &#34;&#34;&#34;)
 *                         .build(),
 *                     OneDashboardRawPageWidgetArgs.builder()
 *                         .title(&#34;Server CPU&#34;)
 *                         .row(1)
 *                         .column(2)
 *                         .width(1)
 *                         .height(1)
 *                         .visualizationId(&#34;viz.testing&#34;)
 *                         .configuration(&#34;&#34;&#34;
 *       {
 *         &#34;nrqlQueries&#34;: [
 *           {
 *             &#34;accountId&#34;: ` + accountID + `,
 *             &#34;query&#34;: &#34;SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400&#34;
 *           }
 *         ]
 *       }
 *                         &#34;&#34;&#34;)
 *                         .build(),
 *                     OneDashboardRawPageWidgetArgs.builder()
 *                         .title(&#34;Docker Server CPU&#34;)
 *                         .row(1)
 *                         .column(3)
 *                         .height(1)
 *                         .width(1)
 *                         .visualizationId(&#34;viz.bar&#34;)
 *                         .configuration(serializeJson(
 *                             jsonObject(
 *                                 jsonProperty(&#34;facet&#34;, jsonObject(
 *                                     jsonProperty(&#34;showOtherSeries&#34;, false)
 *                                 )),
 *                                 jsonProperty(&#34;nrqlQueries&#34;, jsonArray(jsonObject(
 *                                     jsonProperty(&#34;accountId&#34;, local.accountID()),
 *                                     jsonProperty(&#34;query&#34;, &#34;SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400&#34;)
 *                                 )))
 *                             )))
 *                         .linkedEntityGuids(&#34;MzI5ODAxNnxWSVp8REFTSEJPQVJEfDI2MTcxNDc&#34;)
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="newrelic:index/oneDashboardRaw:OneDashboardRaw")
public class OneDashboardRaw extends com.pulumi.resources.CustomResource {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     * 
     */
    @Export(name="accountId", type=Integer.class, parameters={})
    private Output<Integer> accountId;

    /**
     * @return Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     * 
     */
    public Output<Integer> accountId() {
        return this.accountId;
    }
    /**
     * Brief text describing the dashboard.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Brief text describing the dashboard.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The unique entity identifier of the dashboard page in New Relic.
     * 
     */
    @Export(name="guid", type=String.class, parameters={})
    private Output<String> guid;

    /**
     * @return The unique entity identifier of the dashboard page in New Relic.
     * 
     */
    public Output<String> guid() {
        return this.guid;
    }
    /**
     * The title of the dashboard.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The title of the dashboard.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A nested block that describes a page. See Nested page blocks below for details.
     * 
     */
    @Export(name="pages", type=List.class, parameters={OneDashboardRawPage.class})
    private Output<List<OneDashboardRawPage>> pages;

    /**
     * @return A nested block that describes a page. See Nested page blocks below for details.
     * 
     */
    public Output<List<OneDashboardRawPage>> pages() {
        return this.pages;
    }
    /**
     * The URL for viewing the dashboard.
     * 
     */
    @Export(name="permalink", type=String.class, parameters={})
    private Output<String> permalink;

    /**
     * @return The URL for viewing the dashboard.
     * 
     */
    public Output<String> permalink() {
        return this.permalink;
    }
    /**
     * Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`. Defaults to `public_read_only`.
     * 
     */
    @Export(name="permissions", type=String.class, parameters={})
    private Output</* @Nullable */ String> permissions;

    /**
     * @return Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`. Defaults to `public_read_only`.
     * 
     */
    public Output<Optional<String>> permissions() {
        return Codegen.optional(this.permissions);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public OneDashboardRaw(String name) {
        this(name, OneDashboardRawArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public OneDashboardRaw(String name, OneDashboardRawArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public OneDashboardRaw(String name, OneDashboardRawArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/oneDashboardRaw:OneDashboardRaw", name, args == null ? OneDashboardRawArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private OneDashboardRaw(String name, Output<String> id, @Nullable OneDashboardRawState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/oneDashboardRaw:OneDashboardRaw", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static OneDashboardRaw get(String name, Output<String> id, @Nullable OneDashboardRawState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new OneDashboardRaw(name, id, state, options);
    }
}
