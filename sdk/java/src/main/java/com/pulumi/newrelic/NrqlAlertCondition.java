// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.NrqlAlertConditionArgs;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.inputs.NrqlAlertConditionState;
import com.pulumi.newrelic.outputs.NrqlAlertConditionCritical;
import com.pulumi.newrelic.outputs.NrqlAlertConditionNrql;
import com.pulumi.newrelic.outputs.NrqlAlertConditionTerm;
import com.pulumi.newrelic.outputs.NrqlAlertConditionWarning;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Use this resource to create and manage NRQL alert conditions in New Relic.
 * 
 * ## Example Usage
 * 
 * ### Type: `static` (default)
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.AlertPolicy;
 * import com.pulumi.newrelic.AlertPolicyArgs;
 * import com.pulumi.newrelic.NrqlAlertCondition;
 * import com.pulumi.newrelic.NrqlAlertConditionArgs;
 * import com.pulumi.newrelic.inputs.NrqlAlertConditionNrqlArgs;
 * import com.pulumi.newrelic.inputs.NrqlAlertConditionCriticalArgs;
 * import com.pulumi.newrelic.inputs.NrqlAlertConditionWarningArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new AlertPolicy("foo", AlertPolicyArgs.builder()
 *             .name("foo")
 *             .build());
 * 
 *         var fooNrqlAlertCondition = new NrqlAlertCondition("fooNrqlAlertCondition", NrqlAlertConditionArgs.builder()
 *             .accountId(12345678)
 *             .policyId(foo.id())
 *             .type("static")
 *             .name("foo")
 *             .description("Alert when transactions are taking too long")
 *             .titleTemplate("Issue in environment: {{ json accumulations.tag.environment }}")
 *             .runbookUrl("https://www.example.com")
 *             .enabled(true)
 *             .violationTimeLimitSeconds(3600)
 *             .fillOption("static")
 *             .fillValue(1)
 *             .aggregationWindow(60)
 *             .aggregationMethod("event_flow")
 *             .aggregationDelay(120)
 *             .expirationDuration(120)
 *             .openViolationOnExpiration(true)
 *             .closeViolationsOnExpiration(true)
 *             .ignoreOnExpectedTermination(true)
 *             .slideBy(30)
 *             .nrql(NrqlAlertConditionNrqlArgs.builder()
 *                 .query("SELECT average(duration) FROM Transaction where appName = 'Your App'")
 *                 .build())
 *             .critical(NrqlAlertConditionCriticalArgs.builder()
 *                 .operator("above")
 *                 .threshold(5.5)
 *                 .thresholdDuration(300)
 *                 .thresholdOccurrences("ALL")
 *                 .build())
 *             .warning(NrqlAlertConditionWarningArgs.builder()
 *                 .operator("above")
 *                 .threshold(3.5)
 *                 .thresholdDuration(600)
 *                 .thresholdOccurrences("ALL")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## NRQL
 * 
 * The `nrql` block supports the following arguments:
 * 
 * - `query` - (Required) The NRQL query to execute for the condition.
 * - `data_account_id` - (Optional) **BETA PREVIEW: the `data_account_id` field is in limited release and only enabled for preview on a per-account basis.** The account ID to use for the alert condition&#39;s query as specified in the the `query` field. If `data_account_id` is not specified, then the condition&#39;s query will be evaluated against the `account_id`. Note that the `account_id` must have read privileges for the `data_account_id` or else the condition will be invalid.
 * - `evaluation_offset` - (Optional) **DEPRECATED:** Use `aggregation_method` instead. Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated based on their `aggregation_window` size. The start time depends on this value. It&#39;s recommended to set this to 3 windows. An offset of less than 3 windows will trigger incidents sooner, but you may see more false positives and negatives due to data latency. With `evaluation_offset` set to 3 windows and an `aggregation_window` of 60 seconds, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`. `evaluation_offset` cannot be set with `aggregation_method`, `aggregation_delay`, or `aggregation_timer`.&lt;br&gt;
 * - `since_value` - (Optional)  **DEPRECATED:** Use `aggregation_method` instead. The value to be used in the `SINCE &lt;X&gt; minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive). &lt;br&gt;
 * 
 * ## Terms
 * 
 * &gt; **NOTE:** The direct use of the `term` has been deprecated, and users should use `critical` and `warning` instead.  What follows now applies to the named priority attributes for `critical` and `warning`, but for those attributes the priority is not allowed. At least one `critical` or `warning` term must be defined.
 * 
 * NRQL alert conditions support up to two terms. At least one `term` must have `priority` set to `critical` and the second optional `term` must have `priority` set to `warning`.
 * 
 * The `term` block supports the following arguments:
 * 
 * - `operator` - (Optional) Valid values are `above`, `above_or_equals`, `below`, `below_or_equals`, `equals`, or `not_equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `baseline`, the only valid option here is `above`.
 * - `priority` - (Optional) `critical` or `warning`. Defaults to `critical`.
 * - `threshold` - (Required) The value which will trigger an incident.
 * &lt;br&gt;For *baseline* NRQL alert conditions, the value must be in the range [1, 1000]. The value is the number of standard deviations from the baseline that the metric must exceed in order to create an incident.
 * - `threshold_duration` - (Optional) The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the `aggregation_window` (which has a default of 60 seconds).
 * &lt;br&gt;For *baseline* NRQL alert conditions, the value must be within 120-86400 seconds (inclusive).
 * &lt;br&gt;For *static* NRQL alert conditions, the value must be within 60-86400 seconds (inclusive).
 * 
 * - `threshold_occurrences` - (Optional) The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `at_least_once` (case insensitive).
 * - `duration` - (Optional) **DEPRECATED:** Use `threshold_duration` instead. The duration of time, in *minutes*, that the threshold must violate for in order to create an incident. Must be within 1-120 (inclusive).
 * - `time_function` - (Optional) **DEPRECATED:** Use `threshold_occurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
 * 
 * &gt; **NOTE:** When a `critical` or `warning` block is added to this resource, using either `duration` or `threshold_duration` (one of the two) is mandatory. Both of these should not be specified.
 * 
 * &gt; **NOTE:** When a `critical` or `warning` block is added to this resource, using either `time_function` or `threshold_occurrences` (one of the two) is mandatory. Both of these should not be specified.
 * 
 * ## Additional Examples
 * 
 * ##### Type: `baseline`
 * 
 * [Baseline NRQL alert conditions](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/create-baseline-alert-conditions) are dynamic in nature and adjust to the behavior of your data. The example below demonstrates a baseline NRQL alert condition for alerting when transaction durations are above a specified threshold and dynamically adjusts based on data trends.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.AlertPolicy;
 * import com.pulumi.newrelic.AlertPolicyArgs;
 * import com.pulumi.newrelic.NrqlAlertCondition;
 * import com.pulumi.newrelic.NrqlAlertConditionArgs;
 * import com.pulumi.newrelic.inputs.NrqlAlertConditionNrqlArgs;
 * import com.pulumi.newrelic.inputs.NrqlAlertConditionCriticalArgs;
 * import com.pulumi.newrelic.inputs.NrqlAlertConditionWarningArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new AlertPolicy("foo", AlertPolicyArgs.builder()
 *             .name("foo")
 *             .build());
 * 
 *         var fooNrqlAlertCondition = new NrqlAlertCondition("fooNrqlAlertCondition", NrqlAlertConditionArgs.builder()
 *             .accountId("your_account_id")
 *             .policyId(foo.id())
 *             .type("static")
 *             .name("foo")
 *             .description("Alert when transactions are taking too long")
 *             .runbookUrl("https://www.example.com")
 *             .enabled(true)
 *             .violationTimeLimitSeconds(3600)
 *             .fillOption("static")
 *             .fillValue(1)
 *             .aggregationWindow(60)
 *             .aggregationMethod("event_flow")
 *             .aggregationDelay(120)
 *             .expirationDuration(120)
 *             .openViolationOnExpiration(true)
 *             .closeViolationsOnExpiration(true)
 *             .slideBy(30)
 *             .nrql(NrqlAlertConditionNrqlArgs.builder()
 *                 .query("SELECT average(duration) FROM Transaction where appName = 'Your App'")
 *                 .build())
 *             .critical(NrqlAlertConditionCriticalArgs.builder()
 *                 .operator("above")
 *                 .threshold(5.5)
 *                 .thresholdDuration(300)
 *                 .thresholdOccurrences("ALL")
 *                 .build())
 *             .warning(NrqlAlertConditionWarningArgs.builder()
 *                 .operator("above")
 *                 .threshold(3.5)
 *                 .thresholdDuration(600)
 *                 .thresholdOccurrences("ALL")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Tags
 * 
 * Manage NRQL alert condition tags with `newrelic.EntityTags`. For up-to-date documentation about the tagging resource, please check `newrelic.EntityTags`.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.AlertPolicy;
 * import com.pulumi.newrelic.AlertPolicyArgs;
 * import com.pulumi.newrelic.NrqlAlertCondition;
 * import com.pulumi.newrelic.NrqlAlertConditionArgs;
 * import com.pulumi.newrelic.inputs.NrqlAlertConditionNrqlArgs;
 * import com.pulumi.newrelic.inputs.NrqlAlertConditionCriticalArgs;
 * import com.pulumi.newrelic.inputs.NrqlAlertConditionWarningArgs;
 * import com.pulumi.newrelic.EntityTags;
 * import com.pulumi.newrelic.EntityTagsArgs;
 * import com.pulumi.newrelic.inputs.EntityTagsTagArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new AlertPolicy("foo", AlertPolicyArgs.builder()
 *             .name("foo")
 *             .build());
 * 
 *         var fooNrqlAlertCondition = new NrqlAlertCondition("fooNrqlAlertCondition", NrqlAlertConditionArgs.builder()
 *             .accountId(12345678)
 *             .policyId(foo.id())
 *             .type("static")
 *             .name("foo")
 *             .description("Alert when transactions are taking too long")
 *             .runbookUrl("https://www.example.com")
 *             .enabled(true)
 *             .violationTimeLimitSeconds(3600)
 *             .fillOption("static")
 *             .fillValue(1)
 *             .aggregationWindow(60)
 *             .aggregationMethod("event_flow")
 *             .aggregationDelay(120)
 *             .expirationDuration(120)
 *             .openViolationOnExpiration(true)
 *             .closeViolationsOnExpiration(true)
 *             .slideBy(30)
 *             .nrql(NrqlAlertConditionNrqlArgs.builder()
 *                 .query("SELECT average(duration) FROM Transaction where appName = 'Your App'")
 *                 .build())
 *             .critical(NrqlAlertConditionCriticalArgs.builder()
 *                 .operator("above")
 *                 .threshold(5.5)
 *                 .thresholdDuration(300)
 *                 .thresholdOccurrences("ALL")
 *                 .build())
 *             .warning(NrqlAlertConditionWarningArgs.builder()
 *                 .operator("above")
 *                 .threshold(3.5)
 *                 .thresholdDuration(600)
 *                 .thresholdOccurrences("ALL")
 *                 .build())
 *             .build());
 * 
 *         var myConditionEntityTags = new EntityTags("myConditionEntityTags", EntityTagsArgs.builder()
 *             .guid(fooNrqlAlertCondition.entityGuid())
 *             .tags(            
 *                 EntityTagsTagArgs.builder()
 *                     .key("my-key")
 *                     .values(                    
 *                         "my-value",
 *                         "my-other-value")
 *                     .build(),
 *                 EntityTagsTagArgs.builder()
 *                     .key("my-key-2")
 *                     .values("my-value-2")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * &lt;small&gt;alerts.newrelic.com/accounts/**\&lt;account_id\&gt;**&#47;policies/**\&lt;policy_id\&gt;**&#47;conditions/**\&lt;condition_id\&gt;**&#47;edit&lt;/small&gt;
 * 
 * ## Upgrade from 1.x to 2.x
 * 
 * There have been several deprecations in the `newrelic.NrqlAlertCondition`
 * resource. Users will need to make some updates in order to have a smooth
 * upgrade.
 * 
 * An example resource from 1.x might look like the following.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.NrqlAlertCondition;
 * import com.pulumi.newrelic.NrqlAlertConditionArgs;
 * import com.pulumi.newrelic.inputs.NrqlAlertConditionCriticalArgs;
 * import com.pulumi.newrelic.inputs.NrqlAlertConditionNrqlArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var z = new NrqlAlertCondition("z", NrqlAlertConditionArgs.builder()
 *             .policyId(zNewrelicAlertPolicy.id())
 *             .name("zleslie-test")
 *             .type("static")
 *             .runbookUrl("https://localhost")
 *             .enabled(true)
 *             .violationTimeLimit("TWENTY_FOUR_HOURS")
 *             .critical(NrqlAlertConditionCriticalArgs.builder()
 *                 .operator("above")
 *                 .thresholdDuration(120)
 *                 .threshold(3)
 *                 .thresholdOccurrences("AT_LEAST_ONCE")
 *                 .build())
 *             .nrql(NrqlAlertConditionNrqlArgs.builder()
 *                 .query("SELECT count(*) FROM TransactionError WHERE appName like '%Dummy App%' FACET appName")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * After making the appropriate adjustments mentioned in the deprecation warnings,
 * the resource now looks like the following.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.NrqlAlertCondition;
 * import com.pulumi.newrelic.NrqlAlertConditionArgs;
 * import com.pulumi.newrelic.inputs.NrqlAlertConditionTermArgs;
 * import com.pulumi.newrelic.inputs.NrqlAlertConditionNrqlArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var z = new NrqlAlertCondition("z", NrqlAlertConditionArgs.builder()
 *             .policyId(zNewrelicAlertPolicy.id())
 *             .name("zleslie-test")
 *             .type("static")
 *             .runbookUrl("https://localhost")
 *             .enabled(true)
 *             .violationTimeLimitSeconds(86400)
 *             .terms(NrqlAlertConditionTermArgs.builder()
 *                 .priority("critical")
 *                 .operator("above")
 *                 .threshold(3)
 *                 .duration(5)
 *                 .timeFunction("any")
 *                 .build())
 *             .nrql(NrqlAlertConditionNrqlArgs.builder()
 *                 .query("SELECT count(*) FROM TransactionError WHERE appName like '%Dummy App%' FACET appName")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * NRQL alert conditions can be imported using a composite ID of `&lt;policy_id&gt;:&lt;condition_id&gt;:&lt;conditionType&gt;`, e.g.
 * 
 * // For `baseline` conditions
 * 
 * ```sh
 * $ pulumi import newrelic:index/nrqlAlertCondition:NrqlAlertCondition foo 538291:6789035:baseline
 * ```
 * 
 * // For `static` conditions
 * 
 * ```sh
 * $ pulumi import newrelic:index/nrqlAlertCondition:NrqlAlertCondition foo 538291:6789035:static
 * ```
 * 
 */
@ResourceType(type="newrelic:index/nrqlAlertCondition:NrqlAlertCondition")
public class NrqlAlertCondition extends com.pulumi.resources.CustomResource {
    /**
     * The New Relic account ID of the account you wish to create the condition. Defaults to the account ID set in your environment variable `NEW_RELIC_ACCOUNT_ID`.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return The New Relic account ID of the account you wish to create the condition. Defaults to the account ID set in your environment variable `NEW_RELIC_ACCOUNT_ID`.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * How long we wait for data that belongs in each aggregation window. Depending on your data, a longer delay may increase accuracy but delay notifications. Use `aggregation_delay` with the `event_flow` and `cadence` methods. The maximum delay is 1200 seconds (20 minutes) when using `event_flow` and 3600 seconds (60 minutes) when using `cadence`. In both cases, the minimum delay is 0 seconds and the default is 120 seconds. `aggregation_delay` cannot be set with `nrql.evaluation_offset`.
     * 
     */
    @Export(name="aggregationDelay", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> aggregationDelay;

    /**
     * @return How long we wait for data that belongs in each aggregation window. Depending on your data, a longer delay may increase accuracy but delay notifications. Use `aggregation_delay` with the `event_flow` and `cadence` methods. The maximum delay is 1200 seconds (20 minutes) when using `event_flow` and 3600 seconds (60 minutes) when using `cadence`. In both cases, the minimum delay is 0 seconds and the default is 120 seconds. `aggregation_delay` cannot be set with `nrql.evaluation_offset`.
     * 
     */
    public Output<Optional<String>> aggregationDelay() {
        return Codegen.optional(this.aggregationDelay);
    }
    /**
     * Determines when we consider an aggregation window to be complete so that we can evaluate the signal for incidents. Possible values are `cadence`, `event_flow` or `event_timer`. Default is `event_flow`. `aggregation_method` cannot be set with `nrql.evaluation_offset`.
     * 
     */
    @Export(name="aggregationMethod", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> aggregationMethod;

    /**
     * @return Determines when we consider an aggregation window to be complete so that we can evaluate the signal for incidents. Possible values are `cadence`, `event_flow` or `event_timer`. Default is `event_flow`. `aggregation_method` cannot be set with `nrql.evaluation_offset`.
     * 
     */
    public Output<Optional<String>> aggregationMethod() {
        return Codegen.optional(this.aggregationMethod);
    }
    /**
     * How long we wait after each data point arrives to make sure we&#39;ve processed the whole batch. Use `aggregation_timer` with the `event_timer` method. The timer value can range from 0 seconds to 1200 seconds (20 minutes); the default is 60 seconds. `aggregation_timer` cannot be set with `nrql.evaluation_offset`.
     * 
     */
    @Export(name="aggregationTimer", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> aggregationTimer;

    /**
     * @return How long we wait after each data point arrives to make sure we&#39;ve processed the whole batch. Use `aggregation_timer` with the `event_timer` method. The timer value can range from 0 seconds to 1200 seconds (20 minutes); the default is 60 seconds. `aggregation_timer` cannot be set with `nrql.evaluation_offset`.
     * 
     */
    public Output<Optional<String>> aggregationTimer() {
        return Codegen.optional(this.aggregationTimer);
    }
    /**
     * The duration of the time window used to evaluate the NRQL query, in seconds. The value must be at least 30 seconds, and no more than 21600 seconds (6 hours). Default is 60 seconds.
     * 
     */
    @Export(name="aggregationWindow", refs={Integer.class}, tree="[0]")
    private Output<Integer> aggregationWindow;

    /**
     * @return The duration of the time window used to evaluate the NRQL query, in seconds. The value must be at least 30 seconds, and no more than 21600 seconds (6 hours). Default is 60 seconds.
     * 
     */
    public Output<Integer> aggregationWindow() {
        return this.aggregationWindow;
    }
    /**
     * The baseline direction of a *baseline* NRQL alert condition. Valid values are: `lower_only`, `upper_and_lower`, `upper_only` (case insensitive).
     * 
     */
    @Export(name="baselineDirection", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> baselineDirection;

    /**
     * @return The baseline direction of a *baseline* NRQL alert condition. Valid values are: `lower_only`, `upper_and_lower`, `upper_only` (case insensitive).
     * 
     */
    public Output<Optional<String>> baselineDirection() {
        return Codegen.optional(this.baselineDirection);
    }
    /**
     * Whether to close all open incidents when the signal expires.
     * 
     */
    @Export(name="closeViolationsOnExpiration", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> closeViolationsOnExpiration;

    /**
     * @return Whether to close all open incidents when the signal expires.
     * 
     */
    public Output<Optional<Boolean>> closeViolationsOnExpiration() {
        return Codegen.optional(this.closeViolationsOnExpiration);
    }
    /**
     * A list containing the `critical` threshold values. At least one `critical` or `warning` threshold must be defined. See Terms below for details.
     * 
     */
    @Export(name="critical", refs={NrqlAlertConditionCritical.class}, tree="[0]")
    private Output</* @Nullable */ NrqlAlertConditionCritical> critical;

    /**
     * @return A list containing the `critical` threshold values. At least one `critical` or `warning` threshold must be defined. See Terms below for details.
     * 
     */
    public Output<Optional<NrqlAlertConditionCritical>> critical() {
        return Codegen.optional(this.critical);
    }
    /**
     * The description of the NRQL alert condition.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the NRQL alert condition.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Whether to enable the alert condition. Valid values are `true` and `false`. Defaults to `true`.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Whether to enable the alert condition. Valid values are `true` and `false`. Defaults to `true`.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * The unique entity identifier of the NRQL Condition in New Relic.
     * 
     */
    @Export(name="entityGuid", refs={String.class}, tree="[0]")
    private Output<String> entityGuid;

    /**
     * @return The unique entity identifier of the NRQL Condition in New Relic.
     * 
     */
    public Output<String> entityGuid() {
        return this.entityGuid;
    }
    /**
     * How long we wait until the signal starts evaluating. The maximum delay is 7200 seconds (120 minutes).
     * 
     */
    @Export(name="evaluationDelay", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> evaluationDelay;

    /**
     * @return How long we wait until the signal starts evaluating. The maximum delay is 7200 seconds (120 minutes).
     * 
     */
    public Output<Optional<Integer>> evaluationDelay() {
        return Codegen.optional(this.evaluationDelay);
    }
    /**
     * The amount of time (in seconds) to wait before considering the signal expired. The value must be at least 30 seconds, and no more than 172800 seconds (48 hours).
     * 
     */
    @Export(name="expirationDuration", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> expirationDuration;

    /**
     * @return The amount of time (in seconds) to wait before considering the signal expired. The value must be at least 30 seconds, and no more than 172800 seconds (48 hours).
     * 
     */
    public Output<Optional<Integer>> expirationDuration() {
        return Codegen.optional(this.expirationDuration);
    }
    /**
     * Which strategy to use when filling gaps in the signal. Possible values are `none`, `last_value` or `static`. If `static`, the `fill_value` field will be used for filling gaps in the signal.
     * 
     */
    @Export(name="fillOption", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> fillOption;

    /**
     * @return Which strategy to use when filling gaps in the signal. Possible values are `none`, `last_value` or `static`. If `static`, the `fill_value` field will be used for filling gaps in the signal.
     * 
     */
    public Output<Optional<String>> fillOption() {
        return Codegen.optional(this.fillOption);
    }
    /**
     * This value will be used for filling gaps in the signal.
     * 
     */
    @Export(name="fillValue", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> fillValue;

    /**
     * @return This value will be used for filling gaps in the signal.
     * 
     */
    public Output<Optional<Double>> fillValue() {
        return Codegen.optional(this.fillValue);
    }
    /**
     * Whether an alert condition should ignore expected termination of a signal when considering whether to create a loss of signal incident. Defaults to false.
     * 
     */
    @Export(name="ignoreOnExpectedTermination", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ignoreOnExpectedTermination;

    /**
     * @return Whether an alert condition should ignore expected termination of a signal when considering whether to create a loss of signal incident. Defaults to false.
     * 
     */
    public Output<Optional<Boolean>> ignoreOnExpectedTermination() {
        return Codegen.optional(this.ignoreOnExpectedTermination);
    }
    /**
     * The title of the condition.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The title of the condition.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A NRQL query. See NRQL below for details.
     * 
     */
    @Export(name="nrql", refs={NrqlAlertConditionNrql.class}, tree="[0]")
    private Output<NrqlAlertConditionNrql> nrql;

    /**
     * @return A NRQL query. See NRQL below for details.
     * 
     */
    public Output<NrqlAlertConditionNrql> nrql() {
        return this.nrql;
    }
    /**
     * Whether to create a new incident to capture that the signal expired.
     * 
     */
    @Export(name="openViolationOnExpiration", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> openViolationOnExpiration;

    /**
     * @return Whether to create a new incident to capture that the signal expired.
     * 
     */
    public Output<Optional<Boolean>> openViolationOnExpiration() {
        return Codegen.optional(this.openViolationOnExpiration);
    }
    /**
     * The ID of the policy where this condition should be used.
     * 
     */
    @Export(name="policyId", refs={String.class}, tree="[0]")
    private Output<String> policyId;

    /**
     * @return The ID of the policy where this condition should be used.
     * 
     */
    public Output<String> policyId() {
        return this.policyId;
    }
    /**
     * Runbook URL to display in notifications.
     * 
     */
    @Export(name="runbookUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> runbookUrl;

    /**
     * @return Runbook URL to display in notifications.
     * 
     */
    public Output<Optional<String>> runbookUrl() {
        return Codegen.optional(this.runbookUrl);
    }
    /**
     * Gathers data in overlapping time windows to smooth the chart line, making it easier to spot trends. The `slide_by` value is specified in seconds and must be smaller than and a factor of the `aggregation_window`.
     * 
     */
    @Export(name="slideBy", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> slideBy;

    /**
     * @return Gathers data in overlapping time windows to smooth the chart line, making it easier to spot trends. The `slide_by` value is specified in seconds and must be smaller than and a factor of the `aggregation_window`.
     * 
     */
    public Output<Optional<Integer>> slideBy() {
        return Codegen.optional(this.slideBy);
    }
    /**
     * **DEPRECATED** Use `critical`, and `warning` instead. A list of terms for this condition. See Terms below for details.
     * 
     * @deprecated
     * use `critical` and `warning` attributes instead
     * 
     */
    @Deprecated /* use `critical` and `warning` attributes instead */
    @Export(name="terms", refs={List.class,NrqlAlertConditionTerm.class}, tree="[0,1]")
    private Output</* @Nullable */ List<NrqlAlertConditionTerm>> terms;

    /**
     * @return **DEPRECATED** Use `critical`, and `warning` instead. A list of terms for this condition. See Terms below for details.
     * 
     */
    public Output<Optional<List<NrqlAlertConditionTerm>>> terms() {
        return Codegen.optional(this.terms);
    }
    /**
     * The custom title to be used when incidents are opened by the condition. Setting this field will override the default title. Must be [Handlebars](https://handlebarsjs.com/) format.
     * 
     */
    @Export(name="titleTemplate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> titleTemplate;

    /**
     * @return The custom title to be used when incidents are opened by the condition. Setting this field will override the default title. Must be [Handlebars](https://handlebarsjs.com/) format.
     * 
     */
    public Output<Optional<String>> titleTemplate() {
        return Codegen.optional(this.titleTemplate);
    }
    /**
     * The type of the condition. Valid values are `static` or `baseline`. Defaults to `static`.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> type;

    /**
     * @return The type of the condition. Valid values are `static` or `baseline`. Defaults to `static`.
     * 
     */
    public Output<Optional<String>> type() {
        return Codegen.optional(this.type);
    }
    /**
     * **DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting incident after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).&lt;br&gt;
     * &lt;small&gt;\***Note**: One of `violation_time_limit` *or* `violation_time_limit_seconds` must be set, but not both.&lt;/small&gt;
     * 
     * @deprecated
     * use `violation_time_limit_seconds` attribute instead
     * 
     */
    @Deprecated /* use `violation_time_limit_seconds` attribute instead */
    @Export(name="violationTimeLimit", refs={String.class}, tree="[0]")
    private Output<String> violationTimeLimit;

    /**
     * @return **DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting incident after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).&lt;br&gt;
     * &lt;small&gt;\***Note**: One of `violation_time_limit` *or* `violation_time_limit_seconds` must be set, but not both.&lt;/small&gt;
     * 
     */
    public Output<String> violationTimeLimit() {
        return this.violationTimeLimit;
    }
    /**
     * Sets a time limit, in seconds, that will automatically force-close a long-lasting incident after the time limit you select. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days) (inclusive). &lt;br&gt;
     * &lt;small&gt;\***Note**: One of `violation_time_limit` *or* `violation_time_limit_seconds` must be set, but not both.&lt;/small&gt;
     * 
     */
    @Export(name="violationTimeLimitSeconds", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> violationTimeLimitSeconds;

    /**
     * @return Sets a time limit, in seconds, that will automatically force-close a long-lasting incident after the time limit you select. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days) (inclusive). &lt;br&gt;
     * &lt;small&gt;\***Note**: One of `violation_time_limit` *or* `violation_time_limit_seconds` must be set, but not both.&lt;/small&gt;
     * 
     */
    public Output<Optional<Integer>> violationTimeLimitSeconds() {
        return Codegen.optional(this.violationTimeLimitSeconds);
    }
    /**
     * A list containing the `warning` threshold values. At least one `critical` or `warning` threshold must be defined. See Terms below for details.
     * 
     */
    @Export(name="warning", refs={NrqlAlertConditionWarning.class}, tree="[0]")
    private Output</* @Nullable */ NrqlAlertConditionWarning> warning;

    /**
     * @return A list containing the `warning` threshold values. At least one `critical` or `warning` threshold must be defined. See Terms below for details.
     * 
     */
    public Output<Optional<NrqlAlertConditionWarning>> warning() {
        return Codegen.optional(this.warning);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NrqlAlertCondition(java.lang.String name) {
        this(name, NrqlAlertConditionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NrqlAlertCondition(java.lang.String name, NrqlAlertConditionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NrqlAlertCondition(java.lang.String name, NrqlAlertConditionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/nrqlAlertCondition:NrqlAlertCondition", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private NrqlAlertCondition(java.lang.String name, Output<java.lang.String> id, @Nullable NrqlAlertConditionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/nrqlAlertCondition:NrqlAlertCondition", name, state, makeResourceOptions(options, id), false);
    }

    private static NrqlAlertConditionArgs makeArgs(NrqlAlertConditionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NrqlAlertConditionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NrqlAlertCondition get(java.lang.String name, Output<java.lang.String> id, @Nullable NrqlAlertConditionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NrqlAlertCondition(name, id, state, options);
    }
}
