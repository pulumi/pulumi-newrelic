// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetUserResult {
    private String authenticationDomainId;
    private String emailId;
    /**
     * @return The ID of the matching user fetched.
     * 
     */
    private String id;
    private String name;

    private GetUserResult() {}
    public String authenticationDomainId() {
        return this.authenticationDomainId;
    }
    public String emailId() {
        return this.emailId;
    }
    /**
     * @return The ID of the matching user fetched.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authenticationDomainId;
        private String emailId;
        private String id;
        private String name;
        public Builder() {}
        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationDomainId = defaults.authenticationDomainId;
    	      this.emailId = defaults.emailId;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder authenticationDomainId(String authenticationDomainId) {
            if (authenticationDomainId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "authenticationDomainId");
            }
            this.authenticationDomainId = authenticationDomainId;
            return this;
        }
        @CustomType.Setter
        public Builder emailId(String emailId) {
            if (emailId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "emailId");
            }
            this.emailId = emailId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "name");
            }
            this.name = name;
            return this;
        }
        public GetUserResult build() {
            final var _resultValue = new GetUserResult();
            _resultValue.authenticationDomainId = authenticationDomainId;
            _resultValue.emailId = emailId;
            _resultValue.id = id;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
