// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.newrelic.inputs.DashboardFilterArgs;
import com.pulumi.newrelic.inputs.DashboardWidgetArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardState extends com.pulumi.resources.ResourceArgs {

    public static final DashboardState Empty = new DashboardState();

    /**
     * The URL for viewing the dashboard.
     * 
     */
    @Import(name="dashboardUrl")
    private @Nullable Output<String> dashboardUrl;

    /**
     * @return The URL for viewing the dashboard.
     * 
     */
    public Optional<Output<String>> dashboardUrl() {
        return Optional.ofNullable(this.dashboardUrl);
    }

    /**
     * Determines who can edit the dashboard in an account. Valid values are all, editable_by_all, editable_by_owner, or
     * read_only. Defaults to editable_by_all.
     * 
     */
    @Import(name="editable")
    private @Nullable Output<String> editable;

    /**
     * @return Determines who can edit the dashboard in an account. Valid values are all, editable_by_all, editable_by_owner, or
     * read_only. Defaults to editable_by_all.
     * 
     */
    public Optional<Output<String>> editable() {
        return Optional.ofNullable(this.editable);
    }

    /**
     * A nested block that describes a dashboard filter. Exactly one nested filter block is allowed.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<DashboardFilterArgs> filter;

    /**
     * @return A nested block that describes a dashboard filter. Exactly one nested filter block is allowed.
     * 
     */
    public Optional<Output<DashboardFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * New Relic One supports a 3 column grid or a 12 column grid. New Relic Insights supports a 3 column grid.
     * 
     */
    @Import(name="gridColumnCount")
    private @Nullable Output<Integer> gridColumnCount;

    /**
     * @return New Relic One supports a 3 column grid or a 12 column grid. New Relic Insights supports a 3 column grid.
     * 
     */
    public Optional<Output<Integer>> gridColumnCount() {
        return Optional.ofNullable(this.gridColumnCount);
    }

    /**
     * The icon for the dashboard.
     * 
     */
    @Import(name="icon")
    private @Nullable Output<String> icon;

    /**
     * @return The icon for the dashboard.
     * 
     */
    public Optional<Output<String>> icon() {
        return Optional.ofNullable(this.icon);
    }

    /**
     * The title of the dashboard.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The title of the dashboard.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * Determines who can see the dashboard in an account. Valid values are all or owner. Defaults to all.
     * 
     */
    @Import(name="visibility")
    private @Nullable Output<String> visibility;

    /**
     * @return Determines who can see the dashboard in an account. Valid values are all or owner. Defaults to all.
     * 
     */
    public Optional<Output<String>> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    /**
     * A nested block that describes a visualization. Up to 300 widget blocks are allowed in a dashboard definition.
     * 
     */
    @Import(name="widgets")
    private @Nullable Output<List<DashboardWidgetArgs>> widgets;

    /**
     * @return A nested block that describes a visualization. Up to 300 widget blocks are allowed in a dashboard definition.
     * 
     */
    public Optional<Output<List<DashboardWidgetArgs>>> widgets() {
        return Optional.ofNullable(this.widgets);
    }

    private DashboardState() {}

    private DashboardState(DashboardState $) {
        this.dashboardUrl = $.dashboardUrl;
        this.editable = $.editable;
        this.filter = $.filter;
        this.gridColumnCount = $.gridColumnCount;
        this.icon = $.icon;
        this.title = $.title;
        this.visibility = $.visibility;
        this.widgets = $.widgets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardState $;

        public Builder() {
            $ = new DashboardState();
        }

        public Builder(DashboardState defaults) {
            $ = new DashboardState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dashboardUrl The URL for viewing the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder dashboardUrl(@Nullable Output<String> dashboardUrl) {
            $.dashboardUrl = dashboardUrl;
            return this;
        }

        /**
         * @param dashboardUrl The URL for viewing the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder dashboardUrl(String dashboardUrl) {
            return dashboardUrl(Output.of(dashboardUrl));
        }

        /**
         * @param editable Determines who can edit the dashboard in an account. Valid values are all, editable_by_all, editable_by_owner, or
         * read_only. Defaults to editable_by_all.
         * 
         * @return builder
         * 
         */
        public Builder editable(@Nullable Output<String> editable) {
            $.editable = editable;
            return this;
        }

        /**
         * @param editable Determines who can edit the dashboard in an account. Valid values are all, editable_by_all, editable_by_owner, or
         * read_only. Defaults to editable_by_all.
         * 
         * @return builder
         * 
         */
        public Builder editable(String editable) {
            return editable(Output.of(editable));
        }

        /**
         * @param filter A nested block that describes a dashboard filter. Exactly one nested filter block is allowed.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<DashboardFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter A nested block that describes a dashboard filter. Exactly one nested filter block is allowed.
         * 
         * @return builder
         * 
         */
        public Builder filter(DashboardFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param gridColumnCount New Relic One supports a 3 column grid or a 12 column grid. New Relic Insights supports a 3 column grid.
         * 
         * @return builder
         * 
         */
        public Builder gridColumnCount(@Nullable Output<Integer> gridColumnCount) {
            $.gridColumnCount = gridColumnCount;
            return this;
        }

        /**
         * @param gridColumnCount New Relic One supports a 3 column grid or a 12 column grid. New Relic Insights supports a 3 column grid.
         * 
         * @return builder
         * 
         */
        public Builder gridColumnCount(Integer gridColumnCount) {
            return gridColumnCount(Output.of(gridColumnCount));
        }

        /**
         * @param icon The icon for the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder icon(@Nullable Output<String> icon) {
            $.icon = icon;
            return this;
        }

        /**
         * @param icon The icon for the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder icon(String icon) {
            return icon(Output.of(icon));
        }

        /**
         * @param title The title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param visibility Determines who can see the dashboard in an account. Valid values are all or owner. Defaults to all.
         * 
         * @return builder
         * 
         */
        public Builder visibility(@Nullable Output<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        /**
         * @param visibility Determines who can see the dashboard in an account. Valid values are all or owner. Defaults to all.
         * 
         * @return builder
         * 
         */
        public Builder visibility(String visibility) {
            return visibility(Output.of(visibility));
        }

        /**
         * @param widgets A nested block that describes a visualization. Up to 300 widget blocks are allowed in a dashboard definition.
         * 
         * @return builder
         * 
         */
        public Builder widgets(@Nullable Output<List<DashboardWidgetArgs>> widgets) {
            $.widgets = widgets;
            return this;
        }

        /**
         * @param widgets A nested block that describes a visualization. Up to 300 widget blocks are allowed in a dashboard definition.
         * 
         * @return builder
         * 
         */
        public Builder widgets(List<DashboardWidgetArgs> widgets) {
            return widgets(Output.of(widgets));
        }

        /**
         * @param widgets A nested block that describes a visualization. Up to 300 widget blocks are allowed in a dashboard definition.
         * 
         * @return builder
         * 
         */
        public Builder widgets(DashboardWidgetArgs... widgets) {
            return widgets(List.of(widgets));
        }

        public DashboardState build() {
            return $;
        }
    }

}
