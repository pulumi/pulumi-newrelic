// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class ServiceLevelObjectiveTimeWindowRollingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceLevelObjectiveTimeWindowRollingArgs Empty = new ServiceLevelObjectiveTimeWindowRollingArgs();

    @Import(name="count", required=true)
    private Output<Integer> count;

    public Output<Integer> count() {
        return this.count;
    }

    @Import(name="unit", required=true)
    private Output<String> unit;

    public Output<String> unit() {
        return this.unit;
    }

    private ServiceLevelObjectiveTimeWindowRollingArgs() {}

    private ServiceLevelObjectiveTimeWindowRollingArgs(ServiceLevelObjectiveTimeWindowRollingArgs $) {
        this.count = $.count;
        this.unit = $.unit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceLevelObjectiveTimeWindowRollingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceLevelObjectiveTimeWindowRollingArgs $;

        public Builder() {
            $ = new ServiceLevelObjectiveTimeWindowRollingArgs();
        }

        public Builder(ServiceLevelObjectiveTimeWindowRollingArgs defaults) {
            $ = new ServiceLevelObjectiveTimeWindowRollingArgs(Objects.requireNonNull(defaults));
        }

        public Builder count(Output<Integer> count) {
            $.count = count;
            return this;
        }

        public Builder count(Integer count) {
            return count(Output.of(count));
        }

        public Builder unit(Output<String> unit) {
            $.unit = unit;
            return this;
        }

        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        public ServiceLevelObjectiveTimeWindowRollingArgs build() {
            if ($.count == null) {
                throw new MissingRequiredPropertyException("ServiceLevelObjectiveTimeWindowRollingArgs", "count");
            }
            if ($.unit == null) {
                throw new MissingRequiredPropertyException("ServiceLevelObjectiveTimeWindowRollingArgs", "unit");
            }
            return $;
        }
    }

}
