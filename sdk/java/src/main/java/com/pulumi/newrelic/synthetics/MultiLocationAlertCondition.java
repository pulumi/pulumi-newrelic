// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.synthetics;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.synthetics.MultiLocationAlertConditionArgs;
import com.pulumi.newrelic.synthetics.inputs.MultiLocationAlertConditionState;
import com.pulumi.newrelic.synthetics.outputs.MultiLocationAlertConditionCritical;
import com.pulumi.newrelic.synthetics.outputs.MultiLocationAlertConditionWarning;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Use this resource to create, update, and delete a New Relic Synthetics Location Alerts.
 * 
 * &gt; **NOTE:** The newrelic.NrqlAlertCondition resource is preferred for configuring alerts conditions. In most cases feature parity can be achieved with a NRQL query. Other condition types may be deprecated in the future and receive fewer product updates.
 * 
 * ## Import
 * 
 * New Relic Synthetics MultiLocation Conditions can be imported using a concatenated string of the format
 * 
 * `&lt;policy_id&gt;:&lt;condition_id&gt;`, e.g. bash
 * 
 * ```sh
 *  $ pulumi import newrelic:synthetics/multiLocationAlertCondition:MultiLocationAlertCondition example 12345678:1456
 * ```
 * 
 */
@ResourceType(type="newrelic:synthetics/multiLocationAlertCondition:MultiLocationAlertCondition")
public class MultiLocationAlertCondition extends com.pulumi.resources.CustomResource {
    /**
     * A condition term with the priority set to critical.
     * 
     */
    @Export(name="critical", type=MultiLocationAlertConditionCritical.class, parameters={})
    private Output<MultiLocationAlertConditionCritical> critical;

    /**
     * @return A condition term with the priority set to critical.
     * 
     */
    public Output<MultiLocationAlertConditionCritical> critical() {
        return this.critical;
    }
    /**
     * Set whether to enable the alert condition.  Defaults to true.
     * 
     */
    @Export(name="enabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Set whether to enable the alert condition.  Defaults to true.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * The GUIDs of the Synthetics monitors to alert on.
     * 
     */
    @Export(name="entities", type=List.class, parameters={String.class})
    private Output<List<String>> entities;

    /**
     * @return The GUIDs of the Synthetics monitors to alert on.
     * 
     */
    public Output<List<String>> entities() {
        return this.entities;
    }
    /**
     * The title of the condition.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The title of the condition.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the policy where this condition will be used.
     * 
     */
    @Export(name="policyId", type=Integer.class, parameters={})
    private Output<Integer> policyId;

    /**
     * @return The ID of the policy where this condition will be used.
     * 
     */
    public Output<Integer> policyId() {
        return this.policyId;
    }
    /**
     * Runbook URL to display in notifications.
     * 
     */
    @Export(name="runbookUrl", type=String.class, parameters={})
    private Output</* @Nullable */ String> runbookUrl;

    /**
     * @return Runbook URL to display in notifications.
     * 
     */
    public Output<Optional<String>> runbookUrl() {
        return Codegen.optional(this.runbookUrl);
    }
    /**
     * The maximum number of seconds a violation can remain open before being closed by the system. Must be one of: 0, 3600, 7200, 14400, 28800, 43200, 86400.
     * 
     */
    @Export(name="violationTimeLimitSeconds", type=Integer.class, parameters={})
    private Output<Integer> violationTimeLimitSeconds;

    /**
     * @return The maximum number of seconds a violation can remain open before being closed by the system. Must be one of: 0, 3600, 7200, 14400, 28800, 43200, 86400.
     * 
     */
    public Output<Integer> violationTimeLimitSeconds() {
        return this.violationTimeLimitSeconds;
    }
    /**
     * A condition term with the priority set to warning.
     * 
     */
    @Export(name="warning", type=MultiLocationAlertConditionWarning.class, parameters={})
    private Output</* @Nullable */ MultiLocationAlertConditionWarning> warning;

    /**
     * @return A condition term with the priority set to warning.
     * 
     */
    public Output<Optional<MultiLocationAlertConditionWarning>> warning() {
        return Codegen.optional(this.warning);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MultiLocationAlertCondition(String name) {
        this(name, MultiLocationAlertConditionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MultiLocationAlertCondition(String name, MultiLocationAlertConditionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MultiLocationAlertCondition(String name, MultiLocationAlertConditionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:synthetics/multiLocationAlertCondition:MultiLocationAlertCondition", name, args == null ? MultiLocationAlertConditionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private MultiLocationAlertCondition(String name, Output<String> id, @Nullable MultiLocationAlertConditionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:synthetics/multiLocationAlertCondition:MultiLocationAlertCondition", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MultiLocationAlertCondition get(String name, Output<String> id, @Nullable MultiLocationAlertConditionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MultiLocationAlertCondition(name, id, state, options);
    }
}
