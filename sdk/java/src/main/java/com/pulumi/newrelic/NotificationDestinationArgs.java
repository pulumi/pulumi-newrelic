// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.newrelic.inputs.NotificationDestinationPropertyArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationDestinationArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationDestinationArgs Empty = new NotificationDestinationArgs();

    /**
     * A nested block that describes a notification destination authentication. Only one auth block is permitted per notification destination definition.  See Nested auth blocks below for details.
     * 
     */
    @Import(name="auth")
    private @Nullable Output<Map<String,String>> auth;

    /**
     * @return A nested block that describes a notification destination authentication. Only one auth block is permitted per notification destination definition.  See Nested auth blocks below for details.
     * 
     */
    public Optional<Output<Map<String,String>>> auth() {
        return Optional.ofNullable(this.auth);
    }

    /**
     * The name of the destination.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the destination.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A nested block that describes a notification destination properties.  Only one properties block is permitted per notification destination definition.  See Nested properties blocks below for details.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<List<NotificationDestinationPropertyArgs>> properties;

    /**
     * @return A nested block that describes a notification destination properties.  Only one properties block is permitted per notification destination definition.  See Nested properties blocks below for details.
     * 
     */
    public Optional<Output<List<NotificationDestinationPropertyArgs>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The type of the auth.  One of: `TOKEN` or `BASIC`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the auth.  One of: `TOKEN` or `BASIC`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private NotificationDestinationArgs() {}

    private NotificationDestinationArgs(NotificationDestinationArgs $) {
        this.auth = $.auth;
        this.name = $.name;
        this.properties = $.properties;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationDestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationDestinationArgs $;

        public Builder() {
            $ = new NotificationDestinationArgs();
        }

        public Builder(NotificationDestinationArgs defaults) {
            $ = new NotificationDestinationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auth A nested block that describes a notification destination authentication. Only one auth block is permitted per notification destination definition.  See Nested auth blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder auth(@Nullable Output<Map<String,String>> auth) {
            $.auth = auth;
            return this;
        }

        /**
         * @param auth A nested block that describes a notification destination authentication. Only one auth block is permitted per notification destination definition.  See Nested auth blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder auth(Map<String,String> auth) {
            return auth(Output.of(auth));
        }

        /**
         * @param name The name of the destination.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the destination.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param properties A nested block that describes a notification destination properties.  Only one properties block is permitted per notification destination definition.  See Nested properties blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<List<NotificationDestinationPropertyArgs>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties A nested block that describes a notification destination properties.  Only one properties block is permitted per notification destination definition.  See Nested properties blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder properties(List<NotificationDestinationPropertyArgs> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param properties A nested block that describes a notification destination properties.  Only one properties block is permitted per notification destination definition.  See Nested properties blocks below for details.
         * 
         * @return builder
         * 
         */
        public Builder properties(NotificationDestinationPropertyArgs... properties) {
            return properties(List.of(properties));
        }

        /**
         * @param type The type of the auth.  One of: `TOKEN` or `BASIC`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the auth.  One of: `TOKEN` or `BASIC`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NotificationDestinationArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
