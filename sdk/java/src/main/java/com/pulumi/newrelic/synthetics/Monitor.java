// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.synthetics;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.synthetics.MonitorArgs;
import com.pulumi.newrelic.synthetics.inputs.MonitorState;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Use this resource to create, update, and delete a synthetics monitor in New Relic.
 * 
 * ## Example Usage
 * 
 * ##### Type: `SIMPLE`
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.synthetics.Monitor;
 * import com.pulumi.newrelic.synthetics.MonitorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new Monitor(&#34;foo&#34;, MonitorArgs.builder()        
 *             .frequency(5)
 *             .locations(            
 *                 &#34;AWS_US_EAST_1&#34;,
 *                 &#34;AWS_US_EAST_2&#34;)
 *             .status(&#34;ENABLED&#34;)
 *             .type(&#34;SIMPLE&#34;)
 *             .uri(&#34;https://example.com&#34;)
 *             .validationString(&#34;add example validation check here&#34;)
 *             .verifySsl(true)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ##### Type: `BROWSER`
 * ## Additional Examples
 * 
 * Type: `BROWSER`
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.synthetics.Monitor;
 * import com.pulumi.newrelic.synthetics.MonitorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new Monitor(&#34;foo&#34;, MonitorArgs.builder()        
 *             .bypassHeadRequest(true)
 *             .frequency(5)
 *             .locations(&#34;AWS_US_EAST_1&#34;)
 *             .status(&#34;ENABLED&#34;)
 *             .treatRedirectAsFailure(true)
 *             .type(&#34;BROWSER&#34;)
 *             .uri(&#34;https://example.com&#34;)
 *             .validationString(&#34;add example validation check here&#34;)
 *             .verifySsl(true)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ##### Type: `SCRIPT_BROWSER`
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.synthetics.Monitor;
 * import com.pulumi.newrelic.synthetics.MonitorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new Monitor(&#34;foo&#34;, MonitorArgs.builder()        
 *             .frequency(5)
 *             .locations(&#34;AWS_US_EAST_1&#34;)
 *             .status(&#34;ENABLED&#34;)
 *             .type(&#34;SCRIPT_BROWSER&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ##### Type: `SCRIPT_API`
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.synthetics.Monitor;
 * import com.pulumi.newrelic.synthetics.MonitorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new Monitor(&#34;foo&#34;, MonitorArgs.builder()        
 *             .frequency(5)
 *             .locations(&#34;AWS_US_EAST_1&#34;)
 *             .status(&#34;ENABLED&#34;)
 *             .type(&#34;SCRIPT_API&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Synthetics monitors can be imported using the `id`, e.g. bash
 * 
 * ```sh
 *  $ pulumi import newrelic:synthetics/monitor:Monitor main &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="newrelic:synthetics/monitor:Monitor")
public class Monitor extends com.pulumi.resources.CustomResource {
    /**
     * Bypass HEAD request.
     * 
     */
    @Export(name="bypassHeadRequest", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> bypassHeadRequest;

    /**
     * @return Bypass HEAD request.
     * 
     */
    public Output<Optional<Boolean>> bypassHeadRequest() {
        return Codegen.optional(this.bypassHeadRequest);
    }
    /**
     * The interval (in minutes) at which this monitor should run.
     * 
     */
    @Export(name="frequency", type=Integer.class, parameters={})
    private Output<Integer> frequency;

    /**
     * @return The interval (in minutes) at which this monitor should run.
     * 
     */
    public Output<Integer> frequency() {
        return this.frequency;
    }
    /**
     * The locations in which this monitor should be run.
     * 
     */
    @Export(name="locations", type=List.class, parameters={String.class})
    private Output<List<String>> locations;

    /**
     * @return The locations in which this monitor should be run.
     * 
     */
    public Output<List<String>> locations() {
        return this.locations;
    }
    /**
     * The title of this monitor.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The title of this monitor.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The base threshold for the SLA report.
     * 
     */
    @Export(name="slaThreshold", type=Double.class, parameters={})
    private Output</* @Nullable */ Double> slaThreshold;

    /**
     * @return The base threshold for the SLA report.
     * 
     */
    public Output<Optional<Double>> slaThreshold() {
        return Codegen.optional(this.slaThreshold);
    }
    /**
     * The monitor status (i.e. `ENABLED`, `MUTED`, `DISABLED`).
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return The monitor status (i.e. `ENABLED`, `MUTED`, `DISABLED`).
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Fail the monitor check if redirected.
     * 
     */
    @Export(name="treatRedirectAsFailure", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> treatRedirectAsFailure;

    /**
     * @return Fail the monitor check if redirected.
     * 
     */
    public Output<Optional<Boolean>> treatRedirectAsFailure() {
        return Codegen.optional(this.treatRedirectAsFailure);
    }
    /**
     * The monitor type. Valid values are `SIMPLE`, `BROWSER`, `SCRIPT_BROWSER`, and `SCRIPT_API`.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The monitor type. Valid values are `SIMPLE`, `BROWSER`, `SCRIPT_BROWSER`, and `SCRIPT_API`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The URI for the monitor to hit.
     * 
     */
    @Export(name="uri", type=String.class, parameters={})
    private Output</* @Nullable */ String> uri;

    /**
     * @return The URI for the monitor to hit.
     * 
     */
    public Output<Optional<String>> uri() {
        return Codegen.optional(this.uri);
    }
    /**
     * The string to validate against in the response.
     * 
     */
    @Export(name="validationString", type=String.class, parameters={})
    private Output</* @Nullable */ String> validationString;

    /**
     * @return The string to validate against in the response.
     * 
     */
    public Output<Optional<String>> validationString() {
        return Codegen.optional(this.validationString);
    }
    /**
     * Verify SSL.
     * 
     */
    @Export(name="verifySsl", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> verifySsl;

    /**
     * @return Verify SSL.
     * 
     */
    public Output<Optional<Boolean>> verifySsl() {
        return Codegen.optional(this.verifySsl);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Monitor(String name) {
        this(name, MonitorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Monitor(String name, MonitorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Monitor(String name, MonitorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:synthetics/monitor:Monitor", name, args == null ? MonitorArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Monitor(String name, Output<String> id, @Nullable MonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:synthetics/monitor:Monitor", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Monitor get(String name, Output<String> id, @Nullable MonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Monitor(name, id, state, options);
    }
}
