// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.AlertPolicyArgs;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.inputs.AlertPolicyState;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Use this resource to create and manage New Relic alert policies.
 * 
 * ## Example Usage
 * ### Basic Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.AlertPolicy;
 * import com.pulumi.newrelic.AlertPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new AlertPolicy(&#34;foo&#34;, AlertPolicyArgs.builder()        
 *             .incidentPreference(&#34;PER_POLICY&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Provision multiple notification channels and add those channels to a policy
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.AlertChannel;
 * import com.pulumi.newrelic.AlertChannelArgs;
 * import com.pulumi.newrelic.inputs.AlertChannelConfigArgs;
 * import com.pulumi.newrelic.AlertPolicy;
 * import com.pulumi.newrelic.AlertPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var slackChannel = new AlertChannel(&#34;slackChannel&#34;, AlertChannelArgs.builder()        
 *             .type(&#34;slack&#34;)
 *             .config(AlertChannelConfigArgs.builder()
 *                 .url(&#34;https://hooks.slack.com/services/xxxxxxx/yyyyyyyy&#34;)
 *                 .channel(&#34;example-alerts-channel&#34;)
 *                 .build())
 *             .build());
 * 
 *         var emailChannel = new AlertChannel(&#34;emailChannel&#34;, AlertChannelArgs.builder()        
 *             .type(&#34;email&#34;)
 *             .config(AlertChannelConfigArgs.builder()
 *                 .recipients(&#34;example@testing.com&#34;)
 *                 .includeJsonAttachment(&#34;1&#34;)
 *                 .build())
 *             .build());
 * 
 *         var policyWithChannels = new AlertPolicy(&#34;policyWithChannels&#34;, AlertPolicyArgs.builder()        
 *             .incidentPreference(&#34;PER_CONDITION&#34;)
 *             .channelIds(            
 *                 slackChannel.id(),
 *                 emailChannel.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Reference existing notification channels and add those channel to a policy
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.NewrelicFunctions;
 * import com.pulumi.newrelic.inputs.GetAlertChannelArgs;
 * import com.pulumi.newrelic.AlertPolicy;
 * import com.pulumi.newrelic.AlertPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var slackChannel = NewrelicFunctions.getAlertChannel(GetAlertChannelArgs.builder()
 *             .name(&#34;slack-channel-notification&#34;)
 *             .build());
 * 
 *         final var emailChannel = NewrelicFunctions.getAlertChannel(GetAlertChannelArgs.builder()
 *             .name(&#34;test@example.com&#34;)
 *             .build());
 * 
 *         var policyWithChannels = new AlertPolicy(&#34;policyWithChannels&#34;, AlertPolicyArgs.builder()        
 *             .incidentPreference(&#34;PER_CONDITION&#34;)
 *             .channelIds(            
 *                 slackChannel.applyValue(getAlertChannelResult -&gt; getAlertChannelResult.id()),
 *                 emailChannel.applyValue(getAlertChannelResult -&gt; getAlertChannelResult.id()))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Alert policies can be imported using a composite ID of `&lt;id&gt;:&lt;account_id&gt;`, where `account_id` is the account number scoped to the alert policy resource. Example import
 * 
 * ```sh
 *  $ pulumi import newrelic:index/alertPolicy:AlertPolicy foo 23423556:4593020
 * ```
 * 
 *  Please note that channel IDs (`channel_ids`) _cannot_ be imported due channels being a separate resource. However, to add channels to an imported alert policy, you can import the policy, add the `channel_ids` attribute with the associated channel IDs, then run `terraform apply`. This will result in the original alert policy being destroyed and a new alert policy being created along with the channels being added to the policy.
 * 
 */
@ResourceType(type="newrelic:index/alertPolicy:AlertPolicy")
public class AlertPolicy extends com.pulumi.resources.CustomResource {
    /**
     * The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
     * 
     */
    @Export(name="accountId", type=Integer.class, parameters={})
    private Output<Integer> accountId;

    /**
     * @return The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
     * 
     */
    public Output<Integer> accountId() {
        return this.accountId;
    }
    /**
     * An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result in a new alert policy resource being created and the old one being destroyed. Also note that channel IDs _cannot_ be imported.
     * 
     */
    @Export(name="channelIds", type=List.class, parameters={Integer.class})
    private Output</* @Nullable */ List<Integer>> channelIds;

    /**
     * @return An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result in a new alert policy resource being created and the old one being destroyed. Also note that channel IDs _cannot_ be imported.
     * 
     */
    public Output<Optional<List<Integer>>> channelIds() {
        return Codegen.optional(this.channelIds);
    }
    /**
     * The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.
     * 
     */
    @Export(name="incidentPreference", type=String.class, parameters={})
    private Output</* @Nullable */ String> incidentPreference;

    /**
     * @return The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.
     * 
     */
    public Output<Optional<String>> incidentPreference() {
        return Codegen.optional(this.incidentPreference);
    }
    /**
     * The name of the policy.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the policy.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AlertPolicy(String name) {
        this(name, AlertPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AlertPolicy(String name, @Nullable AlertPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AlertPolicy(String name, @Nullable AlertPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/alertPolicy:AlertPolicy", name, args == null ? AlertPolicyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private AlertPolicy(String name, Output<String> id, @Nullable AlertPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/alertPolicy:AlertPolicy", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AlertPolicy get(String name, Output<String> id, @Nullable AlertPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AlertPolicy(name, id, state, options);
    }
}
