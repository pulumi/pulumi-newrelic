// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.cloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.cloud.GcpIntegrationsArgs;
import com.pulumi.newrelic.cloud.inputs.GcpIntegrationsState;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsAppEngine;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsBigQuery;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsBigTable;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsComposer;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsDataFlow;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsDataProc;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsDataStore;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsFireBaseDatabase;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsFireBaseHosting;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsFireBaseStorage;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsFireStore;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsFunctions;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsInterconnect;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsKubernetes;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsLoadBalancing;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsMemCache;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsPubSub;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsRedis;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsRouter;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsRun;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsSpanner;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsSql;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsStorage;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsVirtualMachines;
import com.pulumi.newrelic.cloud.outputs.GcpIntegrationsVpcAccess;
import java.lang.Integer;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * Linked GCP account integrations can be imported using the `id`, e.g. bash
 * 
 * ```sh
 *  $ pulumi import newrelic:cloud/gcpIntegrations:GcpIntegrations foo &lt;id&gt;
 * ```
 * 
 */
@ResourceType(type="newrelic:cloud/gcpIntegrations:GcpIntegrations")
public class GcpIntegrations extends com.pulumi.resources.CustomResource {
    /**
     * The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
     * 
     */
    @Export(name="accountId", type=Integer.class, parameters={})
    private Output<Integer> accountId;

    /**
     * @return The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
     * 
     */
    public Output<Integer> accountId() {
        return this.accountId;
    }
    /**
     * App Engine integration. See Integration blocks below for details.
     * 
     */
    @Export(name="appEngine", type=GcpIntegrationsAppEngine.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsAppEngine> appEngine;

    /**
     * @return App Engine integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsAppEngine>> appEngine() {
        return Codegen.optional(this.appEngine);
    }
    /**
     * Biq Query integration. See Integration blocks below for details.
     * 
     */
    @Export(name="bigQuery", type=GcpIntegrationsBigQuery.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsBigQuery> bigQuery;

    /**
     * @return Biq Query integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsBigQuery>> bigQuery() {
        return Codegen.optional(this.bigQuery);
    }
    /**
     * Big Table. See Integration blocks below for details.
     * 
     */
    @Export(name="bigTable", type=GcpIntegrationsBigTable.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsBigTable> bigTable;

    /**
     * @return Big Table. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsBigTable>> bigTable() {
        return Codegen.optional(this.bigTable);
    }
    /**
     * Composer integration. See Integration blocks below for details.
     * 
     */
    @Export(name="composer", type=GcpIntegrationsComposer.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsComposer> composer;

    /**
     * @return Composer integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsComposer>> composer() {
        return Codegen.optional(this.composer);
    }
    /**
     * Data Flow integration. See Integration blocks below for details.
     * 
     */
    @Export(name="dataFlow", type=GcpIntegrationsDataFlow.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsDataFlow> dataFlow;

    /**
     * @return Data Flow integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsDataFlow>> dataFlow() {
        return Codegen.optional(this.dataFlow);
    }
    /**
     * Data Proc integration. See Integration blocks below for details.
     * 
     */
    @Export(name="dataProc", type=GcpIntegrationsDataProc.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsDataProc> dataProc;

    /**
     * @return Data Proc integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsDataProc>> dataProc() {
        return Codegen.optional(this.dataProc);
    }
    /**
     * Data Store integration. See Integration blocks below for details.
     * 
     */
    @Export(name="dataStore", type=GcpIntegrationsDataStore.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsDataStore> dataStore;

    /**
     * @return Data Store integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsDataStore>> dataStore() {
        return Codegen.optional(this.dataStore);
    }
    /**
     * Fire Base Database integration. See Integration blocks below for details.
     * 
     */
    @Export(name="fireBaseDatabase", type=GcpIntegrationsFireBaseDatabase.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsFireBaseDatabase> fireBaseDatabase;

    /**
     * @return Fire Base Database integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsFireBaseDatabase>> fireBaseDatabase() {
        return Codegen.optional(this.fireBaseDatabase);
    }
    /**
     * Fire Base Hosting integration. See Integration blocks below for details.
     * 
     */
    @Export(name="fireBaseHosting", type=GcpIntegrationsFireBaseHosting.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsFireBaseHosting> fireBaseHosting;

    /**
     * @return Fire Base Hosting integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsFireBaseHosting>> fireBaseHosting() {
        return Codegen.optional(this.fireBaseHosting);
    }
    /**
     * Fire Base Storage integration. See Integration blocks below for details.
     * 
     */
    @Export(name="fireBaseStorage", type=GcpIntegrationsFireBaseStorage.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsFireBaseStorage> fireBaseStorage;

    /**
     * @return Fire Base Storage integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsFireBaseStorage>> fireBaseStorage() {
        return Codegen.optional(this.fireBaseStorage);
    }
    /**
     * Fire Store integration. See Integration blocks below for details.
     * 
     */
    @Export(name="fireStore", type=GcpIntegrationsFireStore.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsFireStore> fireStore;

    /**
     * @return Fire Store integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsFireStore>> fireStore() {
        return Codegen.optional(this.fireStore);
    }
    /**
     * Functions integration. See Integration blocks below for details.
     * 
     */
    @Export(name="functions", type=GcpIntegrationsFunctions.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsFunctions> functions;

    /**
     * @return Functions integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsFunctions>> functions() {
        return Codegen.optional(this.functions);
    }
    /**
     * Interconnect integration. See Integration blocks below for details.
     * 
     */
    @Export(name="interconnect", type=GcpIntegrationsInterconnect.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsInterconnect> interconnect;

    /**
     * @return Interconnect integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsInterconnect>> interconnect() {
        return Codegen.optional(this.interconnect);
    }
    /**
     * Kubernetes integration. See Integration blocks below for details.
     * 
     */
    @Export(name="kubernetes", type=GcpIntegrationsKubernetes.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsKubernetes> kubernetes;

    /**
     * @return Kubernetes integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsKubernetes>> kubernetes() {
        return Codegen.optional(this.kubernetes);
    }
    /**
     * The ID of the linked GCP account in New Relic.
     * 
     */
    @Export(name="linkedAccountId", type=Integer.class, parameters={})
    private Output<Integer> linkedAccountId;

    /**
     * @return The ID of the linked GCP account in New Relic.
     * 
     */
    public Output<Integer> linkedAccountId() {
        return this.linkedAccountId;
    }
    /**
     * GCP big table service
     * 
     */
    @Export(name="loadBalancing", type=GcpIntegrationsLoadBalancing.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsLoadBalancing> loadBalancing;

    /**
     * @return GCP big table service
     * 
     */
    public Output<Optional<GcpIntegrationsLoadBalancing>> loadBalancing() {
        return Codegen.optional(this.loadBalancing);
    }
    /**
     * Mem cache integration. See Integration blocks below for details.
     * 
     */
    @Export(name="memCache", type=GcpIntegrationsMemCache.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsMemCache> memCache;

    /**
     * @return Mem cache integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsMemCache>> memCache() {
        return Codegen.optional(this.memCache);
    }
    /**
     * Pub/Sub integration. See Integration blocks below for details.
     * 
     */
    @Export(name="pubSub", type=GcpIntegrationsPubSub.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsPubSub> pubSub;

    /**
     * @return Pub/Sub integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsPubSub>> pubSub() {
        return Codegen.optional(this.pubSub);
    }
    /**
     * Redis integration. See Integration blocks below for details.
     * 
     */
    @Export(name="redis", type=GcpIntegrationsRedis.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsRedis> redis;

    /**
     * @return Redis integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsRedis>> redis() {
        return Codegen.optional(this.redis);
    }
    /**
     * Router integration. See Integration blocks below for details.
     * 
     */
    @Export(name="router", type=GcpIntegrationsRouter.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsRouter> router;

    /**
     * @return Router integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsRouter>> router() {
        return Codegen.optional(this.router);
    }
    /**
     * Run integration. See Integration blocks below for details.
     * 
     */
    @Export(name="run", type=GcpIntegrationsRun.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsRun> run;

    /**
     * @return Run integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsRun>> run() {
        return Codegen.optional(this.run);
    }
    /**
     * Spanner integration. See Integration blocks below for details.
     * 
     */
    @Export(name="spanner", type=GcpIntegrationsSpanner.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsSpanner> spanner;

    /**
     * @return Spanner integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsSpanner>> spanner() {
        return Codegen.optional(this.spanner);
    }
    /**
     * SQL integration. See Integration blocks below for details.
     * 
     */
    @Export(name="sql", type=GcpIntegrationsSql.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsSql> sql;

    /**
     * @return SQL integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsSql>> sql() {
        return Codegen.optional(this.sql);
    }
    /**
     * Storage integration. See Integration blocks below for details.
     * 
     */
    @Export(name="storage", type=GcpIntegrationsStorage.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsStorage> storage;

    /**
     * @return Storage integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsStorage>> storage() {
        return Codegen.optional(this.storage);
    }
    /**
     * Virtual machines integration. See Integration blocks below for details.
     * 
     */
    @Export(name="virtualMachines", type=GcpIntegrationsVirtualMachines.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsVirtualMachines> virtualMachines;

    /**
     * @return Virtual machines integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsVirtualMachines>> virtualMachines() {
        return Codegen.optional(this.virtualMachines);
    }
    /**
     * VPC Access integration. See Integration blocks below for details.
     * 
     */
    @Export(name="vpcAccess", type=GcpIntegrationsVpcAccess.class, parameters={})
    private Output</* @Nullable */ GcpIntegrationsVpcAccess> vpcAccess;

    /**
     * @return VPC Access integration. See Integration blocks below for details.
     * 
     */
    public Output<Optional<GcpIntegrationsVpcAccess>> vpcAccess() {
        return Codegen.optional(this.vpcAccess);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GcpIntegrations(String name) {
        this(name, GcpIntegrationsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GcpIntegrations(String name, GcpIntegrationsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GcpIntegrations(String name, GcpIntegrationsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:cloud/gcpIntegrations:GcpIntegrations", name, args == null ? GcpIntegrationsArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GcpIntegrations(String name, Output<String> id, @Nullable GcpIntegrationsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:cloud/gcpIntegrations:GcpIntegrations", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GcpIntegrations get(String name, Output<String> id, @Nullable GcpIntegrationsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GcpIntegrations(name, id, state, options);
    }
}
