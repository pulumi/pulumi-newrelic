// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.synthetics;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.newrelic.synthetics.inputs.MonitorDowntimeEndRepeatArgs;
import com.pulumi.newrelic.synthetics.inputs.MonitorDowntimeFrequencyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitorDowntimeArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitorDowntimeArgs Empty = new MonitorDowntimeArgs();

    /**
     * The account in which the monitor downtime would be created. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` (or the `account_id` specified in the `provider{}`), if not specified.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account in which the monitor downtime would be created. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` (or the `account_id` specified in the `provider{}`), if not specified.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Options which may be used to specify when the repeat cycle of the monitor should end. This argument comprises the following nested arguments -
     * 
     */
    @Import(name="endRepeat")
    private @Nullable Output<MonitorDowntimeEndRepeatArgs> endRepeat;

    /**
     * @return Options which may be used to specify when the repeat cycle of the monitor should end. This argument comprises the following nested arguments -
     * 
     */
    public Optional<Output<MonitorDowntimeEndRepeatArgs>> endRepeat() {
        return Optional.ofNullable(this.endRepeat);
    }

    /**
     * The time at which the monitor downtime would end operating, a timestamp specified in the ISO 8601 format without the offset/timezone - for instance, `2024-01-05T14:27:07`.
     * 
     */
    @Import(name="endTime", required=true)
    private Output<String> endTime;

    /**
     * @return The time at which the monitor downtime would end operating, a timestamp specified in the ISO 8601 format without the offset/timezone - for instance, `2024-01-05T14:27:07`.
     * 
     */
    public Output<String> endTime() {
        return this.endTime;
    }

    /**
     * Options which may be used to specify the configuration of a monthly monitor downtime. This argument comprises the following nested arguments -
     * 
     */
    @Import(name="frequency")
    private @Nullable Output<MonitorDowntimeFrequencyArgs> frequency;

    /**
     * @return Options which may be used to specify the configuration of a monthly monitor downtime. This argument comprises the following nested arguments -
     * 
     */
    public Optional<Output<MonitorDowntimeFrequencyArgs>> frequency() {
        return Optional.ofNullable(this.frequency);
    }

    /**
     * A list of days on which weekly monitor downtimes would function. Valid values which go into this list would be `&#34;SUNDAY&#34;`, `&#34;MONDAY&#34;`, `&#34;TUESDAY&#34;`, `&#34;WEDNESDAY&#34;`, `&#34;THURSDAY&#34;`, `&#34;FRIDAY&#34;` and/or `&#34;SATURDAY&#34;`.
     * 
     * &gt; **NOTE:** `maintenance_days` **can only be used with the mode** `WEEKLY`, and **is a required argument** with weekly monitor downtimes (i.e. if the `mode` is `WEEKLY`).
     * 
     */
    @Import(name="maintenanceDays")
    private @Nullable Output<List<String>> maintenanceDays;

    /**
     * @return A list of days on which weekly monitor downtimes would function. Valid values which go into this list would be `&#34;SUNDAY&#34;`, `&#34;MONDAY&#34;`, `&#34;TUESDAY&#34;`, `&#34;WEDNESDAY&#34;`, `&#34;THURSDAY&#34;`, `&#34;FRIDAY&#34;` and/or `&#34;SATURDAY&#34;`.
     * 
     * &gt; **NOTE:** `maintenance_days` **can only be used with the mode** `WEEKLY`, and **is a required argument** with weekly monitor downtimes (i.e. if the `mode` is `WEEKLY`).
     * 
     */
    public Optional<Output<List<String>>> maintenanceDays() {
        return Optional.ofNullable(this.maintenanceDays);
    }

    /**
     * One of the four modes of operation of monitor downtimes - `ONE_TIME`, `DAILY`, `MONTHLY` or `WEEKLY`.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return One of the four modes of operation of monitor downtimes - `ONE_TIME`, `DAILY`, `MONTHLY` or `WEEKLY`.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * A list of GUIDs of synthetic monitors the monitor downtime would need to be applied to.
     * 
     */
    @Import(name="monitorGuids")
    private @Nullable Output<List<String>> monitorGuids;

    /**
     * @return A list of GUIDs of synthetic monitors the monitor downtime would need to be applied to.
     * 
     */
    public Optional<Output<List<String>>> monitorGuids() {
        return Optional.ofNullable(this.monitorGuids);
    }

    /**
     * Name of the monitor downtime to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the monitor downtime to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The time at which the monitor downtime would begin to operate, a timestamp specified in the ISO 8601 format without the offset/timezone - for instance, `2023-12-20T10:48:53`.
     * 
     */
    @Import(name="startTime", required=true)
    private Output<String> startTime;

    /**
     * @return The time at which the monitor downtime would begin to operate, a timestamp specified in the ISO 8601 format without the offset/timezone - for instance, `2023-12-20T10:48:53`.
     * 
     */
    public Output<String> startTime() {
        return this.startTime;
    }

    /**
     * The timezone that applies to the Monitor Downtime schedule.
     * 
     */
    @Import(name="timeZone", required=true)
    private Output<String> timeZone;

    /**
     * @return The timezone that applies to the Monitor Downtime schedule.
     * 
     */
    public Output<String> timeZone() {
        return this.timeZone;
    }

    private MonitorDowntimeArgs() {}

    private MonitorDowntimeArgs(MonitorDowntimeArgs $) {
        this.accountId = $.accountId;
        this.endRepeat = $.endRepeat;
        this.endTime = $.endTime;
        this.frequency = $.frequency;
        this.maintenanceDays = $.maintenanceDays;
        this.mode = $.mode;
        this.monitorGuids = $.monitorGuids;
        this.name = $.name;
        this.startTime = $.startTime;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorDowntimeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorDowntimeArgs $;

        public Builder() {
            $ = new MonitorDowntimeArgs();
        }

        public Builder(MonitorDowntimeArgs defaults) {
            $ = new MonitorDowntimeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account in which the monitor downtime would be created. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` (or the `account_id` specified in the `provider{}`), if not specified.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account in which the monitor downtime would be created. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` (or the `account_id` specified in the `provider{}`), if not specified.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param endRepeat Options which may be used to specify when the repeat cycle of the monitor should end. This argument comprises the following nested arguments -
         * 
         * @return builder
         * 
         */
        public Builder endRepeat(@Nullable Output<MonitorDowntimeEndRepeatArgs> endRepeat) {
            $.endRepeat = endRepeat;
            return this;
        }

        /**
         * @param endRepeat Options which may be used to specify when the repeat cycle of the monitor should end. This argument comprises the following nested arguments -
         * 
         * @return builder
         * 
         */
        public Builder endRepeat(MonitorDowntimeEndRepeatArgs endRepeat) {
            return endRepeat(Output.of(endRepeat));
        }

        /**
         * @param endTime The time at which the monitor downtime would end operating, a timestamp specified in the ISO 8601 format without the offset/timezone - for instance, `2024-01-05T14:27:07`.
         * 
         * @return builder
         * 
         */
        public Builder endTime(Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The time at which the monitor downtime would end operating, a timestamp specified in the ISO 8601 format without the offset/timezone - for instance, `2024-01-05T14:27:07`.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param frequency Options which may be used to specify the configuration of a monthly monitor downtime. This argument comprises the following nested arguments -
         * 
         * @return builder
         * 
         */
        public Builder frequency(@Nullable Output<MonitorDowntimeFrequencyArgs> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency Options which may be used to specify the configuration of a monthly monitor downtime. This argument comprises the following nested arguments -
         * 
         * @return builder
         * 
         */
        public Builder frequency(MonitorDowntimeFrequencyArgs frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param maintenanceDays A list of days on which weekly monitor downtimes would function. Valid values which go into this list would be `&#34;SUNDAY&#34;`, `&#34;MONDAY&#34;`, `&#34;TUESDAY&#34;`, `&#34;WEDNESDAY&#34;`, `&#34;THURSDAY&#34;`, `&#34;FRIDAY&#34;` and/or `&#34;SATURDAY&#34;`.
         * 
         * &gt; **NOTE:** `maintenance_days` **can only be used with the mode** `WEEKLY`, and **is a required argument** with weekly monitor downtimes (i.e. if the `mode` is `WEEKLY`).
         * 
         * @return builder
         * 
         */
        public Builder maintenanceDays(@Nullable Output<List<String>> maintenanceDays) {
            $.maintenanceDays = maintenanceDays;
            return this;
        }

        /**
         * @param maintenanceDays A list of days on which weekly monitor downtimes would function. Valid values which go into this list would be `&#34;SUNDAY&#34;`, `&#34;MONDAY&#34;`, `&#34;TUESDAY&#34;`, `&#34;WEDNESDAY&#34;`, `&#34;THURSDAY&#34;`, `&#34;FRIDAY&#34;` and/or `&#34;SATURDAY&#34;`.
         * 
         * &gt; **NOTE:** `maintenance_days` **can only be used with the mode** `WEEKLY`, and **is a required argument** with weekly monitor downtimes (i.e. if the `mode` is `WEEKLY`).
         * 
         * @return builder
         * 
         */
        public Builder maintenanceDays(List<String> maintenanceDays) {
            return maintenanceDays(Output.of(maintenanceDays));
        }

        /**
         * @param maintenanceDays A list of days on which weekly monitor downtimes would function. Valid values which go into this list would be `&#34;SUNDAY&#34;`, `&#34;MONDAY&#34;`, `&#34;TUESDAY&#34;`, `&#34;WEDNESDAY&#34;`, `&#34;THURSDAY&#34;`, `&#34;FRIDAY&#34;` and/or `&#34;SATURDAY&#34;`.
         * 
         * &gt; **NOTE:** `maintenance_days` **can only be used with the mode** `WEEKLY`, and **is a required argument** with weekly monitor downtimes (i.e. if the `mode` is `WEEKLY`).
         * 
         * @return builder
         * 
         */
        public Builder maintenanceDays(String... maintenanceDays) {
            return maintenanceDays(List.of(maintenanceDays));
        }

        /**
         * @param mode One of the four modes of operation of monitor downtimes - `ONE_TIME`, `DAILY`, `MONTHLY` or `WEEKLY`.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode One of the four modes of operation of monitor downtimes - `ONE_TIME`, `DAILY`, `MONTHLY` or `WEEKLY`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param monitorGuids A list of GUIDs of synthetic monitors the monitor downtime would need to be applied to.
         * 
         * @return builder
         * 
         */
        public Builder monitorGuids(@Nullable Output<List<String>> monitorGuids) {
            $.monitorGuids = monitorGuids;
            return this;
        }

        /**
         * @param monitorGuids A list of GUIDs of synthetic monitors the monitor downtime would need to be applied to.
         * 
         * @return builder
         * 
         */
        public Builder monitorGuids(List<String> monitorGuids) {
            return monitorGuids(Output.of(monitorGuids));
        }

        /**
         * @param monitorGuids A list of GUIDs of synthetic monitors the monitor downtime would need to be applied to.
         * 
         * @return builder
         * 
         */
        public Builder monitorGuids(String... monitorGuids) {
            return monitorGuids(List.of(monitorGuids));
        }

        /**
         * @param name Name of the monitor downtime to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the monitor downtime to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param startTime The time at which the monitor downtime would begin to operate, a timestamp specified in the ISO 8601 format without the offset/timezone - for instance, `2023-12-20T10:48:53`.
         * 
         * @return builder
         * 
         */
        public Builder startTime(Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The time at which the monitor downtime would begin to operate, a timestamp specified in the ISO 8601 format without the offset/timezone - for instance, `2023-12-20T10:48:53`.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param timeZone The timezone that applies to the Monitor Downtime schedule.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone The timezone that applies to the Monitor Downtime schedule.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public MonitorDowntimeArgs build() {
            if ($.endTime == null) {
                throw new MissingRequiredPropertyException("MonitorDowntimeArgs", "endTime");
            }
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("MonitorDowntimeArgs", "mode");
            }
            if ($.startTime == null) {
                throw new MissingRequiredPropertyException("MonitorDowntimeArgs", "startTime");
            }
            if ($.timeZone == null) {
                throw new MissingRequiredPropertyException("MonitorDowntimeArgs", "timeZone");
            }
            return $;
        }
    }

}
