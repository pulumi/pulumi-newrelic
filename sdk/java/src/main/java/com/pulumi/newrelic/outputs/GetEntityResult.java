// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.newrelic.outputs.GetEntityTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetEntityResult {
    private String accountId;
    /**
     * @return The domain-specific application ID of the entity. Only returned for APM and Browser applications.
     * 
     */
    private String applicationId;
    private String domain;
    /**
     * @return The unique GUID of the entity.
     * 
     */
    private String guid;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean ignoreCase;
    private @Nullable Boolean ignoreNotFound;
    private String name;
    /**
     * @return The browser-specific ID of the backing APM entity. Only returned for Browser applications.
     * 
     */
    private String servingApmApplicationId;
    private @Nullable List<GetEntityTag> tags;
    private String type;

    private GetEntityResult() {}
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return The domain-specific application ID of the entity. Only returned for APM and Browser applications.
     * 
     */
    public String applicationId() {
        return this.applicationId;
    }
    public String domain() {
        return this.domain;
    }
    /**
     * @return The unique GUID of the entity.
     * 
     */
    public String guid() {
        return this.guid;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> ignoreCase() {
        return Optional.ofNullable(this.ignoreCase);
    }
    public Optional<Boolean> ignoreNotFound() {
        return Optional.ofNullable(this.ignoreNotFound);
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The browser-specific ID of the backing APM entity. Only returned for Browser applications.
     * 
     */
    public String servingApmApplicationId() {
        return this.servingApmApplicationId;
    }
    public List<GetEntityTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEntityResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String applicationId;
        private String domain;
        private String guid;
        private String id;
        private @Nullable Boolean ignoreCase;
        private @Nullable Boolean ignoreNotFound;
        private String name;
        private String servingApmApplicationId;
        private @Nullable List<GetEntityTag> tags;
        private String type;
        public Builder() {}
        public Builder(GetEntityResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.applicationId = defaults.applicationId;
    	      this.domain = defaults.domain;
    	      this.guid = defaults.guid;
    	      this.id = defaults.id;
    	      this.ignoreCase = defaults.ignoreCase;
    	      this.ignoreNotFound = defaults.ignoreNotFound;
    	      this.name = defaults.name;
    	      this.servingApmApplicationId = defaults.servingApmApplicationId;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetEntityResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder applicationId(String applicationId) {
            if (applicationId == null) {
              throw new MissingRequiredPropertyException("GetEntityResult", "applicationId");
            }
            this.applicationId = applicationId;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetEntityResult", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder guid(String guid) {
            if (guid == null) {
              throw new MissingRequiredPropertyException("GetEntityResult", "guid");
            }
            this.guid = guid;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEntityResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreCase(@Nullable Boolean ignoreCase) {

            this.ignoreCase = ignoreCase;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreNotFound(@Nullable Boolean ignoreNotFound) {

            this.ignoreNotFound = ignoreNotFound;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetEntityResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder servingApmApplicationId(String servingApmApplicationId) {
            if (servingApmApplicationId == null) {
              throw new MissingRequiredPropertyException("GetEntityResult", "servingApmApplicationId");
            }
            this.servingApmApplicationId = servingApmApplicationId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<GetEntityTag> tags) {

            this.tags = tags;
            return this;
        }
        public Builder tags(GetEntityTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetEntityResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetEntityResult build() {
            final var _resultValue = new GetEntityResult();
            _resultValue.accountId = accountId;
            _resultValue.applicationId = applicationId;
            _resultValue.domain = domain;
            _resultValue.guid = guid;
            _resultValue.id = id;
            _resultValue.ignoreCase = ignoreCase;
            _resultValue.ignoreNotFound = ignoreNotFound;
            _resultValue.name = name;
            _resultValue.servingApmApplicationId = servingApmApplicationId;
            _resultValue.tags = tags;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
