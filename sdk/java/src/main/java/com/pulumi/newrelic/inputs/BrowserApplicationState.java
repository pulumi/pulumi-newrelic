// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BrowserApplicationState extends com.pulumi.resources.ResourceArgs {

    public static final BrowserApplicationState Empty = new BrowserApplicationState();

    /**
     * The account ID of the New Relic account you wish to create the browser application in. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` if not specified.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<Integer> accountId;

    /**
     * @return The account ID of the New Relic account you wish to create the browser application in. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` if not specified.
     * 
     */
    public Optional<Output<Integer>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The application ID of the browser application (not to be confused with GUID).
     * 
     */
    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    /**
     * @return The application ID of the browser application (not to be confused with GUID).
     * 
     */
    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * Configures cookies. Defaults to `true`, if not specified.
     * 
     */
    @Import(name="cookiesEnabled")
    private @Nullable Output<Boolean> cookiesEnabled;

    /**
     * @return Configures cookies. Defaults to `true`, if not specified.
     * 
     */
    public Optional<Output<Boolean>> cookiesEnabled() {
        return Optional.ofNullable(this.cookiesEnabled);
    }

    /**
     * Configures distributed tracing in browser apps. Defaults to `true`, if not specified.
     * 
     */
    @Import(name="distributedTracingEnabled")
    private @Nullable Output<Boolean> distributedTracingEnabled;

    /**
     * @return Configures distributed tracing in browser apps. Defaults to `true`, if not specified.
     * 
     */
    public Optional<Output<Boolean>> distributedTracingEnabled() {
        return Optional.ofNullable(this.distributedTracingEnabled);
    }

    /**
     * The GUID of the browser application.
     * 
     */
    @Import(name="guid")
    private @Nullable Output<String> guid;

    /**
     * @return The GUID of the browser application.
     * 
     */
    public Optional<Output<String>> guid() {
        return Optional.ofNullable(this.guid);
    }

    /**
     * The JavaScript configuration of the browser application, encoded into a string.
     * 
     */
    @Import(name="jsConfig")
    private @Nullable Output<String> jsConfig;

    /**
     * @return The JavaScript configuration of the browser application, encoded into a string.
     * 
     */
    public Optional<Output<String>> jsConfig() {
        return Optional.ofNullable(this.jsConfig);
    }

    /**
     * Determines the browser loader configured. Valid values are `SPA`, `PRO`, and `LITE`. The default is `SPA`. Refer to the [browser agent loader documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for more information on valid loader types.
     * 
     */
    @Import(name="loaderType")
    private @Nullable Output<String> loaderType;

    /**
     * @return Determines the browser loader configured. Valid values are `SPA`, `PRO`, and `LITE`. The default is `SPA`. Refer to the [browser agent loader documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for more information on valid loader types.
     * 
     */
    public Optional<Output<String>> loaderType() {
        return Optional.ofNullable(this.loaderType);
    }

    /**
     * The name of the browser application.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the browser application.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private BrowserApplicationState() {}

    private BrowserApplicationState(BrowserApplicationState $) {
        this.accountId = $.accountId;
        this.applicationId = $.applicationId;
        this.cookiesEnabled = $.cookiesEnabled;
        this.distributedTracingEnabled = $.distributedTracingEnabled;
        this.guid = $.guid;
        this.jsConfig = $.jsConfig;
        this.loaderType = $.loaderType;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrowserApplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrowserApplicationState $;

        public Builder() {
            $ = new BrowserApplicationState();
        }

        public Builder(BrowserApplicationState defaults) {
            $ = new BrowserApplicationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account ID of the New Relic account you wish to create the browser application in. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` if not specified.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<Integer> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account ID of the New Relic account you wish to create the browser application in. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` if not specified.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Integer accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param applicationId The application ID of the browser application (not to be confused with GUID).
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId The application ID of the browser application (not to be confused with GUID).
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param cookiesEnabled Configures cookies. Defaults to `true`, if not specified.
         * 
         * @return builder
         * 
         */
        public Builder cookiesEnabled(@Nullable Output<Boolean> cookiesEnabled) {
            $.cookiesEnabled = cookiesEnabled;
            return this;
        }

        /**
         * @param cookiesEnabled Configures cookies. Defaults to `true`, if not specified.
         * 
         * @return builder
         * 
         */
        public Builder cookiesEnabled(Boolean cookiesEnabled) {
            return cookiesEnabled(Output.of(cookiesEnabled));
        }

        /**
         * @param distributedTracingEnabled Configures distributed tracing in browser apps. Defaults to `true`, if not specified.
         * 
         * @return builder
         * 
         */
        public Builder distributedTracingEnabled(@Nullable Output<Boolean> distributedTracingEnabled) {
            $.distributedTracingEnabled = distributedTracingEnabled;
            return this;
        }

        /**
         * @param distributedTracingEnabled Configures distributed tracing in browser apps. Defaults to `true`, if not specified.
         * 
         * @return builder
         * 
         */
        public Builder distributedTracingEnabled(Boolean distributedTracingEnabled) {
            return distributedTracingEnabled(Output.of(distributedTracingEnabled));
        }

        /**
         * @param guid The GUID of the browser application.
         * 
         * @return builder
         * 
         */
        public Builder guid(@Nullable Output<String> guid) {
            $.guid = guid;
            return this;
        }

        /**
         * @param guid The GUID of the browser application.
         * 
         * @return builder
         * 
         */
        public Builder guid(String guid) {
            return guid(Output.of(guid));
        }

        /**
         * @param jsConfig The JavaScript configuration of the browser application, encoded into a string.
         * 
         * @return builder
         * 
         */
        public Builder jsConfig(@Nullable Output<String> jsConfig) {
            $.jsConfig = jsConfig;
            return this;
        }

        /**
         * @param jsConfig The JavaScript configuration of the browser application, encoded into a string.
         * 
         * @return builder
         * 
         */
        public Builder jsConfig(String jsConfig) {
            return jsConfig(Output.of(jsConfig));
        }

        /**
         * @param loaderType Determines the browser loader configured. Valid values are `SPA`, `PRO`, and `LITE`. The default is `SPA`. Refer to the [browser agent loader documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for more information on valid loader types.
         * 
         * @return builder
         * 
         */
        public Builder loaderType(@Nullable Output<String> loaderType) {
            $.loaderType = loaderType;
            return this;
        }

        /**
         * @param loaderType Determines the browser loader configured. Valid values are `SPA`, `PRO`, and `LITE`. The default is `SPA`. Refer to the [browser agent loader documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for more information on valid loader types.
         * 
         * @return builder
         * 
         */
        public Builder loaderType(String loaderType) {
            return loaderType(Output.of(loaderType));
        }

        /**
         * @param name The name of the browser application.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the browser application.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public BrowserApplicationState build() {
            return $;
        }
    }

}
