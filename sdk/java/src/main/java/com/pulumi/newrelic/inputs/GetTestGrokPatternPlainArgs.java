// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTestGrokPatternPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTestGrokPatternPlainArgs Empty = new GetTestGrokPatternPlainArgs();

    /**
     * The New Relic account ID to operate on.  This allows you to override the `accountId` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
     * 
     */
    @Import(name="accountId")
    private @Nullable String accountId;

    /**
     * @return The New Relic account ID to operate on.  This allows you to override the `accountId` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
     * 
     */
    public Optional<String> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The Grok pattern to test.
     * 
     */
    @Import(name="grok", required=true)
    private String grok;

    /**
     * @return The Grok pattern to test.
     * 
     */
    public String grok() {
        return this.grok;
    }

    /**
     * The log lines to test the Grok pattern against.
     * 
     */
    @Import(name="logLines", required=true)
    private List<String> logLines;

    /**
     * @return The log lines to test the Grok pattern against.
     * 
     */
    public List<String> logLines() {
        return this.logLines;
    }

    private GetTestGrokPatternPlainArgs() {}

    private GetTestGrokPatternPlainArgs(GetTestGrokPatternPlainArgs $) {
        this.accountId = $.accountId;
        this.grok = $.grok;
        this.logLines = $.logLines;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTestGrokPatternPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTestGrokPatternPlainArgs $;

        public Builder() {
            $ = new GetTestGrokPatternPlainArgs();
        }

        public Builder(GetTestGrokPatternPlainArgs defaults) {
            $ = new GetTestGrokPatternPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The New Relic account ID to operate on.  This allows you to override the `accountId` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable String accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param grok The Grok pattern to test.
         * 
         * @return builder
         * 
         */
        public Builder grok(String grok) {
            $.grok = grok;
            return this;
        }

        /**
         * @param logLines The log lines to test the Grok pattern against.
         * 
         * @return builder
         * 
         */
        public Builder logLines(List<String> logLines) {
            $.logLines = logLines;
            return this;
        }

        /**
         * @param logLines The log lines to test the Grok pattern against.
         * 
         * @return builder
         * 
         */
        public Builder logLines(String... logLines) {
            return logLines(List.of(logLines));
        }

        public GetTestGrokPatternPlainArgs build() {
            if ($.grok == null) {
                throw new MissingRequiredPropertyException("GetTestGrokPatternPlainArgs", "grok");
            }
            if ($.logLines == null) {
                throw new MissingRequiredPropertyException("GetTestGrokPatternPlainArgs", "logLines");
            }
            return $;
        }
    }

}
