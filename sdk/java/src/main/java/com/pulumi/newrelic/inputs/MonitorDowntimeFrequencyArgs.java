// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.newrelic.inputs.MonitorDowntimeFrequencyDaysOfWeekArgs;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitorDowntimeFrequencyArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitorDowntimeFrequencyArgs Empty = new MonitorDowntimeFrequencyArgs();

    /**
     * A numerical list of days of a month on which the Monitor Downtime is scheduled to run.
     * 
     */
    @Import(name="daysOfMonths")
    private @Nullable Output<List<Integer>> daysOfMonths;

    /**
     * @return A numerical list of days of a month on which the Monitor Downtime is scheduled to run.
     * 
     */
    public Optional<Output<List<Integer>>> daysOfMonths() {
        return Optional.ofNullable(this.daysOfMonths);
    }

    /**
     * A list of days of the week on which the Monitor Downtime is scheduled to run.
     * 
     */
    @Import(name="daysOfWeek")
    private @Nullable Output<MonitorDowntimeFrequencyDaysOfWeekArgs> daysOfWeek;

    /**
     * @return A list of days of the week on which the Monitor Downtime is scheduled to run.
     * 
     */
    public Optional<Output<MonitorDowntimeFrequencyDaysOfWeekArgs>> daysOfWeek() {
        return Optional.ofNullable(this.daysOfWeek);
    }

    private MonitorDowntimeFrequencyArgs() {}

    private MonitorDowntimeFrequencyArgs(MonitorDowntimeFrequencyArgs $) {
        this.daysOfMonths = $.daysOfMonths;
        this.daysOfWeek = $.daysOfWeek;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorDowntimeFrequencyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorDowntimeFrequencyArgs $;

        public Builder() {
            $ = new MonitorDowntimeFrequencyArgs();
        }

        public Builder(MonitorDowntimeFrequencyArgs defaults) {
            $ = new MonitorDowntimeFrequencyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param daysOfMonths A numerical list of days of a month on which the Monitor Downtime is scheduled to run.
         * 
         * @return builder
         * 
         */
        public Builder daysOfMonths(@Nullable Output<List<Integer>> daysOfMonths) {
            $.daysOfMonths = daysOfMonths;
            return this;
        }

        /**
         * @param daysOfMonths A numerical list of days of a month on which the Monitor Downtime is scheduled to run.
         * 
         * @return builder
         * 
         */
        public Builder daysOfMonths(List<Integer> daysOfMonths) {
            return daysOfMonths(Output.of(daysOfMonths));
        }

        /**
         * @param daysOfMonths A numerical list of days of a month on which the Monitor Downtime is scheduled to run.
         * 
         * @return builder
         * 
         */
        public Builder daysOfMonths(Integer... daysOfMonths) {
            return daysOfMonths(List.of(daysOfMonths));
        }

        /**
         * @param daysOfWeek A list of days of the week on which the Monitor Downtime is scheduled to run.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeek(@Nullable Output<MonitorDowntimeFrequencyDaysOfWeekArgs> daysOfWeek) {
            $.daysOfWeek = daysOfWeek;
            return this;
        }

        /**
         * @param daysOfWeek A list of days of the week on which the Monitor Downtime is scheduled to run.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeek(MonitorDowntimeFrequencyDaysOfWeekArgs daysOfWeek) {
            return daysOfWeek(Output.of(daysOfWeek));
        }

        public MonitorDowntimeFrequencyArgs build() {
            return $;
        }
    }

}
