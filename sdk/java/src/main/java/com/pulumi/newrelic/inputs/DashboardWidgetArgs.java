// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.newrelic.inputs.DashboardWidgetCompareWithArgs;
import com.pulumi.newrelic.inputs.DashboardWidgetMetricArgs;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetArgs Empty = new DashboardWidgetArgs();

    @Import(name="accountId")
    private @Nullable Output<Integer> accountId;

    public Optional<Output<Integer>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    @Import(name="column", required=true)
    private Output<Integer> column;

    public Output<Integer> column() {
        return this.column;
    }

    @Import(name="compareWiths")
    private @Nullable Output<List<DashboardWidgetCompareWithArgs>> compareWiths;

    public Optional<Output<List<DashboardWidgetCompareWithArgs>>> compareWiths() {
        return Optional.ofNullable(this.compareWiths);
    }

    @Import(name="drilldownDashboardId")
    private @Nullable Output<Integer> drilldownDashboardId;

    public Optional<Output<Integer>> drilldownDashboardId() {
        return Optional.ofNullable(this.drilldownDashboardId);
    }

    @Import(name="duration")
    private @Nullable Output<Integer> duration;

    public Optional<Output<Integer>> duration() {
        return Optional.ofNullable(this.duration);
    }

    @Import(name="endTime")
    private @Nullable Output<Integer> endTime;

    public Optional<Output<Integer>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    @Import(name="entityIds")
    private @Nullable Output<List<Integer>> entityIds;

    public Optional<Output<List<Integer>>> entityIds() {
        return Optional.ofNullable(this.entityIds);
    }

    @Import(name="facet")
    private @Nullable Output<String> facet;

    public Optional<Output<String>> facet() {
        return Optional.ofNullable(this.facet);
    }

    @Import(name="height")
    private @Nullable Output<Integer> height;

    public Optional<Output<Integer>> height() {
        return Optional.ofNullable(this.height);
    }

    @Import(name="limit")
    private @Nullable Output<Integer> limit;

    public Optional<Output<Integer>> limit() {
        return Optional.ofNullable(this.limit);
    }

    @Import(name="metrics")
    private @Nullable Output<List<DashboardWidgetMetricArgs>> metrics;

    public Optional<Output<List<DashboardWidgetMetricArgs>>> metrics() {
        return Optional.ofNullable(this.metrics);
    }

    @Import(name="notes")
    private @Nullable Output<String> notes;

    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    @Import(name="nrql")
    private @Nullable Output<String> nrql;

    public Optional<Output<String>> nrql() {
        return Optional.ofNullable(this.nrql);
    }

    @Import(name="orderBy")
    private @Nullable Output<String> orderBy;

    public Optional<Output<String>> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }

    @Import(name="rawMetricName")
    private @Nullable Output<String> rawMetricName;

    public Optional<Output<String>> rawMetricName() {
        return Optional.ofNullable(this.rawMetricName);
    }

    @Import(name="row", required=true)
    private Output<Integer> row;

    public Output<Integer> row() {
        return this.row;
    }

    @Import(name="source")
    private @Nullable Output<String> source;

    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    @Import(name="thresholdRed")
    private @Nullable Output<Double> thresholdRed;

    public Optional<Output<Double>> thresholdRed() {
        return Optional.ofNullable(this.thresholdRed);
    }

    @Import(name="thresholdYellow")
    private @Nullable Output<Double> thresholdYellow;

    public Optional<Output<Double>> thresholdYellow() {
        return Optional.ofNullable(this.thresholdYellow);
    }

    @Import(name="title", required=true)
    private Output<String> title;

    public Output<String> title() {
        return this.title;
    }

    @Import(name="visualization", required=true)
    private Output<String> visualization;

    public Output<String> visualization() {
        return this.visualization;
    }

    @Import(name="widgetId")
    private @Nullable Output<Integer> widgetId;

    public Optional<Output<Integer>> widgetId() {
        return Optional.ofNullable(this.widgetId);
    }

    @Import(name="width")
    private @Nullable Output<Integer> width;

    public Optional<Output<Integer>> width() {
        return Optional.ofNullable(this.width);
    }

    private DashboardWidgetArgs() {}

    private DashboardWidgetArgs(DashboardWidgetArgs $) {
        this.accountId = $.accountId;
        this.column = $.column;
        this.compareWiths = $.compareWiths;
        this.drilldownDashboardId = $.drilldownDashboardId;
        this.duration = $.duration;
        this.endTime = $.endTime;
        this.entityIds = $.entityIds;
        this.facet = $.facet;
        this.height = $.height;
        this.limit = $.limit;
        this.metrics = $.metrics;
        this.notes = $.notes;
        this.nrql = $.nrql;
        this.orderBy = $.orderBy;
        this.rawMetricName = $.rawMetricName;
        this.row = $.row;
        this.source = $.source;
        this.thresholdRed = $.thresholdRed;
        this.thresholdYellow = $.thresholdYellow;
        this.title = $.title;
        this.visualization = $.visualization;
        this.widgetId = $.widgetId;
        this.width = $.width;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetArgs $;

        public Builder() {
            $ = new DashboardWidgetArgs();
        }

        public Builder(DashboardWidgetArgs defaults) {
            $ = new DashboardWidgetArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountId(@Nullable Output<Integer> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(Integer accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder column(Output<Integer> column) {
            $.column = column;
            return this;
        }

        public Builder column(Integer column) {
            return column(Output.of(column));
        }

        public Builder compareWiths(@Nullable Output<List<DashboardWidgetCompareWithArgs>> compareWiths) {
            $.compareWiths = compareWiths;
            return this;
        }

        public Builder compareWiths(List<DashboardWidgetCompareWithArgs> compareWiths) {
            return compareWiths(Output.of(compareWiths));
        }

        public Builder compareWiths(DashboardWidgetCompareWithArgs... compareWiths) {
            return compareWiths(List.of(compareWiths));
        }

        public Builder drilldownDashboardId(@Nullable Output<Integer> drilldownDashboardId) {
            $.drilldownDashboardId = drilldownDashboardId;
            return this;
        }

        public Builder drilldownDashboardId(Integer drilldownDashboardId) {
            return drilldownDashboardId(Output.of(drilldownDashboardId));
        }

        public Builder duration(@Nullable Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        public Builder endTime(@Nullable Output<Integer> endTime) {
            $.endTime = endTime;
            return this;
        }

        public Builder endTime(Integer endTime) {
            return endTime(Output.of(endTime));
        }

        public Builder entityIds(@Nullable Output<List<Integer>> entityIds) {
            $.entityIds = entityIds;
            return this;
        }

        public Builder entityIds(List<Integer> entityIds) {
            return entityIds(Output.of(entityIds));
        }

        public Builder entityIds(Integer... entityIds) {
            return entityIds(List.of(entityIds));
        }

        public Builder facet(@Nullable Output<String> facet) {
            $.facet = facet;
            return this;
        }

        public Builder facet(String facet) {
            return facet(Output.of(facet));
        }

        public Builder height(@Nullable Output<Integer> height) {
            $.height = height;
            return this;
        }

        public Builder height(Integer height) {
            return height(Output.of(height));
        }

        public Builder limit(@Nullable Output<Integer> limit) {
            $.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            return limit(Output.of(limit));
        }

        public Builder metrics(@Nullable Output<List<DashboardWidgetMetricArgs>> metrics) {
            $.metrics = metrics;
            return this;
        }

        public Builder metrics(List<DashboardWidgetMetricArgs> metrics) {
            return metrics(Output.of(metrics));
        }

        public Builder metrics(DashboardWidgetMetricArgs... metrics) {
            return metrics(List.of(metrics));
        }

        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        public Builder nrql(@Nullable Output<String> nrql) {
            $.nrql = nrql;
            return this;
        }

        public Builder nrql(String nrql) {
            return nrql(Output.of(nrql));
        }

        public Builder orderBy(@Nullable Output<String> orderBy) {
            $.orderBy = orderBy;
            return this;
        }

        public Builder orderBy(String orderBy) {
            return orderBy(Output.of(orderBy));
        }

        public Builder rawMetricName(@Nullable Output<String> rawMetricName) {
            $.rawMetricName = rawMetricName;
            return this;
        }

        public Builder rawMetricName(String rawMetricName) {
            return rawMetricName(Output.of(rawMetricName));
        }

        public Builder row(Output<Integer> row) {
            $.row = row;
            return this;
        }

        public Builder row(Integer row) {
            return row(Output.of(row));
        }

        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        public Builder source(String source) {
            return source(Output.of(source));
        }

        public Builder thresholdRed(@Nullable Output<Double> thresholdRed) {
            $.thresholdRed = thresholdRed;
            return this;
        }

        public Builder thresholdRed(Double thresholdRed) {
            return thresholdRed(Output.of(thresholdRed));
        }

        public Builder thresholdYellow(@Nullable Output<Double> thresholdYellow) {
            $.thresholdYellow = thresholdYellow;
            return this;
        }

        public Builder thresholdYellow(Double thresholdYellow) {
            return thresholdYellow(Output.of(thresholdYellow));
        }

        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        public Builder title(String title) {
            return title(Output.of(title));
        }

        public Builder visualization(Output<String> visualization) {
            $.visualization = visualization;
            return this;
        }

        public Builder visualization(String visualization) {
            return visualization(Output.of(visualization));
        }

        public Builder widgetId(@Nullable Output<Integer> widgetId) {
            $.widgetId = widgetId;
            return this;
        }

        public Builder widgetId(Integer widgetId) {
            return widgetId(Output.of(widgetId));
        }

        public Builder width(@Nullable Output<Integer> width) {
            $.width = width;
            return this;
        }

        public Builder width(Integer width) {
            return width(Output.of(width));
        }

        public DashboardWidgetArgs build() {
            $.column = Objects.requireNonNull($.column, "expected parameter 'column' to be non-null");
            $.row = Objects.requireNonNull($.row, "expected parameter 'row' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            $.visualization = Objects.requireNonNull($.visualization, "expected parameter 'visualization' to be non-null");
            return $;
        }
    }

}
