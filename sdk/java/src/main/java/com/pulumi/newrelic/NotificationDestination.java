// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.NotificationDestinationArgs;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.inputs.NotificationDestinationState;
import com.pulumi.newrelic.outputs.NotificationDestinationAuthBasic;
import com.pulumi.newrelic.outputs.NotificationDestinationAuthCustomHeader;
import com.pulumi.newrelic.outputs.NotificationDestinationAuthToken;
import com.pulumi.newrelic.outputs.NotificationDestinationProperty;
import com.pulumi.newrelic.outputs.NotificationDestinationSecureUrl;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * Destination id can be found in the Destinations page -&gt; three dots at the right of the chosen destination -&gt; copy destination id to clipboard.
 * 
 * This example is especially useful for slack destinations which *must* be imported.
 * 
 * 1. Add an empty resource to your terraform file:
 * 
 * terraform
 * 
 * resource &#34;newrelic_notification_destination&#34; &#34;foo&#34; {
 * 
 * }
 * 
 * ```sh
 * $ pulumi import newrelic:index/notificationDestination:NotificationDestination  Run import command: `newrelic_notification_destination.foo &lt;destination_id&gt;`
 * ```
 * 
 * 3. Run the following command after the import successfully done and copy the information to your resource:
 * 
 * `terraform state show newrelic_notification_destination.foo`
 * 
 * 4. Add `ignore_changes` attribute on `auth_token` in your imported resource:
 * 
 * terraform
 * 
 * lifecycle {
 * 
 *     ignore_changes = [auth_token]
 * 
 *   }
 * 
 * Your imported destination should look like that:
 * 
 * terraform
 * 
 * resource &#34;newrelic_notification_destination&#34; &#34;foo&#34; {
 * 
 *   lifecycle {
 * 
 *     ignore_changes = [auth_token]
 * 
 *   }
 * 
 *   name = &#34;*********&#34;
 * 
 *   type = &#34;SLACK&#34;
 * 
 *   auth_token {
 * 
 *     prefix = &#34;Bearer&#34;
 * 
 *   }
 * 
 *   property {
 * 
 *       key   = &#34;teamName&#34;
 *     
 *       label = &#34;Team Name&#34;
 *     
 *       value = &#34;******&#34;
 * 
 *   }
 * 
 * }
 * 
 */
@ResourceType(type="newrelic:index/notificationDestination:NotificationDestination")
public class NotificationDestination extends com.pulumi.resources.CustomResource {
    /**
     * Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * Indicates whether the destination is active.
     * 
     */
    @Export(name="active", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> active;

    /**
     * @return Indicates whether the destination is active.
     * 
     */
    public Output<Optional<Boolean>> active() {
        return Codegen.optional(this.active);
    }
    /**
     * A nested block that describes a basic username and password authentication credentials. Only one auth_basic block is permitted per notification destination definition.  See Nested auth_basic blocks below for details.
     * 
     */
    @Export(name="authBasic", refs={NotificationDestinationAuthBasic.class}, tree="[0]")
    private Output</* @Nullable */ NotificationDestinationAuthBasic> authBasic;

    /**
     * @return A nested block that describes a basic username and password authentication credentials. Only one auth_basic block is permitted per notification destination definition.  See Nested auth_basic blocks below for details.
     * 
     */
    public Output<Optional<NotificationDestinationAuthBasic>> authBasic() {
        return Codegen.optional(this.authBasic);
    }
    /**
     * A nested block that describes a custom header authentication credentials. Multiple blocks are permitted per notification destination definition. Nested auth_custom_header blocks below for details.
     * 
     */
    @Export(name="authCustomHeaders", refs={List.class,NotificationDestinationAuthCustomHeader.class}, tree="[0,1]")
    private Output</* @Nullable */ List<NotificationDestinationAuthCustomHeader>> authCustomHeaders;

    /**
     * @return A nested block that describes a custom header authentication credentials. Multiple blocks are permitted per notification destination definition. Nested auth_custom_header blocks below for details.
     * 
     */
    public Output<Optional<List<NotificationDestinationAuthCustomHeader>>> authCustomHeaders() {
        return Codegen.optional(this.authCustomHeaders);
    }
    /**
     * A nested block that describes a token authentication credentials. Only one auth_token block is permitted per notification destination definition.  See Nested auth_token blocks below for details.
     * 
     */
    @Export(name="authToken", refs={NotificationDestinationAuthToken.class}, tree="[0]")
    private Output</* @Nullable */ NotificationDestinationAuthToken> authToken;

    /**
     * @return A nested block that describes a token authentication credentials. Only one auth_token block is permitted per notification destination definition.  See Nested auth_token blocks below for details.
     * 
     */
    public Output<Optional<NotificationDestinationAuthToken>> authToken() {
        return Codegen.optional(this.authToken);
    }
    /**
     * The unique entity identifier of the destination in New Relic.
     * 
     */
    @Export(name="guid", refs={String.class}, tree="[0]")
    private Output<String> guid;

    /**
     * @return The unique entity identifier of the destination in New Relic.
     * 
     */
    public Output<String> guid() {
        return this.guid;
    }
    /**
     * The last time a notification was sent.
     * 
     */
    @Export(name="lastSent", refs={String.class}, tree="[0]")
    private Output<String> lastSent;

    /**
     * @return The last time a notification was sent.
     * 
     */
    public Output<String> lastSent() {
        return this.lastSent;
    }
    /**
     * The name of the destination.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the destination.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A nested block that describes a notification destination property. See Nested property blocks below for details.
     * 
     */
    @Export(name="properties", refs={List.class,NotificationDestinationProperty.class}, tree="[0,1]")
    private Output<List<NotificationDestinationProperty>> properties;

    /**
     * @return A nested block that describes a notification destination property. See Nested property blocks below for details.
     * 
     */
    public Output<List<NotificationDestinationProperty>> properties() {
        return this.properties;
    }
    /**
     * A nested block that describes a URL that contains sensitive data at the path or parameters. Only one secure_url block is permitted per notification destination definition. See Nested secure_url blocks below for details.
     * 
     */
    @Export(name="secureUrl", refs={NotificationDestinationSecureUrl.class}, tree="[0]")
    private Output</* @Nullable */ NotificationDestinationSecureUrl> secureUrl;

    /**
     * @return A nested block that describes a URL that contains sensitive data at the path or parameters. Only one secure_url block is permitted per notification destination definition. See Nested secure_url blocks below for details.
     * 
     */
    public Output<Optional<NotificationDestinationSecureUrl>> secureUrl() {
        return Codegen.optional(this.secureUrl);
    }
    /**
     * The status of the destination.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The status of the destination.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
     * PAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY, MOBILE_PUSH, EVENT_BRIDGE).
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
     * PAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY, MOBILE_PUSH, EVENT_BRIDGE).
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NotificationDestination(String name) {
        this(name, NotificationDestinationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NotificationDestination(String name, NotificationDestinationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NotificationDestination(String name, NotificationDestinationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/notificationDestination:NotificationDestination", name, args == null ? NotificationDestinationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private NotificationDestination(String name, Output<String> id, @Nullable NotificationDestinationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/notificationDestination:NotificationDestination", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NotificationDestination get(String name, Output<String> id, @Nullable NotificationDestinationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NotificationDestination(name, id, state, options);
    }
}
