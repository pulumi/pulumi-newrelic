// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.cloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GcpLinkAccountArgs extends com.pulumi.resources.ResourceArgs {

    public static final GcpLinkAccountArgs Empty = new GcpLinkAccountArgs();

    /**
     * - Account ID of the New Relic account.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<Integer> accountId;

    /**
     * @return - Account ID of the New Relic account.
     * 
     */
    public Optional<Output<Integer>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * - The name of the GCP account in New Relic.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return - The name of the GCP account in New Relic.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * - Project ID of the GCP account.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return - Project ID of the GCP account.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    private GcpLinkAccountArgs() {}

    private GcpLinkAccountArgs(GcpLinkAccountArgs $) {
        this.accountId = $.accountId;
        this.name = $.name;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GcpLinkAccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GcpLinkAccountArgs $;

        public Builder() {
            $ = new GcpLinkAccountArgs();
        }

        public Builder(GcpLinkAccountArgs defaults) {
            $ = new GcpLinkAccountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId - Account ID of the New Relic account.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<Integer> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId - Account ID of the New Relic account.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Integer accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param name - The name of the GCP account in New Relic.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name - The name of the GCP account in New Relic.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId - Project ID of the GCP account.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId - Project ID of the GCP account.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public GcpLinkAccountArgs build() {
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            return $;
        }
    }

}
