// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.plugins;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationSettingsArgs Empty = new ApplicationSettingsArgs();

    /**
     * The appex threshold for the New Relic application.
     * 
     */
    @Import(name="appApdexThreshold", required=true)
    private Output<Double> appApdexThreshold;

    /**
     * @return The appex threshold for the New Relic application.
     * 
     */
    public Output<Double> appApdexThreshold() {
        return this.appApdexThreshold;
    }

    /**
     * Enable or disable real user monitoring for the New Relic application.
     * 
     */
    @Import(name="enableRealUserMonitoring", required=true)
    private Output<Boolean> enableRealUserMonitoring;

    /**
     * @return Enable or disable real user monitoring for the New Relic application.
     * 
     */
    public Output<Boolean> enableRealUserMonitoring() {
        return this.enableRealUserMonitoring;
    }

    /**
     * The user&#39;s apdex threshold for the New Relic application.
     * 
     */
    @Import(name="endUserApdexThreshold", required=true)
    private Output<Double> endUserApdexThreshold;

    /**
     * @return The user&#39;s apdex threshold for the New Relic application.
     * 
     */
    public Output<Double> endUserApdexThreshold() {
        return this.endUserApdexThreshold;
    }

    /**
     * The name of the application in New Relic APM.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the application in New Relic APM.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private ApplicationSettingsArgs() {}

    private ApplicationSettingsArgs(ApplicationSettingsArgs $) {
        this.appApdexThreshold = $.appApdexThreshold;
        this.enableRealUserMonitoring = $.enableRealUserMonitoring;
        this.endUserApdexThreshold = $.endUserApdexThreshold;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationSettingsArgs $;

        public Builder() {
            $ = new ApplicationSettingsArgs();
        }

        public Builder(ApplicationSettingsArgs defaults) {
            $ = new ApplicationSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appApdexThreshold The appex threshold for the New Relic application.
         * 
         * @return builder
         * 
         */
        public Builder appApdexThreshold(Output<Double> appApdexThreshold) {
            $.appApdexThreshold = appApdexThreshold;
            return this;
        }

        /**
         * @param appApdexThreshold The appex threshold for the New Relic application.
         * 
         * @return builder
         * 
         */
        public Builder appApdexThreshold(Double appApdexThreshold) {
            return appApdexThreshold(Output.of(appApdexThreshold));
        }

        /**
         * @param enableRealUserMonitoring Enable or disable real user monitoring for the New Relic application.
         * 
         * @return builder
         * 
         */
        public Builder enableRealUserMonitoring(Output<Boolean> enableRealUserMonitoring) {
            $.enableRealUserMonitoring = enableRealUserMonitoring;
            return this;
        }

        /**
         * @param enableRealUserMonitoring Enable or disable real user monitoring for the New Relic application.
         * 
         * @return builder
         * 
         */
        public Builder enableRealUserMonitoring(Boolean enableRealUserMonitoring) {
            return enableRealUserMonitoring(Output.of(enableRealUserMonitoring));
        }

        /**
         * @param endUserApdexThreshold The user&#39;s apdex threshold for the New Relic application.
         * 
         * @return builder
         * 
         */
        public Builder endUserApdexThreshold(Output<Double> endUserApdexThreshold) {
            $.endUserApdexThreshold = endUserApdexThreshold;
            return this;
        }

        /**
         * @param endUserApdexThreshold The user&#39;s apdex threshold for the New Relic application.
         * 
         * @return builder
         * 
         */
        public Builder endUserApdexThreshold(Double endUserApdexThreshold) {
            return endUserApdexThreshold(Output.of(endUserApdexThreshold));
        }

        /**
         * @param name The name of the application in New Relic APM.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the application in New Relic APM.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ApplicationSettingsArgs build() {
            $.appApdexThreshold = Objects.requireNonNull($.appApdexThreshold, "expected parameter 'appApdexThreshold' to be non-null");
            $.enableRealUserMonitoring = Objects.requireNonNull($.enableRealUserMonitoring, "expected parameter 'enableRealUserMonitoring' to be non-null");
            $.endUserApdexThreshold = Objects.requireNonNull($.endUserApdexThreshold, "expected parameter 'endUserApdexThreshold' to be non-null");
            return $;
        }
    }

}
