// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.plugins;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.newrelic.plugins.inputs.ApplicationSettingsErrorCollectorArgs;
import com.pulumi.newrelic.plugins.inputs.ApplicationSettingsTransactionTracerArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationSettingsArgs Empty = new ApplicationSettingsArgs();

    /**
     * The acceptable response time limit (Apdex threshold) for the application.
     * 
     */
    @Import(name="appApdexThreshold")
    private @Nullable Output<Double> appApdexThreshold;

    /**
     * @return The acceptable response time limit (Apdex threshold) for the application.
     * 
     */
    public Optional<Output<Double>> appApdexThreshold() {
        return Optional.ofNullable(this.appApdexThreshold);
    }

    /**
     * Dummy field to support backward compatibility of previous version.should be removed with next major version.
     * 
     */
    @Import(name="enableRealUserMonitoring")
    private @Nullable Output<Boolean> enableRealUserMonitoring;

    /**
     * @return Dummy field to support backward compatibility of previous version.should be removed with next major version.
     * 
     */
    public Optional<Output<Boolean>> enableRealUserMonitoring() {
        return Optional.ofNullable(this.enableRealUserMonitoring);
    }

    /**
     * Enable or disable the collection of slowest database queries in your traces.
     * 
     */
    @Import(name="enableSlowSql")
    private @Nullable Output<Boolean> enableSlowSql;

    /**
     * @return Enable or disable the collection of slowest database queries in your traces.
     * 
     */
    public Optional<Output<Boolean>> enableSlowSql() {
        return Optional.ofNullable(this.enableSlowSql);
    }

    /**
     * Enable or disable the collection of thread profiling data.
     * 
     */
    @Import(name="enableThreadProfiler")
    private @Nullable Output<Boolean> enableThreadProfiler;

    /**
     * @return Enable or disable the collection of thread profiling data.
     * 
     */
    public Optional<Output<Boolean>> enableThreadProfiler() {
        return Optional.ofNullable(this.enableThreadProfiler);
    }

    /**
     * Dummy field to support backward compatibility of previous version.should be removed with next major version.
     * 
     */
    @Import(name="endUserApdexThreshold")
    private @Nullable Output<Double> endUserApdexThreshold;

    /**
     * @return Dummy field to support backward compatibility of previous version.should be removed with next major version.
     * 
     */
    public Optional<Output<Double>> endUserApdexThreshold() {
        return Optional.ofNullable(this.endUserApdexThreshold);
    }

    /**
     * Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
     * 
     */
    @Import(name="errorCollectors")
    private @Nullable Output<List<ApplicationSettingsErrorCollectorArgs>> errorCollectors;

    /**
     * @return Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
     * 
     */
    public Optional<Output<List<ApplicationSettingsErrorCollectorArgs>>> errorCollectors() {
        return Optional.ofNullable(this.errorCollectors);
    }

    /**
     * The GUID of the application in New Relic APM.
     * 
     */
    @Import(name="guid")
    private @Nullable Output<String> guid;

    /**
     * @return The GUID of the application in New Relic APM.
     * 
     */
    public Optional<Output<String>> guid() {
        return Optional.ofNullable(this.guid);
    }

    /**
     * A custom name or alias you can give the application in New Relic APM.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A custom name or alias you can give the application in New Relic APM.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
     * 
     */
    @Import(name="tracerType")
    private @Nullable Output<String> tracerType;

    /**
     * @return Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
     * 
     */
    public Optional<Output<String>> tracerType() {
        return Optional.ofNullable(this.tracerType);
    }

    /**
     * Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
     * 
     */
    @Import(name="transactionTracers")
    private @Nullable Output<List<ApplicationSettingsTransactionTracerArgs>> transactionTracers;

    /**
     * @return Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
     * 
     */
    public Optional<Output<List<ApplicationSettingsTransactionTracerArgs>>> transactionTracers() {
        return Optional.ofNullable(this.transactionTracers);
    }

    /**
     * Enable or disable server side monitoring for the New Relic application.
     * 
     */
    @Import(name="useServerSideConfig")
    private @Nullable Output<Boolean> useServerSideConfig;

    /**
     * @return Enable or disable server side monitoring for the New Relic application.
     * 
     */
    public Optional<Output<Boolean>> useServerSideConfig() {
        return Optional.ofNullable(this.useServerSideConfig);
    }

    private ApplicationSettingsArgs() {}

    private ApplicationSettingsArgs(ApplicationSettingsArgs $) {
        this.appApdexThreshold = $.appApdexThreshold;
        this.enableRealUserMonitoring = $.enableRealUserMonitoring;
        this.enableSlowSql = $.enableSlowSql;
        this.enableThreadProfiler = $.enableThreadProfiler;
        this.endUserApdexThreshold = $.endUserApdexThreshold;
        this.errorCollectors = $.errorCollectors;
        this.guid = $.guid;
        this.name = $.name;
        this.tracerType = $.tracerType;
        this.transactionTracers = $.transactionTracers;
        this.useServerSideConfig = $.useServerSideConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationSettingsArgs $;

        public Builder() {
            $ = new ApplicationSettingsArgs();
        }

        public Builder(ApplicationSettingsArgs defaults) {
            $ = new ApplicationSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appApdexThreshold The acceptable response time limit (Apdex threshold) for the application.
         * 
         * @return builder
         * 
         */
        public Builder appApdexThreshold(@Nullable Output<Double> appApdexThreshold) {
            $.appApdexThreshold = appApdexThreshold;
            return this;
        }

        /**
         * @param appApdexThreshold The acceptable response time limit (Apdex threshold) for the application.
         * 
         * @return builder
         * 
         */
        public Builder appApdexThreshold(Double appApdexThreshold) {
            return appApdexThreshold(Output.of(appApdexThreshold));
        }

        /**
         * @param enableRealUserMonitoring Dummy field to support backward compatibility of previous version.should be removed with next major version.
         * 
         * @return builder
         * 
         */
        public Builder enableRealUserMonitoring(@Nullable Output<Boolean> enableRealUserMonitoring) {
            $.enableRealUserMonitoring = enableRealUserMonitoring;
            return this;
        }

        /**
         * @param enableRealUserMonitoring Dummy field to support backward compatibility of previous version.should be removed with next major version.
         * 
         * @return builder
         * 
         */
        public Builder enableRealUserMonitoring(Boolean enableRealUserMonitoring) {
            return enableRealUserMonitoring(Output.of(enableRealUserMonitoring));
        }

        /**
         * @param enableSlowSql Enable or disable the collection of slowest database queries in your traces.
         * 
         * @return builder
         * 
         */
        public Builder enableSlowSql(@Nullable Output<Boolean> enableSlowSql) {
            $.enableSlowSql = enableSlowSql;
            return this;
        }

        /**
         * @param enableSlowSql Enable or disable the collection of slowest database queries in your traces.
         * 
         * @return builder
         * 
         */
        public Builder enableSlowSql(Boolean enableSlowSql) {
            return enableSlowSql(Output.of(enableSlowSql));
        }

        /**
         * @param enableThreadProfiler Enable or disable the collection of thread profiling data.
         * 
         * @return builder
         * 
         */
        public Builder enableThreadProfiler(@Nullable Output<Boolean> enableThreadProfiler) {
            $.enableThreadProfiler = enableThreadProfiler;
            return this;
        }

        /**
         * @param enableThreadProfiler Enable or disable the collection of thread profiling data.
         * 
         * @return builder
         * 
         */
        public Builder enableThreadProfiler(Boolean enableThreadProfiler) {
            return enableThreadProfiler(Output.of(enableThreadProfiler));
        }

        /**
         * @param endUserApdexThreshold Dummy field to support backward compatibility of previous version.should be removed with next major version.
         * 
         * @return builder
         * 
         */
        public Builder endUserApdexThreshold(@Nullable Output<Double> endUserApdexThreshold) {
            $.endUserApdexThreshold = endUserApdexThreshold;
            return this;
        }

        /**
         * @param endUserApdexThreshold Dummy field to support backward compatibility of previous version.should be removed with next major version.
         * 
         * @return builder
         * 
         */
        public Builder endUserApdexThreshold(Double endUserApdexThreshold) {
            return endUserApdexThreshold(Output.of(endUserApdexThreshold));
        }

        /**
         * @param errorCollectors Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
         * 
         * @return builder
         * 
         */
        public Builder errorCollectors(@Nullable Output<List<ApplicationSettingsErrorCollectorArgs>> errorCollectors) {
            $.errorCollectors = errorCollectors;
            return this;
        }

        /**
         * @param errorCollectors Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
         * 
         * @return builder
         * 
         */
        public Builder errorCollectors(List<ApplicationSettingsErrorCollectorArgs> errorCollectors) {
            return errorCollectors(Output.of(errorCollectors));
        }

        /**
         * @param errorCollectors Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
         * 
         * @return builder
         * 
         */
        public Builder errorCollectors(ApplicationSettingsErrorCollectorArgs... errorCollectors) {
            return errorCollectors(List.of(errorCollectors));
        }

        /**
         * @param guid The GUID of the application in New Relic APM.
         * 
         * @return builder
         * 
         */
        public Builder guid(@Nullable Output<String> guid) {
            $.guid = guid;
            return this;
        }

        /**
         * @param guid The GUID of the application in New Relic APM.
         * 
         * @return builder
         * 
         */
        public Builder guid(String guid) {
            return guid(Output.of(guid));
        }

        /**
         * @param name A custom name or alias you can give the application in New Relic APM.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name or alias you can give the application in New Relic APM.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tracerType Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
         * 
         * @return builder
         * 
         */
        public Builder tracerType(@Nullable Output<String> tracerType) {
            $.tracerType = tracerType;
            return this;
        }

        /**
         * @param tracerType Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
         * 
         * @return builder
         * 
         */
        public Builder tracerType(String tracerType) {
            return tracerType(Output.of(tracerType));
        }

        /**
         * @param transactionTracers Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
         * 
         * @return builder
         * 
         */
        public Builder transactionTracers(@Nullable Output<List<ApplicationSettingsTransactionTracerArgs>> transactionTracers) {
            $.transactionTracers = transactionTracers;
            return this;
        }

        /**
         * @param transactionTracers Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
         * 
         * @return builder
         * 
         */
        public Builder transactionTracers(List<ApplicationSettingsTransactionTracerArgs> transactionTracers) {
            return transactionTracers(Output.of(transactionTracers));
        }

        /**
         * @param transactionTracers Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
         * 
         * @return builder
         * 
         */
        public Builder transactionTracers(ApplicationSettingsTransactionTracerArgs... transactionTracers) {
            return transactionTracers(List.of(transactionTracers));
        }

        /**
         * @param useServerSideConfig Enable or disable server side monitoring for the New Relic application.
         * 
         * @return builder
         * 
         */
        public Builder useServerSideConfig(@Nullable Output<Boolean> useServerSideConfig) {
            $.useServerSideConfig = useServerSideConfig;
            return this;
        }

        /**
         * @param useServerSideConfig Enable or disable server side monitoring for the New Relic application.
         * 
         * @return builder
         * 
         */
        public Builder useServerSideConfig(Boolean useServerSideConfig) {
            return useServerSideConfig(Output.of(useServerSideConfig));
        }

        public ApplicationSettingsArgs build() {
            return $;
        }
    }

}
