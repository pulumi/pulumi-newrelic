// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.newrelic.outputs.DashboardWidgetCompareWith;
import com.pulumi.newrelic.outputs.DashboardWidgetMetric;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardWidget {
    private @Nullable Integer accountId;
    private Integer column;
    private @Nullable List<DashboardWidgetCompareWith> compareWiths;
    private @Nullable Integer drilldownDashboardId;
    private @Nullable Integer duration;
    private @Nullable Integer endTime;
    private @Nullable List<Integer> entityIds;
    private @Nullable String facet;
    private @Nullable Integer height;
    private @Nullable Integer limit;
    private @Nullable List<DashboardWidgetMetric> metrics;
    private @Nullable String notes;
    private @Nullable String nrql;
    private @Nullable String orderBy;
    private @Nullable String rawMetricName;
    private Integer row;
    private @Nullable String source;
    private @Nullable Double thresholdRed;
    private @Nullable Double thresholdYellow;
    private String title;
    private String visualization;
    private @Nullable Integer widgetId;
    private @Nullable Integer width;

    private DashboardWidget() {}
    public Optional<Integer> accountId() {
        return Optional.ofNullable(this.accountId);
    }
    public Integer column() {
        return this.column;
    }
    public List<DashboardWidgetCompareWith> compareWiths() {
        return this.compareWiths == null ? List.of() : this.compareWiths;
    }
    public Optional<Integer> drilldownDashboardId() {
        return Optional.ofNullable(this.drilldownDashboardId);
    }
    public Optional<Integer> duration() {
        return Optional.ofNullable(this.duration);
    }
    public Optional<Integer> endTime() {
        return Optional.ofNullable(this.endTime);
    }
    public List<Integer> entityIds() {
        return this.entityIds == null ? List.of() : this.entityIds;
    }
    public Optional<String> facet() {
        return Optional.ofNullable(this.facet);
    }
    public Optional<Integer> height() {
        return Optional.ofNullable(this.height);
    }
    public Optional<Integer> limit() {
        return Optional.ofNullable(this.limit);
    }
    public List<DashboardWidgetMetric> metrics() {
        return this.metrics == null ? List.of() : this.metrics;
    }
    public Optional<String> notes() {
        return Optional.ofNullable(this.notes);
    }
    public Optional<String> nrql() {
        return Optional.ofNullable(this.nrql);
    }
    public Optional<String> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }
    public Optional<String> rawMetricName() {
        return Optional.ofNullable(this.rawMetricName);
    }
    public Integer row() {
        return this.row;
    }
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }
    public Optional<Double> thresholdRed() {
        return Optional.ofNullable(this.thresholdRed);
    }
    public Optional<Double> thresholdYellow() {
        return Optional.ofNullable(this.thresholdYellow);
    }
    public String title() {
        return this.title;
    }
    public String visualization() {
        return this.visualization;
    }
    public Optional<Integer> widgetId() {
        return Optional.ofNullable(this.widgetId);
    }
    public Optional<Integer> width() {
        return Optional.ofNullable(this.width);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardWidget defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer accountId;
        private Integer column;
        private @Nullable List<DashboardWidgetCompareWith> compareWiths;
        private @Nullable Integer drilldownDashboardId;
        private @Nullable Integer duration;
        private @Nullable Integer endTime;
        private @Nullable List<Integer> entityIds;
        private @Nullable String facet;
        private @Nullable Integer height;
        private @Nullable Integer limit;
        private @Nullable List<DashboardWidgetMetric> metrics;
        private @Nullable String notes;
        private @Nullable String nrql;
        private @Nullable String orderBy;
        private @Nullable String rawMetricName;
        private Integer row;
        private @Nullable String source;
        private @Nullable Double thresholdRed;
        private @Nullable Double thresholdYellow;
        private String title;
        private String visualization;
        private @Nullable Integer widgetId;
        private @Nullable Integer width;
        public Builder() {}
        public Builder(DashboardWidget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.column = defaults.column;
    	      this.compareWiths = defaults.compareWiths;
    	      this.drilldownDashboardId = defaults.drilldownDashboardId;
    	      this.duration = defaults.duration;
    	      this.endTime = defaults.endTime;
    	      this.entityIds = defaults.entityIds;
    	      this.facet = defaults.facet;
    	      this.height = defaults.height;
    	      this.limit = defaults.limit;
    	      this.metrics = defaults.metrics;
    	      this.notes = defaults.notes;
    	      this.nrql = defaults.nrql;
    	      this.orderBy = defaults.orderBy;
    	      this.rawMetricName = defaults.rawMetricName;
    	      this.row = defaults.row;
    	      this.source = defaults.source;
    	      this.thresholdRed = defaults.thresholdRed;
    	      this.thresholdYellow = defaults.thresholdYellow;
    	      this.title = defaults.title;
    	      this.visualization = defaults.visualization;
    	      this.widgetId = defaults.widgetId;
    	      this.width = defaults.width;
        }

        @CustomType.Setter
        public Builder accountId(@Nullable Integer accountId) {
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder column(Integer column) {
            this.column = Objects.requireNonNull(column);
            return this;
        }
        @CustomType.Setter
        public Builder compareWiths(@Nullable List<DashboardWidgetCompareWith> compareWiths) {
            this.compareWiths = compareWiths;
            return this;
        }
        public Builder compareWiths(DashboardWidgetCompareWith... compareWiths) {
            return compareWiths(List.of(compareWiths));
        }
        @CustomType.Setter
        public Builder drilldownDashboardId(@Nullable Integer drilldownDashboardId) {
            this.drilldownDashboardId = drilldownDashboardId;
            return this;
        }
        @CustomType.Setter
        public Builder duration(@Nullable Integer duration) {
            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder endTime(@Nullable Integer endTime) {
            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder entityIds(@Nullable List<Integer> entityIds) {
            this.entityIds = entityIds;
            return this;
        }
        public Builder entityIds(Integer... entityIds) {
            return entityIds(List.of(entityIds));
        }
        @CustomType.Setter
        public Builder facet(@Nullable String facet) {
            this.facet = facet;
            return this;
        }
        @CustomType.Setter
        public Builder height(@Nullable Integer height) {
            this.height = height;
            return this;
        }
        @CustomType.Setter
        public Builder limit(@Nullable Integer limit) {
            this.limit = limit;
            return this;
        }
        @CustomType.Setter
        public Builder metrics(@Nullable List<DashboardWidgetMetric> metrics) {
            this.metrics = metrics;
            return this;
        }
        public Builder metrics(DashboardWidgetMetric... metrics) {
            return metrics(List.of(metrics));
        }
        @CustomType.Setter
        public Builder notes(@Nullable String notes) {
            this.notes = notes;
            return this;
        }
        @CustomType.Setter
        public Builder nrql(@Nullable String nrql) {
            this.nrql = nrql;
            return this;
        }
        @CustomType.Setter
        public Builder orderBy(@Nullable String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        @CustomType.Setter
        public Builder rawMetricName(@Nullable String rawMetricName) {
            this.rawMetricName = rawMetricName;
            return this;
        }
        @CustomType.Setter
        public Builder row(Integer row) {
            this.row = Objects.requireNonNull(row);
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable String source) {
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder thresholdRed(@Nullable Double thresholdRed) {
            this.thresholdRed = thresholdRed;
            return this;
        }
        @CustomType.Setter
        public Builder thresholdYellow(@Nullable Double thresholdYellow) {
            this.thresholdYellow = thresholdYellow;
            return this;
        }
        @CustomType.Setter
        public Builder title(String title) {
            this.title = Objects.requireNonNull(title);
            return this;
        }
        @CustomType.Setter
        public Builder visualization(String visualization) {
            this.visualization = Objects.requireNonNull(visualization);
            return this;
        }
        @CustomType.Setter
        public Builder widgetId(@Nullable Integer widgetId) {
            this.widgetId = widgetId;
            return this;
        }
        @CustomType.Setter
        public Builder width(@Nullable Integer width) {
            this.width = width;
            return this;
        }
        public DashboardWidget build() {
            final var o = new DashboardWidget();
            o.accountId = accountId;
            o.column = column;
            o.compareWiths = compareWiths;
            o.drilldownDashboardId = drilldownDashboardId;
            o.duration = duration;
            o.endTime = endTime;
            o.entityIds = entityIds;
            o.facet = facet;
            o.height = height;
            o.limit = limit;
            o.metrics = metrics;
            o.notes = notes;
            o.nrql = nrql;
            o.orderBy = orderBy;
            o.rawMetricName = rawMetricName;
            o.row = row;
            o.source = source;
            o.thresholdRed = thresholdRed;
            o.thresholdYellow = thresholdYellow;
            o.title = title;
            o.visualization = visualization;
            o.widgetId = widgetId;
            o.width = width;
            return o;
        }
    }
}
