// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.plugins;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.plugins.ApplicationSettingsArgs;
import com.pulumi.newrelic.plugins.inputs.ApplicationSettingsState;
import com.pulumi.newrelic.plugins.outputs.ApplicationSettingsErrorCollector;
import com.pulumi.newrelic.plugins.outputs.ApplicationSettingsTransactionTracer;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * Applications can be imported using notation `application_guid`, e.g.
 * 
 * ```sh
 * $ pulumi import newrelic:plugins/applicationSettings:ApplicationSettings main Mzk1NzUyNHQVRJNTxBUE18QVBQTElDc4ODU1MzYx
 * ```
 * 
 */
@ResourceType(type="newrelic:plugins/applicationSettings:ApplicationSettings")
public class ApplicationSettings extends com.pulumi.resources.CustomResource {
    /**
     * The acceptable response time limit (Apdex threshold) for the application.
     * 
     */
    @Export(name="appApdexThreshold", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> appApdexThreshold;

    /**
     * @return The acceptable response time limit (Apdex threshold) for the application.
     * 
     */
    public Output<Optional<Double>> appApdexThreshold() {
        return Codegen.optional(this.appApdexThreshold);
    }
    /**
     * Dummy field to support backward compatibility of previous version.should be removed with next major version.
     * 
     */
    @Export(name="enableRealUserMonitoring", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableRealUserMonitoring;

    /**
     * @return Dummy field to support backward compatibility of previous version.should be removed with next major version.
     * 
     */
    public Output<Optional<Boolean>> enableRealUserMonitoring() {
        return Codegen.optional(this.enableRealUserMonitoring);
    }
    /**
     * Enable or disable the collection of slowest database queries in your traces.
     * 
     */
    @Export(name="enableSlowSql", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableSlowSql;

    /**
     * @return Enable or disable the collection of slowest database queries in your traces.
     * 
     */
    public Output<Optional<Boolean>> enableSlowSql() {
        return Codegen.optional(this.enableSlowSql);
    }
    /**
     * Enable or disable the collection of thread profiling data.
     * 
     */
    @Export(name="enableThreadProfiler", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableThreadProfiler;

    /**
     * @return Enable or disable the collection of thread profiling data.
     * 
     */
    public Output<Optional<Boolean>> enableThreadProfiler() {
        return Codegen.optional(this.enableThreadProfiler);
    }
    /**
     * Dummy field to support backward compatibility of previous version.should be removed with next major version.
     * 
     */
    @Export(name="endUserApdexThreshold", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> endUserApdexThreshold;

    /**
     * @return Dummy field to support backward compatibility of previous version.should be removed with next major version.
     * 
     */
    public Output<Optional<Double>> endUserApdexThreshold() {
        return Codegen.optional(this.endUserApdexThreshold);
    }
    /**
     * Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
     * 
     */
    @Export(name="errorCollectors", refs={List.class,ApplicationSettingsErrorCollector.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ApplicationSettingsErrorCollector>> errorCollectors;

    /**
     * @return Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
     * 
     */
    public Output<Optional<List<ApplicationSettingsErrorCollector>>> errorCollectors() {
        return Codegen.optional(this.errorCollectors);
    }
    /**
     * The GUID of the application in New Relic APM.
     * 
     * &gt; **NOTE:** While the attribute `guid` is not mandatory at a schema level, it is recommended to use `guid` over `name`, as support for using `name` with this resource shall eventually be discontinued. Please see the note under `name` for more details.
     * 
     */
    @Export(name="guid", refs={String.class}, tree="[0]")
    private Output<String> guid;

    /**
     * @return The GUID of the application in New Relic APM.
     * 
     * &gt; **NOTE:** While the attribute `guid` is not mandatory at a schema level, it is recommended to use `guid` over `name`, as support for using `name` with this resource shall eventually be discontinued. Please see the note under `name` for more details.
     * 
     */
    public Output<String> guid() {
        return this.guid;
    }
    @Export(name="isImported", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isImported;

    public Output<Boolean> isImported() {
        return this.isImported;
    }
    /**
     * The name of the application in New Relic.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the application in New Relic.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
     * 
     */
    @Export(name="tracerType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tracerType;

    /**
     * @return Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
     * 
     */
    public Output<Optional<String>> tracerType() {
        return Codegen.optional(this.tracerType);
    }
    /**
     * Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
     * 
     */
    @Export(name="transactionTracers", refs={List.class,ApplicationSettingsTransactionTracer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ApplicationSettingsTransactionTracer>> transactionTracers;

    /**
     * @return Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
     * 
     */
    public Output<Optional<List<ApplicationSettingsTransactionTracer>>> transactionTracers() {
        return Codegen.optional(this.transactionTracers);
    }
    /**
     * Enable or disable server side monitoring for the New Relic application.
     * 
     */
    @Export(name="useServerSideConfig", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useServerSideConfig;

    /**
     * @return Enable or disable server side monitoring for the New Relic application.
     * 
     */
    public Output<Optional<Boolean>> useServerSideConfig() {
        return Codegen.optional(this.useServerSideConfig);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ApplicationSettings(java.lang.String name) {
        this(name, ApplicationSettingsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ApplicationSettings(java.lang.String name, @Nullable ApplicationSettingsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ApplicationSettings(java.lang.String name, @Nullable ApplicationSettingsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:plugins/applicationSettings:ApplicationSettings", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ApplicationSettings(java.lang.String name, Output<java.lang.String> id, @Nullable ApplicationSettingsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:plugins/applicationSettings:ApplicationSettings", name, state, makeResourceOptions(options, id), false);
    }

    private static ApplicationSettingsArgs makeArgs(@Nullable ApplicationSettingsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ApplicationSettingsArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ApplicationSettings get(java.lang.String name, Output<java.lang.String> id, @Nullable ApplicationSettingsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ApplicationSettings(name, id, state, options);
    }
}
