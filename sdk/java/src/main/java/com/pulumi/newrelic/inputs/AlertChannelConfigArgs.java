// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertChannelConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertChannelConfigArgs Empty = new AlertChannelConfigArgs();

    /**
     * The API key for integrating with OpsGenie.
     * 
     */
    @Import(name="apiKey")
    private @Nullable Output<String> apiKey;

    /**
     * @return The API key for integrating with OpsGenie.
     * 
     */
    public Optional<Output<String>> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }

    /**
     * Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
     * 
     */
    @Import(name="authPassword")
    private @Nullable Output<String> authPassword;

    /**
     * @return Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
     * 
     */
    public Optional<Output<String>> authPassword() {
        return Optional.ofNullable(this.authPassword);
    }

    /**
     * Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
     * 
     */
    @Import(name="authType")
    private @Nullable Output<String> authType;

    /**
     * @return Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
     * 
     */
    public Optional<Output<String>> authType() {
        return Optional.ofNullable(this.authType);
    }

    /**
     * Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
     * 
     */
    @Import(name="authUsername")
    private @Nullable Output<String> authUsername;

    /**
     * @return Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
     * 
     */
    public Optional<Output<String>> authUsername() {
        return Optional.ofNullable(this.authUsername);
    }

    /**
     * The base URL of the webhook destination.
     * 
     */
    @Import(name="baseUrl")
    private @Nullable Output<String> baseUrl;

    /**
     * @return The base URL of the webhook destination.
     * 
     */
    public Optional<Output<String>> baseUrl() {
        return Optional.ofNullable(this.baseUrl);
    }

    /**
     * The Slack channel to send notifications to.
     * 
     */
    @Import(name="channel")
    private @Nullable Output<String> channel;

    /**
     * @return The Slack channel to send notifications to.
     * 
     */
    public Optional<Output<String>> channel() {
        return Optional.ofNullable(this.channel);
    }

    /**
     * A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<Map<String,String>> headers;

    /**
     * @return A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
     * 
     */
    public Optional<Output<Map<String,String>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
     * 
     */
    @Import(name="headersString")
    private @Nullable Output<String> headersString;

    /**
     * @return Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
     * 
     */
    public Optional<Output<String>> headersString() {
        return Optional.ofNullable(this.headersString);
    }

    /**
     * `true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
     * 
     */
    @Import(name="includeJsonAttachment")
    private @Nullable Output<String> includeJsonAttachment;

    /**
     * @return `true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
     * 
     */
    public Optional<Output<String>> includeJsonAttachment() {
        return Optional.ofNullable(this.includeJsonAttachment);
    }

    /**
     * The key for integrating with VictorOps.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The key for integrating with VictorOps.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * A map of key/value pairs that represents the webhook payload.  Must provide `payload_type` if setting this argument.
     * 
     */
    @Import(name="payload")
    private @Nullable Output<Map<String,String>> payload;

    /**
     * @return A map of key/value pairs that represents the webhook payload.  Must provide `payload_type` if setting this argument.
     * 
     */
    public Optional<Output<Map<String,String>>> payload() {
        return Optional.ofNullable(this.payload);
    }

    /**
     * Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
     * 
     */
    @Import(name="payloadString")
    private @Nullable Output<String> payloadString;

    /**
     * @return Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
     * 
     */
    public Optional<Output<String>> payloadString() {
        return Optional.ofNullable(this.payloadString);
    }

    /**
     * Can either be `application/json` or `application/x-www-form-urlencoded`. The `payload_type` argument is _required_ if `payload` is set.
     * 
     */
    @Import(name="payloadType")
    private @Nullable Output<String> payloadType;

    /**
     * @return Can either be `application/json` or `application/x-www-form-urlencoded`. The `payload_type` argument is _required_ if `payload` is set.
     * 
     */
    public Optional<Output<String>> payloadType() {
        return Optional.ofNullable(this.payloadType);
    }

    /**
     * Comma delimited list of email addresses.
     * 
     */
    @Import(name="recipients")
    private @Nullable Output<String> recipients;

    /**
     * @return Comma delimited list of email addresses.
     * 
     */
    public Optional<Output<String>> recipients() {
        return Optional.ofNullable(this.recipients);
    }

    /**
     * The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The route key for integrating with VictorOps.
     * 
     */
    @Import(name="routeKey")
    private @Nullable Output<String> routeKey;

    /**
     * @return The route key for integrating with VictorOps.
     * 
     */
    public Optional<Output<String>> routeKey() {
        return Optional.ofNullable(this.routeKey);
    }

    /**
     * Specifies the service key for integrating with Pagerduty.
     * 
     */
    @Import(name="serviceKey")
    private @Nullable Output<String> serviceKey;

    /**
     * @return Specifies the service key for integrating with Pagerduty.
     * 
     */
    public Optional<Output<String>> serviceKey() {
        return Optional.ofNullable(this.serviceKey);
    }

    /**
     * A set of tags for targeting notifications. Multiple values are comma separated.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<String> tags;

    /**
     * @return A set of tags for targeting notifications. Multiple values are comma separated.
     * 
     */
    public Optional<Output<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A set of teams for targeting notifications. Multiple values are comma separated.
     * 
     */
    @Import(name="teams")
    private @Nullable Output<String> teams;

    /**
     * @return A set of teams for targeting notifications. Multiple values are comma separated.
     * 
     */
    public Optional<Output<String>> teams() {
        return Optional.ofNullable(this.teams);
    }

    /**
     * [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    @Import(name="userId")
    private @Nullable Output<String> userId;

    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private AlertChannelConfigArgs() {}

    private AlertChannelConfigArgs(AlertChannelConfigArgs $) {
        this.apiKey = $.apiKey;
        this.authPassword = $.authPassword;
        this.authType = $.authType;
        this.authUsername = $.authUsername;
        this.baseUrl = $.baseUrl;
        this.channel = $.channel;
        this.headers = $.headers;
        this.headersString = $.headersString;
        this.includeJsonAttachment = $.includeJsonAttachment;
        this.key = $.key;
        this.payload = $.payload;
        this.payloadString = $.payloadString;
        this.payloadType = $.payloadType;
        this.recipients = $.recipients;
        this.region = $.region;
        this.routeKey = $.routeKey;
        this.serviceKey = $.serviceKey;
        this.tags = $.tags;
        this.teams = $.teams;
        this.url = $.url;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertChannelConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertChannelConfigArgs $;

        public Builder() {
            $ = new AlertChannelConfigArgs();
        }

        public Builder(AlertChannelConfigArgs defaults) {
            $ = new AlertChannelConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKey The API key for integrating with OpsGenie.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(@Nullable Output<String> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param apiKey The API key for integrating with OpsGenie.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(String apiKey) {
            return apiKey(Output.of(apiKey));
        }

        /**
         * @param authPassword Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
         * 
         * @return builder
         * 
         */
        public Builder authPassword(@Nullable Output<String> authPassword) {
            $.authPassword = authPassword;
            return this;
        }

        /**
         * @param authPassword Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
         * 
         * @return builder
         * 
         */
        public Builder authPassword(String authPassword) {
            return authPassword(Output.of(authPassword));
        }

        /**
         * @param authType Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
         * 
         * @return builder
         * 
         */
        public Builder authType(@Nullable Output<String> authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authType Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        /**
         * @param authUsername Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
         * 
         * @return builder
         * 
         */
        public Builder authUsername(@Nullable Output<String> authUsername) {
            $.authUsername = authUsername;
            return this;
        }

        /**
         * @param authUsername Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
         * 
         * @return builder
         * 
         */
        public Builder authUsername(String authUsername) {
            return authUsername(Output.of(authUsername));
        }

        /**
         * @param baseUrl The base URL of the webhook destination.
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(@Nullable Output<String> baseUrl) {
            $.baseUrl = baseUrl;
            return this;
        }

        /**
         * @param baseUrl The base URL of the webhook destination.
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(String baseUrl) {
            return baseUrl(Output.of(baseUrl));
        }

        /**
         * @param channel The Slack channel to send notifications to.
         * 
         * @return builder
         * 
         */
        public Builder channel(@Nullable Output<String> channel) {
            $.channel = channel;
            return this;
        }

        /**
         * @param channel The Slack channel to send notifications to.
         * 
         * @return builder
         * 
         */
        public Builder channel(String channel) {
            return channel(Output.of(channel));
        }

        /**
         * @param headers A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<Map<String,String>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
         * 
         * @return builder
         * 
         */
        public Builder headers(Map<String,String> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headersString Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
         * 
         * @return builder
         * 
         */
        public Builder headersString(@Nullable Output<String> headersString) {
            $.headersString = headersString;
            return this;
        }

        /**
         * @param headersString Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
         * 
         * @return builder
         * 
         */
        public Builder headersString(String headersString) {
            return headersString(Output.of(headersString));
        }

        /**
         * @param includeJsonAttachment `true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
         * 
         * @return builder
         * 
         */
        public Builder includeJsonAttachment(@Nullable Output<String> includeJsonAttachment) {
            $.includeJsonAttachment = includeJsonAttachment;
            return this;
        }

        /**
         * @param includeJsonAttachment `true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
         * 
         * @return builder
         * 
         */
        public Builder includeJsonAttachment(String includeJsonAttachment) {
            return includeJsonAttachment(Output.of(includeJsonAttachment));
        }

        /**
         * @param key The key for integrating with VictorOps.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The key for integrating with VictorOps.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param payload A map of key/value pairs that represents the webhook payload.  Must provide `payload_type` if setting this argument.
         * 
         * @return builder
         * 
         */
        public Builder payload(@Nullable Output<Map<String,String>> payload) {
            $.payload = payload;
            return this;
        }

        /**
         * @param payload A map of key/value pairs that represents the webhook payload.  Must provide `payload_type` if setting this argument.
         * 
         * @return builder
         * 
         */
        public Builder payload(Map<String,String> payload) {
            return payload(Output.of(payload));
        }

        /**
         * @param payloadString Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
         * 
         * @return builder
         * 
         */
        public Builder payloadString(@Nullable Output<String> payloadString) {
            $.payloadString = payloadString;
            return this;
        }

        /**
         * @param payloadString Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
         * 
         * @return builder
         * 
         */
        public Builder payloadString(String payloadString) {
            return payloadString(Output.of(payloadString));
        }

        /**
         * @param payloadType Can either be `application/json` or `application/x-www-form-urlencoded`. The `payload_type` argument is _required_ if `payload` is set.
         * 
         * @return builder
         * 
         */
        public Builder payloadType(@Nullable Output<String> payloadType) {
            $.payloadType = payloadType;
            return this;
        }

        /**
         * @param payloadType Can either be `application/json` or `application/x-www-form-urlencoded`. The `payload_type` argument is _required_ if `payload` is set.
         * 
         * @return builder
         * 
         */
        public Builder payloadType(String payloadType) {
            return payloadType(Output.of(payloadType));
        }

        /**
         * @param recipients Comma delimited list of email addresses.
         * 
         * @return builder
         * 
         */
        public Builder recipients(@Nullable Output<String> recipients) {
            $.recipients = recipients;
            return this;
        }

        /**
         * @param recipients Comma delimited list of email addresses.
         * 
         * @return builder
         * 
         */
        public Builder recipients(String recipients) {
            return recipients(Output.of(recipients));
        }

        /**
         * @param region The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param routeKey The route key for integrating with VictorOps.
         * 
         * @return builder
         * 
         */
        public Builder routeKey(@Nullable Output<String> routeKey) {
            $.routeKey = routeKey;
            return this;
        }

        /**
         * @param routeKey The route key for integrating with VictorOps.
         * 
         * @return builder
         * 
         */
        public Builder routeKey(String routeKey) {
            return routeKey(Output.of(routeKey));
        }

        /**
         * @param serviceKey Specifies the service key for integrating with Pagerduty.
         * 
         * @return builder
         * 
         */
        public Builder serviceKey(@Nullable Output<String> serviceKey) {
            $.serviceKey = serviceKey;
            return this;
        }

        /**
         * @param serviceKey Specifies the service key for integrating with Pagerduty.
         * 
         * @return builder
         * 
         */
        public Builder serviceKey(String serviceKey) {
            return serviceKey(Output.of(serviceKey));
        }

        /**
         * @param tags A set of tags for targeting notifications. Multiple values are comma separated.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A set of tags for targeting notifications. Multiple values are comma separated.
         * 
         * @return builder
         * 
         */
        public Builder tags(String tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param teams A set of teams for targeting notifications. Multiple values are comma separated.
         * 
         * @return builder
         * 
         */
        public Builder teams(@Nullable Output<String> teams) {
            $.teams = teams;
            return this;
        }

        /**
         * @param teams A set of teams for targeting notifications. Multiple values are comma separated.
         * 
         * @return builder
         * 
         */
        public Builder teams(String teams) {
            return teams(Output.of(teams));
        }

        /**
         * @param url [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public AlertChannelConfigArgs build() {
            return $;
        }
    }

}
