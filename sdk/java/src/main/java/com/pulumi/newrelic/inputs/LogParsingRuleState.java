// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogParsingRuleState extends com.pulumi.resources.ResourceArgs {

    public static final LogParsingRuleState Empty = new LogParsingRuleState();

    /**
     * The account id associated with the obfuscation rule.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account id associated with the obfuscation rule.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.
     * 
     */
    @Import(name="attribute")
    private @Nullable Output<String> attribute;

    /**
     * @return The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.
     * 
     */
    public Optional<Output<String>> attribute() {
        return Optional.ofNullable(this.attribute);
    }

    /**
     * Whether or not this rule is deleted.
     * 
     */
    @Import(name="deleted")
    private @Nullable Output<Boolean> deleted;

    /**
     * @return Whether or not this rule is deleted.
     * 
     */
    public Optional<Output<Boolean>> deleted() {
        return Optional.ofNullable(this.deleted);
    }

    /**
     * Whether the rule should be applied or not to incoming data.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the rule should be applied or not to incoming data.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The Grok of what to parse.
     * 
     */
    @Import(name="grok")
    private @Nullable Output<String> grok;

    /**
     * @return The Grok of what to parse.
     * 
     */
    public Optional<Output<String>> grok() {
        return Optional.ofNullable(this.grok);
    }

    /**
     * The Lucene to match events to the parsing rule.
     * 
     */
    @Import(name="lucene")
    private @Nullable Output<String> lucene;

    /**
     * @return The Lucene to match events to the parsing rule.
     * 
     */
    public Optional<Output<String>> lucene() {
        return Optional.ofNullable(this.lucene);
    }

    /**
     * Whether the Grok pattern matched.
     * 
     */
    @Import(name="matched")
    private @Nullable Output<Boolean> matched;

    /**
     * @return Whether the Grok pattern matched.
     * 
     */
    public Optional<Output<Boolean>> matched() {
        return Optional.ofNullable(this.matched);
    }

    /**
     * Name of rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The NRQL to match events to the parsing rule.
     * 
     */
    @Import(name="nrql")
    private @Nullable Output<String> nrql;

    /**
     * @return The NRQL to match events to the parsing rule.
     * 
     */
    public Optional<Output<String>> nrql() {
        return Optional.ofNullable(this.nrql);
    }

    private LogParsingRuleState() {}

    private LogParsingRuleState(LogParsingRuleState $) {
        this.accountId = $.accountId;
        this.attribute = $.attribute;
        this.deleted = $.deleted;
        this.enabled = $.enabled;
        this.grok = $.grok;
        this.lucene = $.lucene;
        this.matched = $.matched;
        this.name = $.name;
        this.nrql = $.nrql;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogParsingRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogParsingRuleState $;

        public Builder() {
            $ = new LogParsingRuleState();
        }

        public Builder(LogParsingRuleState defaults) {
            $ = new LogParsingRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account id associated with the obfuscation rule.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account id associated with the obfuscation rule.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param attribute The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.
         * 
         * @return builder
         * 
         */
        public Builder attribute(@Nullable Output<String> attribute) {
            $.attribute = attribute;
            return this;
        }

        /**
         * @param attribute The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.
         * 
         * @return builder
         * 
         */
        public Builder attribute(String attribute) {
            return attribute(Output.of(attribute));
        }

        /**
         * @param deleted Whether or not this rule is deleted.
         * 
         * @return builder
         * 
         */
        public Builder deleted(@Nullable Output<Boolean> deleted) {
            $.deleted = deleted;
            return this;
        }

        /**
         * @param deleted Whether or not this rule is deleted.
         * 
         * @return builder
         * 
         */
        public Builder deleted(Boolean deleted) {
            return deleted(Output.of(deleted));
        }

        /**
         * @param enabled Whether the rule should be applied or not to incoming data.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the rule should be applied or not to incoming data.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param grok The Grok of what to parse.
         * 
         * @return builder
         * 
         */
        public Builder grok(@Nullable Output<String> grok) {
            $.grok = grok;
            return this;
        }

        /**
         * @param grok The Grok of what to parse.
         * 
         * @return builder
         * 
         */
        public Builder grok(String grok) {
            return grok(Output.of(grok));
        }

        /**
         * @param lucene The Lucene to match events to the parsing rule.
         * 
         * @return builder
         * 
         */
        public Builder lucene(@Nullable Output<String> lucene) {
            $.lucene = lucene;
            return this;
        }

        /**
         * @param lucene The Lucene to match events to the parsing rule.
         * 
         * @return builder
         * 
         */
        public Builder lucene(String lucene) {
            return lucene(Output.of(lucene));
        }

        /**
         * @param matched Whether the Grok pattern matched.
         * 
         * @return builder
         * 
         */
        public Builder matched(@Nullable Output<Boolean> matched) {
            $.matched = matched;
            return this;
        }

        /**
         * @param matched Whether the Grok pattern matched.
         * 
         * @return builder
         * 
         */
        public Builder matched(Boolean matched) {
            return matched(Output.of(matched));
        }

        /**
         * @param name Name of rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nrql The NRQL to match events to the parsing rule.
         * 
         * @return builder
         * 
         */
        public Builder nrql(@Nullable Output<String> nrql) {
            $.nrql = nrql;
            return this;
        }

        /**
         * @param nrql The NRQL to match events to the parsing rule.
         * 
         * @return builder
         * 
         */
        public Builder nrql(String nrql) {
            return nrql(Output.of(nrql));
        }

        public LogParsingRuleState build() {
            return $;
        }
    }

}
