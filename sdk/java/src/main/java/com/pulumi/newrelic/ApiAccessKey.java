// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.ApiAccessKeyArgs;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.inputs.ApiAccessKeyState;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * Existing API access keys can be imported using a composite ID of `&lt;api_access_key_id&gt;:&lt;key_type&gt;`, where `&lt;key_type&gt;` is either `INGEST` or `USER`. Refer to the considerations listed in the Important Considerations section above regarding limitations on importing the actual key value.
 * 
 * For example:
 * 
 * ```sh
 * $ pulumi import newrelic:index/apiAccessKey:ApiAccessKey foobar &#34;131313133A331313130B5F13DF01313FDB13B13133EE5E133D13EAAB3A3C13D3:INGEST&#34;
 * ```
 * 
 * For customers using Terraform v1.5 and above, it is recommended to use the `import {}` block in your Terraform configuration. This allows Terraform to generate the resource configuration automatically during the import process by running a `pulumi preview -generate-config-out=&lt;filename&gt;.tf`, reducing manual effort and ensuring accuracy.
 * 
 * For example:
 * 
 * hcl
 * 
 * import {
 * 
 *   id = &#34;131313133A331313130B5F13DF01313FDB13B13133EE5E133D13EAAB3A3C13D3:INGEST&#34;
 * 
 *   to = newrelic_api_access_key.foobar
 * 
 * }
 * 
 * This approach simplifies the import process and ensures that the resource configuration aligns with the imported state.
 * 
 */
@ResourceType(type="newrelic:index/apiAccessKey:ApiAccessKey")
public class ApiAccessKey extends com.pulumi.resources.CustomResource {
    /**
     * The New Relic account ID where the API access key will be created.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accountId;

    /**
     * @return The New Relic account ID where the API access key will be created.
     * 
     */
    public Output<Optional<String>> accountId() {
        return Codegen.optional(this.accountId);
    }
    /**
     * Required if `key_type` is `INGEST`. Valid options are `BROWSER` or `LICENSE` (case-sensitive).
     * 
     */
    @Export(name="ingestType", refs={String.class}, tree="[0]")
    private Output<String> ingestType;

    /**
     * @return Required if `key_type` is `INGEST`. Valid options are `BROWSER` or `LICENSE` (case-sensitive).
     * 
     */
    public Output<String> ingestType() {
        return this.ingestType;
    }
    /**
     * The actual API key.
     * - &lt;span style=&#34;color:tomato;&#34;&gt;It is important to exercise caution when exporting the value of `key`, as it is sensitive information&lt;/span&gt;. Avoid logging or exposing it inappropriately.
     * 
     */
    @Export(name="key", refs={String.class}, tree="[0]")
    private Output<String> key;

    /**
     * @return The actual API key.
     * - &lt;span style=&#34;color:tomato;&#34;&gt;It is important to exercise caution when exporting the value of `key`, as it is sensitive information&lt;/span&gt;. Avoid logging or exposing it inappropriately.
     * 
     */
    public Output<String> key() {
        return this.key;
    }
    /**
     * The type of API key to create. Valid options are `INGEST` or `USER` (case-sensitive).
     * - If `key_type` is `INGEST`, then `ingest_type` must be specified.
     * - If `key_type` is `USER`, then `user_id` must be specified.
     * 
     */
    @Export(name="keyType", refs={String.class}, tree="[0]")
    private Output<String> keyType;

    /**
     * @return The type of API key to create. Valid options are `INGEST` or `USER` (case-sensitive).
     * - If `key_type` is `INGEST`, then `ingest_type` must be specified.
     * - If `key_type` is `USER`, then `user_id` must be specified.
     * 
     */
    public Output<String> keyType() {
        return this.keyType;
    }
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }
    /**
     * Additional notes about the API access key.
     * 
     */
    @Export(name="notes", refs={String.class}, tree="[0]")
    private Output<String> notes;

    /**
     * @return Additional notes about the API access key.
     * 
     */
    public Output<String> notes() {
        return this.notes;
    }
    /**
     * Required if `key_type` is `USER`. The New Relic user ID for which the API access key will be created.
     * 
     */
    @Export(name="userId", refs={String.class}, tree="[0]")
    private Output<String> userId;

    /**
     * @return Required if `key_type` is `USER`. The New Relic user ID for which the API access key will be created.
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ApiAccessKey(java.lang.String name) {
        this(name, ApiAccessKeyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ApiAccessKey(java.lang.String name, ApiAccessKeyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ApiAccessKey(java.lang.String name, ApiAccessKeyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/apiAccessKey:ApiAccessKey", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ApiAccessKey(java.lang.String name, Output<java.lang.String> id, @Nullable ApiAccessKeyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/apiAccessKey:ApiAccessKey", name, state, makeResourceOptions(options, id), false);
    }

    private static ApiAccessKeyArgs makeArgs(ApiAccessKeyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ApiAccessKeyArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ApiAccessKey get(java.lang.String name, Output<java.lang.String> id, @Nullable ApiAccessKeyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ApiAccessKey(name, id, state, options);
    }
}
