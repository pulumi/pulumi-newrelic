// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.cloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OciLinkAccountArgs extends com.pulumi.resources.ResourceArgs {

    public static final OciLinkAccountArgs Empty = new OciLinkAccountArgs();

    /**
     * New Relic account to operate on. Overrides the provider-level `account_id`. If omitted, use the provider default or `NEW_RELIC_ACCOUNT_ID`.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return New Relic account to operate on. Overrides the provider-level `account_id`. If omitted, use the provider default or `NEW_RELIC_ACCOUNT_ID`.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * OCI compartment OCID representing (or containing) the monitored resources/newrelic compartment.
     * 
     */
    @Import(name="compartmentOcid", required=true)
    private Output<String> compartmentOcid;

    /**
     * @return OCI compartment OCID representing (or containing) the monitored resources/newrelic compartment.
     * 
     */
    public Output<String> compartmentOcid() {
        return this.compartmentOcid;
    }

    /**
     * Vault secret OCID containing an ingest secret.
     * 
     */
    @Import(name="ingestVaultOcid")
    private @Nullable Output<String> ingestVaultOcid;

    /**
     * @return Vault secret OCID containing an ingest secret.
     * 
     */
    public Optional<Output<String>> ingestVaultOcid() {
        return Optional.ofNullable(this.ingestVaultOcid);
    }

    /**
     * Specifies the type of integration, such as metrics, logs, or a combination of logs and metrics (e.g., `METRICS`, `LOGS`, `METRICS,LOGS`).
     * 
     */
    @Import(name="instrumentationType")
    private @Nullable Output<String> instrumentationType;

    /**
     * @return Specifies the type of integration, such as metrics, logs, or a combination of logs and metrics (e.g., `METRICS`, `LOGS`, `METRICS,LOGS`).
     * 
     */
    public Optional<Output<String>> instrumentationType() {
        return Optional.ofNullable(this.instrumentationType);
    }

    /**
     * The Logging stack identifier for the OCI account.
     * 
     */
    @Import(name="loggingStackOcid")
    private @Nullable Output<String> loggingStackOcid;

    /**
     * @return The Logging stack identifier for the OCI account.
     * 
     */
    public Optional<Output<String>> loggingStackOcid() {
        return Optional.ofNullable(this.loggingStackOcid);
    }

    /**
     * Metric stack OCID (ignored on create, applied on update).
     * 
     */
    @Import(name="metricStackOcid")
    private @Nullable Output<String> metricStackOcid;

    /**
     * @return Metric stack OCID (ignored on create, applied on update).
     * 
     */
    public Optional<Output<String>> metricStackOcid() {
        return Optional.ofNullable(this.metricStackOcid);
    }

    /**
     * Display name for the linked account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Display name for the linked account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * OCI Identity Domain (IDCS) OAuth2 client ID used for workload identity federation.
     * 
     */
    @Import(name="ociClientId", required=true)
    private Output<String> ociClientId;

    /**
     * @return OCI Identity Domain (IDCS) OAuth2 client ID used for workload identity federation.
     * 
     */
    public Output<String> ociClientId() {
        return this.ociClientId;
    }

    /**
     * OAuth2 client secret. Not displayed in plans or state outputs.
     * 
     */
    @Import(name="ociClientSecret", required=true)
    private Output<String> ociClientSecret;

    /**
     * @return OAuth2 client secret. Not displayed in plans or state outputs.
     * 
     */
    public Output<String> ociClientSecret() {
        return this.ociClientSecret;
    }

    /**
     * Base URL of the OCI Identity Domain (e.g. `https://idcs-&lt;hash&gt;.identity.oraclecloud.com`).
     * 
     */
    @Import(name="ociDomainUrl", required=true)
    private Output<String> ociDomainUrl;

    /**
     * @return Base URL of the OCI Identity Domain (e.g. `https://idcs-&lt;hash&gt;.identity.oraclecloud.com`).
     * 
     */
    public Output<String> ociDomainUrl() {
        return this.ociDomainUrl;
    }

    /**
     * Home region of the tenancy (e.g. `us-ashburn-1`).
     * 
     */
    @Import(name="ociHomeRegion", required=true)
    private Output<String> ociHomeRegion;

    /**
     * @return Home region of the tenancy (e.g. `us-ashburn-1`).
     * 
     */
    public Output<String> ociHomeRegion() {
        return this.ociHomeRegion;
    }

    /**
     * OCI region for the linkage (ignored on create, applied on update).
     * 
     */
    @Import(name="ociRegion")
    private @Nullable Output<String> ociRegion;

    /**
     * @return OCI region for the linkage (ignored on create, applied on update).
     * 
     */
    public Optional<Output<String>> ociRegion() {
        return Optional.ofNullable(this.ociRegion);
    }

    /**
     * Service user name associated with the WIF configuration.
     * 
     */
    @Import(name="ociSvcUserName", required=true)
    private Output<String> ociSvcUserName;

    /**
     * @return Service user name associated with the WIF configuration.
     * 
     */
    public Output<String> ociSvcUserName() {
        return this.ociSvcUserName;
    }

    /**
     * OCI tenancy OCID (root tenancy). Changing forces a new linked account.
     * 
     */
    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    /**
     * @return OCI tenancy OCID (root tenancy). Changing forces a new linked account.
     * 
     */
    public Output<String> tenantId() {
        return this.tenantId;
    }

    /**
     * Vault secret OCID containing a user or auxiliary secret.
     * 
     */
    @Import(name="userVaultOcid")
    private @Nullable Output<String> userVaultOcid;

    /**
     * @return Vault secret OCID containing a user or auxiliary secret.
     * 
     */
    public Optional<Output<String>> userVaultOcid() {
        return Optional.ofNullable(this.userVaultOcid);
    }

    private OciLinkAccountArgs() {}

    private OciLinkAccountArgs(OciLinkAccountArgs $) {
        this.accountId = $.accountId;
        this.compartmentOcid = $.compartmentOcid;
        this.ingestVaultOcid = $.ingestVaultOcid;
        this.instrumentationType = $.instrumentationType;
        this.loggingStackOcid = $.loggingStackOcid;
        this.metricStackOcid = $.metricStackOcid;
        this.name = $.name;
        this.ociClientId = $.ociClientId;
        this.ociClientSecret = $.ociClientSecret;
        this.ociDomainUrl = $.ociDomainUrl;
        this.ociHomeRegion = $.ociHomeRegion;
        this.ociRegion = $.ociRegion;
        this.ociSvcUserName = $.ociSvcUserName;
        this.tenantId = $.tenantId;
        this.userVaultOcid = $.userVaultOcid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OciLinkAccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OciLinkAccountArgs $;

        public Builder() {
            $ = new OciLinkAccountArgs();
        }

        public Builder(OciLinkAccountArgs defaults) {
            $ = new OciLinkAccountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId New Relic account to operate on. Overrides the provider-level `account_id`. If omitted, use the provider default or `NEW_RELIC_ACCOUNT_ID`.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId New Relic account to operate on. Overrides the provider-level `account_id`. If omitted, use the provider default or `NEW_RELIC_ACCOUNT_ID`.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param compartmentOcid OCI compartment OCID representing (or containing) the monitored resources/newrelic compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentOcid(Output<String> compartmentOcid) {
            $.compartmentOcid = compartmentOcid;
            return this;
        }

        /**
         * @param compartmentOcid OCI compartment OCID representing (or containing) the monitored resources/newrelic compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentOcid(String compartmentOcid) {
            return compartmentOcid(Output.of(compartmentOcid));
        }

        /**
         * @param ingestVaultOcid Vault secret OCID containing an ingest secret.
         * 
         * @return builder
         * 
         */
        public Builder ingestVaultOcid(@Nullable Output<String> ingestVaultOcid) {
            $.ingestVaultOcid = ingestVaultOcid;
            return this;
        }

        /**
         * @param ingestVaultOcid Vault secret OCID containing an ingest secret.
         * 
         * @return builder
         * 
         */
        public Builder ingestVaultOcid(String ingestVaultOcid) {
            return ingestVaultOcid(Output.of(ingestVaultOcid));
        }

        /**
         * @param instrumentationType Specifies the type of integration, such as metrics, logs, or a combination of logs and metrics (e.g., `METRICS`, `LOGS`, `METRICS,LOGS`).
         * 
         * @return builder
         * 
         */
        public Builder instrumentationType(@Nullable Output<String> instrumentationType) {
            $.instrumentationType = instrumentationType;
            return this;
        }

        /**
         * @param instrumentationType Specifies the type of integration, such as metrics, logs, or a combination of logs and metrics (e.g., `METRICS`, `LOGS`, `METRICS,LOGS`).
         * 
         * @return builder
         * 
         */
        public Builder instrumentationType(String instrumentationType) {
            return instrumentationType(Output.of(instrumentationType));
        }

        /**
         * @param loggingStackOcid The Logging stack identifier for the OCI account.
         * 
         * @return builder
         * 
         */
        public Builder loggingStackOcid(@Nullable Output<String> loggingStackOcid) {
            $.loggingStackOcid = loggingStackOcid;
            return this;
        }

        /**
         * @param loggingStackOcid The Logging stack identifier for the OCI account.
         * 
         * @return builder
         * 
         */
        public Builder loggingStackOcid(String loggingStackOcid) {
            return loggingStackOcid(Output.of(loggingStackOcid));
        }

        /**
         * @param metricStackOcid Metric stack OCID (ignored on create, applied on update).
         * 
         * @return builder
         * 
         */
        public Builder metricStackOcid(@Nullable Output<String> metricStackOcid) {
            $.metricStackOcid = metricStackOcid;
            return this;
        }

        /**
         * @param metricStackOcid Metric stack OCID (ignored on create, applied on update).
         * 
         * @return builder
         * 
         */
        public Builder metricStackOcid(String metricStackOcid) {
            return metricStackOcid(Output.of(metricStackOcid));
        }

        /**
         * @param name Display name for the linked account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Display name for the linked account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ociClientId OCI Identity Domain (IDCS) OAuth2 client ID used for workload identity federation.
         * 
         * @return builder
         * 
         */
        public Builder ociClientId(Output<String> ociClientId) {
            $.ociClientId = ociClientId;
            return this;
        }

        /**
         * @param ociClientId OCI Identity Domain (IDCS) OAuth2 client ID used for workload identity federation.
         * 
         * @return builder
         * 
         */
        public Builder ociClientId(String ociClientId) {
            return ociClientId(Output.of(ociClientId));
        }

        /**
         * @param ociClientSecret OAuth2 client secret. Not displayed in plans or state outputs.
         * 
         * @return builder
         * 
         */
        public Builder ociClientSecret(Output<String> ociClientSecret) {
            $.ociClientSecret = ociClientSecret;
            return this;
        }

        /**
         * @param ociClientSecret OAuth2 client secret. Not displayed in plans or state outputs.
         * 
         * @return builder
         * 
         */
        public Builder ociClientSecret(String ociClientSecret) {
            return ociClientSecret(Output.of(ociClientSecret));
        }

        /**
         * @param ociDomainUrl Base URL of the OCI Identity Domain (e.g. `https://idcs-&lt;hash&gt;.identity.oraclecloud.com`).
         * 
         * @return builder
         * 
         */
        public Builder ociDomainUrl(Output<String> ociDomainUrl) {
            $.ociDomainUrl = ociDomainUrl;
            return this;
        }

        /**
         * @param ociDomainUrl Base URL of the OCI Identity Domain (e.g. `https://idcs-&lt;hash&gt;.identity.oraclecloud.com`).
         * 
         * @return builder
         * 
         */
        public Builder ociDomainUrl(String ociDomainUrl) {
            return ociDomainUrl(Output.of(ociDomainUrl));
        }

        /**
         * @param ociHomeRegion Home region of the tenancy (e.g. `us-ashburn-1`).
         * 
         * @return builder
         * 
         */
        public Builder ociHomeRegion(Output<String> ociHomeRegion) {
            $.ociHomeRegion = ociHomeRegion;
            return this;
        }

        /**
         * @param ociHomeRegion Home region of the tenancy (e.g. `us-ashburn-1`).
         * 
         * @return builder
         * 
         */
        public Builder ociHomeRegion(String ociHomeRegion) {
            return ociHomeRegion(Output.of(ociHomeRegion));
        }

        /**
         * @param ociRegion OCI region for the linkage (ignored on create, applied on update).
         * 
         * @return builder
         * 
         */
        public Builder ociRegion(@Nullable Output<String> ociRegion) {
            $.ociRegion = ociRegion;
            return this;
        }

        /**
         * @param ociRegion OCI region for the linkage (ignored on create, applied on update).
         * 
         * @return builder
         * 
         */
        public Builder ociRegion(String ociRegion) {
            return ociRegion(Output.of(ociRegion));
        }

        /**
         * @param ociSvcUserName Service user name associated with the WIF configuration.
         * 
         * @return builder
         * 
         */
        public Builder ociSvcUserName(Output<String> ociSvcUserName) {
            $.ociSvcUserName = ociSvcUserName;
            return this;
        }

        /**
         * @param ociSvcUserName Service user name associated with the WIF configuration.
         * 
         * @return builder
         * 
         */
        public Builder ociSvcUserName(String ociSvcUserName) {
            return ociSvcUserName(Output.of(ociSvcUserName));
        }

        /**
         * @param tenantId OCI tenancy OCID (root tenancy). Changing forces a new linked account.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId OCI tenancy OCID (root tenancy). Changing forces a new linked account.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param userVaultOcid Vault secret OCID containing a user or auxiliary secret.
         * 
         * @return builder
         * 
         */
        public Builder userVaultOcid(@Nullable Output<String> userVaultOcid) {
            $.userVaultOcid = userVaultOcid;
            return this;
        }

        /**
         * @param userVaultOcid Vault secret OCID containing a user or auxiliary secret.
         * 
         * @return builder
         * 
         */
        public Builder userVaultOcid(String userVaultOcid) {
            return userVaultOcid(Output.of(userVaultOcid));
        }

        public OciLinkAccountArgs build() {
            if ($.compartmentOcid == null) {
                throw new MissingRequiredPropertyException("OciLinkAccountArgs", "compartmentOcid");
            }
            if ($.ociClientId == null) {
                throw new MissingRequiredPropertyException("OciLinkAccountArgs", "ociClientId");
            }
            if ($.ociClientSecret == null) {
                throw new MissingRequiredPropertyException("OciLinkAccountArgs", "ociClientSecret");
            }
            if ($.ociDomainUrl == null) {
                throw new MissingRequiredPropertyException("OciLinkAccountArgs", "ociDomainUrl");
            }
            if ($.ociHomeRegion == null) {
                throw new MissingRequiredPropertyException("OciLinkAccountArgs", "ociHomeRegion");
            }
            if ($.ociSvcUserName == null) {
                throw new MissingRequiredPropertyException("OciLinkAccountArgs", "ociSvcUserName");
            }
            if ($.tenantId == null) {
                throw new MissingRequiredPropertyException("OciLinkAccountArgs", "tenantId");
            }
            return $;
        }
    }

}
