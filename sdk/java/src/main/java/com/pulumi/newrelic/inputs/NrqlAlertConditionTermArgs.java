// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NrqlAlertConditionTermArgs extends com.pulumi.resources.ResourceArgs {

    public static final NrqlAlertConditionTermArgs Empty = new NrqlAlertConditionTermArgs();

    /**
     * @deprecated
     * use `threshold_duration` attribute instead
     * 
     */
    @Deprecated /* use `threshold_duration` attribute instead */
    @Import(name="duration")
    private @Nullable Output<Integer> duration;

    /**
     * @deprecated
     * use `threshold_duration` attribute instead
     * 
     */
    @Deprecated /* use `threshold_duration` attribute instead */
    public Optional<Output<Integer>> duration() {
        return Optional.ofNullable(this.duration);
    }

    @Import(name="operator")
    private @Nullable Output<String> operator;

    public Optional<Output<String>> operator() {
        return Optional.ofNullable(this.operator);
    }

    @Import(name="priority")
    private @Nullable Output<String> priority;

    public Optional<Output<String>> priority() {
        return Optional.ofNullable(this.priority);
    }

    @Import(name="threshold", required=true)
    private Output<Double> threshold;

    public Output<Double> threshold() {
        return this.threshold;
    }

    @Import(name="thresholdDuration")
    private @Nullable Output<Integer> thresholdDuration;

    public Optional<Output<Integer>> thresholdDuration() {
        return Optional.ofNullable(this.thresholdDuration);
    }

    @Import(name="thresholdOccurrences")
    private @Nullable Output<String> thresholdOccurrences;

    public Optional<Output<String>> thresholdOccurrences() {
        return Optional.ofNullable(this.thresholdOccurrences);
    }

    /**
     * @deprecated
     * use `threshold_occurrences` attribute instead
     * 
     */
    @Deprecated /* use `threshold_occurrences` attribute instead */
    @Import(name="timeFunction")
    private @Nullable Output<String> timeFunction;

    /**
     * @deprecated
     * use `threshold_occurrences` attribute instead
     * 
     */
    @Deprecated /* use `threshold_occurrences` attribute instead */
    public Optional<Output<String>> timeFunction() {
        return Optional.ofNullable(this.timeFunction);
    }

    private NrqlAlertConditionTermArgs() {}

    private NrqlAlertConditionTermArgs(NrqlAlertConditionTermArgs $) {
        this.duration = $.duration;
        this.operator = $.operator;
        this.priority = $.priority;
        this.threshold = $.threshold;
        this.thresholdDuration = $.thresholdDuration;
        this.thresholdOccurrences = $.thresholdOccurrences;
        this.timeFunction = $.timeFunction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NrqlAlertConditionTermArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NrqlAlertConditionTermArgs $;

        public Builder() {
            $ = new NrqlAlertConditionTermArgs();
        }

        public Builder(NrqlAlertConditionTermArgs defaults) {
            $ = new NrqlAlertConditionTermArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * use `threshold_duration` attribute instead
         * 
         */
        @Deprecated /* use `threshold_duration` attribute instead */
        public Builder duration(@Nullable Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * use `threshold_duration` attribute instead
         * 
         */
        @Deprecated /* use `threshold_duration` attribute instead */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        public Builder operator(@Nullable Output<String> operator) {
            $.operator = operator;
            return this;
        }

        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        public Builder priority(@Nullable Output<String> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(String priority) {
            return priority(Output.of(priority));
        }

        public Builder threshold(Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        public Builder thresholdDuration(@Nullable Output<Integer> thresholdDuration) {
            $.thresholdDuration = thresholdDuration;
            return this;
        }

        public Builder thresholdDuration(Integer thresholdDuration) {
            return thresholdDuration(Output.of(thresholdDuration));
        }

        public Builder thresholdOccurrences(@Nullable Output<String> thresholdOccurrences) {
            $.thresholdOccurrences = thresholdOccurrences;
            return this;
        }

        public Builder thresholdOccurrences(String thresholdOccurrences) {
            return thresholdOccurrences(Output.of(thresholdOccurrences));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * use `threshold_occurrences` attribute instead
         * 
         */
        @Deprecated /* use `threshold_occurrences` attribute instead */
        public Builder timeFunction(@Nullable Output<String> timeFunction) {
            $.timeFunction = timeFunction;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * use `threshold_occurrences` attribute instead
         * 
         */
        @Deprecated /* use `threshold_occurrences` attribute instead */
        public Builder timeFunction(String timeFunction) {
            return timeFunction(Output.of(timeFunction));
        }

        public NrqlAlertConditionTermArgs build() {
            if ($.threshold == null) {
                throw new MissingRequiredPropertyException("NrqlAlertConditionTermArgs", "threshold");
            }
            return $;
        }
    }

}
