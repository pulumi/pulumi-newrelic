// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.LogParsingRuleArgs;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.inputs.LogParsingRuleState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Use this resource to create, update and delete New Relic Log Parsing Rule.
 * 
 * ## Example Usage
 * 
 * Use this example to create the log parse rule.
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.LogParsingRule;
 * import com.pulumi.newrelic.LogParsingRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new LogParsingRule("foo", LogParsingRuleArgs.builder()
 *             .name("log_parse_rule")
 *             .attribute("message")
 *             .enabled(true)
 *             .grok("sampleattribute='%{NUMBER:test:int}'")
 *             .lucene("logtype:linux_messages")
 *             .nrql("SELECT * FROM Log WHERE logtype = 'linux_messages'")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Additional Example
 * 
 * Use this example to validate a grok pattern and create the log parse rule.  More
 * information on grok pattern can be found [here](https://docs.newrelic.com/docs/logs/ui-data/parsing/#grok)
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.NewrelicFunctions;
 * import com.pulumi.newrelic.inputs.GetTestGrokPatternArgs;
 * import com.pulumi.newrelic.LogParsingRule;
 * import com.pulumi.newrelic.LogParsingRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var grok = NewrelicFunctions.getTestGrokPattern(GetTestGrokPatternArgs.builder()
 *             .grok("%{IP:host_ip}")
 *             .logLines("host_ip: 43.3.120.2")
 *             .build());
 * 
 *         var foo = new LogParsingRule("foo", LogParsingRuleArgs.builder()
 *             .name("log_parse_rule")
 *             .attribute("message")
 *             .enabled(true)
 *             .grok(grok.applyValue(getTestGrokPatternResult -> getTestGrokPatternResult.grok()))
 *             .lucene("logtype:linux_messages")
 *             .nrql("SELECT * FROM Log WHERE logtype = 'linux_messages'")
 *             .matched(grok.applyValue(getTestGrokPatternResult -> getTestGrokPatternResult.testGroks()[0].matched()))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * New Relic log parsing rule can be imported using the rule ID, e.g.
 * 
 * bash
 * 
 * ```sh
 * $ pulumi import newrelic:index/logParsingRule:LogParsingRule foo 3456789
 * ```
 * 
 */
@ResourceType(type="newrelic:index/logParsingRule:LogParsingRule")
public class LogParsingRule extends com.pulumi.resources.CustomResource {
    /**
     * The account id associated with the obfuscation rule.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return The account id associated with the obfuscation rule.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.
     * 
     */
    @Export(name="attribute", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> attribute;

    /**
     * @return The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.
     * 
     */
    public Output<Optional<String>> attribute() {
        return Codegen.optional(this.attribute);
    }
    /**
     * Whether or not this rule is deleted.
     * 
     */
    @Export(name="deleted", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> deleted;

    /**
     * @return Whether or not this rule is deleted.
     * 
     */
    public Output<Boolean> deleted() {
        return this.deleted;
    }
    /**
     * Whether the rule should be applied or not to incoming data.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Whether the rule should be applied or not to incoming data.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * The Grok of what to parse.
     * 
     */
    @Export(name="grok", refs={String.class}, tree="[0]")
    private Output<String> grok;

    /**
     * @return The Grok of what to parse.
     * 
     */
    public Output<String> grok() {
        return this.grok;
    }
    /**
     * The Lucene to match events to the parsing rule.
     * 
     */
    @Export(name="lucene", refs={String.class}, tree="[0]")
    private Output<String> lucene;

    /**
     * @return The Lucene to match events to the parsing rule.
     * 
     */
    public Output<String> lucene() {
        return this.lucene;
    }
    /**
     * Whether the Grok pattern matched.
     * 
     */
    @Export(name="matched", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> matched;

    /**
     * @return Whether the Grok pattern matched.
     * 
     */
    public Output<Boolean> matched() {
        return this.matched;
    }
    /**
     * Name of rule.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The NRQL to match events to the parsing rule.
     * 
     */
    @Export(name="nrql", refs={String.class}, tree="[0]")
    private Output<String> nrql;

    /**
     * @return The NRQL to match events to the parsing rule.
     * 
     */
    public Output<String> nrql() {
        return this.nrql;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LogParsingRule(String name) {
        this(name, LogParsingRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LogParsingRule(String name, LogParsingRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LogParsingRule(String name, LogParsingRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/logParsingRule:LogParsingRule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private LogParsingRule(String name, Output<String> id, @Nullable LogParsingRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/logParsingRule:LogParsingRule", name, state, makeResourceOptions(options, id));
    }

    private static LogParsingRuleArgs makeArgs(LogParsingRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LogParsingRuleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LogParsingRule get(String name, Output<String> id, @Nullable LogParsingRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LogParsingRule(name, id, state, options);
    }
}
