// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.synthetics;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.synthetics.ScriptMonitorArgs;
import com.pulumi.newrelic.synthetics.inputs.ScriptMonitorState;
import com.pulumi.newrelic.synthetics.outputs.ScriptMonitorLocationPrivate;
import com.pulumi.newrelic.synthetics.outputs.ScriptMonitorTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * &gt; **WARNING** Support for legacy Synthetics runtimes **will reach its end-of-life (EOL) on October 22, 2024**. In addition, creating **_new_** monitors using the legacy runtime **will no longer be supported after August 26, 2024**. In light of the above, kindly **upgrade your Synthetic Monitors to the new runtime** at the earliest, if they are still using the legacy runtime. Please check out [this page](https://forum.newrelic.com/s/hubtopic/aAXPh0000001brxOAA/upcoming-endoflife-legacy-synthetics-runtimes-and-cpm) for more details on the EOL, action needed (specific to monitors using public and private locations), relevant resources, and more.
 * 
 * Use this resource to create update, and delete a Script API or Script Browser Synthetics Monitor in New Relic.
 * 
 * ## Example Usage
 * 
 * ##### Type: `SCRIPT_API`
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.synthetics.ScriptMonitor;
 * import com.pulumi.newrelic.synthetics.ScriptMonitorArgs;
 * import com.pulumi.newrelic.synthetics.inputs.ScriptMonitorTagArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var monitor = new ScriptMonitor("monitor", ScriptMonitorArgs.builder()
 *             .status("ENABLED")
 *             .name("script_monitor")
 *             .type("SCRIPT_API")
 *             .locationsPublics(            
 *                 "AP_SOUTH_1",
 *                 "AP_EAST_1")
 *             .period("EVERY_6_HOURS")
 *             .script("console.log('it works!')")
 *             .scriptLanguage("JAVASCRIPT")
 *             .runtimeType("NODE_API")
 *             .runtimeTypeVersion("16.10")
 *             .tags(ScriptMonitorTagArgs.builder()
 *                 .key("some_key")
 *                 .values("some_value")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ##### Type: `SCRIPT_BROWSER`
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.synthetics.ScriptMonitor;
 * import com.pulumi.newrelic.synthetics.ScriptMonitorArgs;
 * import com.pulumi.newrelic.synthetics.inputs.ScriptMonitorTagArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var monitor = new ScriptMonitor("monitor", ScriptMonitorArgs.builder()
 *             .status("ENABLED")
 *             .name("script_monitor")
 *             .type("SCRIPT_BROWSER")
 *             .locationsPublics(            
 *                 "AP_SOUTH_1",
 *                 "AP_EAST_1")
 *             .period("EVERY_HOUR")
 *             .enableScreenshotOnFailureAndScript(false)
 *             .script("$browser.get('https://one.newrelic.com')")
 *             .runtimeTypeVersion("100")
 *             .runtimeType("CHROME_BROWSER")
 *             .scriptLanguage("JAVASCRIPT")
 *             .tags(ScriptMonitorTagArgs.builder()
 *                 .key("some_key")
 *                 .values("some_value")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * See additional examples.
 * 
 * ## Additional Examples
 * 
 * ### Create a monitor with a private location
 * 
 * The below example shows how you can define a private location and attach it to a monitor.
 * 
 * &gt; **NOTE:** It can take up to 10 minutes for a private location to become available.
 * 
 * ##### Type: `SCRIPT_API`
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.synthetics.PrivateLocation;
 * import com.pulumi.newrelic.synthetics.PrivateLocationArgs;
 * import com.pulumi.newrelic.synthetics.ScriptMonitor;
 * import com.pulumi.newrelic.synthetics.ScriptMonitorArgs;
 * import com.pulumi.newrelic.synthetics.inputs.ScriptMonitorLocationPrivateArgs;
 * import com.pulumi.newrelic.synthetics.inputs.ScriptMonitorTagArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var location = new PrivateLocation("location", PrivateLocationArgs.builder()
 *             .description("Example private location")
 *             .name("private_location")
 *             .verifiedScriptExecution(true)
 *             .build());
 * 
 *         var monitor = new ScriptMonitor("monitor", ScriptMonitorArgs.builder()
 *             .status("ENABLED")
 *             .name("script_monitor")
 *             .type("SCRIPT_API")
 *             .locationPrivates(ScriptMonitorLocationPrivateArgs.builder()
 *                 .guid(location.id())
 *                 .vsePassword("secret")
 *                 .build())
 *             .period("EVERY_6_HOURS")
 *             .script("console.log('terraform integration test updated')")
 *             .scriptLanguage("JAVASCRIPT")
 *             .runtimeType("NODE_API")
 *             .runtimeTypeVersion("16.10")
 *             .tags(ScriptMonitorTagArgs.builder()
 *                 .key("some_key")
 *                 .values("some_value")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ##### Type: `SCRIPT_BROWSER`
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.synthetics.PrivateLocation;
 * import com.pulumi.newrelic.synthetics.PrivateLocationArgs;
 * import com.pulumi.newrelic.synthetics.ScriptMonitor;
 * import com.pulumi.newrelic.synthetics.ScriptMonitorArgs;
 * import com.pulumi.newrelic.synthetics.inputs.ScriptMonitorLocationPrivateArgs;
 * import com.pulumi.newrelic.synthetics.inputs.ScriptMonitorTagArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var location = new PrivateLocation("location", PrivateLocationArgs.builder()
 *             .description("Test Description")
 *             .name("private_location")
 *             .verifiedScriptExecution(true)
 *             .build());
 * 
 *         var monitor = new ScriptMonitor("monitor", ScriptMonitorArgs.builder()
 *             .status("ENABLED")
 *             .name("script_monitor")
 *             .type("SCRIPT_BROWSER")
 *             .period("EVERY_HOUR")
 *             .script("$browser.get('https://one.newrelic.com')")
 *             .enableScreenshotOnFailureAndScript(false)
 *             .locationPrivates(ScriptMonitorLocationPrivateArgs.builder()
 *                 .guid(location.id())
 *                 .vsePassword("secret")
 *                 .build())
 *             .runtimeTypeVersion("100")
 *             .runtimeType("CHROME_BROWSER")
 *             .scriptLanguage("JAVASCRIPT")
 *             .deviceType("MOBILE")
 *             .deviceOrientation("LANDSCAPE")
 *             .tags(ScriptMonitorTagArgs.builder()
 *                 .key("some_key")
 *                 .values("some_value")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Synthetics monitor scripts can be imported using the `guid`, e.g.
 * 
 * bash
 * 
 * ```sh
 * $ pulumi import newrelic:synthetics/scriptMonitor:ScriptMonitor monitor &lt;guid&gt;
 * ```
 * 
 */
@ResourceType(type="newrelic:synthetics/scriptMonitor:ScriptMonitor")
public class ScriptMonitor extends com.pulumi.resources.CustomResource {
    /**
     * The account in which the Synthetics monitor will be created.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return The account in which the Synthetics monitor will be created.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * Device emulation orientation field. Valid values are `LANDSCAPE` and `PORTRAIT`.
     * 
     */
    @Export(name="deviceOrientation", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deviceOrientation;

    /**
     * @return Device emulation orientation field. Valid values are `LANDSCAPE` and `PORTRAIT`.
     * 
     */
    public Output<Optional<String>> deviceOrientation() {
        return Codegen.optional(this.deviceOrientation);
    }
    /**
     * Device emulation type field. Valid values are `MOBILE` and `TABLET`.
     * 
     */
    @Export(name="deviceType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deviceType;

    /**
     * @return Device emulation type field. Valid values are `MOBILE` and `TABLET`.
     * 
     */
    public Output<Optional<String>> deviceType() {
        return Codegen.optional(this.deviceType);
    }
    /**
     * Capture a screenshot during job execution.
     * 
     */
    @Export(name="enableScreenshotOnFailureAndScript", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableScreenshotOnFailureAndScript;

    /**
     * @return Capture a screenshot during job execution.
     * 
     */
    public Output<Optional<Boolean>> enableScreenshotOnFailureAndScript() {
        return Codegen.optional(this.enableScreenshotOnFailureAndScript);
    }
    /**
     * The unique entity identifier of the monitor in New Relic.
     * 
     */
    @Export(name="guid", refs={String.class}, tree="[0]")
    private Output<String> guid;

    /**
     * @return The unique entity identifier of the monitor in New Relic.
     * 
     */
    public Output<String> guid() {
        return this.guid;
    }
    /**
     * The location the monitor will run from. See Nested location_private blocks below for details. **At least one of either** `locations_public` **or** `location_private` **is required**.
     * 
     */
    @Export(name="locationPrivates", refs={List.class,ScriptMonitorLocationPrivate.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ScriptMonitorLocationPrivate>> locationPrivates;

    /**
     * @return The location the monitor will run from. See Nested location_private blocks below for details. **At least one of either** `locations_public` **or** `location_private` **is required**.
     * 
     */
    public Output<Optional<List<ScriptMonitorLocationPrivate>>> locationPrivates() {
        return Codegen.optional(this.locationPrivates);
    }
    /**
     * The location the monitor will run from. Check out [this page](https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/) for a list of valid public locations. The `AWS_` prefix is not needed, as the provider uses NerdGraph. **At least one of either** `locations_public` **or** `location_private` **is required**.
     * 
     */
    @Export(name="locationsPublics", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> locationsPublics;

    /**
     * @return The location the monitor will run from. Check out [this page](https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/) for a list of valid public locations. The `AWS_` prefix is not needed, as the provider uses NerdGraph. **At least one of either** `locations_public` **or** `location_private` **is required**.
     * 
     */
    public Output<Optional<List<String>>> locationsPublics() {
        return Codegen.optional(this.locationsPublics);
    }
    /**
     * The name for the monitor.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name for the monitor.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The interval at which this monitor should run. Valid values are `EVERY_MINUTE`, `EVERY_5_MINUTES`, `EVERY_10_MINUTES`, `EVERY_15_MINUTES`, `EVERY_30_MINUTES`, `EVERY_HOUR`, `EVERY_6_HOURS`, `EVERY_12_HOURS`, or `EVERY_DAY`.
     * 
     */
    @Export(name="period", refs={String.class}, tree="[0]")
    private Output<String> period;

    /**
     * @return The interval at which this monitor should run. Valid values are `EVERY_MINUTE`, `EVERY_5_MINUTES`, `EVERY_10_MINUTES`, `EVERY_15_MINUTES`, `EVERY_30_MINUTES`, `EVERY_HOUR`, `EVERY_6_HOURS`, `EVERY_12_HOURS`, or `EVERY_DAY`.
     * 
     */
    public Output<String> period() {
        return this.period;
    }
    /**
     * The interval in minutes at which Synthetic monitor should run.
     * 
     */
    @Export(name="periodInMinutes", refs={Integer.class}, tree="[0]")
    private Output<Integer> periodInMinutes;

    /**
     * @return The interval in minutes at which Synthetic monitor should run.
     * 
     */
    public Output<Integer> periodInMinutes() {
        return this.periodInMinutes;
    }
    /**
     * The runtime that the monitor will use to run jobs. For the `SCRIPT_API` monitor type, a valid value is `NODE_API`. For the `SCRIPT_BROWSER` monitor type, a valid value is `CHROME_BROWSER`.
     * 
     */
    @Export(name="runtimeType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> runtimeType;

    /**
     * @return The runtime that the monitor will use to run jobs. For the `SCRIPT_API` monitor type, a valid value is `NODE_API`. For the `SCRIPT_BROWSER` monitor type, a valid value is `CHROME_BROWSER`.
     * 
     */
    public Output<Optional<String>> runtimeType() {
        return Codegen.optional(this.runtimeType);
    }
    /**
     * The specific version of the runtime type selected. For the `SCRIPT_API` monitor type, a valid value is `16.10`, which corresponds to the version of Node.js. For the `SCRIPT_BROWSER` monitor type, a valid value is `100`, which corresponds to the version of the Chrome browser.
     * 
     */
    @Export(name="runtimeTypeVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> runtimeTypeVersion;

    /**
     * @return The specific version of the runtime type selected. For the `SCRIPT_API` monitor type, a valid value is `16.10`, which corresponds to the version of Node.js. For the `SCRIPT_BROWSER` monitor type, a valid value is `100`, which corresponds to the version of the Chrome browser.
     * 
     */
    public Output<Optional<String>> runtimeTypeVersion() {
        return Codegen.optional(this.runtimeTypeVersion);
    }
    /**
     * The script that the monitor runs.
     * 
     */
    @Export(name="script", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> script;

    /**
     * @return The script that the monitor runs.
     * 
     */
    public Output<Optional<String>> script() {
        return Codegen.optional(this.script);
    }
    /**
     * The programing language that should execute the script.
     * 
     */
    @Export(name="scriptLanguage", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scriptLanguage;

    /**
     * @return The programing language that should execute the script.
     * 
     */
    public Output<Optional<String>> scriptLanguage() {
        return Codegen.optional(this.scriptLanguage);
    }
    /**
     * The monitor status (ENABLED or DISABLED).
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The monitor status (ENABLED or DISABLED).
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The tags that will be associated with the monitor. See Nested tag blocks below for details.
     * 
     * The `SCRIPTED_BROWSER` monitor type supports the following additional argument:
     * 
     */
    @Export(name="tags", refs={List.class,ScriptMonitorTag.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ScriptMonitorTag>> tags;

    /**
     * @return The tags that will be associated with the monitor. See Nested tag blocks below for details.
     * 
     * The `SCRIPTED_BROWSER` monitor type supports the following additional argument:
     * 
     */
    public Output<Optional<List<ScriptMonitorTag>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The plaintext representing the monitor script. Valid values are SCRIPT_BROWSER or SCRIPT_API
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The plaintext representing the monitor script. Valid values are SCRIPT_BROWSER or SCRIPT_API
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ScriptMonitor(java.lang.String name) {
        this(name, ScriptMonitorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ScriptMonitor(java.lang.String name, ScriptMonitorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ScriptMonitor(java.lang.String name, ScriptMonitorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:synthetics/scriptMonitor:ScriptMonitor", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ScriptMonitor(java.lang.String name, Output<java.lang.String> id, @Nullable ScriptMonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:synthetics/scriptMonitor:ScriptMonitor", name, state, makeResourceOptions(options, id), false);
    }

    private static ScriptMonitorArgs makeArgs(ScriptMonitorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ScriptMonitorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ScriptMonitor get(java.lang.String name, Output<java.lang.String> id, @Nullable ScriptMonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ScriptMonitor(name, id, state, options);
    }
}
