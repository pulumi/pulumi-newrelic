// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const foo = new newrelic.PipelineCloudRule("foo", {
 *     accountId: "1000100",
 *     name: "Test Pipeline Cloud Rule",
 *     description: "This rule deletes all DEBUG logs from the dev environment.",
 *     nrql: "DELETE FROM Log WHERE logLevel = 'DEBUG' AND environment = 'dev'",
 * });
 * ```
 *
 * ## Import
 *
 * Pipeline Cloud Rules can be imported using the `id`. For example:
 *
 * bash
 *
 * ```sh
 * $ pulumi import newrelic:index/pipelineCloudRule:PipelineCloudRule foo <id>
 * ```
 */
export class PipelineCloudRule extends pulumi.CustomResource {
    /**
     * Get an existing PipelineCloudRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PipelineCloudRuleState, opts?: pulumi.CustomResourceOptions): PipelineCloudRule {
        return new PipelineCloudRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:index/pipelineCloudRule:PipelineCloudRule';

    /**
     * Returns true if the given object is an instance of PipelineCloudRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PipelineCloudRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PipelineCloudRule.__pulumiType;
    }

    /**
     * The account ID where the Pipeline Cloud Rule will be created.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Additional information about the rule.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The name of the rule. This must be unique within an account.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The NRQL query that defines the data to be processed by this Pipeline Cloud Rule.
     */
    declare public readonly nrql: pulumi.Output<string>;

    /**
     * Create a PipelineCloudRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PipelineCloudRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PipelineCloudRuleArgs | PipelineCloudRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PipelineCloudRuleState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["nrql"] = state?.nrql;
        } else {
            const args = argsOrState as PipelineCloudRuleArgs | undefined;
            if (args?.nrql === undefined && !opts.urn) {
                throw new Error("Missing required property 'nrql'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["nrql"] = args?.nrql;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PipelineCloudRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PipelineCloudRule resources.
 */
export interface PipelineCloudRuleState {
    /**
     * The account ID where the Pipeline Cloud Rule will be created.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Additional information about the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the rule. This must be unique within an account.
     */
    name?: pulumi.Input<string>;
    /**
     * The NRQL query that defines the data to be processed by this Pipeline Cloud Rule.
     */
    nrql?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PipelineCloudRule resource.
 */
export interface PipelineCloudRuleArgs {
    /**
     * The account ID where the Pipeline Cloud Rule will be created.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Additional information about the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the rule. This must be unique within an account.
     */
    name?: pulumi.Input<string>;
    /**
     * The NRQL query that defines the data to be processed by this Pipeline Cloud Rule.
     */
    nrql: pulumi.Input<string>;
}
