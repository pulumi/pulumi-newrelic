// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AlertConditionArgs, AlertConditionState } from "./alertCondition";
export type AlertCondition = import("./alertCondition").AlertCondition;
export const AlertCondition: typeof import("./alertCondition").AlertCondition = null as any;
utilities.lazyLoad(exports, ["AlertCondition"], () => require("./alertCondition"));

export { BrokenLinksMonitorArgs, BrokenLinksMonitorState } from "./brokenLinksMonitor";
export type BrokenLinksMonitor = import("./brokenLinksMonitor").BrokenLinksMonitor;
export const BrokenLinksMonitor: typeof import("./brokenLinksMonitor").BrokenLinksMonitor = null as any;
utilities.lazyLoad(exports, ["BrokenLinksMonitor"], () => require("./brokenLinksMonitor"));

export { CertCheckMonitorArgs, CertCheckMonitorState } from "./certCheckMonitor";
export type CertCheckMonitor = import("./certCheckMonitor").CertCheckMonitor;
export const CertCheckMonitor: typeof import("./certCheckMonitor").CertCheckMonitor = null as any;
utilities.lazyLoad(exports, ["CertCheckMonitor"], () => require("./certCheckMonitor"));

export { GetPrivateLocationArgs, GetPrivateLocationResult, GetPrivateLocationOutputArgs } from "./getPrivateLocation";
export const getPrivateLocation: typeof import("./getPrivateLocation").getPrivateLocation = null as any;
export const getPrivateLocationOutput: typeof import("./getPrivateLocation").getPrivateLocationOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateLocation","getPrivateLocationOutput"], () => require("./getPrivateLocation"));

export { GetSecureCredentialArgs, GetSecureCredentialResult, GetSecureCredentialOutputArgs } from "./getSecureCredential";
export const getSecureCredential: typeof import("./getSecureCredential").getSecureCredential = null as any;
export const getSecureCredentialOutput: typeof import("./getSecureCredential").getSecureCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getSecureCredential","getSecureCredentialOutput"], () => require("./getSecureCredential"));

export { MonitorArgs, MonitorState } from "./monitor";
export type Monitor = import("./monitor").Monitor;
export const Monitor: typeof import("./monitor").Monitor = null as any;
utilities.lazyLoad(exports, ["Monitor"], () => require("./monitor"));

export { MultiLocationAlertConditionArgs, MultiLocationAlertConditionState } from "./multiLocationAlertCondition";
export type MultiLocationAlertCondition = import("./multiLocationAlertCondition").MultiLocationAlertCondition;
export const MultiLocationAlertCondition: typeof import("./multiLocationAlertCondition").MultiLocationAlertCondition = null as any;
utilities.lazyLoad(exports, ["MultiLocationAlertCondition"], () => require("./multiLocationAlertCondition"));

export { PrivateLocationArgs, PrivateLocationState } from "./privateLocation";
export type PrivateLocation = import("./privateLocation").PrivateLocation;
export const PrivateLocation: typeof import("./privateLocation").PrivateLocation = null as any;
utilities.lazyLoad(exports, ["PrivateLocation"], () => require("./privateLocation"));

export { ScriptMonitorArgs, ScriptMonitorState } from "./scriptMonitor";
export type ScriptMonitor = import("./scriptMonitor").ScriptMonitor;
export const ScriptMonitor: typeof import("./scriptMonitor").ScriptMonitor = null as any;
utilities.lazyLoad(exports, ["ScriptMonitor"], () => require("./scriptMonitor"));

export { SecureCredentialArgs, SecureCredentialState } from "./secureCredential";
export type SecureCredential = import("./secureCredential").SecureCredential;
export const SecureCredential: typeof import("./secureCredential").SecureCredential = null as any;
utilities.lazyLoad(exports, ["SecureCredential"], () => require("./secureCredential"));

export { StepMonitorArgs, StepMonitorState } from "./stepMonitor";
export type StepMonitor = import("./stepMonitor").StepMonitor;
export const StepMonitor: typeof import("./stepMonitor").StepMonitor = null as any;
utilities.lazyLoad(exports, ["StepMonitor"], () => require("./stepMonitor"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "newrelic:synthetics/alertCondition:AlertCondition":
                return new AlertCondition(name, <any>undefined, { urn })
            case "newrelic:synthetics/brokenLinksMonitor:BrokenLinksMonitor":
                return new BrokenLinksMonitor(name, <any>undefined, { urn })
            case "newrelic:synthetics/certCheckMonitor:CertCheckMonitor":
                return new CertCheckMonitor(name, <any>undefined, { urn })
            case "newrelic:synthetics/monitor:Monitor":
                return new Monitor(name, <any>undefined, { urn })
            case "newrelic:synthetics/multiLocationAlertCondition:MultiLocationAlertCondition":
                return new MultiLocationAlertCondition(name, <any>undefined, { urn })
            case "newrelic:synthetics/privateLocation:PrivateLocation":
                return new PrivateLocation(name, <any>undefined, { urn })
            case "newrelic:synthetics/scriptMonitor:ScriptMonitor":
                return new ScriptMonitor(name, <any>undefined, { urn })
            case "newrelic:synthetics/secureCredential:SecureCredential":
                return new SecureCredential(name, <any>undefined, { urn })
            case "newrelic:synthetics/stepMonitor:StepMonitor":
                return new StepMonitor(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("newrelic", "synthetics/alertCondition", _module)
pulumi.runtime.registerResourceModule("newrelic", "synthetics/brokenLinksMonitor", _module)
pulumi.runtime.registerResourceModule("newrelic", "synthetics/certCheckMonitor", _module)
pulumi.runtime.registerResourceModule("newrelic", "synthetics/monitor", _module)
pulumi.runtime.registerResourceModule("newrelic", "synthetics/multiLocationAlertCondition", _module)
pulumi.runtime.registerResourceModule("newrelic", "synthetics/privateLocation", _module)
pulumi.runtime.registerResourceModule("newrelic", "synthetics/scriptMonitor", _module)
pulumi.runtime.registerResourceModule("newrelic", "synthetics/secureCredential", _module)
pulumi.runtime.registerResourceModule("newrelic", "synthetics/stepMonitor", _module)
