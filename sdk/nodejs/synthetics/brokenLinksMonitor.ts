// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const foo = new newrelic.synthetics.BrokenLinksMonitor("foo", {
 *     name: "Sample Broken Links Monitor",
 *     uri: "https://www.one.example.com",
 *     locationsPublics: ["AP_SOUTH_1"],
 *     period: "EVERY_6_HOURS",
 *     status: "ENABLED",
 *     runtimeType: "NODE_API",
 *     runtimeTypeVersion: "16.10",
 *     tags: [{
 *         key: "some_key",
 *         values: ["some_value"],
 *     }],
 * });
 * ```
 * See additional examples.
 *
 * ## Additional Examples
 *
 * ### Create a monitor with a private location
 *
 * The below example shows how you can define a private location and attach it to a monitor.
 *
 * > **NOTE:** It can take up to 10 minutes for a private location to become available.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const foo = new newrelic.synthetics.PrivateLocation("foo", {
 *     name: "Sample Private Location",
 *     description: "Sample Private Location Description",
 *     verifiedScriptExecution: false,
 * });
 * const fooBrokenLinksMonitor = new newrelic.synthetics.BrokenLinksMonitor("foo", {
 *     name: "Sample Broken Links Monitor",
 *     uri: "https://www.one.example.com",
 *     locationsPrivates: [foo.id],
 *     period: "EVERY_6_HOURS",
 *     status: "ENABLED",
 *     tags: [{
 *         key: "some_key",
 *         values: ["some_value"],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * A broken links monitor can be imported using its GUID, using the following command.
 *
 * bash
 *
 * ```sh
 * $ pulumi import newrelic:synthetics/brokenLinksMonitor:BrokenLinksMonitor monitor <guid>
 * ```
 */
export class BrokenLinksMonitor extends pulumi.CustomResource {
    /**
     * Get an existing BrokenLinksMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BrokenLinksMonitorState, opts?: pulumi.CustomResourceOptions): BrokenLinksMonitor {
        return new BrokenLinksMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:synthetics/brokenLinksMonitor:BrokenLinksMonitor';

    /**
     * Returns true if the given object is an instance of BrokenLinksMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BrokenLinksMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BrokenLinksMonitor.__pulumiType;
    }

    /**
     * The account in which the Synthetics monitor will be created.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * The unique entity identifier of the monitor in New Relic.
     */
    declare public /*out*/ readonly guid: pulumi.Output<string>;
    /**
     * The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either `locationsPublic` or `locationsPrivate` is required.
     */
    declare public readonly locationsPrivates: pulumi.Output<string[] | undefined>;
    /**
     * The location the monitor will run from. Check out [this page](https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/) for a list of valid public locations. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locationsPublic` or `locationPrivate` is required.
     */
    declare public readonly locationsPublics: pulumi.Output<string[] | undefined>;
    /**
     * The monitor id of the synthetics broken links monitor, not to be confused with the GUID of the monitor.
     */
    declare public /*out*/ readonly monitorId: pulumi.Output<string>;
    /**
     * The name for the monitor.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The interval at which this monitor should run. Valid values are `EVERY_MINUTE`, `EVERY_5_MINUTES`, `EVERY_10_MINUTES`, `EVERY_15_MINUTES`, `EVERY_30_MINUTES`, `EVERY_HOUR`, `EVERY_6_HOURS`, `EVERY_12_HOURS`, or `EVERY_DAY`.
     */
    declare public readonly period: pulumi.Output<string>;
    /**
     * The interval in minutes at which Synthetic monitor should run.
     */
    declare public /*out*/ readonly periodInMinutes: pulumi.Output<number>;
    /**
     * The runtime that the monitor will use to run jobs (`NODE_API`).
     */
    declare public readonly runtimeType: pulumi.Output<string | undefined>;
    /**
     * The specific semver version of the runtime type.
     */
    declare public readonly runtimeTypeVersion: pulumi.Output<string | undefined>;
    /**
     * The run state of the monitor. (`ENABLED` or `DISABLED`).
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * The tags that will be associated with the monitor. See Nested tag blocks below for details
     */
    declare public readonly tags: pulumi.Output<outputs.synthetics.BrokenLinksMonitorTag[] | undefined>;
    /**
     * The URI the monitor runs against.
     */
    declare public readonly uri: pulumi.Output<string>;
    declare public readonly useUnsupportedLegacyRuntime: pulumi.Output<boolean | undefined>;

    /**
     * Create a BrokenLinksMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BrokenLinksMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BrokenLinksMonitorArgs | BrokenLinksMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BrokenLinksMonitorState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["guid"] = state?.guid;
            resourceInputs["locationsPrivates"] = state?.locationsPrivates;
            resourceInputs["locationsPublics"] = state?.locationsPublics;
            resourceInputs["monitorId"] = state?.monitorId;
            resourceInputs["name"] = state?.name;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodInMinutes"] = state?.periodInMinutes;
            resourceInputs["runtimeType"] = state?.runtimeType;
            resourceInputs["runtimeTypeVersion"] = state?.runtimeTypeVersion;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["uri"] = state?.uri;
            resourceInputs["useUnsupportedLegacyRuntime"] = state?.useUnsupportedLegacyRuntime;
        } else {
            const args = argsOrState as BrokenLinksMonitorArgs | undefined;
            if (args?.period === undefined && !opts.urn) {
                throw new Error("Missing required property 'period'");
            }
            if (args?.status === undefined && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if (args?.uri === undefined && !opts.urn) {
                throw new Error("Missing required property 'uri'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["locationsPrivates"] = args?.locationsPrivates;
            resourceInputs["locationsPublics"] = args?.locationsPublics;
            resourceInputs["name"] = args?.name;
            resourceInputs["period"] = args?.period;
            resourceInputs["runtimeType"] = args?.runtimeType;
            resourceInputs["runtimeTypeVersion"] = args?.runtimeTypeVersion;
            resourceInputs["status"] = args?.status;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["uri"] = args?.uri;
            resourceInputs["useUnsupportedLegacyRuntime"] = args?.useUnsupportedLegacyRuntime;
            resourceInputs["guid"] = undefined /*out*/;
            resourceInputs["monitorId"] = undefined /*out*/;
            resourceInputs["periodInMinutes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BrokenLinksMonitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BrokenLinksMonitor resources.
 */
export interface BrokenLinksMonitorState {
    /**
     * The account in which the Synthetics monitor will be created.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The unique entity identifier of the monitor in New Relic.
     */
    guid?: pulumi.Input<string>;
    /**
     * The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either `locationsPublic` or `locationsPrivate` is required.
     */
    locationsPrivates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The location the monitor will run from. Check out [this page](https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/) for a list of valid public locations. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locationsPublic` or `locationPrivate` is required.
     */
    locationsPublics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The monitor id of the synthetics broken links monitor, not to be confused with the GUID of the monitor.
     */
    monitorId?: pulumi.Input<string>;
    /**
     * The name for the monitor.
     */
    name?: pulumi.Input<string>;
    /**
     * The interval at which this monitor should run. Valid values are `EVERY_MINUTE`, `EVERY_5_MINUTES`, `EVERY_10_MINUTES`, `EVERY_15_MINUTES`, `EVERY_30_MINUTES`, `EVERY_HOUR`, `EVERY_6_HOURS`, `EVERY_12_HOURS`, or `EVERY_DAY`.
     */
    period?: pulumi.Input<string>;
    /**
     * The interval in minutes at which Synthetic monitor should run.
     */
    periodInMinutes?: pulumi.Input<number>;
    /**
     * The runtime that the monitor will use to run jobs (`NODE_API`).
     */
    runtimeType?: pulumi.Input<string>;
    /**
     * The specific semver version of the runtime type.
     */
    runtimeTypeVersion?: pulumi.Input<string>;
    /**
     * The run state of the monitor. (`ENABLED` or `DISABLED`).
     */
    status?: pulumi.Input<string>;
    /**
     * The tags that will be associated with the monitor. See Nested tag blocks below for details
     */
    tags?: pulumi.Input<pulumi.Input<inputs.synthetics.BrokenLinksMonitorTag>[]>;
    /**
     * The URI the monitor runs against.
     */
    uri?: pulumi.Input<string>;
    useUnsupportedLegacyRuntime?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a BrokenLinksMonitor resource.
 */
export interface BrokenLinksMonitorArgs {
    /**
     * The account in which the Synthetics monitor will be created.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either `locationsPublic` or `locationsPrivate` is required.
     */
    locationsPrivates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The location the monitor will run from. Check out [this page](https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/) for a list of valid public locations. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locationsPublic` or `locationPrivate` is required.
     */
    locationsPublics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name for the monitor.
     */
    name?: pulumi.Input<string>;
    /**
     * The interval at which this monitor should run. Valid values are `EVERY_MINUTE`, `EVERY_5_MINUTES`, `EVERY_10_MINUTES`, `EVERY_15_MINUTES`, `EVERY_30_MINUTES`, `EVERY_HOUR`, `EVERY_6_HOURS`, `EVERY_12_HOURS`, or `EVERY_DAY`.
     */
    period: pulumi.Input<string>;
    /**
     * The runtime that the monitor will use to run jobs (`NODE_API`).
     */
    runtimeType?: pulumi.Input<string>;
    /**
     * The specific semver version of the runtime type.
     */
    runtimeTypeVersion?: pulumi.Input<string>;
    /**
     * The run state of the monitor. (`ENABLED` or `DISABLED`).
     */
    status: pulumi.Input<string>;
    /**
     * The tags that will be associated with the monitor. See Nested tag blocks below for details
     */
    tags?: pulumi.Input<pulumi.Input<inputs.synthetics.BrokenLinksMonitorTag>[]>;
    /**
     * The URI the monitor runs against.
     */
    uri: pulumi.Input<string>;
    useUnsupportedLegacyRuntime?: pulumi.Input<boolean>;
}
