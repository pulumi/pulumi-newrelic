// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this resource to create, update, and delete a Synthetics Broken Links monitor in New Relic.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const foo = new newrelic.synthetics.BrokenLinksMonitor("foo", {
 *     locationsPublics: ["AP_SOUTH_1"],
 *     period: "EVERY_6_HOURS",
 *     runtimeType: "NODE_API",
 *     runtimeTypeVersion: "16.10",
 *     status: "ENABLED",
 *     tags: [{
 *         key: "some_key",
 *         values: ["some_value"],
 *     }],
 *     uri: "https://www.one.example.com",
 * });
 * ```
 * See additional examples.
 *
 * ## Additional Examples
 *
 * ### Create a monitor with a private location
 *
 * The below example shows how you can define a private location and attach it to a monitor.
 *
 * > **NOTE:** It can take up to 10 minutes for a private location to become available.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const fooPrivateLocation = new newrelic.synthetics.PrivateLocation("fooPrivateLocation", {
 *     description: "Sample Private Location Description",
 *     verifiedScriptExecution: false,
 * });
 * const fooBrokenLinksMonitor = new newrelic.synthetics.BrokenLinksMonitor("fooBrokenLinksMonitor", {
 *     uri: "https://www.one.example.com",
 *     locationsPrivates: [fooPrivateLocation.id],
 *     period: "EVERY_6_HOURS",
 *     status: "ENABLED",
 *     tags: [{
 *         key: "some_key",
 *         values: ["some_value"],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * A broken links monitor can be imported using its GUID, using the following command.
 *
 * bash
 *
 * ```sh
 * $ pulumi import newrelic:synthetics/brokenLinksMonitor:BrokenLinksMonitor monitor <guid>
 * ```
 */
export class BrokenLinksMonitor extends pulumi.CustomResource {
    /**
     * Get an existing BrokenLinksMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BrokenLinksMonitorState, opts?: pulumi.CustomResourceOptions): BrokenLinksMonitor {
        return new BrokenLinksMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:synthetics/brokenLinksMonitor:BrokenLinksMonitor';

    /**
     * Returns true if the given object is an instance of BrokenLinksMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BrokenLinksMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BrokenLinksMonitor.__pulumiType;
    }

    /**
     * The account in which the Synthetics monitor will be created.
     */
    public readonly accountId!: pulumi.Output<number>;
    /**
     * The unique entity identifier of the monitor in New Relic.
     */
    public /*out*/ readonly guid!: pulumi.Output<string>;
    /**
     * The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either `locationsPublic` or `locationsPrivate` is required.
     */
    public readonly locationsPrivates!: pulumi.Output<string[] | undefined>;
    /**
     * The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locationsPublic` or `locationPrivate` is required.
     */
    public readonly locationsPublics!: pulumi.Output<string[] | undefined>;
    /**
     * The name for the monitor.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.
     */
    public readonly period!: pulumi.Output<string>;
    /**
     * The interval in minutes at which Synthetic monitor should run.
     */
    public /*out*/ readonly periodInMinutes!: pulumi.Output<number>;
    /**
     * The runtime that the monitor will use to run jobs.
     */
    public readonly runtimeType!: pulumi.Output<string | undefined>;
    /**
     * The specific version of the runtime type selected.
     *
     * > **NOTE:** Currently, the values of `runtimeType` and `runtimeTypeVersion` supported by this resource are `NODE_API` and `16.10` respectively. In order to run the monitor in the new runtime, both `runtimeType` and `runtimeTypeVersion` need to be specified; however, specifying neither of these attributes would set this monitor to use the legacy runtime. It may also be noted that the runtime opted for would only be effective with private locations. For public locations, all traffic has been shifted to the new runtime, irrespective of the selection made.
     */
    public readonly runtimeTypeVersion!: pulumi.Output<string | undefined>;
    /**
     * The monitor status (ENABLED or DISABLED).
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The tags that will be associated with the monitor. See Nested tag blocks below for details
     */
    public readonly tags!: pulumi.Output<outputs.synthetics.BrokenLinksMonitorTag[] | undefined>;
    /**
     * The URI the monitor runs against.
     */
    public readonly uri!: pulumi.Output<string>;

    /**
     * Create a BrokenLinksMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BrokenLinksMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BrokenLinksMonitorArgs | BrokenLinksMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BrokenLinksMonitorState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["guid"] = state ? state.guid : undefined;
            resourceInputs["locationsPrivates"] = state ? state.locationsPrivates : undefined;
            resourceInputs["locationsPublics"] = state ? state.locationsPublics : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodInMinutes"] = state ? state.periodInMinutes : undefined;
            resourceInputs["runtimeType"] = state ? state.runtimeType : undefined;
            resourceInputs["runtimeTypeVersion"] = state ? state.runtimeTypeVersion : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as BrokenLinksMonitorArgs | undefined;
            if ((!args || args.period === undefined) && !opts.urn) {
                throw new Error("Missing required property 'period'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.uri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uri'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["locationsPrivates"] = args ? args.locationsPrivates : undefined;
            resourceInputs["locationsPublics"] = args ? args.locationsPublics : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["runtimeType"] = args ? args.runtimeType : undefined;
            resourceInputs["runtimeTypeVersion"] = args ? args.runtimeTypeVersion : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["uri"] = args ? args.uri : undefined;
            resourceInputs["guid"] = undefined /*out*/;
            resourceInputs["periodInMinutes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BrokenLinksMonitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BrokenLinksMonitor resources.
 */
export interface BrokenLinksMonitorState {
    /**
     * The account in which the Synthetics monitor will be created.
     */
    accountId?: pulumi.Input<number>;
    /**
     * The unique entity identifier of the monitor in New Relic.
     */
    guid?: pulumi.Input<string>;
    /**
     * The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either `locationsPublic` or `locationsPrivate` is required.
     */
    locationsPrivates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locationsPublic` or `locationPrivate` is required.
     */
    locationsPublics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name for the monitor.
     */
    name?: pulumi.Input<string>;
    /**
     * The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.
     */
    period?: pulumi.Input<string>;
    /**
     * The interval in minutes at which Synthetic monitor should run.
     */
    periodInMinutes?: pulumi.Input<number>;
    /**
     * The runtime that the monitor will use to run jobs.
     */
    runtimeType?: pulumi.Input<string>;
    /**
     * The specific version of the runtime type selected.
     *
     * > **NOTE:** Currently, the values of `runtimeType` and `runtimeTypeVersion` supported by this resource are `NODE_API` and `16.10` respectively. In order to run the monitor in the new runtime, both `runtimeType` and `runtimeTypeVersion` need to be specified; however, specifying neither of these attributes would set this monitor to use the legacy runtime. It may also be noted that the runtime opted for would only be effective with private locations. For public locations, all traffic has been shifted to the new runtime, irrespective of the selection made.
     */
    runtimeTypeVersion?: pulumi.Input<string>;
    /**
     * The monitor status (ENABLED or DISABLED).
     */
    status?: pulumi.Input<string>;
    /**
     * The tags that will be associated with the monitor. See Nested tag blocks below for details
     */
    tags?: pulumi.Input<pulumi.Input<inputs.synthetics.BrokenLinksMonitorTag>[]>;
    /**
     * The URI the monitor runs against.
     */
    uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BrokenLinksMonitor resource.
 */
export interface BrokenLinksMonitorArgs {
    /**
     * The account in which the Synthetics monitor will be created.
     */
    accountId?: pulumi.Input<number>;
    /**
     * The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either `locationsPublic` or `locationsPrivate` is required.
     */
    locationsPrivates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locationsPublic` or `locationPrivate` is required.
     */
    locationsPublics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name for the monitor.
     */
    name?: pulumi.Input<string>;
    /**
     * The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.
     */
    period: pulumi.Input<string>;
    /**
     * The runtime that the monitor will use to run jobs.
     */
    runtimeType?: pulumi.Input<string>;
    /**
     * The specific version of the runtime type selected.
     *
     * > **NOTE:** Currently, the values of `runtimeType` and `runtimeTypeVersion` supported by this resource are `NODE_API` and `16.10` respectively. In order to run the monitor in the new runtime, both `runtimeType` and `runtimeTypeVersion` need to be specified; however, specifying neither of these attributes would set this monitor to use the legacy runtime. It may also be noted that the runtime opted for would only be effective with private locations. For public locations, all traffic has been shifted to the new runtime, irrespective of the selection made.
     */
    runtimeTypeVersion?: pulumi.Input<string>;
    /**
     * The monitor status (ENABLED or DISABLED).
     */
    status: pulumi.Input<string>;
    /**
     * The tags that will be associated with the monitor. See Nested tag blocks below for details
     */
    tags?: pulumi.Input<pulumi.Input<inputs.synthetics.BrokenLinksMonitorTag>[]>;
    /**
     * The URI the monitor runs against.
     */
    uri: pulumi.Input<string>;
}
