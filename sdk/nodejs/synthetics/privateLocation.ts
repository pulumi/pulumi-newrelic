// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this resource to create and manage New Relic Synthetic private location.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const location = new newrelic.synthetics.PrivateLocation("location", {
 *     description: "The private location description",
 *     name: "The name of the private location",
 * });
 * ```
 *
 * ## Import
 *
 * A Synthetics private location can be imported using the `guid`
 *
 * ```sh
 * $ pulumi import newrelic:synthetics/privateLocation:PrivateLocation location GUID
 * ```
 */
export class PrivateLocation extends pulumi.CustomResource {
    /**
     * Get an existing PrivateLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivateLocationState, opts?: pulumi.CustomResourceOptions): PrivateLocation {
        return new PrivateLocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:synthetics/privateLocation:PrivateLocation';

    /**
     * Returns true if the given object is an instance of PrivateLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivateLocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivateLocation.__pulumiType;
    }

    /**
     * The account in which the private location will be created.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * The private location description.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The private location globally unique identifier.
     */
    declare public /*out*/ readonly domainId: pulumi.Output<string>;
    /**
     * The unique client identifier for the private location in New Relic. Same as `id`.
     */
    declare public /*out*/ readonly guid: pulumi.Output<string>;
    /**
     * The private locations key.
     */
    declare public /*out*/ readonly key: pulumi.Output<string>;
    /**
     * An alternate identifier based on name.
     */
    declare public /*out*/ readonly locationId: pulumi.Output<string>;
    /**
     * The name of the private location.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The private location requires a password to edit if value is true. Defaults to `false`
     */
    declare public readonly verifiedScriptExecution: pulumi.Output<boolean | undefined>;

    /**
     * Create a PrivateLocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivateLocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivateLocationArgs | PrivateLocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivateLocationState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["description"] = state?.description;
            resourceInputs["domainId"] = state?.domainId;
            resourceInputs["guid"] = state?.guid;
            resourceInputs["key"] = state?.key;
            resourceInputs["locationId"] = state?.locationId;
            resourceInputs["name"] = state?.name;
            resourceInputs["verifiedScriptExecution"] = state?.verifiedScriptExecution;
        } else {
            const args = argsOrState as PrivateLocationArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["verifiedScriptExecution"] = args?.verifiedScriptExecution;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["guid"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
            resourceInputs["locationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrivateLocation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PrivateLocation resources.
 */
export interface PrivateLocationState {
    /**
     * The account in which the private location will be created.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The private location description.
     */
    description?: pulumi.Input<string>;
    /**
     * The private location globally unique identifier.
     */
    domainId?: pulumi.Input<string>;
    /**
     * The unique client identifier for the private location in New Relic. Same as `id`.
     */
    guid?: pulumi.Input<string>;
    /**
     * The private locations key.
     */
    key?: pulumi.Input<string>;
    /**
     * An alternate identifier based on name.
     */
    locationId?: pulumi.Input<string>;
    /**
     * The name of the private location.
     */
    name?: pulumi.Input<string>;
    /**
     * The private location requires a password to edit if value is true. Defaults to `false`
     */
    verifiedScriptExecution?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PrivateLocation resource.
 */
export interface PrivateLocationArgs {
    /**
     * The account in which the private location will be created.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The private location description.
     */
    description: pulumi.Input<string>;
    /**
     * The name of the private location.
     */
    name?: pulumi.Input<string>;
    /**
     * The private location requires a password to edit if value is true. Defaults to `false`
     */
    verifiedScriptExecution?: pulumi.Input<boolean>;
}
