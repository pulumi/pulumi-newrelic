// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this resource to update a synthetics monitor script in New Relic.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as newrelic from "@pulumi/newrelic";
 * import * as terraform_template from "@pulumi/terraform-template";
 * 
 * const fooScriptFile = pulumi.output(terraform_template.getFile({
 *     template: fs.readFileSync(`./foo_script.tpl`, "utf-8"),
 * }));
 * const fooScriptMonitorScript = new newrelic.synthetics.MonitorScript("foo_script", {
 *     monitorId: newrelic_synthetics_monitor_foo.id,
 *     text: fooScriptFile.rendered,
 * });
 * ```
 */
export class MonitorScript extends pulumi.CustomResource {
    /**
     * Get an existing MonitorScript resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorScriptState, opts?: pulumi.CustomResourceOptions): MonitorScript {
        return new MonitorScript(name, <any>state, { ...opts, id: id });
    }

    /**
     * The ID of the monitor to attach the script to.
     */
    public readonly monitorId: pulumi.Output<string>;
    /**
     * plaintext of the monitor script.
     */
    public readonly text: pulumi.Output<string>;

    /**
     * Create a MonitorScript resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorScriptArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorScriptArgs | MonitorScriptState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: MonitorScriptState = argsOrState as MonitorScriptState | undefined;
            inputs["monitorId"] = state ? state.monitorId : undefined;
            inputs["text"] = state ? state.text : undefined;
        } else {
            const args = argsOrState as MonitorScriptArgs | undefined;
            if (!args || args.monitorId === undefined) {
                throw new Error("Missing required property 'monitorId'");
            }
            if (!args || args.text === undefined) {
                throw new Error("Missing required property 'text'");
            }
            inputs["monitorId"] = args ? args.monitorId : undefined;
            inputs["text"] = args ? args.text : undefined;
        }
        super("newrelic:synthetics/monitorScript:MonitorScript", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MonitorScript resources.
 */
export interface MonitorScriptState {
    /**
     * The ID of the monitor to attach the script to.
     */
    readonly monitorId?: pulumi.Input<string>;
    /**
     * plaintext of the monitor script.
     */
    readonly text?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MonitorScript resource.
 */
export interface MonitorScriptArgs {
    /**
     * The ID of the monitor to attach the script to.
     */
    readonly monitorId: pulumi.Input<string>;
    /**
     * plaintext of the monitor script.
     */
    readonly text: pulumi.Input<string>;
}
