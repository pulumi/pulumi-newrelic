// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this resource to link an Oracle Cloud Infrastructure (OCI) account to New Relic.
 *
 * This setup is used to create a provider account with OCI credentials, establishing a relationship between Oracle and New Relic. Additionally, as part of this integration, we store WIF (Workload Identity Federation) credentials which are further used for fetching data and validations, and vault OCIDs corresponding to the vault resource where the New Relic ingest and user keys are stored in the OCI console.
 *
 * ## Prerequisites
 *
 * For the `newrelic.cloud.OciLinkAccount` resource to work properly, you need an OCI tenancy with IAM permissions to create and manage the identity artifacts (client/application, secrets, compartments, and service user) referenced below. OCI provides enterprise-grade cloud services across multiple global regions.
 *
 * > NOTE: Before using this resource, ensure the New Relic provider is configured with valid credentials.\
 * See Getting Started: New Relic provider guide
 *
 * If you encounter issues or bugs, please open an issue in the GitHub repository.
 *
 * ### Workload Identity Federation (WIF) Attributes
 *
 * The following arguments rely on an OCI Identity Domain OAuth2 client set up for workload identity federation (identity propagation): `ociClientId`, `ociClientSecret`, `ociDomainUrl`, and `ociSvcUserName`.
 *
 * To create and retrieve these values, follow Oracle's guidance for configuring identity propagation / JWT token exchange:
 *
 * [Oracle documentation: Create an identity propagation trust (JWT token exchange)](https://docs.oracle.com/en-us/iaas/Content/Identity/api-getstarted/json_web_token_exchange.htm#jwt_token_exchange__create-identity-propagation-trust)
 *
 * WIF configuration steps:
 * 1. Create (or identify) an Identity Domain and register an OAuth2 confidential application (client) to represent New Relic ingestion.
 * 2. Generate / record the client ID (`ociClientId`) and client secret (`ociClientSecret`). Store the secret securely (e.g., in OCI Vault; reference its OCID via `ingestVaultOcid` / `userVaultOcid` if desired).
 * 3. Use the Identity Domain base URL as `ociDomainUrl` (format: `https://idcs-<hash>.identity.oraclecloud.com`).
 * 4. Provide / map a service user (or principal) used for workload identity federation as `ociSvcUserName`.
 * 5. Ensure the client has the required scopes and the tenancy policies allow the token exchange.
 *
 * > TIP: Rotating the OAuth2 client secret only requires updating `ociClientSecret`; it does not force resource replacement.
 *
 * ## Example Usage
 *
 * Minimal example (required arguments for creation):
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const example = new newrelic.cloud.OciLinkAccount("example", {
 *     accountId: "1234567",
 *     tenantId: "ocid1.tenancy.oc1..aaaaaaaaexample",
 *     name: "my-oci-link",
 *     compartmentOcid: "ocid1.compartment.oc1..bbbbbbbbexample",
 *     ociClientId: "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",
 *     ociClientSecret: ociClientSecret,
 *     ociDomainUrl: "https://idcs-1234567890abcdef.identity.oraclecloud.com",
 *     ociHomeRegion: "us-ashburn-1",
 *     ociSvcUserName: "svc-newrelic-collector",
 * });
 * ```
 *
 * Example including optional secret references and update-only fields:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const full = new newrelic.cloud.OciLinkAccount("full", {
 *     name: "my-oci-link-full",
 *     tenantId: "ocid1.tenancy.oc1..aaaaaaaaexample",
 *     compartmentOcid: "ocid1.compartment.oc1..bbbbbbbbexample",
 *     ociClientId: "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",
 *     ociClientSecret: ociClientSecret,
 *     ociDomainUrl: "https://idcs-1234567890abcdef.identity.oraclecloud.com",
 *     ociHomeRegion: "us-ashburn-1",
 *     ociSvcUserName: "svc-newrelic-collector",
 *     ingestVaultOcid: "ocid1.vaultsecret.oc1..ccccccccexample",
 *     userVaultOcid: "ocid1.vaultsecret.oc1..ddddddddexample",
 *     instrumentationType: "METRICS,LOGS",
 *     ociRegion: "us-phoenix-1",
 *     metricStackOcid: "ocid1.stack.oc1..eeeeeeeeexample",
 *     loggingStackOcid: "ocid1.stack.oc1..ffffffloggingstack",
 * });
 * ```
 *
 * ## Import
 *
 * Linked OCI accounts can be imported using the `id`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import newrelic:cloud/ociLinkAccount:OciLinkAccount foo <id>
 * ```
 */
export class OciLinkAccount extends pulumi.CustomResource {
    /**
     * Get an existing OciLinkAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OciLinkAccountState, opts?: pulumi.CustomResourceOptions): OciLinkAccount {
        return new OciLinkAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:cloud/ociLinkAccount:OciLinkAccount';

    /**
     * Returns true if the given object is an instance of OciLinkAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OciLinkAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OciLinkAccount.__pulumiType;
    }

    /**
     * New Relic account to operate on. Overrides the provider-level `accountId`. If omitted, use the provider default or `NEW_RELIC_ACCOUNT_ID`.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * OCI compartment OCID representing (or containing) the monitored resources/newrelic compartment.
     */
    declare public readonly compartmentOcid: pulumi.Output<string>;
    /**
     * Vault secret OCID containing an ingest secret.
     */
    declare public readonly ingestVaultOcid: pulumi.Output<string | undefined>;
    /**
     * Specifies the type of integration, such as metrics, logs, or a combination of logs and metrics (e.g., `METRICS`, `LOGS`, `METRICS,LOGS`).
     */
    declare public readonly instrumentationType: pulumi.Output<string | undefined>;
    /**
     * The Logging stack identifier for the OCI account.
     */
    declare public readonly loggingStackOcid: pulumi.Output<string | undefined>;
    /**
     * Metric stack OCID (ignored on create, applied on update).
     */
    declare public readonly metricStackOcid: pulumi.Output<string | undefined>;
    /**
     * Display name for the linked account.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * OCI Identity Domain (IDCS) OAuth2 client ID used for workload identity federation.
     */
    declare public readonly ociClientId: pulumi.Output<string>;
    /**
     * OAuth2 client secret. Not displayed in plans or state outputs.
     */
    declare public readonly ociClientSecret: pulumi.Output<string>;
    /**
     * Base URL of the OCI Identity Domain (e.g. `https://idcs-<hash>.identity.oraclecloud.com`).
     */
    declare public readonly ociDomainUrl: pulumi.Output<string>;
    /**
     * Home region of the tenancy (e.g. `us-ashburn-1`).
     */
    declare public readonly ociHomeRegion: pulumi.Output<string>;
    /**
     * OCI region for the linkage (ignored on create, applied on update).
     */
    declare public readonly ociRegion: pulumi.Output<string | undefined>;
    /**
     * Service user name associated with the WIF configuration.
     */
    declare public readonly ociSvcUserName: pulumi.Output<string>;
    /**
     * OCI tenancy OCID (root tenancy). Changing forces a new linked account.
     */
    declare public readonly tenantId: pulumi.Output<string>;
    /**
     * Vault secret OCID containing a user or auxiliary secret.
     */
    declare public readonly userVaultOcid: pulumi.Output<string | undefined>;

    /**
     * Create a OciLinkAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OciLinkAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OciLinkAccountArgs | OciLinkAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OciLinkAccountState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["compartmentOcid"] = state?.compartmentOcid;
            resourceInputs["ingestVaultOcid"] = state?.ingestVaultOcid;
            resourceInputs["instrumentationType"] = state?.instrumentationType;
            resourceInputs["loggingStackOcid"] = state?.loggingStackOcid;
            resourceInputs["metricStackOcid"] = state?.metricStackOcid;
            resourceInputs["name"] = state?.name;
            resourceInputs["ociClientId"] = state?.ociClientId;
            resourceInputs["ociClientSecret"] = state?.ociClientSecret;
            resourceInputs["ociDomainUrl"] = state?.ociDomainUrl;
            resourceInputs["ociHomeRegion"] = state?.ociHomeRegion;
            resourceInputs["ociRegion"] = state?.ociRegion;
            resourceInputs["ociSvcUserName"] = state?.ociSvcUserName;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["userVaultOcid"] = state?.userVaultOcid;
        } else {
            const args = argsOrState as OciLinkAccountArgs | undefined;
            if (args?.compartmentOcid === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentOcid'");
            }
            if (args?.ociClientId === undefined && !opts.urn) {
                throw new Error("Missing required property 'ociClientId'");
            }
            if (args?.ociClientSecret === undefined && !opts.urn) {
                throw new Error("Missing required property 'ociClientSecret'");
            }
            if (args?.ociDomainUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'ociDomainUrl'");
            }
            if (args?.ociHomeRegion === undefined && !opts.urn) {
                throw new Error("Missing required property 'ociHomeRegion'");
            }
            if (args?.ociSvcUserName === undefined && !opts.urn) {
                throw new Error("Missing required property 'ociSvcUserName'");
            }
            if (args?.tenantId === undefined && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["compartmentOcid"] = args?.compartmentOcid;
            resourceInputs["ingestVaultOcid"] = args?.ingestVaultOcid;
            resourceInputs["instrumentationType"] = args?.instrumentationType;
            resourceInputs["loggingStackOcid"] = args?.loggingStackOcid;
            resourceInputs["metricStackOcid"] = args?.metricStackOcid;
            resourceInputs["name"] = args?.name;
            resourceInputs["ociClientId"] = args?.ociClientId;
            resourceInputs["ociClientSecret"] = args?.ociClientSecret ? pulumi.secret(args.ociClientSecret) : undefined;
            resourceInputs["ociDomainUrl"] = args?.ociDomainUrl;
            resourceInputs["ociHomeRegion"] = args?.ociHomeRegion;
            resourceInputs["ociRegion"] = args?.ociRegion;
            resourceInputs["ociSvcUserName"] = args?.ociSvcUserName;
            resourceInputs["tenantId"] = args?.tenantId;
            resourceInputs["userVaultOcid"] = args?.userVaultOcid;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["ociClientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(OciLinkAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OciLinkAccount resources.
 */
export interface OciLinkAccountState {
    /**
     * New Relic account to operate on. Overrides the provider-level `accountId`. If omitted, use the provider default or `NEW_RELIC_ACCOUNT_ID`.
     */
    accountId?: pulumi.Input<string>;
    /**
     * OCI compartment OCID representing (or containing) the monitored resources/newrelic compartment.
     */
    compartmentOcid?: pulumi.Input<string>;
    /**
     * Vault secret OCID containing an ingest secret.
     */
    ingestVaultOcid?: pulumi.Input<string>;
    /**
     * Specifies the type of integration, such as metrics, logs, or a combination of logs and metrics (e.g., `METRICS`, `LOGS`, `METRICS,LOGS`).
     */
    instrumentationType?: pulumi.Input<string>;
    /**
     * The Logging stack identifier for the OCI account.
     */
    loggingStackOcid?: pulumi.Input<string>;
    /**
     * Metric stack OCID (ignored on create, applied on update).
     */
    metricStackOcid?: pulumi.Input<string>;
    /**
     * Display name for the linked account.
     */
    name?: pulumi.Input<string>;
    /**
     * OCI Identity Domain (IDCS) OAuth2 client ID used for workload identity federation.
     */
    ociClientId?: pulumi.Input<string>;
    /**
     * OAuth2 client secret. Not displayed in plans or state outputs.
     */
    ociClientSecret?: pulumi.Input<string>;
    /**
     * Base URL of the OCI Identity Domain (e.g. `https://idcs-<hash>.identity.oraclecloud.com`).
     */
    ociDomainUrl?: pulumi.Input<string>;
    /**
     * Home region of the tenancy (e.g. `us-ashburn-1`).
     */
    ociHomeRegion?: pulumi.Input<string>;
    /**
     * OCI region for the linkage (ignored on create, applied on update).
     */
    ociRegion?: pulumi.Input<string>;
    /**
     * Service user name associated with the WIF configuration.
     */
    ociSvcUserName?: pulumi.Input<string>;
    /**
     * OCI tenancy OCID (root tenancy). Changing forces a new linked account.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Vault secret OCID containing a user or auxiliary secret.
     */
    userVaultOcid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OciLinkAccount resource.
 */
export interface OciLinkAccountArgs {
    /**
     * New Relic account to operate on. Overrides the provider-level `accountId`. If omitted, use the provider default or `NEW_RELIC_ACCOUNT_ID`.
     */
    accountId?: pulumi.Input<string>;
    /**
     * OCI compartment OCID representing (or containing) the monitored resources/newrelic compartment.
     */
    compartmentOcid: pulumi.Input<string>;
    /**
     * Vault secret OCID containing an ingest secret.
     */
    ingestVaultOcid?: pulumi.Input<string>;
    /**
     * Specifies the type of integration, such as metrics, logs, or a combination of logs and metrics (e.g., `METRICS`, `LOGS`, `METRICS,LOGS`).
     */
    instrumentationType?: pulumi.Input<string>;
    /**
     * The Logging stack identifier for the OCI account.
     */
    loggingStackOcid?: pulumi.Input<string>;
    /**
     * Metric stack OCID (ignored on create, applied on update).
     */
    metricStackOcid?: pulumi.Input<string>;
    /**
     * Display name for the linked account.
     */
    name?: pulumi.Input<string>;
    /**
     * OCI Identity Domain (IDCS) OAuth2 client ID used for workload identity federation.
     */
    ociClientId: pulumi.Input<string>;
    /**
     * OAuth2 client secret. Not displayed in plans or state outputs.
     */
    ociClientSecret: pulumi.Input<string>;
    /**
     * Base URL of the OCI Identity Domain (e.g. `https://idcs-<hash>.identity.oraclecloud.com`).
     */
    ociDomainUrl: pulumi.Input<string>;
    /**
     * Home region of the tenancy (e.g. `us-ashburn-1`).
     */
    ociHomeRegion: pulumi.Input<string>;
    /**
     * OCI region for the linkage (ignored on create, applied on update).
     */
    ociRegion?: pulumi.Input<string>;
    /**
     * Service user name associated with the WIF configuration.
     */
    ociSvcUserName: pulumi.Input<string>;
    /**
     * OCI tenancy OCID (root tenancy). Changing forces a new linked account.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Vault secret OCID containing a user or auxiliary secret.
     */
    userVaultOcid?: pulumi.Input<string>;
}
