// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this resource to create a new Key Transaction in New Relic.
 *
 * > **NOTE:** For more information on Key Transactions, head over to [this page](https://docs.newrelic.com/docs/apm/transactions/key-transactions/introduction-key-transactions/) in New Relic's docs.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const foo = new newrelic.KeyTransaction("foo", {
 *     applicationGuid: "MzgfNjUyNnxBUE19QVBQTElDQVHJT068NTUfNDT4MjUy",
 *     apdexIndex: 0.5,
 *     browserApdexTarget: 0.5,
 *     metricName: "WebTransaction/Function/__main__:foo_bar",
 *     name: "Sample Key Transaction",
 * });
 * ```
 *
 * ## Import
 *
 * A Key Transaction in New Relic may be imported into Terraform using its GUID specified in the `<id>` field, in the following command.
 *
 * bash
 *
 * ```sh
 * $ pulumi import newrelic:index/keyTransaction:KeyTransaction foo <id>
 * ```
 */
export class KeyTransaction extends pulumi.CustomResource {
    /**
     * Get an existing KeyTransaction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyTransactionState, opts?: pulumi.CustomResourceOptions): KeyTransaction {
        return new KeyTransaction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:index/keyTransaction:KeyTransaction';

    /**
     * Returns true if the given object is an instance of KeyTransaction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyTransaction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyTransaction.__pulumiType;
    }

    /**
     * A decimal value, measuring user satisfaction with response times, ranging from 0 (frustrated) to 1 (satisfied).
     */
    public readonly apdexIndex!: pulumi.Output<number>;
    /**
     * The GUID of the APM Application comprising transactions, of which one would be made a key transaction.
     */
    public readonly applicationGuid!: pulumi.Output<string>;
    /**
     * A decimal value representing the response time threshold for satisfactory experience (e.g., 0.5 seconds).
     *
     * > **NOTE:** It may be noted that the `metricName` and `applicationGuid` of a Key Transaction _cannot_ be updated in a key transaction that has already been created; since this is not supported. As a consequence, altering the values of `applicationGuid` and/or `metricName` of a `newrelic.KeyTransaction` resource created (to try updating these values) would result in `pulumi preview` prompting a forced destruction and re-creation of the resource.
     */
    public readonly browserApdexTarget!: pulumi.Output<number>;
    /**
     * The domain of the entity monitored by the key transaction.
     */
    public /*out*/ readonly domain!: pulumi.Output<string>;
    /**
     * The name of the underlying metric monitored by the key transaction to be created.
     */
    public readonly metricName!: pulumi.Output<string>;
    /**
     * The name of the key transaction.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The type of the entity monitored by the key transaction.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a KeyTransaction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyTransactionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyTransactionArgs | KeyTransactionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyTransactionState | undefined;
            resourceInputs["apdexIndex"] = state ? state.apdexIndex : undefined;
            resourceInputs["applicationGuid"] = state ? state.applicationGuid : undefined;
            resourceInputs["browserApdexTarget"] = state ? state.browserApdexTarget : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["metricName"] = state ? state.metricName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as KeyTransactionArgs | undefined;
            if ((!args || args.apdexIndex === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apdexIndex'");
            }
            if ((!args || args.applicationGuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationGuid'");
            }
            if ((!args || args.browserApdexTarget === undefined) && !opts.urn) {
                throw new Error("Missing required property 'browserApdexTarget'");
            }
            if ((!args || args.metricName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricName'");
            }
            resourceInputs["apdexIndex"] = args ? args.apdexIndex : undefined;
            resourceInputs["applicationGuid"] = args ? args.applicationGuid : undefined;
            resourceInputs["browserApdexTarget"] = args ? args.browserApdexTarget : undefined;
            resourceInputs["metricName"] = args ? args.metricName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["domain"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyTransaction.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KeyTransaction resources.
 */
export interface KeyTransactionState {
    /**
     * A decimal value, measuring user satisfaction with response times, ranging from 0 (frustrated) to 1 (satisfied).
     */
    apdexIndex?: pulumi.Input<number>;
    /**
     * The GUID of the APM Application comprising transactions, of which one would be made a key transaction.
     */
    applicationGuid?: pulumi.Input<string>;
    /**
     * A decimal value representing the response time threshold for satisfactory experience (e.g., 0.5 seconds).
     *
     * > **NOTE:** It may be noted that the `metricName` and `applicationGuid` of a Key Transaction _cannot_ be updated in a key transaction that has already been created; since this is not supported. As a consequence, altering the values of `applicationGuid` and/or `metricName` of a `newrelic.KeyTransaction` resource created (to try updating these values) would result in `pulumi preview` prompting a forced destruction and re-creation of the resource.
     */
    browserApdexTarget?: pulumi.Input<number>;
    /**
     * The domain of the entity monitored by the key transaction.
     */
    domain?: pulumi.Input<string>;
    /**
     * The name of the underlying metric monitored by the key transaction to be created.
     */
    metricName?: pulumi.Input<string>;
    /**
     * The name of the key transaction.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of the entity monitored by the key transaction.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeyTransaction resource.
 */
export interface KeyTransactionArgs {
    /**
     * A decimal value, measuring user satisfaction with response times, ranging from 0 (frustrated) to 1 (satisfied).
     */
    apdexIndex: pulumi.Input<number>;
    /**
     * The GUID of the APM Application comprising transactions, of which one would be made a key transaction.
     */
    applicationGuid: pulumi.Input<string>;
    /**
     * A decimal value representing the response time threshold for satisfactory experience (e.g., 0.5 seconds).
     *
     * > **NOTE:** It may be noted that the `metricName` and `applicationGuid` of a Key Transaction _cannot_ be updated in a key transaction that has already been created; since this is not supported. As a consequence, altering the values of `applicationGuid` and/or `metricName` of a `newrelic.KeyTransaction` resource created (to try updating these values) would result in `pulumi preview` prompting a forced destruction and re-creation of the resource.
     */
    browserApdexTarget: pulumi.Input<number>;
    /**
     * The name of the underlying metric monitored by the key transaction to be created.
     */
    metricName: pulumi.Input<string>;
    /**
     * The name of the key transaction.
     */
    name?: pulumi.Input<string>;
}
