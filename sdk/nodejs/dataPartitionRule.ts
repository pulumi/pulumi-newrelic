// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this resource to create, update and delete New Relic Data partition rule.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const foo = new newrelic.DataPartitionRule("foo", {
 *     description: "description",
 *     enabled: true,
 *     nrql: "logtype='node'",
 *     retentionPolicy: "STANDARD",
 *     targetDataPartition: "Log_name",
 * });
 * ```
 * ## Additional Information
 *
 * More details about the data partition can be found [here](https://docs.newrelic.com/docs/logs/ui-data/data-partitions/)
 *
 * ## Import
 *
 * New Relic data partition rule can be imported using the rule ID, e.g. bash
 *
 * ```sh
 *  $ pulumi import newrelic:index/dataPartitionRule:DataPartitionRule foo <id>
 * ```
 */
export class DataPartitionRule extends pulumi.CustomResource {
    /**
     * Get an existing DataPartitionRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataPartitionRuleState, opts?: pulumi.CustomResourceOptions): DataPartitionRule {
        return new DataPartitionRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:index/dataPartitionRule:DataPartitionRule';

    /**
     * Returns true if the given object is an instance of DataPartitionRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataPartitionRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataPartitionRule.__pulumiType;
    }

    /**
     * The account id associated with the data partition rule.
     */
    public readonly accountId!: pulumi.Output<number>;
    /**
     * Whether or not this data partition rule is deleted. Deleting a data partition rule does not delete the already persisted data. This data will be retained for a given period of time specified in the retention policy field.
     */
    public /*out*/ readonly deleted!: pulumi.Output<boolean>;
    /**
     * The description of the data partition rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether or not this data partition rule is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The NRQL to match events for this data partition rule. Logs matching this criteria will be routed to the specified data partition.
     */
    public readonly nrql!: pulumi.Output<string>;
    /**
     * The retention policy of the data partition data. Valid values are `SECONDARY` and `STANDARD`.
     */
    public readonly retentionPolicy!: pulumi.Output<string>;
    /**
     * The name of the data partition where logs will be allocated once the rule is enabled.
     */
    public readonly targetDataPartition!: pulumi.Output<string>;

    /**
     * Create a DataPartitionRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataPartitionRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataPartitionRuleArgs | DataPartitionRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataPartitionRuleState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["deleted"] = state ? state.deleted : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["nrql"] = state ? state.nrql : undefined;
            resourceInputs["retentionPolicy"] = state ? state.retentionPolicy : undefined;
            resourceInputs["targetDataPartition"] = state ? state.targetDataPartition : undefined;
        } else {
            const args = argsOrState as DataPartitionRuleArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.nrql === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nrql'");
            }
            if ((!args || args.retentionPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retentionPolicy'");
            }
            if ((!args || args.targetDataPartition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetDataPartition'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["nrql"] = args ? args.nrql : undefined;
            resourceInputs["retentionPolicy"] = args ? args.retentionPolicy : undefined;
            resourceInputs["targetDataPartition"] = args ? args.targetDataPartition : undefined;
            resourceInputs["deleted"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataPartitionRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataPartitionRule resources.
 */
export interface DataPartitionRuleState {
    /**
     * The account id associated with the data partition rule.
     */
    accountId?: pulumi.Input<number>;
    /**
     * Whether or not this data partition rule is deleted. Deleting a data partition rule does not delete the already persisted data. This data will be retained for a given period of time specified in the retention policy field.
     */
    deleted?: pulumi.Input<boolean>;
    /**
     * The description of the data partition rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether or not this data partition rule is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The NRQL to match events for this data partition rule. Logs matching this criteria will be routed to the specified data partition.
     */
    nrql?: pulumi.Input<string>;
    /**
     * The retention policy of the data partition data. Valid values are `SECONDARY` and `STANDARD`.
     */
    retentionPolicy?: pulumi.Input<string>;
    /**
     * The name of the data partition where logs will be allocated once the rule is enabled.
     */
    targetDataPartition?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataPartitionRule resource.
 */
export interface DataPartitionRuleArgs {
    /**
     * The account id associated with the data partition rule.
     */
    accountId?: pulumi.Input<number>;
    /**
     * The description of the data partition rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether or not this data partition rule is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The NRQL to match events for this data partition rule. Logs matching this criteria will be routed to the specified data partition.
     */
    nrql: pulumi.Input<string>;
    /**
     * The retention policy of the data partition data. Valid values are `SECONDARY` and `STANDARD`.
     */
    retentionPolicy: pulumi.Input<string>;
    /**
     * The name of the data partition where logs will be allocated once the rule is enabled.
     */
    targetDataPartition: pulumi.Input<string>;
}
