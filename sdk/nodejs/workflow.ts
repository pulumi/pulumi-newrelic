// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this resource to create and manage New Relic workflows.
 *
 * ## Example Usage
 *
 * ##### Workflow
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const foo = new newrelic.Workflow("foo", {
 *     mutingRulesHandling: "NOTIFY_ALL_ISSUES",
 *     issuesFilter: {
 *         name: "filter-name",
 *         type: "FILTER",
 *         predicates: [{
 *             attribute: "accumulations.tag.team",
 *             operator: "EXACTLY_MATCHES",
 *             values: ["growth"],
 *         }],
 *     },
 *     destinations: [{
 *         channelId: newrelic_notification_channel.some_channel.id,
 *     }],
 * });
 * ```
 * ## Policy-Based Workflow Example
 *
 * This scenario describes one of most common ways of using workflows by defining a set of policies the workflow handles
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * // Create a policy to track
 * const my_policy = new newrelic.AlertPolicy("my-policy", {});
 * // Create a reusable notification destination
 * const webhook_destination = new newrelic.NotificationDestination("webhook-destination", {
 *     type: "WEBHOOK",
 *     properties: [{
 *         key: "url",
 *         value: "https://example.com",
 *     }],
 *     authBasic: {
 *         user: "username",
 *         password: "password",
 *     },
 * });
 * // Create a notification channel to use in the workflow
 * const webhook_channel = new newrelic.NotificationChannel("webhook-channel", {
 *     type: "WEBHOOK",
 *     destinationId: webhook_destination.id,
 *     product: "IINT",
 *     properties: [{
 *         key: "payload",
 *         value: "{}",
 *         label: "Payload Template",
 *     }],
 * });
 * // A workflow that matches issues that include incidents triggered by the policy
 * const workflow_example = new newrelic.Workflow("workflow-example", {
 *     mutingRulesHandling: "NOTIFY_ALL_ISSUES",
 *     issuesFilter: {
 *         name: "Filter-name",
 *         type: "FILTER",
 *         predicates: [{
 *             attribute: "labels.policyIds",
 *             operator: "EXACTLY_MATCHES",
 *             values: [my_policy.id],
 *         }],
 *     },
 *     destinations: [{
 *         channelId: webhook_channel.id,
 *     }],
 * });
 * ```
 *
 * ### An example of a workflow with enrichments
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const workflow_example = new newrelic.Workflow("workflow-example", {
 *     mutingRulesHandling: "NOTIFY_ALL_ISSUES",
 *     issuesFilter: {
 *         name: "Filter-name",
 *         type: "FILTER",
 *         predicates: [{
 *             attribute: "accumulations.tag.team",
 *             operator: "EXACTLY_MATCHES",
 *             values: ["my_team"],
 *         }],
 *     },
 *     enrichments: {
 *         nrqls: [{
 *             name: "Log Count",
 *             configurations: [{
 *                 query: "SELECT count(*) FROM Log WHERE message like '%error%' since 10 minutes ago",
 *             }],
 *         }],
 *     },
 *     destinations: [{
 *         channelId: newrelic_notification_channel["webhook-channel"].id,
 *     }],
 * });
 * ```
 *
 * ### An example of a workflow with notification triggers
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const workflow_example = new newrelic.Workflow("workflow-example", {
 *     mutingRulesHandling: "NOTIFY_ALL_ISSUES",
 *     issuesFilter: {
 *         name: "Filter-name",
 *         type: "FILTER",
 *         predicates: [{
 *             attribute: "accumulations.tag.team",
 *             operator: "EXACTLY_MATCHES",
 *             values: ["my_team"],
 *         }],
 *     },
 *     destinations: [{
 *         channelId: newrelic_notification_channel["webhook-channel"].id,
 *         notificationTriggers: ["ACTIVATED"],
 *     }],
 * });
 * ```
 *
 * ## Additional Information
 *
 * More details about the workflows can be found [here](https://docs.newrelic.com/docs/alerts-applied-intelligence/applied-intelligence/incident-workflows/incident-workflows/).
 *
 * ## v3.3 changes
 *
 * In version v3.3 we renamed the following arguments:
 *
 * - `workflowEnabled` changed to `enabled`.
 * - `destinationConfiguration` changed to `destination`.
 * - `predicates` changed to `predicate`.
 * - Enrichment's `configurations` changed to `configuration`.
 *
 * ## Import
 *
 * Workflows can be imported using the `id`, e.g. bash
 *
 * ```sh
 *  $ pulumi import newrelic:index/workflow:Workflow foo <id>
 * ```
 *
 *  You can find the workflow ID from the workflow table by clicking on ... at the end of the row and choosing `Copy workflow id to clipboard`.
 */
export class Workflow extends pulumi.CustomResource {
    /**
     * Get an existing Workflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkflowState, opts?: pulumi.CustomResourceOptions): Workflow {
        return new Workflow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:index/workflow:Workflow';

    /**
     * Returns true if the given object is an instance of Workflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workflow.__pulumiType;
    }

    /**
     * Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.
     */
    public readonly accountId!: pulumi.Output<number>;
    /**
     * Notification configuration. See Nested destination blocks below for details.
     */
    public readonly destinations!: pulumi.Output<outputs.WorkflowDestination[]>;
    /**
     * **DEPRECATED** Whether destinations are enabled. Please use `enabled` instead:
     * these two are different flags, but they are functionally identical. Defaults to true.
     *
     * @deprecated Please use 'enabled' instead
     */
    public readonly destinationsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Whether workflow is enabled. Defaults to true.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Workflow's enrichments. See Nested enrichments blocks below for details.
     */
    public readonly enrichments!: pulumi.Output<outputs.WorkflowEnrichments | undefined>;
    /**
     * Whether enrichments are enabled. Defaults to true.
     */
    public readonly enrichmentsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Workflow entity GUID
     */
    public /*out*/ readonly guid!: pulumi.Output<string>;
    /**
     * A filter used to identify issues handled by this workflow. See Nested issuesFilter blocks below for details.
     */
    public readonly issuesFilter!: pulumi.Output<outputs.WorkflowIssuesFilter>;
    /**
     * The last time notification was sent for this workflow.
     */
    public /*out*/ readonly lastRun!: pulumi.Output<string>;
    /**
     * How to handle muted issues. See Muting Rules below for details.
     */
    public readonly mutingRulesHandling!: pulumi.Output<string>;
    /**
     * The name of the workflow.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The id of the workflow.
     */
    public /*out*/ readonly workflowId!: pulumi.Output<string>;

    /**
     * Create a Workflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkflowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkflowArgs | WorkflowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkflowState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["destinations"] = state ? state.destinations : undefined;
            resourceInputs["destinationsEnabled"] = state ? state.destinationsEnabled : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["enrichments"] = state ? state.enrichments : undefined;
            resourceInputs["enrichmentsEnabled"] = state ? state.enrichmentsEnabled : undefined;
            resourceInputs["guid"] = state ? state.guid : undefined;
            resourceInputs["issuesFilter"] = state ? state.issuesFilter : undefined;
            resourceInputs["lastRun"] = state ? state.lastRun : undefined;
            resourceInputs["mutingRulesHandling"] = state ? state.mutingRulesHandling : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["workflowId"] = state ? state.workflowId : undefined;
        } else {
            const args = argsOrState as WorkflowArgs | undefined;
            if ((!args || args.destinations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinations'");
            }
            if ((!args || args.issuesFilter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuesFilter'");
            }
            if ((!args || args.mutingRulesHandling === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mutingRulesHandling'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["destinations"] = args ? args.destinations : undefined;
            resourceInputs["destinationsEnabled"] = args ? args.destinationsEnabled : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["enrichments"] = args ? args.enrichments : undefined;
            resourceInputs["enrichmentsEnabled"] = args ? args.enrichmentsEnabled : undefined;
            resourceInputs["issuesFilter"] = args ? args.issuesFilter : undefined;
            resourceInputs["mutingRulesHandling"] = args ? args.mutingRulesHandling : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["guid"] = undefined /*out*/;
            resourceInputs["lastRun"] = undefined /*out*/;
            resourceInputs["workflowId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workflow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Workflow resources.
 */
export interface WorkflowState {
    /**
     * Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.
     */
    accountId?: pulumi.Input<number>;
    /**
     * Notification configuration. See Nested destination blocks below for details.
     */
    destinations?: pulumi.Input<pulumi.Input<inputs.WorkflowDestination>[]>;
    /**
     * **DEPRECATED** Whether destinations are enabled. Please use `enabled` instead:
     * these two are different flags, but they are functionally identical. Defaults to true.
     *
     * @deprecated Please use 'enabled' instead
     */
    destinationsEnabled?: pulumi.Input<boolean>;
    /**
     * Whether workflow is enabled. Defaults to true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Workflow's enrichments. See Nested enrichments blocks below for details.
     */
    enrichments?: pulumi.Input<inputs.WorkflowEnrichments>;
    /**
     * Whether enrichments are enabled. Defaults to true.
     */
    enrichmentsEnabled?: pulumi.Input<boolean>;
    /**
     * Workflow entity GUID
     */
    guid?: pulumi.Input<string>;
    /**
     * A filter used to identify issues handled by this workflow. See Nested issuesFilter blocks below for details.
     */
    issuesFilter?: pulumi.Input<inputs.WorkflowIssuesFilter>;
    /**
     * The last time notification was sent for this workflow.
     */
    lastRun?: pulumi.Input<string>;
    /**
     * How to handle muted issues. See Muting Rules below for details.
     */
    mutingRulesHandling?: pulumi.Input<string>;
    /**
     * The name of the workflow.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the workflow.
     */
    workflowId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Workflow resource.
 */
export interface WorkflowArgs {
    /**
     * Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.
     */
    accountId?: pulumi.Input<number>;
    /**
     * Notification configuration. See Nested destination blocks below for details.
     */
    destinations: pulumi.Input<pulumi.Input<inputs.WorkflowDestination>[]>;
    /**
     * **DEPRECATED** Whether destinations are enabled. Please use `enabled` instead:
     * these two are different flags, but they are functionally identical. Defaults to true.
     *
     * @deprecated Please use 'enabled' instead
     */
    destinationsEnabled?: pulumi.Input<boolean>;
    /**
     * Whether workflow is enabled. Defaults to true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Workflow's enrichments. See Nested enrichments blocks below for details.
     */
    enrichments?: pulumi.Input<inputs.WorkflowEnrichments>;
    /**
     * Whether enrichments are enabled. Defaults to true.
     */
    enrichmentsEnabled?: pulumi.Input<boolean>;
    /**
     * A filter used to identify issues handled by this workflow. See Nested issuesFilter blocks below for details.
     */
    issuesFilter: pulumi.Input<inputs.WorkflowIssuesFilter>;
    /**
     * How to handle muted issues. See Muting Rules below for details.
     */
    mutingRulesHandling: pulumi.Input<string>;
    /**
     * The name of the workflow.
     */
    name?: pulumi.Input<string>;
}
