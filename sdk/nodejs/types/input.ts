// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertChannelConfig {
    /**
     * The API key for integrating with OpsGenie.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
     */
    authPassword?: pulumi.Input<string>;
    /**
     * Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
     */
    authType?: pulumi.Input<string>;
    /**
     * Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
     */
    authUsername?: pulumi.Input<string>;
    /**
     * The base URL of the webhook destination.
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * The Slack channel to send notifications to.
     * * `opsgenie`
     */
    channel?: pulumi.Input<string>;
    /**
     * A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
     */
    headersString?: pulumi.Input<string>;
    /**
     * `0` or `1`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
     * * `webhook`
     */
    includeJsonAttachment?: pulumi.Input<string>;
    /**
     * The key for integrating with VictorOps.
     */
    key?: pulumi.Input<string>;
    /**
     * A map of key/value pairs that represents the webhook payload.  Must provide `payloadType` if setting this argument.
     */
    payload?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
     */
    payloadString?: pulumi.Input<string>;
    /**
     * Can either be `application/json` or `application/x-www-form-urlencoded`. The `payloadType` argument is _required_ if `payload` is set.
     * * `pagerduty`
     */
    payloadType?: pulumi.Input<string>;
    /**
     * A set of recipients for targeting notifications.  Multiple values are comma separated.
     */
    recipients?: pulumi.Input<string>;
    /**
     * The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
     */
    region?: pulumi.Input<string>;
    /**
     * The route key for integrating with VictorOps.
     * * `slack`
     */
    routeKey?: pulumi.Input<string>;
    /**
     * Specifies the service key for integrating with Pagerduty.
     * * `victorops`
     */
    serviceKey?: pulumi.Input<string>;
    /**
     * A set of tags for targeting notifications. Multiple values are comma separated.
     */
    tags?: pulumi.Input<string>;
    /**
     * A set of teams for targeting notifications. Multiple values are comma separated.
     */
    teams?: pulumi.Input<string>;
    /**
     * Your organization's Slack URL.
     */
    url?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
}

export interface AlertConditionTerm {
    duration: pulumi.Input<number>;
    operator?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
    timeFunction: pulumi.Input<string>;
}

export interface DashboardFilter {
    attributes?: pulumi.Input<pulumi.Input<string>[]>;
    eventTypes: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardWidget {
    column: pulumi.Input<number>;
    compareWiths?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetCompareWith>[]>;
    drilldownDashboardId?: pulumi.Input<number>;
    duration?: pulumi.Input<number>;
    endTime?: pulumi.Input<number>;
    entityIds?: pulumi.Input<pulumi.Input<number>[]>;
    facet?: pulumi.Input<string>;
    height?: pulumi.Input<number>;
    limit?: pulumi.Input<number>;
    metrics?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetMetric>[]>;
    notes?: pulumi.Input<string>;
    nrql?: pulumi.Input<string>;
    orderBy?: pulumi.Input<string>;
    rawMetricName?: pulumi.Input<string>;
    row: pulumi.Input<number>;
    source?: pulumi.Input<string>;
    thresholdRed?: pulumi.Input<number>;
    thresholdYellow?: pulumi.Input<number>;
    /**
     * The title of the dashboard.
     */
    title: pulumi.Input<string>;
    visualization: pulumi.Input<string>;
    widgetId?: pulumi.Input<number>;
    width?: pulumi.Input<number>;
}

export interface DashboardWidgetCompareWith {
    offsetDuration: pulumi.Input<string>;
    presentation: pulumi.Input<inputs.DashboardWidgetCompareWithPresentation>;
}

export interface DashboardWidgetCompareWithPresentation {
    color: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface DashboardWidgetMetric {
    name: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    units?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface EntityTagsTag {
    /**
     * The tag key.
     */
    key: pulumi.Input<string>;
    /**
     * The tag values.
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetEntityTag {
    key: string;
    value: string;
}

export interface InfraAlertConditionCritical {
    duration: pulumi.Input<number>;
    timeFunction?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface InfraAlertConditionWarning {
    duration: pulumi.Input<number>;
    timeFunction?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface NrqlAlertConditionCritical {
    /**
     * @deprecated use `threshold_duration` attribute instead
     */
    duration?: pulumi.Input<number>;
    operator?: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
    thresholdDuration?: pulumi.Input<number>;
    thresholdOccurrences?: pulumi.Input<string>;
    /**
     * @deprecated use `threshold_occurrences` attribute instead
     */
    timeFunction?: pulumi.Input<string>;
}

export interface NrqlAlertConditionNrql {
    evaluationOffset?: pulumi.Input<number>;
    query: pulumi.Input<string>;
    /**
     * @deprecated use `evaluation_offset` attribute instead
     */
    sinceValue?: pulumi.Input<string>;
}

export interface NrqlAlertConditionTerm {
    /**
     * @deprecated use `threshold_duration` attribute instead
     */
    duration?: pulumi.Input<number>;
    operator?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
    thresholdDuration?: pulumi.Input<number>;
    thresholdOccurrences?: pulumi.Input<string>;
    /**
     * @deprecated use `threshold_occurrences` attribute instead
     */
    timeFunction?: pulumi.Input<string>;
}

export interface NrqlAlertConditionWarning {
    /**
     * @deprecated use `threshold_duration` attribute instead
     */
    duration?: pulumi.Input<number>;
    operator?: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
    thresholdDuration?: pulumi.Input<number>;
    thresholdOccurrences?: pulumi.Input<string>;
    /**
     * @deprecated use `threshold_occurrences` attribute instead
     */
    timeFunction?: pulumi.Input<string>;
}
export namespace insights {
    export interface EventEvent {
        attributes: pulumi.Input<pulumi.Input<inputs.insights.EventEventAttribute>[]>;
        timestamp?: pulumi.Input<number>;
        type: pulumi.Input<string>;
    }

    export interface EventEventAttribute {
        key: pulumi.Input<string>;
        type?: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }
}

export namespace plugins {
    export interface AlertConditionTerm {
        duration: pulumi.Input<number>;
        operator?: pulumi.Input<string>;
        priority?: pulumi.Input<string>;
        threshold: pulumi.Input<number>;
        timeFunction: pulumi.Input<string>;
    }

    export interface WorkloadEntitySearchQuery {
        /**
         * The query.
         */
        query: pulumi.Input<string>;
    }
}

