// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AlertChannelConfig {
    /**
     * The API key for integrating with OpsGenie.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
     */
    authPassword?: pulumi.Input<string>;
    /**
     * Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
     */
    authType?: pulumi.Input<string>;
    /**
     * Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
     */
    authUsername?: pulumi.Input<string>;
    /**
     * The base URL of the webhook destination.
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * The Slack channel to send notifications to.
     * * `opsgenie`
     */
    channel?: pulumi.Input<string>;
    /**
     * A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
     */
    headersString?: pulumi.Input<string>;
    /**
     * `true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
     * * `webhook`
     */
    includeJsonAttachment?: pulumi.Input<string>;
    /**
     * The key for integrating with VictorOps.
     */
    key?: pulumi.Input<string>;
    /**
     * A map of key/value pairs that represents the webhook payload.  Must provide `payloadType` if setting this argument.
     */
    payload?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
     */
    payloadString?: pulumi.Input<string>;
    /**
     * Can either be `application/json` or `application/x-www-form-urlencoded`. The `payloadType` argument is _required_ if `payload` is set.
     * * `pagerduty`
     */
    payloadType?: pulumi.Input<string>;
    /**
     * A set of recipients for targeting notifications.  Multiple values are comma separated.
     */
    recipients?: pulumi.Input<string>;
    /**
     * The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
     */
    region?: pulumi.Input<string>;
    /**
     * The route key for integrating with VictorOps.
     * * `slack`
     */
    routeKey?: pulumi.Input<string>;
    /**
     * Specifies the service key for integrating with Pagerduty.
     * * `victorops`
     */
    serviceKey?: pulumi.Input<string>;
    /**
     * A set of tags for targeting notifications. Multiple values are comma separated.
     */
    tags?: pulumi.Input<string>;
    /**
     * A set of teams for targeting notifications. Multiple values are comma separated.
     */
    teams?: pulumi.Input<string>;
    /**
     * [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
     */
    url?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
}

export interface AlertConditionTerm {
    duration: pulumi.Input<number>;
    operator?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
    timeFunction: pulumi.Input<string>;
}

export interface AlertMutingRuleCondition {
    /**
     * The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
     */
    conditions: pulumi.Input<pulumi.Input<inputs.AlertMutingRuleConditionCondition>[]>;
    /**
     * The operator used to combine all the MutingRuleConditions within the group.
     */
    operator: pulumi.Input<string>;
}

export interface AlertMutingRuleConditionCondition {
    /**
     * The attribute on a violation. Valid values are   `accountId`, `conditionId`, `conditionName`, `conditionRunbookUrl`, `conditionType`, `entity.guid`, `nrqlEventType`, `nrqlQuery`, `policyId`, `policyName`, `product`, `tags.<NAME>`, `targetId`, `targetName`
     */
    attribute: pulumi.Input<string>;
    /**
     * The operator used to compare the attribute's value with the supplied value(s). Valid values are `ANY`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `IN`, `IS_BLANK`, `IS_NOT_BLANK`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_IN`, `NOT_STARTS_WITH`, `STARTS_WITH`
     */
    operator: pulumi.Input<string>;
    /**
     * The value(s) to compare against the attribute's value.
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AlertMutingRuleSchedule {
    /**
     * The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeatCount`
     */
    endRepeat?: pulumi.Input<string>;
    /**
     * The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'
     */
    endTime?: pulumi.Input<string>;
    /**
     * The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
     */
    repeat?: pulumi.Input<string>;
    /**
     * The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `endRepeat`
     */
    repeatCount?: pulumi.Input<number>;
    /**
     * The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'
     */
    startTime?: pulumi.Input<string>;
    timeZone: pulumi.Input<string>;
    /**
     * The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
     */
    weeklyRepeatDays?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardFilter {
    attributes?: pulumi.Input<pulumi.Input<string>[]>;
    eventTypes: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardWidget {
    accountId?: pulumi.Input<number>;
    column: pulumi.Input<number>;
    compareWiths?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetCompareWith>[]>;
    drilldownDashboardId?: pulumi.Input<number>;
    duration?: pulumi.Input<number>;
    endTime?: pulumi.Input<number>;
    entityIds?: pulumi.Input<pulumi.Input<number>[]>;
    facet?: pulumi.Input<string>;
    height?: pulumi.Input<number>;
    limit?: pulumi.Input<number>;
    metrics?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetMetric>[]>;
    notes?: pulumi.Input<string>;
    nrql?: pulumi.Input<string>;
    orderBy?: pulumi.Input<string>;
    rawMetricName?: pulumi.Input<string>;
    row: pulumi.Input<number>;
    source?: pulumi.Input<string>;
    thresholdRed?: pulumi.Input<number>;
    thresholdYellow?: pulumi.Input<number>;
    title: pulumi.Input<string>;
    visualization: pulumi.Input<string>;
    widgetId?: pulumi.Input<number>;
    width?: pulumi.Input<number>;
}

export interface DashboardWidgetCompareWith {
    offsetDuration: pulumi.Input<string>;
    presentation: pulumi.Input<inputs.DashboardWidgetCompareWithPresentation>;
}

export interface DashboardWidgetCompareWithPresentation {
    color: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface DashboardWidgetMetric {
    name: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    units?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface EntityTagsTag {
    /**
     * The tag key.
     */
    key: pulumi.Input<string>;
    /**
     * The tag values.
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetEntityTag {
    key: string;
    value: string;
}

export interface GetEntityTagArgs {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface InfraAlertConditionCritical {
    duration: pulumi.Input<number>;
    timeFunction?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface InfraAlertConditionWarning {
    duration: pulumi.Input<number>;
    timeFunction?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface NrqlAlertConditionCritical {
    /**
     * **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
     *
     * @deprecated use `threshold_duration` attribute instead
     */
    duration?: pulumi.Input<number>;
    /**
     * Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
     */
    operator?: pulumi.Input<string>;
    /**
     * The value which will trigger a violation. Must be `0` or greater.
     */
    threshold: pulumi.Input<number>;
    /**
     * The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
     * <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
     * <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
     * <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
     */
    thresholdDuration?: pulumi.Input<number>;
    /**
     * The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
     */
    thresholdOccurrences?: pulumi.Input<string>;
    /**
     * **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
     *
     * @deprecated use `threshold_occurrences` attribute instead
     */
    timeFunction?: pulumi.Input<string>;
}

export interface NrqlAlertConditionNrql {
    /**
     * Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated in one-minute time windows. The start time depends on this value. It's recommended to set this to 3 minutes. An offset of less than 3 minutes will trigger violations sooner, but you may see more false positives and negatives due to data latency. With `evaluationOffset` set to 3 minutes, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`.<br>
     * <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
     *
     * @deprecated use `signal.aggregation_method` attribute instead
     */
    evaluationOffset?: pulumi.Input<number>;
    /**
     * The NRQL query to execute for the condition.
     */
    query: pulumi.Input<string>;
    /**
     * **DEPRECATED:** Use `evaluationOffset` instead. The value to be used in the `SINCE <X> minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive). <br>
     * <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
     *
     * @deprecated use `signal.aggregation_method` attribute instead
     */
    sinceValue?: pulumi.Input<string>;
}

export interface NrqlAlertConditionTerm {
    /**
     * **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
     *
     * @deprecated use `threshold_duration` attribute instead
     */
    duration?: pulumi.Input<number>;
    /**
     * Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
     */
    operator?: pulumi.Input<string>;
    /**
     * `critical` or `warning`. Defaults to `critical`.
     */
    priority?: pulumi.Input<string>;
    /**
     * The value which will trigger a violation. Must be `0` or greater.
     */
    threshold: pulumi.Input<number>;
    /**
     * The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
     * <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
     * <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
     * <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
     */
    thresholdDuration?: pulumi.Input<number>;
    /**
     * The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
     */
    thresholdOccurrences?: pulumi.Input<string>;
    /**
     * **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
     *
     * @deprecated use `threshold_occurrences` attribute instead
     */
    timeFunction?: pulumi.Input<string>;
}

export interface NrqlAlertConditionWarning {
    /**
     * **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
     *
     * @deprecated use `threshold_duration` attribute instead
     */
    duration?: pulumi.Input<number>;
    /**
     * Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
     */
    operator?: pulumi.Input<string>;
    /**
     * The value which will trigger a violation. Must be `0` or greater.
     */
    threshold: pulumi.Input<number>;
    /**
     * The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
     * <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
     * <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
     * <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
     */
    thresholdDuration?: pulumi.Input<number>;
    /**
     * The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
     */
    thresholdOccurrences?: pulumi.Input<string>;
    /**
     * **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
     *
     * @deprecated use `threshold_occurrences` attribute instead
     */
    timeFunction?: pulumi.Input<string>;
}

export interface OneDashboardPage {
    /**
     * Brief text describing the dashboard.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique entity identifier of the dashboard page in New Relic.
     */
    guid?: pulumi.Input<string>;
    /**
     * The title of the dashboard.
     */
    name: pulumi.Input<string>;
    /**
     * (Optional) A nested block that describes an Area widget.  See Nested widget blocks below for details.
     */
    widgetAreas?: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetArea>[]>;
    /**
     * (Optional) A nested block that describes a Bar widget.  See Nested widget blocks below for details.
     */
    widgetBars?: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetBar>[]>;
    /**
     * (Optional) A nested block that describes a Billboard widget.  See Nested widget blocks below for details.
     */
    widgetBillboards?: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetBillboard>[]>;
    /**
     * (Optional) A nested block that describes a Bullet widget.  See Nested widget blocks below for details.
     */
    widgetBullets?: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetBullet>[]>;
    /**
     * (Optional) A nested block that describes a Funnel widget.  See Nested widget blocks below for details.
     */
    widgetFunnels?: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetFunnel>[]>;
    /**
     * (Optional) A nested block that describes a Heatmap widget.  See Nested widget blocks below for details.
     */
    widgetHeatmaps?: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetHeatmap>[]>;
    /**
     * (Optional) A nested block that describes a Histogram widget.  See Nested widget blocks below for details.
     */
    widgetHistograms?: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetHistogram>[]>;
    /**
     * (Optional) A nested block that describes a JSON widget.  See Nested widget blocks below for details.
     */
    widgetJsons?: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetJson>[]>;
    /**
     * (Optional) A nested block that describes a Line widget.  See Nested widget blocks below for details.
     */
    widgetLines?: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetLine>[]>;
    /**
     * (Optional) A nested block that describes a Markdown widget.  See Nested widget blocks below for details.
     */
    widgetMarkdowns?: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetMarkdown>[]>;
    /**
     * (Optional) A nested block that describes a Pie widget.  See Nested widget blocks below for details.
     */
    widgetPies?: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetPy>[]>;
    /**
     * (Optional) A nested block that describes a Stacked Bar widget. See Nested widget blocks below for details.
     */
    widgetStackedBars?: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetStackedBar>[]>;
    /**
     * (Optional) A nested block that describes a Table widget.  See Nested widget blocks below for details.
     */
    widgetTables?: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetTable>[]>;
}

export interface OneDashboardPageWidgetArea {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: pulumi.Input<number>;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetAreaNrqlQuery>[]>;
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: pulumi.Input<number>;
    /**
     * (Required) A title for the widget.
     */
    title: pulumi.Input<string>;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: pulumi.Input<number>;
}

export interface OneDashboardPageWidgetAreaNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId?: pulumi.Input<number>;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: pulumi.Input<string>;
}

export interface OneDashboardPageWidgetBar {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: pulumi.Input<number>;
    filterCurrentDashboard?: pulumi.Input<boolean>;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    linkedEntityGuids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetBarNrqlQuery>[]>;
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: pulumi.Input<number>;
    /**
     * (Required) A title for the widget.
     */
    title: pulumi.Input<string>;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: pulumi.Input<number>;
}

export interface OneDashboardPageWidgetBarNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId?: pulumi.Input<number>;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: pulumi.Input<string>;
}

export interface OneDashboardPageWidgetBillboard {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: pulumi.Input<number>;
    /**
     * (Optional) Threshold above which the displayed value will be styled with a red color.
     */
    critical?: pulumi.Input<number>;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetBillboardNrqlQuery>[]>;
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: pulumi.Input<number>;
    /**
     * (Required) A title for the widget.
     */
    title: pulumi.Input<string>;
    /**
     * (Optional) Threshold above which the displayed value will be styled with a yellow color.
     * * `widgetBullet`
     */
    warning?: pulumi.Input<number>;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: pulumi.Input<number>;
}

export interface OneDashboardPageWidgetBillboardNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId?: pulumi.Input<number>;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: pulumi.Input<string>;
}

export interface OneDashboardPageWidgetBullet {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: pulumi.Input<number>;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    /**
     * (Optional) Visualization limit for the widget.
     * * `widgetFunnel`
     */
    limit?: pulumi.Input<number>;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetBulletNrqlQuery>[]>;
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: pulumi.Input<number>;
    /**
     * (Required) A title for the widget.
     */
    title: pulumi.Input<string>;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: pulumi.Input<number>;
}

export interface OneDashboardPageWidgetBulletNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId?: pulumi.Input<number>;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: pulumi.Input<string>;
}

export interface OneDashboardPageWidgetFunnel {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: pulumi.Input<number>;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetFunnelNrqlQuery>[]>;
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: pulumi.Input<number>;
    /**
     * (Required) A title for the widget.
     */
    title: pulumi.Input<string>;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: pulumi.Input<number>;
}

export interface OneDashboardPageWidgetFunnelNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId?: pulumi.Input<number>;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: pulumi.Input<string>;
}

export interface OneDashboardPageWidgetHeatmap {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: pulumi.Input<number>;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetHeatmapNrqlQuery>[]>;
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: pulumi.Input<number>;
    /**
     * (Required) A title for the widget.
     */
    title: pulumi.Input<string>;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: pulumi.Input<number>;
}

export interface OneDashboardPageWidgetHeatmapNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId?: pulumi.Input<number>;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: pulumi.Input<string>;
}

export interface OneDashboardPageWidgetHistogram {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: pulumi.Input<number>;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetHistogramNrqlQuery>[]>;
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: pulumi.Input<number>;
    /**
     * (Required) A title for the widget.
     */
    title: pulumi.Input<string>;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: pulumi.Input<number>;
}

export interface OneDashboardPageWidgetHistogramNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId?: pulumi.Input<number>;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: pulumi.Input<string>;
}

export interface OneDashboardPageWidgetJson {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: pulumi.Input<number>;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetJsonNrqlQuery>[]>;
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: pulumi.Input<number>;
    /**
     * (Required) A title for the widget.
     */
    title: pulumi.Input<string>;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: pulumi.Input<number>;
}

export interface OneDashboardPageWidgetJsonNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId?: pulumi.Input<number>;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: pulumi.Input<string>;
}

export interface OneDashboardPageWidgetLine {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: pulumi.Input<number>;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetLineNrqlQuery>[]>;
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: pulumi.Input<number>;
    /**
     * (Required) A title for the widget.
     */
    title: pulumi.Input<string>;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: pulumi.Input<number>;
}

export interface OneDashboardPageWidgetLineNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId?: pulumi.Input<number>;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: pulumi.Input<string>;
}

export interface OneDashboardPageWidgetMarkdown {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: pulumi.Input<number>;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: pulumi.Input<number>;
    /**
     * (Required) The markdown source to be rendered in the widget.
     * * `widgetStackedBar`
     */
    text?: pulumi.Input<string>;
    /**
     * (Required) A title for the widget.
     */
    title: pulumi.Input<string>;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: pulumi.Input<number>;
}

export interface OneDashboardPageWidgetPy {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: pulumi.Input<number>;
    filterCurrentDashboard?: pulumi.Input<boolean>;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    linkedEntityGuids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetPyNrqlQuery>[]>;
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: pulumi.Input<number>;
    /**
     * (Required) A title for the widget.
     */
    title: pulumi.Input<string>;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: pulumi.Input<number>;
}

export interface OneDashboardPageWidgetPyNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId?: pulumi.Input<number>;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: pulumi.Input<string>;
}

export interface OneDashboardPageWidgetStackedBar {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: pulumi.Input<number>;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetStackedBarNrqlQuery>[]>;
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: pulumi.Input<number>;
    /**
     * (Required) A title for the widget.
     */
    title: pulumi.Input<string>;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: pulumi.Input<number>;
}

export interface OneDashboardPageWidgetStackedBarNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId?: pulumi.Input<number>;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: pulumi.Input<string>;
}

export interface OneDashboardPageWidgetTable {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: pulumi.Input<number>;
    filterCurrentDashboard?: pulumi.Input<boolean>;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    linkedEntityGuids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: pulumi.Input<pulumi.Input<inputs.OneDashboardPageWidgetTableNrqlQuery>[]>;
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: pulumi.Input<number>;
    /**
     * (Required) A title for the widget.
     */
    title: pulumi.Input<string>;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: pulumi.Input<number>;
}

export interface OneDashboardPageWidgetTableNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId?: pulumi.Input<number>;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: pulumi.Input<string>;
}

export interface OneDashboardRawPage {
    /**
     * Brief text describing the dashboard.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique entity identifier of the dashboard page in New Relic.
     */
    guid?: pulumi.Input<string>;
    /**
     * The title of the dashboard.
     */
    name: pulumi.Input<string>;
    /**
     * (Optional) A nested block that describes a widget. See Nested widget blocks below for details.
     */
    widgets?: pulumi.Input<pulumi.Input<inputs.OneDashboardRawPageWidget>[]>;
}

export interface OneDashboardRawPageWidget {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: pulumi.Input<number>;
    /**
     * (Required) The configuration of the widget.
     */
    configuration: pulumi.Input<string>;
    /**
     * (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
     */
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    /**
     * (Optional) Related entity GUIDs.
     */
    linkedEntityGuids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: pulumi.Input<number>;
    /**
     * (Required) A title for the widget.
     */
    title: pulumi.Input<string>;
    /**
     * (Required) The visualization ID of the widget
     */
    visualizationId: pulumi.Input<string>;
    /**
     * (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
     */
    width?: pulumi.Input<number>;
}

export interface ServiceLevelEvents {
    /**
     * The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,
     * and that contains the NRDB data for the SLI/SLO calculations.
     */
    accountId: pulumi.Input<number>;
    /**
     * The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.
     */
    badEvents?: pulumi.Input<inputs.ServiceLevelEventsBadEvents>;
    /**
     * The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.
     */
    goodEvents?: pulumi.Input<inputs.ServiceLevelEventsGoodEvents>;
    /**
     * The definition of valid requests.
     */
    validEvents: pulumi.Input<inputs.ServiceLevelEventsValidEvents>;
}

export interface ServiceLevelEventsBadEvents {
    /**
     * The event type where NRDB data will be fetched from.
     */
    from: pulumi.Input<string>;
    /**
     * A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
     * a particular entity and were successful).
     * a particular entity and returned an error).
     */
    where?: pulumi.Input<string>;
}

export interface ServiceLevelEventsGoodEvents {
    /**
     * The event type where NRDB data will be fetched from.
     */
    from: pulumi.Input<string>;
    /**
     * A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
     * a particular entity and were successful).
     * a particular entity and returned an error).
     */
    where?: pulumi.Input<string>;
}

export interface ServiceLevelEventsValidEvents {
    /**
     * The event type where NRDB data will be fetched from.
     */
    from: pulumi.Input<string>;
    /**
     * A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
     * a particular entity and were successful).
     * a particular entity and returned an error).
     */
    where?: pulumi.Input<string>;
}

export interface ServiceLevelObjective {
    /**
     * The description of the SLI.
     */
    description?: pulumi.Input<string>;
    /**
     * A short name for the SLI that will help anyone understand what it is about.
     */
    name?: pulumi.Input<string>;
    /**
     * The target for your SLO, valid values between `0` and `100`. Up to 5 decimals accepted.
     */
    target: pulumi.Input<number>;
    /**
     * Time window is the period for the SLO.
     */
    timeWindow: pulumi.Input<inputs.ServiceLevelObjectiveTimeWindow>;
}

export interface ServiceLevelObjectiveTimeWindow {
    /**
     * Rolling window.
     */
    rolling: pulumi.Input<inputs.ServiceLevelObjectiveTimeWindowRolling>;
}

export interface ServiceLevelObjectiveTimeWindowRolling {
    /**
     * Valid values are `1`, `7` and `28`.
     */
    count: pulumi.Input<number>;
    /**
     * The only supported value is `DAY`.
     */
    unit: pulumi.Input<string>;
}
export namespace insights {
    export interface EventEvent {
        attributes: pulumi.Input<pulumi.Input<inputs.insights.EventEventAttribute>[]>;
        timestamp?: pulumi.Input<number>;
        type: pulumi.Input<string>;
    }

    export interface EventEventAttribute {
        key: pulumi.Input<string>;
        type?: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }
}

export namespace plugins {
    export interface AlertConditionTerm {
        duration: pulumi.Input<number>;
        operator?: pulumi.Input<string>;
        priority?: pulumi.Input<string>;
        threshold: pulumi.Input<number>;
        timeFunction: pulumi.Input<string>;
    }

    export interface WorkloadEntitySearchQuery {
        /**
         * The query.
         */
        query: pulumi.Input<string>;
    }
}

export namespace synthetics {
    export interface MonitorScriptLocation {
        /**
         * The monitor script authentication code for the location. Use one of either `hmac` or `vsePassword`.
         */
        hmac?: pulumi.Input<string>;
        /**
         * The monitor script location name.
         */
        name: pulumi.Input<string>;
        /**
         * The password for the location used to calculate the HMAC. Use one of either `hmac` or `vsePassword`.
         */
        vsePassword?: pulumi.Input<string>;
    }

    export interface MultiLocationAlertConditionCritical {
        threshold: pulumi.Input<number>;
    }

    export interface MultiLocationAlertConditionWarning {
        threshold: pulumi.Input<number>;
    }
}
