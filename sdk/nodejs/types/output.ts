// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertChannelConfig {
    /**
     * The API key for integrating with OpsGenie.
     */
    apiKey?: string;
    /**
     * Specifies an authentication password for use with a channel. Supported by the webhook channel type.
     */
    authPassword?: string;
    /**
     * Specifies an authentication method for use with a channel. Supported by the webhook channel type. Only HTTP basic authentication is currently supported via the value BASIC.
     */
    authType?: string;
    /**
     * Specifies an authentication username for use with a channel. Supported by the webhook channel type.
     */
    authUsername?: string;
    /**
     * The base URL of the webhook destination.
     */
    baseUrl?: string;
    /**
     * The Slack channel to send notifications to.
     */
    channel?: string;
    /**
     * A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
     */
    headers?: {[key: string]: string};
    /**
     * Use instead of headers if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects). The value provided should be a valid JSON string with escaped double quotes. Conflicts with headers.
     */
    headersString?: string;
    /**
     * true or false. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
     */
    includeJsonAttachment?: string;
    /**
     * The key for integrating with VictorOps.
     */
    key?: string;
    /**
     * A map of key/value pairs that represents the webhook payload. Must provide payloadType if setting this argument.
     */
    payload?: {[key: string]: string};
    /**
     * Use instead of payload if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects). The value provided should be a valid JSON string with escaped double quotes. Conflicts with payload.
     */
    payloadString?: string;
    /**
     * Can either be application/json or application/x-www-form-urlencoded. The payloadType argument is required if payload is set.
     */
    payloadType?: string;
    /**
     * A set of recipients for targeting notifications. Multiple values are comma separated.
     */
    recipients?: string;
    /**
     * The data center region to store your data. Valid values are US and EU. Default is US.
     */
    region?: string;
    /**
     * The route key for integrating with VictorOps.
     */
    routeKey?: string;
    /**
     * Specifies the service key for integrating with Pagerduty.
     */
    serviceKey?: string;
    /**
     * A set of tags for targeting notifications. Multiple values are comma separated.
     */
    tags?: string;
    /**
     * A set of teams for targeting notifications. Multiple values are comma separated.
     */
    teams?: string;
    /**
     * Your organization's Slack URL.
     */
    url?: string;
    /**
     * The user ID for use with the user channel type.
     */
    userId?: string;
}

export interface AlertConditionTerm {
    /**
     * In minutes, must be in the range of 5 to 120, inclusive.
     */
    duration: number;
    /**
     * One of (above, below, equal). Defaults to equal.
     */
    operator?: string;
    /**
     * One of (critical, warning). Defaults to critical.
     */
    priority?: string;
    /**
     * Must be 0 or greater.
     */
    threshold: number;
    /**
     * One of (all, any).
     */
    timeFunction: string;
}

export interface AlertMutingRuleCondition {
    /**
     * The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
     */
    conditions: outputs.AlertMutingRuleConditionCondition[];
    /**
     * The operator used to combine all the MutingRuleConditions within the group. Valid values are `AND`, `OR`.
     */
    operator: string;
}

export interface AlertMutingRuleConditionCondition {
    /**
     * The attribute on an incident.
     */
    attribute: string;
    /**
     * The operator used to compare the attribute's value with the supplied value(s).
     */
    operator: string;
    /**
     * The value(s) to compare against the attribute's value.
     */
    values: string[];
}

export interface AlertMutingRuleSchedule {
    /**
     * The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeatCount`
     */
    endRepeat?: string;
    /**
     * The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'
     * * `timeZone` (Required) The time zone that applies to the muting rule schedule. Example: 'America/Los_Angeles'. See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
     */
    endTime?: string;
    /**
     * The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
     */
    repeat?: string;
    /**
     * The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `endRepeat`
     */
    repeatCount?: number;
    /**
     * The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'
     */
    startTime?: string;
    /**
     * The time zone that applies to the MutingRule schedule.
     */
    timeZone: string;
    /**
     * The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
     */
    weeklyRepeatDays?: string[];
}

export interface EntityTagsTag {
    /**
     * The tag key.
     */
    key: string;
    /**
     * The tag values.
     */
    values: string[];
}

export interface GetAlertChannelConfig {
    apiKey?: string;
    authPassword?: string;
    authType?: string;
    authUsername?: string;
    baseUrl?: string;
    channel?: string;
    headers?: {[key: string]: string};
    includeJsonAttachment?: string;
    key?: string;
    payload?: {[key: string]: string};
    payloadString?: string;
    payloadType?: string;
    recipients?: string;
    region?: string;
    routeKey?: string;
    serviceKey?: string;
    tags?: string;
    teams?: string;
    url?: string;
    userId?: string;
}

export interface GetEntityTag {
    /**
     * The tag key.
     */
    key: string;
    /**
     * The tag value.
     */
    value: string;
}

export interface GetNotificationDestinationProperty {
    /**
     * Notification property display key.
     */
    displayValue?: string;
    /**
     * Notification property key.
     */
    key: string;
    /**
     * Notification property label.
     */
    label?: string;
    /**
     * Notification property value.
     */
    value: string;
}

export interface GetNotificationDestinationSecureUrl {
    prefix: string;
}

export interface GetTestGrokPatternTestGrok {
    /**
     * Nested list containing information about any attributes that were extracted.
     */
    attributes: outputs.GetTestGrokPatternTestGrokAttribute[];
    /**
     * The log line that was tested against.
     */
    logLine: string;
    /**
     * Whether the Grok pattern matched.
     */
    matched: boolean;
}

export interface GetTestGrokPatternTestGrokAttribute {
    /**
     * The attribute name.
     */
    name: string;
    /**
     * A string representation of the extracted value (which might not be a String).
     */
    value: string;
}

export interface InfraAlertConditionCritical {
    duration: number;
    timeFunction?: string;
    value?: number;
}

export interface InfraAlertConditionWarning {
    duration: number;
    timeFunction?: string;
    value?: number;
}

export interface MonitorDowntimeEndRepeat {
    /**
     * A date, on which the Monitor Downtime's repeat cycle is expected to end.
     */
    onDate?: string;
    /**
     * Number of repetitions after which the Monitor Downtime's repeat cycle is expected to end.
     */
    onRepeat?: number;
}

export interface MonitorDowntimeFrequency {
    /**
     * A numerical list of days of a month on which the Monitor Downtime is scheduled to run.
     */
    daysOfMonths?: number[];
    /**
     * A list of days of the week on which the Monitor Downtime is scheduled to run.
     */
    daysOfWeek?: outputs.MonitorDowntimeFrequencyDaysOfWeek;
}

export interface MonitorDowntimeFrequencyDaysOfWeek {
    /**
     * An occurrence of the day selected within the month.
     */
    ordinalDayOfMonth: string;
    /**
     * The day of the week on which the Monitor Downtime would run.
     */
    weekDay: string;
}

export interface NotificationChannelProperty {
    /**
     * Notification property display key.
     */
    displayValue?: string;
    /**
     * Notification property key.
     */
    key: string;
    /**
     * Notification property label.
     */
    label?: string;
    /**
     * Notification property value.
     */
    value: string;
}

export interface NotificationDestinationAuthBasic {
    password: string;
    user: string;
}

export interface NotificationDestinationAuthCustomHeader {
    key: string;
    value: string;
}

export interface NotificationDestinationAuthToken {
    prefix?: string;
    token: string;
}

export interface NotificationDestinationProperty {
    /**
     * Notification property display key.
     */
    displayValue?: string;
    /**
     * Notification property key.
     */
    key: string;
    /**
     * Notification property label.
     */
    label?: string;
    /**
     * Notification property value.
     */
    value: string;
}

export interface NotificationDestinationSecureUrl {
    prefix: string;
    secureSuffix: string;
}

export interface NrqlAlertConditionCritical {
    /**
     * In minutes, must be in the range of 1 to 120 (inclusive).
     *
     * @deprecated use `thresholdDuration` attribute instead
     */
    duration?: number;
    /**
     * One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
     */
    operator?: string;
    /**
     * For baseline conditions must be in range [1, 1000].
     */
    threshold: number;
    /**
     * The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
     */
    thresholdDuration?: number;
    /**
     * The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
     */
    thresholdOccurrences?: string;
    /**
     * Valid values are: 'all' or 'any'
     *
     * @deprecated use `thresholdOccurrences` attribute instead
     */
    timeFunction?: string;
}

export interface NrqlAlertConditionNrql {
    /**
     * BETA PREVIEW: the `dataAccountId` field is in limited release and only enabled for preview on a per-account basis. - The New Relic account ID to use as the basis for the NRQL alert condition's `query`; will default to `accountId` if unspecified.
     */
    dataAccountId: string;
    /**
     * NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `evaluationOffset`.
     *
     * @deprecated use `aggregationMethod` attribute instead
     */
    evaluationOffset?: number;
    query: string;
    /**
     * NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `sinceValue`.
     *
     * @deprecated use `aggregationMethod` attribute instead
     */
    sinceValue?: string;
}

export interface NrqlAlertConditionTerm {
    /**
     * In minutes, must be in the range of 1 to 120 (inclusive).
     *
     * @deprecated use `thresholdDuration` attribute instead
     */
    duration?: number;
    /**
     * One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
     */
    operator?: string;
    /**
     * One of (critical, warning). Defaults to 'critical'. At least one condition term must have priority set to 'critical'.
     */
    priority?: string;
    /**
     * For baseline conditions must be in range [1, 1000].
     */
    threshold: number;
    /**
     * The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
     */
    thresholdDuration?: number;
    /**
     * The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
     */
    thresholdOccurrences?: string;
    /**
     * Valid values are: 'all' or 'any'
     *
     * @deprecated use `thresholdOccurrences` attribute instead
     */
    timeFunction?: string;
}

export interface NrqlAlertConditionWarning {
    /**
     * In minutes, must be in the range of 1 to 120 (inclusive).
     *
     * @deprecated use `thresholdDuration` attribute instead
     */
    duration?: number;
    /**
     * One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
     */
    operator?: string;
    /**
     * For baseline conditions must be in range [1, 1000].
     */
    threshold: number;
    /**
     * The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
     */
    thresholdDuration?: number;
    /**
     * The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
     */
    thresholdOccurrences?: string;
    /**
     * Valid values are: 'all' or 'any'
     *
     * @deprecated use `thresholdOccurrences` attribute instead
     */
    timeFunction?: string;
}

export interface ObfuscationRuleAction {
    /**
     * Attribute names for action. An empty list applies the action to all the attributes.
     */
    attributes: string[];
    /**
     * Expression Id for action.
     */
    expressionId: string;
    /**
     * Obfuscation method to use. Methods for replacing obfuscated values are `HASH_SHA256` and `MASK`.
     */
    method: string;
}

export interface OneDashboardPage {
    /**
     * Brief text describing the dashboard.
     */
    description?: string;
    /**
     * The unique entity identifier of the dashboard page in New Relic.
     */
    guid: string;
    /**
     * The title of the dashboard.
     */
    name: string;
    /**
     * An area widget.
     */
    widgetAreas?: outputs.OneDashboardPageWidgetArea[];
    /**
     * A bar widget.
     */
    widgetBars?: outputs.OneDashboardPageWidgetBar[];
    /**
     * A billboard widget.
     */
    widgetBillboards?: outputs.OneDashboardPageWidgetBillboard[];
    /**
     * A bullet widget.
     */
    widgetBullets?: outputs.OneDashboardPageWidgetBullet[];
    /**
     * A funnel widget.
     */
    widgetFunnels?: outputs.OneDashboardPageWidgetFunnel[];
    /**
     * A heatmap widget.
     */
    widgetHeatmaps?: outputs.OneDashboardPageWidgetHeatmap[];
    /**
     * A histogram widget.
     */
    widgetHistograms?: outputs.OneDashboardPageWidgetHistogram[];
    /**
     * A JSON widget.
     */
    widgetJsons?: outputs.OneDashboardPageWidgetJson[];
    /**
     * A line widget.
     */
    widgetLines?: outputs.OneDashboardPageWidgetLine[];
    /**
     * A log table widget.
     */
    widgetLogTables?: outputs.OneDashboardPageWidgetLogTable[];
    /**
     * A markdown widget.
     */
    widgetMarkdowns?: outputs.OneDashboardPageWidgetMarkdown[];
    /**
     * A pie widget.
     */
    widgetPies?: outputs.OneDashboardPageWidgetPy[];
    /**
     * A stacked bar widget.
     */
    widgetStackedBars?: outputs.OneDashboardPageWidgetStackedBar[];
    /**
     * A table widget.
     */
    widgetTables?: outputs.OneDashboardPageWidgetTable[];
}

export interface OneDashboardPageWidgetArea {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetAreaColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    /**
     * The ID of the widget.
     */
    id: string;
    /**
     * (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetAreaNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetAreaNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetAreaUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetAreaColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetAreaColorSeriesOverride[];
}

export interface OneDashboardPageWidgetAreaColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetAreaNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: string;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetAreaNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetAreaNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetAreaNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetAreaUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetAreaUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetAreaUnitSeriesOverride {
    /**
     * Series name
     */
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetBar {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetBarColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Use this item to filter the current dashboard.
     */
    filterCurrentDashboard?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    /**
     * The ID of the widget.
     */
    id: string;
    /**
     * (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     */
    linkedEntityGuids: string[];
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetBarNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetBarNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetBarUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetBarColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBarColorSeriesOverride[];
}

export interface OneDashboardPageWidgetBarColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetBarNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: string;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetBarNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBarNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetBarNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetBarUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBarUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetBarUnitSeriesOverride {
    /**
     * Series name
     */
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetBillboard {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetBillboardColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Threshold above which the displayed value will be styled with a red color.
     */
    critical?: string;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    /**
     * The ID of the widget.
     */
    id: string;
    /**
     * (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetBillboardNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetBillboardNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetBillboardUnit[];
    /**
     * (Optional) Threshold above which the displayed value will be styled with a yellow color.
     */
    warning?: string;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetBillboardColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBillboardColorSeriesOverride[];
}

export interface OneDashboardPageWidgetBillboardColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetBillboardNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: string;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetBillboardNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBillboardNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetBillboardNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetBillboardUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBillboardUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetBillboardUnitSeriesOverride {
    /**
     * Series name
     */
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetBullet {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetBulletColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    /**
     * The ID of the widget.
     */
    id: string;
    /**
     * (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Required) Visualization limit for the widget.
     */
    limit: number;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetBulletNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetBulletNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetBulletUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetBulletColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBulletColorSeriesOverride[];
}

export interface OneDashboardPageWidgetBulletColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetBulletNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: string;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetBulletNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBulletNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetBulletNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetBulletUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBulletUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetBulletUnitSeriesOverride {
    /**
     * Series name
     */
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetFunnel {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetFunnelColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    /**
     * The ID of the widget.
     */
    id: string;
    /**
     * (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetFunnelNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetFunnelNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetFunnelUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetFunnelColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetFunnelColorSeriesOverride[];
}

export interface OneDashboardPageWidgetFunnelColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetFunnelNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: string;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetFunnelNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetFunnelNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetFunnelNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetFunnelUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetFunnelUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetFunnelUnitSeriesOverride {
    /**
     * Series name
     */
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetHeatmap {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetHeatmapColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Use this item to filter the current dashboard.
     */
    filterCurrentDashboard?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    /**
     * The ID of the widget.
     */
    id: string;
    /**
     * (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     */
    linkedEntityGuids: string[];
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetHeatmapNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetHeatmapNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetHeatmapUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetHeatmapColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetHeatmapColorSeriesOverride[];
}

export interface OneDashboardPageWidgetHeatmapColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetHeatmapNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: string;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetHeatmapNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetHeatmapNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetHeatmapNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetHeatmapUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetHeatmapUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetHeatmapUnitSeriesOverride {
    /**
     * Series name
     */
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetHistogram {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetHistogramColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    /**
     * The ID of the widget.
     */
    id: string;
    /**
     * (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetHistogramNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetHistogramNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetHistogramUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetHistogramColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetHistogramColorSeriesOverride[];
}

export interface OneDashboardPageWidgetHistogramColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetHistogramNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: string;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetHistogramNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetHistogramNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetHistogramNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetHistogramUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetHistogramUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetHistogramUnitSeriesOverride {
    /**
     * Series name
     */
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetJson {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetJsonColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    /**
     * The ID of the widget.
     */
    id: string;
    /**
     * (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetJsonNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetJsonNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetJsonUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetJsonColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetJsonColorSeriesOverride[];
}

export interface OneDashboardPageWidgetJsonColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetJsonNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: string;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetJsonNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetJsonNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetJsonNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetJsonUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetJsonUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetJsonUnitSeriesOverride {
    /**
     * Series name
     */
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetLine {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetLineColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    /**
     * The ID of the widget.
     */
    id: string;
    /**
     * (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) A boolean value, which when true, sets the label to be visibly displayed within thresholds. In other words, if this attribute is set to true, the _label always visible_ toggle in the _Thresholds_ section in the settings of the widget is enabled.
     */
    isLabelVisible?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetLineNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetLineNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) An attribute that helps specify multiple thresholds, each inclusive of a range of values between which the threshold would need to function, the name of the threshold and its severity. Multiple thresholds can be defined in a table widget. The `threshold` attribute requires specifying the following attributes in a nested block -
     */
    thresholds?: outputs.OneDashboardPageWidgetLineThreshold[];
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetLineUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
    /**
     * (Optional) An attribute that specifies if the values on the graph to be rendered need to be fit to scale, or printed within the specified range from `yAxisLeftMin` (or 0 if it is not defined) to `yAxisLeftMax`. Use `yAxisLeftZero = true` with a combination of `yAxisLeftMin` and `yAxisLeftMax` to render values from 0 or the specified minimum to the maximum, and `yAxisLeftZero = false` to fit the graph to scale.
     */
    yAxisLeftZero?: boolean;
    /**
     * (Optional) An attribute which helps specify the configuration of the Y-Axis displayed on the right side of the line widget. This is a nested block, which includes the following attributes:
     */
    yAxisRight?: outputs.OneDashboardPageWidgetLineYAxisRight;
}

export interface OneDashboardPageWidgetLineColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetLineColorSeriesOverride[];
}

export interface OneDashboardPageWidgetLineColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetLineNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: string;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetLineNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetLineNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetLineNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetLineThreshold {
    /**
     * The value 'from' which the threshold would need to be applied.
     */
    from?: number;
    /**
     * The title of the dashboard.
     */
    name?: string;
    /**
     * The severity of the threshold, which would affect the visual appearance of the threshold (such as its color) accordingly. The value of this attribute would need to be one of the following - `warning`, `severe`, `critical`, `success`, `unavailable` which correspond to the severity labels _Warning_, _Approaching critical_, _Critical_, _Good_, _Neutral_ in the dropdown that helps specify the severity of thresholds in table widgets in the UI, respectively.
     */
    severity?: string;
    /**
     * The value until which the threshold would need to be applied.
     */
    to?: number;
}

export interface OneDashboardPageWidgetLineUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetLineUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetLineUnitSeriesOverride {
    /**
     * Series name
     */
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetLineYAxisRight {
    /**
     * Minimum value of the range to be specified with the Y-Axis on the right of the line widget.
     */
    yAxisRightMax?: number;
    /**
     * , `yAxisRightMax` - (Optional) Attributes which help specify a range of minimum and maximum values, which adjust the right Y axis to display the data within the specified minimum and maximum value for the axis.
     */
    yAxisRightMin?: number;
    /**
     * (Optional) An attribute which takes a list of strings, specifying a selection of series' displayed in the line chart to be adjusted against the values of the right Y-axis.
     */
    yAxisRightSeries?: string[];
    /**
     * (Optional) An attribute that specifies if the values on the graph to be rendered need to be fit to scale, or printed within the specified range from `yAxisRightMin` (or 0 if it is not defined) to `yAxisRightMax`. Use `yAxisRightZero = true` with a combination of `yAxisRightMin` and `yAxisRightMax` to render values from 0 or the specified minimum to the maximum, and `yAxisRightZero = false` to fit the graph to scale.
     */
    yAxisRightZero?: boolean;
}

export interface OneDashboardPageWidgetLogTable {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetLogTableColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    /**
     * The ID of the widget.
     */
    id: string;
    /**
     * (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetLogTableNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetLogTableNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetLogTableUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetLogTableColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetLogTableColorSeriesOverride[];
}

export interface OneDashboardPageWidgetLogTableColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetLogTableNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: string;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetLogTableNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetLogTableNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetLogTableNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetLogTableUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetLogTableUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetLogTableUnitSeriesOverride {
    /**
     * Series name
     */
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetMarkdown {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetMarkdownColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    /**
     * The ID of the widget.
     */
    id: string;
    /**
     * (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetMarkdownNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) The markdown source to be rendered in the widget.
     */
    text: string;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetMarkdownUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetMarkdownColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetMarkdownColorSeriesOverride[];
}

export interface OneDashboardPageWidgetMarkdownColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetMarkdownNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetMarkdownNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetMarkdownNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetMarkdownUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetMarkdownUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetMarkdownUnitSeriesOverride {
    /**
     * Series name
     */
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetPy {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetPyColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Use this item to filter the current dashboard.
     */
    filterCurrentDashboard?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    /**
     * The ID of the widget.
     */
    id: string;
    /**
     * (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     */
    linkedEntityGuids: string[];
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetPyNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetPyNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetPyUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetPyColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetPyColorSeriesOverride[];
}

export interface OneDashboardPageWidgetPyColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetPyNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: string;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetPyNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetPyNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetPyNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetPyUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetPyUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetPyUnitSeriesOverride {
    /**
     * Series name
     */
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetStackedBar {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetStackedBarColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    /**
     * The ID of the widget.
     */
    id: string;
    /**
     * (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetStackedBarNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetStackedBarNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetStackedBarUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetStackedBarColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetStackedBarColorSeriesOverride[];
}

export interface OneDashboardPageWidgetStackedBarColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetStackedBarNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: string;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetStackedBarNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetStackedBarNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetStackedBarNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetStackedBarUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetStackedBarUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetStackedBarUnitSeriesOverride {
    /**
     * Series name
     */
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetTable {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetTableColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Use this item to filter the current dashboard.
     */
    filterCurrentDashboard?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    /**
     * The ID of the widget.
     */
    id: string;
    /**
     * (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     */
    linkedEntityGuids: string[];
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetTableNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetTableNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) An attribute that helps specify multiple thresholds, each inclusive of a range of values between which the threshold would need to function, the name of the threshold and its severity. Multiple thresholds can be defined in a table widget. The `threshold` attribute requires specifying the following attributes in a nested block -
     */
    thresholds?: outputs.OneDashboardPageWidgetTableThreshold[];
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetTableUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetTableColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetTableColorSeriesOverride[];
}

export interface OneDashboardPageWidgetTableColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetTableNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: string;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetTableNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetTableNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetTableNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * Series name
     */
    seriesName?: string;
}

export interface OneDashboardPageWidgetTableThreshold {
    /**
     * The name of the column in the table, to which the threshold would need to be applied.
     */
    columnName?: string;
    /**
     * The value 'from' which the threshold would need to be applied.
     */
    from?: number;
    /**
     * The severity of the threshold, which would affect the visual appearance of the threshold (such as its color) accordingly. The value of this attribute would need to be one of the following - `warning`, `severe`, `critical`, `success`, `unavailable` which correspond to the severity labels _Warning_, _Approaching critical_, _Critical_, _Good_, _Neutral_ in the dropdown that helps specify the severity of thresholds in table widgets in the UI, respectively.
     */
    severity?: string;
    /**
     * The value until which the threshold would need to be applied.
     */
    to?: number;
}

export interface OneDashboardPageWidgetTableUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetTableUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetTableUnitSeriesOverride {
    /**
     * Series name
     */
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardRawPage {
    /**
     * Brief text describing the dashboard.
     */
    description?: string;
    /**
     * The unique entity identifier of the dashboard page in New Relic.
     */
    guid: string;
    /**
     * The title of the dashboard.
     */
    name: string;
    /**
     * (Optional) A nested block that describes a widget. See Nested widget blocks below for details.
     */
    widgets?: outputs.OneDashboardRawPageWidget[];
}

export interface OneDashboardRawPageWidget {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Required) The configuration of the widget.
     */
    configuration: string;
    /**
     * (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
     */
    height?: number;
    /**
     * The ID of the widget.
     */
    id: string;
    /**
     * (Optional) Related entity GUIDs.
     */
    linkedEntityGuids?: string[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) A title for the widget.
     */
    title: string;
    /**
     * (Required) The visualization ID of the widget
     */
    visualizationId: string;
    /**
     * (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
     */
    width?: number;
}

export interface OneDashboardVariable {
    /**
     * (Optional) A list of default values for this variable. To select **all** default values, the appropriate value to be used with this argument would be `["*"]`.
     */
    defaultValues?: string[];
    /**
     * (Optional) Indicates whether this variable supports multiple selection or not. Only applies to variables of type `nrql` or `enum`.
     */
    isMultiSelection?: boolean;
    /**
     * (Optional) List of possible values for variables of type `enum`. See Nested item blocks below for details.
     */
    items?: outputs.OneDashboardVariableItem[];
    /**
     * The title of the dashboard.
     */
    name: string;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQuery?: outputs.OneDashboardVariableNrqlQuery;
    /**
     * (Optional) Specifies additional options to be added to dashboard variables. Supports the following nested attribute(s) -
     */
    options?: outputs.OneDashboardVariableOption[];
    /**
     * (Optional) Indicates the strategy to apply when replacing a variable in a NRQL query. One of `default`, `identifier`, `number` or `string`.
     */
    replacementStrategy: string;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
     */
    type: string;
}

export interface OneDashboardVariableItem {
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title?: string;
    /**
     * (Required) A possible variable value
     */
    value: string;
}

export interface OneDashboardVariableNrqlQuery {
    /**
     * New Relic account ID(s) to issue the query against.
     */
    accountIds?: string[];
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardVariableOption {
    /**
     * (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
     */
    ignoreTimeRange?: boolean;
}

export interface ServiceLevelEvents {
    /**
     * The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,
     * and that contains the NRDB data for the SLI/SLO calculations. Note that changing the account ID will force a new resource.
     */
    accountId: string;
    /**
     * The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.
     */
    badEvents?: outputs.ServiceLevelEventsBadEvents;
    /**
     * The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.
     */
    goodEvents?: outputs.ServiceLevelEventsGoodEvents;
    /**
     * The definition of valid requests.
     */
    validEvents: outputs.ServiceLevelEventsValidEvents;
}

export interface ServiceLevelEventsBadEvents {
    /**
     * The event type where NRDB data will be fetched from.
     */
    from: string;
    /**
     * The NRQL SELECT clause to aggregate events.
     */
    select?: outputs.ServiceLevelEventsBadEventsSelect;
    /**
     * A filter that narrows down the NRDB events just to those that are considered bad responses (e.g, those that refer to
     * a particular entity and returned an error).
     */
    where?: string;
}

export interface ServiceLevelEventsBadEventsSelect {
    /**
     * The event attribute to use in the SELECT clause.
     */
    attribute?: string;
    /**
     * The function to use in the SELECT clause. Valid values are `COUNT`, `SUM`, `GET_FIELD`, and `GET_CDF_COUNT`.
     */
    function: string;
    /**
     * Limit for values to be counter by `GET_CDF_COUNT` function.
     */
    threshold?: number;
}

export interface ServiceLevelEventsGoodEvents {
    /**
     * The event type where NRDB data will be fetched from.
     */
    from: string;
    /**
     * The NRQL SELECT clause to aggregate events.
     */
    select?: outputs.ServiceLevelEventsGoodEventsSelect;
    /**
     * A filter that narrows down the NRDB events just to those that are considered good responses (e.g, those that refer to
     * a particular entity and were successful).
     */
    where?: string;
}

export interface ServiceLevelEventsGoodEventsSelect {
    /**
     * The event attribute to use in the SELECT clause.
     */
    attribute?: string;
    /**
     * The function to use in the SELECT clause. Valid values are `COUNT`, `SUM`, `GET_FIELD`, and `GET_CDF_COUNT`.
     */
    function: string;
    /**
     * Limit for values to be counter by `GET_CDF_COUNT` function.
     */
    threshold?: number;
}

export interface ServiceLevelEventsValidEvents {
    /**
     * The event type where NRDB data will be fetched from.
     */
    from: string;
    /**
     * The NRQL SELECT clause to aggregate events.
     */
    select?: outputs.ServiceLevelEventsValidEventsSelect;
    /**
     * A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
     */
    where?: string;
}

export interface ServiceLevelEventsValidEventsSelect {
    /**
     * The event attribute to use in the SELECT clause.
     */
    attribute?: string;
    /**
     * The function to use in the SELECT clause. Valid values are `COUNT`, `SUM`, `GET_FIELD`, and `GET_CDF_COUNT`.
     */
    function: string;
    /**
     * Limit for values to be counter by `GET_CDF_COUNT` function.
     */
    threshold?: number;
}

export interface ServiceLevelObjective {
    /**
     * The description of the SLI.
     */
    description?: string;
    /**
     * A short name for the SLI that will help anyone understand what it is about.
     */
    name?: string;
    /**
     * The target of the objective, valid values between `0` and `100`. Up to 5 decimals accepted.
     */
    target: number;
    /**
     * Time window is the period of the objective.
     */
    timeWindow: outputs.ServiceLevelObjectiveTimeWindow;
}

export interface ServiceLevelObjectiveTimeWindow {
    /**
     * Rolling window.
     */
    rolling: outputs.ServiceLevelObjectiveTimeWindowRolling;
}

export interface ServiceLevelObjectiveTimeWindowRolling {
    /**
     * Valid values are `1`, `7` and `28`.
     */
    count: number;
    /**
     * The only supported value is `DAY`.
     */
    unit: string;
}

export interface WorkflowDestination {
    /**
     * (Required) Destination's channel id.
     */
    channelId: string;
    /**
     * The name of the workflow.
     */
    name: string;
    /**
     * List of triggers to notify about in this destination configuration.
     */
    notificationTriggers: string[];
    /**
     * (Required) The type of the destination. One of: (EMAIL, EVENT_BRIDGE, PAGERDUTY_ACCOUNT_INTEGRATION, PAGERDUTY_SERVICE_INTEGRATION, SERVICE_NOW, WEBHOOK, MOBILE_PUSH, SLACK, JIRA).
     */
    type: string;
}

export interface WorkflowEnrichments {
    /**
     * (Required) Nrql type Enrichments.
     */
    nrqls: outputs.WorkflowEnrichmentsNrql[];
}

export interface WorkflowEnrichmentsNrql {
    /**
     * Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.
     */
    accountId: string;
    /**
     * A set of key-value pairs to represent a enrichment configuration.
     */
    configurations: outputs.WorkflowEnrichmentsNrqlConfiguration[];
    /**
     * Enrichment's id.
     */
    enrichmentId: string;
    /**
     * The name of the workflow.
     */
    name: string;
    /**
     * The type of the enrichment. One of: (NRQL).
     */
    type: string;
}

export interface WorkflowEnrichmentsNrqlConfiguration {
    /**
     * enrichment's NRQL query
     */
    query: string;
}

export interface WorkflowIssuesFilter {
    /**
     * filter id.
     */
    filterId: string;
    /**
     * (Required) Filter's name.
     */
    name: string;
    /**
     * A condition an issue event should satisfy to be processed by the workflow
     */
    predicates?: outputs.WorkflowIssuesFilterPredicate[];
    /**
     * Type of the filter. Please just set this field to `FILTER`. The field is likely to be deprecated/removed in the near future.
     */
    type: string;
}

export interface WorkflowIssuesFilterPredicate {
    /**
     * Issue event attribute to check
     */
    attribute: string;
    /**
     * An operator to use to compare the attribute with the provided `values`, see supported operators below
     */
    operator: string;
    /**
     * The `attribute` must match **any** of the values in this list
     */
    values: string[];
}

export namespace cloud {
    export interface AwsGovcloudIntegrationsAlb {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.
         */
        loadBalancerPrefixes?: string[];
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsApiGateway {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        stagePrefixes?: string[];
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsAutoScaling {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface AwsGovcloudIntegrationsAwsDirectConnect {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface AwsGovcloudIntegrationsAwsStates {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface AwsGovcloudIntegrationsCloudtrail {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface AwsGovcloudIntegrationsDynamoDb {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsEbs {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsEc2 {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * Specify if IP addresses of ec2 instance should be collected
         */
        fetchIpAddresses?: boolean;
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsElasticSearch {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * Specify if IP addresses of ec2 instance should be collected
         */
        fetchNodes?: boolean;
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsElb {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface AwsGovcloudIntegrationsEmr {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsIam {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsLambda {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsRds {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsRedShift {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsRoute53 {
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface AwsGovcloudIntegrationsS3 {
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsSns {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface AwsGovcloudIntegrationsSqs {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.
         */
        queuePrefixes?: string[];
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsAlb {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.
         */
        loadBalancerPrefixes?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsApiGateway {
        /**
         * Specify each AWS region that includes the resources that you want to monitor
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        stagePrefixes?: string[];
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsAutoScaling {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsAppSync {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsAthena {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsCognito {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsConnect {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsDirectConnect {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsFsx {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsGlue {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsKinesisAnalytics {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsMediaConvert {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsMediaPackageVod {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsMq {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsMsk {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsNeptune {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsQldb {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsRoute53resolver {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsStates {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsTransitGateway {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsWaf {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsAwsWafv2 {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsBilling {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsCloudfront {
        /**
         * Specify if Lambdas@Edge should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchLambdasAtEdge?: boolean;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsCloudtrail {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsDocDb {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsDynamodb {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * Specify if tags and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsEbs {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsEc2 {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Specify if the old legacy metadata and tag names have to be kept, it will consume more ingest data size
         */
        duplicateEc2Tags?: boolean;
        /**
         * Specify if IP addresses of ec2 instance should be collected
         */
        fetchIpAddresses?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsEcs {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Specify if tags and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsEfs {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Specify if tags and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsElasticache {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsElasticbeanstalk {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * Specify if tags and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsElasticsearch {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Specify if metrics should be collected for nodes. Turning it on will increase the number of API calls made to CloudWatch.
         */
        fetchNodes?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsElb {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsEmr {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Specify if tags and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsHealth {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsIam {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsIot {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsKinesis {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Specify if Shards should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchShards?: boolean;
        /**
         * Specify if tags and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsKinesisFirehose {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsLambda {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Specify if tags and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsRds {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Specify if tags and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsRedshift {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsRoute53 {
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsS3 {
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsSes {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsSns {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsSqs {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.
         */
        queuePrefixes?: string[];
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsTrustedAdvisor {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsVpc {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Specify if NAT gateway should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchNatGateway?: boolean;
        /**
         * Specify if VPN should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchVpn?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsXRay {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AzureIntegrationsApiManagement {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsAppGateway {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsAppService {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsContainers {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsCosmosDb {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsCostManagement {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify if additional cost data per tag should be collected. This field is case sensitive.
         */
        tagKeys?: string[];
    }

    export interface AzureIntegrationsDataFactory {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsEventHub {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsExpressRoute {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsFirewalls {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsFrontDoor {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsFunctions {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsKeyVault {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsLoadBalancer {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsLogicApps {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsMachineLearning {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsMariaDb {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsMonitor {
        /**
         * A flag that specifies if the integration is active
         */
        enabled?: boolean;
        /**
         * Specify resource tags in 'key:value' form to be excluded from monitoring
         */
        excludeTags?: string[];
        /**
         * Specify resource tags in 'key:value' form to be monitored
         */
        includeTags?: string[];
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
        /**
         * Specify each Azure resource type that needs to be monitored
         */
        resourceTypes?: string[];
    }

    export interface AzureIntegrationsMysql {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsMysqlFlexible {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsPostgresql {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsPostgresqlFlexible {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsPowerBiDedicated {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsRedisCache {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsServiceBus {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsSql {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsSqlManaged {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsStorage {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsVirtualMachine {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsVirtualNetworks {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsVms {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsVpnGateway {
        /**
         * The data polling interval in seconds
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface GcpIntegrationsAlloyDb {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsAppEngine {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsBigQuery {
        /**
         * to fetch tags of the resource
         */
        fetchTags?: boolean;
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsBigTable {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsComposer {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsDataFlow {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsDataProc {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsDataStore {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsFireBaseDatabase {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsFireBaseHosting {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsFireBaseStorage {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsFireStore {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsFunctions {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsInterconnect {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsKubernetes {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsLoadBalancing {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsMemCache {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsPubSub {
        /**
         * to fetch tags of the resource
         */
        fetchTags?: boolean;
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsRedis {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsRouter {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsRun {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsSpanner {
        /**
         * to fetch tags of the resource
         */
        fetchTags?: boolean;
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsSql {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsStorage {
        /**
         * to fetch tags of the resource
         */
        fetchTags?: boolean;
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsVirtualMachines {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsVpcAccess {
        /**
         * the data polling interval in seconds
         */
        metricsPollingInterval?: number;
    }

}

export namespace insights {
    export interface EventEvent {
        /**
         * An attribute to include in your event payload. Multiple attribute blocks can be defined for an event.
         */
        attributes: outputs.insights.EventEventAttribute[];
        /**
         * Must be a Unix epoch timestamp. You can define timestamps either in seconds or in milliseconds.
         */
        timestamp?: number;
        /**
         * The event's name. Can be a combination of alphanumeric characters, underscores, and colons.
         */
        type: string;
    }

    export interface EventEventAttribute {
        /**
         * The name of the attribute.
         */
        key: string;
        /**
         * Specify the type for the attribute value. This is useful when passing integer or float values to Insights. Allowed values are string, int, or float. Defaults to string.
         */
        type?: string;
        /**
         * The value of the attribute.
         */
        value: string;
    }

}

export namespace plugins {
    export interface WorkloadEntitySearchQuery {
        /**
         * A valid entity search query; empty, and null values are considered invalid.
         */
        query: string;
    }

    export interface WorkloadStatusConfigAutomatic {
        /**
         * Whether the automatic status configuration is enabled or not.
         */
        enabled: boolean;
        /**
         * An additional meta-rule that can consider all entities that haven't been evaluated by any other rule.
         */
        remainingEntitiesRule?: outputs.plugins.WorkloadStatusConfigAutomaticRemainingEntitiesRule;
        /**
         * A list of rules.
         */
        rules?: outputs.plugins.WorkloadStatusConfigAutomaticRule[];
    }

    export interface WorkloadStatusConfigAutomaticRemainingEntitiesRule {
        /**
         * The input object used to represent a rollup strategy.
         */
        remainingEntitiesRuleRollup: outputs.plugins.WorkloadStatusConfigAutomaticRemainingEntitiesRuleRemainingEntitiesRuleRollup;
    }

    export interface WorkloadStatusConfigAutomaticRemainingEntitiesRuleRemainingEntitiesRuleRollup {
        /**
         * The grouping to be applied to the remaining entities.
         */
        groupBy: string;
        /**
         * The rollup strategy that is applied to a group of entities.
         */
        strategy: string;
        /**
         * Type of threshold defined for the rule. This is an optional field that only applies when strategy is WORST_STATUS_WINS. Use a threshold to roll up the worst status only after a certain amount of entities are not operational.
         */
        thresholdType?: string;
        /**
         * Threshold value defined for the rule. This optional field is used in combination with thresholdType. If the threshold type is null, the threshold value will be ignored.
         */
        thresholdValue?: number;
    }

    export interface WorkloadStatusConfigAutomaticRule {
        /**
         * A list of entity GUIDs composing the rule. At least one of `entityGuids` or `nrqlQuery` must be defined.
         */
        entityGuids: string[];
        /**
         * A list of entity search queries used to retrieve the entities that compose the rule. See Nested nrqlQuery blocks below for details. At least one of `entityGuids` or `nrqlQuery` must be defined.
         */
        nrqlQueries?: outputs.plugins.WorkloadStatusConfigAutomaticRuleNrqlQuery[];
        /**
         * The input object used to represent a rollup strategy. See Nested rollup blocks below for details.
         */
        rollup: outputs.plugins.WorkloadStatusConfigAutomaticRuleRollup;
    }

    export interface WorkloadStatusConfigAutomaticRuleNrqlQuery {
        /**
         * The entity search query that is used to perform the search of a group of entities.
         */
        query: string;
    }

    export interface WorkloadStatusConfigAutomaticRuleRollup {
        /**
         * The rollup strategy that is applied to a group of entities.
         */
        strategy: string;
        /**
         * Type of threshold defined for the rule. This is an optional field that only applies when strategy is WORST_STATUS_WINS. Use a threshold to roll up the worst status only after a certain amount of entities are not operational.
         */
        thresholdType?: string;
        /**
         * Threshold value defined for the rule. This optional field is used in combination with thresholdType. If the threshold type is null, the threshold value will be ignored.
         */
        thresholdValue?: number;
    }

    export interface WorkloadStatusConfigStatic {
        /**
         * Relevant information about the workload.
         */
        description?: string;
        /**
         * Whether the static status configuration is enabled or not.
         */
        enabled: boolean;
        /**
         * The status of the workload.
         */
        status: string;
        /**
         * A short description of the status of the workload.
         */
        summary?: string;
    }

}

export namespace synthetics {
    export interface BrokenLinksMonitorTag {
        /**
         * Name of the tag key.
         */
        key: string;
        /**
         * Values associated with the tag key.
         */
        values: string[];
    }

    export interface CertCheckMonitorTag {
        /**
         * Name of the tag key.
         */
        key: string;
        /**
         * Values associated with the tag key.
         */
        values: string[];
    }

    export interface MonitorCustomHeader {
        /**
         * Header name.
         */
        name?: string;
        /**
         * Header Value.
         */
        value?: string;
    }

    export interface MonitorTag {
        /**
         * Name of the tag key.
         */
        key: string;
        /**
         * Values associated with the tag key.
         */
        values: string[];
    }

    export interface MultiLocationAlertConditionCritical {
        /**
         * The minimum number of monitor locations that must be concurrently failing before an incident is opened.
         */
        threshold: number;
    }

    export interface MultiLocationAlertConditionWarning {
        /**
         * The minimum number of monitor locations that must be concurrently failing before an incident is opened.
         */
        threshold: number;
    }

    export interface ScriptMonitorLocationPrivate {
        /**
         * The unique identifier for the Synthetics private location in New Relic.
         */
        guid: string;
        /**
         * The location's Verified Script Execution password, Only necessary if Verified Script Execution is enabled for the location.
         */
        vsePassword?: string;
    }

    export interface ScriptMonitorTag {
        /**
         * Name of the tag key.
         */
        key: string;
        /**
         * Values associated with the tag key.
         */
        values: string[];
    }

    export interface StepMonitorLocationPrivate {
        /**
         * The unique identifier for the Synthetics private location in New Relic.
         */
        guid: string;
        /**
         * The location's Verified Script Execution password, only necessary if Verified Script Execution is enabled for the location.
         */
        vsePassword?: string;
    }

    export interface StepMonitorStep {
        /**
         * The position of the step within the script ranging from 0-100.
         */
        ordinal: number;
        /**
         * Name of the tag key. Valid values are ASSERT_ELEMENT, ASSERT_MODAL, ASSERT_TEXT, ASSERT_TITLE, CLICK_ELEMENT, DISMISS_MODAL, DOUBLE_CLICK_ELEMENT, HOVER_ELEMENT, NAVIGATE, SECURE_TEXT_ENTRY, SELECT_ELEMENT, TEXT_ENTRY.
         */
        type: string;
        /**
         * The metadata values related to the step.
         */
        values?: string[];
    }

    export interface StepMonitorTag {
        /**
         * Name of the tag key.
         */
        key: string;
        /**
         * Values associated with the tag key.
         */
        values: string[];
    }

}
