// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertChannelConfig {
    /**
     * The API key for integrating with OpsGenie.
     */
    apiKey?: string;
    /**
     * Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
     */
    authPassword?: string;
    /**
     * Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
     */
    authType?: string;
    /**
     * Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
     */
    authUsername?: string;
    /**
     * The base URL of the webhook destination.
     */
    baseUrl?: string;
    /**
     * The Slack channel to send notifications to.
     */
    channel?: string;
    /**
     * A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
     */
    headers?: {[key: string]: string};
    /**
     * Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
     */
    headersString?: string;
    /**
     * `true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
     */
    includeJsonAttachment?: string;
    /**
     * The key for integrating with VictorOps.
     */
    key?: string;
    /**
     * A map of key/value pairs that represents the webhook payload.  Must provide `payloadType` if setting this argument.
     */
    payload?: {[key: string]: string};
    /**
     * Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
     */
    payloadString?: string;
    /**
     * Can either be `application/json` or `application/x-www-form-urlencoded`. The `payloadType` argument is _required_ if `payload` is set.
     */
    payloadType?: string;
    /**
     * Comma delimited list of email addresses.
     */
    recipients?: string;
    /**
     * The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
     */
    region?: string;
    /**
     * The route key for integrating with VictorOps.
     */
    routeKey?: string;
    /**
     * Specifies the service key for integrating with Pagerduty.
     */
    serviceKey?: string;
    /**
     * A set of tags for targeting notifications. Multiple values are comma separated.
     */
    tags?: string;
    /**
     * A set of teams for targeting notifications. Multiple values are comma separated.
     */
    teams?: string;
    /**
     * [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
     */
    url?: string;
    userId?: string;
}

export interface AlertConditionTerm {
    duration: number;
    operator?: string;
    priority?: string;
    threshold: number;
    timeFunction: string;
}

export interface AlertMutingRuleCondition {
    /**
     * The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
     */
    conditions: outputs.AlertMutingRuleConditionCondition[];
    /**
     * The operator used to combine all the MutingRuleConditions within the group. Valid values are `AND`, `OR`.
     */
    operator: string;
}

export interface AlertMutingRuleConditionCondition {
    /**
     * The attribute on an incident. Valid values are   `accountId`, `conditionId`, `conditionName`, `conditionRunbookUrl`, `conditionType`, `entity.guid`, `nrqlEventType`, `nrqlQuery`, `policyId`, `policyName`, `product`, `tags.<NAME>`, `targetId`, `targetName`
     */
    attribute: string;
    /**
     * The operator used to combine all the MutingRuleConditions within the group. Valid values are `AND`, `OR`.
     */
    operator: string;
    /**
     * The value(s) to compare against the attribute's value.
     */
    values: string[];
}

export interface AlertMutingRuleSchedule {
    /**
     * The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeatCount`
     */
    endRepeat?: string;
    /**
     * The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'
     */
    endTime?: string;
    /**
     * The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
     */
    repeat?: string;
    /**
     * The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `endRepeat`
     */
    repeatCount?: number;
    /**
     * The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'
     */
    startTime?: string;
    timeZone: string;
    /**
     * The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
     */
    weeklyRepeatDays?: string[];
}

export interface EntityTagsTag {
    /**
     * The tag key.
     */
    key: string;
    /**
     * The tag values.
     */
    values: string[];
}

export interface GetAlertChannelConfig {
    apiKey?: string;
    authPassword?: string;
    authType?: string;
    authUsername?: string;
    baseUrl?: string;
    channel?: string;
    headers?: {[key: string]: string};
    includeJsonAttachment?: string;
    key?: string;
    payload?: {[key: string]: string};
    payloadString?: string;
    payloadType?: string;
    recipients?: string;
    region?: string;
    routeKey?: string;
    serviceKey?: string;
    tags?: string;
    teams?: string;
    url?: string;
    userId?: string;
}

export interface GetEntityTag {
    /**
     * The tag key.
     */
    key: string;
    /**
     * The tag value.
     */
    value: string;
}

export interface GetNotificationDestinationProperty {
    displayValue?: string;
    key: string;
    label?: string;
    value: string;
}

export interface GetTestGrokPatternTestGrok {
    /**
     * Nested list containing information about any attributes that were extracted.
     */
    attributes: outputs.GetTestGrokPatternTestGrokAttribute[];
    /**
     * The log line that was tested against.
     */
    logLine: string;
    /**
     * Whether the Grok pattern matched.
     */
    matched: boolean;
}

export interface GetTestGrokPatternTestGrokAttribute {
    /**
     * The attribute name.
     */
    name: string;
    /**
     * A string representation of the extracted value (which might not be a String).
     */
    value: string;
}

export interface InfraAlertConditionCritical {
    duration: number;
    timeFunction?: string;
    value?: number;
}

export interface InfraAlertConditionWarning {
    duration: number;
    timeFunction?: string;
    value?: number;
}

export interface NotificationChannelProperty {
    /**
     * The notification property display value.
     */
    displayValue?: string;
    /**
     * The notification property key.
     */
    key: string;
    /**
     * The notification property label.
     */
    label?: string;
    /**
     * The notification property value.
     */
    value: string;
}

export interface NotificationDestinationAuthBasic {
    /**
     * Specifies an authentication password for use with a destination.
     */
    password: string;
    /**
     * The username of the basic auth.
     */
    user: string;
}

export interface NotificationDestinationAuthToken {
    /**
     * The prefix of the token auth.
     */
    prefix?: string;
    /**
     * Specifies the token for integrating.
     */
    token: string;
}

export interface NotificationDestinationProperty {
    /**
     * The notification property display value.
     */
    displayValue?: string;
    /**
     * The notification property key.
     */
    key: string;
    /**
     * The notification property label.
     */
    label?: string;
    /**
     * The notification property value.
     */
    value: string;
}

export interface NrqlAlertConditionCritical {
    /**
     * @deprecated use `threshold_duration` attribute instead
     */
    duration?: number;
    operator?: string;
    threshold: number;
    thresholdDuration?: number;
    thresholdOccurrences?: string;
    /**
     * @deprecated use `threshold_occurrences` attribute instead
     */
    timeFunction?: string;
}

export interface NrqlAlertConditionNrql {
    /**
     * @deprecated use `aggregation_method` attribute instead
     */
    evaluationOffset?: number;
    query: string;
    /**
     * @deprecated use `aggregation_method` attribute instead
     */
    sinceValue?: string;
}

export interface NrqlAlertConditionTerm {
    /**
     * @deprecated use `threshold_duration` attribute instead
     */
    duration?: number;
    operator?: string;
    priority?: string;
    threshold: number;
    thresholdDuration?: number;
    thresholdOccurrences?: string;
    /**
     * @deprecated use `threshold_occurrences` attribute instead
     */
    timeFunction?: string;
}

export interface NrqlAlertConditionWarning {
    /**
     * @deprecated use `threshold_duration` attribute instead
     */
    duration?: number;
    operator?: string;
    threshold: number;
    thresholdDuration?: number;
    thresholdOccurrences?: string;
    /**
     * @deprecated use `threshold_occurrences` attribute instead
     */
    timeFunction?: string;
}

export interface ObfuscationRuleAction {
    /**
     * Attribute names for action. An empty list applies the action to all the attributes.
     */
    attributes: string[];
    /**
     * Expression Id for action.
     */
    expressionId: string;
    /**
     * Obfuscation method to use. Methods for replacing obfuscated values are `HASH_SHA256` and `MASK`.
     */
    method: string;
}

export interface OneDashboardPage {
    /**
     * Brief text describing the dashboard.
     */
    description?: string;
    /**
     * The unique entity identifier of the dashboard page in New Relic.
     */
    guid: string;
    /**
     * The title of the dashboard.
     */
    name: string;
    widgetAreas?: outputs.OneDashboardPageWidgetArea[];
    widgetBars?: outputs.OneDashboardPageWidgetBar[];
    widgetBillboards?: outputs.OneDashboardPageWidgetBillboard[];
    widgetBullets?: outputs.OneDashboardPageWidgetBullet[];
    widgetFunnels?: outputs.OneDashboardPageWidgetFunnel[];
    widgetHeatmaps?: outputs.OneDashboardPageWidgetHeatmap[];
    widgetHistograms?: outputs.OneDashboardPageWidgetHistogram[];
    widgetJsons?: outputs.OneDashboardPageWidgetJson[];
    widgetLines?: outputs.OneDashboardPageWidgetLine[];
    widgetLogTables?: outputs.OneDashboardPageWidgetLogTable[];
    widgetMarkdowns?: outputs.OneDashboardPageWidgetMarkdown[];
    widgetPies?: outputs.OneDashboardPageWidgetPy[];
    widgetStackedBars?: outputs.OneDashboardPageWidgetStackedBar[];
    widgetTables?: outputs.OneDashboardPageWidgetTable[];
}

export interface OneDashboardPageWidgetArea {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetAreaColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetAreaNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetAreaNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetAreaUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetAreaColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetAreaColorSeriesOverride[];
}

export interface OneDashboardPageWidgetAreaColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetAreaNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetAreaNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetAreaNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetAreaNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetAreaUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetAreaUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetAreaUnitSeriesOverride {
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetBar {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetBarColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Use this item to filter the current dashboard.
     */
    filterCurrentDashboard?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     */
    linkedEntityGuids: string[];
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetBarNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetBarNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetBarUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetBarColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBarColorSeriesOverride[];
}

export interface OneDashboardPageWidgetBarColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetBarNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetBarNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBarNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetBarNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetBarUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBarUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetBarUnitSeriesOverride {
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetBillboard {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetBillboardColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Threshold above which the displayed value will be styled with a red color.
     */
    critical?: string;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetBillboardNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetBillboardNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetBillboardUnit[];
    /**
     * (Optional) Threshold above which the displayed value will be styled with a yellow color.
     */
    warning?: string;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetBillboardColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBillboardColorSeriesOverride[];
}

export interface OneDashboardPageWidgetBillboardColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetBillboardNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetBillboardNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBillboardNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetBillboardNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetBillboardUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBillboardUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetBillboardUnitSeriesOverride {
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetBullet {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetBulletColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Required) Visualization limit for the widget.
     */
    limit: number;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetBulletNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetBulletNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetBulletUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetBulletColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBulletColorSeriesOverride[];
}

export interface OneDashboardPageWidgetBulletColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetBulletNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetBulletNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBulletNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetBulletNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetBulletUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetBulletUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetBulletUnitSeriesOverride {
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetFunnel {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetFunnelColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetFunnelNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetFunnelNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetFunnelUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetFunnelColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetFunnelColorSeriesOverride[];
}

export interface OneDashboardPageWidgetFunnelColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetFunnelNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetFunnelNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetFunnelNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetFunnelNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetFunnelUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetFunnelUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetFunnelUnitSeriesOverride {
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetHeatmap {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetHeatmapColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Use this item to filter the current dashboard.
     */
    filterCurrentDashboard?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     */
    linkedEntityGuids: string[];
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetHeatmapNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetHeatmapNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetHeatmapUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetHeatmapColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetHeatmapColorSeriesOverride[];
}

export interface OneDashboardPageWidgetHeatmapColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetHeatmapNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetHeatmapNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetHeatmapNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetHeatmapNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetHeatmapUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetHeatmapUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetHeatmapUnitSeriesOverride {
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetHistogram {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetHistogramColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetHistogramNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetHistogramNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetHistogramUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetHistogramColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetHistogramColorSeriesOverride[];
}

export interface OneDashboardPageWidgetHistogramColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetHistogramNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetHistogramNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetHistogramNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetHistogramNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetHistogramUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetHistogramUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetHistogramUnitSeriesOverride {
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetJson {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetJsonColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetJsonNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetJsonNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetJsonUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetJsonColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetJsonColorSeriesOverride[];
}

export interface OneDashboardPageWidgetJsonColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetJsonNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetJsonNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetJsonNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetJsonNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetJsonUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetJsonUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetJsonUnitSeriesOverride {
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetLine {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetLineColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetLineNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetLineNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetLineUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetLineColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetLineColorSeriesOverride[];
}

export interface OneDashboardPageWidgetLineColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetLineNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetLineNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetLineNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetLineNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetLineUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetLineUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetLineUnitSeriesOverride {
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetLogTable {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetLogTableColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetLogTableNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetLogTableNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetLogTableUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetLogTableColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetLogTableColorSeriesOverride[];
}

export interface OneDashboardPageWidgetLogTableColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetLogTableNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetLogTableNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetLogTableNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetLogTableNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetLogTableUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetLogTableUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetLogTableUnitSeriesOverride {
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetMarkdown {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetMarkdownColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetMarkdownNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) The markdown source to be rendered in the widget.
     */
    text?: string;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetMarkdownUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetMarkdownColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetMarkdownColorSeriesOverride[];
}

export interface OneDashboardPageWidgetMarkdownColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetMarkdownNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetMarkdownNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetMarkdownNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetMarkdownUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetMarkdownUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetMarkdownUnitSeriesOverride {
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetPy {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetPyColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Use this item to filter the current dashboard.
     */
    filterCurrentDashboard?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     */
    linkedEntityGuids: string[];
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetPyNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetPyNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetPyUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetPyColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetPyColorSeriesOverride[];
}

export interface OneDashboardPageWidgetPyColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetPyNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetPyNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetPyNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetPyNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetPyUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetPyUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetPyUnitSeriesOverride {
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetStackedBar {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetStackedBarColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetStackedBarNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetStackedBarNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetStackedBarUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetStackedBarColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetStackedBarColorSeriesOverride[];
}

export interface OneDashboardPageWidgetStackedBarColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetStackedBarNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetStackedBarNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetStackedBarNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetStackedBarNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetStackedBarUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetStackedBarUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetStackedBarUnitSeriesOverride {
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetTable {
    /**
     * (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
     */
    colors?: outputs.OneDashboardPageWidgetTableColor[];
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
     */
    facetShowOtherSeries?: boolean;
    /**
     * (Optional) Use this item to filter the current dashboard.
     */
    filterCurrentDashboard?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.
     */
    ignoreTimeRange?: boolean;
    /**
     * (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
     */
    legendEnabled?: boolean;
    /**
     * (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     */
    linkedEntityGuids: string[];
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetTableNrqlQuery[];
    /**
     * (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
     */
    nullValues?: outputs.OneDashboardPageWidgetTableNullValue[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
     */
    units?: outputs.OneDashboardPageWidgetTableUnit[];
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
    yAxisLeftMax?: number;
    /**
     * , `yAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
     */
    yAxisLeftMin?: number;
}

export interface OneDashboardPageWidgetTableColor {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetTableColorSeriesOverride[];
}

export interface OneDashboardPageWidgetTableColorSeriesOverride {
    /**
     * (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
     */
    color?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetTableNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetTableNullValue {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetTableNullValueSeriesOverride[];
}

export interface OneDashboardPageWidgetTableNullValueSeriesOverride {
    /**
     * Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
     */
    nullValue?: string;
    seriesName?: string;
}

export interface OneDashboardPageWidgetTableUnit {
    /**
     * (Optional) A Nested block which will take two string attributes `color` and `seriesName`. This nested block is used to customize colors of individual.
     */
    seriesOverrides?: outputs.OneDashboardPageWidgetTableUnitSeriesOverride[];
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardPageWidgetTableUnitSeriesOverride {
    seriesName?: string;
    /**
     * (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
     */
    unit?: string;
}

export interface OneDashboardRawPage {
    /**
     * Brief text describing the dashboard.
     */
    description?: string;
    /**
     * The unique entity identifier of the dashboard page in New Relic.
     */
    guid: string;
    /**
     * The title of the dashboard.
     */
    name: string;
    /**
     * (Optional) A nested block that describes a widget. See Nested widget blocks below for details.
     */
    widgets?: outputs.OneDashboardRawPageWidget[];
}

export interface OneDashboardRawPageWidget {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Required) The configuration of the widget.
     */
    configuration: string;
    /**
     * (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) Related entity GUIDs.
     */
    linkedEntityGuids?: string[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) A title for the widget.
     */
    title: string;
    /**
     * (Required) The visualization ID of the widget
     */
    visualizationId: string;
    /**
     * (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
     */
    width?: number;
}

export interface OneDashboardVariable {
    /**
     * (Optional) A list of default values for this variable.
     */
    defaultValues?: string[];
    /**
     * (Optional) Indicates whether this variable supports multiple selection or not. Only applies to variables of type `nrql` or `enum`.
     */
    isMultiSelection?: boolean;
    /**
     * (Optional) List of possible values for variables of type `enum`. See Nested item blocks below for details.
     */
    items?: outputs.OneDashboardVariableItem[];
    /**
     * The title of the dashboard.
     */
    name: string;
    /**
     * (Optional) Configuration for variables of type `nrql`. See Nested nrql\_query blocks for details.
     */
    nrqlQuery?: outputs.OneDashboardVariableNrqlQuery;
    /**
     * (Optional) Indicates the strategy to apply when replacing a variable in a NRQL query. One of `default`, `identifier`, `number` or `string`.
     */
    replacementStrategy: string;
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title: string;
    /**
     * (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
     */
    type: string;
}

export interface OneDashboardVariableItem {
    /**
     * (Optional) A human-friendly display string for this value.
     */
    title?: string;
    /**
     * (Required) A possible variable value
     */
    value: string;
}

export interface OneDashboardVariableNrqlQuery {
    accountIds?: number[];
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface ServiceLevelEvents {
    /**
     * The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,
     * and that contains the NRDB data for the SLI/SLO calculations. Note that changing the account ID will force a new resource.
     */
    accountId: number;
    /**
     * The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.
     */
    badEvents?: outputs.ServiceLevelEventsBadEvents;
    /**
     * The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.
     */
    goodEvents?: outputs.ServiceLevelEventsGoodEvents;
    /**
     * The definition of valid requests.
     */
    validEvents: outputs.ServiceLevelEventsValidEvents;
}

export interface ServiceLevelEventsBadEvents {
    /**
     * The event type where NRDB data will be fetched from.
     */
    from: string;
    /**
     * The NRQL SELECT clause to aggregate events.
     */
    select?: outputs.ServiceLevelEventsBadEventsSelect;
    /**
     * A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
     * a particular entity and were successful).
     * a particular entity and returned an error).
     */
    where?: string;
}

export interface ServiceLevelEventsBadEventsSelect {
    /**
     * The event attribute to use in the SELECT clause.
     */
    attribute?: string;
    /**
     * The function to use in the SELECT clause. Valid values are `COUNT` and `SUM`.
     */
    function: string;
    threshold?: number;
}

export interface ServiceLevelEventsGoodEvents {
    /**
     * The event type where NRDB data will be fetched from.
     */
    from: string;
    /**
     * The NRQL SELECT clause to aggregate events.
     */
    select?: outputs.ServiceLevelEventsGoodEventsSelect;
    /**
     * A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
     * a particular entity and were successful).
     * a particular entity and returned an error).
     */
    where?: string;
}

export interface ServiceLevelEventsGoodEventsSelect {
    /**
     * The event attribute to use in the SELECT clause.
     */
    attribute?: string;
    /**
     * The function to use in the SELECT clause. Valid values are `COUNT` and `SUM`.
     */
    function: string;
    threshold?: number;
}

export interface ServiceLevelEventsValidEvents {
    /**
     * The event type where NRDB data will be fetched from.
     */
    from: string;
    /**
     * The NRQL SELECT clause to aggregate events.
     */
    select?: outputs.ServiceLevelEventsValidEventsSelect;
    /**
     * A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
     * a particular entity and were successful).
     * a particular entity and returned an error).
     */
    where?: string;
}

export interface ServiceLevelEventsValidEventsSelect {
    /**
     * The event attribute to use in the SELECT clause.
     */
    attribute?: string;
    /**
     * The function to use in the SELECT clause. Valid values are `COUNT` and `SUM`.
     */
    function: string;
    threshold?: number;
}

export interface ServiceLevelObjective {
    /**
     * The description of the SLI.
     */
    description?: string;
    /**
     * A short name for the SLI that will help anyone understand what it is about.
     */
    name?: string;
    /**
     * The target of the objective, valid values between `0` and `100`. Up to 5 decimals accepted.
     */
    target: number;
    /**
     * Time window is the period of the objective.
     */
    timeWindow: outputs.ServiceLevelObjectiveTimeWindow;
}

export interface ServiceLevelObjectiveTimeWindow {
    /**
     * Rolling window.
     */
    rolling: outputs.ServiceLevelObjectiveTimeWindowRolling;
}

export interface ServiceLevelObjectiveTimeWindowRolling {
    /**
     * Valid values are `1`, `7` and `28`.
     */
    count: number;
    /**
     * The only supported value is `DAY`.
     */
    unit: string;
}

export interface WorkflowDestination {
    /**
     * Id of a notificationChannel to use for notifications. Please note that you have to use a 
     * **notification** channel, not an `alertChannel`.
     */
    channelId: string;
    /**
     * The name of the workflow.
     */
    name: string;
    /**
     * Issue events to notify on. The value is a list of possible issue events. See Notification Triggers below for details.
     */
    notificationTriggers: string[];
    /**
     * Type of the filter. Please just set this field to `FILTER`. The field is likely to be deprecated/removed in the near future.
     */
    type: string;
}

export interface WorkflowEnrichments {
    /**
     * a wrapper block
     */
    nrqls: outputs.WorkflowEnrichmentsNrql[];
}

export interface WorkflowEnrichmentsNrql {
    /**
     * Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.
     */
    accountId: number;
    /**
     * Another wrapper block
     */
    configurations: outputs.WorkflowEnrichmentsNrqlConfiguration[];
    enrichmentId: string;
    /**
     * The name of the workflow.
     */
    name: string;
    /**
     * Type of the filter. Please just set this field to `FILTER`. The field is likely to be deprecated/removed in the near future.
     */
    type: string;
}

export interface WorkflowEnrichmentsNrqlConfiguration {
    /**
     * An NRQL query to run
     */
    query: string;
}

export interface WorkflowIssuesFilter {
    filterId: string;
    /**
     * The name of the workflow.
     */
    name: string;
    /**
     * A condition an issue event should satisfy to be processed by the workflow
     */
    predicates?: outputs.WorkflowIssuesFilterPredicate[];
    /**
     * Type of the filter. Please just set this field to `FILTER`. The field is likely to be deprecated/removed in the near future.
     */
    type: string;
}

export interface WorkflowIssuesFilterPredicate {
    /**
     * Issue event attribute to check
     */
    attribute: string;
    /**
     * An operator to use to compare the attribute with the provided `values`, see supported operators below
     */
    operator: string;
    /**
     * The `attribute` must match **any** of the values in this list
     */
    values: string[];
}

export namespace cloud {
    export interface AwsGovcloudIntegrationsAlb {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.
         */
        loadBalancerPrefixes?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         * * `api Gateway`
         * * `auto scaling`
         * * `elastic search`
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsApiGateway {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each name or prefix for the Stages that you want to monitor. Filter values are case-sensitive.
         */
        stagePrefixes?: string[];
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         * * `api Gateway`
         * * `auto scaling`
         * * `elastic search`
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsAutoScaling {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsGovcloudIntegrationsAwsDirectConnect {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsGovcloudIntegrationsAwsStates {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsGovcloudIntegrationsCloudtrail {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsGovcloudIntegrationsDynamoDb {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         * * `api Gateway`
         * * `auto scaling`
         * * `elastic search`
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsEbs {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         * * `api Gateway`
         * * `auto scaling`
         * * `elastic search`
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsEc2 {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string[];
        /**
         * Specify if IP addresses of ec2 instance should be collected
         */
        fetchIpAddresses?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         * * `api Gateway`
         * * `auto scaling`
         * * `elastic search`
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsElasticSearch {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string[];
        /**
         * Specify if metrics should be collected for nodes. Turning it on will increase the number of API calls made to CloudWatch.
         */
        fetchNodes?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         * * `api Gateway`
         * * `auto scaling`
         * * `elastic search`
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsElb {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsGovcloudIntegrationsEmr {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         * * `api Gateway`
         * * `auto scaling`
         * * `elastic search`
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsIam {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         * * `api Gateway`
         * * `auto scaling`
         * * `elastic search`
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsLambda {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string[];
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         * * `api Gateway`
         * * `auto scaling`
         * * `elastic search`
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsRds {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string[];
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         * * `api Gateway`
         * * `auto scaling`
         * * `elastic search`
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsRedShift {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         * * `api Gateway`
         * * `auto scaling`
         * * `elastic search`
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsRoute53 {
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsGovcloudIntegrationsS3 {
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         * * `api Gateway`
         * * `auto scaling`
         * * `elastic search`
         */
        tagValue?: string;
    }

    export interface AwsGovcloudIntegrationsSns {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsGovcloudIntegrationsSqs {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         * * `direct connect`
         * * `aws states`
         */
        awsRegions?: string[];
        /**
         * Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchExtendedInventory?: boolean;
        /**
         * Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.
         */
        queuePrefixes?: string[];
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         * * `api Gateway`
         * * `auto scaling`
         * * `elastic search`
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsBilling {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsCloudtrail {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsDocDb {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsHealth {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsS3 {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsTrustedAdvisor {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AwsIntegrationsVpc {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * Specify if NAT gateway should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchNatGateway?: boolean;
        /**
         * Specify if VPN should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchVpn?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKey?: string;
        /**
         * Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagValue?: string;
    }

    export interface AwsIntegrationsXRay {
        /**
         * Specify each AWS region that includes the resources that you want to monitor.
         */
        awsRegions?: string[];
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface AzureIntegrationsApiManagement {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsAppGateway {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsAppService {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsContainers {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsCosmosDb {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsCostManagement {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
         */
        tagKeys?: string[];
    }

    export interface AzureIntegrationsDataFactory {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsEventHub {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsExpressRoute {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsFirewalls {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsFrontDoor {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsFunctions {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsKeyVault {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsLoadBalancer {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsLogicApps {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsMachineLearning {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsMariaDb {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsMysql {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsMysqlFlexible {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsPostgresql {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsPostgresqlFlexible {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsPowerBiDedicated {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsRedisCache {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsServiceBus {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsSql {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsSqlManaged {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsStorage {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsVirtualMachine {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsVirtualNetworks {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsVms {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface AzureIntegrationsVpnGateway {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
        /**
         * Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
         */
        resourceGroups?: string[];
    }

    export interface GcpIntegrationsAlloyDb {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsAppEngine {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsBigQuery {
        /**
         * Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsBigTable {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsComposer {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsDataFlow {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsDataProc {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsDataStore {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsFireBaseDatabase {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsFireBaseHosting {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsFireBaseStorage {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsFireStore {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsFunctions {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsInterconnect {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsKubernetes {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsLoadBalancing {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsMemCache {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsPubSub {
        /**
         * Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsRedis {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsRouter {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsRun {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsSpanner {
        /**
         * Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsSql {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsStorage {
        /**
         * Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
         */
        fetchTags?: boolean;
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsVirtualMachines {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

    export interface GcpIntegrationsVpcAccess {
        /**
         * The data polling interval in seconds.
         */
        metricsPollingInterval?: number;
    }

}

export namespace insights {
    export interface EventEvent {
        attributes: outputs.insights.EventEventAttribute[];
        timestamp?: number;
        type: string;
    }

    export interface EventEventAttribute {
        key: string;
        type?: string;
        value: string;
    }

}

export namespace plugins {
    export interface WorkloadEntitySearchQuery {
        /**
         * The query.
         */
        query: string;
    }

    export interface WorkloadStatusConfigAutomatic {
        /**
         * Whether the automatic status configuration is enabled or not.
         */
        enabled: boolean;
        /**
         * An additional meta-rule that can consider all entities that haven't been evaluated by any other rule. See Nested remainingEntitiesRule blocks below for details.
         */
        remainingEntitiesRule?: outputs.plugins.WorkloadStatusConfigAutomaticRemainingEntitiesRule;
        /**
         * The input object used to represent a rollup strategy. See Nested rule blocks below for details.
         */
        rules?: outputs.plugins.WorkloadStatusConfigAutomaticRule[];
    }

    export interface WorkloadStatusConfigAutomaticRemainingEntitiesRule {
        /**
         * The input object used to represent a rollup strategy. See Nested remainingEntitiesRuleRollup blocks below for details.
         */
        remainingEntitiesRuleRollup: outputs.plugins.WorkloadStatusConfigAutomaticRemainingEntitiesRuleRemainingEntitiesRuleRollup;
    }

    export interface WorkloadStatusConfigAutomaticRemainingEntitiesRuleRemainingEntitiesRuleRollup {
        /**
         * The grouping to be applied to the remaining entities.
         */
        groupBy: string;
        /**
         * The rollup strategy that is applied to a group of entities.
         */
        strategy: string;
        /**
         * Type of threshold defined for the rule. This is an optional field that only applies when strategy is WORST_STATUS_WINS. Use a threshold to roll up the worst status only after a certain amount of entities are not operational.
         */
        thresholdType?: string;
        /**
         * Threshold value defined for the rule. This optional field is used in combination with thresholdType. If the threshold type is null, the threshold value will be ignored.
         */
        thresholdValue?: number;
    }

    export interface WorkloadStatusConfigAutomaticRule {
        /**
         * A list of entity GUIDs composing the rule. At least one of `entityGuids` or `nrqlQuery` must be defined.
         */
        entityGuids: string[];
        /**
         * A list of entity search queries used to retrieve the entities that compose the rule. See Nested nrqlQuery blocks below for details. At least one of `entityGuids` or `nrqlQuery` must be defined.
         */
        nrqlQueries?: outputs.plugins.WorkloadStatusConfigAutomaticRuleNrqlQuery[];
        /**
         * The input object used to represent a rollup strategy. See Nested rollup blocks below for details.
         */
        rollup: outputs.plugins.WorkloadStatusConfigAutomaticRuleRollup;
    }

    export interface WorkloadStatusConfigAutomaticRuleNrqlQuery {
        /**
         * The entity search query that is used to perform the search of a group of entities.
         */
        query: string;
    }

    export interface WorkloadStatusConfigAutomaticRuleRollup {
        /**
         * The rollup strategy that is applied to a group of entities.
         */
        strategy: string;
        /**
         * Type of threshold defined for the rule. This is an optional field that only applies when strategy is WORST_STATUS_WINS. Use a threshold to roll up the worst status only after a certain amount of entities are not operational.
         */
        thresholdType?: string;
        /**
         * Threshold value defined for the rule. This optional field is used in combination with thresholdType. If the threshold type is null, the threshold value will be ignored.
         */
        thresholdValue?: number;
    }

    export interface WorkloadStatusConfigStatic {
        /**
         * Relevant information about the workload.
         */
        description?: string;
        /**
         * Whether the automatic status configuration is enabled or not.
         */
        enabled: boolean;
        /**
         * The status of the workload.
         */
        status: string;
        /**
         * A short description of the status of the workload.
         */
        summary?: string;
    }

}

export namespace synthetics {
    export interface BrokenLinksMonitorTag {
        /**
         * Name of the tag key.
         */
        key: string;
        /**
         * Values associated with the tag key.
         */
        values: string[];
    }

    export interface CertCheckMonitorTag {
        /**
         * Name of the tag key.
         */
        key: string;
        /**
         * Values associated with the tag key.
         */
        values: string[];
    }

    export interface MonitorCustomHeader {
        /**
         * Header name.
         */
        name?: string;
        /**
         * Header Value.
         */
        value?: string;
    }

    export interface MonitorTag {
        /**
         * Name of the tag key.
         */
        key: string;
        /**
         * Values associated with the tag key.
         */
        values: string[];
    }

    export interface MultiLocationAlertConditionCritical {
        threshold: number;
    }

    export interface MultiLocationAlertConditionWarning {
        threshold: number;
    }

    export interface ScriptMonitorLocationPrivate {
        /**
         * The unique identifier for the Synthetics private location in New Relic.
         */
        guid: string;
        /**
         * The location's Verified Script Execution password, Only necessary if Verified Script Execution is enabled for the location.
         */
        vsePassword?: string;
    }

    export interface ScriptMonitorTag {
        /**
         * Name of the tag key.
         */
        key: string;
        /**
         * Values associated with the tag key.
         */
        values: string[];
    }

    export interface StepMonitorLocationPrivate {
        /**
         * The unique identifier for the Synthetics private location in New Relic.
         */
        guid: string;
        /**
         * The location's Verified Script Execution password, only necessary if Verified Script Execution is enabled for the location.
         */
        vsePassword?: string;
    }

    export interface StepMonitorStep {
        /**
         * The position of the step within the script ranging from 0-100.
         */
        ordinal: number;
        /**
         * Name of the tag key. Valid values are ASSERT_ELEMENT, ASSERT_MODAL, ASSERT_TEXT, ASSERT_TITLE, CLICK_ELEMENT, DISMISS_MODAL, DOUBLE_CLICK_ELEMENT, HOVER_ELEMENT, NAVIGATE, SECURE_TEXT_ENTRY, SELECT_ELEMENT, TEXT_ENTRY.
         */
        type: string;
        /**
         * The metadata values related to the step.
         */
        values?: string[];
    }

    export interface StepMonitorTag {
        /**
         * Name of the tag key.
         */
        key: string;
        /**
         * Values associated with the tag key.
         */
        values: string[];
    }

}
