// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AlertChannelConfig {
    /**
     * The API key for integrating with OpsGenie.
     */
    apiKey?: string;
    /**
     * Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
     */
    authPassword?: string;
    /**
     * Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
     */
    authType?: string;
    /**
     * Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
     */
    authUsername?: string;
    /**
     * The base URL of the webhook destination.
     */
    baseUrl?: string;
    /**
     * The Slack channel to send notifications to.
     * * `opsgenie`
     */
    channel?: string;
    /**
     * A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
     */
    headers?: {[key: string]: string};
    /**
     * Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
     */
    headersString?: string;
    /**
     * `true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
     * * `webhook`
     */
    includeJsonAttachment?: string;
    /**
     * The key for integrating with VictorOps.
     */
    key?: string;
    /**
     * A map of key/value pairs that represents the webhook payload.  Must provide `payloadType` if setting this argument.
     */
    payload?: {[key: string]: string};
    /**
     * Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
     */
    payloadString?: string;
    /**
     * Can either be `application/json` or `application/x-www-form-urlencoded`. The `payloadType` argument is _required_ if `payload` is set.
     * * `pagerduty`
     */
    payloadType?: string;
    /**
     * A set of recipients for targeting notifications.  Multiple values are comma separated.
     */
    recipients?: string;
    /**
     * The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
     */
    region?: string;
    /**
     * The route key for integrating with VictorOps.
     * * `slack`
     */
    routeKey?: string;
    /**
     * Specifies the service key for integrating with Pagerduty.
     * * `victorops`
     */
    serviceKey?: string;
    /**
     * A set of tags for targeting notifications. Multiple values are comma separated.
     */
    tags?: string;
    /**
     * A set of teams for targeting notifications. Multiple values are comma separated.
     */
    teams?: string;
    /**
     * [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
     */
    url?: string;
    userId?: string;
}

export interface AlertConditionTerm {
    duration: number;
    operator?: string;
    priority?: string;
    threshold: number;
    timeFunction: string;
}

export interface AlertMutingRuleCondition {
    /**
     * The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
     */
    conditions: outputs.AlertMutingRuleConditionCondition[];
    /**
     * The operator used to combine all the MutingRuleConditions within the group.
     */
    operator: string;
}

export interface AlertMutingRuleConditionCondition {
    /**
     * The attribute on a violation. Valid values are   `accountId`, `conditionId`, `conditionName`, `conditionRunbookUrl`, `conditionType`, `entity.guid`, `nrqlEventType`, `nrqlQuery`, `policyId`, `policyName`, `product`, `tags.<NAME>`, `targetId`, `targetName`
     */
    attribute: string;
    /**
     * The operator used to compare the attribute's value with the supplied value(s). Valid values are `ANY`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `IN`, `IS_BLANK`, `IS_NOT_BLANK`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_IN`, `NOT_STARTS_WITH`, `STARTS_WITH`
     */
    operator: string;
    /**
     * The value(s) to compare against the attribute's value.
     */
    values: string[];
}

export interface AlertMutingRuleSchedule {
    /**
     * The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeatCount`
     */
    endRepeat?: string;
    /**
     * The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'
     */
    endTime?: string;
    /**
     * The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
     */
    repeat?: string;
    /**
     * The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `endRepeat`
     */
    repeatCount?: number;
    /**
     * The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'
     */
    startTime?: string;
    timeZone: string;
    /**
     * The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
     */
    weeklyRepeatDays?: string[];
}

export interface DashboardFilter {
    attributes?: string[];
    eventTypes: string[];
}

export interface DashboardWidget {
    accountId?: number;
    column: number;
    compareWiths?: outputs.DashboardWidgetCompareWith[];
    drilldownDashboardId?: number;
    duration?: number;
    endTime?: number;
    entityIds?: number[];
    facet?: string;
    height?: number;
    limit?: number;
    metrics?: outputs.DashboardWidgetMetric[];
    notes?: string;
    nrql?: string;
    orderBy?: string;
    rawMetricName: string;
    row: number;
    source?: string;
    thresholdRed?: number;
    thresholdYellow?: number;
    title: string;
    visualization: string;
    widgetId: number;
    width?: number;
}

export interface DashboardWidgetCompareWith {
    offsetDuration: string;
    presentation: outputs.DashboardWidgetCompareWithPresentation;
}

export interface DashboardWidgetCompareWithPresentation {
    color: string;
    name: string;
}

export interface DashboardWidgetMetric {
    name: string;
    scope?: string;
    units?: string;
    values?: string[];
}

export interface EntityTagsTag {
    /**
     * The tag key.
     */
    key: string;
    /**
     * The tag values.
     */
    values: string[];
}

export interface GetAlertChannelConfig {
    apiKey?: string;
    authPassword?: string;
    authType?: string;
    authUsername?: string;
    baseUrl?: string;
    channel?: string;
    headers?: {[key: string]: string};
    includeJsonAttachment?: string;
    key?: string;
    payload?: {[key: string]: string};
    payloadType?: string;
    recipients?: string;
    region?: string;
    routeKey?: string;
    serviceKey?: string;
    tags?: string;
    teams?: string;
    url?: string;
    userId?: string;
}

export interface GetEntityTag {
    key: string;
    value: string;
}

export interface InfraAlertConditionCritical {
    duration: number;
    timeFunction?: string;
    value?: number;
}

export interface InfraAlertConditionWarning {
    duration: number;
    timeFunction?: string;
    value?: number;
}

export interface NrqlAlertConditionCritical {
    /**
     * **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
     *
     * @deprecated use `threshold_duration` attribute instead
     */
    duration?: number;
    /**
     * Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
     */
    operator?: string;
    /**
     * The value which will trigger a violation. Must be `0` or greater.
     */
    threshold: number;
    /**
     * The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
     * <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
     * <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
     * <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
     */
    thresholdDuration?: number;
    /**
     * The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
     */
    thresholdOccurrences?: string;
    /**
     * **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
     *
     * @deprecated use `threshold_occurrences` attribute instead
     */
    timeFunction?: string;
}

export interface NrqlAlertConditionNrql {
    /**
     * Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated in one-minute time windows. The start time depends on this value. It's recommended to set this to 3 minutes. An offset of less than 3 minutes will trigger violations sooner, but you may see more false positives and negatives due to data latency. With `evaluationOffset` set to 3 minutes, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`.<br>
     * <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
     *
     * @deprecated use `signal.aggregation_method` attribute instead
     */
    evaluationOffset?: number;
    /**
     * The NRQL query to execute for the condition.
     */
    query: string;
    /**
     * **DEPRECATED:** Use `evaluationOffset` instead. The value to be used in the `SINCE <X> minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive). <br>
     * <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
     *
     * @deprecated use `signal.aggregation_method` attribute instead
     */
    sinceValue?: string;
}

export interface NrqlAlertConditionTerm {
    /**
     * **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
     *
     * @deprecated use `threshold_duration` attribute instead
     */
    duration?: number;
    /**
     * Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
     */
    operator?: string;
    /**
     * `critical` or `warning`. Defaults to `critical`.
     */
    priority?: string;
    /**
     * The value which will trigger a violation. Must be `0` or greater.
     */
    threshold: number;
    /**
     * The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
     * <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
     * <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
     * <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
     */
    thresholdDuration?: number;
    /**
     * The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
     */
    thresholdOccurrences?: string;
    /**
     * **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
     *
     * @deprecated use `threshold_occurrences` attribute instead
     */
    timeFunction?: string;
}

export interface NrqlAlertConditionWarning {
    /**
     * **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
     *
     * @deprecated use `threshold_duration` attribute instead
     */
    duration?: number;
    /**
     * Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
     */
    operator?: string;
    /**
     * The value which will trigger a violation. Must be `0` or greater.
     */
    threshold: number;
    /**
     * The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
     * <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
     * <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
     * <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
     */
    thresholdDuration?: number;
    /**
     * The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
     */
    thresholdOccurrences?: string;
    /**
     * **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
     *
     * @deprecated use `threshold_occurrences` attribute instead
     */
    timeFunction?: string;
}

export interface OneDashboardPage {
    /**
     * Brief text describing the dashboard.
     */
    description?: string;
    /**
     * The unique entity identifier of the dashboard page in New Relic.
     */
    guid: string;
    /**
     * The title of the dashboard.
     */
    name: string;
    /**
     * (Optional) A nested block that describes an Area widget.  See Nested widget blocks below for details.
     */
    widgetAreas?: outputs.OneDashboardPageWidgetArea[];
    /**
     * (Optional) A nested block that describes a Bar widget.  See Nested widget blocks below for details.
     */
    widgetBars?: outputs.OneDashboardPageWidgetBar[];
    /**
     * (Optional) A nested block that describes a Billboard widget.  See Nested widget blocks below for details.
     */
    widgetBillboards?: outputs.OneDashboardPageWidgetBillboard[];
    /**
     * (Optional) A nested block that describes a Bullet widget.  See Nested widget blocks below for details.
     */
    widgetBullets?: outputs.OneDashboardPageWidgetBullet[];
    /**
     * (Optional) A nested block that describes a Funnel widget.  See Nested widget blocks below for details.
     */
    widgetFunnels?: outputs.OneDashboardPageWidgetFunnel[];
    /**
     * (Optional) A nested block that describes a Heatmap widget.  See Nested widget blocks below for details.
     */
    widgetHeatmaps?: outputs.OneDashboardPageWidgetHeatmap[];
    /**
     * (Optional) A nested block that describes a Histogram widget.  See Nested widget blocks below for details.
     */
    widgetHistograms?: outputs.OneDashboardPageWidgetHistogram[];
    /**
     * (Optional) A nested block that describes a JSON widget.  See Nested widget blocks below for details.
     */
    widgetJsons?: outputs.OneDashboardPageWidgetJson[];
    /**
     * (Optional) A nested block that describes a Line widget.  See Nested widget blocks below for details.
     */
    widgetLines?: outputs.OneDashboardPageWidgetLine[];
    /**
     * (Optional) A nested block that describes a Markdown widget.  See Nested widget blocks below for details.
     */
    widgetMarkdowns?: outputs.OneDashboardPageWidgetMarkdown[];
    /**
     * (Optional) A nested block that describes a Pie widget.  See Nested widget blocks below for details.
     */
    widgetPies?: outputs.OneDashboardPageWidgetPy[];
    /**
     * (Optional) A nested block that describes a Stacked Bar widget. See Nested widget blocks below for details.
     */
    widgetStackedBars?: outputs.OneDashboardPageWidgetStackedBar[];
    /**
     * (Optional) A nested block that describes a Table widget.  See Nested widget blocks below for details.
     */
    widgetTables?: outputs.OneDashboardPageWidgetTable[];
}

export interface OneDashboardPageWidgetArea {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetAreaNrqlQuery[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) A title for the widget.
     */
    title: string;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
}

export interface OneDashboardPageWidgetAreaNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetBar {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    filterCurrentDashboard?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    linkedEntityGuids: string[];
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetBarNrqlQuery[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) A title for the widget.
     */
    title: string;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
}

export interface OneDashboardPageWidgetBarNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetBillboard {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Threshold above which the displayed value will be styled with a red color.
     */
    critical?: number;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetBillboardNrqlQuery[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) A title for the widget.
     */
    title: string;
    /**
     * (Optional) Threshold above which the displayed value will be styled with a yellow color.
     * * `widgetBullet`
     */
    warning?: number;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
}

export interface OneDashboardPageWidgetBillboardNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetBullet {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) Visualization limit for the widget.
     * * `widgetFunnel`
     */
    limit?: number;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetBulletNrqlQuery[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) A title for the widget.
     */
    title: string;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
}

export interface OneDashboardPageWidgetBulletNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetFunnel {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetFunnelNrqlQuery[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) A title for the widget.
     */
    title: string;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
}

export interface OneDashboardPageWidgetFunnelNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetHeatmap {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetHeatmapNrqlQuery[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) A title for the widget.
     */
    title: string;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
}

export interface OneDashboardPageWidgetHeatmapNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetHistogram {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetHistogramNrqlQuery[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) A title for the widget.
     */
    title: string;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
}

export interface OneDashboardPageWidgetHistogramNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetJson {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetJsonNrqlQuery[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) A title for the widget.
     */
    title: string;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
}

export interface OneDashboardPageWidgetJsonNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetLine {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetLineNrqlQuery[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) A title for the widget.
     */
    title: string;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
}

export interface OneDashboardPageWidgetLineNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetMarkdown {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) The markdown source to be rendered in the widget.
     * * `widgetStackedBar`
     */
    text?: string;
    /**
     * (Required) A title for the widget.
     */
    title: string;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
}

export interface OneDashboardPageWidgetPy {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    filterCurrentDashboard?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    linkedEntityGuids: string[];
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetPyNrqlQuery[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) A title for the widget.
     */
    title: string;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
}

export interface OneDashboardPageWidgetPyNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetStackedBar {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetStackedBarNrqlQuery[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) A title for the widget.
     */
    title: string;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
}

export interface OneDashboardPageWidgetStackedBarNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardPageWidgetTable {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    filterCurrentDashboard?: boolean;
    /**
     * (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
     */
    height?: number;
    id: string;
    linkedEntityGuids: string[];
    /**
     * (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
     * * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
     * * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
     */
    nrqlQueries: outputs.OneDashboardPageWidgetTableNrqlQuery[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) A title for the widget.
     */
    title: string;
    /**
     * (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
     */
    width?: number;
}

export interface OneDashboardPageWidgetTableNrqlQuery {
    /**
     * Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
     */
    accountId: number;
    /**
     * (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
     */
    query: string;
}

export interface OneDashboardRawPage {
    /**
     * Brief text describing the dashboard.
     */
    description?: string;
    /**
     * The unique entity identifier of the dashboard page in New Relic.
     */
    guid: string;
    /**
     * The title of the dashboard.
     */
    name: string;
    /**
     * (Optional) A nested block that describes a widget. See Nested widget blocks below for details.
     */
    widgets?: outputs.OneDashboardRawPageWidget[];
}

export interface OneDashboardRawPageWidget {
    /**
     * (Required) Column position of widget from top left, starting at `1`.
     */
    column: number;
    /**
     * (Required) The configuration of the widget.
     */
    configuration: string;
    /**
     * (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
     */
    height?: number;
    id: string;
    /**
     * (Optional) Related entity GUIDs.
     */
    linkedEntityGuids?: string[];
    /**
     * (Required) Row position of widget from top left, starting at `1`.
     */
    row: number;
    /**
     * (Required) A title for the widget.
     */
    title: string;
    /**
     * (Required) The visualization ID of the widget
     */
    visualizationId: string;
    /**
     * (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
     */
    width?: number;
}

export interface ServiceLevelEvents {
    /**
     * The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,
     * and that contains the NRDB data for the SLI/SLO calculations.
     */
    accountId: number;
    /**
     * The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.
     */
    badEvents?: outputs.ServiceLevelEventsBadEvents;
    /**
     * The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.
     */
    goodEvents?: outputs.ServiceLevelEventsGoodEvents;
    /**
     * The definition of valid requests.
     */
    validEvents: outputs.ServiceLevelEventsValidEvents;
}

export interface ServiceLevelEventsBadEvents {
    /**
     * The event type where NRDB data will be fetched from.
     */
    from: string;
    /**
     * A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
     * a particular entity and were successful).
     * a particular entity and returned an error).
     */
    where?: string;
}

export interface ServiceLevelEventsGoodEvents {
    /**
     * The event type where NRDB data will be fetched from.
     */
    from: string;
    /**
     * A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
     * a particular entity and were successful).
     * a particular entity and returned an error).
     */
    where?: string;
}

export interface ServiceLevelEventsValidEvents {
    /**
     * The event type where NRDB data will be fetched from.
     */
    from: string;
    /**
     * A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
     * a particular entity and were successful).
     * a particular entity and returned an error).
     */
    where?: string;
}

export interface ServiceLevelObjective {
    /**
     * The description of the SLI.
     */
    description?: string;
    /**
     * A short name for the SLI that will help anyone understand what it is about.
     */
    name?: string;
    /**
     * The target for your SLO, valid values between `0` and `100`. Up to 5 decimals accepted.
     */
    target: number;
    /**
     * Time window is the period for the SLO.
     */
    timeWindow: outputs.ServiceLevelObjectiveTimeWindow;
}

export interface ServiceLevelObjectiveTimeWindow {
    /**
     * Rolling window.
     */
    rolling: outputs.ServiceLevelObjectiveTimeWindowRolling;
}

export interface ServiceLevelObjectiveTimeWindowRolling {
    /**
     * Valid values are `1`, `7` and `28`.
     */
    count: number;
    /**
     * The only supported value is `DAY`.
     */
    unit: string;
}

export namespace insights {
    export interface EventEvent {
        attributes: outputs.insights.EventEventAttribute[];
        timestamp?: number;
        type: string;
    }

    export interface EventEventAttribute {
        key: string;
        type?: string;
        value: string;
    }

}

export namespace plugins {
    export interface AlertConditionTerm {
        duration: number;
        operator?: string;
        priority?: string;
        threshold: number;
        timeFunction: string;
    }

    export interface WorkloadEntitySearchQuery {
        /**
         * The query.
         */
        query: string;
    }

}

export namespace synthetics {
    export interface MonitorScriptLocation {
        /**
         * The monitor script authentication code for the location. Use one of either `hmac` or `vsePassword`.
         */
        hmac?: string;
        /**
         * The monitor script location name.
         */
        name: string;
        /**
         * The password for the location used to calculate the HMAC. Use one of either `hmac` or `vsePassword`.
         */
        vsePassword?: string;
    }

    export interface MultiLocationAlertConditionCritical {
        threshold: number;
    }

    export interface MultiLocationAlertConditionWarning {
        threshold: number;
    }

}
