// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEntity(args: GetEntityArgs, opts?: pulumi.InvokeOptions): Promise<GetEntityResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("newrelic:index/getEntity:getEntity", {
        "accountId": args.accountId,
        "domain": args.domain,
        "entityTags": args.entityTags,
        "ignoreCase": args.ignoreCase,
        "ignoreNotFound": args.ignoreNotFound,
        "name": args.name,
        "tags": args.tags,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getEntity.
 */
export interface GetEntityArgs {
    /**
     * The New Relic account ID the entity to be returned would be associated with, i.e. if specified, the data source would filter matching entities received by `accountId` and return the first match. If not, matching entities are filtered by the account ID specified in the configuration of the provider. See the **Example: Filter By Account ID** section above for more details.
     */
    accountId?: string;
    /**
     * The entity's domain. Valid values are APM, BROWSER, INFRA, MOBILE, SYNTH, and EXT. If not specified, all domains are searched.
     */
    domain?: string;
    /**
     * A JSON-encoded string, comprising tags associated with the entity fetched.
     * * See the **Additional Examples** section below, for an illustration depicting the usage of `jsondecode` with the attribute `entityTags`, to get the tags associated with the entity fetched.
     */
    entityTags?: string;
    /**
     * Ignore case of the `name` when searching for the entity. Defaults to false.
     */
    ignoreCase?: boolean;
    /**
     * A boolean argument that, when set to true, prevents an error from being thrown when the queried entity is not found. Instead, a warning is displayed. Defaults to `false`.
     *
     * > **WARNING:** Setting the `ignoreNotFound` argument to `true` will display an 'entity not found' warning instead of throwing an error. This can lead to downstream errors if the values of attributes exported by this data source are used elsewhere, as all of these values would be null. Please use this argument at your own risk.
     */
    ignoreNotFound?: boolean;
    /**
     * The name of the entity in New Relic One.  The first entity matching this name for the given search parameters will be returned.
     */
    name: string;
    /**
     * A tag applied to the entity. See Nested tag blocks below for details.
     */
    tags?: inputs.GetEntityTag[];
    /**
     * The entity's type. Valid values are APPLICATION, DASHBOARD, HOST, MONITOR, WORKLOAD, AWSLAMBDAFUNCTION, SERVICE_LEVEL, and KEY_TRANSACTION. Note: Other entity types may also be queryable as the list of entity types may fluctuate over time.
     */
    type?: string;
}

/**
 * A collection of values returned by getEntity.
 */
export interface GetEntityResult {
    readonly accountId: string;
    /**
     * The domain-specific application ID of the entity. Only returned for APM and Browser applications.
     */
    readonly applicationId: string;
    readonly domain: string;
    /**
     * A JSON-encoded string, comprising tags associated with the entity fetched.
     * * See the **Additional Examples** section below, for an illustration depicting the usage of `jsondecode` with the attribute `entityTags`, to get the tags associated with the entity fetched.
     */
    readonly entityTags: string;
    /**
     * The unique GUID of the entity.
     */
    readonly guid: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ignoreCase?: boolean;
    readonly ignoreNotFound?: boolean;
    readonly name: string;
    /**
     * The browser-specific ID of the backing APM entity. Only returned for Browser applications.
     */
    readonly servingApmApplicationId: string;
    readonly tags?: outputs.GetEntityTag[];
    readonly type: string;
}
export function getEntityOutput(args: GetEntityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEntityResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("newrelic:index/getEntity:getEntity", {
        "accountId": args.accountId,
        "domain": args.domain,
        "entityTags": args.entityTags,
        "ignoreCase": args.ignoreCase,
        "ignoreNotFound": args.ignoreNotFound,
        "name": args.name,
        "tags": args.tags,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getEntity.
 */
export interface GetEntityOutputArgs {
    /**
     * The New Relic account ID the entity to be returned would be associated with, i.e. if specified, the data source would filter matching entities received by `accountId` and return the first match. If not, matching entities are filtered by the account ID specified in the configuration of the provider. See the **Example: Filter By Account ID** section above for more details.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The entity's domain. Valid values are APM, BROWSER, INFRA, MOBILE, SYNTH, and EXT. If not specified, all domains are searched.
     */
    domain?: pulumi.Input<string>;
    /**
     * A JSON-encoded string, comprising tags associated with the entity fetched.
     * * See the **Additional Examples** section below, for an illustration depicting the usage of `jsondecode` with the attribute `entityTags`, to get the tags associated with the entity fetched.
     */
    entityTags?: pulumi.Input<string>;
    /**
     * Ignore case of the `name` when searching for the entity. Defaults to false.
     */
    ignoreCase?: pulumi.Input<boolean>;
    /**
     * A boolean argument that, when set to true, prevents an error from being thrown when the queried entity is not found. Instead, a warning is displayed. Defaults to `false`.
     *
     * > **WARNING:** Setting the `ignoreNotFound` argument to `true` will display an 'entity not found' warning instead of throwing an error. This can lead to downstream errors if the values of attributes exported by this data source are used elsewhere, as all of these values would be null. Please use this argument at your own risk.
     */
    ignoreNotFound?: pulumi.Input<boolean>;
    /**
     * The name of the entity in New Relic One.  The first entity matching this name for the given search parameters will be returned.
     */
    name: pulumi.Input<string>;
    /**
     * A tag applied to the entity. See Nested tag blocks below for details.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.GetEntityTagArgs>[]>;
    /**
     * The entity's type. Valid values are APPLICATION, DASHBOARD, HOST, MONITOR, WORKLOAD, AWSLAMBDAFUNCTION, SERVICE_LEVEL, and KEY_TRANSACTION. Note: Other entity types may also be queryable as the list of entity types may fluctuate over time.
     */
    type?: pulumi.Input<string>;
}
