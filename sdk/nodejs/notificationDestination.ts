// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Use this resource to create and manage New Relic notification destinations.
 *
 * ## Example Usage
 *
 * ##### Webhook
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const foo = new newrelic.NotificationDestination("foo", {
 *     auth: {
 *         password: "1234",
 *         type: "BASIC",
 *         user: "user",
 *     },
 *     properties: [{
 *         key: "url",
 *         value: "https://webhook.site/",
 *     }],
 *     type: "WEBHOOK",
 * });
 * ```
 * See additional examples.
 * ## Additional Examples
 *
 * ##### ServiceNow
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const foo = new newrelic.NotificationDestination("foo", {
 *     auth: {
 *         password: "pass",
 *         type: "BASIC",
 *         user: "user",
 *     },
 *     properties: [
 *         {
 *             key: "url",
 *             value: "https://service-now.com/",
 *         },
 *         {
 *             key: "two_way_integration",
 *             value: "true",
 *         },
 *     ],
 *     type: "SERVICE_NOW",
 * });
 * ```
 *
 * ##### Email
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const foo = new newrelic.NotificationDestination("foo", {
 *     auth: {
 *         prefix: "prefix",
 *         token: "bearer",
 *         type: "TOKEN",
 *     },
 *     properties: [{
 *         key: "email",
 *         value: "email@email.com,email2@email.com",
 *     }],
 *     type: "EMAIL",
 * });
 * ```
 *
 * ##### PagerDuty with service integration
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const foo = new newrelic.NotificationDestination("foo", {
 *     auth: {
 *         prefix: "prefix",
 *         token: "bearer",
 *         type: "TOKEN",
 *     },
 *     properties: [{
 *         key: "two_way_integration",
 *         value: "true",
 *     }],
 *     type: "PAGERDUTY_SERVICE_INTEGRATION",
 * });
 * ```
 *
 * ##### PagerDuty with account integration
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const foo = new newrelic.NotificationDestination("foo", {
 *     auth: {
 *         prefix: "prefix",
 *         token: "bearer",
 *         type: "TOKEN",
 *     },
 *     type: "PAGERDUTY_ACCOUNT_INTEGRATION",
 * });
 * ```
 *
 * > **NOTE:** Sensitive data such as destination API keys, service keys, etc are not returned from the underlying API for security reasons and may not be set in state when importing.
 */
export class NotificationDestination extends pulumi.CustomResource {
    /**
     * Get an existing NotificationDestination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationDestinationState, opts?: pulumi.CustomResourceOptions): NotificationDestination {
        return new NotificationDestination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:index/notificationDestination:NotificationDestination';

    /**
     * Returns true if the given object is an instance of NotificationDestination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationDestination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationDestination.__pulumiType;
    }

    /**
     * A nested block that describes a notification destination authentication. Only one auth block is permitted per notification destination definition.  See Nested auth blocks below for details.
     */
    public readonly auth!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the destination.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A nested block that describes a notification destination properties.  Only one properties block is permitted per notification destination definition.  See Nested properties blocks below for details.
     */
    public readonly properties!: pulumi.Output<outputs.NotificationDestinationProperty[] | undefined>;
    /**
     * The type of the auth.  One of: `TOKEN` or `BASIC`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a NotificationDestination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationDestinationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationDestinationArgs | NotificationDestinationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationDestinationState | undefined;
            resourceInputs["auth"] = state ? state.auth : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NotificationDestinationArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["auth"] = args ? args.auth : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationDestination.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NotificationDestination resources.
 */
export interface NotificationDestinationState {
    /**
     * A nested block that describes a notification destination authentication. Only one auth block is permitted per notification destination definition.  See Nested auth blocks below for details.
     */
    auth?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the destination.
     */
    name?: pulumi.Input<string>;
    /**
     * A nested block that describes a notification destination properties.  Only one properties block is permitted per notification destination definition.  See Nested properties blocks below for details.
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NotificationDestinationProperty>[]>;
    /**
     * The type of the auth.  One of: `TOKEN` or `BASIC`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NotificationDestination resource.
 */
export interface NotificationDestinationArgs {
    /**
     * A nested block that describes a notification destination authentication. Only one auth block is permitted per notification destination definition.  See Nested auth blocks below for details.
     */
    auth?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the destination.
     */
    name?: pulumi.Input<string>;
    /**
     * A nested block that describes a notification destination properties.  Only one properties block is permitted per notification destination definition.  See Nested properties blocks below for details.
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NotificationDestinationProperty>[]>;
    /**
     * The type of the auth.  One of: `TOKEN` or `BASIC`.
     */
    type: pulumi.Input<string>;
}
