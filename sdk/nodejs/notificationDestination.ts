// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ~> **WARNING:** Slack-based destinations can only be imported and destroyed; this resource **does not** support creating and updating Slack-based destinations, owing to the reasons stated above, under the **Slack** section.
 *
 * Destination id can be found in the Destinations page -> three dots at the right of the chosen destination -> copy destination id to clipboard.
 *
 * This example is especially useful for slack destinations which *must* be imported.
 *
 * 1. Add an empty resource to your terraform file:
 *
 * terraform
 *
 * resource "newrelic_notification_destination" "foo" {
 *
 * }
 *
 * ```sh
 * $ pulumi import newrelic:index/notificationDestination:NotificationDestination  Run import command: `newrelic_notification_destination.foo <destination_id>`
 * ```
 *
 * 3. Run the following command after the import successfully done and copy the information to your resource:
 *    
 *    `terraform state show newrelic_notification_destination.foo`
 *
 * 4. Add `ignore_changes` attribute on `all` in your imported resource:
 *
 * terraform
 *
 * lifecycle {
 *
 *     ignore_changes = all
 *
 *   }
 *
 * Your imported destination should look like that:
 *
 * terraform
 *
 * resource "newrelic_notification_destination" "foo" {
 *
 *   lifecycle {
 *
 *     ignore_changes = all
 *
 *   }
 *
 *   name = "*********"
 *
 *   type = "SLACK"
 *
 *   auth_token {
 *
 *     prefix = "Bearer"
 *
 *   }
 *
 *   property {
 *
 *       key   = "teamName"
 *     
 *       label = "Team Name"
 *     
 *       value = "******"
 *
 *   }
 *
 * }
 */
export class NotificationDestination extends pulumi.CustomResource {
    /**
     * Get an existing NotificationDestination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationDestinationState, opts?: pulumi.CustomResourceOptions): NotificationDestination {
        return new NotificationDestination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:index/notificationDestination:NotificationDestination';

    /**
     * Returns true if the given object is an instance of NotificationDestination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationDestination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationDestination.__pulumiType;
    }

    /**
     * Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Indicates whether the destination is active.
     */
    public readonly active!: pulumi.Output<boolean | undefined>;
    /**
     * A nested block that describes a basic username and password authentication credentials. Only one authBasic block is permitted per notification destination definition.  See Nested authBasic blocks below for details.
     */
    public readonly authBasic!: pulumi.Output<outputs.NotificationDestinationAuthBasic | undefined>;
    /**
     * A nested block that describes a custom header authentication credentials. Multiple blocks are permitted per notification destination definition. Nested authCustomHeader blocks below for details.
     */
    public readonly authCustomHeaders!: pulumi.Output<outputs.NotificationDestinationAuthCustomHeader[] | undefined>;
    /**
     * A nested block that describes a token authentication credentials. Only one authToken block is permitted per notification destination definition.  See Nested authToken blocks below for details.
     */
    public readonly authToken!: pulumi.Output<outputs.NotificationDestinationAuthToken | undefined>;
    /**
     * The unique entity identifier of the destination in New Relic.
     */
    public /*out*/ readonly guid!: pulumi.Output<string>;
    /**
     * The last time a notification was sent.
     */
    public /*out*/ readonly lastSent!: pulumi.Output<string>;
    /**
     * The name of the destination.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A nested block that describes a notification destination property. See Nested property blocks below for details.
     */
    public readonly properties!: pulumi.Output<outputs.NotificationDestinationProperty[]>;
    /**
     * A nested block that describes a URL that contains sensitive data at the path or parameters. Only one secureUrl block is permitted per notification destination definition. See Nested secureUrl blocks below for details.
     */
    public readonly secureUrl!: pulumi.Output<outputs.NotificationDestinationSecureUrl | undefined>;
    /**
     * The status of the destination.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, SERVICE_NOW_APP,
     * PAGERDUTY_ACCOUNT_INTEGRATION, PAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY,
     * MOBILE_PUSH, EVENT_BRIDGE, MICROSOFT_TEAMS).
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a NotificationDestination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationDestinationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationDestinationArgs | NotificationDestinationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationDestinationState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["authBasic"] = state ? state.authBasic : undefined;
            resourceInputs["authCustomHeaders"] = state ? state.authCustomHeaders : undefined;
            resourceInputs["authToken"] = state ? state.authToken : undefined;
            resourceInputs["guid"] = state ? state.guid : undefined;
            resourceInputs["lastSent"] = state ? state.lastSent : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["secureUrl"] = state ? state.secureUrl : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NotificationDestinationArgs | undefined;
            if ((!args || args.properties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'properties'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["authBasic"] = args ? args.authBasic : undefined;
            resourceInputs["authCustomHeaders"] = args ? args.authCustomHeaders : undefined;
            resourceInputs["authToken"] = args ? args.authToken : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["secureUrl"] = args ? args.secureUrl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["guid"] = undefined /*out*/;
            resourceInputs["lastSent"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationDestination.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NotificationDestination resources.
 */
export interface NotificationDestinationState {
    /**
     * Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Indicates whether the destination is active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * A nested block that describes a basic username and password authentication credentials. Only one authBasic block is permitted per notification destination definition.  See Nested authBasic blocks below for details.
     */
    authBasic?: pulumi.Input<inputs.NotificationDestinationAuthBasic>;
    /**
     * A nested block that describes a custom header authentication credentials. Multiple blocks are permitted per notification destination definition. Nested authCustomHeader blocks below for details.
     */
    authCustomHeaders?: pulumi.Input<pulumi.Input<inputs.NotificationDestinationAuthCustomHeader>[]>;
    /**
     * A nested block that describes a token authentication credentials. Only one authToken block is permitted per notification destination definition.  See Nested authToken blocks below for details.
     */
    authToken?: pulumi.Input<inputs.NotificationDestinationAuthToken>;
    /**
     * The unique entity identifier of the destination in New Relic.
     */
    guid?: pulumi.Input<string>;
    /**
     * The last time a notification was sent.
     */
    lastSent?: pulumi.Input<string>;
    /**
     * The name of the destination.
     */
    name?: pulumi.Input<string>;
    /**
     * A nested block that describes a notification destination property. See Nested property blocks below for details.
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NotificationDestinationProperty>[]>;
    /**
     * A nested block that describes a URL that contains sensitive data at the path or parameters. Only one secureUrl block is permitted per notification destination definition. See Nested secureUrl blocks below for details.
     */
    secureUrl?: pulumi.Input<inputs.NotificationDestinationSecureUrl>;
    /**
     * The status of the destination.
     */
    status?: pulumi.Input<string>;
    /**
     * (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, SERVICE_NOW_APP,
     * PAGERDUTY_ACCOUNT_INTEGRATION, PAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY,
     * MOBILE_PUSH, EVENT_BRIDGE, MICROSOFT_TEAMS).
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NotificationDestination resource.
 */
export interface NotificationDestinationArgs {
    /**
     * Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Indicates whether the destination is active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * A nested block that describes a basic username and password authentication credentials. Only one authBasic block is permitted per notification destination definition.  See Nested authBasic blocks below for details.
     */
    authBasic?: pulumi.Input<inputs.NotificationDestinationAuthBasic>;
    /**
     * A nested block that describes a custom header authentication credentials. Multiple blocks are permitted per notification destination definition. Nested authCustomHeader blocks below for details.
     */
    authCustomHeaders?: pulumi.Input<pulumi.Input<inputs.NotificationDestinationAuthCustomHeader>[]>;
    /**
     * A nested block that describes a token authentication credentials. Only one authToken block is permitted per notification destination definition.  See Nested authToken blocks below for details.
     */
    authToken?: pulumi.Input<inputs.NotificationDestinationAuthToken>;
    /**
     * The name of the destination.
     */
    name?: pulumi.Input<string>;
    /**
     * A nested block that describes a notification destination property. See Nested property blocks below for details.
     */
    properties: pulumi.Input<pulumi.Input<inputs.NotificationDestinationProperty>[]>;
    /**
     * A nested block that describes a URL that contains sensitive data at the path or parameters. Only one secureUrl block is permitted per notification destination definition. See Nested secureUrl blocks below for details.
     */
    secureUrl?: pulumi.Input<inputs.NotificationDestinationSecureUrl>;
    /**
     * (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, SERVICE_NOW_APP,
     * PAGERDUTY_ACCOUNT_INTEGRATION, PAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY,
     * MOBILE_PUSH, EVENT_BRIDGE, MICROSOFT_TEAMS).
     */
    type: pulumi.Input<string>;
}
