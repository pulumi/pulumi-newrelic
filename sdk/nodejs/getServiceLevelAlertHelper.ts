// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this data source to obtain the necessary fields to set up alerts on your service levels. It can be used for a `custom` alertType in order to set up an alert with custom tolerated budget consumption and custom evaluation period or for recommended ones like `fastBurn`. For more information check [the documentation](https://docs.newrelic.com/docs/service-level-management/alerts-slm/).
 */
export function getServiceLevelAlertHelper(args: GetServiceLevelAlertHelperArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceLevelAlertHelperResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("newrelic:index/getServiceLevelAlertHelper:getServiceLevelAlertHelper", {
        "alertType": args.alertType,
        "customEvaluationPeriod": args.customEvaluationPeriod,
        "customToleratedBudgetConsumption": args.customToleratedBudgetConsumption,
        "isBadEvents": args.isBadEvents,
        "sliGuid": args.sliGuid,
        "sloPeriod": args.sloPeriod,
        "sloTarget": args.sloTarget,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceLevelAlertHelper.
 */
export interface GetServiceLevelAlertHelperArgs {
    /**
     * The type of alert we want to set. Valid values are:
     */
    alertType: string;
    /**
     * Aggregation window taken into consideration in minutes. Mandatory if `alertType` is `custom`.
     */
    customEvaluationPeriod?: number;
    /**
     * How much budget you tolerate to consume during the custom evaluation period, valid values between `0` and `100`. Mandatory if `alertType` is `custom`.
     */
    customToleratedBudgetConsumption?: number;
    /**
     * If the SLI is defined using bad events. Defaults to `false`
     */
    isBadEvents?: boolean;
    /**
     * The guid of the sli we want to set the alert on.
     */
    sliGuid: string;
    /**
     * The time window of the Service Level Objective in days. Valid values are `1`, `7` and `28`.
     */
    sloPeriod: number;
    /**
     * The target of the Service Level Objective, valid values between `0` and `100`.
     */
    sloTarget: number;
}

/**
 * A collection of values returned by getServiceLevelAlertHelper.
 */
export interface GetServiceLevelAlertHelperResult {
    readonly alertType: string;
    readonly customEvaluationPeriod?: number;
    readonly customToleratedBudgetConsumption?: number;
    /**
     * (Computed) For non `custom` alert_type, this is the recommended for that type of alert. For `custom` alertType it has the same value as `customEvaluationPeriod`.
     */
    readonly evaluationPeriod: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly isBadEvents?: boolean;
    /**
     * (Computed) The nrql query for the selected type of alert.
     */
    readonly nrql: string;
    readonly sliGuid: string;
    readonly sloPeriod: number;
    readonly sloTarget: number;
    /**
     * (Computed) The computed threshold given the provided arguments.
     */
    readonly threshold: number;
    /**
     * (Computed) For non `custom` alert_type, this is the recommended for that type of alert. For `custom` alertType it has the same value as `customToleratedBudgetConsumption`.
     */
    readonly toleratedBudgetConsumption: number;
}
/**
 * Use this data source to obtain the necessary fields to set up alerts on your service levels. It can be used for a `custom` alertType in order to set up an alert with custom tolerated budget consumption and custom evaluation period or for recommended ones like `fastBurn`. For more information check [the documentation](https://docs.newrelic.com/docs/service-level-management/alerts-slm/).
 */
export function getServiceLevelAlertHelperOutput(args: GetServiceLevelAlertHelperOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceLevelAlertHelperResult> {
    return pulumi.output(args).apply((a: any) => getServiceLevelAlertHelper(a, opts))
}

/**
 * A collection of arguments for invoking getServiceLevelAlertHelper.
 */
export interface GetServiceLevelAlertHelperOutputArgs {
    /**
     * The type of alert we want to set. Valid values are:
     */
    alertType: pulumi.Input<string>;
    /**
     * Aggregation window taken into consideration in minutes. Mandatory if `alertType` is `custom`.
     */
    customEvaluationPeriod?: pulumi.Input<number>;
    /**
     * How much budget you tolerate to consume during the custom evaluation period, valid values between `0` and `100`. Mandatory if `alertType` is `custom`.
     */
    customToleratedBudgetConsumption?: pulumi.Input<number>;
    /**
     * If the SLI is defined using bad events. Defaults to `false`
     */
    isBadEvents?: pulumi.Input<boolean>;
    /**
     * The guid of the sli we want to set the alert on.
     */
    sliGuid: pulumi.Input<string>;
    /**
     * The time window of the Service Level Objective in days. Valid values are `1`, `7` and `28`.
     */
    sloPeriod: pulumi.Input<number>;
    /**
     * The target of the Service Level Objective, valid values between `0` and `100`.
     */
    sloTarget: pulumi.Input<number>;
}
