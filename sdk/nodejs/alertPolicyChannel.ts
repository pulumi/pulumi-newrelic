// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this resource to map alert policies to alert channels in New Relic.
 *
 * > **WARNING:** The `newrelic.AlertPolicyChannel` resource is **deprecated** and will be **removed in a future major release**. As an alternative, you can map channels to policies using the resource `newrelic.Workflow`, with the channels to be mapped created using a combination of the newer resources `newrelic.NotificationDestination` and `newrelic.NotificationChannel`. We **strongly recommend** migrating to these new resources at the earliest. Please refer to this example for a detailed illustration on setting up channels and workflows with these resources.
 *
 * ## Example Usage
 *
 * The example below will apply multiple alert channels to an existing New Relic alert policy.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * // Fetches the data for this policy from your New Relic account
 * // and is referenced in the newrelic_alert_policy_channel block below.
 * const examplePolicy = newrelic.getAlertPolicy({
 *     name: "my-alert-policy",
 * });
 * // Creates an email alert channel.
 * const emailChannel = new newrelic.AlertChannel("email_channel", {
 *     name: "bar",
 *     type: "email",
 *     config: {
 *         recipients: "foo@example.com",
 *         includeJsonAttachment: "1",
 *     },
 * });
 * // Creates a Slack alert channel.
 * const slackChannel = new newrelic.AlertChannel("slack_channel", {
 *     name: "slack-channel-example",
 *     type: "slack",
 *     config: {
 *         channel: "#example-channel",
 *         url: "http://example-org.slack.com",
 *     },
 * });
 * // Applies the created channels above to the alert policy
 * // referenced at the top of the config.
 * const foo = new newrelic.AlertPolicyChannel("foo", {
 *     policyId: examplePolicy.then(examplePolicy => examplePolicy.id),
 *     channelIds: [
 *         emailChannel.id,
 *         slackChannel.id,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Alert policy channels can be imported using the following notation: `<policyID>:<channelID>:<channelID>`, e.g.
 *
 * ```sh
 * $ pulumi import newrelic:index/alertPolicyChannel:AlertPolicyChannel foo 123456:3462754:2938324
 * ```
 * When importing `newrelic_alert_policy_channel` resource, the attribute `channel_ids`* will be set in your Terraform state. You can import multiple channels as long as those channel IDs are included as part of the import ID hash.
 */
export class AlertPolicyChannel extends pulumi.CustomResource {
    /**
     * Get an existing AlertPolicyChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertPolicyChannelState, opts?: pulumi.CustomResourceOptions): AlertPolicyChannel {
        return new AlertPolicyChannel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:index/alertPolicyChannel:AlertPolicyChannel';

    /**
     * Returns true if the given object is an instance of AlertPolicyChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertPolicyChannel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertPolicyChannel.__pulumiType;
    }

    /**
     * Determines the New Relic account where the alert policy channel will be created. Defaults to the account associated with the API key used.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid drift in your state.
     */
    declare public readonly channelIds: pulumi.Output<string[]>;
    /**
     * The ID of the policy.
     */
    declare public readonly policyId: pulumi.Output<string>;

    /**
     * Create a AlertPolicyChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertPolicyChannelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertPolicyChannelArgs | AlertPolicyChannelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertPolicyChannelState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["channelIds"] = state?.channelIds;
            resourceInputs["policyId"] = state?.policyId;
        } else {
            const args = argsOrState as AlertPolicyChannelArgs | undefined;
            if (args?.channelIds === undefined && !opts.urn) {
                throw new Error("Missing required property 'channelIds'");
            }
            if (args?.policyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["channelIds"] = args?.channelIds;
            resourceInputs["policyId"] = args?.policyId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertPolicyChannel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlertPolicyChannel resources.
 */
export interface AlertPolicyChannelState {
    /**
     * Determines the New Relic account where the alert policy channel will be created. Defaults to the account associated with the API key used.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid drift in your state.
     */
    channelIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the policy.
     */
    policyId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlertPolicyChannel resource.
 */
export interface AlertPolicyChannelArgs {
    /**
     * Determines the New Relic account where the alert policy channel will be created. Defaults to the account associated with the API key used.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid drift in your state.
     */
    channelIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the policy.
     */
    policyId: pulumi.Input<string>;
}
