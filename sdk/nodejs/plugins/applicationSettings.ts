// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * Applications can be imported using notation `application_guid`, e.g.
 *
 * ```sh
 * $ pulumi import newrelic:plugins/applicationSettings:ApplicationSettings main Mzk1NzUyNHQVRJNTxBUE18QVBQTElDc4ODU1MzYx
 * ```
 */
export class ApplicationSettings extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationSettingsState, opts?: pulumi.CustomResourceOptions): ApplicationSettings {
        return new ApplicationSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:plugins/applicationSettings:ApplicationSettings';

    /**
     * Returns true if the given object is an instance of ApplicationSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationSettings.__pulumiType;
    }

    /**
     * The acceptable response time limit (Apdex threshold) for the application.
     */
    public readonly appApdexThreshold!: pulumi.Output<number | undefined>;
    /**
     * Dummy field to support backward compatibility of previous version.should be removed with next major version.
     */
    public readonly enableRealUserMonitoring!: pulumi.Output<boolean | undefined>;
    /**
     * Enable or disable the collection of slowest database queries in your traces.
     */
    public readonly enableSlowSql!: pulumi.Output<boolean | undefined>;
    /**
     * Enable or disable the collection of thread profiling data.
     */
    public readonly enableThreadProfiler!: pulumi.Output<boolean | undefined>;
    /**
     * Dummy field to support backward compatibility of previous version.should be removed with next major version.
     */
    public readonly endUserApdexThreshold!: pulumi.Output<number | undefined>;
    /**
     * Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
     */
    public readonly errorCollectors!: pulumi.Output<outputs.plugins.ApplicationSettingsErrorCollector[] | undefined>;
    /**
     * The GUID of the application in New Relic APM.
     *
     * > **NOTE:** While the attribute `guid` is not mandatory at a schema level, it is recommended to use `guid` over `name`, as support for using `name` with this resource shall eventually be discontinued. Please see the note under `name` for more details.
     */
    public readonly guid!: pulumi.Output<string>;
    public /*out*/ readonly isImported!: pulumi.Output<boolean>;
    /**
     * The name of the application in New Relic.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
     */
    public readonly tracerType!: pulumi.Output<string | undefined>;
    /**
     * Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
     */
    public readonly transactionTracers!: pulumi.Output<outputs.plugins.ApplicationSettingsTransactionTracer[] | undefined>;
    /**
     * Enable or disable server side monitoring for the New Relic application.
     */
    public readonly useServerSideConfig!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ApplicationSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApplicationSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationSettingsArgs | ApplicationSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationSettingsState | undefined;
            resourceInputs["appApdexThreshold"] = state ? state.appApdexThreshold : undefined;
            resourceInputs["enableRealUserMonitoring"] = state ? state.enableRealUserMonitoring : undefined;
            resourceInputs["enableSlowSql"] = state ? state.enableSlowSql : undefined;
            resourceInputs["enableThreadProfiler"] = state ? state.enableThreadProfiler : undefined;
            resourceInputs["endUserApdexThreshold"] = state ? state.endUserApdexThreshold : undefined;
            resourceInputs["errorCollectors"] = state ? state.errorCollectors : undefined;
            resourceInputs["guid"] = state ? state.guid : undefined;
            resourceInputs["isImported"] = state ? state.isImported : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tracerType"] = state ? state.tracerType : undefined;
            resourceInputs["transactionTracers"] = state ? state.transactionTracers : undefined;
            resourceInputs["useServerSideConfig"] = state ? state.useServerSideConfig : undefined;
        } else {
            const args = argsOrState as ApplicationSettingsArgs | undefined;
            resourceInputs["appApdexThreshold"] = args ? args.appApdexThreshold : undefined;
            resourceInputs["enableRealUserMonitoring"] = args ? args.enableRealUserMonitoring : undefined;
            resourceInputs["enableSlowSql"] = args ? args.enableSlowSql : undefined;
            resourceInputs["enableThreadProfiler"] = args ? args.enableThreadProfiler : undefined;
            resourceInputs["endUserApdexThreshold"] = args ? args.endUserApdexThreshold : undefined;
            resourceInputs["errorCollectors"] = args ? args.errorCollectors : undefined;
            resourceInputs["guid"] = args ? args.guid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tracerType"] = args ? args.tracerType : undefined;
            resourceInputs["transactionTracers"] = args ? args.transactionTracers : undefined;
            resourceInputs["useServerSideConfig"] = args ? args.useServerSideConfig : undefined;
            resourceInputs["isImported"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationSettings resources.
 */
export interface ApplicationSettingsState {
    /**
     * The acceptable response time limit (Apdex threshold) for the application.
     */
    appApdexThreshold?: pulumi.Input<number>;
    /**
     * Dummy field to support backward compatibility of previous version.should be removed with next major version.
     */
    enableRealUserMonitoring?: pulumi.Input<boolean>;
    /**
     * Enable or disable the collection of slowest database queries in your traces.
     */
    enableSlowSql?: pulumi.Input<boolean>;
    /**
     * Enable or disable the collection of thread profiling data.
     */
    enableThreadProfiler?: pulumi.Input<boolean>;
    /**
     * Dummy field to support backward compatibility of previous version.should be removed with next major version.
     */
    endUserApdexThreshold?: pulumi.Input<number>;
    /**
     * Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
     */
    errorCollectors?: pulumi.Input<pulumi.Input<inputs.plugins.ApplicationSettingsErrorCollector>[]>;
    /**
     * The GUID of the application in New Relic APM.
     *
     * > **NOTE:** While the attribute `guid` is not mandatory at a schema level, it is recommended to use `guid` over `name`, as support for using `name` with this resource shall eventually be discontinued. Please see the note under `name` for more details.
     */
    guid?: pulumi.Input<string>;
    isImported?: pulumi.Input<boolean>;
    /**
     * The name of the application in New Relic.
     */
    name?: pulumi.Input<string>;
    /**
     * Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
     */
    tracerType?: pulumi.Input<string>;
    /**
     * Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
     */
    transactionTracers?: pulumi.Input<pulumi.Input<inputs.plugins.ApplicationSettingsTransactionTracer>[]>;
    /**
     * Enable or disable server side monitoring for the New Relic application.
     */
    useServerSideConfig?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ApplicationSettings resource.
 */
export interface ApplicationSettingsArgs {
    /**
     * The acceptable response time limit (Apdex threshold) for the application.
     */
    appApdexThreshold?: pulumi.Input<number>;
    /**
     * Dummy field to support backward compatibility of previous version.should be removed with next major version.
     */
    enableRealUserMonitoring?: pulumi.Input<boolean>;
    /**
     * Enable or disable the collection of slowest database queries in your traces.
     */
    enableSlowSql?: pulumi.Input<boolean>;
    /**
     * Enable or disable the collection of thread profiling data.
     */
    enableThreadProfiler?: pulumi.Input<boolean>;
    /**
     * Dummy field to support backward compatibility of previous version.should be removed with next major version.
     */
    endUserApdexThreshold?: pulumi.Input<number>;
    /**
     * Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
     */
    errorCollectors?: pulumi.Input<pulumi.Input<inputs.plugins.ApplicationSettingsErrorCollector>[]>;
    /**
     * The GUID of the application in New Relic APM.
     *
     * > **NOTE:** While the attribute `guid` is not mandatory at a schema level, it is recommended to use `guid` over `name`, as support for using `name` with this resource shall eventually be discontinued. Please see the note under `name` for more details.
     */
    guid?: pulumi.Input<string>;
    /**
     * The name of the application in New Relic.
     */
    name?: pulumi.Input<string>;
    /**
     * Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
     */
    tracerType?: pulumi.Input<string>;
    /**
     * Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
     */
    transactionTracers?: pulumi.Input<pulumi.Input<inputs.plugins.ApplicationSettingsTransactionTracer>[]>;
    /**
     * Enable or disable server side monitoring for the New Relic application.
     */
    useServerSideConfig?: pulumi.Input<boolean>;
}
