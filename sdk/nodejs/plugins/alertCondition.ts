// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * New Relic Plugins reached end of life Wednesday June 16, 2021.
 *
 * **This resource has been removed.**
 *
 * For more information, [click here](https://discuss.newrelic.com/t/new-relic-plugin-eol-wednesday-june-16th-2021/127267)
 */
export class AlertCondition extends pulumi.CustomResource {
    /**
     * Get an existing AlertCondition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertConditionState, opts?: pulumi.CustomResourceOptions): AlertCondition {
        return new AlertCondition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:plugins/alertCondition:AlertCondition';

    /**
     * Returns true if the given object is an instance of AlertCondition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertCondition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertCondition.__pulumiType;
    }

    /**
     * Whether or not this condition is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The plugin component IDs to target.
     */
    public readonly entities!: pulumi.Output<number[]>;
    /**
     * The plugin metric to evaluate.
     */
    public readonly metric!: pulumi.Output<string>;
    /**
     * The metric description.
     */
    public readonly metricDescription!: pulumi.Output<string>;
    /**
     * The title of the condition. Must be between 1 and 64 characters, inclusive.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The GUID of the plugin which produces the metric.
     */
    public readonly pluginGuid!: pulumi.Output<string>;
    /**
     * The ID of the installed plugin instance which produces the metric.
     */
    public readonly pluginId!: pulumi.Output<string>;
    /**
     * The ID of the policy where this condition should be used.
     */
    public readonly policyId!: pulumi.Output<number>;
    /**
     * Runbook URL to display in notifications.
     */
    public readonly runbookUrl!: pulumi.Output<string | undefined>;
    public readonly terms!: pulumi.Output<outputs.plugins.AlertConditionTerm[]>;
    /**
     * The value function to apply to the metric data. One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.
     */
    public readonly valueFunction!: pulumi.Output<string>;

    /**
     * Create a AlertCondition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertConditionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertConditionArgs | AlertConditionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertConditionState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["entities"] = state ? state.entities : undefined;
            resourceInputs["metric"] = state ? state.metric : undefined;
            resourceInputs["metricDescription"] = state ? state.metricDescription : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pluginGuid"] = state ? state.pluginGuid : undefined;
            resourceInputs["pluginId"] = state ? state.pluginId : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["runbookUrl"] = state ? state.runbookUrl : undefined;
            resourceInputs["terms"] = state ? state.terms : undefined;
            resourceInputs["valueFunction"] = state ? state.valueFunction : undefined;
        } else {
            const args = argsOrState as AlertConditionArgs | undefined;
            if ((!args || args.entities === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entities'");
            }
            if ((!args || args.metric === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metric'");
            }
            if ((!args || args.metricDescription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricDescription'");
            }
            if ((!args || args.pluginGuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pluginGuid'");
            }
            if ((!args || args.pluginId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pluginId'");
            }
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            if ((!args || args.terms === undefined) && !opts.urn) {
                throw new Error("Missing required property 'terms'");
            }
            if ((!args || args.valueFunction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'valueFunction'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["entities"] = args ? args.entities : undefined;
            resourceInputs["metric"] = args ? args.metric : undefined;
            resourceInputs["metricDescription"] = args ? args.metricDescription : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pluginGuid"] = args ? args.pluginGuid : undefined;
            resourceInputs["pluginId"] = args ? args.pluginId : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["runbookUrl"] = args ? args.runbookUrl : undefined;
            resourceInputs["terms"] = args ? args.terms : undefined;
            resourceInputs["valueFunction"] = args ? args.valueFunction : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertCondition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlertCondition resources.
 */
export interface AlertConditionState {
    /**
     * Whether or not this condition is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The plugin component IDs to target.
     */
    entities?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The plugin metric to evaluate.
     */
    metric?: pulumi.Input<string>;
    /**
     * The metric description.
     */
    metricDescription?: pulumi.Input<string>;
    /**
     * The title of the condition. Must be between 1 and 64 characters, inclusive.
     */
    name?: pulumi.Input<string>;
    /**
     * The GUID of the plugin which produces the metric.
     */
    pluginGuid?: pulumi.Input<string>;
    /**
     * The ID of the installed plugin instance which produces the metric.
     */
    pluginId?: pulumi.Input<string>;
    /**
     * The ID of the policy where this condition should be used.
     */
    policyId?: pulumi.Input<number>;
    /**
     * Runbook URL to display in notifications.
     */
    runbookUrl?: pulumi.Input<string>;
    terms?: pulumi.Input<pulumi.Input<inputs.plugins.AlertConditionTerm>[]>;
    /**
     * The value function to apply to the metric data. One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.
     */
    valueFunction?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlertCondition resource.
 */
export interface AlertConditionArgs {
    /**
     * Whether or not this condition is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The plugin component IDs to target.
     */
    entities: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The plugin metric to evaluate.
     */
    metric: pulumi.Input<string>;
    /**
     * The metric description.
     */
    metricDescription: pulumi.Input<string>;
    /**
     * The title of the condition. Must be between 1 and 64 characters, inclusive.
     */
    name?: pulumi.Input<string>;
    /**
     * The GUID of the plugin which produces the metric.
     */
    pluginGuid: pulumi.Input<string>;
    /**
     * The ID of the installed plugin instance which produces the metric.
     */
    pluginId: pulumi.Input<string>;
    /**
     * The ID of the policy where this condition should be used.
     */
    policyId: pulumi.Input<number>;
    /**
     * Runbook URL to display in notifications.
     */
    runbookUrl?: pulumi.Input<string>;
    terms: pulumi.Input<pulumi.Input<inputs.plugins.AlertConditionTerm>[]>;
    /**
     * The value function to apply to the metric data. One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.
     */
    valueFunction: pulumi.Input<string>;
}
