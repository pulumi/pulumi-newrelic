// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this data source to get information about a specific key transaction in New Relic that already exists.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const txn = newrelic.getKeyTransaction({
 *     name: "txn",
 * });
 * const foo = new newrelic.AlertPolicy("foo", {name: "foo"});
 * const fooAlertCondition = new newrelic.AlertCondition("foo", {
 *     policyId: foo.id,
 *     name: "foo",
 *     type: "apm_kt_metric",
 *     entities: [txn.then(txn => txn.id)],
 *     metric: "error_percentage",
 *     runbookUrl: "https://www.example.com",
 *     terms: [{
 *         duration: 5,
 *         operator: "below",
 *         priority: "critical",
 *         threshold: 0.75,
 *         timeFunction: "all",
 *     }],
 * });
 * ```
 */
export function getKeyTransaction(args: GetKeyTransactionArgs, opts?: pulumi.InvokeOptions): Promise<GetKeyTransactionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("newrelic:index/getKeyTransaction:getKeyTransaction", {
        "guid": args.guid,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getKeyTransaction.
 */
export interface GetKeyTransactionArgs {
    /**
     * GUID of the key transaction in New Relic.
     *
     * > **NOTE** If the `name` specified in the configuration matches the names of multiple key transactions in the account, the data source will return the first match from the list of all matching key transactions retrieved from the API. However, when using the `guid` argument as the search criterion, only the key transaction with that particular GUID is returned, as each key transaction has a unique GUID.
     */
    guid?: string;
    /**
     * The name of the key transaction in New Relic.
     */
    name: string;
}

/**
 * A collection of values returned by getKeyTransaction.
 */
export interface GetKeyTransactionResult {
    /**
     * Domain of the key transaction in New Relic.
     */
    readonly domain: string;
    /**
     * GUID of the key transaction in New Relic.
     */
    readonly guid: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Name of the key Transation in New Relic.
     */
    readonly name: string;
    /**
     * Type of the key transaction in New Relic.
     */
    readonly type: string;
}
/**
 * Use this data source to get information about a specific key transaction in New Relic that already exists.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const txn = newrelic.getKeyTransaction({
 *     name: "txn",
 * });
 * const foo = new newrelic.AlertPolicy("foo", {name: "foo"});
 * const fooAlertCondition = new newrelic.AlertCondition("foo", {
 *     policyId: foo.id,
 *     name: "foo",
 *     type: "apm_kt_metric",
 *     entities: [txn.then(txn => txn.id)],
 *     metric: "error_percentage",
 *     runbookUrl: "https://www.example.com",
 *     terms: [{
 *         duration: 5,
 *         operator: "below",
 *         priority: "critical",
 *         threshold: 0.75,
 *         timeFunction: "all",
 *     }],
 * });
 * ```
 */
export function getKeyTransactionOutput(args: GetKeyTransactionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKeyTransactionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("newrelic:index/getKeyTransaction:getKeyTransaction", {
        "guid": args.guid,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getKeyTransaction.
 */
export interface GetKeyTransactionOutputArgs {
    /**
     * GUID of the key transaction in New Relic.
     *
     * > **NOTE** If the `name` specified in the configuration matches the names of multiple key transactions in the account, the data source will return the first match from the list of all matching key transactions retrieved from the API. However, when using the `guid` argument as the search criterion, only the key transaction with that particular GUID is returned, as each key transaction has a unique GUID.
     */
    guid?: pulumi.Input<string>;
    /**
     * The name of the key transaction in New Relic.
     */
    name: pulumi.Input<string>;
}
