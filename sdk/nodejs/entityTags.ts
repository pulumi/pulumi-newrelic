// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this resource to create, update, and delete tags for a New Relic One entity.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const fooEntity = newrelic.getEntity({
 *     name: "Example application",
 *     type: "APPLICATION",
 *     domain: "APM",
 * });
 * const fooEntityTags = new newrelic.EntityTags("fooEntityTags", {
 *     guid: fooEntity.then(fooEntity => fooEntity.guid),
 *     tags: [
 *         {
 *             key: "my-key",
 *             values: [
 *                 "my-value",
 *                 "my-other-value",
 *             ],
 *         },
 *         {
 *             key: "my-key-2",
 *             values: ["my-value-2"],
 *         },
 *     ],
 * });
 * ```
 */
export class EntityTags extends pulumi.CustomResource {
    /**
     * Get an existing EntityTags resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EntityTagsState, opts?: pulumi.CustomResourceOptions): EntityTags {
        return new EntityTags(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:index/entityTags:EntityTags';

    /**
     * Returns true if the given object is an instance of EntityTags.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EntityTags {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EntityTags.__pulumiType;
    }

    /**
     * The guid of the entity to tag.
     */
    public readonly guid!: pulumi.Output<string>;
    /**
     * A nested block that describes an entity tag. See Nested tag blocks below for details.
     */
    public readonly tags!: pulumi.Output<outputs.EntityTagsTag[]>;

    /**
     * Create a EntityTags resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EntityTagsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EntityTagsArgs | EntityTagsState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as EntityTagsState | undefined;
            inputs["guid"] = state ? state.guid : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as EntityTagsArgs | undefined;
            if (!args || args.guid === undefined) {
                throw new Error("Missing required property 'guid'");
            }
            if (!args || args.tags === undefined) {
                throw new Error("Missing required property 'tags'");
            }
            inputs["guid"] = args ? args.guid : undefined;
            inputs["tags"] = args ? args.tags : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(EntityTags.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EntityTags resources.
 */
export interface EntityTagsState {
    /**
     * The guid of the entity to tag.
     */
    readonly guid?: pulumi.Input<string>;
    /**
     * A nested block that describes an entity tag. See Nested tag blocks below for details.
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.EntityTagsTag>[]>;
}

/**
 * The set of arguments for constructing a EntityTags resource.
 */
export interface EntityTagsArgs {
    /**
     * The guid of the entity to tag.
     */
    readonly guid: pulumi.Input<string>;
    /**
     * A nested block that describes an entity tag. See Nested tag blocks below for details.
     */
    readonly tags: pulumi.Input<pulumi.Input<inputs.EntityTagsTag>[]>;
}
