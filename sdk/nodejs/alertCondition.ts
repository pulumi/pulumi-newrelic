// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 * 
 * const app = pulumi.output(newrelic.getApplication({
 *     name: "my-app",
 * }));
 * const fooAlertPolicy = new newrelic.AlertPolicy("foo", {});
 * const fooAlertCondition = new newrelic.AlertCondition("foo", {
 *     entities: [app.id],
 *     metric: "apdex",
 *     policyId: fooAlertPolicy.id,
 *     runbookUrl: "https://www.example.com",
 *     terms: [{
 *         duration: 5,
 *         operator: "below",
 *         priority: "critical",
 *         threshold: 0.75,
 *         timeFunction: "all",
 *     }],
 *     type: "apm_app_metric",
 * });
 * ```
 * 
 * ## Terms
 * 
 * The `term` mapping supports the following arguments:
 * 
 *   * `duration` - (Required) In minutes, must be: `5`, `10`, `15`, `30`, `60`, or `120`.
 *   * `operator` - (Optional) `above`, `below`, or `equal`.  Defaults to `equal`.
 *   * `priority` - (Optional) `critical` or `warning`.  Defaults to `critical`.
 *   * `threshold` - (Required) Must be 0 or greater.
 *   * `time_function` - (Required) `all` or `any`.
 */
export class AlertCondition extends pulumi.CustomResource {
    /**
     * Get an existing AlertCondition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertConditionState, opts?: pulumi.CustomResourceOptions): AlertCondition {
        return new AlertCondition(name, <any>state, { ...opts, id: id });
    }

    /**
     * `instance` or `application`.  This is required if you are using the JVM plugin in New Relic.
     */
    public readonly conditionScope: pulumi.Output<string | undefined>;
    public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * The instance IDS associated with this condition.
     */
    public readonly entities: pulumi.Output<number[]>;
    /**
     * A valid Garbage Collection metric e.g. `GC/G1 Young Generation`. This is required if you are using `apm_jvm_metric` with `gc_cpu_time` condition type.
     */
    public readonly gcMetric: pulumi.Output<string | undefined>;
    /**
     * The metric field accepts parameters based on the `type` set.
     */
    public readonly metric: pulumi.Output<string>;
    /**
     * The title of the condition. Must be between 1 and 64 characters, inclusive.
     */
    public readonly name: pulumi.Output<string>;
    /**
     * The ID of the policy where this condition should be used.
     */
    public readonly policyId: pulumi.Output<number>;
    /**
     * Runbook URL to display in notifications.
     */
    public readonly runbookUrl: pulumi.Output<string | undefined>;
    /**
     * A list of terms for this condition. See Terms below for details.
     */
    public readonly terms: pulumi.Output<{ duration: number, operator?: string, priority?: string, threshold: number, timeFunction: string }[]>;
    /**
     * The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `servers_metric`, `browser_metric`, `mobile_metric`
     */
    public readonly type: pulumi.Output<string>;
    /**
     * A custom metric to be evaluated.
     */
    public readonly userDefinedMetric: pulumi.Output<string | undefined>;
    /**
     * One of: `average`, `min`, `max`, `total`, or `sample_size`.
     */
    public readonly userDefinedValueFunction: pulumi.Output<string | undefined>;
    /**
     * Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.
     */
    public readonly violationCloseTimer: pulumi.Output<number | undefined>;

    /**
     * Create a AlertCondition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertConditionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertConditionArgs | AlertConditionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: AlertConditionState = argsOrState as AlertConditionState | undefined;
            inputs["conditionScope"] = state ? state.conditionScope : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["entities"] = state ? state.entities : undefined;
            inputs["gcMetric"] = state ? state.gcMetric : undefined;
            inputs["metric"] = state ? state.metric : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["policyId"] = state ? state.policyId : undefined;
            inputs["runbookUrl"] = state ? state.runbookUrl : undefined;
            inputs["terms"] = state ? state.terms : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["userDefinedMetric"] = state ? state.userDefinedMetric : undefined;
            inputs["userDefinedValueFunction"] = state ? state.userDefinedValueFunction : undefined;
            inputs["violationCloseTimer"] = state ? state.violationCloseTimer : undefined;
        } else {
            const args = argsOrState as AlertConditionArgs | undefined;
            if (!args || args.entities === undefined) {
                throw new Error("Missing required property 'entities'");
            }
            if (!args || args.metric === undefined) {
                throw new Error("Missing required property 'metric'");
            }
            if (!args || args.policyId === undefined) {
                throw new Error("Missing required property 'policyId'");
            }
            if (!args || args.terms === undefined) {
                throw new Error("Missing required property 'terms'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["conditionScope"] = args ? args.conditionScope : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["entities"] = args ? args.entities : undefined;
            inputs["gcMetric"] = args ? args.gcMetric : undefined;
            inputs["metric"] = args ? args.metric : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["policyId"] = args ? args.policyId : undefined;
            inputs["runbookUrl"] = args ? args.runbookUrl : undefined;
            inputs["terms"] = args ? args.terms : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["userDefinedMetric"] = args ? args.userDefinedMetric : undefined;
            inputs["userDefinedValueFunction"] = args ? args.userDefinedValueFunction : undefined;
            inputs["violationCloseTimer"] = args ? args.violationCloseTimer : undefined;
        }
        super("newrelic:index/alertCondition:AlertCondition", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlertCondition resources.
 */
export interface AlertConditionState {
    /**
     * `instance` or `application`.  This is required if you are using the JVM plugin in New Relic.
     */
    readonly conditionScope?: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * The instance IDS associated with this condition.
     */
    readonly entities?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A valid Garbage Collection metric e.g. `GC/G1 Young Generation`. This is required if you are using `apm_jvm_metric` with `gc_cpu_time` condition type.
     */
    readonly gcMetric?: pulumi.Input<string>;
    /**
     * The metric field accepts parameters based on the `type` set.
     */
    readonly metric?: pulumi.Input<string>;
    /**
     * The title of the condition. Must be between 1 and 64 characters, inclusive.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The ID of the policy where this condition should be used.
     */
    readonly policyId?: pulumi.Input<number>;
    /**
     * Runbook URL to display in notifications.
     */
    readonly runbookUrl?: pulumi.Input<string>;
    /**
     * A list of terms for this condition. See Terms below for details.
     */
    readonly terms?: pulumi.Input<pulumi.Input<{ duration: pulumi.Input<number>, operator?: pulumi.Input<string>, priority?: pulumi.Input<string>, threshold: pulumi.Input<number>, timeFunction: pulumi.Input<string> }>[]>;
    /**
     * The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `servers_metric`, `browser_metric`, `mobile_metric`
     */
    readonly type?: pulumi.Input<string>;
    /**
     * A custom metric to be evaluated.
     */
    readonly userDefinedMetric?: pulumi.Input<string>;
    /**
     * One of: `average`, `min`, `max`, `total`, or `sample_size`.
     */
    readonly userDefinedValueFunction?: pulumi.Input<string>;
    /**
     * Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.
     */
    readonly violationCloseTimer?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AlertCondition resource.
 */
export interface AlertConditionArgs {
    /**
     * `instance` or `application`.  This is required if you are using the JVM plugin in New Relic.
     */
    readonly conditionScope?: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * The instance IDS associated with this condition.
     */
    readonly entities: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A valid Garbage Collection metric e.g. `GC/G1 Young Generation`. This is required if you are using `apm_jvm_metric` with `gc_cpu_time` condition type.
     */
    readonly gcMetric?: pulumi.Input<string>;
    /**
     * The metric field accepts parameters based on the `type` set.
     */
    readonly metric: pulumi.Input<string>;
    /**
     * The title of the condition. Must be between 1 and 64 characters, inclusive.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The ID of the policy where this condition should be used.
     */
    readonly policyId: pulumi.Input<number>;
    /**
     * Runbook URL to display in notifications.
     */
    readonly runbookUrl?: pulumi.Input<string>;
    /**
     * A list of terms for this condition. See Terms below for details.
     */
    readonly terms: pulumi.Input<pulumi.Input<{ duration: pulumi.Input<number>, operator?: pulumi.Input<string>, priority?: pulumi.Input<string>, threshold: pulumi.Input<number>, timeFunction: pulumi.Input<string> }>[]>;
    /**
     * The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `servers_metric`, `browser_metric`, `mobile_metric`
     */
    readonly type: pulumi.Input<string>;
    /**
     * A custom metric to be evaluated.
     */
    readonly userDefinedMetric?: pulumi.Input<string>;
    /**
     * One of: `average`, `min`, `max`, `total`, or `sample_size`.
     */
    readonly userDefinedValueFunction?: pulumi.Input<string>;
    /**
     * Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.
     */
    readonly violationCloseTimer?: pulumi.Input<number>;
}
