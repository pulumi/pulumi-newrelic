// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `newrelic.User` data source helps search for a user by their name and/or email ID, and accordingly, fetch the ID of the matching user.
 *
 * ## Example Usage
 *
 * The below example illustrates fetching a the ID of a user (and other arguments) using the ID of the authentication domain the user belongs to, as well as a name and/or email ID, which can be used as criteria to search for a user who matches these specified parameters.
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const foo = newrelic.getAuthenticationDomain({
 *     name: "Test Authentication Domain",
 * });
 * const userOne = foo.then(foo => newrelic.getUser({
 *     authenticationDomainId: foo.id,
 *     name: "Test User",
 * }));
 * const userTwo = foo.then(foo => newrelic.getUser({
 *     authenticationDomainId: foo.id,
 *     emailId: "test_user@random.com",
 * }));
 * ```
 */
export function getUser(args: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("newrelic:index/getUser:getUser", {
        "authenticationDomainId": args.authenticationDomainId,
        "emailId": args.emailId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    /**
     * The ID of the authentication domain the user to be searched for belongs to.
     */
    authenticationDomainId: string;
    /**
     * The email ID of the user to search for.
     *
     * It should be noted that either `name` or `emailId` must be specified in order to retrieve a matching user.
     *
     * > **NOTE** If the `name` specified in the configuration matches the names of multiple users in the account, the data source will return the first match from the list of all matching users retrieved from the API. However, when using the `emailId` argument as the search criterion, only the user with the specified email ID will be returned, as each user has a unique email ID and multiple users cannot have the same email ID.
     *
     * > **NOTE** The ID of an authentication domain can be retrieved using its name, via the data source `newrelic.getAuthenticationDomain`, as shown in the example above. Head over to the documentation of this data source for more details and examples.
     */
    emailId?: string;
    /**
     * The name of the user to search for.
     */
    name?: string;
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    readonly authenticationDomainId: string;
    readonly emailId: string;
    /**
     * The ID of the matching user fetched.
     */
    readonly id: string;
    readonly name: string;
}
/**
 * The `newrelic.User` data source helps search for a user by their name and/or email ID, and accordingly, fetch the ID of the matching user.
 *
 * ## Example Usage
 *
 * The below example illustrates fetching a the ID of a user (and other arguments) using the ID of the authentication domain the user belongs to, as well as a name and/or email ID, which can be used as criteria to search for a user who matches these specified parameters.
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 *
 * const foo = newrelic.getAuthenticationDomain({
 *     name: "Test Authentication Domain",
 * });
 * const userOne = foo.then(foo => newrelic.getUser({
 *     authenticationDomainId: foo.id,
 *     name: "Test User",
 * }));
 * const userTwo = foo.then(foo => newrelic.getUser({
 *     authenticationDomainId: foo.id,
 *     emailId: "test_user@random.com",
 * }));
 * ```
 */
export function getUserOutput(args: GetUserOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetUserResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("newrelic:index/getUser:getUser", {
        "authenticationDomainId": args.authenticationDomainId,
        "emailId": args.emailId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    /**
     * The ID of the authentication domain the user to be searched for belongs to.
     */
    authenticationDomainId: pulumi.Input<string>;
    /**
     * The email ID of the user to search for.
     *
     * It should be noted that either `name` or `emailId` must be specified in order to retrieve a matching user.
     *
     * > **NOTE** If the `name` specified in the configuration matches the names of multiple users in the account, the data source will return the first match from the list of all matching users retrieved from the API. However, when using the `emailId` argument as the search criterion, only the user with the specified email ID will be returned, as each user has a unique email ID and multiple users cannot have the same email ID.
     *
     * > **NOTE** The ID of an authentication domain can be retrieved using its name, via the data source `newrelic.getAuthenticationDomain`, as shown in the example above. Head over to the documentation of this data source for more details and examples.
     */
    emailId?: pulumi.Input<string>;
    /**
     * The name of the user to search for.
     */
    name?: pulumi.Input<string>;
}
