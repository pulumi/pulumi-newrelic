// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Destination id can be found in the Destinations page -> three dots at the right of the chosen destination -> copy destination id to clipboard.
//
// This example is especially useful for slack destinations which *must* be imported.
//
// 1. Add an empty resource to your terraform file:
//
// terraform
//
// resource "newrelic_notification_destination" "foo" {
//
// }
//
// ```sh
// $ pulumi import newrelic:index/notificationDestination:NotificationDestination  Run import command: `newrelic_notification_destination.foo <destination_id>`
// ```
//
// 3. Run the following command after the import successfully done and copy the information to your resource:
//
// `terraform state show newrelic_notification_destination.foo`
//
// 4. Add `ignore_changes` attribute on `auth_token` in your imported resource:
//
// terraform
//
// lifecycle {
//
//	  ignore_changes = [auth_token]
//
//	}
//
// Your imported destination should look like that:
//
// terraform
//
// resource "newrelic_notification_destination" "foo" {
//
//	lifecycle {
//
//	  ignore_changes = [auth_token]
//
//	}
//
//	name = "*********"
//
//	type = "SLACK"
//
//	auth_token {
//
//	  prefix = "Bearer"
//
//	}
//
//	property {
//
//	    key   = "teamName"
//
//	    label = "Team Name"
//
//	    value = "******"
//
//	}
//
// }
type NotificationDestination struct {
	pulumi.CustomResourceState

	// Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntOutput `pulumi:"accountId"`
	// Indicates whether the destination is active.
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// A nested block that describes a basic username and password authentication credentials. Only one authBasic block is permitted per notification destination definition.  See Nested authBasic blocks below for details.
	AuthBasic NotificationDestinationAuthBasicPtrOutput `pulumi:"authBasic"`
	// A nested block that describes a custom header authentication credentials. Multiple blocks are permitted per notification destination definition. Nested authCustomHeader blocks below for details.
	AuthCustomHeaders NotificationDestinationAuthCustomHeaderArrayOutput `pulumi:"authCustomHeaders"`
	// A nested block that describes a token authentication credentials. Only one authToken block is permitted per notification destination definition.  See Nested authToken blocks below for details.
	AuthToken NotificationDestinationAuthTokenPtrOutput `pulumi:"authToken"`
	// The unique entity identifier of the destination in New Relic.
	Guid pulumi.StringOutput `pulumi:"guid"`
	// The last time a notification was sent.
	LastSent pulumi.StringOutput `pulumi:"lastSent"`
	// The name of the destination.
	Name pulumi.StringOutput `pulumi:"name"`
	// A nested block that describes a notification destination property. See Nested property blocks below for details.
	Properties NotificationDestinationPropertyArrayOutput `pulumi:"properties"`
	// A nested block that describes a URL that contains sensitive data at the path or parameters. Only one secureUrl block is permitted per notification destination definition. See Nested secureUrl blocks below for details.
	SecureUrl NotificationDestinationSecureUrlPtrOutput `pulumi:"secureUrl"`
	// The status of the destination.
	Status pulumi.StringOutput `pulumi:"status"`
	// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
	// PAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY, MOBILE_PUSH, EVENT_BRIDGE).
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNotificationDestination registers a new resource with the given unique name, arguments, and options.
func NewNotificationDestination(ctx *pulumi.Context,
	name string, args *NotificationDestinationArgs, opts ...pulumi.ResourceOption) (*NotificationDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NotificationDestination
	err := ctx.RegisterResource("newrelic:index/notificationDestination:NotificationDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationDestination gets an existing NotificationDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationDestinationState, opts ...pulumi.ResourceOption) (*NotificationDestination, error) {
	var resource NotificationDestination
	err := ctx.ReadResource("newrelic:index/notificationDestination:NotificationDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationDestination resources.
type notificationDestinationState struct {
	// Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// Indicates whether the destination is active.
	Active *bool `pulumi:"active"`
	// A nested block that describes a basic username and password authentication credentials. Only one authBasic block is permitted per notification destination definition.  See Nested authBasic blocks below for details.
	AuthBasic *NotificationDestinationAuthBasic `pulumi:"authBasic"`
	// A nested block that describes a custom header authentication credentials. Multiple blocks are permitted per notification destination definition. Nested authCustomHeader blocks below for details.
	AuthCustomHeaders []NotificationDestinationAuthCustomHeader `pulumi:"authCustomHeaders"`
	// A nested block that describes a token authentication credentials. Only one authToken block is permitted per notification destination definition.  See Nested authToken blocks below for details.
	AuthToken *NotificationDestinationAuthToken `pulumi:"authToken"`
	// The unique entity identifier of the destination in New Relic.
	Guid *string `pulumi:"guid"`
	// The last time a notification was sent.
	LastSent *string `pulumi:"lastSent"`
	// The name of the destination.
	Name *string `pulumi:"name"`
	// A nested block that describes a notification destination property. See Nested property blocks below for details.
	Properties []NotificationDestinationProperty `pulumi:"properties"`
	// A nested block that describes a URL that contains sensitive data at the path or parameters. Only one secureUrl block is permitted per notification destination definition. See Nested secureUrl blocks below for details.
	SecureUrl *NotificationDestinationSecureUrl `pulumi:"secureUrl"`
	// The status of the destination.
	Status *string `pulumi:"status"`
	// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
	// PAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY, MOBILE_PUSH, EVENT_BRIDGE).
	Type *string `pulumi:"type"`
}

type NotificationDestinationState struct {
	// Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput
	// Indicates whether the destination is active.
	Active pulumi.BoolPtrInput
	// A nested block that describes a basic username and password authentication credentials. Only one authBasic block is permitted per notification destination definition.  See Nested authBasic blocks below for details.
	AuthBasic NotificationDestinationAuthBasicPtrInput
	// A nested block that describes a custom header authentication credentials. Multiple blocks are permitted per notification destination definition. Nested authCustomHeader blocks below for details.
	AuthCustomHeaders NotificationDestinationAuthCustomHeaderArrayInput
	// A nested block that describes a token authentication credentials. Only one authToken block is permitted per notification destination definition.  See Nested authToken blocks below for details.
	AuthToken NotificationDestinationAuthTokenPtrInput
	// The unique entity identifier of the destination in New Relic.
	Guid pulumi.StringPtrInput
	// The last time a notification was sent.
	LastSent pulumi.StringPtrInput
	// The name of the destination.
	Name pulumi.StringPtrInput
	// A nested block that describes a notification destination property. See Nested property blocks below for details.
	Properties NotificationDestinationPropertyArrayInput
	// A nested block that describes a URL that contains sensitive data at the path or parameters. Only one secureUrl block is permitted per notification destination definition. See Nested secureUrl blocks below for details.
	SecureUrl NotificationDestinationSecureUrlPtrInput
	// The status of the destination.
	Status pulumi.StringPtrInput
	// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
	// PAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY, MOBILE_PUSH, EVENT_BRIDGE).
	Type pulumi.StringPtrInput
}

func (NotificationDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationDestinationState)(nil)).Elem()
}

type notificationDestinationArgs struct {
	// Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// Indicates whether the destination is active.
	Active *bool `pulumi:"active"`
	// A nested block that describes a basic username and password authentication credentials. Only one authBasic block is permitted per notification destination definition.  See Nested authBasic blocks below for details.
	AuthBasic *NotificationDestinationAuthBasic `pulumi:"authBasic"`
	// A nested block that describes a custom header authentication credentials. Multiple blocks are permitted per notification destination definition. Nested authCustomHeader blocks below for details.
	AuthCustomHeaders []NotificationDestinationAuthCustomHeader `pulumi:"authCustomHeaders"`
	// A nested block that describes a token authentication credentials. Only one authToken block is permitted per notification destination definition.  See Nested authToken blocks below for details.
	AuthToken *NotificationDestinationAuthToken `pulumi:"authToken"`
	// The name of the destination.
	Name *string `pulumi:"name"`
	// A nested block that describes a notification destination property. See Nested property blocks below for details.
	Properties []NotificationDestinationProperty `pulumi:"properties"`
	// A nested block that describes a URL that contains sensitive data at the path or parameters. Only one secureUrl block is permitted per notification destination definition. See Nested secureUrl blocks below for details.
	SecureUrl *NotificationDestinationSecureUrl `pulumi:"secureUrl"`
	// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
	// PAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY, MOBILE_PUSH, EVENT_BRIDGE).
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a NotificationDestination resource.
type NotificationDestinationArgs struct {
	// Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput
	// Indicates whether the destination is active.
	Active pulumi.BoolPtrInput
	// A nested block that describes a basic username and password authentication credentials. Only one authBasic block is permitted per notification destination definition.  See Nested authBasic blocks below for details.
	AuthBasic NotificationDestinationAuthBasicPtrInput
	// A nested block that describes a custom header authentication credentials. Multiple blocks are permitted per notification destination definition. Nested authCustomHeader blocks below for details.
	AuthCustomHeaders NotificationDestinationAuthCustomHeaderArrayInput
	// A nested block that describes a token authentication credentials. Only one authToken block is permitted per notification destination definition.  See Nested authToken blocks below for details.
	AuthToken NotificationDestinationAuthTokenPtrInput
	// The name of the destination.
	Name pulumi.StringPtrInput
	// A nested block that describes a notification destination property. See Nested property blocks below for details.
	Properties NotificationDestinationPropertyArrayInput
	// A nested block that describes a URL that contains sensitive data at the path or parameters. Only one secureUrl block is permitted per notification destination definition. See Nested secureUrl blocks below for details.
	SecureUrl NotificationDestinationSecureUrlPtrInput
	// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
	// PAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY, MOBILE_PUSH, EVENT_BRIDGE).
	Type pulumi.StringInput
}

func (NotificationDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationDestinationArgs)(nil)).Elem()
}

type NotificationDestinationInput interface {
	pulumi.Input

	ToNotificationDestinationOutput() NotificationDestinationOutput
	ToNotificationDestinationOutputWithContext(ctx context.Context) NotificationDestinationOutput
}

func (*NotificationDestination) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationDestination)(nil)).Elem()
}

func (i *NotificationDestination) ToNotificationDestinationOutput() NotificationDestinationOutput {
	return i.ToNotificationDestinationOutputWithContext(context.Background())
}

func (i *NotificationDestination) ToNotificationDestinationOutputWithContext(ctx context.Context) NotificationDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationDestinationOutput)
}

// NotificationDestinationArrayInput is an input type that accepts NotificationDestinationArray and NotificationDestinationArrayOutput values.
// You can construct a concrete instance of `NotificationDestinationArrayInput` via:
//
//	NotificationDestinationArray{ NotificationDestinationArgs{...} }
type NotificationDestinationArrayInput interface {
	pulumi.Input

	ToNotificationDestinationArrayOutput() NotificationDestinationArrayOutput
	ToNotificationDestinationArrayOutputWithContext(context.Context) NotificationDestinationArrayOutput
}

type NotificationDestinationArray []NotificationDestinationInput

func (NotificationDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationDestination)(nil)).Elem()
}

func (i NotificationDestinationArray) ToNotificationDestinationArrayOutput() NotificationDestinationArrayOutput {
	return i.ToNotificationDestinationArrayOutputWithContext(context.Background())
}

func (i NotificationDestinationArray) ToNotificationDestinationArrayOutputWithContext(ctx context.Context) NotificationDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationDestinationArrayOutput)
}

// NotificationDestinationMapInput is an input type that accepts NotificationDestinationMap and NotificationDestinationMapOutput values.
// You can construct a concrete instance of `NotificationDestinationMapInput` via:
//
//	NotificationDestinationMap{ "key": NotificationDestinationArgs{...} }
type NotificationDestinationMapInput interface {
	pulumi.Input

	ToNotificationDestinationMapOutput() NotificationDestinationMapOutput
	ToNotificationDestinationMapOutputWithContext(context.Context) NotificationDestinationMapOutput
}

type NotificationDestinationMap map[string]NotificationDestinationInput

func (NotificationDestinationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationDestination)(nil)).Elem()
}

func (i NotificationDestinationMap) ToNotificationDestinationMapOutput() NotificationDestinationMapOutput {
	return i.ToNotificationDestinationMapOutputWithContext(context.Background())
}

func (i NotificationDestinationMap) ToNotificationDestinationMapOutputWithContext(ctx context.Context) NotificationDestinationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationDestinationMapOutput)
}

type NotificationDestinationOutput struct{ *pulumi.OutputState }

func (NotificationDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationDestination)(nil)).Elem()
}

func (o NotificationDestinationOutput) ToNotificationDestinationOutput() NotificationDestinationOutput {
	return o
}

func (o NotificationDestinationOutput) ToNotificationDestinationOutputWithContext(ctx context.Context) NotificationDestinationOutput {
	return o
}

// Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.
func (o NotificationDestinationOutput) AccountId() pulumi.IntOutput {
	return o.ApplyT(func(v *NotificationDestination) pulumi.IntOutput { return v.AccountId }).(pulumi.IntOutput)
}

// Indicates whether the destination is active.
func (o NotificationDestinationOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NotificationDestination) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// A nested block that describes a basic username and password authentication credentials. Only one authBasic block is permitted per notification destination definition.  See Nested authBasic blocks below for details.
func (o NotificationDestinationOutput) AuthBasic() NotificationDestinationAuthBasicPtrOutput {
	return o.ApplyT(func(v *NotificationDestination) NotificationDestinationAuthBasicPtrOutput { return v.AuthBasic }).(NotificationDestinationAuthBasicPtrOutput)
}

// A nested block that describes a custom header authentication credentials. Multiple blocks are permitted per notification destination definition. Nested authCustomHeader blocks below for details.
func (o NotificationDestinationOutput) AuthCustomHeaders() NotificationDestinationAuthCustomHeaderArrayOutput {
	return o.ApplyT(func(v *NotificationDestination) NotificationDestinationAuthCustomHeaderArrayOutput {
		return v.AuthCustomHeaders
	}).(NotificationDestinationAuthCustomHeaderArrayOutput)
}

// A nested block that describes a token authentication credentials. Only one authToken block is permitted per notification destination definition.  See Nested authToken blocks below for details.
func (o NotificationDestinationOutput) AuthToken() NotificationDestinationAuthTokenPtrOutput {
	return o.ApplyT(func(v *NotificationDestination) NotificationDestinationAuthTokenPtrOutput { return v.AuthToken }).(NotificationDestinationAuthTokenPtrOutput)
}

// The unique entity identifier of the destination in New Relic.
func (o NotificationDestinationOutput) Guid() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationDestination) pulumi.StringOutput { return v.Guid }).(pulumi.StringOutput)
}

// The last time a notification was sent.
func (o NotificationDestinationOutput) LastSent() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationDestination) pulumi.StringOutput { return v.LastSent }).(pulumi.StringOutput)
}

// The name of the destination.
func (o NotificationDestinationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationDestination) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A nested block that describes a notification destination property. See Nested property blocks below for details.
func (o NotificationDestinationOutput) Properties() NotificationDestinationPropertyArrayOutput {
	return o.ApplyT(func(v *NotificationDestination) NotificationDestinationPropertyArrayOutput { return v.Properties }).(NotificationDestinationPropertyArrayOutput)
}

// A nested block that describes a URL that contains sensitive data at the path or parameters. Only one secureUrl block is permitted per notification destination definition. See Nested secureUrl blocks below for details.
func (o NotificationDestinationOutput) SecureUrl() NotificationDestinationSecureUrlPtrOutput {
	return o.ApplyT(func(v *NotificationDestination) NotificationDestinationSecureUrlPtrOutput { return v.SecureUrl }).(NotificationDestinationSecureUrlPtrOutput)
}

// The status of the destination.
func (o NotificationDestinationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationDestination) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
// PAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY, MOBILE_PUSH, EVENT_BRIDGE).
func (o NotificationDestinationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationDestination) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NotificationDestinationArrayOutput struct{ *pulumi.OutputState }

func (NotificationDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationDestination)(nil)).Elem()
}

func (o NotificationDestinationArrayOutput) ToNotificationDestinationArrayOutput() NotificationDestinationArrayOutput {
	return o
}

func (o NotificationDestinationArrayOutput) ToNotificationDestinationArrayOutputWithContext(ctx context.Context) NotificationDestinationArrayOutput {
	return o
}

func (o NotificationDestinationArrayOutput) Index(i pulumi.IntInput) NotificationDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotificationDestination {
		return vs[0].([]*NotificationDestination)[vs[1].(int)]
	}).(NotificationDestinationOutput)
}

type NotificationDestinationMapOutput struct{ *pulumi.OutputState }

func (NotificationDestinationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationDestination)(nil)).Elem()
}

func (o NotificationDestinationMapOutput) ToNotificationDestinationMapOutput() NotificationDestinationMapOutput {
	return o
}

func (o NotificationDestinationMapOutput) ToNotificationDestinationMapOutputWithContext(ctx context.Context) NotificationDestinationMapOutput {
	return o
}

func (o NotificationDestinationMapOutput) MapIndex(k pulumi.StringInput) NotificationDestinationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotificationDestination {
		return vs[0].(map[string]*NotificationDestination)[vs[1].(string)]
	}).(NotificationDestinationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationDestinationInput)(nil)).Elem(), &NotificationDestination{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationDestinationArrayInput)(nil)).Elem(), NotificationDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationDestinationMapInput)(nil)).Elem(), NotificationDestinationMap{})
	pulumi.RegisterOutputType(NotificationDestinationOutput{})
	pulumi.RegisterOutputType(NotificationDestinationArrayOutput{})
	pulumi.RegisterOutputType(NotificationDestinationMapOutput{})
}
