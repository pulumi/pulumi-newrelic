// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to create and manage New Relic notification destinations.
//
// ## Example Usage
//
// ##### Webhook
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v4/go/newrelic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := newrelic.NewNotificationDestination(ctx, "foo", &newrelic.NotificationDestinationArgs{
//				Auth: pulumi.StringMap{
//					"password": pulumi.String("1234"),
//					"type":     pulumi.String("BASIC"),
//					"user":     pulumi.String("user"),
//				},
//				Properties: NotificationDestinationPropertyArray{
//					&NotificationDestinationPropertyArgs{
//						Key:   pulumi.String("url"),
//						Value: pulumi.String("https://webhook.site/"),
//					},
//				},
//				Type: pulumi.String("WEBHOOK"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// See additional examples.
// ## Additional Examples
//
// ##### ServiceNow
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v4/go/newrelic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := newrelic.NewNotificationDestination(ctx, "foo", &newrelic.NotificationDestinationArgs{
//				Auth: pulumi.StringMap{
//					"password": pulumi.String("pass"),
//					"type":     pulumi.String("BASIC"),
//					"user":     pulumi.String("user"),
//				},
//				Properties: NotificationDestinationPropertyArray{
//					&NotificationDestinationPropertyArgs{
//						Key:   pulumi.String("url"),
//						Value: pulumi.String("https://service-now.com/"),
//					},
//					&NotificationDestinationPropertyArgs{
//						Key:   pulumi.String("two_way_integration"),
//						Value: pulumi.String("true"),
//					},
//				},
//				Type: pulumi.String("SERVICE_NOW"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ##### Email
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v4/go/newrelic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := newrelic.NewNotificationDestination(ctx, "foo", &newrelic.NotificationDestinationArgs{
//				Auth: pulumi.StringMap{
//					"prefix": pulumi.String("prefix"),
//					"token":  pulumi.String("bearer"),
//					"type":   pulumi.String("TOKEN"),
//				},
//				Properties: NotificationDestinationPropertyArray{
//					&NotificationDestinationPropertyArgs{
//						Key:   pulumi.String("email"),
//						Value: pulumi.String("email@email.com,email2@email.com"),
//					},
//				},
//				Type: pulumi.String("EMAIL"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ##### PagerDuty with service integration
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v4/go/newrelic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := newrelic.NewNotificationDestination(ctx, "foo", &newrelic.NotificationDestinationArgs{
//				Auth: pulumi.StringMap{
//					"prefix": pulumi.String("prefix"),
//					"token":  pulumi.String("bearer"),
//					"type":   pulumi.String("TOKEN"),
//				},
//				Properties: NotificationDestinationPropertyArray{
//					&NotificationDestinationPropertyArgs{
//						Key:   pulumi.String("two_way_integration"),
//						Value: pulumi.String("true"),
//					},
//				},
//				Type: pulumi.String("PAGERDUTY_SERVICE_INTEGRATION"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ##### PagerDuty with account integration
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v4/go/newrelic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := newrelic.NewNotificationDestination(ctx, "foo", &newrelic.NotificationDestinationArgs{
//				Auth: pulumi.StringMap{
//					"prefix": pulumi.String("prefix"),
//					"token":  pulumi.String("bearer"),
//					"type":   pulumi.String("TOKEN"),
//				},
//				Type: pulumi.String("PAGERDUTY_ACCOUNT_INTEGRATION"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// > **NOTE:** Sensitive data such as destination API keys, service keys, etc are not returned from the underlying API for security reasons and may not be set in state when importing.
type NotificationDestination struct {
	pulumi.CustomResourceState

	// A nested block that describes a notification destination authentication. Only one auth block is permitted per notification destination definition.  See Nested auth blocks below for details.
	Auth pulumi.StringMapOutput `pulumi:"auth"`
	// The name of the destination.
	Name pulumi.StringOutput `pulumi:"name"`
	// A nested block that describes a notification destination properties.  Only one properties block is permitted per notification destination definition.  See Nested properties blocks below for details.
	Properties NotificationDestinationPropertyArrayOutput `pulumi:"properties"`
	// The type of the auth.  One of: `TOKEN` or `BASIC`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNotificationDestination registers a new resource with the given unique name, arguments, and options.
func NewNotificationDestination(ctx *pulumi.Context,
	name string, args *NotificationDestinationArgs, opts ...pulumi.ResourceOption) (*NotificationDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource NotificationDestination
	err := ctx.RegisterResource("newrelic:index/notificationDestination:NotificationDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationDestination gets an existing NotificationDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationDestinationState, opts ...pulumi.ResourceOption) (*NotificationDestination, error) {
	var resource NotificationDestination
	err := ctx.ReadResource("newrelic:index/notificationDestination:NotificationDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationDestination resources.
type notificationDestinationState struct {
	// A nested block that describes a notification destination authentication. Only one auth block is permitted per notification destination definition.  See Nested auth blocks below for details.
	Auth map[string]string `pulumi:"auth"`
	// The name of the destination.
	Name *string `pulumi:"name"`
	// A nested block that describes a notification destination properties.  Only one properties block is permitted per notification destination definition.  See Nested properties blocks below for details.
	Properties []NotificationDestinationProperty `pulumi:"properties"`
	// The type of the auth.  One of: `TOKEN` or `BASIC`.
	Type *string `pulumi:"type"`
}

type NotificationDestinationState struct {
	// A nested block that describes a notification destination authentication. Only one auth block is permitted per notification destination definition.  See Nested auth blocks below for details.
	Auth pulumi.StringMapInput
	// The name of the destination.
	Name pulumi.StringPtrInput
	// A nested block that describes a notification destination properties.  Only one properties block is permitted per notification destination definition.  See Nested properties blocks below for details.
	Properties NotificationDestinationPropertyArrayInput
	// The type of the auth.  One of: `TOKEN` or `BASIC`.
	Type pulumi.StringPtrInput
}

func (NotificationDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationDestinationState)(nil)).Elem()
}

type notificationDestinationArgs struct {
	// A nested block that describes a notification destination authentication. Only one auth block is permitted per notification destination definition.  See Nested auth blocks below for details.
	Auth map[string]string `pulumi:"auth"`
	// The name of the destination.
	Name *string `pulumi:"name"`
	// A nested block that describes a notification destination properties.  Only one properties block is permitted per notification destination definition.  See Nested properties blocks below for details.
	Properties []NotificationDestinationProperty `pulumi:"properties"`
	// The type of the auth.  One of: `TOKEN` or `BASIC`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a NotificationDestination resource.
type NotificationDestinationArgs struct {
	// A nested block that describes a notification destination authentication. Only one auth block is permitted per notification destination definition.  See Nested auth blocks below for details.
	Auth pulumi.StringMapInput
	// The name of the destination.
	Name pulumi.StringPtrInput
	// A nested block that describes a notification destination properties.  Only one properties block is permitted per notification destination definition.  See Nested properties blocks below for details.
	Properties NotificationDestinationPropertyArrayInput
	// The type of the auth.  One of: `TOKEN` or `BASIC`.
	Type pulumi.StringInput
}

func (NotificationDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationDestinationArgs)(nil)).Elem()
}

type NotificationDestinationInput interface {
	pulumi.Input

	ToNotificationDestinationOutput() NotificationDestinationOutput
	ToNotificationDestinationOutputWithContext(ctx context.Context) NotificationDestinationOutput
}

func (*NotificationDestination) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationDestination)(nil)).Elem()
}

func (i *NotificationDestination) ToNotificationDestinationOutput() NotificationDestinationOutput {
	return i.ToNotificationDestinationOutputWithContext(context.Background())
}

func (i *NotificationDestination) ToNotificationDestinationOutputWithContext(ctx context.Context) NotificationDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationDestinationOutput)
}

// NotificationDestinationArrayInput is an input type that accepts NotificationDestinationArray and NotificationDestinationArrayOutput values.
// You can construct a concrete instance of `NotificationDestinationArrayInput` via:
//
//	NotificationDestinationArray{ NotificationDestinationArgs{...} }
type NotificationDestinationArrayInput interface {
	pulumi.Input

	ToNotificationDestinationArrayOutput() NotificationDestinationArrayOutput
	ToNotificationDestinationArrayOutputWithContext(context.Context) NotificationDestinationArrayOutput
}

type NotificationDestinationArray []NotificationDestinationInput

func (NotificationDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationDestination)(nil)).Elem()
}

func (i NotificationDestinationArray) ToNotificationDestinationArrayOutput() NotificationDestinationArrayOutput {
	return i.ToNotificationDestinationArrayOutputWithContext(context.Background())
}

func (i NotificationDestinationArray) ToNotificationDestinationArrayOutputWithContext(ctx context.Context) NotificationDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationDestinationArrayOutput)
}

// NotificationDestinationMapInput is an input type that accepts NotificationDestinationMap and NotificationDestinationMapOutput values.
// You can construct a concrete instance of `NotificationDestinationMapInput` via:
//
//	NotificationDestinationMap{ "key": NotificationDestinationArgs{...} }
type NotificationDestinationMapInput interface {
	pulumi.Input

	ToNotificationDestinationMapOutput() NotificationDestinationMapOutput
	ToNotificationDestinationMapOutputWithContext(context.Context) NotificationDestinationMapOutput
}

type NotificationDestinationMap map[string]NotificationDestinationInput

func (NotificationDestinationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationDestination)(nil)).Elem()
}

func (i NotificationDestinationMap) ToNotificationDestinationMapOutput() NotificationDestinationMapOutput {
	return i.ToNotificationDestinationMapOutputWithContext(context.Background())
}

func (i NotificationDestinationMap) ToNotificationDestinationMapOutputWithContext(ctx context.Context) NotificationDestinationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationDestinationMapOutput)
}

type NotificationDestinationOutput struct{ *pulumi.OutputState }

func (NotificationDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationDestination)(nil)).Elem()
}

func (o NotificationDestinationOutput) ToNotificationDestinationOutput() NotificationDestinationOutput {
	return o
}

func (o NotificationDestinationOutput) ToNotificationDestinationOutputWithContext(ctx context.Context) NotificationDestinationOutput {
	return o
}

// A nested block that describes a notification destination authentication. Only one auth block is permitted per notification destination definition.  See Nested auth blocks below for details.
func (o NotificationDestinationOutput) Auth() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NotificationDestination) pulumi.StringMapOutput { return v.Auth }).(pulumi.StringMapOutput)
}

// The name of the destination.
func (o NotificationDestinationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationDestination) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A nested block that describes a notification destination properties.  Only one properties block is permitted per notification destination definition.  See Nested properties blocks below for details.
func (o NotificationDestinationOutput) Properties() NotificationDestinationPropertyArrayOutput {
	return o.ApplyT(func(v *NotificationDestination) NotificationDestinationPropertyArrayOutput { return v.Properties }).(NotificationDestinationPropertyArrayOutput)
}

// The type of the auth.  One of: `TOKEN` or `BASIC`.
func (o NotificationDestinationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationDestination) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NotificationDestinationArrayOutput struct{ *pulumi.OutputState }

func (NotificationDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationDestination)(nil)).Elem()
}

func (o NotificationDestinationArrayOutput) ToNotificationDestinationArrayOutput() NotificationDestinationArrayOutput {
	return o
}

func (o NotificationDestinationArrayOutput) ToNotificationDestinationArrayOutputWithContext(ctx context.Context) NotificationDestinationArrayOutput {
	return o
}

func (o NotificationDestinationArrayOutput) Index(i pulumi.IntInput) NotificationDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotificationDestination {
		return vs[0].([]*NotificationDestination)[vs[1].(int)]
	}).(NotificationDestinationOutput)
}

type NotificationDestinationMapOutput struct{ *pulumi.OutputState }

func (NotificationDestinationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationDestination)(nil)).Elem()
}

func (o NotificationDestinationMapOutput) ToNotificationDestinationMapOutput() NotificationDestinationMapOutput {
	return o
}

func (o NotificationDestinationMapOutput) ToNotificationDestinationMapOutputWithContext(ctx context.Context) NotificationDestinationMapOutput {
	return o
}

func (o NotificationDestinationMapOutput) MapIndex(k pulumi.StringInput) NotificationDestinationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotificationDestination {
		return vs[0].(map[string]*NotificationDestination)[vs[1].(string)]
	}).(NotificationDestinationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationDestinationInput)(nil)).Elem(), &NotificationDestination{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationDestinationArrayInput)(nil)).Elem(), NotificationDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationDestinationMapInput)(nil)).Elem(), NotificationDestinationMap{})
	pulumi.RegisterOutputType(NotificationDestinationOutput{})
	pulumi.RegisterOutputType(NotificationDestinationArrayOutput{})
	pulumi.RegisterOutputType(NotificationDestinationMapOutput{})
}
