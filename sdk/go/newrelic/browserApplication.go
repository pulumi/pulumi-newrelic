// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// A browser application can be imported using its GUID, i.e.
//
// bash
//
// ```sh
// $ pulumi import newrelic:index/browserApplication:BrowserApplication foo <GUID>
// ```
type BrowserApplication struct {
	pulumi.CustomResourceState

	// The account ID of the New Relic account you wish to create the browser application in. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` if not specified.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The application ID of the browser application (not to be confused with GUID).
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Configures cookies. Defaults to `true`, if not specified.
	CookiesEnabled pulumi.BoolPtrOutput `pulumi:"cookiesEnabled"`
	// Configures distributed tracing in browser apps. Defaults to `true`, if not specified.
	DistributedTracingEnabled pulumi.BoolPtrOutput `pulumi:"distributedTracingEnabled"`
	// The GUID of the browser application.
	Guid pulumi.StringOutput `pulumi:"guid"`
	// The JavaScript configuration of the browser application, encoded into a string.
	JsConfig pulumi.StringOutput `pulumi:"jsConfig"`
	// Determines the browser loader configured. Valid values are `SPA`, `PRO`, and `LITE`. The default is `SPA`. Refer to the [browser agent loader documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for more information on valid loader types.
	LoaderType pulumi.StringPtrOutput `pulumi:"loaderType"`
	// The name of the browser application.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewBrowserApplication registers a new resource with the given unique name, arguments, and options.
func NewBrowserApplication(ctx *pulumi.Context,
	name string, args *BrowserApplicationArgs, opts ...pulumi.ResourceOption) (*BrowserApplication, error) {
	if args == nil {
		args = &BrowserApplicationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BrowserApplication
	err := ctx.RegisterResource("newrelic:index/browserApplication:BrowserApplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBrowserApplication gets an existing BrowserApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBrowserApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrowserApplicationState, opts ...pulumi.ResourceOption) (*BrowserApplication, error) {
	var resource BrowserApplication
	err := ctx.ReadResource("newrelic:index/browserApplication:BrowserApplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BrowserApplication resources.
type browserApplicationState struct {
	// The account ID of the New Relic account you wish to create the browser application in. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` if not specified.
	AccountId *string `pulumi:"accountId"`
	// The application ID of the browser application (not to be confused with GUID).
	ApplicationId *string `pulumi:"applicationId"`
	// Configures cookies. Defaults to `true`, if not specified.
	CookiesEnabled *bool `pulumi:"cookiesEnabled"`
	// Configures distributed tracing in browser apps. Defaults to `true`, if not specified.
	DistributedTracingEnabled *bool `pulumi:"distributedTracingEnabled"`
	// The GUID of the browser application.
	Guid *string `pulumi:"guid"`
	// The JavaScript configuration of the browser application, encoded into a string.
	JsConfig *string `pulumi:"jsConfig"`
	// Determines the browser loader configured. Valid values are `SPA`, `PRO`, and `LITE`. The default is `SPA`. Refer to the [browser agent loader documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for more information on valid loader types.
	LoaderType *string `pulumi:"loaderType"`
	// The name of the browser application.
	Name *string `pulumi:"name"`
}

type BrowserApplicationState struct {
	// The account ID of the New Relic account you wish to create the browser application in. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` if not specified.
	AccountId pulumi.StringPtrInput
	// The application ID of the browser application (not to be confused with GUID).
	ApplicationId pulumi.StringPtrInput
	// Configures cookies. Defaults to `true`, if not specified.
	CookiesEnabled pulumi.BoolPtrInput
	// Configures distributed tracing in browser apps. Defaults to `true`, if not specified.
	DistributedTracingEnabled pulumi.BoolPtrInput
	// The GUID of the browser application.
	Guid pulumi.StringPtrInput
	// The JavaScript configuration of the browser application, encoded into a string.
	JsConfig pulumi.StringPtrInput
	// Determines the browser loader configured. Valid values are `SPA`, `PRO`, and `LITE`. The default is `SPA`. Refer to the [browser agent loader documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for more information on valid loader types.
	LoaderType pulumi.StringPtrInput
	// The name of the browser application.
	Name pulumi.StringPtrInput
}

func (BrowserApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*browserApplicationState)(nil)).Elem()
}

type browserApplicationArgs struct {
	// The account ID of the New Relic account you wish to create the browser application in. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` if not specified.
	AccountId *string `pulumi:"accountId"`
	// Configures cookies. Defaults to `true`, if not specified.
	CookiesEnabled *bool `pulumi:"cookiesEnabled"`
	// Configures distributed tracing in browser apps. Defaults to `true`, if not specified.
	DistributedTracingEnabled *bool `pulumi:"distributedTracingEnabled"`
	// Determines the browser loader configured. Valid values are `SPA`, `PRO`, and `LITE`. The default is `SPA`. Refer to the [browser agent loader documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for more information on valid loader types.
	LoaderType *string `pulumi:"loaderType"`
	// The name of the browser application.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a BrowserApplication resource.
type BrowserApplicationArgs struct {
	// The account ID of the New Relic account you wish to create the browser application in. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` if not specified.
	AccountId pulumi.StringPtrInput
	// Configures cookies. Defaults to `true`, if not specified.
	CookiesEnabled pulumi.BoolPtrInput
	// Configures distributed tracing in browser apps. Defaults to `true`, if not specified.
	DistributedTracingEnabled pulumi.BoolPtrInput
	// Determines the browser loader configured. Valid values are `SPA`, `PRO`, and `LITE`. The default is `SPA`. Refer to the [browser agent loader documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for more information on valid loader types.
	LoaderType pulumi.StringPtrInput
	// The name of the browser application.
	Name pulumi.StringPtrInput
}

func (BrowserApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*browserApplicationArgs)(nil)).Elem()
}

type BrowserApplicationInput interface {
	pulumi.Input

	ToBrowserApplicationOutput() BrowserApplicationOutput
	ToBrowserApplicationOutputWithContext(ctx context.Context) BrowserApplicationOutput
}

func (*BrowserApplication) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserApplication)(nil)).Elem()
}

func (i *BrowserApplication) ToBrowserApplicationOutput() BrowserApplicationOutput {
	return i.ToBrowserApplicationOutputWithContext(context.Background())
}

func (i *BrowserApplication) ToBrowserApplicationOutputWithContext(ctx context.Context) BrowserApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserApplicationOutput)
}

// BrowserApplicationArrayInput is an input type that accepts BrowserApplicationArray and BrowserApplicationArrayOutput values.
// You can construct a concrete instance of `BrowserApplicationArrayInput` via:
//
//	BrowserApplicationArray{ BrowserApplicationArgs{...} }
type BrowserApplicationArrayInput interface {
	pulumi.Input

	ToBrowserApplicationArrayOutput() BrowserApplicationArrayOutput
	ToBrowserApplicationArrayOutputWithContext(context.Context) BrowserApplicationArrayOutput
}

type BrowserApplicationArray []BrowserApplicationInput

func (BrowserApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrowserApplication)(nil)).Elem()
}

func (i BrowserApplicationArray) ToBrowserApplicationArrayOutput() BrowserApplicationArrayOutput {
	return i.ToBrowserApplicationArrayOutputWithContext(context.Background())
}

func (i BrowserApplicationArray) ToBrowserApplicationArrayOutputWithContext(ctx context.Context) BrowserApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserApplicationArrayOutput)
}

// BrowserApplicationMapInput is an input type that accepts BrowserApplicationMap and BrowserApplicationMapOutput values.
// You can construct a concrete instance of `BrowserApplicationMapInput` via:
//
//	BrowserApplicationMap{ "key": BrowserApplicationArgs{...} }
type BrowserApplicationMapInput interface {
	pulumi.Input

	ToBrowserApplicationMapOutput() BrowserApplicationMapOutput
	ToBrowserApplicationMapOutputWithContext(context.Context) BrowserApplicationMapOutput
}

type BrowserApplicationMap map[string]BrowserApplicationInput

func (BrowserApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrowserApplication)(nil)).Elem()
}

func (i BrowserApplicationMap) ToBrowserApplicationMapOutput() BrowserApplicationMapOutput {
	return i.ToBrowserApplicationMapOutputWithContext(context.Background())
}

func (i BrowserApplicationMap) ToBrowserApplicationMapOutputWithContext(ctx context.Context) BrowserApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserApplicationMapOutput)
}

type BrowserApplicationOutput struct{ *pulumi.OutputState }

func (BrowserApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserApplication)(nil)).Elem()
}

func (o BrowserApplicationOutput) ToBrowserApplicationOutput() BrowserApplicationOutput {
	return o
}

func (o BrowserApplicationOutput) ToBrowserApplicationOutputWithContext(ctx context.Context) BrowserApplicationOutput {
	return o
}

// The account ID of the New Relic account you wish to create the browser application in. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` if not specified.
func (o BrowserApplicationOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserApplication) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The application ID of the browser application (not to be confused with GUID).
func (o BrowserApplicationOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserApplication) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Configures cookies. Defaults to `true`, if not specified.
func (o BrowserApplicationOutput) CookiesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrowserApplication) pulumi.BoolPtrOutput { return v.CookiesEnabled }).(pulumi.BoolPtrOutput)
}

// Configures distributed tracing in browser apps. Defaults to `true`, if not specified.
func (o BrowserApplicationOutput) DistributedTracingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrowserApplication) pulumi.BoolPtrOutput { return v.DistributedTracingEnabled }).(pulumi.BoolPtrOutput)
}

// The GUID of the browser application.
func (o BrowserApplicationOutput) Guid() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserApplication) pulumi.StringOutput { return v.Guid }).(pulumi.StringOutput)
}

// The JavaScript configuration of the browser application, encoded into a string.
func (o BrowserApplicationOutput) JsConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserApplication) pulumi.StringOutput { return v.JsConfig }).(pulumi.StringOutput)
}

// Determines the browser loader configured. Valid values are `SPA`, `PRO`, and `LITE`. The default is `SPA`. Refer to the [browser agent loader documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for more information on valid loader types.
func (o BrowserApplicationOutput) LoaderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrowserApplication) pulumi.StringPtrOutput { return v.LoaderType }).(pulumi.StringPtrOutput)
}

// The name of the browser application.
func (o BrowserApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserApplication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type BrowserApplicationArrayOutput struct{ *pulumi.OutputState }

func (BrowserApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrowserApplication)(nil)).Elem()
}

func (o BrowserApplicationArrayOutput) ToBrowserApplicationArrayOutput() BrowserApplicationArrayOutput {
	return o
}

func (o BrowserApplicationArrayOutput) ToBrowserApplicationArrayOutputWithContext(ctx context.Context) BrowserApplicationArrayOutput {
	return o
}

func (o BrowserApplicationArrayOutput) Index(i pulumi.IntInput) BrowserApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BrowserApplication {
		return vs[0].([]*BrowserApplication)[vs[1].(int)]
	}).(BrowserApplicationOutput)
}

type BrowserApplicationMapOutput struct{ *pulumi.OutputState }

func (BrowserApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrowserApplication)(nil)).Elem()
}

func (o BrowserApplicationMapOutput) ToBrowserApplicationMapOutput() BrowserApplicationMapOutput {
	return o
}

func (o BrowserApplicationMapOutput) ToBrowserApplicationMapOutputWithContext(ctx context.Context) BrowserApplicationMapOutput {
	return o
}

func (o BrowserApplicationMapOutput) MapIndex(k pulumi.StringInput) BrowserApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BrowserApplication {
		return vs[0].(map[string]*BrowserApplication)[vs[1].(string)]
	}).(BrowserApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserApplicationInput)(nil)).Elem(), &BrowserApplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserApplicationArrayInput)(nil)).Elem(), BrowserApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserApplicationMapInput)(nil)).Elem(), BrowserApplicationMap{})
	pulumi.RegisterOutputType(BrowserApplicationOutput{})
	pulumi.RegisterOutputType(BrowserApplicationArrayOutput{})
	pulumi.RegisterOutputType(BrowserApplicationMapOutput{})
}
