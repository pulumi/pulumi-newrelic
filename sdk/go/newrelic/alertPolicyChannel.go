// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Use this resource to map alert policies to alert channels in New Relic.
//
// ## Example Usage
//
// The example below will apply multiple alert channels to an existing New Relic alert policy.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := newrelic.LookupAlertPolicy(ctx, &newrelic.LookupAlertPolicyArgs{
// 			Name: "my-alert-policy",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		emailChannel, err := newrelic.NewAlertChannel(ctx, "emailChannel", &newrelic.AlertChannelArgs{
// 			Type: pulumi.String("email"),
// 			Config: &newrelic.AlertChannelConfigArgs{
// 				Recipients:            pulumi.String("foo@example.com"),
// 				IncludeJsonAttachment: pulumi.String("1"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		slackChannel, err := newrelic.NewAlertChannel(ctx, "slackChannel", &newrelic.AlertChannelArgs{
// 			Type: pulumi.String("slack"),
// 			Config: &newrelic.AlertChannelConfigArgs{
// 				Channel: pulumi.String("#example-channel"),
// 				Url:     pulumi.String("http://example-org.slack.com"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = newrelic.NewAlertPolicyChannel(ctx, "foo", &newrelic.AlertPolicyChannelArgs{
// 			PolicyId: pulumi.String(newrelic_alert_policy.Example_policy.Id),
// 			ChannelIds: pulumi.IntArray{
// 				emailChannel.ID(),
// 				slackChannel.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type AlertPolicyChannel struct {
	pulumi.CustomResourceState

	// Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid
	// drift your Terraform state.
	ChannelIds pulumi.IntArrayOutput `pulumi:"channelIds"`
	// The ID of the policy.
	PolicyId pulumi.IntOutput `pulumi:"policyId"`
}

// NewAlertPolicyChannel registers a new resource with the given unique name, arguments, and options.
func NewAlertPolicyChannel(ctx *pulumi.Context,
	name string, args *AlertPolicyChannelArgs, opts ...pulumi.ResourceOption) (*AlertPolicyChannel, error) {
	if args == nil || args.ChannelIds == nil {
		return nil, errors.New("missing required argument 'ChannelIds'")
	}
	if args == nil || args.PolicyId == nil {
		return nil, errors.New("missing required argument 'PolicyId'")
	}
	if args == nil {
		args = &AlertPolicyChannelArgs{}
	}
	var resource AlertPolicyChannel
	err := ctx.RegisterResource("newrelic:index/alertPolicyChannel:AlertPolicyChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertPolicyChannel gets an existing AlertPolicyChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertPolicyChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertPolicyChannelState, opts ...pulumi.ResourceOption) (*AlertPolicyChannel, error) {
	var resource AlertPolicyChannel
	err := ctx.ReadResource("newrelic:index/alertPolicyChannel:AlertPolicyChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertPolicyChannel resources.
type alertPolicyChannelState struct {
	// Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid
	// drift your Terraform state.
	ChannelIds []int `pulumi:"channelIds"`
	// The ID of the policy.
	PolicyId *int `pulumi:"policyId"`
}

type AlertPolicyChannelState struct {
	// Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid
	// drift your Terraform state.
	ChannelIds pulumi.IntArrayInput
	// The ID of the policy.
	PolicyId pulumi.IntPtrInput
}

func (AlertPolicyChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertPolicyChannelState)(nil)).Elem()
}

type alertPolicyChannelArgs struct {
	// Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid
	// drift your Terraform state.
	ChannelIds []int `pulumi:"channelIds"`
	// The ID of the policy.
	PolicyId int `pulumi:"policyId"`
}

// The set of arguments for constructing a AlertPolicyChannel resource.
type AlertPolicyChannelArgs struct {
	// Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid
	// drift your Terraform state.
	ChannelIds pulumi.IntArrayInput
	// The ID of the policy.
	PolicyId pulumi.IntInput
}

func (AlertPolicyChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertPolicyChannelArgs)(nil)).Elem()
}
