// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Use this resource to create, update, and delete tags for a New Relic One entity.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "APPLICATION"
// 		opt1 := "APM"
// 		fooEntity, err := newrelic.GetEntity(ctx, &newrelic.GetEntityArgs{
// 			Name:   "Example application",
// 			Type:   &opt0,
// 			Domain: &opt1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = newrelic.NewEntityTags(ctx, "fooEntityTags", &newrelic.EntityTagsArgs{
// 			Guid: pulumi.String(fooEntity.Guid),
// 			Tags: newrelic.EntityTagsTagArray{
// 				&newrelic.EntityTagsTagArgs{
// 					Key: pulumi.String("my-key"),
// 					Values: pulumi.StringArray{
// 						pulumi.String("my-value"),
// 						pulumi.String("my-other-value"),
// 					},
// 				},
// 				&newrelic.EntityTagsTagArgs{
// 					Key: pulumi.String("my-key-2"),
// 					Values: pulumi.StringArray{
// 						pulumi.String("my-value-2"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// New Relic One entity tags can be imported using a concatenated string of the format
//
// `<guid>`, e.g. bash
//
// ```sh
//  $ pulumi import newrelic:index/entityTags:EntityTags foo MjUyMDUyOHxBUE18QVBRTElDQVRJT058MjE1MDM3Nzk1
// ```
type EntityTags struct {
	pulumi.CustomResourceState

	// The guid of the entity to tag.
	Guid pulumi.StringOutput `pulumi:"guid"`
	// A nested block that describes an entity tag. See Nested tag blocks below for details.
	Tags EntityTagsTagArrayOutput `pulumi:"tags"`
}

// NewEntityTags registers a new resource with the given unique name, arguments, and options.
func NewEntityTags(ctx *pulumi.Context,
	name string, args *EntityTagsArgs, opts ...pulumi.ResourceOption) (*EntityTags, error) {
	if args == nil || args.Guid == nil {
		return nil, errors.New("missing required argument 'Guid'")
	}
	if args == nil || args.Tags == nil {
		return nil, errors.New("missing required argument 'Tags'")
	}
	if args == nil {
		args = &EntityTagsArgs{}
	}
	var resource EntityTags
	err := ctx.RegisterResource("newrelic:index/entityTags:EntityTags", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntityTags gets an existing EntityTags resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntityTags(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntityTagsState, opts ...pulumi.ResourceOption) (*EntityTags, error) {
	var resource EntityTags
	err := ctx.ReadResource("newrelic:index/entityTags:EntityTags", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EntityTags resources.
type entityTagsState struct {
	// The guid of the entity to tag.
	Guid *string `pulumi:"guid"`
	// A nested block that describes an entity tag. See Nested tag blocks below for details.
	Tags []EntityTagsTag `pulumi:"tags"`
}

type EntityTagsState struct {
	// The guid of the entity to tag.
	Guid pulumi.StringPtrInput
	// A nested block that describes an entity tag. See Nested tag blocks below for details.
	Tags EntityTagsTagArrayInput
}

func (EntityTagsState) ElementType() reflect.Type {
	return reflect.TypeOf((*entityTagsState)(nil)).Elem()
}

type entityTagsArgs struct {
	// The guid of the entity to tag.
	Guid string `pulumi:"guid"`
	// A nested block that describes an entity tag. See Nested tag blocks below for details.
	Tags []EntityTagsTag `pulumi:"tags"`
}

// The set of arguments for constructing a EntityTags resource.
type EntityTagsArgs struct {
	// The guid of the entity to tag.
	Guid pulumi.StringInput
	// A nested block that describes an entity tag. See Nested tag blocks below for details.
	Tags EntityTagsTagArrayInput
}

func (EntityTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entityTagsArgs)(nil)).Elem()
}

type EntityTagsInput interface {
	pulumi.Input

	ToEntityTagsOutput() EntityTagsOutput
	ToEntityTagsOutputWithContext(ctx context.Context) EntityTagsOutput
}

func (EntityTags) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityTags)(nil)).Elem()
}

func (i EntityTags) ToEntityTagsOutput() EntityTagsOutput {
	return i.ToEntityTagsOutputWithContext(context.Background())
}

func (i EntityTags) ToEntityTagsOutputWithContext(ctx context.Context) EntityTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityTagsOutput)
}

type EntityTagsOutput struct {
	*pulumi.OutputState
}

func (EntityTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityTagsOutput)(nil)).Elem()
}

func (o EntityTagsOutput) ToEntityTagsOutput() EntityTagsOutput {
	return o
}

func (o EntityTagsOutput) ToEntityTagsOutputWithContext(ctx context.Context) EntityTagsOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(EntityTagsOutput{})
}
