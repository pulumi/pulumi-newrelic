// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := newrelic.NewPipelineCloudRule(ctx, "foo", &newrelic.PipelineCloudRuleArgs{
//				AccountId:   pulumi.String("1000100"),
//				Name:        pulumi.String("Test Pipeline Cloud Rule"),
//				Description: pulumi.String("This rule deletes all DEBUG logs from the dev environment."),
//				Nrql:        pulumi.String("DELETE FROM Log WHERE logLevel = 'DEBUG' AND environment = 'dev'"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Pipeline Cloud Rules can be imported using the `id`. For example:
//
// bash
//
// ```sh
// $ pulumi import newrelic:index/pipelineCloudRule:PipelineCloudRule foo <id>
// ```
type PipelineCloudRule struct {
	pulumi.CustomResourceState

	// The account ID where the Pipeline Cloud Rule will be created.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Additional information about the rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the rule. This must be unique within an account.
	Name pulumi.StringOutput `pulumi:"name"`
	// The NRQL query that defines the data to be processed by this Pipeline Cloud Rule.
	Nrql pulumi.StringOutput `pulumi:"nrql"`
}

// NewPipelineCloudRule registers a new resource with the given unique name, arguments, and options.
func NewPipelineCloudRule(ctx *pulumi.Context,
	name string, args *PipelineCloudRuleArgs, opts ...pulumi.ResourceOption) (*PipelineCloudRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Nrql == nil {
		return nil, errors.New("invalid value for required argument 'Nrql'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PipelineCloudRule
	err := ctx.RegisterResource("newrelic:index/pipelineCloudRule:PipelineCloudRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipelineCloudRule gets an existing PipelineCloudRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipelineCloudRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineCloudRuleState, opts ...pulumi.ResourceOption) (*PipelineCloudRule, error) {
	var resource PipelineCloudRule
	err := ctx.ReadResource("newrelic:index/pipelineCloudRule:PipelineCloudRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PipelineCloudRule resources.
type pipelineCloudRuleState struct {
	// The account ID where the Pipeline Cloud Rule will be created.
	AccountId *string `pulumi:"accountId"`
	// Additional information about the rule.
	Description *string `pulumi:"description"`
	// The name of the rule. This must be unique within an account.
	Name *string `pulumi:"name"`
	// The NRQL query that defines the data to be processed by this Pipeline Cloud Rule.
	Nrql *string `pulumi:"nrql"`
}

type PipelineCloudRuleState struct {
	// The account ID where the Pipeline Cloud Rule will be created.
	AccountId pulumi.StringPtrInput
	// Additional information about the rule.
	Description pulumi.StringPtrInput
	// The name of the rule. This must be unique within an account.
	Name pulumi.StringPtrInput
	// The NRQL query that defines the data to be processed by this Pipeline Cloud Rule.
	Nrql pulumi.StringPtrInput
}

func (PipelineCloudRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineCloudRuleState)(nil)).Elem()
}

type pipelineCloudRuleArgs struct {
	// The account ID where the Pipeline Cloud Rule will be created.
	AccountId *string `pulumi:"accountId"`
	// Additional information about the rule.
	Description *string `pulumi:"description"`
	// The name of the rule. This must be unique within an account.
	Name *string `pulumi:"name"`
	// The NRQL query that defines the data to be processed by this Pipeline Cloud Rule.
	Nrql string `pulumi:"nrql"`
}

// The set of arguments for constructing a PipelineCloudRule resource.
type PipelineCloudRuleArgs struct {
	// The account ID where the Pipeline Cloud Rule will be created.
	AccountId pulumi.StringPtrInput
	// Additional information about the rule.
	Description pulumi.StringPtrInput
	// The name of the rule. This must be unique within an account.
	Name pulumi.StringPtrInput
	// The NRQL query that defines the data to be processed by this Pipeline Cloud Rule.
	Nrql pulumi.StringInput
}

func (PipelineCloudRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineCloudRuleArgs)(nil)).Elem()
}

type PipelineCloudRuleInput interface {
	pulumi.Input

	ToPipelineCloudRuleOutput() PipelineCloudRuleOutput
	ToPipelineCloudRuleOutputWithContext(ctx context.Context) PipelineCloudRuleOutput
}

func (*PipelineCloudRule) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineCloudRule)(nil)).Elem()
}

func (i *PipelineCloudRule) ToPipelineCloudRuleOutput() PipelineCloudRuleOutput {
	return i.ToPipelineCloudRuleOutputWithContext(context.Background())
}

func (i *PipelineCloudRule) ToPipelineCloudRuleOutputWithContext(ctx context.Context) PipelineCloudRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineCloudRuleOutput)
}

// PipelineCloudRuleArrayInput is an input type that accepts PipelineCloudRuleArray and PipelineCloudRuleArrayOutput values.
// You can construct a concrete instance of `PipelineCloudRuleArrayInput` via:
//
//	PipelineCloudRuleArray{ PipelineCloudRuleArgs{...} }
type PipelineCloudRuleArrayInput interface {
	pulumi.Input

	ToPipelineCloudRuleArrayOutput() PipelineCloudRuleArrayOutput
	ToPipelineCloudRuleArrayOutputWithContext(context.Context) PipelineCloudRuleArrayOutput
}

type PipelineCloudRuleArray []PipelineCloudRuleInput

func (PipelineCloudRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PipelineCloudRule)(nil)).Elem()
}

func (i PipelineCloudRuleArray) ToPipelineCloudRuleArrayOutput() PipelineCloudRuleArrayOutput {
	return i.ToPipelineCloudRuleArrayOutputWithContext(context.Background())
}

func (i PipelineCloudRuleArray) ToPipelineCloudRuleArrayOutputWithContext(ctx context.Context) PipelineCloudRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineCloudRuleArrayOutput)
}

// PipelineCloudRuleMapInput is an input type that accepts PipelineCloudRuleMap and PipelineCloudRuleMapOutput values.
// You can construct a concrete instance of `PipelineCloudRuleMapInput` via:
//
//	PipelineCloudRuleMap{ "key": PipelineCloudRuleArgs{...} }
type PipelineCloudRuleMapInput interface {
	pulumi.Input

	ToPipelineCloudRuleMapOutput() PipelineCloudRuleMapOutput
	ToPipelineCloudRuleMapOutputWithContext(context.Context) PipelineCloudRuleMapOutput
}

type PipelineCloudRuleMap map[string]PipelineCloudRuleInput

func (PipelineCloudRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PipelineCloudRule)(nil)).Elem()
}

func (i PipelineCloudRuleMap) ToPipelineCloudRuleMapOutput() PipelineCloudRuleMapOutput {
	return i.ToPipelineCloudRuleMapOutputWithContext(context.Background())
}

func (i PipelineCloudRuleMap) ToPipelineCloudRuleMapOutputWithContext(ctx context.Context) PipelineCloudRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineCloudRuleMapOutput)
}

type PipelineCloudRuleOutput struct{ *pulumi.OutputState }

func (PipelineCloudRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineCloudRule)(nil)).Elem()
}

func (o PipelineCloudRuleOutput) ToPipelineCloudRuleOutput() PipelineCloudRuleOutput {
	return o
}

func (o PipelineCloudRuleOutput) ToPipelineCloudRuleOutputWithContext(ctx context.Context) PipelineCloudRuleOutput {
	return o
}

// The account ID where the Pipeline Cloud Rule will be created.
func (o PipelineCloudRuleOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineCloudRule) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Additional information about the rule.
func (o PipelineCloudRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineCloudRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the rule. This must be unique within an account.
func (o PipelineCloudRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineCloudRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The NRQL query that defines the data to be processed by this Pipeline Cloud Rule.
func (o PipelineCloudRuleOutput) Nrql() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineCloudRule) pulumi.StringOutput { return v.Nrql }).(pulumi.StringOutput)
}

type PipelineCloudRuleArrayOutput struct{ *pulumi.OutputState }

func (PipelineCloudRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PipelineCloudRule)(nil)).Elem()
}

func (o PipelineCloudRuleArrayOutput) ToPipelineCloudRuleArrayOutput() PipelineCloudRuleArrayOutput {
	return o
}

func (o PipelineCloudRuleArrayOutput) ToPipelineCloudRuleArrayOutputWithContext(ctx context.Context) PipelineCloudRuleArrayOutput {
	return o
}

func (o PipelineCloudRuleArrayOutput) Index(i pulumi.IntInput) PipelineCloudRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PipelineCloudRule {
		return vs[0].([]*PipelineCloudRule)[vs[1].(int)]
	}).(PipelineCloudRuleOutput)
}

type PipelineCloudRuleMapOutput struct{ *pulumi.OutputState }

func (PipelineCloudRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PipelineCloudRule)(nil)).Elem()
}

func (o PipelineCloudRuleMapOutput) ToPipelineCloudRuleMapOutput() PipelineCloudRuleMapOutput {
	return o
}

func (o PipelineCloudRuleMapOutput) ToPipelineCloudRuleMapOutputWithContext(ctx context.Context) PipelineCloudRuleMapOutput {
	return o
}

func (o PipelineCloudRuleMapOutput) MapIndex(k pulumi.StringInput) PipelineCloudRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PipelineCloudRule {
		return vs[0].(map[string]*PipelineCloudRule)[vs[1].(string)]
	}).(PipelineCloudRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineCloudRuleInput)(nil)).Elem(), &PipelineCloudRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineCloudRuleArrayInput)(nil)).Elem(), PipelineCloudRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineCloudRuleMapInput)(nil)).Elem(), PipelineCloudRuleMap{})
	pulumi.RegisterOutputType(PipelineCloudRuleOutput{})
	pulumi.RegisterOutputType(PipelineCloudRuleArrayOutput{})
	pulumi.RegisterOutputType(PipelineCloudRuleMapOutput{})
}
