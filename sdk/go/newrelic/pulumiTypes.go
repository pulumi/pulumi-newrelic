// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AlertChannelConfig struct {
	// The API key for integrating with OpsGenie.
	ApiKey *string `pulumi:"apiKey"`
	// Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
	AuthPassword *string `pulumi:"authPassword"`
	// Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
	AuthType *string `pulumi:"authType"`
	// Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
	AuthUsername *string `pulumi:"authUsername"`
	// The base URL of the webhook destination.
	BaseUrl *string `pulumi:"baseUrl"`
	// The Slack channel to send notifications to.
	// * `opsgenie`
	Channel *string `pulumi:"channel"`
	// A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
	Headers map[string]string `pulumi:"headers"`
	// Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
	HeadersString *string `pulumi:"headersString"`
	// `true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
	// * `webhook`
	IncludeJsonAttachment *string `pulumi:"includeJsonAttachment"`
	// The key for integrating with VictorOps.
	Key *string `pulumi:"key"`
	// A map of key/value pairs that represents the webhook payload.  Must provide `payloadType` if setting this argument.
	Payload map[string]string `pulumi:"payload"`
	// Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
	PayloadString *string `pulumi:"payloadString"`
	// Can either be `application/json` or `application/x-www-form-urlencoded`. The `payloadType` argument is _required_ if `payload` is set.
	// * `pagerduty`
	PayloadType *string `pulumi:"payloadType"`
	// A set of recipients for targeting notifications.  Multiple values are comma separated.
	Recipients *string `pulumi:"recipients"`
	// The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
	Region *string `pulumi:"region"`
	// The route key for integrating with VictorOps.
	// * `slack`
	RouteKey *string `pulumi:"routeKey"`
	// Specifies the service key for integrating with Pagerduty.
	// * `victorops`
	ServiceKey *string `pulumi:"serviceKey"`
	// A set of tags for targeting notifications. Multiple values are comma separated.
	Tags *string `pulumi:"tags"`
	// A set of teams for targeting notifications. Multiple values are comma separated.
	Teams *string `pulumi:"teams"`
	// [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
	Url    *string `pulumi:"url"`
	UserId *string `pulumi:"userId"`
}

// AlertChannelConfigInput is an input type that accepts AlertChannelConfigArgs and AlertChannelConfigOutput values.
// You can construct a concrete instance of `AlertChannelConfigInput` via:
//
//          AlertChannelConfigArgs{...}
type AlertChannelConfigInput interface {
	pulumi.Input

	ToAlertChannelConfigOutput() AlertChannelConfigOutput
	ToAlertChannelConfigOutputWithContext(context.Context) AlertChannelConfigOutput
}

type AlertChannelConfigArgs struct {
	// The API key for integrating with OpsGenie.
	ApiKey pulumi.StringPtrInput `pulumi:"apiKey"`
	// Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
	AuthPassword pulumi.StringPtrInput `pulumi:"authPassword"`
	// Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
	AuthType pulumi.StringPtrInput `pulumi:"authType"`
	// Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
	AuthUsername pulumi.StringPtrInput `pulumi:"authUsername"`
	// The base URL of the webhook destination.
	BaseUrl pulumi.StringPtrInput `pulumi:"baseUrl"`
	// The Slack channel to send notifications to.
	// * `opsgenie`
	Channel pulumi.StringPtrInput `pulumi:"channel"`
	// A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
	HeadersString pulumi.StringPtrInput `pulumi:"headersString"`
	// `true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
	// * `webhook`
	IncludeJsonAttachment pulumi.StringPtrInput `pulumi:"includeJsonAttachment"`
	// The key for integrating with VictorOps.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// A map of key/value pairs that represents the webhook payload.  Must provide `payloadType` if setting this argument.
	Payload pulumi.StringMapInput `pulumi:"payload"`
	// Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
	PayloadString pulumi.StringPtrInput `pulumi:"payloadString"`
	// Can either be `application/json` or `application/x-www-form-urlencoded`. The `payloadType` argument is _required_ if `payload` is set.
	// * `pagerduty`
	PayloadType pulumi.StringPtrInput `pulumi:"payloadType"`
	// A set of recipients for targeting notifications.  Multiple values are comma separated.
	Recipients pulumi.StringPtrInput `pulumi:"recipients"`
	// The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The route key for integrating with VictorOps.
	// * `slack`
	RouteKey pulumi.StringPtrInput `pulumi:"routeKey"`
	// Specifies the service key for integrating with Pagerduty.
	// * `victorops`
	ServiceKey pulumi.StringPtrInput `pulumi:"serviceKey"`
	// A set of tags for targeting notifications. Multiple values are comma separated.
	Tags pulumi.StringPtrInput `pulumi:"tags"`
	// A set of teams for targeting notifications. Multiple values are comma separated.
	Teams pulumi.StringPtrInput `pulumi:"teams"`
	// [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
	Url    pulumi.StringPtrInput `pulumi:"url"`
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (AlertChannelConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelConfig)(nil)).Elem()
}

func (i AlertChannelConfigArgs) ToAlertChannelConfigOutput() AlertChannelConfigOutput {
	return i.ToAlertChannelConfigOutputWithContext(context.Background())
}

func (i AlertChannelConfigArgs) ToAlertChannelConfigOutputWithContext(ctx context.Context) AlertChannelConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelConfigOutput)
}

func (i AlertChannelConfigArgs) ToAlertChannelConfigPtrOutput() AlertChannelConfigPtrOutput {
	return i.ToAlertChannelConfigPtrOutputWithContext(context.Background())
}

func (i AlertChannelConfigArgs) ToAlertChannelConfigPtrOutputWithContext(ctx context.Context) AlertChannelConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelConfigOutput).ToAlertChannelConfigPtrOutputWithContext(ctx)
}

// AlertChannelConfigPtrInput is an input type that accepts AlertChannelConfigArgs, AlertChannelConfigPtr and AlertChannelConfigPtrOutput values.
// You can construct a concrete instance of `AlertChannelConfigPtrInput` via:
//
//          AlertChannelConfigArgs{...}
//
//  or:
//
//          nil
type AlertChannelConfigPtrInput interface {
	pulumi.Input

	ToAlertChannelConfigPtrOutput() AlertChannelConfigPtrOutput
	ToAlertChannelConfigPtrOutputWithContext(context.Context) AlertChannelConfigPtrOutput
}

type alertChannelConfigPtrType AlertChannelConfigArgs

func AlertChannelConfigPtr(v *AlertChannelConfigArgs) AlertChannelConfigPtrInput {
	return (*alertChannelConfigPtrType)(v)
}

func (*alertChannelConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelConfig)(nil)).Elem()
}

func (i *alertChannelConfigPtrType) ToAlertChannelConfigPtrOutput() AlertChannelConfigPtrOutput {
	return i.ToAlertChannelConfigPtrOutputWithContext(context.Background())
}

func (i *alertChannelConfigPtrType) ToAlertChannelConfigPtrOutputWithContext(ctx context.Context) AlertChannelConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelConfigPtrOutput)
}

type AlertChannelConfigOutput struct{ *pulumi.OutputState }

func (AlertChannelConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelConfig)(nil)).Elem()
}

func (o AlertChannelConfigOutput) ToAlertChannelConfigOutput() AlertChannelConfigOutput {
	return o
}

func (o AlertChannelConfigOutput) ToAlertChannelConfigOutputWithContext(ctx context.Context) AlertChannelConfigOutput {
	return o
}

func (o AlertChannelConfigOutput) ToAlertChannelConfigPtrOutput() AlertChannelConfigPtrOutput {
	return o.ToAlertChannelConfigPtrOutputWithContext(context.Background())
}

func (o AlertChannelConfigOutput) ToAlertChannelConfigPtrOutputWithContext(ctx context.Context) AlertChannelConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertChannelConfig) *AlertChannelConfig {
		return &v
	}).(AlertChannelConfigPtrOutput)
}

// The API key for integrating with OpsGenie.
func (o AlertChannelConfigOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
func (o AlertChannelConfigOutput) AuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.AuthPassword }).(pulumi.StringPtrOutput)
}

// Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
func (o AlertChannelConfigOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

// Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
func (o AlertChannelConfigOutput) AuthUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.AuthUsername }).(pulumi.StringPtrOutput)
}

// The base URL of the webhook destination.
func (o AlertChannelConfigOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// The Slack channel to send notifications to.
// * `opsgenie`
func (o AlertChannelConfigOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

// A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
func (o AlertChannelConfigOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertChannelConfig) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
func (o AlertChannelConfigOutput) HeadersString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.HeadersString }).(pulumi.StringPtrOutput)
}

// `true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
// * `webhook`
func (o AlertChannelConfigOutput) IncludeJsonAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.IncludeJsonAttachment }).(pulumi.StringPtrOutput)
}

// The key for integrating with VictorOps.
func (o AlertChannelConfigOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// A map of key/value pairs that represents the webhook payload.  Must provide `payloadType` if setting this argument.
func (o AlertChannelConfigOutput) Payload() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertChannelConfig) map[string]string { return v.Payload }).(pulumi.StringMapOutput)
}

// Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
func (o AlertChannelConfigOutput) PayloadString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.PayloadString }).(pulumi.StringPtrOutput)
}

// Can either be `application/json` or `application/x-www-form-urlencoded`. The `payloadType` argument is _required_ if `payload` is set.
// * `pagerduty`
func (o AlertChannelConfigOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.PayloadType }).(pulumi.StringPtrOutput)
}

// A set of recipients for targeting notifications.  Multiple values are comma separated.
func (o AlertChannelConfigOutput) Recipients() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Recipients }).(pulumi.StringPtrOutput)
}

// The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
func (o AlertChannelConfigOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The route key for integrating with VictorOps.
// * `slack`
func (o AlertChannelConfigOutput) RouteKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.RouteKey }).(pulumi.StringPtrOutput)
}

// Specifies the service key for integrating with Pagerduty.
// * `victorops`
func (o AlertChannelConfigOutput) ServiceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.ServiceKey }).(pulumi.StringPtrOutput)
}

// A set of tags for targeting notifications. Multiple values are comma separated.
func (o AlertChannelConfigOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Tags }).(pulumi.StringPtrOutput)
}

// A set of teams for targeting notifications. Multiple values are comma separated.
func (o AlertChannelConfigOutput) Teams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Teams }).(pulumi.StringPtrOutput)
}

// [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
func (o AlertChannelConfigOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o AlertChannelConfigOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type AlertChannelConfigPtrOutput struct{ *pulumi.OutputState }

func (AlertChannelConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelConfig)(nil)).Elem()
}

func (o AlertChannelConfigPtrOutput) ToAlertChannelConfigPtrOutput() AlertChannelConfigPtrOutput {
	return o
}

func (o AlertChannelConfigPtrOutput) ToAlertChannelConfigPtrOutputWithContext(ctx context.Context) AlertChannelConfigPtrOutput {
	return o
}

func (o AlertChannelConfigPtrOutput) Elem() AlertChannelConfigOutput {
	return o.ApplyT(func(v *AlertChannelConfig) AlertChannelConfig {
		if v != nil {
			return *v
		}
		var ret AlertChannelConfig
		return ret
	}).(AlertChannelConfigOutput)
}

// The API key for integrating with OpsGenie.
func (o AlertChannelConfigPtrOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.ApiKey
	}).(pulumi.StringPtrOutput)
}

// Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
func (o AlertChannelConfigPtrOutput) AuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.AuthPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
func (o AlertChannelConfigPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
func (o AlertChannelConfigPtrOutput) AuthUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.AuthUsername
	}).(pulumi.StringPtrOutput)
}

// The base URL of the webhook destination.
func (o AlertChannelConfigPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// The Slack channel to send notifications to.
// * `opsgenie`
func (o AlertChannelConfigPtrOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Channel
	}).(pulumi.StringPtrOutput)
}

// A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
func (o AlertChannelConfigPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertChannelConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
func (o AlertChannelConfigPtrOutput) HeadersString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.HeadersString
	}).(pulumi.StringPtrOutput)
}

// `true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
// * `webhook`
func (o AlertChannelConfigPtrOutput) IncludeJsonAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.IncludeJsonAttachment
	}).(pulumi.StringPtrOutput)
}

// The key for integrating with VictorOps.
func (o AlertChannelConfigPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// A map of key/value pairs that represents the webhook payload.  Must provide `payloadType` if setting this argument.
func (o AlertChannelConfigPtrOutput) Payload() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertChannelConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Payload
	}).(pulumi.StringMapOutput)
}

// Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
func (o AlertChannelConfigPtrOutput) PayloadString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.PayloadString
	}).(pulumi.StringPtrOutput)
}

// Can either be `application/json` or `application/x-www-form-urlencoded`. The `payloadType` argument is _required_ if `payload` is set.
// * `pagerduty`
func (o AlertChannelConfigPtrOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.PayloadType
	}).(pulumi.StringPtrOutput)
}

// A set of recipients for targeting notifications.  Multiple values are comma separated.
func (o AlertChannelConfigPtrOutput) Recipients() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Recipients
	}).(pulumi.StringPtrOutput)
}

// The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
func (o AlertChannelConfigPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The route key for integrating with VictorOps.
// * `slack`
func (o AlertChannelConfigPtrOutput) RouteKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.RouteKey
	}).(pulumi.StringPtrOutput)
}

// Specifies the service key for integrating with Pagerduty.
// * `victorops`
func (o AlertChannelConfigPtrOutput) ServiceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServiceKey
	}).(pulumi.StringPtrOutput)
}

// A set of tags for targeting notifications. Multiple values are comma separated.
func (o AlertChannelConfigPtrOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringPtrOutput)
}

// A set of teams for targeting notifications. Multiple values are comma separated.
func (o AlertChannelConfigPtrOutput) Teams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Teams
	}).(pulumi.StringPtrOutput)
}

// [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
func (o AlertChannelConfigPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

func (o AlertChannelConfigPtrOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.UserId
	}).(pulumi.StringPtrOutput)
}

type AlertConditionTerm struct {
	Duration     int     `pulumi:"duration"`
	Operator     *string `pulumi:"operator"`
	Priority     *string `pulumi:"priority"`
	Threshold    float64 `pulumi:"threshold"`
	TimeFunction string  `pulumi:"timeFunction"`
}

// AlertConditionTermInput is an input type that accepts AlertConditionTermArgs and AlertConditionTermOutput values.
// You can construct a concrete instance of `AlertConditionTermInput` via:
//
//          AlertConditionTermArgs{...}
type AlertConditionTermInput interface {
	pulumi.Input

	ToAlertConditionTermOutput() AlertConditionTermOutput
	ToAlertConditionTermOutputWithContext(context.Context) AlertConditionTermOutput
}

type AlertConditionTermArgs struct {
	Duration     pulumi.IntInput       `pulumi:"duration"`
	Operator     pulumi.StringPtrInput `pulumi:"operator"`
	Priority     pulumi.StringPtrInput `pulumi:"priority"`
	Threshold    pulumi.Float64Input   `pulumi:"threshold"`
	TimeFunction pulumi.StringInput    `pulumi:"timeFunction"`
}

func (AlertConditionTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertConditionTerm)(nil)).Elem()
}

func (i AlertConditionTermArgs) ToAlertConditionTermOutput() AlertConditionTermOutput {
	return i.ToAlertConditionTermOutputWithContext(context.Background())
}

func (i AlertConditionTermArgs) ToAlertConditionTermOutputWithContext(ctx context.Context) AlertConditionTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertConditionTermOutput)
}

// AlertConditionTermArrayInput is an input type that accepts AlertConditionTermArray and AlertConditionTermArrayOutput values.
// You can construct a concrete instance of `AlertConditionTermArrayInput` via:
//
//          AlertConditionTermArray{ AlertConditionTermArgs{...} }
type AlertConditionTermArrayInput interface {
	pulumi.Input

	ToAlertConditionTermArrayOutput() AlertConditionTermArrayOutput
	ToAlertConditionTermArrayOutputWithContext(context.Context) AlertConditionTermArrayOutput
}

type AlertConditionTermArray []AlertConditionTermInput

func (AlertConditionTermArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertConditionTerm)(nil)).Elem()
}

func (i AlertConditionTermArray) ToAlertConditionTermArrayOutput() AlertConditionTermArrayOutput {
	return i.ToAlertConditionTermArrayOutputWithContext(context.Background())
}

func (i AlertConditionTermArray) ToAlertConditionTermArrayOutputWithContext(ctx context.Context) AlertConditionTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertConditionTermArrayOutput)
}

type AlertConditionTermOutput struct{ *pulumi.OutputState }

func (AlertConditionTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertConditionTerm)(nil)).Elem()
}

func (o AlertConditionTermOutput) ToAlertConditionTermOutput() AlertConditionTermOutput {
	return o
}

func (o AlertConditionTermOutput) ToAlertConditionTermOutputWithContext(ctx context.Context) AlertConditionTermOutput {
	return o
}

func (o AlertConditionTermOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v AlertConditionTerm) int { return v.Duration }).(pulumi.IntOutput)
}

func (o AlertConditionTermOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertConditionTerm) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

func (o AlertConditionTermOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertConditionTerm) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

func (o AlertConditionTermOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v AlertConditionTerm) float64 { return v.Threshold }).(pulumi.Float64Output)
}

func (o AlertConditionTermOutput) TimeFunction() pulumi.StringOutput {
	return o.ApplyT(func(v AlertConditionTerm) string { return v.TimeFunction }).(pulumi.StringOutput)
}

type AlertConditionTermArrayOutput struct{ *pulumi.OutputState }

func (AlertConditionTermArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertConditionTerm)(nil)).Elem()
}

func (o AlertConditionTermArrayOutput) ToAlertConditionTermArrayOutput() AlertConditionTermArrayOutput {
	return o
}

func (o AlertConditionTermArrayOutput) ToAlertConditionTermArrayOutputWithContext(ctx context.Context) AlertConditionTermArrayOutput {
	return o
}

func (o AlertConditionTermArrayOutput) Index(i pulumi.IntInput) AlertConditionTermOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertConditionTerm {
		return vs[0].([]AlertConditionTerm)[vs[1].(int)]
	}).(AlertConditionTermOutput)
}

type AlertMutingRuleCondition struct {
	// The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
	Conditions []AlertMutingRuleConditionCondition `pulumi:"conditions"`
	// The operator used to combine all the MutingRuleConditions within the group.
	Operator string `pulumi:"operator"`
}

// AlertMutingRuleConditionInput is an input type that accepts AlertMutingRuleConditionArgs and AlertMutingRuleConditionOutput values.
// You can construct a concrete instance of `AlertMutingRuleConditionInput` via:
//
//          AlertMutingRuleConditionArgs{...}
type AlertMutingRuleConditionInput interface {
	pulumi.Input

	ToAlertMutingRuleConditionOutput() AlertMutingRuleConditionOutput
	ToAlertMutingRuleConditionOutputWithContext(context.Context) AlertMutingRuleConditionOutput
}

type AlertMutingRuleConditionArgs struct {
	// The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
	Conditions AlertMutingRuleConditionConditionArrayInput `pulumi:"conditions"`
	// The operator used to combine all the MutingRuleConditions within the group.
	Operator pulumi.StringInput `pulumi:"operator"`
}

func (AlertMutingRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleCondition)(nil)).Elem()
}

func (i AlertMutingRuleConditionArgs) ToAlertMutingRuleConditionOutput() AlertMutingRuleConditionOutput {
	return i.ToAlertMutingRuleConditionOutputWithContext(context.Background())
}

func (i AlertMutingRuleConditionArgs) ToAlertMutingRuleConditionOutputWithContext(ctx context.Context) AlertMutingRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleConditionOutput)
}

func (i AlertMutingRuleConditionArgs) ToAlertMutingRuleConditionPtrOutput() AlertMutingRuleConditionPtrOutput {
	return i.ToAlertMutingRuleConditionPtrOutputWithContext(context.Background())
}

func (i AlertMutingRuleConditionArgs) ToAlertMutingRuleConditionPtrOutputWithContext(ctx context.Context) AlertMutingRuleConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleConditionOutput).ToAlertMutingRuleConditionPtrOutputWithContext(ctx)
}

// AlertMutingRuleConditionPtrInput is an input type that accepts AlertMutingRuleConditionArgs, AlertMutingRuleConditionPtr and AlertMutingRuleConditionPtrOutput values.
// You can construct a concrete instance of `AlertMutingRuleConditionPtrInput` via:
//
//          AlertMutingRuleConditionArgs{...}
//
//  or:
//
//          nil
type AlertMutingRuleConditionPtrInput interface {
	pulumi.Input

	ToAlertMutingRuleConditionPtrOutput() AlertMutingRuleConditionPtrOutput
	ToAlertMutingRuleConditionPtrOutputWithContext(context.Context) AlertMutingRuleConditionPtrOutput
}

type alertMutingRuleConditionPtrType AlertMutingRuleConditionArgs

func AlertMutingRuleConditionPtr(v *AlertMutingRuleConditionArgs) AlertMutingRuleConditionPtrInput {
	return (*alertMutingRuleConditionPtrType)(v)
}

func (*alertMutingRuleConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertMutingRuleCondition)(nil)).Elem()
}

func (i *alertMutingRuleConditionPtrType) ToAlertMutingRuleConditionPtrOutput() AlertMutingRuleConditionPtrOutput {
	return i.ToAlertMutingRuleConditionPtrOutputWithContext(context.Background())
}

func (i *alertMutingRuleConditionPtrType) ToAlertMutingRuleConditionPtrOutputWithContext(ctx context.Context) AlertMutingRuleConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleConditionPtrOutput)
}

type AlertMutingRuleConditionOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleCondition)(nil)).Elem()
}

func (o AlertMutingRuleConditionOutput) ToAlertMutingRuleConditionOutput() AlertMutingRuleConditionOutput {
	return o
}

func (o AlertMutingRuleConditionOutput) ToAlertMutingRuleConditionOutputWithContext(ctx context.Context) AlertMutingRuleConditionOutput {
	return o
}

func (o AlertMutingRuleConditionOutput) ToAlertMutingRuleConditionPtrOutput() AlertMutingRuleConditionPtrOutput {
	return o.ToAlertMutingRuleConditionPtrOutputWithContext(context.Background())
}

func (o AlertMutingRuleConditionOutput) ToAlertMutingRuleConditionPtrOutputWithContext(ctx context.Context) AlertMutingRuleConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertMutingRuleCondition) *AlertMutingRuleCondition {
		return &v
	}).(AlertMutingRuleConditionPtrOutput)
}

// The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
func (o AlertMutingRuleConditionOutput) Conditions() AlertMutingRuleConditionConditionArrayOutput {
	return o.ApplyT(func(v AlertMutingRuleCondition) []AlertMutingRuleConditionCondition { return v.Conditions }).(AlertMutingRuleConditionConditionArrayOutput)
}

// The operator used to combine all the MutingRuleConditions within the group.
func (o AlertMutingRuleConditionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertMutingRuleCondition) string { return v.Operator }).(pulumi.StringOutput)
}

type AlertMutingRuleConditionPtrOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertMutingRuleCondition)(nil)).Elem()
}

func (o AlertMutingRuleConditionPtrOutput) ToAlertMutingRuleConditionPtrOutput() AlertMutingRuleConditionPtrOutput {
	return o
}

func (o AlertMutingRuleConditionPtrOutput) ToAlertMutingRuleConditionPtrOutputWithContext(ctx context.Context) AlertMutingRuleConditionPtrOutput {
	return o
}

func (o AlertMutingRuleConditionPtrOutput) Elem() AlertMutingRuleConditionOutput {
	return o.ApplyT(func(v *AlertMutingRuleCondition) AlertMutingRuleCondition {
		if v != nil {
			return *v
		}
		var ret AlertMutingRuleCondition
		return ret
	}).(AlertMutingRuleConditionOutput)
}

// The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
func (o AlertMutingRuleConditionPtrOutput) Conditions() AlertMutingRuleConditionConditionArrayOutput {
	return o.ApplyT(func(v *AlertMutingRuleCondition) []AlertMutingRuleConditionCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(AlertMutingRuleConditionConditionArrayOutput)
}

// The operator used to combine all the MutingRuleConditions within the group.
func (o AlertMutingRuleConditionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertMutingRuleCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

type AlertMutingRuleConditionCondition struct {
	// The attribute on a violation. Valid values are   `accountId`, `conditionId`, `conditionName`, `conditionRunbookUrl`, `conditionType`, `entity.guid`, `nrqlEventType`, `nrqlQuery`, `policyId`, `policyName`, `product`, `tags.<NAME>`, `targetId`, `targetName`
	Attribute string `pulumi:"attribute"`
	// The operator used to compare the attribute's value with the supplied value(s). Valid values are `ANY`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `IN`, `IS_BLANK`, `IS_NOT_BLANK`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_IN`, `NOT_STARTS_WITH`, `STARTS_WITH`
	Operator string `pulumi:"operator"`
	// The value(s) to compare against the attribute's value.
	Values []string `pulumi:"values"`
}

// AlertMutingRuleConditionConditionInput is an input type that accepts AlertMutingRuleConditionConditionArgs and AlertMutingRuleConditionConditionOutput values.
// You can construct a concrete instance of `AlertMutingRuleConditionConditionInput` via:
//
//          AlertMutingRuleConditionConditionArgs{...}
type AlertMutingRuleConditionConditionInput interface {
	pulumi.Input

	ToAlertMutingRuleConditionConditionOutput() AlertMutingRuleConditionConditionOutput
	ToAlertMutingRuleConditionConditionOutputWithContext(context.Context) AlertMutingRuleConditionConditionOutput
}

type AlertMutingRuleConditionConditionArgs struct {
	// The attribute on a violation. Valid values are   `accountId`, `conditionId`, `conditionName`, `conditionRunbookUrl`, `conditionType`, `entity.guid`, `nrqlEventType`, `nrqlQuery`, `policyId`, `policyName`, `product`, `tags.<NAME>`, `targetId`, `targetName`
	Attribute pulumi.StringInput `pulumi:"attribute"`
	// The operator used to compare the attribute's value with the supplied value(s). Valid values are `ANY`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `IN`, `IS_BLANK`, `IS_NOT_BLANK`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_IN`, `NOT_STARTS_WITH`, `STARTS_WITH`
	Operator pulumi.StringInput `pulumi:"operator"`
	// The value(s) to compare against the attribute's value.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertMutingRuleConditionConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleConditionCondition)(nil)).Elem()
}

func (i AlertMutingRuleConditionConditionArgs) ToAlertMutingRuleConditionConditionOutput() AlertMutingRuleConditionConditionOutput {
	return i.ToAlertMutingRuleConditionConditionOutputWithContext(context.Background())
}

func (i AlertMutingRuleConditionConditionArgs) ToAlertMutingRuleConditionConditionOutputWithContext(ctx context.Context) AlertMutingRuleConditionConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleConditionConditionOutput)
}

// AlertMutingRuleConditionConditionArrayInput is an input type that accepts AlertMutingRuleConditionConditionArray and AlertMutingRuleConditionConditionArrayOutput values.
// You can construct a concrete instance of `AlertMutingRuleConditionConditionArrayInput` via:
//
//          AlertMutingRuleConditionConditionArray{ AlertMutingRuleConditionConditionArgs{...} }
type AlertMutingRuleConditionConditionArrayInput interface {
	pulumi.Input

	ToAlertMutingRuleConditionConditionArrayOutput() AlertMutingRuleConditionConditionArrayOutput
	ToAlertMutingRuleConditionConditionArrayOutputWithContext(context.Context) AlertMutingRuleConditionConditionArrayOutput
}

type AlertMutingRuleConditionConditionArray []AlertMutingRuleConditionConditionInput

func (AlertMutingRuleConditionConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertMutingRuleConditionCondition)(nil)).Elem()
}

func (i AlertMutingRuleConditionConditionArray) ToAlertMutingRuleConditionConditionArrayOutput() AlertMutingRuleConditionConditionArrayOutput {
	return i.ToAlertMutingRuleConditionConditionArrayOutputWithContext(context.Background())
}

func (i AlertMutingRuleConditionConditionArray) ToAlertMutingRuleConditionConditionArrayOutputWithContext(ctx context.Context) AlertMutingRuleConditionConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleConditionConditionArrayOutput)
}

type AlertMutingRuleConditionConditionOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleConditionConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleConditionCondition)(nil)).Elem()
}

func (o AlertMutingRuleConditionConditionOutput) ToAlertMutingRuleConditionConditionOutput() AlertMutingRuleConditionConditionOutput {
	return o
}

func (o AlertMutingRuleConditionConditionOutput) ToAlertMutingRuleConditionConditionOutputWithContext(ctx context.Context) AlertMutingRuleConditionConditionOutput {
	return o
}

// The attribute on a violation. Valid values are   `accountId`, `conditionId`, `conditionName`, `conditionRunbookUrl`, `conditionType`, `entity.guid`, `nrqlEventType`, `nrqlQuery`, `policyId`, `policyName`, `product`, `tags.<NAME>`, `targetId`, `targetName`
func (o AlertMutingRuleConditionConditionOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v AlertMutingRuleConditionCondition) string { return v.Attribute }).(pulumi.StringOutput)
}

// The operator used to compare the attribute's value with the supplied value(s). Valid values are `ANY`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `IN`, `IS_BLANK`, `IS_NOT_BLANK`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_IN`, `NOT_STARTS_WITH`, `STARTS_WITH`
func (o AlertMutingRuleConditionConditionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertMutingRuleConditionCondition) string { return v.Operator }).(pulumi.StringOutput)
}

// The value(s) to compare against the attribute's value.
func (o AlertMutingRuleConditionConditionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertMutingRuleConditionCondition) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertMutingRuleConditionConditionArrayOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleConditionConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertMutingRuleConditionCondition)(nil)).Elem()
}

func (o AlertMutingRuleConditionConditionArrayOutput) ToAlertMutingRuleConditionConditionArrayOutput() AlertMutingRuleConditionConditionArrayOutput {
	return o
}

func (o AlertMutingRuleConditionConditionArrayOutput) ToAlertMutingRuleConditionConditionArrayOutputWithContext(ctx context.Context) AlertMutingRuleConditionConditionArrayOutput {
	return o
}

func (o AlertMutingRuleConditionConditionArrayOutput) Index(i pulumi.IntInput) AlertMutingRuleConditionConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertMutingRuleConditionCondition {
		return vs[0].([]AlertMutingRuleConditionCondition)[vs[1].(int)]
	}).(AlertMutingRuleConditionConditionOutput)
}

type AlertMutingRuleSchedule struct {
	// The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeatCount`
	EndRepeat *string `pulumi:"endRepeat"`
	// The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'
	EndTime *string `pulumi:"endTime"`
	// The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
	Repeat *string `pulumi:"repeat"`
	// The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `endRepeat`
	RepeatCount *int `pulumi:"repeatCount"`
	// The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'
	StartTime *string `pulumi:"startTime"`
	TimeZone  string  `pulumi:"timeZone"`
	// The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
	WeeklyRepeatDays []string `pulumi:"weeklyRepeatDays"`
}

// AlertMutingRuleScheduleInput is an input type that accepts AlertMutingRuleScheduleArgs and AlertMutingRuleScheduleOutput values.
// You can construct a concrete instance of `AlertMutingRuleScheduleInput` via:
//
//          AlertMutingRuleScheduleArgs{...}
type AlertMutingRuleScheduleInput interface {
	pulumi.Input

	ToAlertMutingRuleScheduleOutput() AlertMutingRuleScheduleOutput
	ToAlertMutingRuleScheduleOutputWithContext(context.Context) AlertMutingRuleScheduleOutput
}

type AlertMutingRuleScheduleArgs struct {
	// The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeatCount`
	EndRepeat pulumi.StringPtrInput `pulumi:"endRepeat"`
	// The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
	Repeat pulumi.StringPtrInput `pulumi:"repeat"`
	// The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `endRepeat`
	RepeatCount pulumi.IntPtrInput `pulumi:"repeatCount"`
	// The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	TimeZone  pulumi.StringInput    `pulumi:"timeZone"`
	// The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
	WeeklyRepeatDays pulumi.StringArrayInput `pulumi:"weeklyRepeatDays"`
}

func (AlertMutingRuleScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleSchedule)(nil)).Elem()
}

func (i AlertMutingRuleScheduleArgs) ToAlertMutingRuleScheduleOutput() AlertMutingRuleScheduleOutput {
	return i.ToAlertMutingRuleScheduleOutputWithContext(context.Background())
}

func (i AlertMutingRuleScheduleArgs) ToAlertMutingRuleScheduleOutputWithContext(ctx context.Context) AlertMutingRuleScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleScheduleOutput)
}

func (i AlertMutingRuleScheduleArgs) ToAlertMutingRuleSchedulePtrOutput() AlertMutingRuleSchedulePtrOutput {
	return i.ToAlertMutingRuleSchedulePtrOutputWithContext(context.Background())
}

func (i AlertMutingRuleScheduleArgs) ToAlertMutingRuleSchedulePtrOutputWithContext(ctx context.Context) AlertMutingRuleSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleScheduleOutput).ToAlertMutingRuleSchedulePtrOutputWithContext(ctx)
}

// AlertMutingRuleSchedulePtrInput is an input type that accepts AlertMutingRuleScheduleArgs, AlertMutingRuleSchedulePtr and AlertMutingRuleSchedulePtrOutput values.
// You can construct a concrete instance of `AlertMutingRuleSchedulePtrInput` via:
//
//          AlertMutingRuleScheduleArgs{...}
//
//  or:
//
//          nil
type AlertMutingRuleSchedulePtrInput interface {
	pulumi.Input

	ToAlertMutingRuleSchedulePtrOutput() AlertMutingRuleSchedulePtrOutput
	ToAlertMutingRuleSchedulePtrOutputWithContext(context.Context) AlertMutingRuleSchedulePtrOutput
}

type alertMutingRuleSchedulePtrType AlertMutingRuleScheduleArgs

func AlertMutingRuleSchedulePtr(v *AlertMutingRuleScheduleArgs) AlertMutingRuleSchedulePtrInput {
	return (*alertMutingRuleSchedulePtrType)(v)
}

func (*alertMutingRuleSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertMutingRuleSchedule)(nil)).Elem()
}

func (i *alertMutingRuleSchedulePtrType) ToAlertMutingRuleSchedulePtrOutput() AlertMutingRuleSchedulePtrOutput {
	return i.ToAlertMutingRuleSchedulePtrOutputWithContext(context.Background())
}

func (i *alertMutingRuleSchedulePtrType) ToAlertMutingRuleSchedulePtrOutputWithContext(ctx context.Context) AlertMutingRuleSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleSchedulePtrOutput)
}

type AlertMutingRuleScheduleOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleSchedule)(nil)).Elem()
}

func (o AlertMutingRuleScheduleOutput) ToAlertMutingRuleScheduleOutput() AlertMutingRuleScheduleOutput {
	return o
}

func (o AlertMutingRuleScheduleOutput) ToAlertMutingRuleScheduleOutputWithContext(ctx context.Context) AlertMutingRuleScheduleOutput {
	return o
}

func (o AlertMutingRuleScheduleOutput) ToAlertMutingRuleSchedulePtrOutput() AlertMutingRuleSchedulePtrOutput {
	return o.ToAlertMutingRuleSchedulePtrOutputWithContext(context.Background())
}

func (o AlertMutingRuleScheduleOutput) ToAlertMutingRuleSchedulePtrOutputWithContext(ctx context.Context) AlertMutingRuleSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertMutingRuleSchedule) *AlertMutingRuleSchedule {
		return &v
	}).(AlertMutingRuleSchedulePtrOutput)
}

// The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeatCount`
func (o AlertMutingRuleScheduleOutput) EndRepeat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertMutingRuleSchedule) *string { return v.EndRepeat }).(pulumi.StringPtrOutput)
}

// The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'
func (o AlertMutingRuleScheduleOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertMutingRuleSchedule) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
func (o AlertMutingRuleScheduleOutput) Repeat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertMutingRuleSchedule) *string { return v.Repeat }).(pulumi.StringPtrOutput)
}

// The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `endRepeat`
func (o AlertMutingRuleScheduleOutput) RepeatCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertMutingRuleSchedule) *int { return v.RepeatCount }).(pulumi.IntPtrOutput)
}

// The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'
func (o AlertMutingRuleScheduleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertMutingRuleSchedule) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

func (o AlertMutingRuleScheduleOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v AlertMutingRuleSchedule) string { return v.TimeZone }).(pulumi.StringOutput)
}

// The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
func (o AlertMutingRuleScheduleOutput) WeeklyRepeatDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertMutingRuleSchedule) []string { return v.WeeklyRepeatDays }).(pulumi.StringArrayOutput)
}

type AlertMutingRuleSchedulePtrOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertMutingRuleSchedule)(nil)).Elem()
}

func (o AlertMutingRuleSchedulePtrOutput) ToAlertMutingRuleSchedulePtrOutput() AlertMutingRuleSchedulePtrOutput {
	return o
}

func (o AlertMutingRuleSchedulePtrOutput) ToAlertMutingRuleSchedulePtrOutputWithContext(ctx context.Context) AlertMutingRuleSchedulePtrOutput {
	return o
}

func (o AlertMutingRuleSchedulePtrOutput) Elem() AlertMutingRuleScheduleOutput {
	return o.ApplyT(func(v *AlertMutingRuleSchedule) AlertMutingRuleSchedule {
		if v != nil {
			return *v
		}
		var ret AlertMutingRuleSchedule
		return ret
	}).(AlertMutingRuleScheduleOutput)
}

// The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeatCount`
func (o AlertMutingRuleSchedulePtrOutput) EndRepeat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertMutingRuleSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndRepeat
	}).(pulumi.StringPtrOutput)
}

// The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'
func (o AlertMutingRuleSchedulePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertMutingRuleSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
func (o AlertMutingRuleSchedulePtrOutput) Repeat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertMutingRuleSchedule) *string {
		if v == nil {
			return nil
		}
		return v.Repeat
	}).(pulumi.StringPtrOutput)
}

// The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `endRepeat`
func (o AlertMutingRuleSchedulePtrOutput) RepeatCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertMutingRuleSchedule) *int {
		if v == nil {
			return nil
		}
		return v.RepeatCount
	}).(pulumi.IntPtrOutput)
}

// The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'
func (o AlertMutingRuleSchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertMutingRuleSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

func (o AlertMutingRuleSchedulePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertMutingRuleSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
func (o AlertMutingRuleSchedulePtrOutput) WeeklyRepeatDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertMutingRuleSchedule) []string {
		if v == nil {
			return nil
		}
		return v.WeeklyRepeatDays
	}).(pulumi.StringArrayOutput)
}

type DashboardFilter struct {
	Attributes []string `pulumi:"attributes"`
	EventTypes []string `pulumi:"eventTypes"`
}

// DashboardFilterInput is an input type that accepts DashboardFilterArgs and DashboardFilterOutput values.
// You can construct a concrete instance of `DashboardFilterInput` via:
//
//          DashboardFilterArgs{...}
type DashboardFilterInput interface {
	pulumi.Input

	ToDashboardFilterOutput() DashboardFilterOutput
	ToDashboardFilterOutputWithContext(context.Context) DashboardFilterOutput
}

type DashboardFilterArgs struct {
	Attributes pulumi.StringArrayInput `pulumi:"attributes"`
	EventTypes pulumi.StringArrayInput `pulumi:"eventTypes"`
}

func (DashboardFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardFilter)(nil)).Elem()
}

func (i DashboardFilterArgs) ToDashboardFilterOutput() DashboardFilterOutput {
	return i.ToDashboardFilterOutputWithContext(context.Background())
}

func (i DashboardFilterArgs) ToDashboardFilterOutputWithContext(ctx context.Context) DashboardFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardFilterOutput)
}

func (i DashboardFilterArgs) ToDashboardFilterPtrOutput() DashboardFilterPtrOutput {
	return i.ToDashboardFilterPtrOutputWithContext(context.Background())
}

func (i DashboardFilterArgs) ToDashboardFilterPtrOutputWithContext(ctx context.Context) DashboardFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardFilterOutput).ToDashboardFilterPtrOutputWithContext(ctx)
}

// DashboardFilterPtrInput is an input type that accepts DashboardFilterArgs, DashboardFilterPtr and DashboardFilterPtrOutput values.
// You can construct a concrete instance of `DashboardFilterPtrInput` via:
//
//          DashboardFilterArgs{...}
//
//  or:
//
//          nil
type DashboardFilterPtrInput interface {
	pulumi.Input

	ToDashboardFilterPtrOutput() DashboardFilterPtrOutput
	ToDashboardFilterPtrOutputWithContext(context.Context) DashboardFilterPtrOutput
}

type dashboardFilterPtrType DashboardFilterArgs

func DashboardFilterPtr(v *DashboardFilterArgs) DashboardFilterPtrInput {
	return (*dashboardFilterPtrType)(v)
}

func (*dashboardFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardFilter)(nil)).Elem()
}

func (i *dashboardFilterPtrType) ToDashboardFilterPtrOutput() DashboardFilterPtrOutput {
	return i.ToDashboardFilterPtrOutputWithContext(context.Background())
}

func (i *dashboardFilterPtrType) ToDashboardFilterPtrOutputWithContext(ctx context.Context) DashboardFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardFilterPtrOutput)
}

type DashboardFilterOutput struct{ *pulumi.OutputState }

func (DashboardFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardFilter)(nil)).Elem()
}

func (o DashboardFilterOutput) ToDashboardFilterOutput() DashboardFilterOutput {
	return o
}

func (o DashboardFilterOutput) ToDashboardFilterOutputWithContext(ctx context.Context) DashboardFilterOutput {
	return o
}

func (o DashboardFilterOutput) ToDashboardFilterPtrOutput() DashboardFilterPtrOutput {
	return o.ToDashboardFilterPtrOutputWithContext(context.Background())
}

func (o DashboardFilterOutput) ToDashboardFilterPtrOutputWithContext(ctx context.Context) DashboardFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardFilter) *DashboardFilter {
		return &v
	}).(DashboardFilterPtrOutput)
}

func (o DashboardFilterOutput) Attributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardFilter) []string { return v.Attributes }).(pulumi.StringArrayOutput)
}

func (o DashboardFilterOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardFilter) []string { return v.EventTypes }).(pulumi.StringArrayOutput)
}

type DashboardFilterPtrOutput struct{ *pulumi.OutputState }

func (DashboardFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardFilter)(nil)).Elem()
}

func (o DashboardFilterPtrOutput) ToDashboardFilterPtrOutput() DashboardFilterPtrOutput {
	return o
}

func (o DashboardFilterPtrOutput) ToDashboardFilterPtrOutputWithContext(ctx context.Context) DashboardFilterPtrOutput {
	return o
}

func (o DashboardFilterPtrOutput) Elem() DashboardFilterOutput {
	return o.ApplyT(func(v *DashboardFilter) DashboardFilter {
		if v != nil {
			return *v
		}
		var ret DashboardFilter
		return ret
	}).(DashboardFilterOutput)
}

func (o DashboardFilterPtrOutput) Attributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DashboardFilter) []string {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(pulumi.StringArrayOutput)
}

func (o DashboardFilterPtrOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DashboardFilter) []string {
		if v == nil {
			return nil
		}
		return v.EventTypes
	}).(pulumi.StringArrayOutput)
}

type DashboardWidget struct {
	AccountId            *int                         `pulumi:"accountId"`
	Column               int                          `pulumi:"column"`
	CompareWiths         []DashboardWidgetCompareWith `pulumi:"compareWiths"`
	DrilldownDashboardId *int                         `pulumi:"drilldownDashboardId"`
	Duration             *int                         `pulumi:"duration"`
	EndTime              *int                         `pulumi:"endTime"`
	EntityIds            []int                        `pulumi:"entityIds"`
	Facet                *string                      `pulumi:"facet"`
	Height               *int                         `pulumi:"height"`
	Limit                *int                         `pulumi:"limit"`
	Metrics              []DashboardWidgetMetric      `pulumi:"metrics"`
	Notes                *string                      `pulumi:"notes"`
	Nrql                 *string                      `pulumi:"nrql"`
	OrderBy              *string                      `pulumi:"orderBy"`
	RawMetricName        *string                      `pulumi:"rawMetricName"`
	Row                  int                          `pulumi:"row"`
	Source               *string                      `pulumi:"source"`
	ThresholdRed         *float64                     `pulumi:"thresholdRed"`
	ThresholdYellow      *float64                     `pulumi:"thresholdYellow"`
	Title                string                       `pulumi:"title"`
	Visualization        string                       `pulumi:"visualization"`
	WidgetId             *int                         `pulumi:"widgetId"`
	Width                *int                         `pulumi:"width"`
}

// DashboardWidgetInput is an input type that accepts DashboardWidgetArgs and DashboardWidgetOutput values.
// You can construct a concrete instance of `DashboardWidgetInput` via:
//
//          DashboardWidgetArgs{...}
type DashboardWidgetInput interface {
	pulumi.Input

	ToDashboardWidgetOutput() DashboardWidgetOutput
	ToDashboardWidgetOutputWithContext(context.Context) DashboardWidgetOutput
}

type DashboardWidgetArgs struct {
	AccountId            pulumi.IntPtrInput                   `pulumi:"accountId"`
	Column               pulumi.IntInput                      `pulumi:"column"`
	CompareWiths         DashboardWidgetCompareWithArrayInput `pulumi:"compareWiths"`
	DrilldownDashboardId pulumi.IntPtrInput                   `pulumi:"drilldownDashboardId"`
	Duration             pulumi.IntPtrInput                   `pulumi:"duration"`
	EndTime              pulumi.IntPtrInput                   `pulumi:"endTime"`
	EntityIds            pulumi.IntArrayInput                 `pulumi:"entityIds"`
	Facet                pulumi.StringPtrInput                `pulumi:"facet"`
	Height               pulumi.IntPtrInput                   `pulumi:"height"`
	Limit                pulumi.IntPtrInput                   `pulumi:"limit"`
	Metrics              DashboardWidgetMetricArrayInput      `pulumi:"metrics"`
	Notes                pulumi.StringPtrInput                `pulumi:"notes"`
	Nrql                 pulumi.StringPtrInput                `pulumi:"nrql"`
	OrderBy              pulumi.StringPtrInput                `pulumi:"orderBy"`
	RawMetricName        pulumi.StringPtrInput                `pulumi:"rawMetricName"`
	Row                  pulumi.IntInput                      `pulumi:"row"`
	Source               pulumi.StringPtrInput                `pulumi:"source"`
	ThresholdRed         pulumi.Float64PtrInput               `pulumi:"thresholdRed"`
	ThresholdYellow      pulumi.Float64PtrInput               `pulumi:"thresholdYellow"`
	Title                pulumi.StringInput                   `pulumi:"title"`
	Visualization        pulumi.StringInput                   `pulumi:"visualization"`
	WidgetId             pulumi.IntPtrInput                   `pulumi:"widgetId"`
	Width                pulumi.IntPtrInput                   `pulumi:"width"`
}

func (DashboardWidgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidget)(nil)).Elem()
}

func (i DashboardWidgetArgs) ToDashboardWidgetOutput() DashboardWidgetOutput {
	return i.ToDashboardWidgetOutputWithContext(context.Background())
}

func (i DashboardWidgetArgs) ToDashboardWidgetOutputWithContext(ctx context.Context) DashboardWidgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetOutput)
}

// DashboardWidgetArrayInput is an input type that accepts DashboardWidgetArray and DashboardWidgetArrayOutput values.
// You can construct a concrete instance of `DashboardWidgetArrayInput` via:
//
//          DashboardWidgetArray{ DashboardWidgetArgs{...} }
type DashboardWidgetArrayInput interface {
	pulumi.Input

	ToDashboardWidgetArrayOutput() DashboardWidgetArrayOutput
	ToDashboardWidgetArrayOutputWithContext(context.Context) DashboardWidgetArrayOutput
}

type DashboardWidgetArray []DashboardWidgetInput

func (DashboardWidgetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidget)(nil)).Elem()
}

func (i DashboardWidgetArray) ToDashboardWidgetArrayOutput() DashboardWidgetArrayOutput {
	return i.ToDashboardWidgetArrayOutputWithContext(context.Background())
}

func (i DashboardWidgetArray) ToDashboardWidgetArrayOutputWithContext(ctx context.Context) DashboardWidgetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetArrayOutput)
}

type DashboardWidgetOutput struct{ *pulumi.OutputState }

func (DashboardWidgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidget)(nil)).Elem()
}

func (o DashboardWidgetOutput) ToDashboardWidgetOutput() DashboardWidgetOutput {
	return o
}

func (o DashboardWidgetOutput) ToDashboardWidgetOutputWithContext(ctx context.Context) DashboardWidgetOutput {
	return o
}

func (o DashboardWidgetOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

func (o DashboardWidgetOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardWidget) int { return v.Column }).(pulumi.IntOutput)
}

func (o DashboardWidgetOutput) CompareWiths() DashboardWidgetCompareWithArrayOutput {
	return o.ApplyT(func(v DashboardWidget) []DashboardWidgetCompareWith { return v.CompareWiths }).(DashboardWidgetCompareWithArrayOutput)
}

func (o DashboardWidgetOutput) DrilldownDashboardId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.DrilldownDashboardId }).(pulumi.IntPtrOutput)
}

func (o DashboardWidgetOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

func (o DashboardWidgetOutput) EndTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.EndTime }).(pulumi.IntPtrOutput)
}

func (o DashboardWidgetOutput) EntityIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DashboardWidget) []int { return v.EntityIds }).(pulumi.IntArrayOutput)
}

func (o DashboardWidgetOutput) Facet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.Facet }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o DashboardWidgetOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

func (o DashboardWidgetOutput) Metrics() DashboardWidgetMetricArrayOutput {
	return o.ApplyT(func(v DashboardWidget) []DashboardWidgetMetric { return v.Metrics }).(DashboardWidgetMetricArrayOutput)
}

func (o DashboardWidgetOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.Notes }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetOutput) Nrql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.Nrql }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetOutput) OrderBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.OrderBy }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetOutput) RawMetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.RawMetricName }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardWidget) int { return v.Row }).(pulumi.IntOutput)
}

func (o DashboardWidgetOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetOutput) ThresholdRed() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardWidget) *float64 { return v.ThresholdRed }).(pulumi.Float64PtrOutput)
}

func (o DashboardWidgetOutput) ThresholdYellow() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardWidget) *float64 { return v.ThresholdYellow }).(pulumi.Float64PtrOutput)
}

func (o DashboardWidgetOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidget) string { return v.Title }).(pulumi.StringOutput)
}

func (o DashboardWidgetOutput) Visualization() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidget) string { return v.Visualization }).(pulumi.StringOutput)
}

func (o DashboardWidgetOutput) WidgetId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.WidgetId }).(pulumi.IntPtrOutput)
}

func (o DashboardWidgetOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type DashboardWidgetArrayOutput struct{ *pulumi.OutputState }

func (DashboardWidgetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidget)(nil)).Elem()
}

func (o DashboardWidgetArrayOutput) ToDashboardWidgetArrayOutput() DashboardWidgetArrayOutput {
	return o
}

func (o DashboardWidgetArrayOutput) ToDashboardWidgetArrayOutputWithContext(ctx context.Context) DashboardWidgetArrayOutput {
	return o
}

func (o DashboardWidgetArrayOutput) Index(i pulumi.IntInput) DashboardWidgetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardWidget {
		return vs[0].([]DashboardWidget)[vs[1].(int)]
	}).(DashboardWidgetOutput)
}

type DashboardWidgetCompareWith struct {
	OffsetDuration string                                 `pulumi:"offsetDuration"`
	Presentation   DashboardWidgetCompareWithPresentation `pulumi:"presentation"`
}

// DashboardWidgetCompareWithInput is an input type that accepts DashboardWidgetCompareWithArgs and DashboardWidgetCompareWithOutput values.
// You can construct a concrete instance of `DashboardWidgetCompareWithInput` via:
//
//          DashboardWidgetCompareWithArgs{...}
type DashboardWidgetCompareWithInput interface {
	pulumi.Input

	ToDashboardWidgetCompareWithOutput() DashboardWidgetCompareWithOutput
	ToDashboardWidgetCompareWithOutputWithContext(context.Context) DashboardWidgetCompareWithOutput
}

type DashboardWidgetCompareWithArgs struct {
	OffsetDuration pulumi.StringInput                          `pulumi:"offsetDuration"`
	Presentation   DashboardWidgetCompareWithPresentationInput `pulumi:"presentation"`
}

func (DashboardWidgetCompareWithArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetCompareWith)(nil)).Elem()
}

func (i DashboardWidgetCompareWithArgs) ToDashboardWidgetCompareWithOutput() DashboardWidgetCompareWithOutput {
	return i.ToDashboardWidgetCompareWithOutputWithContext(context.Background())
}

func (i DashboardWidgetCompareWithArgs) ToDashboardWidgetCompareWithOutputWithContext(ctx context.Context) DashboardWidgetCompareWithOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetCompareWithOutput)
}

// DashboardWidgetCompareWithArrayInput is an input type that accepts DashboardWidgetCompareWithArray and DashboardWidgetCompareWithArrayOutput values.
// You can construct a concrete instance of `DashboardWidgetCompareWithArrayInput` via:
//
//          DashboardWidgetCompareWithArray{ DashboardWidgetCompareWithArgs{...} }
type DashboardWidgetCompareWithArrayInput interface {
	pulumi.Input

	ToDashboardWidgetCompareWithArrayOutput() DashboardWidgetCompareWithArrayOutput
	ToDashboardWidgetCompareWithArrayOutputWithContext(context.Context) DashboardWidgetCompareWithArrayOutput
}

type DashboardWidgetCompareWithArray []DashboardWidgetCompareWithInput

func (DashboardWidgetCompareWithArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidgetCompareWith)(nil)).Elem()
}

func (i DashboardWidgetCompareWithArray) ToDashboardWidgetCompareWithArrayOutput() DashboardWidgetCompareWithArrayOutput {
	return i.ToDashboardWidgetCompareWithArrayOutputWithContext(context.Background())
}

func (i DashboardWidgetCompareWithArray) ToDashboardWidgetCompareWithArrayOutputWithContext(ctx context.Context) DashboardWidgetCompareWithArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetCompareWithArrayOutput)
}

type DashboardWidgetCompareWithOutput struct{ *pulumi.OutputState }

func (DashboardWidgetCompareWithOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetCompareWith)(nil)).Elem()
}

func (o DashboardWidgetCompareWithOutput) ToDashboardWidgetCompareWithOutput() DashboardWidgetCompareWithOutput {
	return o
}

func (o DashboardWidgetCompareWithOutput) ToDashboardWidgetCompareWithOutputWithContext(ctx context.Context) DashboardWidgetCompareWithOutput {
	return o
}

func (o DashboardWidgetCompareWithOutput) OffsetDuration() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidgetCompareWith) string { return v.OffsetDuration }).(pulumi.StringOutput)
}

func (o DashboardWidgetCompareWithOutput) Presentation() DashboardWidgetCompareWithPresentationOutput {
	return o.ApplyT(func(v DashboardWidgetCompareWith) DashboardWidgetCompareWithPresentation { return v.Presentation }).(DashboardWidgetCompareWithPresentationOutput)
}

type DashboardWidgetCompareWithArrayOutput struct{ *pulumi.OutputState }

func (DashboardWidgetCompareWithArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidgetCompareWith)(nil)).Elem()
}

func (o DashboardWidgetCompareWithArrayOutput) ToDashboardWidgetCompareWithArrayOutput() DashboardWidgetCompareWithArrayOutput {
	return o
}

func (o DashboardWidgetCompareWithArrayOutput) ToDashboardWidgetCompareWithArrayOutputWithContext(ctx context.Context) DashboardWidgetCompareWithArrayOutput {
	return o
}

func (o DashboardWidgetCompareWithArrayOutput) Index(i pulumi.IntInput) DashboardWidgetCompareWithOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardWidgetCompareWith {
		return vs[0].([]DashboardWidgetCompareWith)[vs[1].(int)]
	}).(DashboardWidgetCompareWithOutput)
}

type DashboardWidgetCompareWithPresentation struct {
	Color string `pulumi:"color"`
	Name  string `pulumi:"name"`
}

// DashboardWidgetCompareWithPresentationInput is an input type that accepts DashboardWidgetCompareWithPresentationArgs and DashboardWidgetCompareWithPresentationOutput values.
// You can construct a concrete instance of `DashboardWidgetCompareWithPresentationInput` via:
//
//          DashboardWidgetCompareWithPresentationArgs{...}
type DashboardWidgetCompareWithPresentationInput interface {
	pulumi.Input

	ToDashboardWidgetCompareWithPresentationOutput() DashboardWidgetCompareWithPresentationOutput
	ToDashboardWidgetCompareWithPresentationOutputWithContext(context.Context) DashboardWidgetCompareWithPresentationOutput
}

type DashboardWidgetCompareWithPresentationArgs struct {
	Color pulumi.StringInput `pulumi:"color"`
	Name  pulumi.StringInput `pulumi:"name"`
}

func (DashboardWidgetCompareWithPresentationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetCompareWithPresentation)(nil)).Elem()
}

func (i DashboardWidgetCompareWithPresentationArgs) ToDashboardWidgetCompareWithPresentationOutput() DashboardWidgetCompareWithPresentationOutput {
	return i.ToDashboardWidgetCompareWithPresentationOutputWithContext(context.Background())
}

func (i DashboardWidgetCompareWithPresentationArgs) ToDashboardWidgetCompareWithPresentationOutputWithContext(ctx context.Context) DashboardWidgetCompareWithPresentationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetCompareWithPresentationOutput)
}

type DashboardWidgetCompareWithPresentationOutput struct{ *pulumi.OutputState }

func (DashboardWidgetCompareWithPresentationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetCompareWithPresentation)(nil)).Elem()
}

func (o DashboardWidgetCompareWithPresentationOutput) ToDashboardWidgetCompareWithPresentationOutput() DashboardWidgetCompareWithPresentationOutput {
	return o
}

func (o DashboardWidgetCompareWithPresentationOutput) ToDashboardWidgetCompareWithPresentationOutputWithContext(ctx context.Context) DashboardWidgetCompareWithPresentationOutput {
	return o
}

func (o DashboardWidgetCompareWithPresentationOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidgetCompareWithPresentation) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardWidgetCompareWithPresentationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidgetCompareWithPresentation) string { return v.Name }).(pulumi.StringOutput)
}

type DashboardWidgetMetric struct {
	Name   string   `pulumi:"name"`
	Scope  *string  `pulumi:"scope"`
	Units  *string  `pulumi:"units"`
	Values []string `pulumi:"values"`
}

// DashboardWidgetMetricInput is an input type that accepts DashboardWidgetMetricArgs and DashboardWidgetMetricOutput values.
// You can construct a concrete instance of `DashboardWidgetMetricInput` via:
//
//          DashboardWidgetMetricArgs{...}
type DashboardWidgetMetricInput interface {
	pulumi.Input

	ToDashboardWidgetMetricOutput() DashboardWidgetMetricOutput
	ToDashboardWidgetMetricOutputWithContext(context.Context) DashboardWidgetMetricOutput
}

type DashboardWidgetMetricArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Scope  pulumi.StringPtrInput   `pulumi:"scope"`
	Units  pulumi.StringPtrInput   `pulumi:"units"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardWidgetMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetMetric)(nil)).Elem()
}

func (i DashboardWidgetMetricArgs) ToDashboardWidgetMetricOutput() DashboardWidgetMetricOutput {
	return i.ToDashboardWidgetMetricOutputWithContext(context.Background())
}

func (i DashboardWidgetMetricArgs) ToDashboardWidgetMetricOutputWithContext(ctx context.Context) DashboardWidgetMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetMetricOutput)
}

// DashboardWidgetMetricArrayInput is an input type that accepts DashboardWidgetMetricArray and DashboardWidgetMetricArrayOutput values.
// You can construct a concrete instance of `DashboardWidgetMetricArrayInput` via:
//
//          DashboardWidgetMetricArray{ DashboardWidgetMetricArgs{...} }
type DashboardWidgetMetricArrayInput interface {
	pulumi.Input

	ToDashboardWidgetMetricArrayOutput() DashboardWidgetMetricArrayOutput
	ToDashboardWidgetMetricArrayOutputWithContext(context.Context) DashboardWidgetMetricArrayOutput
}

type DashboardWidgetMetricArray []DashboardWidgetMetricInput

func (DashboardWidgetMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidgetMetric)(nil)).Elem()
}

func (i DashboardWidgetMetricArray) ToDashboardWidgetMetricArrayOutput() DashboardWidgetMetricArrayOutput {
	return i.ToDashboardWidgetMetricArrayOutputWithContext(context.Background())
}

func (i DashboardWidgetMetricArray) ToDashboardWidgetMetricArrayOutputWithContext(ctx context.Context) DashboardWidgetMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetMetricArrayOutput)
}

type DashboardWidgetMetricOutput struct{ *pulumi.OutputState }

func (DashboardWidgetMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetMetric)(nil)).Elem()
}

func (o DashboardWidgetMetricOutput) ToDashboardWidgetMetricOutput() DashboardWidgetMetricOutput {
	return o
}

func (o DashboardWidgetMetricOutput) ToDashboardWidgetMetricOutputWithContext(ctx context.Context) DashboardWidgetMetricOutput {
	return o
}

func (o DashboardWidgetMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidgetMetric) string { return v.Name }).(pulumi.StringOutput)
}

func (o DashboardWidgetMetricOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidgetMetric) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetMetricOutput) Units() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidgetMetric) *string { return v.Units }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetMetricOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardWidgetMetric) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardWidgetMetricArrayOutput struct{ *pulumi.OutputState }

func (DashboardWidgetMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidgetMetric)(nil)).Elem()
}

func (o DashboardWidgetMetricArrayOutput) ToDashboardWidgetMetricArrayOutput() DashboardWidgetMetricArrayOutput {
	return o
}

func (o DashboardWidgetMetricArrayOutput) ToDashboardWidgetMetricArrayOutputWithContext(ctx context.Context) DashboardWidgetMetricArrayOutput {
	return o
}

func (o DashboardWidgetMetricArrayOutput) Index(i pulumi.IntInput) DashboardWidgetMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardWidgetMetric {
		return vs[0].([]DashboardWidgetMetric)[vs[1].(int)]
	}).(DashboardWidgetMetricOutput)
}

type EntityTagsTag struct {
	// The tag key.
	Key string `pulumi:"key"`
	// The tag values.
	Values []string `pulumi:"values"`
}

// EntityTagsTagInput is an input type that accepts EntityTagsTagArgs and EntityTagsTagOutput values.
// You can construct a concrete instance of `EntityTagsTagInput` via:
//
//          EntityTagsTagArgs{...}
type EntityTagsTagInput interface {
	pulumi.Input

	ToEntityTagsTagOutput() EntityTagsTagOutput
	ToEntityTagsTagOutputWithContext(context.Context) EntityTagsTagOutput
}

type EntityTagsTagArgs struct {
	// The tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// The tag values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EntityTagsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityTagsTag)(nil)).Elem()
}

func (i EntityTagsTagArgs) ToEntityTagsTagOutput() EntityTagsTagOutput {
	return i.ToEntityTagsTagOutputWithContext(context.Background())
}

func (i EntityTagsTagArgs) ToEntityTagsTagOutputWithContext(ctx context.Context) EntityTagsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityTagsTagOutput)
}

// EntityTagsTagArrayInput is an input type that accepts EntityTagsTagArray and EntityTagsTagArrayOutput values.
// You can construct a concrete instance of `EntityTagsTagArrayInput` via:
//
//          EntityTagsTagArray{ EntityTagsTagArgs{...} }
type EntityTagsTagArrayInput interface {
	pulumi.Input

	ToEntityTagsTagArrayOutput() EntityTagsTagArrayOutput
	ToEntityTagsTagArrayOutputWithContext(context.Context) EntityTagsTagArrayOutput
}

type EntityTagsTagArray []EntityTagsTagInput

func (EntityTagsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityTagsTag)(nil)).Elem()
}

func (i EntityTagsTagArray) ToEntityTagsTagArrayOutput() EntityTagsTagArrayOutput {
	return i.ToEntityTagsTagArrayOutputWithContext(context.Background())
}

func (i EntityTagsTagArray) ToEntityTagsTagArrayOutputWithContext(ctx context.Context) EntityTagsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityTagsTagArrayOutput)
}

type EntityTagsTagOutput struct{ *pulumi.OutputState }

func (EntityTagsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityTagsTag)(nil)).Elem()
}

func (o EntityTagsTagOutput) ToEntityTagsTagOutput() EntityTagsTagOutput {
	return o
}

func (o EntityTagsTagOutput) ToEntityTagsTagOutputWithContext(ctx context.Context) EntityTagsTagOutput {
	return o
}

// The tag key.
func (o EntityTagsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EntityTagsTag) string { return v.Key }).(pulumi.StringOutput)
}

// The tag values.
func (o EntityTagsTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EntityTagsTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EntityTagsTagArrayOutput struct{ *pulumi.OutputState }

func (EntityTagsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityTagsTag)(nil)).Elem()
}

func (o EntityTagsTagArrayOutput) ToEntityTagsTagArrayOutput() EntityTagsTagArrayOutput {
	return o
}

func (o EntityTagsTagArrayOutput) ToEntityTagsTagArrayOutputWithContext(ctx context.Context) EntityTagsTagArrayOutput {
	return o
}

func (o EntityTagsTagArrayOutput) Index(i pulumi.IntInput) EntityTagsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityTagsTag {
		return vs[0].([]EntityTagsTag)[vs[1].(int)]
	}).(EntityTagsTagOutput)
}

type InfraAlertConditionCritical struct {
	Duration     int      `pulumi:"duration"`
	TimeFunction *string  `pulumi:"timeFunction"`
	Value        *float64 `pulumi:"value"`
}

// InfraAlertConditionCriticalInput is an input type that accepts InfraAlertConditionCriticalArgs and InfraAlertConditionCriticalOutput values.
// You can construct a concrete instance of `InfraAlertConditionCriticalInput` via:
//
//          InfraAlertConditionCriticalArgs{...}
type InfraAlertConditionCriticalInput interface {
	pulumi.Input

	ToInfraAlertConditionCriticalOutput() InfraAlertConditionCriticalOutput
	ToInfraAlertConditionCriticalOutputWithContext(context.Context) InfraAlertConditionCriticalOutput
}

type InfraAlertConditionCriticalArgs struct {
	Duration     pulumi.IntInput        `pulumi:"duration"`
	TimeFunction pulumi.StringPtrInput  `pulumi:"timeFunction"`
	Value        pulumi.Float64PtrInput `pulumi:"value"`
}

func (InfraAlertConditionCriticalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfraAlertConditionCritical)(nil)).Elem()
}

func (i InfraAlertConditionCriticalArgs) ToInfraAlertConditionCriticalOutput() InfraAlertConditionCriticalOutput {
	return i.ToInfraAlertConditionCriticalOutputWithContext(context.Background())
}

func (i InfraAlertConditionCriticalArgs) ToInfraAlertConditionCriticalOutputWithContext(ctx context.Context) InfraAlertConditionCriticalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionCriticalOutput)
}

func (i InfraAlertConditionCriticalArgs) ToInfraAlertConditionCriticalPtrOutput() InfraAlertConditionCriticalPtrOutput {
	return i.ToInfraAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (i InfraAlertConditionCriticalArgs) ToInfraAlertConditionCriticalPtrOutputWithContext(ctx context.Context) InfraAlertConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionCriticalOutput).ToInfraAlertConditionCriticalPtrOutputWithContext(ctx)
}

// InfraAlertConditionCriticalPtrInput is an input type that accepts InfraAlertConditionCriticalArgs, InfraAlertConditionCriticalPtr and InfraAlertConditionCriticalPtrOutput values.
// You can construct a concrete instance of `InfraAlertConditionCriticalPtrInput` via:
//
//          InfraAlertConditionCriticalArgs{...}
//
//  or:
//
//          nil
type InfraAlertConditionCriticalPtrInput interface {
	pulumi.Input

	ToInfraAlertConditionCriticalPtrOutput() InfraAlertConditionCriticalPtrOutput
	ToInfraAlertConditionCriticalPtrOutputWithContext(context.Context) InfraAlertConditionCriticalPtrOutput
}

type infraAlertConditionCriticalPtrType InfraAlertConditionCriticalArgs

func InfraAlertConditionCriticalPtr(v *InfraAlertConditionCriticalArgs) InfraAlertConditionCriticalPtrInput {
	return (*infraAlertConditionCriticalPtrType)(v)
}

func (*infraAlertConditionCriticalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraAlertConditionCritical)(nil)).Elem()
}

func (i *infraAlertConditionCriticalPtrType) ToInfraAlertConditionCriticalPtrOutput() InfraAlertConditionCriticalPtrOutput {
	return i.ToInfraAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (i *infraAlertConditionCriticalPtrType) ToInfraAlertConditionCriticalPtrOutputWithContext(ctx context.Context) InfraAlertConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionCriticalPtrOutput)
}

type InfraAlertConditionCriticalOutput struct{ *pulumi.OutputState }

func (InfraAlertConditionCriticalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfraAlertConditionCritical)(nil)).Elem()
}

func (o InfraAlertConditionCriticalOutput) ToInfraAlertConditionCriticalOutput() InfraAlertConditionCriticalOutput {
	return o
}

func (o InfraAlertConditionCriticalOutput) ToInfraAlertConditionCriticalOutputWithContext(ctx context.Context) InfraAlertConditionCriticalOutput {
	return o
}

func (o InfraAlertConditionCriticalOutput) ToInfraAlertConditionCriticalPtrOutput() InfraAlertConditionCriticalPtrOutput {
	return o.ToInfraAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (o InfraAlertConditionCriticalOutput) ToInfraAlertConditionCriticalPtrOutputWithContext(ctx context.Context) InfraAlertConditionCriticalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfraAlertConditionCritical) *InfraAlertConditionCritical {
		return &v
	}).(InfraAlertConditionCriticalPtrOutput)
}

func (o InfraAlertConditionCriticalOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v InfraAlertConditionCritical) int { return v.Duration }).(pulumi.IntOutput)
}

func (o InfraAlertConditionCriticalOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfraAlertConditionCritical) *string { return v.TimeFunction }).(pulumi.StringPtrOutput)
}

func (o InfraAlertConditionCriticalOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v InfraAlertConditionCritical) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type InfraAlertConditionCriticalPtrOutput struct{ *pulumi.OutputState }

func (InfraAlertConditionCriticalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraAlertConditionCritical)(nil)).Elem()
}

func (o InfraAlertConditionCriticalPtrOutput) ToInfraAlertConditionCriticalPtrOutput() InfraAlertConditionCriticalPtrOutput {
	return o
}

func (o InfraAlertConditionCriticalPtrOutput) ToInfraAlertConditionCriticalPtrOutputWithContext(ctx context.Context) InfraAlertConditionCriticalPtrOutput {
	return o
}

func (o InfraAlertConditionCriticalPtrOutput) Elem() InfraAlertConditionCriticalOutput {
	return o.ApplyT(func(v *InfraAlertConditionCritical) InfraAlertConditionCritical {
		if v != nil {
			return *v
		}
		var ret InfraAlertConditionCritical
		return ret
	}).(InfraAlertConditionCriticalOutput)
}

func (o InfraAlertConditionCriticalPtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionCritical) *int {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.IntPtrOutput)
}

func (o InfraAlertConditionCriticalPtrOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionCritical) *string {
		if v == nil {
			return nil
		}
		return v.TimeFunction
	}).(pulumi.StringPtrOutput)
}

func (o InfraAlertConditionCriticalPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionCritical) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

type InfraAlertConditionWarning struct {
	Duration     int      `pulumi:"duration"`
	TimeFunction *string  `pulumi:"timeFunction"`
	Value        *float64 `pulumi:"value"`
}

// InfraAlertConditionWarningInput is an input type that accepts InfraAlertConditionWarningArgs and InfraAlertConditionWarningOutput values.
// You can construct a concrete instance of `InfraAlertConditionWarningInput` via:
//
//          InfraAlertConditionWarningArgs{...}
type InfraAlertConditionWarningInput interface {
	pulumi.Input

	ToInfraAlertConditionWarningOutput() InfraAlertConditionWarningOutput
	ToInfraAlertConditionWarningOutputWithContext(context.Context) InfraAlertConditionWarningOutput
}

type InfraAlertConditionWarningArgs struct {
	Duration     pulumi.IntInput        `pulumi:"duration"`
	TimeFunction pulumi.StringPtrInput  `pulumi:"timeFunction"`
	Value        pulumi.Float64PtrInput `pulumi:"value"`
}

func (InfraAlertConditionWarningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfraAlertConditionWarning)(nil)).Elem()
}

func (i InfraAlertConditionWarningArgs) ToInfraAlertConditionWarningOutput() InfraAlertConditionWarningOutput {
	return i.ToInfraAlertConditionWarningOutputWithContext(context.Background())
}

func (i InfraAlertConditionWarningArgs) ToInfraAlertConditionWarningOutputWithContext(ctx context.Context) InfraAlertConditionWarningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionWarningOutput)
}

func (i InfraAlertConditionWarningArgs) ToInfraAlertConditionWarningPtrOutput() InfraAlertConditionWarningPtrOutput {
	return i.ToInfraAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (i InfraAlertConditionWarningArgs) ToInfraAlertConditionWarningPtrOutputWithContext(ctx context.Context) InfraAlertConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionWarningOutput).ToInfraAlertConditionWarningPtrOutputWithContext(ctx)
}

// InfraAlertConditionWarningPtrInput is an input type that accepts InfraAlertConditionWarningArgs, InfraAlertConditionWarningPtr and InfraAlertConditionWarningPtrOutput values.
// You can construct a concrete instance of `InfraAlertConditionWarningPtrInput` via:
//
//          InfraAlertConditionWarningArgs{...}
//
//  or:
//
//          nil
type InfraAlertConditionWarningPtrInput interface {
	pulumi.Input

	ToInfraAlertConditionWarningPtrOutput() InfraAlertConditionWarningPtrOutput
	ToInfraAlertConditionWarningPtrOutputWithContext(context.Context) InfraAlertConditionWarningPtrOutput
}

type infraAlertConditionWarningPtrType InfraAlertConditionWarningArgs

func InfraAlertConditionWarningPtr(v *InfraAlertConditionWarningArgs) InfraAlertConditionWarningPtrInput {
	return (*infraAlertConditionWarningPtrType)(v)
}

func (*infraAlertConditionWarningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraAlertConditionWarning)(nil)).Elem()
}

func (i *infraAlertConditionWarningPtrType) ToInfraAlertConditionWarningPtrOutput() InfraAlertConditionWarningPtrOutput {
	return i.ToInfraAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (i *infraAlertConditionWarningPtrType) ToInfraAlertConditionWarningPtrOutputWithContext(ctx context.Context) InfraAlertConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionWarningPtrOutput)
}

type InfraAlertConditionWarningOutput struct{ *pulumi.OutputState }

func (InfraAlertConditionWarningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfraAlertConditionWarning)(nil)).Elem()
}

func (o InfraAlertConditionWarningOutput) ToInfraAlertConditionWarningOutput() InfraAlertConditionWarningOutput {
	return o
}

func (o InfraAlertConditionWarningOutput) ToInfraAlertConditionWarningOutputWithContext(ctx context.Context) InfraAlertConditionWarningOutput {
	return o
}

func (o InfraAlertConditionWarningOutput) ToInfraAlertConditionWarningPtrOutput() InfraAlertConditionWarningPtrOutput {
	return o.ToInfraAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (o InfraAlertConditionWarningOutput) ToInfraAlertConditionWarningPtrOutputWithContext(ctx context.Context) InfraAlertConditionWarningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfraAlertConditionWarning) *InfraAlertConditionWarning {
		return &v
	}).(InfraAlertConditionWarningPtrOutput)
}

func (o InfraAlertConditionWarningOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v InfraAlertConditionWarning) int { return v.Duration }).(pulumi.IntOutput)
}

func (o InfraAlertConditionWarningOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfraAlertConditionWarning) *string { return v.TimeFunction }).(pulumi.StringPtrOutput)
}

func (o InfraAlertConditionWarningOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v InfraAlertConditionWarning) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type InfraAlertConditionWarningPtrOutput struct{ *pulumi.OutputState }

func (InfraAlertConditionWarningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraAlertConditionWarning)(nil)).Elem()
}

func (o InfraAlertConditionWarningPtrOutput) ToInfraAlertConditionWarningPtrOutput() InfraAlertConditionWarningPtrOutput {
	return o
}

func (o InfraAlertConditionWarningPtrOutput) ToInfraAlertConditionWarningPtrOutputWithContext(ctx context.Context) InfraAlertConditionWarningPtrOutput {
	return o
}

func (o InfraAlertConditionWarningPtrOutput) Elem() InfraAlertConditionWarningOutput {
	return o.ApplyT(func(v *InfraAlertConditionWarning) InfraAlertConditionWarning {
		if v != nil {
			return *v
		}
		var ret InfraAlertConditionWarning
		return ret
	}).(InfraAlertConditionWarningOutput)
}

func (o InfraAlertConditionWarningPtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionWarning) *int {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.IntPtrOutput)
}

func (o InfraAlertConditionWarningPtrOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionWarning) *string {
		if v == nil {
			return nil
		}
		return v.TimeFunction
	}).(pulumi.StringPtrOutput)
}

func (o InfraAlertConditionWarningPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionWarning) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

type NrqlAlertConditionCritical struct {
	// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
	//
	// Deprecated: use `threshold_duration` attribute instead
	Duration *int `pulumi:"duration"`
	// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
	Operator *string `pulumi:"operator"`
	// The value which will trigger a violation. Must be `0` or greater.
	Threshold float64 `pulumi:"threshold"`
	// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
	// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
	ThresholdDuration *int `pulumi:"thresholdDuration"`
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
	ThresholdOccurrences *string `pulumi:"thresholdOccurrences"`
	// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
	//
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction *string `pulumi:"timeFunction"`
}

// NrqlAlertConditionCriticalInput is an input type that accepts NrqlAlertConditionCriticalArgs and NrqlAlertConditionCriticalOutput values.
// You can construct a concrete instance of `NrqlAlertConditionCriticalInput` via:
//
//          NrqlAlertConditionCriticalArgs{...}
type NrqlAlertConditionCriticalInput interface {
	pulumi.Input

	ToNrqlAlertConditionCriticalOutput() NrqlAlertConditionCriticalOutput
	ToNrqlAlertConditionCriticalOutputWithContext(context.Context) NrqlAlertConditionCriticalOutput
}

type NrqlAlertConditionCriticalArgs struct {
	// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
	//
	// Deprecated: use `threshold_duration` attribute instead
	Duration pulumi.IntPtrInput `pulumi:"duration"`
	// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// The value which will trigger a violation. Must be `0` or greater.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
	// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
	ThresholdDuration pulumi.IntPtrInput `pulumi:"thresholdDuration"`
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
	ThresholdOccurrences pulumi.StringPtrInput `pulumi:"thresholdOccurrences"`
	// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
	//
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction pulumi.StringPtrInput `pulumi:"timeFunction"`
}

func (NrqlAlertConditionCriticalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionCritical)(nil)).Elem()
}

func (i NrqlAlertConditionCriticalArgs) ToNrqlAlertConditionCriticalOutput() NrqlAlertConditionCriticalOutput {
	return i.ToNrqlAlertConditionCriticalOutputWithContext(context.Background())
}

func (i NrqlAlertConditionCriticalArgs) ToNrqlAlertConditionCriticalOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionCriticalOutput)
}

func (i NrqlAlertConditionCriticalArgs) ToNrqlAlertConditionCriticalPtrOutput() NrqlAlertConditionCriticalPtrOutput {
	return i.ToNrqlAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (i NrqlAlertConditionCriticalArgs) ToNrqlAlertConditionCriticalPtrOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionCriticalOutput).ToNrqlAlertConditionCriticalPtrOutputWithContext(ctx)
}

// NrqlAlertConditionCriticalPtrInput is an input type that accepts NrqlAlertConditionCriticalArgs, NrqlAlertConditionCriticalPtr and NrqlAlertConditionCriticalPtrOutput values.
// You can construct a concrete instance of `NrqlAlertConditionCriticalPtrInput` via:
//
//          NrqlAlertConditionCriticalArgs{...}
//
//  or:
//
//          nil
type NrqlAlertConditionCriticalPtrInput interface {
	pulumi.Input

	ToNrqlAlertConditionCriticalPtrOutput() NrqlAlertConditionCriticalPtrOutput
	ToNrqlAlertConditionCriticalPtrOutputWithContext(context.Context) NrqlAlertConditionCriticalPtrOutput
}

type nrqlAlertConditionCriticalPtrType NrqlAlertConditionCriticalArgs

func NrqlAlertConditionCriticalPtr(v *NrqlAlertConditionCriticalArgs) NrqlAlertConditionCriticalPtrInput {
	return (*nrqlAlertConditionCriticalPtrType)(v)
}

func (*nrqlAlertConditionCriticalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionCritical)(nil)).Elem()
}

func (i *nrqlAlertConditionCriticalPtrType) ToNrqlAlertConditionCriticalPtrOutput() NrqlAlertConditionCriticalPtrOutput {
	return i.ToNrqlAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (i *nrqlAlertConditionCriticalPtrType) ToNrqlAlertConditionCriticalPtrOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionCriticalPtrOutput)
}

type NrqlAlertConditionCriticalOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionCriticalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionCritical)(nil)).Elem()
}

func (o NrqlAlertConditionCriticalOutput) ToNrqlAlertConditionCriticalOutput() NrqlAlertConditionCriticalOutput {
	return o
}

func (o NrqlAlertConditionCriticalOutput) ToNrqlAlertConditionCriticalOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalOutput {
	return o
}

func (o NrqlAlertConditionCriticalOutput) ToNrqlAlertConditionCriticalPtrOutput() NrqlAlertConditionCriticalPtrOutput {
	return o.ToNrqlAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (o NrqlAlertConditionCriticalOutput) ToNrqlAlertConditionCriticalPtrOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NrqlAlertConditionCritical) *NrqlAlertConditionCritical {
		return &v
	}).(NrqlAlertConditionCriticalPtrOutput)
}

// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
//
// Deprecated: use `threshold_duration` attribute instead
func (o NrqlAlertConditionCriticalOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
func (o NrqlAlertConditionCriticalOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// The value which will trigger a violation. Must be `0` or greater.
func (o NrqlAlertConditionCriticalOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v NrqlAlertConditionCritical) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
func (o NrqlAlertConditionCriticalOutput) ThresholdDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *int { return v.ThresholdDuration }).(pulumi.IntPtrOutput)
}

// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
func (o NrqlAlertConditionCriticalOutput) ThresholdOccurrences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *string { return v.ThresholdOccurrences }).(pulumi.StringPtrOutput)
}

// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
//
// Deprecated: use `threshold_occurrences` attribute instead
func (o NrqlAlertConditionCriticalOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *string { return v.TimeFunction }).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionCriticalPtrOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionCriticalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionCritical)(nil)).Elem()
}

func (o NrqlAlertConditionCriticalPtrOutput) ToNrqlAlertConditionCriticalPtrOutput() NrqlAlertConditionCriticalPtrOutput {
	return o
}

func (o NrqlAlertConditionCriticalPtrOutput) ToNrqlAlertConditionCriticalPtrOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalPtrOutput {
	return o
}

func (o NrqlAlertConditionCriticalPtrOutput) Elem() NrqlAlertConditionCriticalOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) NrqlAlertConditionCritical {
		if v != nil {
			return *v
		}
		var ret NrqlAlertConditionCritical
		return ret
	}).(NrqlAlertConditionCriticalOutput)
}

// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
//
// Deprecated: use `threshold_duration` attribute instead
func (o NrqlAlertConditionCriticalPtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *int {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.IntPtrOutput)
}

// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
func (o NrqlAlertConditionCriticalPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// The value which will trigger a violation. Must be `0` or greater.
func (o NrqlAlertConditionCriticalPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *float64 {
		if v == nil {
			return nil
		}
		return &v.Threshold
	}).(pulumi.Float64PtrOutput)
}

// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
func (o NrqlAlertConditionCriticalPtrOutput) ThresholdDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *int {
		if v == nil {
			return nil
		}
		return v.ThresholdDuration
	}).(pulumi.IntPtrOutput)
}

// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
func (o NrqlAlertConditionCriticalPtrOutput) ThresholdOccurrences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdOccurrences
	}).(pulumi.StringPtrOutput)
}

// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
//
// Deprecated: use `threshold_occurrences` attribute instead
func (o NrqlAlertConditionCriticalPtrOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *string {
		if v == nil {
			return nil
		}
		return v.TimeFunction
	}).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionNrql struct {
	// Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated in one-minute time windows. The start time depends on this value. It's recommended to set this to 3 minutes. An offset of less than 3 minutes will trigger violations sooner, but you may see more false positives and negatives due to data latency. With `evaluationOffset` set to 3 minutes, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`.<br>
	// <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
	//
	// Deprecated: use `signal.aggregation_method` attribute instead
	EvaluationOffset *int `pulumi:"evaluationOffset"`
	// The NRQL query to execute for the condition.
	Query string `pulumi:"query"`
	// **DEPRECATED:** Use `evaluationOffset` instead. The value to be used in the `SINCE <X> minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive). <br>
	// <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
	//
	// Deprecated: use `signal.aggregation_method` attribute instead
	SinceValue *string `pulumi:"sinceValue"`
}

// NrqlAlertConditionNrqlInput is an input type that accepts NrqlAlertConditionNrqlArgs and NrqlAlertConditionNrqlOutput values.
// You can construct a concrete instance of `NrqlAlertConditionNrqlInput` via:
//
//          NrqlAlertConditionNrqlArgs{...}
type NrqlAlertConditionNrqlInput interface {
	pulumi.Input

	ToNrqlAlertConditionNrqlOutput() NrqlAlertConditionNrqlOutput
	ToNrqlAlertConditionNrqlOutputWithContext(context.Context) NrqlAlertConditionNrqlOutput
}

type NrqlAlertConditionNrqlArgs struct {
	// Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated in one-minute time windows. The start time depends on this value. It's recommended to set this to 3 minutes. An offset of less than 3 minutes will trigger violations sooner, but you may see more false positives and negatives due to data latency. With `evaluationOffset` set to 3 minutes, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`.<br>
	// <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
	//
	// Deprecated: use `signal.aggregation_method` attribute instead
	EvaluationOffset pulumi.IntPtrInput `pulumi:"evaluationOffset"`
	// The NRQL query to execute for the condition.
	Query pulumi.StringInput `pulumi:"query"`
	// **DEPRECATED:** Use `evaluationOffset` instead. The value to be used in the `SINCE <X> minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive). <br>
	// <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
	//
	// Deprecated: use `signal.aggregation_method` attribute instead
	SinceValue pulumi.StringPtrInput `pulumi:"sinceValue"`
}

func (NrqlAlertConditionNrqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionNrql)(nil)).Elem()
}

func (i NrqlAlertConditionNrqlArgs) ToNrqlAlertConditionNrqlOutput() NrqlAlertConditionNrqlOutput {
	return i.ToNrqlAlertConditionNrqlOutputWithContext(context.Background())
}

func (i NrqlAlertConditionNrqlArgs) ToNrqlAlertConditionNrqlOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionNrqlOutput)
}

func (i NrqlAlertConditionNrqlArgs) ToNrqlAlertConditionNrqlPtrOutput() NrqlAlertConditionNrqlPtrOutput {
	return i.ToNrqlAlertConditionNrqlPtrOutputWithContext(context.Background())
}

func (i NrqlAlertConditionNrqlArgs) ToNrqlAlertConditionNrqlPtrOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionNrqlOutput).ToNrqlAlertConditionNrqlPtrOutputWithContext(ctx)
}

// NrqlAlertConditionNrqlPtrInput is an input type that accepts NrqlAlertConditionNrqlArgs, NrqlAlertConditionNrqlPtr and NrqlAlertConditionNrqlPtrOutput values.
// You can construct a concrete instance of `NrqlAlertConditionNrqlPtrInput` via:
//
//          NrqlAlertConditionNrqlArgs{...}
//
//  or:
//
//          nil
type NrqlAlertConditionNrqlPtrInput interface {
	pulumi.Input

	ToNrqlAlertConditionNrqlPtrOutput() NrqlAlertConditionNrqlPtrOutput
	ToNrqlAlertConditionNrqlPtrOutputWithContext(context.Context) NrqlAlertConditionNrqlPtrOutput
}

type nrqlAlertConditionNrqlPtrType NrqlAlertConditionNrqlArgs

func NrqlAlertConditionNrqlPtr(v *NrqlAlertConditionNrqlArgs) NrqlAlertConditionNrqlPtrInput {
	return (*nrqlAlertConditionNrqlPtrType)(v)
}

func (*nrqlAlertConditionNrqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionNrql)(nil)).Elem()
}

func (i *nrqlAlertConditionNrqlPtrType) ToNrqlAlertConditionNrqlPtrOutput() NrqlAlertConditionNrqlPtrOutput {
	return i.ToNrqlAlertConditionNrqlPtrOutputWithContext(context.Background())
}

func (i *nrqlAlertConditionNrqlPtrType) ToNrqlAlertConditionNrqlPtrOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionNrqlPtrOutput)
}

type NrqlAlertConditionNrqlOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionNrqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionNrql)(nil)).Elem()
}

func (o NrqlAlertConditionNrqlOutput) ToNrqlAlertConditionNrqlOutput() NrqlAlertConditionNrqlOutput {
	return o
}

func (o NrqlAlertConditionNrqlOutput) ToNrqlAlertConditionNrqlOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlOutput {
	return o
}

func (o NrqlAlertConditionNrqlOutput) ToNrqlAlertConditionNrqlPtrOutput() NrqlAlertConditionNrqlPtrOutput {
	return o.ToNrqlAlertConditionNrqlPtrOutputWithContext(context.Background())
}

func (o NrqlAlertConditionNrqlOutput) ToNrqlAlertConditionNrqlPtrOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NrqlAlertConditionNrql) *NrqlAlertConditionNrql {
		return &v
	}).(NrqlAlertConditionNrqlPtrOutput)
}

// Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated in one-minute time windows. The start time depends on this value. It's recommended to set this to 3 minutes. An offset of less than 3 minutes will trigger violations sooner, but you may see more false positives and negatives due to data latency. With `evaluationOffset` set to 3 minutes, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`.<br>
// <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
//
// Deprecated: use `signal.aggregation_method` attribute instead
func (o NrqlAlertConditionNrqlOutput) EvaluationOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionNrql) *int { return v.EvaluationOffset }).(pulumi.IntPtrOutput)
}

// The NRQL query to execute for the condition.
func (o NrqlAlertConditionNrqlOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v NrqlAlertConditionNrql) string { return v.Query }).(pulumi.StringOutput)
}

// **DEPRECATED:** Use `evaluationOffset` instead. The value to be used in the `SINCE <X> minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive). <br>
// <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
//
// Deprecated: use `signal.aggregation_method` attribute instead
func (o NrqlAlertConditionNrqlOutput) SinceValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionNrql) *string { return v.SinceValue }).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionNrqlPtrOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionNrqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionNrql)(nil)).Elem()
}

func (o NrqlAlertConditionNrqlPtrOutput) ToNrqlAlertConditionNrqlPtrOutput() NrqlAlertConditionNrqlPtrOutput {
	return o
}

func (o NrqlAlertConditionNrqlPtrOutput) ToNrqlAlertConditionNrqlPtrOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlPtrOutput {
	return o
}

func (o NrqlAlertConditionNrqlPtrOutput) Elem() NrqlAlertConditionNrqlOutput {
	return o.ApplyT(func(v *NrqlAlertConditionNrql) NrqlAlertConditionNrql {
		if v != nil {
			return *v
		}
		var ret NrqlAlertConditionNrql
		return ret
	}).(NrqlAlertConditionNrqlOutput)
}

// Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated in one-minute time windows. The start time depends on this value. It's recommended to set this to 3 minutes. An offset of less than 3 minutes will trigger violations sooner, but you may see more false positives and negatives due to data latency. With `evaluationOffset` set to 3 minutes, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`.<br>
// <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
//
// Deprecated: use `signal.aggregation_method` attribute instead
func (o NrqlAlertConditionNrqlPtrOutput) EvaluationOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionNrql) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationOffset
	}).(pulumi.IntPtrOutput)
}

// The NRQL query to execute for the condition.
func (o NrqlAlertConditionNrqlPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionNrql) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

// **DEPRECATED:** Use `evaluationOffset` instead. The value to be used in the `SINCE <X> minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive). <br>
// <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
//
// Deprecated: use `signal.aggregation_method` attribute instead
func (o NrqlAlertConditionNrqlPtrOutput) SinceValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionNrql) *string {
		if v == nil {
			return nil
		}
		return v.SinceValue
	}).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionTerm struct {
	// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
	//
	// Deprecated: use `threshold_duration` attribute instead
	Duration *int `pulumi:"duration"`
	// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
	Operator *string `pulumi:"operator"`
	// `critical` or `warning`. Defaults to `critical`.
	Priority *string `pulumi:"priority"`
	// The value which will trigger a violation. Must be `0` or greater.
	Threshold float64 `pulumi:"threshold"`
	// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
	// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
	ThresholdDuration *int `pulumi:"thresholdDuration"`
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
	ThresholdOccurrences *string `pulumi:"thresholdOccurrences"`
	// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
	//
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction *string `pulumi:"timeFunction"`
}

// NrqlAlertConditionTermInput is an input type that accepts NrqlAlertConditionTermArgs and NrqlAlertConditionTermOutput values.
// You can construct a concrete instance of `NrqlAlertConditionTermInput` via:
//
//          NrqlAlertConditionTermArgs{...}
type NrqlAlertConditionTermInput interface {
	pulumi.Input

	ToNrqlAlertConditionTermOutput() NrqlAlertConditionTermOutput
	ToNrqlAlertConditionTermOutputWithContext(context.Context) NrqlAlertConditionTermOutput
}

type NrqlAlertConditionTermArgs struct {
	// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
	//
	// Deprecated: use `threshold_duration` attribute instead
	Duration pulumi.IntPtrInput `pulumi:"duration"`
	// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// `critical` or `warning`. Defaults to `critical`.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// The value which will trigger a violation. Must be `0` or greater.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
	// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
	ThresholdDuration pulumi.IntPtrInput `pulumi:"thresholdDuration"`
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
	ThresholdOccurrences pulumi.StringPtrInput `pulumi:"thresholdOccurrences"`
	// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
	//
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction pulumi.StringPtrInput `pulumi:"timeFunction"`
}

func (NrqlAlertConditionTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionTerm)(nil)).Elem()
}

func (i NrqlAlertConditionTermArgs) ToNrqlAlertConditionTermOutput() NrqlAlertConditionTermOutput {
	return i.ToNrqlAlertConditionTermOutputWithContext(context.Background())
}

func (i NrqlAlertConditionTermArgs) ToNrqlAlertConditionTermOutputWithContext(ctx context.Context) NrqlAlertConditionTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionTermOutput)
}

// NrqlAlertConditionTermArrayInput is an input type that accepts NrqlAlertConditionTermArray and NrqlAlertConditionTermArrayOutput values.
// You can construct a concrete instance of `NrqlAlertConditionTermArrayInput` via:
//
//          NrqlAlertConditionTermArray{ NrqlAlertConditionTermArgs{...} }
type NrqlAlertConditionTermArrayInput interface {
	pulumi.Input

	ToNrqlAlertConditionTermArrayOutput() NrqlAlertConditionTermArrayOutput
	ToNrqlAlertConditionTermArrayOutputWithContext(context.Context) NrqlAlertConditionTermArrayOutput
}

type NrqlAlertConditionTermArray []NrqlAlertConditionTermInput

func (NrqlAlertConditionTermArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NrqlAlertConditionTerm)(nil)).Elem()
}

func (i NrqlAlertConditionTermArray) ToNrqlAlertConditionTermArrayOutput() NrqlAlertConditionTermArrayOutput {
	return i.ToNrqlAlertConditionTermArrayOutputWithContext(context.Background())
}

func (i NrqlAlertConditionTermArray) ToNrqlAlertConditionTermArrayOutputWithContext(ctx context.Context) NrqlAlertConditionTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionTermArrayOutput)
}

type NrqlAlertConditionTermOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionTerm)(nil)).Elem()
}

func (o NrqlAlertConditionTermOutput) ToNrqlAlertConditionTermOutput() NrqlAlertConditionTermOutput {
	return o
}

func (o NrqlAlertConditionTermOutput) ToNrqlAlertConditionTermOutputWithContext(ctx context.Context) NrqlAlertConditionTermOutput {
	return o
}

// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
//
// Deprecated: use `threshold_duration` attribute instead
func (o NrqlAlertConditionTermOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
func (o NrqlAlertConditionTermOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// `critical` or `warning`. Defaults to `critical`.
func (o NrqlAlertConditionTermOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// The value which will trigger a violation. Must be `0` or greater.
func (o NrqlAlertConditionTermOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v NrqlAlertConditionTerm) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
func (o NrqlAlertConditionTermOutput) ThresholdDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *int { return v.ThresholdDuration }).(pulumi.IntPtrOutput)
}

// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
func (o NrqlAlertConditionTermOutput) ThresholdOccurrences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *string { return v.ThresholdOccurrences }).(pulumi.StringPtrOutput)
}

// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
//
// Deprecated: use `threshold_occurrences` attribute instead
func (o NrqlAlertConditionTermOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *string { return v.TimeFunction }).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionTermArrayOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionTermArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NrqlAlertConditionTerm)(nil)).Elem()
}

func (o NrqlAlertConditionTermArrayOutput) ToNrqlAlertConditionTermArrayOutput() NrqlAlertConditionTermArrayOutput {
	return o
}

func (o NrqlAlertConditionTermArrayOutput) ToNrqlAlertConditionTermArrayOutputWithContext(ctx context.Context) NrqlAlertConditionTermArrayOutput {
	return o
}

func (o NrqlAlertConditionTermArrayOutput) Index(i pulumi.IntInput) NrqlAlertConditionTermOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NrqlAlertConditionTerm {
		return vs[0].([]NrqlAlertConditionTerm)[vs[1].(int)]
	}).(NrqlAlertConditionTermOutput)
}

type NrqlAlertConditionWarning struct {
	// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
	//
	// Deprecated: use `threshold_duration` attribute instead
	Duration *int `pulumi:"duration"`
	// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
	Operator *string `pulumi:"operator"`
	// The value which will trigger a violation. Must be `0` or greater.
	Threshold float64 `pulumi:"threshold"`
	// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
	// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
	ThresholdDuration *int `pulumi:"thresholdDuration"`
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
	ThresholdOccurrences *string `pulumi:"thresholdOccurrences"`
	// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
	//
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction *string `pulumi:"timeFunction"`
}

// NrqlAlertConditionWarningInput is an input type that accepts NrqlAlertConditionWarningArgs and NrqlAlertConditionWarningOutput values.
// You can construct a concrete instance of `NrqlAlertConditionWarningInput` via:
//
//          NrqlAlertConditionWarningArgs{...}
type NrqlAlertConditionWarningInput interface {
	pulumi.Input

	ToNrqlAlertConditionWarningOutput() NrqlAlertConditionWarningOutput
	ToNrqlAlertConditionWarningOutputWithContext(context.Context) NrqlAlertConditionWarningOutput
}

type NrqlAlertConditionWarningArgs struct {
	// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
	//
	// Deprecated: use `threshold_duration` attribute instead
	Duration pulumi.IntPtrInput `pulumi:"duration"`
	// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// The value which will trigger a violation. Must be `0` or greater.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
	// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
	ThresholdDuration pulumi.IntPtrInput `pulumi:"thresholdDuration"`
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
	ThresholdOccurrences pulumi.StringPtrInput `pulumi:"thresholdOccurrences"`
	// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
	//
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction pulumi.StringPtrInput `pulumi:"timeFunction"`
}

func (NrqlAlertConditionWarningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionWarning)(nil)).Elem()
}

func (i NrqlAlertConditionWarningArgs) ToNrqlAlertConditionWarningOutput() NrqlAlertConditionWarningOutput {
	return i.ToNrqlAlertConditionWarningOutputWithContext(context.Background())
}

func (i NrqlAlertConditionWarningArgs) ToNrqlAlertConditionWarningOutputWithContext(ctx context.Context) NrqlAlertConditionWarningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionWarningOutput)
}

func (i NrqlAlertConditionWarningArgs) ToNrqlAlertConditionWarningPtrOutput() NrqlAlertConditionWarningPtrOutput {
	return i.ToNrqlAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (i NrqlAlertConditionWarningArgs) ToNrqlAlertConditionWarningPtrOutputWithContext(ctx context.Context) NrqlAlertConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionWarningOutput).ToNrqlAlertConditionWarningPtrOutputWithContext(ctx)
}

// NrqlAlertConditionWarningPtrInput is an input type that accepts NrqlAlertConditionWarningArgs, NrqlAlertConditionWarningPtr and NrqlAlertConditionWarningPtrOutput values.
// You can construct a concrete instance of `NrqlAlertConditionWarningPtrInput` via:
//
//          NrqlAlertConditionWarningArgs{...}
//
//  or:
//
//          nil
type NrqlAlertConditionWarningPtrInput interface {
	pulumi.Input

	ToNrqlAlertConditionWarningPtrOutput() NrqlAlertConditionWarningPtrOutput
	ToNrqlAlertConditionWarningPtrOutputWithContext(context.Context) NrqlAlertConditionWarningPtrOutput
}

type nrqlAlertConditionWarningPtrType NrqlAlertConditionWarningArgs

func NrqlAlertConditionWarningPtr(v *NrqlAlertConditionWarningArgs) NrqlAlertConditionWarningPtrInput {
	return (*nrqlAlertConditionWarningPtrType)(v)
}

func (*nrqlAlertConditionWarningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionWarning)(nil)).Elem()
}

func (i *nrqlAlertConditionWarningPtrType) ToNrqlAlertConditionWarningPtrOutput() NrqlAlertConditionWarningPtrOutput {
	return i.ToNrqlAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (i *nrqlAlertConditionWarningPtrType) ToNrqlAlertConditionWarningPtrOutputWithContext(ctx context.Context) NrqlAlertConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionWarningPtrOutput)
}

type NrqlAlertConditionWarningOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionWarningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionWarning)(nil)).Elem()
}

func (o NrqlAlertConditionWarningOutput) ToNrqlAlertConditionWarningOutput() NrqlAlertConditionWarningOutput {
	return o
}

func (o NrqlAlertConditionWarningOutput) ToNrqlAlertConditionWarningOutputWithContext(ctx context.Context) NrqlAlertConditionWarningOutput {
	return o
}

func (o NrqlAlertConditionWarningOutput) ToNrqlAlertConditionWarningPtrOutput() NrqlAlertConditionWarningPtrOutput {
	return o.ToNrqlAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (o NrqlAlertConditionWarningOutput) ToNrqlAlertConditionWarningPtrOutputWithContext(ctx context.Context) NrqlAlertConditionWarningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NrqlAlertConditionWarning) *NrqlAlertConditionWarning {
		return &v
	}).(NrqlAlertConditionWarningPtrOutput)
}

// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
//
// Deprecated: use `threshold_duration` attribute instead
func (o NrqlAlertConditionWarningOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
func (o NrqlAlertConditionWarningOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// The value which will trigger a violation. Must be `0` or greater.
func (o NrqlAlertConditionWarningOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v NrqlAlertConditionWarning) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
func (o NrqlAlertConditionWarningOutput) ThresholdDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *int { return v.ThresholdDuration }).(pulumi.IntPtrOutput)
}

// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
func (o NrqlAlertConditionWarningOutput) ThresholdOccurrences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *string { return v.ThresholdOccurrences }).(pulumi.StringPtrOutput)
}

// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
//
// Deprecated: use `threshold_occurrences` attribute instead
func (o NrqlAlertConditionWarningOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *string { return v.TimeFunction }).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionWarningPtrOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionWarningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionWarning)(nil)).Elem()
}

func (o NrqlAlertConditionWarningPtrOutput) ToNrqlAlertConditionWarningPtrOutput() NrqlAlertConditionWarningPtrOutput {
	return o
}

func (o NrqlAlertConditionWarningPtrOutput) ToNrqlAlertConditionWarningPtrOutputWithContext(ctx context.Context) NrqlAlertConditionWarningPtrOutput {
	return o
}

func (o NrqlAlertConditionWarningPtrOutput) Elem() NrqlAlertConditionWarningOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) NrqlAlertConditionWarning {
		if v != nil {
			return *v
		}
		var ret NrqlAlertConditionWarning
		return ret
	}).(NrqlAlertConditionWarningOutput)
}

// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
//
// Deprecated: use `threshold_duration` attribute instead
func (o NrqlAlertConditionWarningPtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *int {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.IntPtrOutput)
}

// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
func (o NrqlAlertConditionWarningPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// The value which will trigger a violation. Must be `0` or greater.
func (o NrqlAlertConditionWarningPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *float64 {
		if v == nil {
			return nil
		}
		return &v.Threshold
	}).(pulumi.Float64PtrOutput)
}

// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
func (o NrqlAlertConditionWarningPtrOutput) ThresholdDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *int {
		if v == nil {
			return nil
		}
		return v.ThresholdDuration
	}).(pulumi.IntPtrOutput)
}

// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
func (o NrqlAlertConditionWarningPtrOutput) ThresholdOccurrences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdOccurrences
	}).(pulumi.StringPtrOutput)
}

// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
//
// Deprecated: use `threshold_occurrences` attribute instead
func (o NrqlAlertConditionWarningPtrOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *string {
		if v == nil {
			return nil
		}
		return v.TimeFunction
	}).(pulumi.StringPtrOutput)
}

type OneDashboardPage struct {
	// Brief text describing the dashboard.
	Description *string `pulumi:"description"`
	// The unique entity identifier of the dashboard page in New Relic.
	Guid *string `pulumi:"guid"`
	// The title of the dashboard.
	Name string `pulumi:"name"`
	// (Optional) A nested block that describes an Area widget.  See Nested widget blocks below for details.
	WidgetAreas []OneDashboardPageWidgetArea `pulumi:"widgetAreas"`
	// (Optional) A nested block that describes a Bar widget.  See Nested widget blocks below for details.
	WidgetBars []OneDashboardPageWidgetBar `pulumi:"widgetBars"`
	// (Optional) A nested block that describes a Billboard widget.  See Nested widget blocks below for details.
	WidgetBillboards []OneDashboardPageWidgetBillboard `pulumi:"widgetBillboards"`
	// (Optional) A nested block that describes a Bullet widget.  See Nested widget blocks below for details.
	WidgetBullets []OneDashboardPageWidgetBullet `pulumi:"widgetBullets"`
	// (Optional) A nested block that describes a Funnel widget.  See Nested widget blocks below for details.
	WidgetFunnels []OneDashboardPageWidgetFunnel `pulumi:"widgetFunnels"`
	// (Optional) A nested block that describes a Heatmap widget.  See Nested widget blocks below for details.
	WidgetHeatmaps []OneDashboardPageWidgetHeatmap `pulumi:"widgetHeatmaps"`
	// (Optional) A nested block that describes a Histogram widget.  See Nested widget blocks below for details.
	WidgetHistograms []OneDashboardPageWidgetHistogram `pulumi:"widgetHistograms"`
	// (Optional) A nested block that describes a JSON widget.  See Nested widget blocks below for details.
	WidgetJsons []OneDashboardPageWidgetJson `pulumi:"widgetJsons"`
	// (Optional) A nested block that describes a Line widget.  See Nested widget blocks below for details.
	WidgetLines []OneDashboardPageWidgetLine `pulumi:"widgetLines"`
	// (Optional) A nested block that describes a Markdown widget.  See Nested widget blocks below for details.
	WidgetMarkdowns []OneDashboardPageWidgetMarkdown `pulumi:"widgetMarkdowns"`
	// (Optional) A nested block that describes a Pie widget.  See Nested widget blocks below for details.
	WidgetPies []OneDashboardPageWidgetPy `pulumi:"widgetPies"`
	// (Optional) A nested block that describes a Stacked Bar widget. See Nested widget blocks below for details.
	WidgetStackedBars []OneDashboardPageWidgetStackedBar `pulumi:"widgetStackedBars"`
	// (Optional) A nested block that describes a Table widget.  See Nested widget blocks below for details.
	WidgetTables []OneDashboardPageWidgetTable `pulumi:"widgetTables"`
}

// OneDashboardPageInput is an input type that accepts OneDashboardPageArgs and OneDashboardPageOutput values.
// You can construct a concrete instance of `OneDashboardPageInput` via:
//
//          OneDashboardPageArgs{...}
type OneDashboardPageInput interface {
	pulumi.Input

	ToOneDashboardPageOutput() OneDashboardPageOutput
	ToOneDashboardPageOutputWithContext(context.Context) OneDashboardPageOutput
}

type OneDashboardPageArgs struct {
	// Brief text describing the dashboard.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The unique entity identifier of the dashboard page in New Relic.
	Guid pulumi.StringPtrInput `pulumi:"guid"`
	// The title of the dashboard.
	Name pulumi.StringInput `pulumi:"name"`
	// (Optional) A nested block that describes an Area widget.  See Nested widget blocks below for details.
	WidgetAreas OneDashboardPageWidgetAreaArrayInput `pulumi:"widgetAreas"`
	// (Optional) A nested block that describes a Bar widget.  See Nested widget blocks below for details.
	WidgetBars OneDashboardPageWidgetBarArrayInput `pulumi:"widgetBars"`
	// (Optional) A nested block that describes a Billboard widget.  See Nested widget blocks below for details.
	WidgetBillboards OneDashboardPageWidgetBillboardArrayInput `pulumi:"widgetBillboards"`
	// (Optional) A nested block that describes a Bullet widget.  See Nested widget blocks below for details.
	WidgetBullets OneDashboardPageWidgetBulletArrayInput `pulumi:"widgetBullets"`
	// (Optional) A nested block that describes a Funnel widget.  See Nested widget blocks below for details.
	WidgetFunnels OneDashboardPageWidgetFunnelArrayInput `pulumi:"widgetFunnels"`
	// (Optional) A nested block that describes a Heatmap widget.  See Nested widget blocks below for details.
	WidgetHeatmaps OneDashboardPageWidgetHeatmapArrayInput `pulumi:"widgetHeatmaps"`
	// (Optional) A nested block that describes a Histogram widget.  See Nested widget blocks below for details.
	WidgetHistograms OneDashboardPageWidgetHistogramArrayInput `pulumi:"widgetHistograms"`
	// (Optional) A nested block that describes a JSON widget.  See Nested widget blocks below for details.
	WidgetJsons OneDashboardPageWidgetJsonArrayInput `pulumi:"widgetJsons"`
	// (Optional) A nested block that describes a Line widget.  See Nested widget blocks below for details.
	WidgetLines OneDashboardPageWidgetLineArrayInput `pulumi:"widgetLines"`
	// (Optional) A nested block that describes a Markdown widget.  See Nested widget blocks below for details.
	WidgetMarkdowns OneDashboardPageWidgetMarkdownArrayInput `pulumi:"widgetMarkdowns"`
	// (Optional) A nested block that describes a Pie widget.  See Nested widget blocks below for details.
	WidgetPies OneDashboardPageWidgetPyArrayInput `pulumi:"widgetPies"`
	// (Optional) A nested block that describes a Stacked Bar widget. See Nested widget blocks below for details.
	WidgetStackedBars OneDashboardPageWidgetStackedBarArrayInput `pulumi:"widgetStackedBars"`
	// (Optional) A nested block that describes a Table widget.  See Nested widget blocks below for details.
	WidgetTables OneDashboardPageWidgetTableArrayInput `pulumi:"widgetTables"`
}

func (OneDashboardPageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPage)(nil)).Elem()
}

func (i OneDashboardPageArgs) ToOneDashboardPageOutput() OneDashboardPageOutput {
	return i.ToOneDashboardPageOutputWithContext(context.Background())
}

func (i OneDashboardPageArgs) ToOneDashboardPageOutputWithContext(ctx context.Context) OneDashboardPageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageOutput)
}

// OneDashboardPageArrayInput is an input type that accepts OneDashboardPageArray and OneDashboardPageArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageArrayInput` via:
//
//          OneDashboardPageArray{ OneDashboardPageArgs{...} }
type OneDashboardPageArrayInput interface {
	pulumi.Input

	ToOneDashboardPageArrayOutput() OneDashboardPageArrayOutput
	ToOneDashboardPageArrayOutputWithContext(context.Context) OneDashboardPageArrayOutput
}

type OneDashboardPageArray []OneDashboardPageInput

func (OneDashboardPageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPage)(nil)).Elem()
}

func (i OneDashboardPageArray) ToOneDashboardPageArrayOutput() OneDashboardPageArrayOutput {
	return i.ToOneDashboardPageArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageArray) ToOneDashboardPageArrayOutputWithContext(ctx context.Context) OneDashboardPageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageArrayOutput)
}

type OneDashboardPageOutput struct{ *pulumi.OutputState }

func (OneDashboardPageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPage)(nil)).Elem()
}

func (o OneDashboardPageOutput) ToOneDashboardPageOutput() OneDashboardPageOutput {
	return o
}

func (o OneDashboardPageOutput) ToOneDashboardPageOutputWithContext(ctx context.Context) OneDashboardPageOutput {
	return o
}

// Brief text describing the dashboard.
func (o OneDashboardPageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPage) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique entity identifier of the dashboard page in New Relic.
func (o OneDashboardPageOutput) Guid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPage) *string { return v.Guid }).(pulumi.StringPtrOutput)
}

// The title of the dashboard.
func (o OneDashboardPageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPage) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional) A nested block that describes an Area widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetAreas() OneDashboardPageWidgetAreaArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetArea { return v.WidgetAreas }).(OneDashboardPageWidgetAreaArrayOutput)
}

// (Optional) A nested block that describes a Bar widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetBars() OneDashboardPageWidgetBarArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetBar { return v.WidgetBars }).(OneDashboardPageWidgetBarArrayOutput)
}

// (Optional) A nested block that describes a Billboard widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetBillboards() OneDashboardPageWidgetBillboardArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetBillboard { return v.WidgetBillboards }).(OneDashboardPageWidgetBillboardArrayOutput)
}

// (Optional) A nested block that describes a Bullet widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetBullets() OneDashboardPageWidgetBulletArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetBullet { return v.WidgetBullets }).(OneDashboardPageWidgetBulletArrayOutput)
}

// (Optional) A nested block that describes a Funnel widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetFunnels() OneDashboardPageWidgetFunnelArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetFunnel { return v.WidgetFunnels }).(OneDashboardPageWidgetFunnelArrayOutput)
}

// (Optional) A nested block that describes a Heatmap widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetHeatmaps() OneDashboardPageWidgetHeatmapArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetHeatmap { return v.WidgetHeatmaps }).(OneDashboardPageWidgetHeatmapArrayOutput)
}

// (Optional) A nested block that describes a Histogram widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetHistograms() OneDashboardPageWidgetHistogramArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetHistogram { return v.WidgetHistograms }).(OneDashboardPageWidgetHistogramArrayOutput)
}

// (Optional) A nested block that describes a JSON widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetJsons() OneDashboardPageWidgetJsonArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetJson { return v.WidgetJsons }).(OneDashboardPageWidgetJsonArrayOutput)
}

// (Optional) A nested block that describes a Line widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetLines() OneDashboardPageWidgetLineArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetLine { return v.WidgetLines }).(OneDashboardPageWidgetLineArrayOutput)
}

// (Optional) A nested block that describes a Markdown widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetMarkdowns() OneDashboardPageWidgetMarkdownArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetMarkdown { return v.WidgetMarkdowns }).(OneDashboardPageWidgetMarkdownArrayOutput)
}

// (Optional) A nested block that describes a Pie widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetPies() OneDashboardPageWidgetPyArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetPy { return v.WidgetPies }).(OneDashboardPageWidgetPyArrayOutput)
}

// (Optional) A nested block that describes a Stacked Bar widget. See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetStackedBars() OneDashboardPageWidgetStackedBarArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetStackedBar { return v.WidgetStackedBars }).(OneDashboardPageWidgetStackedBarArrayOutput)
}

// (Optional) A nested block that describes a Table widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetTables() OneDashboardPageWidgetTableArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetTable { return v.WidgetTables }).(OneDashboardPageWidgetTableArrayOutput)
}

type OneDashboardPageArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPage)(nil)).Elem()
}

func (o OneDashboardPageArrayOutput) ToOneDashboardPageArrayOutput() OneDashboardPageArrayOutput {
	return o
}

func (o OneDashboardPageArrayOutput) ToOneDashboardPageArrayOutputWithContext(ctx context.Context) OneDashboardPageArrayOutput {
	return o
}

func (o OneDashboardPageArrayOutput) Index(i pulumi.IntInput) OneDashboardPageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPage {
		return vs[0].([]OneDashboardPage)[vs[1].(int)]
	}).(OneDashboardPageOutput)
}

type OneDashboardPageWidgetArea struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries []OneDashboardPageWidgetAreaNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetAreaInput is an input type that accepts OneDashboardPageWidgetAreaArgs and OneDashboardPageWidgetAreaOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetAreaInput` via:
//
//          OneDashboardPageWidgetAreaArgs{...}
type OneDashboardPageWidgetAreaInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetAreaOutput() OneDashboardPageWidgetAreaOutput
	ToOneDashboardPageWidgetAreaOutputWithContext(context.Context) OneDashboardPageWidgetAreaOutput
}

type OneDashboardPageWidgetAreaArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries OneDashboardPageWidgetAreaNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetAreaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetArea)(nil)).Elem()
}

func (i OneDashboardPageWidgetAreaArgs) ToOneDashboardPageWidgetAreaOutput() OneDashboardPageWidgetAreaOutput {
	return i.ToOneDashboardPageWidgetAreaOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetAreaArgs) ToOneDashboardPageWidgetAreaOutputWithContext(ctx context.Context) OneDashboardPageWidgetAreaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetAreaOutput)
}

// OneDashboardPageWidgetAreaArrayInput is an input type that accepts OneDashboardPageWidgetAreaArray and OneDashboardPageWidgetAreaArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetAreaArrayInput` via:
//
//          OneDashboardPageWidgetAreaArray{ OneDashboardPageWidgetAreaArgs{...} }
type OneDashboardPageWidgetAreaArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetAreaArrayOutput() OneDashboardPageWidgetAreaArrayOutput
	ToOneDashboardPageWidgetAreaArrayOutputWithContext(context.Context) OneDashboardPageWidgetAreaArrayOutput
}

type OneDashboardPageWidgetAreaArray []OneDashboardPageWidgetAreaInput

func (OneDashboardPageWidgetAreaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetArea)(nil)).Elem()
}

func (i OneDashboardPageWidgetAreaArray) ToOneDashboardPageWidgetAreaArrayOutput() OneDashboardPageWidgetAreaArrayOutput {
	return i.ToOneDashboardPageWidgetAreaArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetAreaArray) ToOneDashboardPageWidgetAreaArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetAreaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetAreaArrayOutput)
}

type OneDashboardPageWidgetAreaOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetAreaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetArea)(nil)).Elem()
}

func (o OneDashboardPageWidgetAreaOutput) ToOneDashboardPageWidgetAreaOutput() OneDashboardPageWidgetAreaOutput {
	return o
}

func (o OneDashboardPageWidgetAreaOutput) ToOneDashboardPageWidgetAreaOutputWithContext(ctx context.Context) OneDashboardPageWidgetAreaOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetAreaOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetArea) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetAreaOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetArea) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetAreaOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetArea) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
func (o OneDashboardPageWidgetAreaOutput) NrqlQueries() OneDashboardPageWidgetAreaNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetArea) []OneDashboardPageWidgetAreaNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetAreaNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetAreaOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetArea) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetAreaOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetArea) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetAreaOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetArea) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetAreaArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetAreaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetArea)(nil)).Elem()
}

func (o OneDashboardPageWidgetAreaArrayOutput) ToOneDashboardPageWidgetAreaArrayOutput() OneDashboardPageWidgetAreaArrayOutput {
	return o
}

func (o OneDashboardPageWidgetAreaArrayOutput) ToOneDashboardPageWidgetAreaArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetAreaArrayOutput {
	return o
}

func (o OneDashboardPageWidgetAreaArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetAreaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetArea {
		return vs[0].([]OneDashboardPageWidgetArea)[vs[1].(int)]
	}).(OneDashboardPageWidgetAreaOutput)
}

type OneDashboardPageWidgetAreaNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetAreaNrqlQueryInput is an input type that accepts OneDashboardPageWidgetAreaNrqlQueryArgs and OneDashboardPageWidgetAreaNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetAreaNrqlQueryInput` via:
//
//          OneDashboardPageWidgetAreaNrqlQueryArgs{...}
type OneDashboardPageWidgetAreaNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetAreaNrqlQueryOutput() OneDashboardPageWidgetAreaNrqlQueryOutput
	ToOneDashboardPageWidgetAreaNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetAreaNrqlQueryOutput
}

type OneDashboardPageWidgetAreaNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetAreaNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetAreaNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetAreaNrqlQueryArgs) ToOneDashboardPageWidgetAreaNrqlQueryOutput() OneDashboardPageWidgetAreaNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetAreaNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetAreaNrqlQueryArgs) ToOneDashboardPageWidgetAreaNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetAreaNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetAreaNrqlQueryOutput)
}

// OneDashboardPageWidgetAreaNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetAreaNrqlQueryArray and OneDashboardPageWidgetAreaNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetAreaNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetAreaNrqlQueryArray{ OneDashboardPageWidgetAreaNrqlQueryArgs{...} }
type OneDashboardPageWidgetAreaNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetAreaNrqlQueryArrayOutput() OneDashboardPageWidgetAreaNrqlQueryArrayOutput
	ToOneDashboardPageWidgetAreaNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetAreaNrqlQueryArrayOutput
}

type OneDashboardPageWidgetAreaNrqlQueryArray []OneDashboardPageWidgetAreaNrqlQueryInput

func (OneDashboardPageWidgetAreaNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetAreaNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetAreaNrqlQueryArray) ToOneDashboardPageWidgetAreaNrqlQueryArrayOutput() OneDashboardPageWidgetAreaNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetAreaNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetAreaNrqlQueryArray) ToOneDashboardPageWidgetAreaNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetAreaNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetAreaNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetAreaNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetAreaNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetAreaNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetAreaNrqlQueryOutput) ToOneDashboardPageWidgetAreaNrqlQueryOutput() OneDashboardPageWidgetAreaNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetAreaNrqlQueryOutput) ToOneDashboardPageWidgetAreaNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetAreaNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetAreaNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetAreaNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetAreaNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetAreaNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetAreaNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetAreaNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetAreaNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetAreaNrqlQueryArrayOutput) ToOneDashboardPageWidgetAreaNrqlQueryArrayOutput() OneDashboardPageWidgetAreaNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetAreaNrqlQueryArrayOutput) ToOneDashboardPageWidgetAreaNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetAreaNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetAreaNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetAreaNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetAreaNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetAreaNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetAreaNrqlQueryOutput)
}

type OneDashboardPageWidgetBar struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column                 int   `pulumi:"column"`
	FilterCurrentDashboard *bool `pulumi:"filterCurrentDashboard"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height            *int     `pulumi:"height"`
	Id                *string  `pulumi:"id"`
	LinkedEntityGuids []string `pulumi:"linkedEntityGuids"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries []OneDashboardPageWidgetBarNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetBarInput is an input type that accepts OneDashboardPageWidgetBarArgs and OneDashboardPageWidgetBarOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBarInput` via:
//
//          OneDashboardPageWidgetBarArgs{...}
type OneDashboardPageWidgetBarInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBarOutput() OneDashboardPageWidgetBarOutput
	ToOneDashboardPageWidgetBarOutputWithContext(context.Context) OneDashboardPageWidgetBarOutput
}

type OneDashboardPageWidgetBarArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column                 pulumi.IntInput     `pulumi:"column"`
	FilterCurrentDashboard pulumi.BoolPtrInput `pulumi:"filterCurrentDashboard"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height            pulumi.IntPtrInput      `pulumi:"height"`
	Id                pulumi.StringPtrInput   `pulumi:"id"`
	LinkedEntityGuids pulumi.StringArrayInput `pulumi:"linkedEntityGuids"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries OneDashboardPageWidgetBarNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetBarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBar)(nil)).Elem()
}

func (i OneDashboardPageWidgetBarArgs) ToOneDashboardPageWidgetBarOutput() OneDashboardPageWidgetBarOutput {
	return i.ToOneDashboardPageWidgetBarOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBarArgs) ToOneDashboardPageWidgetBarOutputWithContext(ctx context.Context) OneDashboardPageWidgetBarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBarOutput)
}

// OneDashboardPageWidgetBarArrayInput is an input type that accepts OneDashboardPageWidgetBarArray and OneDashboardPageWidgetBarArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBarArrayInput` via:
//
//          OneDashboardPageWidgetBarArray{ OneDashboardPageWidgetBarArgs{...} }
type OneDashboardPageWidgetBarArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBarArrayOutput() OneDashboardPageWidgetBarArrayOutput
	ToOneDashboardPageWidgetBarArrayOutputWithContext(context.Context) OneDashboardPageWidgetBarArrayOutput
}

type OneDashboardPageWidgetBarArray []OneDashboardPageWidgetBarInput

func (OneDashboardPageWidgetBarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBar)(nil)).Elem()
}

func (i OneDashboardPageWidgetBarArray) ToOneDashboardPageWidgetBarArrayOutput() OneDashboardPageWidgetBarArrayOutput {
	return i.ToOneDashboardPageWidgetBarArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBarArray) ToOneDashboardPageWidgetBarArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBarArrayOutput)
}

type OneDashboardPageWidgetBarOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBar)(nil)).Elem()
}

func (o OneDashboardPageWidgetBarOutput) ToOneDashboardPageWidgetBarOutput() OneDashboardPageWidgetBarOutput {
	return o
}

func (o OneDashboardPageWidgetBarOutput) ToOneDashboardPageWidgetBarOutputWithContext(ctx context.Context) OneDashboardPageWidgetBarOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetBarOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) int { return v.Column }).(pulumi.IntOutput)
}

func (o OneDashboardPageWidgetBarOutput) FilterCurrentDashboard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) *bool { return v.FilterCurrentDashboard }).(pulumi.BoolPtrOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetBarOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetBarOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o OneDashboardPageWidgetBarOutput) LinkedEntityGuids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) []string { return v.LinkedEntityGuids }).(pulumi.StringArrayOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
func (o OneDashboardPageWidgetBarOutput) NrqlQueries() OneDashboardPageWidgetBarNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) []OneDashboardPageWidgetBarNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetBarNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetBarOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetBarOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetBarOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetBarArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBar)(nil)).Elem()
}

func (o OneDashboardPageWidgetBarArrayOutput) ToOneDashboardPageWidgetBarArrayOutput() OneDashboardPageWidgetBarArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBarArrayOutput) ToOneDashboardPageWidgetBarArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBarArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBarArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetBarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetBar {
		return vs[0].([]OneDashboardPageWidgetBar)[vs[1].(int)]
	}).(OneDashboardPageWidgetBarOutput)
}

type OneDashboardPageWidgetBarNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetBarNrqlQueryInput is an input type that accepts OneDashboardPageWidgetBarNrqlQueryArgs and OneDashboardPageWidgetBarNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBarNrqlQueryInput` via:
//
//          OneDashboardPageWidgetBarNrqlQueryArgs{...}
type OneDashboardPageWidgetBarNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBarNrqlQueryOutput() OneDashboardPageWidgetBarNrqlQueryOutput
	ToOneDashboardPageWidgetBarNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetBarNrqlQueryOutput
}

type OneDashboardPageWidgetBarNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetBarNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBarNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetBarNrqlQueryArgs) ToOneDashboardPageWidgetBarNrqlQueryOutput() OneDashboardPageWidgetBarNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetBarNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBarNrqlQueryArgs) ToOneDashboardPageWidgetBarNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetBarNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBarNrqlQueryOutput)
}

// OneDashboardPageWidgetBarNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetBarNrqlQueryArray and OneDashboardPageWidgetBarNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBarNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetBarNrqlQueryArray{ OneDashboardPageWidgetBarNrqlQueryArgs{...} }
type OneDashboardPageWidgetBarNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBarNrqlQueryArrayOutput() OneDashboardPageWidgetBarNrqlQueryArrayOutput
	ToOneDashboardPageWidgetBarNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetBarNrqlQueryArrayOutput
}

type OneDashboardPageWidgetBarNrqlQueryArray []OneDashboardPageWidgetBarNrqlQueryInput

func (OneDashboardPageWidgetBarNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBarNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetBarNrqlQueryArray) ToOneDashboardPageWidgetBarNrqlQueryArrayOutput() OneDashboardPageWidgetBarNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetBarNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBarNrqlQueryArray) ToOneDashboardPageWidgetBarNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBarNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBarNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetBarNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBarNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBarNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetBarNrqlQueryOutput) ToOneDashboardPageWidgetBarNrqlQueryOutput() OneDashboardPageWidgetBarNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetBarNrqlQueryOutput) ToOneDashboardPageWidgetBarNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetBarNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetBarNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBarNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetBarNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBarNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetBarNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBarNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBarNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetBarNrqlQueryArrayOutput) ToOneDashboardPageWidgetBarNrqlQueryArrayOutput() OneDashboardPageWidgetBarNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBarNrqlQueryArrayOutput) ToOneDashboardPageWidgetBarNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBarNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBarNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetBarNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetBarNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetBarNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetBarNrqlQueryOutput)
}

type OneDashboardPageWidgetBillboard struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Threshold above which the displayed value will be styled with a red color.
	Critical *string `pulumi:"critical"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries []OneDashboardPageWidgetBillboardNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Threshold above which the displayed value will be styled with a yellow color.
	// * `widgetBullet`
	Warning *string `pulumi:"warning"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetBillboardInput is an input type that accepts OneDashboardPageWidgetBillboardArgs and OneDashboardPageWidgetBillboardOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBillboardInput` via:
//
//          OneDashboardPageWidgetBillboardArgs{...}
type OneDashboardPageWidgetBillboardInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBillboardOutput() OneDashboardPageWidgetBillboardOutput
	ToOneDashboardPageWidgetBillboardOutputWithContext(context.Context) OneDashboardPageWidgetBillboardOutput
}

type OneDashboardPageWidgetBillboardArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Threshold above which the displayed value will be styled with a red color.
	Critical pulumi.StringPtrInput `pulumi:"critical"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries OneDashboardPageWidgetBillboardNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Threshold above which the displayed value will be styled with a yellow color.
	// * `widgetBullet`
	Warning pulumi.StringPtrInput `pulumi:"warning"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetBillboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBillboard)(nil)).Elem()
}

func (i OneDashboardPageWidgetBillboardArgs) ToOneDashboardPageWidgetBillboardOutput() OneDashboardPageWidgetBillboardOutput {
	return i.ToOneDashboardPageWidgetBillboardOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBillboardArgs) ToOneDashboardPageWidgetBillboardOutputWithContext(ctx context.Context) OneDashboardPageWidgetBillboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBillboardOutput)
}

// OneDashboardPageWidgetBillboardArrayInput is an input type that accepts OneDashboardPageWidgetBillboardArray and OneDashboardPageWidgetBillboardArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBillboardArrayInput` via:
//
//          OneDashboardPageWidgetBillboardArray{ OneDashboardPageWidgetBillboardArgs{...} }
type OneDashboardPageWidgetBillboardArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBillboardArrayOutput() OneDashboardPageWidgetBillboardArrayOutput
	ToOneDashboardPageWidgetBillboardArrayOutputWithContext(context.Context) OneDashboardPageWidgetBillboardArrayOutput
}

type OneDashboardPageWidgetBillboardArray []OneDashboardPageWidgetBillboardInput

func (OneDashboardPageWidgetBillboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBillboard)(nil)).Elem()
}

func (i OneDashboardPageWidgetBillboardArray) ToOneDashboardPageWidgetBillboardArrayOutput() OneDashboardPageWidgetBillboardArrayOutput {
	return i.ToOneDashboardPageWidgetBillboardArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBillboardArray) ToOneDashboardPageWidgetBillboardArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBillboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBillboardArrayOutput)
}

type OneDashboardPageWidgetBillboardOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBillboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBillboard)(nil)).Elem()
}

func (o OneDashboardPageWidgetBillboardOutput) ToOneDashboardPageWidgetBillboardOutput() OneDashboardPageWidgetBillboardOutput {
	return o
}

func (o OneDashboardPageWidgetBillboardOutput) ToOneDashboardPageWidgetBillboardOutputWithContext(ctx context.Context) OneDashboardPageWidgetBillboardOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetBillboardOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Threshold above which the displayed value will be styled with a red color.
func (o OneDashboardPageWidgetBillboardOutput) Critical() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) *string { return v.Critical }).(pulumi.StringPtrOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetBillboardOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetBillboardOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
func (o OneDashboardPageWidgetBillboardOutput) NrqlQueries() OneDashboardPageWidgetBillboardNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) []OneDashboardPageWidgetBillboardNrqlQuery {
		return v.NrqlQueries
	}).(OneDashboardPageWidgetBillboardNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetBillboardOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetBillboardOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Threshold above which the displayed value will be styled with a yellow color.
// * `widgetBullet`
func (o OneDashboardPageWidgetBillboardOutput) Warning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) *string { return v.Warning }).(pulumi.StringPtrOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetBillboardOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetBillboardArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBillboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBillboard)(nil)).Elem()
}

func (o OneDashboardPageWidgetBillboardArrayOutput) ToOneDashboardPageWidgetBillboardArrayOutput() OneDashboardPageWidgetBillboardArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBillboardArrayOutput) ToOneDashboardPageWidgetBillboardArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBillboardArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBillboardArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetBillboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetBillboard {
		return vs[0].([]OneDashboardPageWidgetBillboard)[vs[1].(int)]
	}).(OneDashboardPageWidgetBillboardOutput)
}

type OneDashboardPageWidgetBillboardNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetBillboardNrqlQueryInput is an input type that accepts OneDashboardPageWidgetBillboardNrqlQueryArgs and OneDashboardPageWidgetBillboardNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBillboardNrqlQueryInput` via:
//
//          OneDashboardPageWidgetBillboardNrqlQueryArgs{...}
type OneDashboardPageWidgetBillboardNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBillboardNrqlQueryOutput() OneDashboardPageWidgetBillboardNrqlQueryOutput
	ToOneDashboardPageWidgetBillboardNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetBillboardNrqlQueryOutput
}

type OneDashboardPageWidgetBillboardNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetBillboardNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBillboardNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetBillboardNrqlQueryArgs) ToOneDashboardPageWidgetBillboardNrqlQueryOutput() OneDashboardPageWidgetBillboardNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetBillboardNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBillboardNrqlQueryArgs) ToOneDashboardPageWidgetBillboardNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetBillboardNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBillboardNrqlQueryOutput)
}

// OneDashboardPageWidgetBillboardNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetBillboardNrqlQueryArray and OneDashboardPageWidgetBillboardNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBillboardNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetBillboardNrqlQueryArray{ OneDashboardPageWidgetBillboardNrqlQueryArgs{...} }
type OneDashboardPageWidgetBillboardNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBillboardNrqlQueryArrayOutput() OneDashboardPageWidgetBillboardNrqlQueryArrayOutput
	ToOneDashboardPageWidgetBillboardNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetBillboardNrqlQueryArrayOutput
}

type OneDashboardPageWidgetBillboardNrqlQueryArray []OneDashboardPageWidgetBillboardNrqlQueryInput

func (OneDashboardPageWidgetBillboardNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBillboardNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetBillboardNrqlQueryArray) ToOneDashboardPageWidgetBillboardNrqlQueryArrayOutput() OneDashboardPageWidgetBillboardNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetBillboardNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBillboardNrqlQueryArray) ToOneDashboardPageWidgetBillboardNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBillboardNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBillboardNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetBillboardNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBillboardNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBillboardNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetBillboardNrqlQueryOutput) ToOneDashboardPageWidgetBillboardNrqlQueryOutput() OneDashboardPageWidgetBillboardNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetBillboardNrqlQueryOutput) ToOneDashboardPageWidgetBillboardNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetBillboardNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetBillboardNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboardNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetBillboardNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboardNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetBillboardNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBillboardNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBillboardNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetBillboardNrqlQueryArrayOutput) ToOneDashboardPageWidgetBillboardNrqlQueryArrayOutput() OneDashboardPageWidgetBillboardNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBillboardNrqlQueryArrayOutput) ToOneDashboardPageWidgetBillboardNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBillboardNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBillboardNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetBillboardNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetBillboardNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetBillboardNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetBillboardNrqlQueryOutput)
}

type OneDashboardPageWidgetBullet struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Optional) Visualization limit for the widget.
	// * `widgetFunnel`
	Limit *float64 `pulumi:"limit"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries []OneDashboardPageWidgetBulletNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetBulletInput is an input type that accepts OneDashboardPageWidgetBulletArgs and OneDashboardPageWidgetBulletOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBulletInput` via:
//
//          OneDashboardPageWidgetBulletArgs{...}
type OneDashboardPageWidgetBulletInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBulletOutput() OneDashboardPageWidgetBulletOutput
	ToOneDashboardPageWidgetBulletOutputWithContext(context.Context) OneDashboardPageWidgetBulletOutput
}

type OneDashboardPageWidgetBulletArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Optional) Visualization limit for the widget.
	// * `widgetFunnel`
	Limit pulumi.Float64PtrInput `pulumi:"limit"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries OneDashboardPageWidgetBulletNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetBulletArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBullet)(nil)).Elem()
}

func (i OneDashboardPageWidgetBulletArgs) ToOneDashboardPageWidgetBulletOutput() OneDashboardPageWidgetBulletOutput {
	return i.ToOneDashboardPageWidgetBulletOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBulletArgs) ToOneDashboardPageWidgetBulletOutputWithContext(ctx context.Context) OneDashboardPageWidgetBulletOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBulletOutput)
}

// OneDashboardPageWidgetBulletArrayInput is an input type that accepts OneDashboardPageWidgetBulletArray and OneDashboardPageWidgetBulletArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBulletArrayInput` via:
//
//          OneDashboardPageWidgetBulletArray{ OneDashboardPageWidgetBulletArgs{...} }
type OneDashboardPageWidgetBulletArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBulletArrayOutput() OneDashboardPageWidgetBulletArrayOutput
	ToOneDashboardPageWidgetBulletArrayOutputWithContext(context.Context) OneDashboardPageWidgetBulletArrayOutput
}

type OneDashboardPageWidgetBulletArray []OneDashboardPageWidgetBulletInput

func (OneDashboardPageWidgetBulletArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBullet)(nil)).Elem()
}

func (i OneDashboardPageWidgetBulletArray) ToOneDashboardPageWidgetBulletArrayOutput() OneDashboardPageWidgetBulletArrayOutput {
	return i.ToOneDashboardPageWidgetBulletArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBulletArray) ToOneDashboardPageWidgetBulletArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBulletArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBulletArrayOutput)
}

type OneDashboardPageWidgetBulletOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBulletOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBullet)(nil)).Elem()
}

func (o OneDashboardPageWidgetBulletOutput) ToOneDashboardPageWidgetBulletOutput() OneDashboardPageWidgetBulletOutput {
	return o
}

func (o OneDashboardPageWidgetBulletOutput) ToOneDashboardPageWidgetBulletOutputWithContext(ctx context.Context) OneDashboardPageWidgetBulletOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetBulletOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBullet) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetBulletOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBullet) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetBulletOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBullet) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Optional) Visualization limit for the widget.
// * `widgetFunnel`
func (o OneDashboardPageWidgetBulletOutput) Limit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBullet) *float64 { return v.Limit }).(pulumi.Float64PtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
func (o OneDashboardPageWidgetBulletOutput) NrqlQueries() OneDashboardPageWidgetBulletNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBullet) []OneDashboardPageWidgetBulletNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetBulletNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetBulletOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBullet) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetBulletOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBullet) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetBulletOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBullet) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetBulletArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBulletArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBullet)(nil)).Elem()
}

func (o OneDashboardPageWidgetBulletArrayOutput) ToOneDashboardPageWidgetBulletArrayOutput() OneDashboardPageWidgetBulletArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBulletArrayOutput) ToOneDashboardPageWidgetBulletArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBulletArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBulletArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetBulletOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetBullet {
		return vs[0].([]OneDashboardPageWidgetBullet)[vs[1].(int)]
	}).(OneDashboardPageWidgetBulletOutput)
}

type OneDashboardPageWidgetBulletNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetBulletNrqlQueryInput is an input type that accepts OneDashboardPageWidgetBulletNrqlQueryArgs and OneDashboardPageWidgetBulletNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBulletNrqlQueryInput` via:
//
//          OneDashboardPageWidgetBulletNrqlQueryArgs{...}
type OneDashboardPageWidgetBulletNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBulletNrqlQueryOutput() OneDashboardPageWidgetBulletNrqlQueryOutput
	ToOneDashboardPageWidgetBulletNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetBulletNrqlQueryOutput
}

type OneDashboardPageWidgetBulletNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetBulletNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBulletNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetBulletNrqlQueryArgs) ToOneDashboardPageWidgetBulletNrqlQueryOutput() OneDashboardPageWidgetBulletNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetBulletNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBulletNrqlQueryArgs) ToOneDashboardPageWidgetBulletNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetBulletNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBulletNrqlQueryOutput)
}

// OneDashboardPageWidgetBulletNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetBulletNrqlQueryArray and OneDashboardPageWidgetBulletNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBulletNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetBulletNrqlQueryArray{ OneDashboardPageWidgetBulletNrqlQueryArgs{...} }
type OneDashboardPageWidgetBulletNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBulletNrqlQueryArrayOutput() OneDashboardPageWidgetBulletNrqlQueryArrayOutput
	ToOneDashboardPageWidgetBulletNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetBulletNrqlQueryArrayOutput
}

type OneDashboardPageWidgetBulletNrqlQueryArray []OneDashboardPageWidgetBulletNrqlQueryInput

func (OneDashboardPageWidgetBulletNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBulletNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetBulletNrqlQueryArray) ToOneDashboardPageWidgetBulletNrqlQueryArrayOutput() OneDashboardPageWidgetBulletNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetBulletNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBulletNrqlQueryArray) ToOneDashboardPageWidgetBulletNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBulletNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBulletNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetBulletNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBulletNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBulletNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetBulletNrqlQueryOutput) ToOneDashboardPageWidgetBulletNrqlQueryOutput() OneDashboardPageWidgetBulletNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetBulletNrqlQueryOutput) ToOneDashboardPageWidgetBulletNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetBulletNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetBulletNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBulletNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetBulletNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBulletNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetBulletNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBulletNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBulletNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetBulletNrqlQueryArrayOutput) ToOneDashboardPageWidgetBulletNrqlQueryArrayOutput() OneDashboardPageWidgetBulletNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBulletNrqlQueryArrayOutput) ToOneDashboardPageWidgetBulletNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBulletNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBulletNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetBulletNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetBulletNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetBulletNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetBulletNrqlQueryOutput)
}

type OneDashboardPageWidgetFunnel struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries []OneDashboardPageWidgetFunnelNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetFunnelInput is an input type that accepts OneDashboardPageWidgetFunnelArgs and OneDashboardPageWidgetFunnelOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetFunnelInput` via:
//
//          OneDashboardPageWidgetFunnelArgs{...}
type OneDashboardPageWidgetFunnelInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetFunnelOutput() OneDashboardPageWidgetFunnelOutput
	ToOneDashboardPageWidgetFunnelOutputWithContext(context.Context) OneDashboardPageWidgetFunnelOutput
}

type OneDashboardPageWidgetFunnelArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries OneDashboardPageWidgetFunnelNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetFunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetFunnel)(nil)).Elem()
}

func (i OneDashboardPageWidgetFunnelArgs) ToOneDashboardPageWidgetFunnelOutput() OneDashboardPageWidgetFunnelOutput {
	return i.ToOneDashboardPageWidgetFunnelOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetFunnelArgs) ToOneDashboardPageWidgetFunnelOutputWithContext(ctx context.Context) OneDashboardPageWidgetFunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetFunnelOutput)
}

// OneDashboardPageWidgetFunnelArrayInput is an input type that accepts OneDashboardPageWidgetFunnelArray and OneDashboardPageWidgetFunnelArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetFunnelArrayInput` via:
//
//          OneDashboardPageWidgetFunnelArray{ OneDashboardPageWidgetFunnelArgs{...} }
type OneDashboardPageWidgetFunnelArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetFunnelArrayOutput() OneDashboardPageWidgetFunnelArrayOutput
	ToOneDashboardPageWidgetFunnelArrayOutputWithContext(context.Context) OneDashboardPageWidgetFunnelArrayOutput
}

type OneDashboardPageWidgetFunnelArray []OneDashboardPageWidgetFunnelInput

func (OneDashboardPageWidgetFunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetFunnel)(nil)).Elem()
}

func (i OneDashboardPageWidgetFunnelArray) ToOneDashboardPageWidgetFunnelArrayOutput() OneDashboardPageWidgetFunnelArrayOutput {
	return i.ToOneDashboardPageWidgetFunnelArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetFunnelArray) ToOneDashboardPageWidgetFunnelArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetFunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetFunnelArrayOutput)
}

type OneDashboardPageWidgetFunnelOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetFunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetFunnel)(nil)).Elem()
}

func (o OneDashboardPageWidgetFunnelOutput) ToOneDashboardPageWidgetFunnelOutput() OneDashboardPageWidgetFunnelOutput {
	return o
}

func (o OneDashboardPageWidgetFunnelOutput) ToOneDashboardPageWidgetFunnelOutputWithContext(ctx context.Context) OneDashboardPageWidgetFunnelOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetFunnelOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnel) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetFunnelOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnel) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetFunnelOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnel) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
func (o OneDashboardPageWidgetFunnelOutput) NrqlQueries() OneDashboardPageWidgetFunnelNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnel) []OneDashboardPageWidgetFunnelNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetFunnelNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetFunnelOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnel) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetFunnelOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnel) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetFunnelOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnel) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetFunnelArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetFunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetFunnel)(nil)).Elem()
}

func (o OneDashboardPageWidgetFunnelArrayOutput) ToOneDashboardPageWidgetFunnelArrayOutput() OneDashboardPageWidgetFunnelArrayOutput {
	return o
}

func (o OneDashboardPageWidgetFunnelArrayOutput) ToOneDashboardPageWidgetFunnelArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetFunnelArrayOutput {
	return o
}

func (o OneDashboardPageWidgetFunnelArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetFunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetFunnel {
		return vs[0].([]OneDashboardPageWidgetFunnel)[vs[1].(int)]
	}).(OneDashboardPageWidgetFunnelOutput)
}

type OneDashboardPageWidgetFunnelNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetFunnelNrqlQueryInput is an input type that accepts OneDashboardPageWidgetFunnelNrqlQueryArgs and OneDashboardPageWidgetFunnelNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetFunnelNrqlQueryInput` via:
//
//          OneDashboardPageWidgetFunnelNrqlQueryArgs{...}
type OneDashboardPageWidgetFunnelNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetFunnelNrqlQueryOutput() OneDashboardPageWidgetFunnelNrqlQueryOutput
	ToOneDashboardPageWidgetFunnelNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetFunnelNrqlQueryOutput
}

type OneDashboardPageWidgetFunnelNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetFunnelNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetFunnelNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetFunnelNrqlQueryArgs) ToOneDashboardPageWidgetFunnelNrqlQueryOutput() OneDashboardPageWidgetFunnelNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetFunnelNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetFunnelNrqlQueryArgs) ToOneDashboardPageWidgetFunnelNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetFunnelNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetFunnelNrqlQueryOutput)
}

// OneDashboardPageWidgetFunnelNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetFunnelNrqlQueryArray and OneDashboardPageWidgetFunnelNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetFunnelNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetFunnelNrqlQueryArray{ OneDashboardPageWidgetFunnelNrqlQueryArgs{...} }
type OneDashboardPageWidgetFunnelNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetFunnelNrqlQueryArrayOutput() OneDashboardPageWidgetFunnelNrqlQueryArrayOutput
	ToOneDashboardPageWidgetFunnelNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetFunnelNrqlQueryArrayOutput
}

type OneDashboardPageWidgetFunnelNrqlQueryArray []OneDashboardPageWidgetFunnelNrqlQueryInput

func (OneDashboardPageWidgetFunnelNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetFunnelNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetFunnelNrqlQueryArray) ToOneDashboardPageWidgetFunnelNrqlQueryArrayOutput() OneDashboardPageWidgetFunnelNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetFunnelNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetFunnelNrqlQueryArray) ToOneDashboardPageWidgetFunnelNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetFunnelNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetFunnelNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetFunnelNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetFunnelNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetFunnelNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetFunnelNrqlQueryOutput) ToOneDashboardPageWidgetFunnelNrqlQueryOutput() OneDashboardPageWidgetFunnelNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetFunnelNrqlQueryOutput) ToOneDashboardPageWidgetFunnelNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetFunnelNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetFunnelNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnelNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetFunnelNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnelNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetFunnelNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetFunnelNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetFunnelNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetFunnelNrqlQueryArrayOutput) ToOneDashboardPageWidgetFunnelNrqlQueryArrayOutput() OneDashboardPageWidgetFunnelNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetFunnelNrqlQueryArrayOutput) ToOneDashboardPageWidgetFunnelNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetFunnelNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetFunnelNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetFunnelNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetFunnelNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetFunnelNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetFunnelNrqlQueryOutput)
}

type OneDashboardPageWidgetHeatmap struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries []OneDashboardPageWidgetHeatmapNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetHeatmapInput is an input type that accepts OneDashboardPageWidgetHeatmapArgs and OneDashboardPageWidgetHeatmapOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetHeatmapInput` via:
//
//          OneDashboardPageWidgetHeatmapArgs{...}
type OneDashboardPageWidgetHeatmapInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetHeatmapOutput() OneDashboardPageWidgetHeatmapOutput
	ToOneDashboardPageWidgetHeatmapOutputWithContext(context.Context) OneDashboardPageWidgetHeatmapOutput
}

type OneDashboardPageWidgetHeatmapArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries OneDashboardPageWidgetHeatmapNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetHeatmapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetHeatmap)(nil)).Elem()
}

func (i OneDashboardPageWidgetHeatmapArgs) ToOneDashboardPageWidgetHeatmapOutput() OneDashboardPageWidgetHeatmapOutput {
	return i.ToOneDashboardPageWidgetHeatmapOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetHeatmapArgs) ToOneDashboardPageWidgetHeatmapOutputWithContext(ctx context.Context) OneDashboardPageWidgetHeatmapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetHeatmapOutput)
}

// OneDashboardPageWidgetHeatmapArrayInput is an input type that accepts OneDashboardPageWidgetHeatmapArray and OneDashboardPageWidgetHeatmapArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetHeatmapArrayInput` via:
//
//          OneDashboardPageWidgetHeatmapArray{ OneDashboardPageWidgetHeatmapArgs{...} }
type OneDashboardPageWidgetHeatmapArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetHeatmapArrayOutput() OneDashboardPageWidgetHeatmapArrayOutput
	ToOneDashboardPageWidgetHeatmapArrayOutputWithContext(context.Context) OneDashboardPageWidgetHeatmapArrayOutput
}

type OneDashboardPageWidgetHeatmapArray []OneDashboardPageWidgetHeatmapInput

func (OneDashboardPageWidgetHeatmapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetHeatmap)(nil)).Elem()
}

func (i OneDashboardPageWidgetHeatmapArray) ToOneDashboardPageWidgetHeatmapArrayOutput() OneDashboardPageWidgetHeatmapArrayOutput {
	return i.ToOneDashboardPageWidgetHeatmapArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetHeatmapArray) ToOneDashboardPageWidgetHeatmapArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetHeatmapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetHeatmapArrayOutput)
}

type OneDashboardPageWidgetHeatmapOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetHeatmapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetHeatmap)(nil)).Elem()
}

func (o OneDashboardPageWidgetHeatmapOutput) ToOneDashboardPageWidgetHeatmapOutput() OneDashboardPageWidgetHeatmapOutput {
	return o
}

func (o OneDashboardPageWidgetHeatmapOutput) ToOneDashboardPageWidgetHeatmapOutputWithContext(ctx context.Context) OneDashboardPageWidgetHeatmapOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetHeatmapOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmap) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetHeatmapOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmap) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetHeatmapOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmap) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
func (o OneDashboardPageWidgetHeatmapOutput) NrqlQueries() OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmap) []OneDashboardPageWidgetHeatmapNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetHeatmapOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmap) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetHeatmapOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmap) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetHeatmapOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmap) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetHeatmapArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetHeatmapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetHeatmap)(nil)).Elem()
}

func (o OneDashboardPageWidgetHeatmapArrayOutput) ToOneDashboardPageWidgetHeatmapArrayOutput() OneDashboardPageWidgetHeatmapArrayOutput {
	return o
}

func (o OneDashboardPageWidgetHeatmapArrayOutput) ToOneDashboardPageWidgetHeatmapArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetHeatmapArrayOutput {
	return o
}

func (o OneDashboardPageWidgetHeatmapArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetHeatmapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetHeatmap {
		return vs[0].([]OneDashboardPageWidgetHeatmap)[vs[1].(int)]
	}).(OneDashboardPageWidgetHeatmapOutput)
}

type OneDashboardPageWidgetHeatmapNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetHeatmapNrqlQueryInput is an input type that accepts OneDashboardPageWidgetHeatmapNrqlQueryArgs and OneDashboardPageWidgetHeatmapNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetHeatmapNrqlQueryInput` via:
//
//          OneDashboardPageWidgetHeatmapNrqlQueryArgs{...}
type OneDashboardPageWidgetHeatmapNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetHeatmapNrqlQueryOutput() OneDashboardPageWidgetHeatmapNrqlQueryOutput
	ToOneDashboardPageWidgetHeatmapNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetHeatmapNrqlQueryOutput
}

type OneDashboardPageWidgetHeatmapNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetHeatmapNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetHeatmapNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetHeatmapNrqlQueryArgs) ToOneDashboardPageWidgetHeatmapNrqlQueryOutput() OneDashboardPageWidgetHeatmapNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetHeatmapNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetHeatmapNrqlQueryArgs) ToOneDashboardPageWidgetHeatmapNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetHeatmapNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetHeatmapNrqlQueryOutput)
}

// OneDashboardPageWidgetHeatmapNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetHeatmapNrqlQueryArray and OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetHeatmapNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetHeatmapNrqlQueryArray{ OneDashboardPageWidgetHeatmapNrqlQueryArgs{...} }
type OneDashboardPageWidgetHeatmapNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetHeatmapNrqlQueryArrayOutput() OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput
	ToOneDashboardPageWidgetHeatmapNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput
}

type OneDashboardPageWidgetHeatmapNrqlQueryArray []OneDashboardPageWidgetHeatmapNrqlQueryInput

func (OneDashboardPageWidgetHeatmapNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetHeatmapNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetHeatmapNrqlQueryArray) ToOneDashboardPageWidgetHeatmapNrqlQueryArrayOutput() OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetHeatmapNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetHeatmapNrqlQueryArray) ToOneDashboardPageWidgetHeatmapNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetHeatmapNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetHeatmapNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetHeatmapNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetHeatmapNrqlQueryOutput) ToOneDashboardPageWidgetHeatmapNrqlQueryOutput() OneDashboardPageWidgetHeatmapNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetHeatmapNrqlQueryOutput) ToOneDashboardPageWidgetHeatmapNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetHeatmapNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetHeatmapNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmapNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetHeatmapNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmapNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetHeatmapNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput) ToOneDashboardPageWidgetHeatmapNrqlQueryArrayOutput() OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput) ToOneDashboardPageWidgetHeatmapNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetHeatmapNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetHeatmapNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetHeatmapNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetHeatmapNrqlQueryOutput)
}

type OneDashboardPageWidgetHistogram struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries []OneDashboardPageWidgetHistogramNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetHistogramInput is an input type that accepts OneDashboardPageWidgetHistogramArgs and OneDashboardPageWidgetHistogramOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetHistogramInput` via:
//
//          OneDashboardPageWidgetHistogramArgs{...}
type OneDashboardPageWidgetHistogramInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetHistogramOutput() OneDashboardPageWidgetHistogramOutput
	ToOneDashboardPageWidgetHistogramOutputWithContext(context.Context) OneDashboardPageWidgetHistogramOutput
}

type OneDashboardPageWidgetHistogramArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries OneDashboardPageWidgetHistogramNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetHistogramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetHistogram)(nil)).Elem()
}

func (i OneDashboardPageWidgetHistogramArgs) ToOneDashboardPageWidgetHistogramOutput() OneDashboardPageWidgetHistogramOutput {
	return i.ToOneDashboardPageWidgetHistogramOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetHistogramArgs) ToOneDashboardPageWidgetHistogramOutputWithContext(ctx context.Context) OneDashboardPageWidgetHistogramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetHistogramOutput)
}

// OneDashboardPageWidgetHistogramArrayInput is an input type that accepts OneDashboardPageWidgetHistogramArray and OneDashboardPageWidgetHistogramArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetHistogramArrayInput` via:
//
//          OneDashboardPageWidgetHistogramArray{ OneDashboardPageWidgetHistogramArgs{...} }
type OneDashboardPageWidgetHistogramArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetHistogramArrayOutput() OneDashboardPageWidgetHistogramArrayOutput
	ToOneDashboardPageWidgetHistogramArrayOutputWithContext(context.Context) OneDashboardPageWidgetHistogramArrayOutput
}

type OneDashboardPageWidgetHistogramArray []OneDashboardPageWidgetHistogramInput

func (OneDashboardPageWidgetHistogramArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetHistogram)(nil)).Elem()
}

func (i OneDashboardPageWidgetHistogramArray) ToOneDashboardPageWidgetHistogramArrayOutput() OneDashboardPageWidgetHistogramArrayOutput {
	return i.ToOneDashboardPageWidgetHistogramArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetHistogramArray) ToOneDashboardPageWidgetHistogramArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetHistogramArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetHistogramArrayOutput)
}

type OneDashboardPageWidgetHistogramOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetHistogramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetHistogram)(nil)).Elem()
}

func (o OneDashboardPageWidgetHistogramOutput) ToOneDashboardPageWidgetHistogramOutput() OneDashboardPageWidgetHistogramOutput {
	return o
}

func (o OneDashboardPageWidgetHistogramOutput) ToOneDashboardPageWidgetHistogramOutputWithContext(ctx context.Context) OneDashboardPageWidgetHistogramOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetHistogramOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogram) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetHistogramOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogram) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetHistogramOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogram) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
func (o OneDashboardPageWidgetHistogramOutput) NrqlQueries() OneDashboardPageWidgetHistogramNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogram) []OneDashboardPageWidgetHistogramNrqlQuery {
		return v.NrqlQueries
	}).(OneDashboardPageWidgetHistogramNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetHistogramOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogram) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetHistogramOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogram) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetHistogramOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogram) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetHistogramArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetHistogramArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetHistogram)(nil)).Elem()
}

func (o OneDashboardPageWidgetHistogramArrayOutput) ToOneDashboardPageWidgetHistogramArrayOutput() OneDashboardPageWidgetHistogramArrayOutput {
	return o
}

func (o OneDashboardPageWidgetHistogramArrayOutput) ToOneDashboardPageWidgetHistogramArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetHistogramArrayOutput {
	return o
}

func (o OneDashboardPageWidgetHistogramArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetHistogramOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetHistogram {
		return vs[0].([]OneDashboardPageWidgetHistogram)[vs[1].(int)]
	}).(OneDashboardPageWidgetHistogramOutput)
}

type OneDashboardPageWidgetHistogramNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetHistogramNrqlQueryInput is an input type that accepts OneDashboardPageWidgetHistogramNrqlQueryArgs and OneDashboardPageWidgetHistogramNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetHistogramNrqlQueryInput` via:
//
//          OneDashboardPageWidgetHistogramNrqlQueryArgs{...}
type OneDashboardPageWidgetHistogramNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetHistogramNrqlQueryOutput() OneDashboardPageWidgetHistogramNrqlQueryOutput
	ToOneDashboardPageWidgetHistogramNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetHistogramNrqlQueryOutput
}

type OneDashboardPageWidgetHistogramNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetHistogramNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetHistogramNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetHistogramNrqlQueryArgs) ToOneDashboardPageWidgetHistogramNrqlQueryOutput() OneDashboardPageWidgetHistogramNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetHistogramNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetHistogramNrqlQueryArgs) ToOneDashboardPageWidgetHistogramNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetHistogramNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetHistogramNrqlQueryOutput)
}

// OneDashboardPageWidgetHistogramNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetHistogramNrqlQueryArray and OneDashboardPageWidgetHistogramNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetHistogramNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetHistogramNrqlQueryArray{ OneDashboardPageWidgetHistogramNrqlQueryArgs{...} }
type OneDashboardPageWidgetHistogramNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetHistogramNrqlQueryArrayOutput() OneDashboardPageWidgetHistogramNrqlQueryArrayOutput
	ToOneDashboardPageWidgetHistogramNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetHistogramNrqlQueryArrayOutput
}

type OneDashboardPageWidgetHistogramNrqlQueryArray []OneDashboardPageWidgetHistogramNrqlQueryInput

func (OneDashboardPageWidgetHistogramNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetHistogramNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetHistogramNrqlQueryArray) ToOneDashboardPageWidgetHistogramNrqlQueryArrayOutput() OneDashboardPageWidgetHistogramNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetHistogramNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetHistogramNrqlQueryArray) ToOneDashboardPageWidgetHistogramNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetHistogramNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetHistogramNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetHistogramNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetHistogramNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetHistogramNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetHistogramNrqlQueryOutput) ToOneDashboardPageWidgetHistogramNrqlQueryOutput() OneDashboardPageWidgetHistogramNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetHistogramNrqlQueryOutput) ToOneDashboardPageWidgetHistogramNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetHistogramNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetHistogramNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogramNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetHistogramNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogramNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetHistogramNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetHistogramNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetHistogramNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetHistogramNrqlQueryArrayOutput) ToOneDashboardPageWidgetHistogramNrqlQueryArrayOutput() OneDashboardPageWidgetHistogramNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetHistogramNrqlQueryArrayOutput) ToOneDashboardPageWidgetHistogramNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetHistogramNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetHistogramNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetHistogramNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetHistogramNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetHistogramNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetHistogramNrqlQueryOutput)
}

type OneDashboardPageWidgetJson struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries []OneDashboardPageWidgetJsonNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetJsonInput is an input type that accepts OneDashboardPageWidgetJsonArgs and OneDashboardPageWidgetJsonOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetJsonInput` via:
//
//          OneDashboardPageWidgetJsonArgs{...}
type OneDashboardPageWidgetJsonInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetJsonOutput() OneDashboardPageWidgetJsonOutput
	ToOneDashboardPageWidgetJsonOutputWithContext(context.Context) OneDashboardPageWidgetJsonOutput
}

type OneDashboardPageWidgetJsonArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries OneDashboardPageWidgetJsonNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetJsonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetJson)(nil)).Elem()
}

func (i OneDashboardPageWidgetJsonArgs) ToOneDashboardPageWidgetJsonOutput() OneDashboardPageWidgetJsonOutput {
	return i.ToOneDashboardPageWidgetJsonOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetJsonArgs) ToOneDashboardPageWidgetJsonOutputWithContext(ctx context.Context) OneDashboardPageWidgetJsonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetJsonOutput)
}

// OneDashboardPageWidgetJsonArrayInput is an input type that accepts OneDashboardPageWidgetJsonArray and OneDashboardPageWidgetJsonArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetJsonArrayInput` via:
//
//          OneDashboardPageWidgetJsonArray{ OneDashboardPageWidgetJsonArgs{...} }
type OneDashboardPageWidgetJsonArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetJsonArrayOutput() OneDashboardPageWidgetJsonArrayOutput
	ToOneDashboardPageWidgetJsonArrayOutputWithContext(context.Context) OneDashboardPageWidgetJsonArrayOutput
}

type OneDashboardPageWidgetJsonArray []OneDashboardPageWidgetJsonInput

func (OneDashboardPageWidgetJsonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetJson)(nil)).Elem()
}

func (i OneDashboardPageWidgetJsonArray) ToOneDashboardPageWidgetJsonArrayOutput() OneDashboardPageWidgetJsonArrayOutput {
	return i.ToOneDashboardPageWidgetJsonArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetJsonArray) ToOneDashboardPageWidgetJsonArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetJsonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetJsonArrayOutput)
}

type OneDashboardPageWidgetJsonOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetJsonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetJson)(nil)).Elem()
}

func (o OneDashboardPageWidgetJsonOutput) ToOneDashboardPageWidgetJsonOutput() OneDashboardPageWidgetJsonOutput {
	return o
}

func (o OneDashboardPageWidgetJsonOutput) ToOneDashboardPageWidgetJsonOutputWithContext(ctx context.Context) OneDashboardPageWidgetJsonOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetJsonOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJson) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetJsonOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJson) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetJsonOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJson) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
func (o OneDashboardPageWidgetJsonOutput) NrqlQueries() OneDashboardPageWidgetJsonNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJson) []OneDashboardPageWidgetJsonNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetJsonNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetJsonOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJson) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetJsonOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJson) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetJsonOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJson) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetJsonArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetJsonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetJson)(nil)).Elem()
}

func (o OneDashboardPageWidgetJsonArrayOutput) ToOneDashboardPageWidgetJsonArrayOutput() OneDashboardPageWidgetJsonArrayOutput {
	return o
}

func (o OneDashboardPageWidgetJsonArrayOutput) ToOneDashboardPageWidgetJsonArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetJsonArrayOutput {
	return o
}

func (o OneDashboardPageWidgetJsonArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetJsonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetJson {
		return vs[0].([]OneDashboardPageWidgetJson)[vs[1].(int)]
	}).(OneDashboardPageWidgetJsonOutput)
}

type OneDashboardPageWidgetJsonNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetJsonNrqlQueryInput is an input type that accepts OneDashboardPageWidgetJsonNrqlQueryArgs and OneDashboardPageWidgetJsonNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetJsonNrqlQueryInput` via:
//
//          OneDashboardPageWidgetJsonNrqlQueryArgs{...}
type OneDashboardPageWidgetJsonNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetJsonNrqlQueryOutput() OneDashboardPageWidgetJsonNrqlQueryOutput
	ToOneDashboardPageWidgetJsonNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetJsonNrqlQueryOutput
}

type OneDashboardPageWidgetJsonNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetJsonNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetJsonNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetJsonNrqlQueryArgs) ToOneDashboardPageWidgetJsonNrqlQueryOutput() OneDashboardPageWidgetJsonNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetJsonNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetJsonNrqlQueryArgs) ToOneDashboardPageWidgetJsonNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetJsonNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetJsonNrqlQueryOutput)
}

// OneDashboardPageWidgetJsonNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetJsonNrqlQueryArray and OneDashboardPageWidgetJsonNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetJsonNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetJsonNrqlQueryArray{ OneDashboardPageWidgetJsonNrqlQueryArgs{...} }
type OneDashboardPageWidgetJsonNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetJsonNrqlQueryArrayOutput() OneDashboardPageWidgetJsonNrqlQueryArrayOutput
	ToOneDashboardPageWidgetJsonNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetJsonNrqlQueryArrayOutput
}

type OneDashboardPageWidgetJsonNrqlQueryArray []OneDashboardPageWidgetJsonNrqlQueryInput

func (OneDashboardPageWidgetJsonNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetJsonNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetJsonNrqlQueryArray) ToOneDashboardPageWidgetJsonNrqlQueryArrayOutput() OneDashboardPageWidgetJsonNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetJsonNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetJsonNrqlQueryArray) ToOneDashboardPageWidgetJsonNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetJsonNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetJsonNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetJsonNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetJsonNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetJsonNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetJsonNrqlQueryOutput) ToOneDashboardPageWidgetJsonNrqlQueryOutput() OneDashboardPageWidgetJsonNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetJsonNrqlQueryOutput) ToOneDashboardPageWidgetJsonNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetJsonNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetJsonNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJsonNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetJsonNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJsonNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetJsonNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetJsonNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetJsonNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetJsonNrqlQueryArrayOutput) ToOneDashboardPageWidgetJsonNrqlQueryArrayOutput() OneDashboardPageWidgetJsonNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetJsonNrqlQueryArrayOutput) ToOneDashboardPageWidgetJsonNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetJsonNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetJsonNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetJsonNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetJsonNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetJsonNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetJsonNrqlQueryOutput)
}

type OneDashboardPageWidgetLine struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries []OneDashboardPageWidgetLineNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetLineInput is an input type that accepts OneDashboardPageWidgetLineArgs and OneDashboardPageWidgetLineOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetLineInput` via:
//
//          OneDashboardPageWidgetLineArgs{...}
type OneDashboardPageWidgetLineInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetLineOutput() OneDashboardPageWidgetLineOutput
	ToOneDashboardPageWidgetLineOutputWithContext(context.Context) OneDashboardPageWidgetLineOutput
}

type OneDashboardPageWidgetLineArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries OneDashboardPageWidgetLineNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetLineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetLine)(nil)).Elem()
}

func (i OneDashboardPageWidgetLineArgs) ToOneDashboardPageWidgetLineOutput() OneDashboardPageWidgetLineOutput {
	return i.ToOneDashboardPageWidgetLineOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetLineArgs) ToOneDashboardPageWidgetLineOutputWithContext(ctx context.Context) OneDashboardPageWidgetLineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetLineOutput)
}

// OneDashboardPageWidgetLineArrayInput is an input type that accepts OneDashboardPageWidgetLineArray and OneDashboardPageWidgetLineArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetLineArrayInput` via:
//
//          OneDashboardPageWidgetLineArray{ OneDashboardPageWidgetLineArgs{...} }
type OneDashboardPageWidgetLineArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetLineArrayOutput() OneDashboardPageWidgetLineArrayOutput
	ToOneDashboardPageWidgetLineArrayOutputWithContext(context.Context) OneDashboardPageWidgetLineArrayOutput
}

type OneDashboardPageWidgetLineArray []OneDashboardPageWidgetLineInput

func (OneDashboardPageWidgetLineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetLine)(nil)).Elem()
}

func (i OneDashboardPageWidgetLineArray) ToOneDashboardPageWidgetLineArrayOutput() OneDashboardPageWidgetLineArrayOutput {
	return i.ToOneDashboardPageWidgetLineArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetLineArray) ToOneDashboardPageWidgetLineArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetLineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetLineArrayOutput)
}

type OneDashboardPageWidgetLineOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetLineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetLine)(nil)).Elem()
}

func (o OneDashboardPageWidgetLineOutput) ToOneDashboardPageWidgetLineOutput() OneDashboardPageWidgetLineOutput {
	return o
}

func (o OneDashboardPageWidgetLineOutput) ToOneDashboardPageWidgetLineOutputWithContext(ctx context.Context) OneDashboardPageWidgetLineOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetLineOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLine) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetLineOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLine) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetLineOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLine) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
func (o OneDashboardPageWidgetLineOutput) NrqlQueries() OneDashboardPageWidgetLineNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLine) []OneDashboardPageWidgetLineNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetLineNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetLineOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLine) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetLineOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLine) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetLineOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLine) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetLineArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetLineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetLine)(nil)).Elem()
}

func (o OneDashboardPageWidgetLineArrayOutput) ToOneDashboardPageWidgetLineArrayOutput() OneDashboardPageWidgetLineArrayOutput {
	return o
}

func (o OneDashboardPageWidgetLineArrayOutput) ToOneDashboardPageWidgetLineArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetLineArrayOutput {
	return o
}

func (o OneDashboardPageWidgetLineArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetLineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetLine {
		return vs[0].([]OneDashboardPageWidgetLine)[vs[1].(int)]
	}).(OneDashboardPageWidgetLineOutput)
}

type OneDashboardPageWidgetLineNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetLineNrqlQueryInput is an input type that accepts OneDashboardPageWidgetLineNrqlQueryArgs and OneDashboardPageWidgetLineNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetLineNrqlQueryInput` via:
//
//          OneDashboardPageWidgetLineNrqlQueryArgs{...}
type OneDashboardPageWidgetLineNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetLineNrqlQueryOutput() OneDashboardPageWidgetLineNrqlQueryOutput
	ToOneDashboardPageWidgetLineNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetLineNrqlQueryOutput
}

type OneDashboardPageWidgetLineNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetLineNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetLineNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetLineNrqlQueryArgs) ToOneDashboardPageWidgetLineNrqlQueryOutput() OneDashboardPageWidgetLineNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetLineNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetLineNrqlQueryArgs) ToOneDashboardPageWidgetLineNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetLineNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetLineNrqlQueryOutput)
}

// OneDashboardPageWidgetLineNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetLineNrqlQueryArray and OneDashboardPageWidgetLineNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetLineNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetLineNrqlQueryArray{ OneDashboardPageWidgetLineNrqlQueryArgs{...} }
type OneDashboardPageWidgetLineNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetLineNrqlQueryArrayOutput() OneDashboardPageWidgetLineNrqlQueryArrayOutput
	ToOneDashboardPageWidgetLineNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetLineNrqlQueryArrayOutput
}

type OneDashboardPageWidgetLineNrqlQueryArray []OneDashboardPageWidgetLineNrqlQueryInput

func (OneDashboardPageWidgetLineNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetLineNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetLineNrqlQueryArray) ToOneDashboardPageWidgetLineNrqlQueryArrayOutput() OneDashboardPageWidgetLineNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetLineNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetLineNrqlQueryArray) ToOneDashboardPageWidgetLineNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetLineNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetLineNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetLineNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetLineNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetLineNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetLineNrqlQueryOutput) ToOneDashboardPageWidgetLineNrqlQueryOutput() OneDashboardPageWidgetLineNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetLineNrqlQueryOutput) ToOneDashboardPageWidgetLineNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetLineNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetLineNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLineNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetLineNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLineNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetLineNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetLineNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetLineNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetLineNrqlQueryArrayOutput) ToOneDashboardPageWidgetLineNrqlQueryArrayOutput() OneDashboardPageWidgetLineNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetLineNrqlQueryArrayOutput) ToOneDashboardPageWidgetLineNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetLineNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetLineNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetLineNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetLineNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetLineNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetLineNrqlQueryOutput)
}

type OneDashboardPageWidgetMarkdown struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) The markdown source to be rendered in the widget.
	// * `widgetStackedBar`
	Text *string `pulumi:"text"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetMarkdownInput is an input type that accepts OneDashboardPageWidgetMarkdownArgs and OneDashboardPageWidgetMarkdownOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetMarkdownInput` via:
//
//          OneDashboardPageWidgetMarkdownArgs{...}
type OneDashboardPageWidgetMarkdownInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetMarkdownOutput() OneDashboardPageWidgetMarkdownOutput
	ToOneDashboardPageWidgetMarkdownOutputWithContext(context.Context) OneDashboardPageWidgetMarkdownOutput
}

type OneDashboardPageWidgetMarkdownArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) The markdown source to be rendered in the widget.
	// * `widgetStackedBar`
	Text pulumi.StringPtrInput `pulumi:"text"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetMarkdownArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetMarkdown)(nil)).Elem()
}

func (i OneDashboardPageWidgetMarkdownArgs) ToOneDashboardPageWidgetMarkdownOutput() OneDashboardPageWidgetMarkdownOutput {
	return i.ToOneDashboardPageWidgetMarkdownOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetMarkdownArgs) ToOneDashboardPageWidgetMarkdownOutputWithContext(ctx context.Context) OneDashboardPageWidgetMarkdownOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetMarkdownOutput)
}

// OneDashboardPageWidgetMarkdownArrayInput is an input type that accepts OneDashboardPageWidgetMarkdownArray and OneDashboardPageWidgetMarkdownArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetMarkdownArrayInput` via:
//
//          OneDashboardPageWidgetMarkdownArray{ OneDashboardPageWidgetMarkdownArgs{...} }
type OneDashboardPageWidgetMarkdownArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetMarkdownArrayOutput() OneDashboardPageWidgetMarkdownArrayOutput
	ToOneDashboardPageWidgetMarkdownArrayOutputWithContext(context.Context) OneDashboardPageWidgetMarkdownArrayOutput
}

type OneDashboardPageWidgetMarkdownArray []OneDashboardPageWidgetMarkdownInput

func (OneDashboardPageWidgetMarkdownArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetMarkdown)(nil)).Elem()
}

func (i OneDashboardPageWidgetMarkdownArray) ToOneDashboardPageWidgetMarkdownArrayOutput() OneDashboardPageWidgetMarkdownArrayOutput {
	return i.ToOneDashboardPageWidgetMarkdownArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetMarkdownArray) ToOneDashboardPageWidgetMarkdownArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetMarkdownArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetMarkdownArrayOutput)
}

type OneDashboardPageWidgetMarkdownOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetMarkdownOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetMarkdown)(nil)).Elem()
}

func (o OneDashboardPageWidgetMarkdownOutput) ToOneDashboardPageWidgetMarkdownOutput() OneDashboardPageWidgetMarkdownOutput {
	return o
}

func (o OneDashboardPageWidgetMarkdownOutput) ToOneDashboardPageWidgetMarkdownOutputWithContext(ctx context.Context) OneDashboardPageWidgetMarkdownOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetMarkdownOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetMarkdown) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetMarkdownOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetMarkdown) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetMarkdownOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetMarkdown) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetMarkdownOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetMarkdown) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) The markdown source to be rendered in the widget.
// * `widgetStackedBar`
func (o OneDashboardPageWidgetMarkdownOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetMarkdown) *string { return v.Text }).(pulumi.StringPtrOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetMarkdownOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetMarkdown) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetMarkdownOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetMarkdown) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetMarkdownArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetMarkdownArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetMarkdown)(nil)).Elem()
}

func (o OneDashboardPageWidgetMarkdownArrayOutput) ToOneDashboardPageWidgetMarkdownArrayOutput() OneDashboardPageWidgetMarkdownArrayOutput {
	return o
}

func (o OneDashboardPageWidgetMarkdownArrayOutput) ToOneDashboardPageWidgetMarkdownArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetMarkdownArrayOutput {
	return o
}

func (o OneDashboardPageWidgetMarkdownArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetMarkdownOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetMarkdown {
		return vs[0].([]OneDashboardPageWidgetMarkdown)[vs[1].(int)]
	}).(OneDashboardPageWidgetMarkdownOutput)
}

type OneDashboardPageWidgetPy struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column                 int   `pulumi:"column"`
	FilterCurrentDashboard *bool `pulumi:"filterCurrentDashboard"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height            *int     `pulumi:"height"`
	Id                *string  `pulumi:"id"`
	LinkedEntityGuids []string `pulumi:"linkedEntityGuids"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries []OneDashboardPageWidgetPyNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetPyInput is an input type that accepts OneDashboardPageWidgetPyArgs and OneDashboardPageWidgetPyOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetPyInput` via:
//
//          OneDashboardPageWidgetPyArgs{...}
type OneDashboardPageWidgetPyInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetPyOutput() OneDashboardPageWidgetPyOutput
	ToOneDashboardPageWidgetPyOutputWithContext(context.Context) OneDashboardPageWidgetPyOutput
}

type OneDashboardPageWidgetPyArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column                 pulumi.IntInput     `pulumi:"column"`
	FilterCurrentDashboard pulumi.BoolPtrInput `pulumi:"filterCurrentDashboard"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height            pulumi.IntPtrInput      `pulumi:"height"`
	Id                pulumi.StringPtrInput   `pulumi:"id"`
	LinkedEntityGuids pulumi.StringArrayInput `pulumi:"linkedEntityGuids"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries OneDashboardPageWidgetPyNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetPyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetPy)(nil)).Elem()
}

func (i OneDashboardPageWidgetPyArgs) ToOneDashboardPageWidgetPyOutput() OneDashboardPageWidgetPyOutput {
	return i.ToOneDashboardPageWidgetPyOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetPyArgs) ToOneDashboardPageWidgetPyOutputWithContext(ctx context.Context) OneDashboardPageWidgetPyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetPyOutput)
}

// OneDashboardPageWidgetPyArrayInput is an input type that accepts OneDashboardPageWidgetPyArray and OneDashboardPageWidgetPyArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetPyArrayInput` via:
//
//          OneDashboardPageWidgetPyArray{ OneDashboardPageWidgetPyArgs{...} }
type OneDashboardPageWidgetPyArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetPyArrayOutput() OneDashboardPageWidgetPyArrayOutput
	ToOneDashboardPageWidgetPyArrayOutputWithContext(context.Context) OneDashboardPageWidgetPyArrayOutput
}

type OneDashboardPageWidgetPyArray []OneDashboardPageWidgetPyInput

func (OneDashboardPageWidgetPyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetPy)(nil)).Elem()
}

func (i OneDashboardPageWidgetPyArray) ToOneDashboardPageWidgetPyArrayOutput() OneDashboardPageWidgetPyArrayOutput {
	return i.ToOneDashboardPageWidgetPyArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetPyArray) ToOneDashboardPageWidgetPyArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetPyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetPyArrayOutput)
}

type OneDashboardPageWidgetPyOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetPyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetPy)(nil)).Elem()
}

func (o OneDashboardPageWidgetPyOutput) ToOneDashboardPageWidgetPyOutput() OneDashboardPageWidgetPyOutput {
	return o
}

func (o OneDashboardPageWidgetPyOutput) ToOneDashboardPageWidgetPyOutputWithContext(ctx context.Context) OneDashboardPageWidgetPyOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetPyOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) int { return v.Column }).(pulumi.IntOutput)
}

func (o OneDashboardPageWidgetPyOutput) FilterCurrentDashboard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) *bool { return v.FilterCurrentDashboard }).(pulumi.BoolPtrOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetPyOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetPyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o OneDashboardPageWidgetPyOutput) LinkedEntityGuids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) []string { return v.LinkedEntityGuids }).(pulumi.StringArrayOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
func (o OneDashboardPageWidgetPyOutput) NrqlQueries() OneDashboardPageWidgetPyNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) []OneDashboardPageWidgetPyNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetPyNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetPyOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetPyOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetPyOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetPyArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetPyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetPy)(nil)).Elem()
}

func (o OneDashboardPageWidgetPyArrayOutput) ToOneDashboardPageWidgetPyArrayOutput() OneDashboardPageWidgetPyArrayOutput {
	return o
}

func (o OneDashboardPageWidgetPyArrayOutput) ToOneDashboardPageWidgetPyArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetPyArrayOutput {
	return o
}

func (o OneDashboardPageWidgetPyArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetPyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetPy {
		return vs[0].([]OneDashboardPageWidgetPy)[vs[1].(int)]
	}).(OneDashboardPageWidgetPyOutput)
}

type OneDashboardPageWidgetPyNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetPyNrqlQueryInput is an input type that accepts OneDashboardPageWidgetPyNrqlQueryArgs and OneDashboardPageWidgetPyNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetPyNrqlQueryInput` via:
//
//          OneDashboardPageWidgetPyNrqlQueryArgs{...}
type OneDashboardPageWidgetPyNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetPyNrqlQueryOutput() OneDashboardPageWidgetPyNrqlQueryOutput
	ToOneDashboardPageWidgetPyNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetPyNrqlQueryOutput
}

type OneDashboardPageWidgetPyNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetPyNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetPyNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetPyNrqlQueryArgs) ToOneDashboardPageWidgetPyNrqlQueryOutput() OneDashboardPageWidgetPyNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetPyNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetPyNrqlQueryArgs) ToOneDashboardPageWidgetPyNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetPyNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetPyNrqlQueryOutput)
}

// OneDashboardPageWidgetPyNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetPyNrqlQueryArray and OneDashboardPageWidgetPyNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetPyNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetPyNrqlQueryArray{ OneDashboardPageWidgetPyNrqlQueryArgs{...} }
type OneDashboardPageWidgetPyNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetPyNrqlQueryArrayOutput() OneDashboardPageWidgetPyNrqlQueryArrayOutput
	ToOneDashboardPageWidgetPyNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetPyNrqlQueryArrayOutput
}

type OneDashboardPageWidgetPyNrqlQueryArray []OneDashboardPageWidgetPyNrqlQueryInput

func (OneDashboardPageWidgetPyNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetPyNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetPyNrqlQueryArray) ToOneDashboardPageWidgetPyNrqlQueryArrayOutput() OneDashboardPageWidgetPyNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetPyNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetPyNrqlQueryArray) ToOneDashboardPageWidgetPyNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetPyNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetPyNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetPyNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetPyNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetPyNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetPyNrqlQueryOutput) ToOneDashboardPageWidgetPyNrqlQueryOutput() OneDashboardPageWidgetPyNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetPyNrqlQueryOutput) ToOneDashboardPageWidgetPyNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetPyNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetPyNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPyNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetPyNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPyNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetPyNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetPyNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetPyNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetPyNrqlQueryArrayOutput) ToOneDashboardPageWidgetPyNrqlQueryArrayOutput() OneDashboardPageWidgetPyNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetPyNrqlQueryArrayOutput) ToOneDashboardPageWidgetPyNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetPyNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetPyNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetPyNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetPyNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetPyNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetPyNrqlQueryOutput)
}

type OneDashboardPageWidgetStackedBar struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries []OneDashboardPageWidgetStackedBarNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetStackedBarInput is an input type that accepts OneDashboardPageWidgetStackedBarArgs and OneDashboardPageWidgetStackedBarOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetStackedBarInput` via:
//
//          OneDashboardPageWidgetStackedBarArgs{...}
type OneDashboardPageWidgetStackedBarInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetStackedBarOutput() OneDashboardPageWidgetStackedBarOutput
	ToOneDashboardPageWidgetStackedBarOutputWithContext(context.Context) OneDashboardPageWidgetStackedBarOutput
}

type OneDashboardPageWidgetStackedBarArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries OneDashboardPageWidgetStackedBarNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetStackedBarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetStackedBar)(nil)).Elem()
}

func (i OneDashboardPageWidgetStackedBarArgs) ToOneDashboardPageWidgetStackedBarOutput() OneDashboardPageWidgetStackedBarOutput {
	return i.ToOneDashboardPageWidgetStackedBarOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetStackedBarArgs) ToOneDashboardPageWidgetStackedBarOutputWithContext(ctx context.Context) OneDashboardPageWidgetStackedBarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetStackedBarOutput)
}

// OneDashboardPageWidgetStackedBarArrayInput is an input type that accepts OneDashboardPageWidgetStackedBarArray and OneDashboardPageWidgetStackedBarArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetStackedBarArrayInput` via:
//
//          OneDashboardPageWidgetStackedBarArray{ OneDashboardPageWidgetStackedBarArgs{...} }
type OneDashboardPageWidgetStackedBarArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetStackedBarArrayOutput() OneDashboardPageWidgetStackedBarArrayOutput
	ToOneDashboardPageWidgetStackedBarArrayOutputWithContext(context.Context) OneDashboardPageWidgetStackedBarArrayOutput
}

type OneDashboardPageWidgetStackedBarArray []OneDashboardPageWidgetStackedBarInput

func (OneDashboardPageWidgetStackedBarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetStackedBar)(nil)).Elem()
}

func (i OneDashboardPageWidgetStackedBarArray) ToOneDashboardPageWidgetStackedBarArrayOutput() OneDashboardPageWidgetStackedBarArrayOutput {
	return i.ToOneDashboardPageWidgetStackedBarArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetStackedBarArray) ToOneDashboardPageWidgetStackedBarArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetStackedBarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetStackedBarArrayOutput)
}

type OneDashboardPageWidgetStackedBarOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetStackedBarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetStackedBar)(nil)).Elem()
}

func (o OneDashboardPageWidgetStackedBarOutput) ToOneDashboardPageWidgetStackedBarOutput() OneDashboardPageWidgetStackedBarOutput {
	return o
}

func (o OneDashboardPageWidgetStackedBarOutput) ToOneDashboardPageWidgetStackedBarOutputWithContext(ctx context.Context) OneDashboardPageWidgetStackedBarOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetStackedBarOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetStackedBar) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetStackedBarOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetStackedBar) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetStackedBarOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetStackedBar) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
func (o OneDashboardPageWidgetStackedBarOutput) NrqlQueries() OneDashboardPageWidgetStackedBarNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetStackedBar) []OneDashboardPageWidgetStackedBarNrqlQuery {
		return v.NrqlQueries
	}).(OneDashboardPageWidgetStackedBarNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetStackedBarOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetStackedBar) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetStackedBarOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetStackedBar) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetStackedBarOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetStackedBar) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetStackedBarArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetStackedBarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetStackedBar)(nil)).Elem()
}

func (o OneDashboardPageWidgetStackedBarArrayOutput) ToOneDashboardPageWidgetStackedBarArrayOutput() OneDashboardPageWidgetStackedBarArrayOutput {
	return o
}

func (o OneDashboardPageWidgetStackedBarArrayOutput) ToOneDashboardPageWidgetStackedBarArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetStackedBarArrayOutput {
	return o
}

func (o OneDashboardPageWidgetStackedBarArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetStackedBarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetStackedBar {
		return vs[0].([]OneDashboardPageWidgetStackedBar)[vs[1].(int)]
	}).(OneDashboardPageWidgetStackedBarOutput)
}

type OneDashboardPageWidgetStackedBarNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetStackedBarNrqlQueryInput is an input type that accepts OneDashboardPageWidgetStackedBarNrqlQueryArgs and OneDashboardPageWidgetStackedBarNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetStackedBarNrqlQueryInput` via:
//
//          OneDashboardPageWidgetStackedBarNrqlQueryArgs{...}
type OneDashboardPageWidgetStackedBarNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetStackedBarNrqlQueryOutput() OneDashboardPageWidgetStackedBarNrqlQueryOutput
	ToOneDashboardPageWidgetStackedBarNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetStackedBarNrqlQueryOutput
}

type OneDashboardPageWidgetStackedBarNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetStackedBarNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetStackedBarNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetStackedBarNrqlQueryArgs) ToOneDashboardPageWidgetStackedBarNrqlQueryOutput() OneDashboardPageWidgetStackedBarNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetStackedBarNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetStackedBarNrqlQueryArgs) ToOneDashboardPageWidgetStackedBarNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetStackedBarNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetStackedBarNrqlQueryOutput)
}

// OneDashboardPageWidgetStackedBarNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetStackedBarNrqlQueryArray and OneDashboardPageWidgetStackedBarNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetStackedBarNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetStackedBarNrqlQueryArray{ OneDashboardPageWidgetStackedBarNrqlQueryArgs{...} }
type OneDashboardPageWidgetStackedBarNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetStackedBarNrqlQueryArrayOutput() OneDashboardPageWidgetStackedBarNrqlQueryArrayOutput
	ToOneDashboardPageWidgetStackedBarNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetStackedBarNrqlQueryArrayOutput
}

type OneDashboardPageWidgetStackedBarNrqlQueryArray []OneDashboardPageWidgetStackedBarNrqlQueryInput

func (OneDashboardPageWidgetStackedBarNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetStackedBarNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetStackedBarNrqlQueryArray) ToOneDashboardPageWidgetStackedBarNrqlQueryArrayOutput() OneDashboardPageWidgetStackedBarNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetStackedBarNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetStackedBarNrqlQueryArray) ToOneDashboardPageWidgetStackedBarNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetStackedBarNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetStackedBarNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetStackedBarNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetStackedBarNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetStackedBarNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetStackedBarNrqlQueryOutput) ToOneDashboardPageWidgetStackedBarNrqlQueryOutput() OneDashboardPageWidgetStackedBarNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetStackedBarNrqlQueryOutput) ToOneDashboardPageWidgetStackedBarNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetStackedBarNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetStackedBarNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetStackedBarNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetStackedBarNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetStackedBarNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetStackedBarNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetStackedBarNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetStackedBarNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetStackedBarNrqlQueryArrayOutput) ToOneDashboardPageWidgetStackedBarNrqlQueryArrayOutput() OneDashboardPageWidgetStackedBarNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetStackedBarNrqlQueryArrayOutput) ToOneDashboardPageWidgetStackedBarNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetStackedBarNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetStackedBarNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetStackedBarNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetStackedBarNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetStackedBarNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetStackedBarNrqlQueryOutput)
}

type OneDashboardPageWidgetTable struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column                 int   `pulumi:"column"`
	FilterCurrentDashboard *bool `pulumi:"filterCurrentDashboard"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height            *int     `pulumi:"height"`
	Id                *string  `pulumi:"id"`
	LinkedEntityGuids []string `pulumi:"linkedEntityGuids"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries []OneDashboardPageWidgetTableNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetTableInput is an input type that accepts OneDashboardPageWidgetTableArgs and OneDashboardPageWidgetTableOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetTableInput` via:
//
//          OneDashboardPageWidgetTableArgs{...}
type OneDashboardPageWidgetTableInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetTableOutput() OneDashboardPageWidgetTableOutput
	ToOneDashboardPageWidgetTableOutputWithContext(context.Context) OneDashboardPageWidgetTableOutput
}

type OneDashboardPageWidgetTableArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column                 pulumi.IntInput     `pulumi:"column"`
	FilterCurrentDashboard pulumi.BoolPtrInput `pulumi:"filterCurrentDashboard"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height            pulumi.IntPtrInput      `pulumi:"height"`
	Id                pulumi.StringPtrInput   `pulumi:"id"`
	LinkedEntityGuids pulumi.StringArrayInput `pulumi:"linkedEntityGuids"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
	NrqlQueries OneDashboardPageWidgetTableNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetTable)(nil)).Elem()
}

func (i OneDashboardPageWidgetTableArgs) ToOneDashboardPageWidgetTableOutput() OneDashboardPageWidgetTableOutput {
	return i.ToOneDashboardPageWidgetTableOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetTableArgs) ToOneDashboardPageWidgetTableOutputWithContext(ctx context.Context) OneDashboardPageWidgetTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetTableOutput)
}

// OneDashboardPageWidgetTableArrayInput is an input type that accepts OneDashboardPageWidgetTableArray and OneDashboardPageWidgetTableArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetTableArrayInput` via:
//
//          OneDashboardPageWidgetTableArray{ OneDashboardPageWidgetTableArgs{...} }
type OneDashboardPageWidgetTableArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetTableArrayOutput() OneDashboardPageWidgetTableArrayOutput
	ToOneDashboardPageWidgetTableArrayOutputWithContext(context.Context) OneDashboardPageWidgetTableArrayOutput
}

type OneDashboardPageWidgetTableArray []OneDashboardPageWidgetTableInput

func (OneDashboardPageWidgetTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetTable)(nil)).Elem()
}

func (i OneDashboardPageWidgetTableArray) ToOneDashboardPageWidgetTableArrayOutput() OneDashboardPageWidgetTableArrayOutput {
	return i.ToOneDashboardPageWidgetTableArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetTableArray) ToOneDashboardPageWidgetTableArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetTableArrayOutput)
}

type OneDashboardPageWidgetTableOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetTable)(nil)).Elem()
}

func (o OneDashboardPageWidgetTableOutput) ToOneDashboardPageWidgetTableOutput() OneDashboardPageWidgetTableOutput {
	return o
}

func (o OneDashboardPageWidgetTableOutput) ToOneDashboardPageWidgetTableOutputWithContext(ctx context.Context) OneDashboardPageWidgetTableOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetTableOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) int { return v.Column }).(pulumi.IntOutput)
}

func (o OneDashboardPageWidgetTableOutput) FilterCurrentDashboard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) *bool { return v.FilterCurrentDashboard }).(pulumi.BoolPtrOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetTableOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetTableOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o OneDashboardPageWidgetTableOutput) LinkedEntityGuids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) []string { return v.LinkedEntityGuids }).(pulumi.StringArrayOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
// * `filterCurrentDashboard`: (Optional) Use this item to filter the current dashboard.
func (o OneDashboardPageWidgetTableOutput) NrqlQueries() OneDashboardPageWidgetTableNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) []OneDashboardPageWidgetTableNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetTableNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetTableOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetTableOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetTableOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetTableArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetTable)(nil)).Elem()
}

func (o OneDashboardPageWidgetTableArrayOutput) ToOneDashboardPageWidgetTableArrayOutput() OneDashboardPageWidgetTableArrayOutput {
	return o
}

func (o OneDashboardPageWidgetTableArrayOutput) ToOneDashboardPageWidgetTableArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetTableArrayOutput {
	return o
}

func (o OneDashboardPageWidgetTableArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetTable {
		return vs[0].([]OneDashboardPageWidgetTable)[vs[1].(int)]
	}).(OneDashboardPageWidgetTableOutput)
}

type OneDashboardPageWidgetTableNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetTableNrqlQueryInput is an input type that accepts OneDashboardPageWidgetTableNrqlQueryArgs and OneDashboardPageWidgetTableNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetTableNrqlQueryInput` via:
//
//          OneDashboardPageWidgetTableNrqlQueryArgs{...}
type OneDashboardPageWidgetTableNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetTableNrqlQueryOutput() OneDashboardPageWidgetTableNrqlQueryOutput
	ToOneDashboardPageWidgetTableNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetTableNrqlQueryOutput
}

type OneDashboardPageWidgetTableNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetTableNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetTableNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetTableNrqlQueryArgs) ToOneDashboardPageWidgetTableNrqlQueryOutput() OneDashboardPageWidgetTableNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetTableNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetTableNrqlQueryArgs) ToOneDashboardPageWidgetTableNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetTableNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetTableNrqlQueryOutput)
}

// OneDashboardPageWidgetTableNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetTableNrqlQueryArray and OneDashboardPageWidgetTableNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetTableNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetTableNrqlQueryArray{ OneDashboardPageWidgetTableNrqlQueryArgs{...} }
type OneDashboardPageWidgetTableNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetTableNrqlQueryArrayOutput() OneDashboardPageWidgetTableNrqlQueryArrayOutput
	ToOneDashboardPageWidgetTableNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetTableNrqlQueryArrayOutput
}

type OneDashboardPageWidgetTableNrqlQueryArray []OneDashboardPageWidgetTableNrqlQueryInput

func (OneDashboardPageWidgetTableNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetTableNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetTableNrqlQueryArray) ToOneDashboardPageWidgetTableNrqlQueryArrayOutput() OneDashboardPageWidgetTableNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetTableNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetTableNrqlQueryArray) ToOneDashboardPageWidgetTableNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetTableNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetTableNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetTableNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetTableNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetTableNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetTableNrqlQueryOutput) ToOneDashboardPageWidgetTableNrqlQueryOutput() OneDashboardPageWidgetTableNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetTableNrqlQueryOutput) ToOneDashboardPageWidgetTableNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetTableNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetTableNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTableNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetTableNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTableNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetTableNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetTableNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetTableNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetTableNrqlQueryArrayOutput) ToOneDashboardPageWidgetTableNrqlQueryArrayOutput() OneDashboardPageWidgetTableNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetTableNrqlQueryArrayOutput) ToOneDashboardPageWidgetTableNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetTableNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetTableNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetTableNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetTableNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetTableNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetTableNrqlQueryOutput)
}

type OneDashboardRawPage struct {
	// Brief text describing the dashboard.
	Description *string `pulumi:"description"`
	// The unique entity identifier of the dashboard page in New Relic.
	Guid *string `pulumi:"guid"`
	// The title of the dashboard.
	Name string `pulumi:"name"`
	// (Optional) A nested block that describes a widget. See Nested widget blocks below for details.
	Widgets []OneDashboardRawPageWidget `pulumi:"widgets"`
}

// OneDashboardRawPageInput is an input type that accepts OneDashboardRawPageArgs and OneDashboardRawPageOutput values.
// You can construct a concrete instance of `OneDashboardRawPageInput` via:
//
//          OneDashboardRawPageArgs{...}
type OneDashboardRawPageInput interface {
	pulumi.Input

	ToOneDashboardRawPageOutput() OneDashboardRawPageOutput
	ToOneDashboardRawPageOutputWithContext(context.Context) OneDashboardRawPageOutput
}

type OneDashboardRawPageArgs struct {
	// Brief text describing the dashboard.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The unique entity identifier of the dashboard page in New Relic.
	Guid pulumi.StringPtrInput `pulumi:"guid"`
	// The title of the dashboard.
	Name pulumi.StringInput `pulumi:"name"`
	// (Optional) A nested block that describes a widget. See Nested widget blocks below for details.
	Widgets OneDashboardRawPageWidgetArrayInput `pulumi:"widgets"`
}

func (OneDashboardRawPageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardRawPage)(nil)).Elem()
}

func (i OneDashboardRawPageArgs) ToOneDashboardRawPageOutput() OneDashboardRawPageOutput {
	return i.ToOneDashboardRawPageOutputWithContext(context.Background())
}

func (i OneDashboardRawPageArgs) ToOneDashboardRawPageOutputWithContext(ctx context.Context) OneDashboardRawPageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardRawPageOutput)
}

// OneDashboardRawPageArrayInput is an input type that accepts OneDashboardRawPageArray and OneDashboardRawPageArrayOutput values.
// You can construct a concrete instance of `OneDashboardRawPageArrayInput` via:
//
//          OneDashboardRawPageArray{ OneDashboardRawPageArgs{...} }
type OneDashboardRawPageArrayInput interface {
	pulumi.Input

	ToOneDashboardRawPageArrayOutput() OneDashboardRawPageArrayOutput
	ToOneDashboardRawPageArrayOutputWithContext(context.Context) OneDashboardRawPageArrayOutput
}

type OneDashboardRawPageArray []OneDashboardRawPageInput

func (OneDashboardRawPageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardRawPage)(nil)).Elem()
}

func (i OneDashboardRawPageArray) ToOneDashboardRawPageArrayOutput() OneDashboardRawPageArrayOutput {
	return i.ToOneDashboardRawPageArrayOutputWithContext(context.Background())
}

func (i OneDashboardRawPageArray) ToOneDashboardRawPageArrayOutputWithContext(ctx context.Context) OneDashboardRawPageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardRawPageArrayOutput)
}

type OneDashboardRawPageOutput struct{ *pulumi.OutputState }

func (OneDashboardRawPageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardRawPage)(nil)).Elem()
}

func (o OneDashboardRawPageOutput) ToOneDashboardRawPageOutput() OneDashboardRawPageOutput {
	return o
}

func (o OneDashboardRawPageOutput) ToOneDashboardRawPageOutputWithContext(ctx context.Context) OneDashboardRawPageOutput {
	return o
}

// Brief text describing the dashboard.
func (o OneDashboardRawPageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardRawPage) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique entity identifier of the dashboard page in New Relic.
func (o OneDashboardRawPageOutput) Guid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardRawPage) *string { return v.Guid }).(pulumi.StringPtrOutput)
}

// The title of the dashboard.
func (o OneDashboardRawPageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardRawPage) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional) A nested block that describes a widget. See Nested widget blocks below for details.
func (o OneDashboardRawPageOutput) Widgets() OneDashboardRawPageWidgetArrayOutput {
	return o.ApplyT(func(v OneDashboardRawPage) []OneDashboardRawPageWidget { return v.Widgets }).(OneDashboardRawPageWidgetArrayOutput)
}

type OneDashboardRawPageArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardRawPageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardRawPage)(nil)).Elem()
}

func (o OneDashboardRawPageArrayOutput) ToOneDashboardRawPageArrayOutput() OneDashboardRawPageArrayOutput {
	return o
}

func (o OneDashboardRawPageArrayOutput) ToOneDashboardRawPageArrayOutputWithContext(ctx context.Context) OneDashboardRawPageArrayOutput {
	return o
}

func (o OneDashboardRawPageArrayOutput) Index(i pulumi.IntInput) OneDashboardRawPageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardRawPage {
		return vs[0].([]OneDashboardRawPage)[vs[1].(int)]
	}).(OneDashboardRawPageOutput)
}

type OneDashboardRawPageWidget struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Required) The configuration of the widget.
	Configuration string `pulumi:"configuration"`
	// (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Optional) Related entity GUIDs.
	LinkedEntityGuids []string `pulumi:"linkedEntityGuids"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Required) The visualization ID of the widget
	VisualizationId string `pulumi:"visualizationId"`
	// (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardRawPageWidgetInput is an input type that accepts OneDashboardRawPageWidgetArgs and OneDashboardRawPageWidgetOutput values.
// You can construct a concrete instance of `OneDashboardRawPageWidgetInput` via:
//
//          OneDashboardRawPageWidgetArgs{...}
type OneDashboardRawPageWidgetInput interface {
	pulumi.Input

	ToOneDashboardRawPageWidgetOutput() OneDashboardRawPageWidgetOutput
	ToOneDashboardRawPageWidgetOutputWithContext(context.Context) OneDashboardRawPageWidgetOutput
}

type OneDashboardRawPageWidgetArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Required) The configuration of the widget.
	Configuration pulumi.StringInput `pulumi:"configuration"`
	// (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Optional) Related entity GUIDs.
	LinkedEntityGuids pulumi.StringArrayInput `pulumi:"linkedEntityGuids"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Required) The visualization ID of the widget
	VisualizationId pulumi.StringInput `pulumi:"visualizationId"`
	// (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardRawPageWidgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardRawPageWidget)(nil)).Elem()
}

func (i OneDashboardRawPageWidgetArgs) ToOneDashboardRawPageWidgetOutput() OneDashboardRawPageWidgetOutput {
	return i.ToOneDashboardRawPageWidgetOutputWithContext(context.Background())
}

func (i OneDashboardRawPageWidgetArgs) ToOneDashboardRawPageWidgetOutputWithContext(ctx context.Context) OneDashboardRawPageWidgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardRawPageWidgetOutput)
}

// OneDashboardRawPageWidgetArrayInput is an input type that accepts OneDashboardRawPageWidgetArray and OneDashboardRawPageWidgetArrayOutput values.
// You can construct a concrete instance of `OneDashboardRawPageWidgetArrayInput` via:
//
//          OneDashboardRawPageWidgetArray{ OneDashboardRawPageWidgetArgs{...} }
type OneDashboardRawPageWidgetArrayInput interface {
	pulumi.Input

	ToOneDashboardRawPageWidgetArrayOutput() OneDashboardRawPageWidgetArrayOutput
	ToOneDashboardRawPageWidgetArrayOutputWithContext(context.Context) OneDashboardRawPageWidgetArrayOutput
}

type OneDashboardRawPageWidgetArray []OneDashboardRawPageWidgetInput

func (OneDashboardRawPageWidgetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardRawPageWidget)(nil)).Elem()
}

func (i OneDashboardRawPageWidgetArray) ToOneDashboardRawPageWidgetArrayOutput() OneDashboardRawPageWidgetArrayOutput {
	return i.ToOneDashboardRawPageWidgetArrayOutputWithContext(context.Background())
}

func (i OneDashboardRawPageWidgetArray) ToOneDashboardRawPageWidgetArrayOutputWithContext(ctx context.Context) OneDashboardRawPageWidgetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardRawPageWidgetArrayOutput)
}

type OneDashboardRawPageWidgetOutput struct{ *pulumi.OutputState }

func (OneDashboardRawPageWidgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardRawPageWidget)(nil)).Elem()
}

func (o OneDashboardRawPageWidgetOutput) ToOneDashboardRawPageWidgetOutput() OneDashboardRawPageWidgetOutput {
	return o
}

func (o OneDashboardRawPageWidgetOutput) ToOneDashboardRawPageWidgetOutputWithContext(ctx context.Context) OneDashboardRawPageWidgetOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardRawPageWidgetOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) int { return v.Column }).(pulumi.IntOutput)
}

// (Required) The configuration of the widget.
func (o OneDashboardRawPageWidgetOutput) Configuration() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) string { return v.Configuration }).(pulumi.StringOutput)
}

// (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
func (o OneDashboardRawPageWidgetOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardRawPageWidgetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Optional) Related entity GUIDs.
func (o OneDashboardRawPageWidgetOutput) LinkedEntityGuids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) []string { return v.LinkedEntityGuids }).(pulumi.StringArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardRawPageWidgetOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardRawPageWidgetOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) string { return v.Title }).(pulumi.StringOutput)
}

// (Required) The visualization ID of the widget
func (o OneDashboardRawPageWidgetOutput) VisualizationId() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) string { return v.VisualizationId }).(pulumi.StringOutput)
}

// (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
func (o OneDashboardRawPageWidgetOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardRawPageWidgetArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardRawPageWidgetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardRawPageWidget)(nil)).Elem()
}

func (o OneDashboardRawPageWidgetArrayOutput) ToOneDashboardRawPageWidgetArrayOutput() OneDashboardRawPageWidgetArrayOutput {
	return o
}

func (o OneDashboardRawPageWidgetArrayOutput) ToOneDashboardRawPageWidgetArrayOutputWithContext(ctx context.Context) OneDashboardRawPageWidgetArrayOutput {
	return o
}

func (o OneDashboardRawPageWidgetArrayOutput) Index(i pulumi.IntInput) OneDashboardRawPageWidgetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardRawPageWidget {
		return vs[0].([]OneDashboardRawPageWidget)[vs[1].(int)]
	}).(OneDashboardRawPageWidgetOutput)
}

type ServiceLevelEvents struct {
	// The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,
	// and that contains the NRDB data for the SLI/SLO calculations.
	AccountId int `pulumi:"accountId"`
	// The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.
	BadEvents *ServiceLevelEventsBadEvents `pulumi:"badEvents"`
	// The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.
	GoodEvents *ServiceLevelEventsGoodEvents `pulumi:"goodEvents"`
	// The definition of valid requests.
	ValidEvents ServiceLevelEventsValidEvents `pulumi:"validEvents"`
}

// ServiceLevelEventsInput is an input type that accepts ServiceLevelEventsArgs and ServiceLevelEventsOutput values.
// You can construct a concrete instance of `ServiceLevelEventsInput` via:
//
//          ServiceLevelEventsArgs{...}
type ServiceLevelEventsInput interface {
	pulumi.Input

	ToServiceLevelEventsOutput() ServiceLevelEventsOutput
	ToServiceLevelEventsOutputWithContext(context.Context) ServiceLevelEventsOutput
}

type ServiceLevelEventsArgs struct {
	// The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,
	// and that contains the NRDB data for the SLI/SLO calculations.
	AccountId pulumi.IntInput `pulumi:"accountId"`
	// The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.
	BadEvents ServiceLevelEventsBadEventsPtrInput `pulumi:"badEvents"`
	// The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.
	GoodEvents ServiceLevelEventsGoodEventsPtrInput `pulumi:"goodEvents"`
	// The definition of valid requests.
	ValidEvents ServiceLevelEventsValidEventsInput `pulumi:"validEvents"`
}

func (ServiceLevelEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelEvents)(nil)).Elem()
}

func (i ServiceLevelEventsArgs) ToServiceLevelEventsOutput() ServiceLevelEventsOutput {
	return i.ToServiceLevelEventsOutputWithContext(context.Background())
}

func (i ServiceLevelEventsArgs) ToServiceLevelEventsOutputWithContext(ctx context.Context) ServiceLevelEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelEventsOutput)
}

func (i ServiceLevelEventsArgs) ToServiceLevelEventsPtrOutput() ServiceLevelEventsPtrOutput {
	return i.ToServiceLevelEventsPtrOutputWithContext(context.Background())
}

func (i ServiceLevelEventsArgs) ToServiceLevelEventsPtrOutputWithContext(ctx context.Context) ServiceLevelEventsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelEventsOutput).ToServiceLevelEventsPtrOutputWithContext(ctx)
}

// ServiceLevelEventsPtrInput is an input type that accepts ServiceLevelEventsArgs, ServiceLevelEventsPtr and ServiceLevelEventsPtrOutput values.
// You can construct a concrete instance of `ServiceLevelEventsPtrInput` via:
//
//          ServiceLevelEventsArgs{...}
//
//  or:
//
//          nil
type ServiceLevelEventsPtrInput interface {
	pulumi.Input

	ToServiceLevelEventsPtrOutput() ServiceLevelEventsPtrOutput
	ToServiceLevelEventsPtrOutputWithContext(context.Context) ServiceLevelEventsPtrOutput
}

type serviceLevelEventsPtrType ServiceLevelEventsArgs

func ServiceLevelEventsPtr(v *ServiceLevelEventsArgs) ServiceLevelEventsPtrInput {
	return (*serviceLevelEventsPtrType)(v)
}

func (*serviceLevelEventsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelEvents)(nil)).Elem()
}

func (i *serviceLevelEventsPtrType) ToServiceLevelEventsPtrOutput() ServiceLevelEventsPtrOutput {
	return i.ToServiceLevelEventsPtrOutputWithContext(context.Background())
}

func (i *serviceLevelEventsPtrType) ToServiceLevelEventsPtrOutputWithContext(ctx context.Context) ServiceLevelEventsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelEventsPtrOutput)
}

type ServiceLevelEventsOutput struct{ *pulumi.OutputState }

func (ServiceLevelEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelEvents)(nil)).Elem()
}

func (o ServiceLevelEventsOutput) ToServiceLevelEventsOutput() ServiceLevelEventsOutput {
	return o
}

func (o ServiceLevelEventsOutput) ToServiceLevelEventsOutputWithContext(ctx context.Context) ServiceLevelEventsOutput {
	return o
}

func (o ServiceLevelEventsOutput) ToServiceLevelEventsPtrOutput() ServiceLevelEventsPtrOutput {
	return o.ToServiceLevelEventsPtrOutputWithContext(context.Background())
}

func (o ServiceLevelEventsOutput) ToServiceLevelEventsPtrOutputWithContext(ctx context.Context) ServiceLevelEventsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelEvents) *ServiceLevelEvents {
		return &v
	}).(ServiceLevelEventsPtrOutput)
}

// The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,
// and that contains the NRDB data for the SLI/SLO calculations.
func (o ServiceLevelEventsOutput) AccountId() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceLevelEvents) int { return v.AccountId }).(pulumi.IntOutput)
}

// The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.
func (o ServiceLevelEventsOutput) BadEvents() ServiceLevelEventsBadEventsPtrOutput {
	return o.ApplyT(func(v ServiceLevelEvents) *ServiceLevelEventsBadEvents { return v.BadEvents }).(ServiceLevelEventsBadEventsPtrOutput)
}

// The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.
func (o ServiceLevelEventsOutput) GoodEvents() ServiceLevelEventsGoodEventsPtrOutput {
	return o.ApplyT(func(v ServiceLevelEvents) *ServiceLevelEventsGoodEvents { return v.GoodEvents }).(ServiceLevelEventsGoodEventsPtrOutput)
}

// The definition of valid requests.
func (o ServiceLevelEventsOutput) ValidEvents() ServiceLevelEventsValidEventsOutput {
	return o.ApplyT(func(v ServiceLevelEvents) ServiceLevelEventsValidEvents { return v.ValidEvents }).(ServiceLevelEventsValidEventsOutput)
}

type ServiceLevelEventsPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelEventsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelEvents)(nil)).Elem()
}

func (o ServiceLevelEventsPtrOutput) ToServiceLevelEventsPtrOutput() ServiceLevelEventsPtrOutput {
	return o
}

func (o ServiceLevelEventsPtrOutput) ToServiceLevelEventsPtrOutputWithContext(ctx context.Context) ServiceLevelEventsPtrOutput {
	return o
}

func (o ServiceLevelEventsPtrOutput) Elem() ServiceLevelEventsOutput {
	return o.ApplyT(func(v *ServiceLevelEvents) ServiceLevelEvents {
		if v != nil {
			return *v
		}
		var ret ServiceLevelEvents
		return ret
	}).(ServiceLevelEventsOutput)
}

// The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,
// and that contains the NRDB data for the SLI/SLO calculations.
func (o ServiceLevelEventsPtrOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceLevelEvents) *int {
		if v == nil {
			return nil
		}
		return &v.AccountId
	}).(pulumi.IntPtrOutput)
}

// The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.
func (o ServiceLevelEventsPtrOutput) BadEvents() ServiceLevelEventsBadEventsPtrOutput {
	return o.ApplyT(func(v *ServiceLevelEvents) *ServiceLevelEventsBadEvents {
		if v == nil {
			return nil
		}
		return v.BadEvents
	}).(ServiceLevelEventsBadEventsPtrOutput)
}

// The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.
func (o ServiceLevelEventsPtrOutput) GoodEvents() ServiceLevelEventsGoodEventsPtrOutput {
	return o.ApplyT(func(v *ServiceLevelEvents) *ServiceLevelEventsGoodEvents {
		if v == nil {
			return nil
		}
		return v.GoodEvents
	}).(ServiceLevelEventsGoodEventsPtrOutput)
}

// The definition of valid requests.
func (o ServiceLevelEventsPtrOutput) ValidEvents() ServiceLevelEventsValidEventsPtrOutput {
	return o.ApplyT(func(v *ServiceLevelEvents) *ServiceLevelEventsValidEvents {
		if v == nil {
			return nil
		}
		return &v.ValidEvents
	}).(ServiceLevelEventsValidEventsPtrOutput)
}

type ServiceLevelEventsBadEvents struct {
	// The event type where NRDB data will be fetched from.
	From string `pulumi:"from"`
	// A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
	// a particular entity and were successful).
	// a particular entity and returned an error).
	Where *string `pulumi:"where"`
}

// ServiceLevelEventsBadEventsInput is an input type that accepts ServiceLevelEventsBadEventsArgs and ServiceLevelEventsBadEventsOutput values.
// You can construct a concrete instance of `ServiceLevelEventsBadEventsInput` via:
//
//          ServiceLevelEventsBadEventsArgs{...}
type ServiceLevelEventsBadEventsInput interface {
	pulumi.Input

	ToServiceLevelEventsBadEventsOutput() ServiceLevelEventsBadEventsOutput
	ToServiceLevelEventsBadEventsOutputWithContext(context.Context) ServiceLevelEventsBadEventsOutput
}

type ServiceLevelEventsBadEventsArgs struct {
	// The event type where NRDB data will be fetched from.
	From pulumi.StringInput `pulumi:"from"`
	// A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
	// a particular entity and were successful).
	// a particular entity and returned an error).
	Where pulumi.StringPtrInput `pulumi:"where"`
}

func (ServiceLevelEventsBadEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelEventsBadEvents)(nil)).Elem()
}

func (i ServiceLevelEventsBadEventsArgs) ToServiceLevelEventsBadEventsOutput() ServiceLevelEventsBadEventsOutput {
	return i.ToServiceLevelEventsBadEventsOutputWithContext(context.Background())
}

func (i ServiceLevelEventsBadEventsArgs) ToServiceLevelEventsBadEventsOutputWithContext(ctx context.Context) ServiceLevelEventsBadEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelEventsBadEventsOutput)
}

func (i ServiceLevelEventsBadEventsArgs) ToServiceLevelEventsBadEventsPtrOutput() ServiceLevelEventsBadEventsPtrOutput {
	return i.ToServiceLevelEventsBadEventsPtrOutputWithContext(context.Background())
}

func (i ServiceLevelEventsBadEventsArgs) ToServiceLevelEventsBadEventsPtrOutputWithContext(ctx context.Context) ServiceLevelEventsBadEventsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelEventsBadEventsOutput).ToServiceLevelEventsBadEventsPtrOutputWithContext(ctx)
}

// ServiceLevelEventsBadEventsPtrInput is an input type that accepts ServiceLevelEventsBadEventsArgs, ServiceLevelEventsBadEventsPtr and ServiceLevelEventsBadEventsPtrOutput values.
// You can construct a concrete instance of `ServiceLevelEventsBadEventsPtrInput` via:
//
//          ServiceLevelEventsBadEventsArgs{...}
//
//  or:
//
//          nil
type ServiceLevelEventsBadEventsPtrInput interface {
	pulumi.Input

	ToServiceLevelEventsBadEventsPtrOutput() ServiceLevelEventsBadEventsPtrOutput
	ToServiceLevelEventsBadEventsPtrOutputWithContext(context.Context) ServiceLevelEventsBadEventsPtrOutput
}

type serviceLevelEventsBadEventsPtrType ServiceLevelEventsBadEventsArgs

func ServiceLevelEventsBadEventsPtr(v *ServiceLevelEventsBadEventsArgs) ServiceLevelEventsBadEventsPtrInput {
	return (*serviceLevelEventsBadEventsPtrType)(v)
}

func (*serviceLevelEventsBadEventsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelEventsBadEvents)(nil)).Elem()
}

func (i *serviceLevelEventsBadEventsPtrType) ToServiceLevelEventsBadEventsPtrOutput() ServiceLevelEventsBadEventsPtrOutput {
	return i.ToServiceLevelEventsBadEventsPtrOutputWithContext(context.Background())
}

func (i *serviceLevelEventsBadEventsPtrType) ToServiceLevelEventsBadEventsPtrOutputWithContext(ctx context.Context) ServiceLevelEventsBadEventsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelEventsBadEventsPtrOutput)
}

type ServiceLevelEventsBadEventsOutput struct{ *pulumi.OutputState }

func (ServiceLevelEventsBadEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelEventsBadEvents)(nil)).Elem()
}

func (o ServiceLevelEventsBadEventsOutput) ToServiceLevelEventsBadEventsOutput() ServiceLevelEventsBadEventsOutput {
	return o
}

func (o ServiceLevelEventsBadEventsOutput) ToServiceLevelEventsBadEventsOutputWithContext(ctx context.Context) ServiceLevelEventsBadEventsOutput {
	return o
}

func (o ServiceLevelEventsBadEventsOutput) ToServiceLevelEventsBadEventsPtrOutput() ServiceLevelEventsBadEventsPtrOutput {
	return o.ToServiceLevelEventsBadEventsPtrOutputWithContext(context.Background())
}

func (o ServiceLevelEventsBadEventsOutput) ToServiceLevelEventsBadEventsPtrOutputWithContext(ctx context.Context) ServiceLevelEventsBadEventsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelEventsBadEvents) *ServiceLevelEventsBadEvents {
		return &v
	}).(ServiceLevelEventsBadEventsPtrOutput)
}

// The event type where NRDB data will be fetched from.
func (o ServiceLevelEventsBadEventsOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLevelEventsBadEvents) string { return v.From }).(pulumi.StringOutput)
}

// A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
// a particular entity and were successful).
// a particular entity and returned an error).
func (o ServiceLevelEventsBadEventsOutput) Where() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLevelEventsBadEvents) *string { return v.Where }).(pulumi.StringPtrOutput)
}

type ServiceLevelEventsBadEventsPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelEventsBadEventsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelEventsBadEvents)(nil)).Elem()
}

func (o ServiceLevelEventsBadEventsPtrOutput) ToServiceLevelEventsBadEventsPtrOutput() ServiceLevelEventsBadEventsPtrOutput {
	return o
}

func (o ServiceLevelEventsBadEventsPtrOutput) ToServiceLevelEventsBadEventsPtrOutputWithContext(ctx context.Context) ServiceLevelEventsBadEventsPtrOutput {
	return o
}

func (o ServiceLevelEventsBadEventsPtrOutput) Elem() ServiceLevelEventsBadEventsOutput {
	return o.ApplyT(func(v *ServiceLevelEventsBadEvents) ServiceLevelEventsBadEvents {
		if v != nil {
			return *v
		}
		var ret ServiceLevelEventsBadEvents
		return ret
	}).(ServiceLevelEventsBadEventsOutput)
}

// The event type where NRDB data will be fetched from.
func (o ServiceLevelEventsBadEventsPtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelEventsBadEvents) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
// a particular entity and were successful).
// a particular entity and returned an error).
func (o ServiceLevelEventsBadEventsPtrOutput) Where() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelEventsBadEvents) *string {
		if v == nil {
			return nil
		}
		return v.Where
	}).(pulumi.StringPtrOutput)
}

type ServiceLevelEventsGoodEvents struct {
	// The event type where NRDB data will be fetched from.
	From string `pulumi:"from"`
	// A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
	// a particular entity and were successful).
	// a particular entity and returned an error).
	Where *string `pulumi:"where"`
}

// ServiceLevelEventsGoodEventsInput is an input type that accepts ServiceLevelEventsGoodEventsArgs and ServiceLevelEventsGoodEventsOutput values.
// You can construct a concrete instance of `ServiceLevelEventsGoodEventsInput` via:
//
//          ServiceLevelEventsGoodEventsArgs{...}
type ServiceLevelEventsGoodEventsInput interface {
	pulumi.Input

	ToServiceLevelEventsGoodEventsOutput() ServiceLevelEventsGoodEventsOutput
	ToServiceLevelEventsGoodEventsOutputWithContext(context.Context) ServiceLevelEventsGoodEventsOutput
}

type ServiceLevelEventsGoodEventsArgs struct {
	// The event type where NRDB data will be fetched from.
	From pulumi.StringInput `pulumi:"from"`
	// A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
	// a particular entity and were successful).
	// a particular entity and returned an error).
	Where pulumi.StringPtrInput `pulumi:"where"`
}

func (ServiceLevelEventsGoodEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelEventsGoodEvents)(nil)).Elem()
}

func (i ServiceLevelEventsGoodEventsArgs) ToServiceLevelEventsGoodEventsOutput() ServiceLevelEventsGoodEventsOutput {
	return i.ToServiceLevelEventsGoodEventsOutputWithContext(context.Background())
}

func (i ServiceLevelEventsGoodEventsArgs) ToServiceLevelEventsGoodEventsOutputWithContext(ctx context.Context) ServiceLevelEventsGoodEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelEventsGoodEventsOutput)
}

func (i ServiceLevelEventsGoodEventsArgs) ToServiceLevelEventsGoodEventsPtrOutput() ServiceLevelEventsGoodEventsPtrOutput {
	return i.ToServiceLevelEventsGoodEventsPtrOutputWithContext(context.Background())
}

func (i ServiceLevelEventsGoodEventsArgs) ToServiceLevelEventsGoodEventsPtrOutputWithContext(ctx context.Context) ServiceLevelEventsGoodEventsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelEventsGoodEventsOutput).ToServiceLevelEventsGoodEventsPtrOutputWithContext(ctx)
}

// ServiceLevelEventsGoodEventsPtrInput is an input type that accepts ServiceLevelEventsGoodEventsArgs, ServiceLevelEventsGoodEventsPtr and ServiceLevelEventsGoodEventsPtrOutput values.
// You can construct a concrete instance of `ServiceLevelEventsGoodEventsPtrInput` via:
//
//          ServiceLevelEventsGoodEventsArgs{...}
//
//  or:
//
//          nil
type ServiceLevelEventsGoodEventsPtrInput interface {
	pulumi.Input

	ToServiceLevelEventsGoodEventsPtrOutput() ServiceLevelEventsGoodEventsPtrOutput
	ToServiceLevelEventsGoodEventsPtrOutputWithContext(context.Context) ServiceLevelEventsGoodEventsPtrOutput
}

type serviceLevelEventsGoodEventsPtrType ServiceLevelEventsGoodEventsArgs

func ServiceLevelEventsGoodEventsPtr(v *ServiceLevelEventsGoodEventsArgs) ServiceLevelEventsGoodEventsPtrInput {
	return (*serviceLevelEventsGoodEventsPtrType)(v)
}

func (*serviceLevelEventsGoodEventsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelEventsGoodEvents)(nil)).Elem()
}

func (i *serviceLevelEventsGoodEventsPtrType) ToServiceLevelEventsGoodEventsPtrOutput() ServiceLevelEventsGoodEventsPtrOutput {
	return i.ToServiceLevelEventsGoodEventsPtrOutputWithContext(context.Background())
}

func (i *serviceLevelEventsGoodEventsPtrType) ToServiceLevelEventsGoodEventsPtrOutputWithContext(ctx context.Context) ServiceLevelEventsGoodEventsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelEventsGoodEventsPtrOutput)
}

type ServiceLevelEventsGoodEventsOutput struct{ *pulumi.OutputState }

func (ServiceLevelEventsGoodEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelEventsGoodEvents)(nil)).Elem()
}

func (o ServiceLevelEventsGoodEventsOutput) ToServiceLevelEventsGoodEventsOutput() ServiceLevelEventsGoodEventsOutput {
	return o
}

func (o ServiceLevelEventsGoodEventsOutput) ToServiceLevelEventsGoodEventsOutputWithContext(ctx context.Context) ServiceLevelEventsGoodEventsOutput {
	return o
}

func (o ServiceLevelEventsGoodEventsOutput) ToServiceLevelEventsGoodEventsPtrOutput() ServiceLevelEventsGoodEventsPtrOutput {
	return o.ToServiceLevelEventsGoodEventsPtrOutputWithContext(context.Background())
}

func (o ServiceLevelEventsGoodEventsOutput) ToServiceLevelEventsGoodEventsPtrOutputWithContext(ctx context.Context) ServiceLevelEventsGoodEventsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelEventsGoodEvents) *ServiceLevelEventsGoodEvents {
		return &v
	}).(ServiceLevelEventsGoodEventsPtrOutput)
}

// The event type where NRDB data will be fetched from.
func (o ServiceLevelEventsGoodEventsOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLevelEventsGoodEvents) string { return v.From }).(pulumi.StringOutput)
}

// A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
// a particular entity and were successful).
// a particular entity and returned an error).
func (o ServiceLevelEventsGoodEventsOutput) Where() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLevelEventsGoodEvents) *string { return v.Where }).(pulumi.StringPtrOutput)
}

type ServiceLevelEventsGoodEventsPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelEventsGoodEventsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelEventsGoodEvents)(nil)).Elem()
}

func (o ServiceLevelEventsGoodEventsPtrOutput) ToServiceLevelEventsGoodEventsPtrOutput() ServiceLevelEventsGoodEventsPtrOutput {
	return o
}

func (o ServiceLevelEventsGoodEventsPtrOutput) ToServiceLevelEventsGoodEventsPtrOutputWithContext(ctx context.Context) ServiceLevelEventsGoodEventsPtrOutput {
	return o
}

func (o ServiceLevelEventsGoodEventsPtrOutput) Elem() ServiceLevelEventsGoodEventsOutput {
	return o.ApplyT(func(v *ServiceLevelEventsGoodEvents) ServiceLevelEventsGoodEvents {
		if v != nil {
			return *v
		}
		var ret ServiceLevelEventsGoodEvents
		return ret
	}).(ServiceLevelEventsGoodEventsOutput)
}

// The event type where NRDB data will be fetched from.
func (o ServiceLevelEventsGoodEventsPtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelEventsGoodEvents) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
// a particular entity and were successful).
// a particular entity and returned an error).
func (o ServiceLevelEventsGoodEventsPtrOutput) Where() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelEventsGoodEvents) *string {
		if v == nil {
			return nil
		}
		return v.Where
	}).(pulumi.StringPtrOutput)
}

type ServiceLevelEventsValidEvents struct {
	// The event type where NRDB data will be fetched from.
	From string `pulumi:"from"`
	// A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
	// a particular entity and were successful).
	// a particular entity and returned an error).
	Where *string `pulumi:"where"`
}

// ServiceLevelEventsValidEventsInput is an input type that accepts ServiceLevelEventsValidEventsArgs and ServiceLevelEventsValidEventsOutput values.
// You can construct a concrete instance of `ServiceLevelEventsValidEventsInput` via:
//
//          ServiceLevelEventsValidEventsArgs{...}
type ServiceLevelEventsValidEventsInput interface {
	pulumi.Input

	ToServiceLevelEventsValidEventsOutput() ServiceLevelEventsValidEventsOutput
	ToServiceLevelEventsValidEventsOutputWithContext(context.Context) ServiceLevelEventsValidEventsOutput
}

type ServiceLevelEventsValidEventsArgs struct {
	// The event type where NRDB data will be fetched from.
	From pulumi.StringInput `pulumi:"from"`
	// A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
	// a particular entity and were successful).
	// a particular entity and returned an error).
	Where pulumi.StringPtrInput `pulumi:"where"`
}

func (ServiceLevelEventsValidEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelEventsValidEvents)(nil)).Elem()
}

func (i ServiceLevelEventsValidEventsArgs) ToServiceLevelEventsValidEventsOutput() ServiceLevelEventsValidEventsOutput {
	return i.ToServiceLevelEventsValidEventsOutputWithContext(context.Background())
}

func (i ServiceLevelEventsValidEventsArgs) ToServiceLevelEventsValidEventsOutputWithContext(ctx context.Context) ServiceLevelEventsValidEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelEventsValidEventsOutput)
}

func (i ServiceLevelEventsValidEventsArgs) ToServiceLevelEventsValidEventsPtrOutput() ServiceLevelEventsValidEventsPtrOutput {
	return i.ToServiceLevelEventsValidEventsPtrOutputWithContext(context.Background())
}

func (i ServiceLevelEventsValidEventsArgs) ToServiceLevelEventsValidEventsPtrOutputWithContext(ctx context.Context) ServiceLevelEventsValidEventsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelEventsValidEventsOutput).ToServiceLevelEventsValidEventsPtrOutputWithContext(ctx)
}

// ServiceLevelEventsValidEventsPtrInput is an input type that accepts ServiceLevelEventsValidEventsArgs, ServiceLevelEventsValidEventsPtr and ServiceLevelEventsValidEventsPtrOutput values.
// You can construct a concrete instance of `ServiceLevelEventsValidEventsPtrInput` via:
//
//          ServiceLevelEventsValidEventsArgs{...}
//
//  or:
//
//          nil
type ServiceLevelEventsValidEventsPtrInput interface {
	pulumi.Input

	ToServiceLevelEventsValidEventsPtrOutput() ServiceLevelEventsValidEventsPtrOutput
	ToServiceLevelEventsValidEventsPtrOutputWithContext(context.Context) ServiceLevelEventsValidEventsPtrOutput
}

type serviceLevelEventsValidEventsPtrType ServiceLevelEventsValidEventsArgs

func ServiceLevelEventsValidEventsPtr(v *ServiceLevelEventsValidEventsArgs) ServiceLevelEventsValidEventsPtrInput {
	return (*serviceLevelEventsValidEventsPtrType)(v)
}

func (*serviceLevelEventsValidEventsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelEventsValidEvents)(nil)).Elem()
}

func (i *serviceLevelEventsValidEventsPtrType) ToServiceLevelEventsValidEventsPtrOutput() ServiceLevelEventsValidEventsPtrOutput {
	return i.ToServiceLevelEventsValidEventsPtrOutputWithContext(context.Background())
}

func (i *serviceLevelEventsValidEventsPtrType) ToServiceLevelEventsValidEventsPtrOutputWithContext(ctx context.Context) ServiceLevelEventsValidEventsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelEventsValidEventsPtrOutput)
}

type ServiceLevelEventsValidEventsOutput struct{ *pulumi.OutputState }

func (ServiceLevelEventsValidEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelEventsValidEvents)(nil)).Elem()
}

func (o ServiceLevelEventsValidEventsOutput) ToServiceLevelEventsValidEventsOutput() ServiceLevelEventsValidEventsOutput {
	return o
}

func (o ServiceLevelEventsValidEventsOutput) ToServiceLevelEventsValidEventsOutputWithContext(ctx context.Context) ServiceLevelEventsValidEventsOutput {
	return o
}

func (o ServiceLevelEventsValidEventsOutput) ToServiceLevelEventsValidEventsPtrOutput() ServiceLevelEventsValidEventsPtrOutput {
	return o.ToServiceLevelEventsValidEventsPtrOutputWithContext(context.Background())
}

func (o ServiceLevelEventsValidEventsOutput) ToServiceLevelEventsValidEventsPtrOutputWithContext(ctx context.Context) ServiceLevelEventsValidEventsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelEventsValidEvents) *ServiceLevelEventsValidEvents {
		return &v
	}).(ServiceLevelEventsValidEventsPtrOutput)
}

// The event type where NRDB data will be fetched from.
func (o ServiceLevelEventsValidEventsOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLevelEventsValidEvents) string { return v.From }).(pulumi.StringOutput)
}

// A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
// a particular entity and were successful).
// a particular entity and returned an error).
func (o ServiceLevelEventsValidEventsOutput) Where() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLevelEventsValidEvents) *string { return v.Where }).(pulumi.StringPtrOutput)
}

type ServiceLevelEventsValidEventsPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelEventsValidEventsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelEventsValidEvents)(nil)).Elem()
}

func (o ServiceLevelEventsValidEventsPtrOutput) ToServiceLevelEventsValidEventsPtrOutput() ServiceLevelEventsValidEventsPtrOutput {
	return o
}

func (o ServiceLevelEventsValidEventsPtrOutput) ToServiceLevelEventsValidEventsPtrOutputWithContext(ctx context.Context) ServiceLevelEventsValidEventsPtrOutput {
	return o
}

func (o ServiceLevelEventsValidEventsPtrOutput) Elem() ServiceLevelEventsValidEventsOutput {
	return o.ApplyT(func(v *ServiceLevelEventsValidEvents) ServiceLevelEventsValidEvents {
		if v != nil {
			return *v
		}
		var ret ServiceLevelEventsValidEvents
		return ret
	}).(ServiceLevelEventsValidEventsOutput)
}

// The event type where NRDB data will be fetched from.
func (o ServiceLevelEventsValidEventsPtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelEventsValidEvents) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
// a particular entity and were successful).
// a particular entity and returned an error).
func (o ServiceLevelEventsValidEventsPtrOutput) Where() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelEventsValidEvents) *string {
		if v == nil {
			return nil
		}
		return v.Where
	}).(pulumi.StringPtrOutput)
}

type ServiceLevelObjective struct {
	// The description of the SLI.
	Description *string `pulumi:"description"`
	// A short name for the SLI that will help anyone understand what it is about.
	Name *string `pulumi:"name"`
	// The target of the objective, valid values between `0` and `100`. Up to 5 decimals accepted.
	Target float64 `pulumi:"target"`
	// Time window is the period of the objective.
	TimeWindow ServiceLevelObjectiveTimeWindow `pulumi:"timeWindow"`
}

// ServiceLevelObjectiveInput is an input type that accepts ServiceLevelObjectiveArgs and ServiceLevelObjectiveOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveInput` via:
//
//          ServiceLevelObjectiveArgs{...}
type ServiceLevelObjectiveInput interface {
	pulumi.Input

	ToServiceLevelObjectiveOutput() ServiceLevelObjectiveOutput
	ToServiceLevelObjectiveOutputWithContext(context.Context) ServiceLevelObjectiveOutput
}

type ServiceLevelObjectiveArgs struct {
	// The description of the SLI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A short name for the SLI that will help anyone understand what it is about.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The target of the objective, valid values between `0` and `100`. Up to 5 decimals accepted.
	Target pulumi.Float64Input `pulumi:"target"`
	// Time window is the period of the objective.
	TimeWindow ServiceLevelObjectiveTimeWindowInput `pulumi:"timeWindow"`
}

func (ServiceLevelObjectiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjective)(nil)).Elem()
}

func (i ServiceLevelObjectiveArgs) ToServiceLevelObjectiveOutput() ServiceLevelObjectiveOutput {
	return i.ToServiceLevelObjectiveOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveArgs) ToServiceLevelObjectiveOutputWithContext(ctx context.Context) ServiceLevelObjectiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveOutput)
}

func (i ServiceLevelObjectiveArgs) ToServiceLevelObjectivePtrOutput() ServiceLevelObjectivePtrOutput {
	return i.ToServiceLevelObjectivePtrOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveArgs) ToServiceLevelObjectivePtrOutputWithContext(ctx context.Context) ServiceLevelObjectivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveOutput).ToServiceLevelObjectivePtrOutputWithContext(ctx)
}

// ServiceLevelObjectivePtrInput is an input type that accepts ServiceLevelObjectiveArgs, ServiceLevelObjectivePtr and ServiceLevelObjectivePtrOutput values.
// You can construct a concrete instance of `ServiceLevelObjectivePtrInput` via:
//
//          ServiceLevelObjectiveArgs{...}
//
//  or:
//
//          nil
type ServiceLevelObjectivePtrInput interface {
	pulumi.Input

	ToServiceLevelObjectivePtrOutput() ServiceLevelObjectivePtrOutput
	ToServiceLevelObjectivePtrOutputWithContext(context.Context) ServiceLevelObjectivePtrOutput
}

type serviceLevelObjectivePtrType ServiceLevelObjectiveArgs

func ServiceLevelObjectivePtr(v *ServiceLevelObjectiveArgs) ServiceLevelObjectivePtrInput {
	return (*serviceLevelObjectivePtrType)(v)
}

func (*serviceLevelObjectivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjective)(nil)).Elem()
}

func (i *serviceLevelObjectivePtrType) ToServiceLevelObjectivePtrOutput() ServiceLevelObjectivePtrOutput {
	return i.ToServiceLevelObjectivePtrOutputWithContext(context.Background())
}

func (i *serviceLevelObjectivePtrType) ToServiceLevelObjectivePtrOutputWithContext(ctx context.Context) ServiceLevelObjectivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectivePtrOutput)
}

type ServiceLevelObjectiveOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjective)(nil)).Elem()
}

func (o ServiceLevelObjectiveOutput) ToServiceLevelObjectiveOutput() ServiceLevelObjectiveOutput {
	return o
}

func (o ServiceLevelObjectiveOutput) ToServiceLevelObjectiveOutputWithContext(ctx context.Context) ServiceLevelObjectiveOutput {
	return o
}

func (o ServiceLevelObjectiveOutput) ToServiceLevelObjectivePtrOutput() ServiceLevelObjectivePtrOutput {
	return o.ToServiceLevelObjectivePtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveOutput) ToServiceLevelObjectivePtrOutputWithContext(ctx context.Context) ServiceLevelObjectivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelObjective) *ServiceLevelObjective {
		return &v
	}).(ServiceLevelObjectivePtrOutput)
}

// The description of the SLI.
func (o ServiceLevelObjectiveOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjective) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A short name for the SLI that will help anyone understand what it is about.
func (o ServiceLevelObjectiveOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjective) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The target of the objective, valid values between `0` and `100`. Up to 5 decimals accepted.
func (o ServiceLevelObjectiveOutput) Target() pulumi.Float64Output {
	return o.ApplyT(func(v ServiceLevelObjective) float64 { return v.Target }).(pulumi.Float64Output)
}

// Time window is the period of the objective.
func (o ServiceLevelObjectiveOutput) TimeWindow() ServiceLevelObjectiveTimeWindowOutput {
	return o.ApplyT(func(v ServiceLevelObjective) ServiceLevelObjectiveTimeWindow { return v.TimeWindow }).(ServiceLevelObjectiveTimeWindowOutput)
}

type ServiceLevelObjectivePtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjective)(nil)).Elem()
}

func (o ServiceLevelObjectivePtrOutput) ToServiceLevelObjectivePtrOutput() ServiceLevelObjectivePtrOutput {
	return o
}

func (o ServiceLevelObjectivePtrOutput) ToServiceLevelObjectivePtrOutputWithContext(ctx context.Context) ServiceLevelObjectivePtrOutput {
	return o
}

func (o ServiceLevelObjectivePtrOutput) Elem() ServiceLevelObjectiveOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) ServiceLevelObjective {
		if v != nil {
			return *v
		}
		var ret ServiceLevelObjective
		return ret
	}).(ServiceLevelObjectiveOutput)
}

// The description of the SLI.
func (o ServiceLevelObjectivePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// A short name for the SLI that will help anyone understand what it is about.
func (o ServiceLevelObjectivePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The target of the objective, valid values between `0` and `100`. Up to 5 decimals accepted.
func (o ServiceLevelObjectivePtrOutput) Target() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) *float64 {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(pulumi.Float64PtrOutput)
}

// Time window is the period of the objective.
func (o ServiceLevelObjectivePtrOutput) TimeWindow() ServiceLevelObjectiveTimeWindowPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) *ServiceLevelObjectiveTimeWindow {
		if v == nil {
			return nil
		}
		return &v.TimeWindow
	}).(ServiceLevelObjectiveTimeWindowPtrOutput)
}

type ServiceLevelObjectiveTimeWindow struct {
	// Rolling window.
	Rolling ServiceLevelObjectiveTimeWindowRolling `pulumi:"rolling"`
}

// ServiceLevelObjectiveTimeWindowInput is an input type that accepts ServiceLevelObjectiveTimeWindowArgs and ServiceLevelObjectiveTimeWindowOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveTimeWindowInput` via:
//
//          ServiceLevelObjectiveTimeWindowArgs{...}
type ServiceLevelObjectiveTimeWindowInput interface {
	pulumi.Input

	ToServiceLevelObjectiveTimeWindowOutput() ServiceLevelObjectiveTimeWindowOutput
	ToServiceLevelObjectiveTimeWindowOutputWithContext(context.Context) ServiceLevelObjectiveTimeWindowOutput
}

type ServiceLevelObjectiveTimeWindowArgs struct {
	// Rolling window.
	Rolling ServiceLevelObjectiveTimeWindowRollingInput `pulumi:"rolling"`
}

func (ServiceLevelObjectiveTimeWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveTimeWindow)(nil)).Elem()
}

func (i ServiceLevelObjectiveTimeWindowArgs) ToServiceLevelObjectiveTimeWindowOutput() ServiceLevelObjectiveTimeWindowOutput {
	return i.ToServiceLevelObjectiveTimeWindowOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveTimeWindowArgs) ToServiceLevelObjectiveTimeWindowOutputWithContext(ctx context.Context) ServiceLevelObjectiveTimeWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveTimeWindowOutput)
}

func (i ServiceLevelObjectiveTimeWindowArgs) ToServiceLevelObjectiveTimeWindowPtrOutput() ServiceLevelObjectiveTimeWindowPtrOutput {
	return i.ToServiceLevelObjectiveTimeWindowPtrOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveTimeWindowArgs) ToServiceLevelObjectiveTimeWindowPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveTimeWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveTimeWindowOutput).ToServiceLevelObjectiveTimeWindowPtrOutputWithContext(ctx)
}

// ServiceLevelObjectiveTimeWindowPtrInput is an input type that accepts ServiceLevelObjectiveTimeWindowArgs, ServiceLevelObjectiveTimeWindowPtr and ServiceLevelObjectiveTimeWindowPtrOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveTimeWindowPtrInput` via:
//
//          ServiceLevelObjectiveTimeWindowArgs{...}
//
//  or:
//
//          nil
type ServiceLevelObjectiveTimeWindowPtrInput interface {
	pulumi.Input

	ToServiceLevelObjectiveTimeWindowPtrOutput() ServiceLevelObjectiveTimeWindowPtrOutput
	ToServiceLevelObjectiveTimeWindowPtrOutputWithContext(context.Context) ServiceLevelObjectiveTimeWindowPtrOutput
}

type serviceLevelObjectiveTimeWindowPtrType ServiceLevelObjectiveTimeWindowArgs

func ServiceLevelObjectiveTimeWindowPtr(v *ServiceLevelObjectiveTimeWindowArgs) ServiceLevelObjectiveTimeWindowPtrInput {
	return (*serviceLevelObjectiveTimeWindowPtrType)(v)
}

func (*serviceLevelObjectiveTimeWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveTimeWindow)(nil)).Elem()
}

func (i *serviceLevelObjectiveTimeWindowPtrType) ToServiceLevelObjectiveTimeWindowPtrOutput() ServiceLevelObjectiveTimeWindowPtrOutput {
	return i.ToServiceLevelObjectiveTimeWindowPtrOutputWithContext(context.Background())
}

func (i *serviceLevelObjectiveTimeWindowPtrType) ToServiceLevelObjectiveTimeWindowPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveTimeWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveTimeWindowPtrOutput)
}

type ServiceLevelObjectiveTimeWindowOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveTimeWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveTimeWindow)(nil)).Elem()
}

func (o ServiceLevelObjectiveTimeWindowOutput) ToServiceLevelObjectiveTimeWindowOutput() ServiceLevelObjectiveTimeWindowOutput {
	return o
}

func (o ServiceLevelObjectiveTimeWindowOutput) ToServiceLevelObjectiveTimeWindowOutputWithContext(ctx context.Context) ServiceLevelObjectiveTimeWindowOutput {
	return o
}

func (o ServiceLevelObjectiveTimeWindowOutput) ToServiceLevelObjectiveTimeWindowPtrOutput() ServiceLevelObjectiveTimeWindowPtrOutput {
	return o.ToServiceLevelObjectiveTimeWindowPtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveTimeWindowOutput) ToServiceLevelObjectiveTimeWindowPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveTimeWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelObjectiveTimeWindow) *ServiceLevelObjectiveTimeWindow {
		return &v
	}).(ServiceLevelObjectiveTimeWindowPtrOutput)
}

// Rolling window.
func (o ServiceLevelObjectiveTimeWindowOutput) Rolling() ServiceLevelObjectiveTimeWindowRollingOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveTimeWindow) ServiceLevelObjectiveTimeWindowRolling { return v.Rolling }).(ServiceLevelObjectiveTimeWindowRollingOutput)
}

type ServiceLevelObjectiveTimeWindowPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveTimeWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveTimeWindow)(nil)).Elem()
}

func (o ServiceLevelObjectiveTimeWindowPtrOutput) ToServiceLevelObjectiveTimeWindowPtrOutput() ServiceLevelObjectiveTimeWindowPtrOutput {
	return o
}

func (o ServiceLevelObjectiveTimeWindowPtrOutput) ToServiceLevelObjectiveTimeWindowPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveTimeWindowPtrOutput {
	return o
}

func (o ServiceLevelObjectiveTimeWindowPtrOutput) Elem() ServiceLevelObjectiveTimeWindowOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveTimeWindow) ServiceLevelObjectiveTimeWindow {
		if v != nil {
			return *v
		}
		var ret ServiceLevelObjectiveTimeWindow
		return ret
	}).(ServiceLevelObjectiveTimeWindowOutput)
}

// Rolling window.
func (o ServiceLevelObjectiveTimeWindowPtrOutput) Rolling() ServiceLevelObjectiveTimeWindowRollingPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveTimeWindow) *ServiceLevelObjectiveTimeWindowRolling {
		if v == nil {
			return nil
		}
		return &v.Rolling
	}).(ServiceLevelObjectiveTimeWindowRollingPtrOutput)
}

type ServiceLevelObjectiveTimeWindowRolling struct {
	// Valid values are `1`, `7`, `14` and `28`.
	Count int `pulumi:"count"`
	// The only supported value is `DAY`.
	Unit string `pulumi:"unit"`
}

// ServiceLevelObjectiveTimeWindowRollingInput is an input type that accepts ServiceLevelObjectiveTimeWindowRollingArgs and ServiceLevelObjectiveTimeWindowRollingOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveTimeWindowRollingInput` via:
//
//          ServiceLevelObjectiveTimeWindowRollingArgs{...}
type ServiceLevelObjectiveTimeWindowRollingInput interface {
	pulumi.Input

	ToServiceLevelObjectiveTimeWindowRollingOutput() ServiceLevelObjectiveTimeWindowRollingOutput
	ToServiceLevelObjectiveTimeWindowRollingOutputWithContext(context.Context) ServiceLevelObjectiveTimeWindowRollingOutput
}

type ServiceLevelObjectiveTimeWindowRollingArgs struct {
	// Valid values are `1`, `7`, `14` and `28`.
	Count pulumi.IntInput `pulumi:"count"`
	// The only supported value is `DAY`.
	Unit pulumi.StringInput `pulumi:"unit"`
}

func (ServiceLevelObjectiveTimeWindowRollingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveTimeWindowRolling)(nil)).Elem()
}

func (i ServiceLevelObjectiveTimeWindowRollingArgs) ToServiceLevelObjectiveTimeWindowRollingOutput() ServiceLevelObjectiveTimeWindowRollingOutput {
	return i.ToServiceLevelObjectiveTimeWindowRollingOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveTimeWindowRollingArgs) ToServiceLevelObjectiveTimeWindowRollingOutputWithContext(ctx context.Context) ServiceLevelObjectiveTimeWindowRollingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveTimeWindowRollingOutput)
}

func (i ServiceLevelObjectiveTimeWindowRollingArgs) ToServiceLevelObjectiveTimeWindowRollingPtrOutput() ServiceLevelObjectiveTimeWindowRollingPtrOutput {
	return i.ToServiceLevelObjectiveTimeWindowRollingPtrOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveTimeWindowRollingArgs) ToServiceLevelObjectiveTimeWindowRollingPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveTimeWindowRollingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveTimeWindowRollingOutput).ToServiceLevelObjectiveTimeWindowRollingPtrOutputWithContext(ctx)
}

// ServiceLevelObjectiveTimeWindowRollingPtrInput is an input type that accepts ServiceLevelObjectiveTimeWindowRollingArgs, ServiceLevelObjectiveTimeWindowRollingPtr and ServiceLevelObjectiveTimeWindowRollingPtrOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveTimeWindowRollingPtrInput` via:
//
//          ServiceLevelObjectiveTimeWindowRollingArgs{...}
//
//  or:
//
//          nil
type ServiceLevelObjectiveTimeWindowRollingPtrInput interface {
	pulumi.Input

	ToServiceLevelObjectiveTimeWindowRollingPtrOutput() ServiceLevelObjectiveTimeWindowRollingPtrOutput
	ToServiceLevelObjectiveTimeWindowRollingPtrOutputWithContext(context.Context) ServiceLevelObjectiveTimeWindowRollingPtrOutput
}

type serviceLevelObjectiveTimeWindowRollingPtrType ServiceLevelObjectiveTimeWindowRollingArgs

func ServiceLevelObjectiveTimeWindowRollingPtr(v *ServiceLevelObjectiveTimeWindowRollingArgs) ServiceLevelObjectiveTimeWindowRollingPtrInput {
	return (*serviceLevelObjectiveTimeWindowRollingPtrType)(v)
}

func (*serviceLevelObjectiveTimeWindowRollingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveTimeWindowRolling)(nil)).Elem()
}

func (i *serviceLevelObjectiveTimeWindowRollingPtrType) ToServiceLevelObjectiveTimeWindowRollingPtrOutput() ServiceLevelObjectiveTimeWindowRollingPtrOutput {
	return i.ToServiceLevelObjectiveTimeWindowRollingPtrOutputWithContext(context.Background())
}

func (i *serviceLevelObjectiveTimeWindowRollingPtrType) ToServiceLevelObjectiveTimeWindowRollingPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveTimeWindowRollingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveTimeWindowRollingPtrOutput)
}

type ServiceLevelObjectiveTimeWindowRollingOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveTimeWindowRollingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveTimeWindowRolling)(nil)).Elem()
}

func (o ServiceLevelObjectiveTimeWindowRollingOutput) ToServiceLevelObjectiveTimeWindowRollingOutput() ServiceLevelObjectiveTimeWindowRollingOutput {
	return o
}

func (o ServiceLevelObjectiveTimeWindowRollingOutput) ToServiceLevelObjectiveTimeWindowRollingOutputWithContext(ctx context.Context) ServiceLevelObjectiveTimeWindowRollingOutput {
	return o
}

func (o ServiceLevelObjectiveTimeWindowRollingOutput) ToServiceLevelObjectiveTimeWindowRollingPtrOutput() ServiceLevelObjectiveTimeWindowRollingPtrOutput {
	return o.ToServiceLevelObjectiveTimeWindowRollingPtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveTimeWindowRollingOutput) ToServiceLevelObjectiveTimeWindowRollingPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveTimeWindowRollingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelObjectiveTimeWindowRolling) *ServiceLevelObjectiveTimeWindowRolling {
		return &v
	}).(ServiceLevelObjectiveTimeWindowRollingPtrOutput)
}

// Valid values are `1`, `7`, `14` and `28`.
func (o ServiceLevelObjectiveTimeWindowRollingOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveTimeWindowRolling) int { return v.Count }).(pulumi.IntOutput)
}

// The only supported value is `DAY`.
func (o ServiceLevelObjectiveTimeWindowRollingOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveTimeWindowRolling) string { return v.Unit }).(pulumi.StringOutput)
}

type ServiceLevelObjectiveTimeWindowRollingPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveTimeWindowRollingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveTimeWindowRolling)(nil)).Elem()
}

func (o ServiceLevelObjectiveTimeWindowRollingPtrOutput) ToServiceLevelObjectiveTimeWindowRollingPtrOutput() ServiceLevelObjectiveTimeWindowRollingPtrOutput {
	return o
}

func (o ServiceLevelObjectiveTimeWindowRollingPtrOutput) ToServiceLevelObjectiveTimeWindowRollingPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveTimeWindowRollingPtrOutput {
	return o
}

func (o ServiceLevelObjectiveTimeWindowRollingPtrOutput) Elem() ServiceLevelObjectiveTimeWindowRollingOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveTimeWindowRolling) ServiceLevelObjectiveTimeWindowRolling {
		if v != nil {
			return *v
		}
		var ret ServiceLevelObjectiveTimeWindowRolling
		return ret
	}).(ServiceLevelObjectiveTimeWindowRollingOutput)
}

// Valid values are `1`, `7`, `14` and `28`.
func (o ServiceLevelObjectiveTimeWindowRollingPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveTimeWindowRolling) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The only supported value is `DAY`.
func (o ServiceLevelObjectiveTimeWindowRollingPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveTimeWindowRolling) *string {
		if v == nil {
			return nil
		}
		return &v.Unit
	}).(pulumi.StringPtrOutput)
}

type GetAlertChannelConfig struct {
	ApiKey                *string           `pulumi:"apiKey"`
	AuthPassword          *string           `pulumi:"authPassword"`
	AuthType              *string           `pulumi:"authType"`
	AuthUsername          *string           `pulumi:"authUsername"`
	BaseUrl               *string           `pulumi:"baseUrl"`
	Channel               *string           `pulumi:"channel"`
	Headers               map[string]string `pulumi:"headers"`
	IncludeJsonAttachment *string           `pulumi:"includeJsonAttachment"`
	Key                   *string           `pulumi:"key"`
	Payload               map[string]string `pulumi:"payload"`
	PayloadType           *string           `pulumi:"payloadType"`
	Recipients            *string           `pulumi:"recipients"`
	Region                *string           `pulumi:"region"`
	RouteKey              *string           `pulumi:"routeKey"`
	ServiceKey            *string           `pulumi:"serviceKey"`
	Tags                  *string           `pulumi:"tags"`
	Teams                 *string           `pulumi:"teams"`
	Url                   *string           `pulumi:"url"`
	UserId                *string           `pulumi:"userId"`
}

// GetAlertChannelConfigInput is an input type that accepts GetAlertChannelConfigArgs and GetAlertChannelConfigOutput values.
// You can construct a concrete instance of `GetAlertChannelConfigInput` via:
//
//          GetAlertChannelConfigArgs{...}
type GetAlertChannelConfigInput interface {
	pulumi.Input

	ToGetAlertChannelConfigOutput() GetAlertChannelConfigOutput
	ToGetAlertChannelConfigOutputWithContext(context.Context) GetAlertChannelConfigOutput
}

type GetAlertChannelConfigArgs struct {
	ApiKey                pulumi.StringPtrInput `pulumi:"apiKey"`
	AuthPassword          pulumi.StringPtrInput `pulumi:"authPassword"`
	AuthType              pulumi.StringPtrInput `pulumi:"authType"`
	AuthUsername          pulumi.StringPtrInput `pulumi:"authUsername"`
	BaseUrl               pulumi.StringPtrInput `pulumi:"baseUrl"`
	Channel               pulumi.StringPtrInput `pulumi:"channel"`
	Headers               pulumi.StringMapInput `pulumi:"headers"`
	IncludeJsonAttachment pulumi.StringPtrInput `pulumi:"includeJsonAttachment"`
	Key                   pulumi.StringPtrInput `pulumi:"key"`
	Payload               pulumi.StringMapInput `pulumi:"payload"`
	PayloadType           pulumi.StringPtrInput `pulumi:"payloadType"`
	Recipients            pulumi.StringPtrInput `pulumi:"recipients"`
	Region                pulumi.StringPtrInput `pulumi:"region"`
	RouteKey              pulumi.StringPtrInput `pulumi:"routeKey"`
	ServiceKey            pulumi.StringPtrInput `pulumi:"serviceKey"`
	Tags                  pulumi.StringPtrInput `pulumi:"tags"`
	Teams                 pulumi.StringPtrInput `pulumi:"teams"`
	Url                   pulumi.StringPtrInput `pulumi:"url"`
	UserId                pulumi.StringPtrInput `pulumi:"userId"`
}

func (GetAlertChannelConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlertChannelConfig)(nil)).Elem()
}

func (i GetAlertChannelConfigArgs) ToGetAlertChannelConfigOutput() GetAlertChannelConfigOutput {
	return i.ToGetAlertChannelConfigOutputWithContext(context.Background())
}

func (i GetAlertChannelConfigArgs) ToGetAlertChannelConfigOutputWithContext(ctx context.Context) GetAlertChannelConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAlertChannelConfigOutput)
}

type GetAlertChannelConfigOutput struct{ *pulumi.OutputState }

func (GetAlertChannelConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlertChannelConfig)(nil)).Elem()
}

func (o GetAlertChannelConfigOutput) ToGetAlertChannelConfigOutput() GetAlertChannelConfigOutput {
	return o
}

func (o GetAlertChannelConfigOutput) ToGetAlertChannelConfigOutputWithContext(ctx context.Context) GetAlertChannelConfigOutput {
	return o
}

func (o GetAlertChannelConfigOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) AuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.AuthPassword }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) AuthUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.AuthUsername }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

func (o GetAlertChannelConfigOutput) IncludeJsonAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.IncludeJsonAttachment }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Payload() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) map[string]string { return v.Payload }).(pulumi.StringMapOutput)
}

func (o GetAlertChannelConfigOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.PayloadType }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Recipients() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Recipients }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) RouteKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.RouteKey }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) ServiceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.ServiceKey }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Tags }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Teams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Teams }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type GetEntityTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetEntityTagInput is an input type that accepts GetEntityTagArgs and GetEntityTagOutput values.
// You can construct a concrete instance of `GetEntityTagInput` via:
//
//          GetEntityTagArgs{...}
type GetEntityTagInput interface {
	pulumi.Input

	ToGetEntityTagOutput() GetEntityTagOutput
	ToGetEntityTagOutputWithContext(context.Context) GetEntityTagOutput
}

type GetEntityTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetEntityTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEntityTag)(nil)).Elem()
}

func (i GetEntityTagArgs) ToGetEntityTagOutput() GetEntityTagOutput {
	return i.ToGetEntityTagOutputWithContext(context.Background())
}

func (i GetEntityTagArgs) ToGetEntityTagOutputWithContext(ctx context.Context) GetEntityTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEntityTagOutput)
}

func (i GetEntityTagArgs) ToGetEntityTagPtrOutput() GetEntityTagPtrOutput {
	return i.ToGetEntityTagPtrOutputWithContext(context.Background())
}

func (i GetEntityTagArgs) ToGetEntityTagPtrOutputWithContext(ctx context.Context) GetEntityTagPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEntityTagOutput).ToGetEntityTagPtrOutputWithContext(ctx)
}

// GetEntityTagPtrInput is an input type that accepts GetEntityTagArgs, GetEntityTagPtr and GetEntityTagPtrOutput values.
// You can construct a concrete instance of `GetEntityTagPtrInput` via:
//
//          GetEntityTagArgs{...}
//
//  or:
//
//          nil
type GetEntityTagPtrInput interface {
	pulumi.Input

	ToGetEntityTagPtrOutput() GetEntityTagPtrOutput
	ToGetEntityTagPtrOutputWithContext(context.Context) GetEntityTagPtrOutput
}

type getEntityTagPtrType GetEntityTagArgs

func GetEntityTagPtr(v *GetEntityTagArgs) GetEntityTagPtrInput {
	return (*getEntityTagPtrType)(v)
}

func (*getEntityTagPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetEntityTag)(nil)).Elem()
}

func (i *getEntityTagPtrType) ToGetEntityTagPtrOutput() GetEntityTagPtrOutput {
	return i.ToGetEntityTagPtrOutputWithContext(context.Background())
}

func (i *getEntityTagPtrType) ToGetEntityTagPtrOutputWithContext(ctx context.Context) GetEntityTagPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEntityTagPtrOutput)
}

type GetEntityTagOutput struct{ *pulumi.OutputState }

func (GetEntityTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEntityTag)(nil)).Elem()
}

func (o GetEntityTagOutput) ToGetEntityTagOutput() GetEntityTagOutput {
	return o
}

func (o GetEntityTagOutput) ToGetEntityTagOutputWithContext(ctx context.Context) GetEntityTagOutput {
	return o
}

func (o GetEntityTagOutput) ToGetEntityTagPtrOutput() GetEntityTagPtrOutput {
	return o.ToGetEntityTagPtrOutputWithContext(context.Background())
}

func (o GetEntityTagOutput) ToGetEntityTagPtrOutputWithContext(ctx context.Context) GetEntityTagPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetEntityTag) *GetEntityTag {
		return &v
	}).(GetEntityTagPtrOutput)
}

func (o GetEntityTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetEntityTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetEntityTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetEntityTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetEntityTagPtrOutput struct{ *pulumi.OutputState }

func (GetEntityTagPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetEntityTag)(nil)).Elem()
}

func (o GetEntityTagPtrOutput) ToGetEntityTagPtrOutput() GetEntityTagPtrOutput {
	return o
}

func (o GetEntityTagPtrOutput) ToGetEntityTagPtrOutputWithContext(ctx context.Context) GetEntityTagPtrOutput {
	return o
}

func (o GetEntityTagPtrOutput) Elem() GetEntityTagOutput {
	return o.ApplyT(func(v *GetEntityTag) GetEntityTag {
		if v != nil {
			return *v
		}
		var ret GetEntityTag
		return ret
	}).(GetEntityTagOutput)
}

func (o GetEntityTagPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetEntityTag) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

func (o GetEntityTagPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetEntityTag) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertChannelConfigInput)(nil)).Elem(), AlertChannelConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertChannelConfigPtrInput)(nil)).Elem(), AlertChannelConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertConditionTermInput)(nil)).Elem(), AlertConditionTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertConditionTermArrayInput)(nil)).Elem(), AlertConditionTermArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertMutingRuleConditionInput)(nil)).Elem(), AlertMutingRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertMutingRuleConditionPtrInput)(nil)).Elem(), AlertMutingRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertMutingRuleConditionConditionInput)(nil)).Elem(), AlertMutingRuleConditionConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertMutingRuleConditionConditionArrayInput)(nil)).Elem(), AlertMutingRuleConditionConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertMutingRuleScheduleInput)(nil)).Elem(), AlertMutingRuleScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertMutingRuleSchedulePtrInput)(nil)).Elem(), AlertMutingRuleScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardFilterInput)(nil)).Elem(), DashboardFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardFilterPtrInput)(nil)).Elem(), DashboardFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWidgetInput)(nil)).Elem(), DashboardWidgetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWidgetArrayInput)(nil)).Elem(), DashboardWidgetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWidgetCompareWithInput)(nil)).Elem(), DashboardWidgetCompareWithArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWidgetCompareWithArrayInput)(nil)).Elem(), DashboardWidgetCompareWithArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWidgetCompareWithPresentationInput)(nil)).Elem(), DashboardWidgetCompareWithPresentationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWidgetMetricInput)(nil)).Elem(), DashboardWidgetMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWidgetMetricArrayInput)(nil)).Elem(), DashboardWidgetMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityTagsTagInput)(nil)).Elem(), EntityTagsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityTagsTagArrayInput)(nil)).Elem(), EntityTagsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfraAlertConditionCriticalInput)(nil)).Elem(), InfraAlertConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfraAlertConditionCriticalPtrInput)(nil)).Elem(), InfraAlertConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfraAlertConditionWarningInput)(nil)).Elem(), InfraAlertConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfraAlertConditionWarningPtrInput)(nil)).Elem(), InfraAlertConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NrqlAlertConditionCriticalInput)(nil)).Elem(), NrqlAlertConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NrqlAlertConditionCriticalPtrInput)(nil)).Elem(), NrqlAlertConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NrqlAlertConditionNrqlInput)(nil)).Elem(), NrqlAlertConditionNrqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NrqlAlertConditionNrqlPtrInput)(nil)).Elem(), NrqlAlertConditionNrqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NrqlAlertConditionTermInput)(nil)).Elem(), NrqlAlertConditionTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NrqlAlertConditionTermArrayInput)(nil)).Elem(), NrqlAlertConditionTermArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NrqlAlertConditionWarningInput)(nil)).Elem(), NrqlAlertConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NrqlAlertConditionWarningPtrInput)(nil)).Elem(), NrqlAlertConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageInput)(nil)).Elem(), OneDashboardPageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageArrayInput)(nil)).Elem(), OneDashboardPageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetAreaInput)(nil)).Elem(), OneDashboardPageWidgetAreaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetAreaArrayInput)(nil)).Elem(), OneDashboardPageWidgetAreaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetAreaNrqlQueryInput)(nil)).Elem(), OneDashboardPageWidgetAreaNrqlQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetAreaNrqlQueryArrayInput)(nil)).Elem(), OneDashboardPageWidgetAreaNrqlQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetBarInput)(nil)).Elem(), OneDashboardPageWidgetBarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetBarArrayInput)(nil)).Elem(), OneDashboardPageWidgetBarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetBarNrqlQueryInput)(nil)).Elem(), OneDashboardPageWidgetBarNrqlQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetBarNrqlQueryArrayInput)(nil)).Elem(), OneDashboardPageWidgetBarNrqlQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetBillboardInput)(nil)).Elem(), OneDashboardPageWidgetBillboardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetBillboardArrayInput)(nil)).Elem(), OneDashboardPageWidgetBillboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetBillboardNrqlQueryInput)(nil)).Elem(), OneDashboardPageWidgetBillboardNrqlQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetBillboardNrqlQueryArrayInput)(nil)).Elem(), OneDashboardPageWidgetBillboardNrqlQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetBulletInput)(nil)).Elem(), OneDashboardPageWidgetBulletArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetBulletArrayInput)(nil)).Elem(), OneDashboardPageWidgetBulletArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetBulletNrqlQueryInput)(nil)).Elem(), OneDashboardPageWidgetBulletNrqlQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetBulletNrqlQueryArrayInput)(nil)).Elem(), OneDashboardPageWidgetBulletNrqlQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetFunnelInput)(nil)).Elem(), OneDashboardPageWidgetFunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetFunnelArrayInput)(nil)).Elem(), OneDashboardPageWidgetFunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetFunnelNrqlQueryInput)(nil)).Elem(), OneDashboardPageWidgetFunnelNrqlQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetFunnelNrqlQueryArrayInput)(nil)).Elem(), OneDashboardPageWidgetFunnelNrqlQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetHeatmapInput)(nil)).Elem(), OneDashboardPageWidgetHeatmapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetHeatmapArrayInput)(nil)).Elem(), OneDashboardPageWidgetHeatmapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetHeatmapNrqlQueryInput)(nil)).Elem(), OneDashboardPageWidgetHeatmapNrqlQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetHeatmapNrqlQueryArrayInput)(nil)).Elem(), OneDashboardPageWidgetHeatmapNrqlQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetHistogramInput)(nil)).Elem(), OneDashboardPageWidgetHistogramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetHistogramArrayInput)(nil)).Elem(), OneDashboardPageWidgetHistogramArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetHistogramNrqlQueryInput)(nil)).Elem(), OneDashboardPageWidgetHistogramNrqlQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetHistogramNrqlQueryArrayInput)(nil)).Elem(), OneDashboardPageWidgetHistogramNrqlQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetJsonInput)(nil)).Elem(), OneDashboardPageWidgetJsonArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetJsonArrayInput)(nil)).Elem(), OneDashboardPageWidgetJsonArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetJsonNrqlQueryInput)(nil)).Elem(), OneDashboardPageWidgetJsonNrqlQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetJsonNrqlQueryArrayInput)(nil)).Elem(), OneDashboardPageWidgetJsonNrqlQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetLineInput)(nil)).Elem(), OneDashboardPageWidgetLineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetLineArrayInput)(nil)).Elem(), OneDashboardPageWidgetLineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetLineNrqlQueryInput)(nil)).Elem(), OneDashboardPageWidgetLineNrqlQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetLineNrqlQueryArrayInput)(nil)).Elem(), OneDashboardPageWidgetLineNrqlQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetMarkdownInput)(nil)).Elem(), OneDashboardPageWidgetMarkdownArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetMarkdownArrayInput)(nil)).Elem(), OneDashboardPageWidgetMarkdownArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetPyInput)(nil)).Elem(), OneDashboardPageWidgetPyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetPyArrayInput)(nil)).Elem(), OneDashboardPageWidgetPyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetPyNrqlQueryInput)(nil)).Elem(), OneDashboardPageWidgetPyNrqlQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetPyNrqlQueryArrayInput)(nil)).Elem(), OneDashboardPageWidgetPyNrqlQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetStackedBarInput)(nil)).Elem(), OneDashboardPageWidgetStackedBarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetStackedBarArrayInput)(nil)).Elem(), OneDashboardPageWidgetStackedBarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetStackedBarNrqlQueryInput)(nil)).Elem(), OneDashboardPageWidgetStackedBarNrqlQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetStackedBarNrqlQueryArrayInput)(nil)).Elem(), OneDashboardPageWidgetStackedBarNrqlQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetTableInput)(nil)).Elem(), OneDashboardPageWidgetTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetTableArrayInput)(nil)).Elem(), OneDashboardPageWidgetTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetTableNrqlQueryInput)(nil)).Elem(), OneDashboardPageWidgetTableNrqlQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardPageWidgetTableNrqlQueryArrayInput)(nil)).Elem(), OneDashboardPageWidgetTableNrqlQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardRawPageInput)(nil)).Elem(), OneDashboardRawPageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardRawPageArrayInput)(nil)).Elem(), OneDashboardRawPageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardRawPageWidgetInput)(nil)).Elem(), OneDashboardRawPageWidgetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneDashboardRawPageWidgetArrayInput)(nil)).Elem(), OneDashboardRawPageWidgetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelEventsInput)(nil)).Elem(), ServiceLevelEventsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelEventsPtrInput)(nil)).Elem(), ServiceLevelEventsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelEventsBadEventsInput)(nil)).Elem(), ServiceLevelEventsBadEventsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelEventsBadEventsPtrInput)(nil)).Elem(), ServiceLevelEventsBadEventsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelEventsGoodEventsInput)(nil)).Elem(), ServiceLevelEventsGoodEventsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelEventsGoodEventsPtrInput)(nil)).Elem(), ServiceLevelEventsGoodEventsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelEventsValidEventsInput)(nil)).Elem(), ServiceLevelEventsValidEventsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelEventsValidEventsPtrInput)(nil)).Elem(), ServiceLevelEventsValidEventsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveInput)(nil)).Elem(), ServiceLevelObjectiveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectivePtrInput)(nil)).Elem(), ServiceLevelObjectiveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveTimeWindowInput)(nil)).Elem(), ServiceLevelObjectiveTimeWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveTimeWindowPtrInput)(nil)).Elem(), ServiceLevelObjectiveTimeWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveTimeWindowRollingInput)(nil)).Elem(), ServiceLevelObjectiveTimeWindowRollingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveTimeWindowRollingPtrInput)(nil)).Elem(), ServiceLevelObjectiveTimeWindowRollingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAlertChannelConfigInput)(nil)).Elem(), GetAlertChannelConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEntityTagInput)(nil)).Elem(), GetEntityTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEntityTagPtrInput)(nil)).Elem(), GetEntityTagArgs{})
	pulumi.RegisterOutputType(AlertChannelConfigOutput{})
	pulumi.RegisterOutputType(AlertChannelConfigPtrOutput{})
	pulumi.RegisterOutputType(AlertConditionTermOutput{})
	pulumi.RegisterOutputType(AlertConditionTermArrayOutput{})
	pulumi.RegisterOutputType(AlertMutingRuleConditionOutput{})
	pulumi.RegisterOutputType(AlertMutingRuleConditionPtrOutput{})
	pulumi.RegisterOutputType(AlertMutingRuleConditionConditionOutput{})
	pulumi.RegisterOutputType(AlertMutingRuleConditionConditionArrayOutput{})
	pulumi.RegisterOutputType(AlertMutingRuleScheduleOutput{})
	pulumi.RegisterOutputType(AlertMutingRuleSchedulePtrOutput{})
	pulumi.RegisterOutputType(DashboardFilterOutput{})
	pulumi.RegisterOutputType(DashboardFilterPtrOutput{})
	pulumi.RegisterOutputType(DashboardWidgetOutput{})
	pulumi.RegisterOutputType(DashboardWidgetArrayOutput{})
	pulumi.RegisterOutputType(DashboardWidgetCompareWithOutput{})
	pulumi.RegisterOutputType(DashboardWidgetCompareWithArrayOutput{})
	pulumi.RegisterOutputType(DashboardWidgetCompareWithPresentationOutput{})
	pulumi.RegisterOutputType(DashboardWidgetMetricOutput{})
	pulumi.RegisterOutputType(DashboardWidgetMetricArrayOutput{})
	pulumi.RegisterOutputType(EntityTagsTagOutput{})
	pulumi.RegisterOutputType(EntityTagsTagArrayOutput{})
	pulumi.RegisterOutputType(InfraAlertConditionCriticalOutput{})
	pulumi.RegisterOutputType(InfraAlertConditionCriticalPtrOutput{})
	pulumi.RegisterOutputType(InfraAlertConditionWarningOutput{})
	pulumi.RegisterOutputType(InfraAlertConditionWarningPtrOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionCriticalOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionCriticalPtrOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionNrqlOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionNrqlPtrOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionTermOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionTermArrayOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionWarningOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionWarningPtrOutput{})
	pulumi.RegisterOutputType(OneDashboardPageOutput{})
	pulumi.RegisterOutputType(OneDashboardPageArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetAreaOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetAreaArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetAreaNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetAreaNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBarOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBarArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBarNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBarNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBillboardOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBillboardArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBillboardNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBillboardNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBulletOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBulletArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBulletNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBulletNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetFunnelOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetFunnelArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetFunnelNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetFunnelNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetHeatmapOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetHeatmapArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetHeatmapNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetHistogramOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetHistogramArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetHistogramNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetHistogramNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetJsonOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetJsonArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetJsonNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetJsonNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetLineOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetLineArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetLineNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetLineNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetMarkdownOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetMarkdownArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetPyOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetPyArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetPyNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetPyNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetStackedBarOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetStackedBarArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetStackedBarNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetStackedBarNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetTableOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetTableArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetTableNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetTableNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardRawPageOutput{})
	pulumi.RegisterOutputType(OneDashboardRawPageArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardRawPageWidgetOutput{})
	pulumi.RegisterOutputType(OneDashboardRawPageWidgetArrayOutput{})
	pulumi.RegisterOutputType(ServiceLevelEventsOutput{})
	pulumi.RegisterOutputType(ServiceLevelEventsPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelEventsBadEventsOutput{})
	pulumi.RegisterOutputType(ServiceLevelEventsBadEventsPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelEventsGoodEventsOutput{})
	pulumi.RegisterOutputType(ServiceLevelEventsGoodEventsPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelEventsValidEventsOutput{})
	pulumi.RegisterOutputType(ServiceLevelEventsValidEventsPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectivePtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveTimeWindowOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveTimeWindowPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveTimeWindowRollingOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveTimeWindowRollingPtrOutput{})
	pulumi.RegisterOutputType(GetAlertChannelConfigOutput{})
	pulumi.RegisterOutputType(GetEntityTagOutput{})
	pulumi.RegisterOutputType(GetEntityTagPtrOutput{})
}
