// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AlertChannelConfig struct {
	// The API key for integrating with OpsGenie.
	ApiKey *string `pulumi:"apiKey"`
	// Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
	AuthPassword *string `pulumi:"authPassword"`
	// Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
	AuthType *string `pulumi:"authType"`
	// Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
	AuthUsername *string `pulumi:"authUsername"`
	// The base URL of the webhook destination.
	BaseUrl *string `pulumi:"baseUrl"`
	// The Slack channel to send notifications to.
	// * `opsgenie`
	Channel *string `pulumi:"channel"`
	// A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
	Headers map[string]string `pulumi:"headers"`
	// Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
	HeadersString *string `pulumi:"headersString"`
	// `0` or `1`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
	// * `webhook`
	IncludeJsonAttachment *string `pulumi:"includeJsonAttachment"`
	// The key for integrating with VictorOps.
	Key *string `pulumi:"key"`
	// A map of key/value pairs that represents the webhook payload.  Must provide `payloadType` if setting this argument.
	Payload map[string]string `pulumi:"payload"`
	// Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
	PayloadString *string `pulumi:"payloadString"`
	// Can either be `application/json` or `application/x-www-form-urlencoded`. The `payloadType` argument is _required_ if `payload` is set.
	// * `pagerduty`
	PayloadType *string `pulumi:"payloadType"`
	// A set of recipients for targeting notifications.  Multiple values are comma separated.
	Recipients *string `pulumi:"recipients"`
	// The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
	Region *string `pulumi:"region"`
	// The route key for integrating with VictorOps.
	// * `slack`
	RouteKey *string `pulumi:"routeKey"`
	// Specifies the service key for integrating with Pagerduty.
	// * `victorops`
	ServiceKey *string `pulumi:"serviceKey"`
	// A set of tags for targeting notifications. Multiple values are comma separated.
	Tags *string `pulumi:"tags"`
	// A set of teams for targeting notifications. Multiple values are comma separated.
	Teams *string `pulumi:"teams"`
	// Your organization's Slack URL.
	Url    *string `pulumi:"url"`
	UserId *string `pulumi:"userId"`
}

// AlertChannelConfigInput is an input type that accepts AlertChannelConfigArgs and AlertChannelConfigOutput values.
// You can construct a concrete instance of `AlertChannelConfigInput` via:
//
// 		 AlertChannelConfigArgs{...}
//
type AlertChannelConfigInput interface {
	pulumi.Input

	ToAlertChannelConfigOutput() AlertChannelConfigOutput
	ToAlertChannelConfigOutputWithContext(context.Context) AlertChannelConfigOutput
}

type AlertChannelConfigArgs struct {
	// The API key for integrating with OpsGenie.
	ApiKey pulumi.StringPtrInput `pulumi:"apiKey"`
	// Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
	AuthPassword pulumi.StringPtrInput `pulumi:"authPassword"`
	// Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
	AuthType pulumi.StringPtrInput `pulumi:"authType"`
	// Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
	AuthUsername pulumi.StringPtrInput `pulumi:"authUsername"`
	// The base URL of the webhook destination.
	BaseUrl pulumi.StringPtrInput `pulumi:"baseUrl"`
	// The Slack channel to send notifications to.
	// * `opsgenie`
	Channel pulumi.StringPtrInput `pulumi:"channel"`
	// A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
	HeadersString pulumi.StringPtrInput `pulumi:"headersString"`
	// `0` or `1`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
	// * `webhook`
	IncludeJsonAttachment pulumi.StringPtrInput `pulumi:"includeJsonAttachment"`
	// The key for integrating with VictorOps.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// A map of key/value pairs that represents the webhook payload.  Must provide `payloadType` if setting this argument.
	Payload pulumi.StringMapInput `pulumi:"payload"`
	// Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
	PayloadString pulumi.StringPtrInput `pulumi:"payloadString"`
	// Can either be `application/json` or `application/x-www-form-urlencoded`. The `payloadType` argument is _required_ if `payload` is set.
	// * `pagerduty`
	PayloadType pulumi.StringPtrInput `pulumi:"payloadType"`
	// A set of recipients for targeting notifications.  Multiple values are comma separated.
	Recipients pulumi.StringPtrInput `pulumi:"recipients"`
	// The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The route key for integrating with VictorOps.
	// * `slack`
	RouteKey pulumi.StringPtrInput `pulumi:"routeKey"`
	// Specifies the service key for integrating with Pagerduty.
	// * `victorops`
	ServiceKey pulumi.StringPtrInput `pulumi:"serviceKey"`
	// A set of tags for targeting notifications. Multiple values are comma separated.
	Tags pulumi.StringPtrInput `pulumi:"tags"`
	// A set of teams for targeting notifications. Multiple values are comma separated.
	Teams pulumi.StringPtrInput `pulumi:"teams"`
	// Your organization's Slack URL.
	Url    pulumi.StringPtrInput `pulumi:"url"`
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (AlertChannelConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelConfig)(nil)).Elem()
}

func (i AlertChannelConfigArgs) ToAlertChannelConfigOutput() AlertChannelConfigOutput {
	return i.ToAlertChannelConfigOutputWithContext(context.Background())
}

func (i AlertChannelConfigArgs) ToAlertChannelConfigOutputWithContext(ctx context.Context) AlertChannelConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelConfigOutput)
}

func (i AlertChannelConfigArgs) ToAlertChannelConfigPtrOutput() AlertChannelConfigPtrOutput {
	return i.ToAlertChannelConfigPtrOutputWithContext(context.Background())
}

func (i AlertChannelConfigArgs) ToAlertChannelConfigPtrOutputWithContext(ctx context.Context) AlertChannelConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelConfigOutput).ToAlertChannelConfigPtrOutputWithContext(ctx)
}

// AlertChannelConfigPtrInput is an input type that accepts AlertChannelConfigArgs, AlertChannelConfigPtr and AlertChannelConfigPtrOutput values.
// You can construct a concrete instance of `AlertChannelConfigPtrInput` via:
//
// 		 AlertChannelConfigArgs{...}
//
//  or:
//
// 		 nil
//
type AlertChannelConfigPtrInput interface {
	pulumi.Input

	ToAlertChannelConfigPtrOutput() AlertChannelConfigPtrOutput
	ToAlertChannelConfigPtrOutputWithContext(context.Context) AlertChannelConfigPtrOutput
}

type alertChannelConfigPtrType AlertChannelConfigArgs

func AlertChannelConfigPtr(v *AlertChannelConfigArgs) AlertChannelConfigPtrInput {
	return (*alertChannelConfigPtrType)(v)
}

func (*alertChannelConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelConfig)(nil)).Elem()
}

func (i *alertChannelConfigPtrType) ToAlertChannelConfigPtrOutput() AlertChannelConfigPtrOutput {
	return i.ToAlertChannelConfigPtrOutputWithContext(context.Background())
}

func (i *alertChannelConfigPtrType) ToAlertChannelConfigPtrOutputWithContext(ctx context.Context) AlertChannelConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelConfigPtrOutput)
}

type AlertChannelConfigOutput struct{ *pulumi.OutputState }

func (AlertChannelConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelConfig)(nil)).Elem()
}

func (o AlertChannelConfigOutput) ToAlertChannelConfigOutput() AlertChannelConfigOutput {
	return o
}

func (o AlertChannelConfigOutput) ToAlertChannelConfigOutputWithContext(ctx context.Context) AlertChannelConfigOutput {
	return o
}

func (o AlertChannelConfigOutput) ToAlertChannelConfigPtrOutput() AlertChannelConfigPtrOutput {
	return o.ToAlertChannelConfigPtrOutputWithContext(context.Background())
}

func (o AlertChannelConfigOutput) ToAlertChannelConfigPtrOutputWithContext(ctx context.Context) AlertChannelConfigPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *AlertChannelConfig {
		return &v
	}).(AlertChannelConfigPtrOutput)
}

// The API key for integrating with OpsGenie.
func (o AlertChannelConfigOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
func (o AlertChannelConfigOutput) AuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.AuthPassword }).(pulumi.StringPtrOutput)
}

// Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
func (o AlertChannelConfigOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

// Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
func (o AlertChannelConfigOutput) AuthUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.AuthUsername }).(pulumi.StringPtrOutput)
}

// The base URL of the webhook destination.
func (o AlertChannelConfigOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// The Slack channel to send notifications to.
// * `opsgenie`
func (o AlertChannelConfigOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

// A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
func (o AlertChannelConfigOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertChannelConfig) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
func (o AlertChannelConfigOutput) HeadersString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.HeadersString }).(pulumi.StringPtrOutput)
}

// `0` or `1`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
// * `webhook`
func (o AlertChannelConfigOutput) IncludeJsonAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.IncludeJsonAttachment }).(pulumi.StringPtrOutput)
}

// The key for integrating with VictorOps.
func (o AlertChannelConfigOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// A map of key/value pairs that represents the webhook payload.  Must provide `payloadType` if setting this argument.
func (o AlertChannelConfigOutput) Payload() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertChannelConfig) map[string]string { return v.Payload }).(pulumi.StringMapOutput)
}

// Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
func (o AlertChannelConfigOutput) PayloadString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.PayloadString }).(pulumi.StringPtrOutput)
}

// Can either be `application/json` or `application/x-www-form-urlencoded`. The `payloadType` argument is _required_ if `payload` is set.
// * `pagerduty`
func (o AlertChannelConfigOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.PayloadType }).(pulumi.StringPtrOutput)
}

// A set of recipients for targeting notifications.  Multiple values are comma separated.
func (o AlertChannelConfigOutput) Recipients() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Recipients }).(pulumi.StringPtrOutput)
}

// The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
func (o AlertChannelConfigOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The route key for integrating with VictorOps.
// * `slack`
func (o AlertChannelConfigOutput) RouteKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.RouteKey }).(pulumi.StringPtrOutput)
}

// Specifies the service key for integrating with Pagerduty.
// * `victorops`
func (o AlertChannelConfigOutput) ServiceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.ServiceKey }).(pulumi.StringPtrOutput)
}

// A set of tags for targeting notifications. Multiple values are comma separated.
func (o AlertChannelConfigOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Tags }).(pulumi.StringPtrOutput)
}

// A set of teams for targeting notifications. Multiple values are comma separated.
func (o AlertChannelConfigOutput) Teams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Teams }).(pulumi.StringPtrOutput)
}

// Your organization's Slack URL.
func (o AlertChannelConfigOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o AlertChannelConfigOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type AlertChannelConfigPtrOutput struct{ *pulumi.OutputState }

func (AlertChannelConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelConfig)(nil)).Elem()
}

func (o AlertChannelConfigPtrOutput) ToAlertChannelConfigPtrOutput() AlertChannelConfigPtrOutput {
	return o
}

func (o AlertChannelConfigPtrOutput) ToAlertChannelConfigPtrOutputWithContext(ctx context.Context) AlertChannelConfigPtrOutput {
	return o
}

func (o AlertChannelConfigPtrOutput) Elem() AlertChannelConfigOutput {
	return o.ApplyT(func(v *AlertChannelConfig) AlertChannelConfig { return *v }).(AlertChannelConfigOutput)
}

// The API key for integrating with OpsGenie.
func (o AlertChannelConfigPtrOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.ApiKey
	}).(pulumi.StringPtrOutput)
}

// Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
func (o AlertChannelConfigPtrOutput) AuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.AuthPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
func (o AlertChannelConfigPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
func (o AlertChannelConfigPtrOutput) AuthUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.AuthUsername
	}).(pulumi.StringPtrOutput)
}

// The base URL of the webhook destination.
func (o AlertChannelConfigPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// The Slack channel to send notifications to.
// * `opsgenie`
func (o AlertChannelConfigPtrOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Channel
	}).(pulumi.StringPtrOutput)
}

// A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
func (o AlertChannelConfigPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertChannelConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
func (o AlertChannelConfigPtrOutput) HeadersString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.HeadersString
	}).(pulumi.StringPtrOutput)
}

// `0` or `1`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
// * `webhook`
func (o AlertChannelConfigPtrOutput) IncludeJsonAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.IncludeJsonAttachment
	}).(pulumi.StringPtrOutput)
}

// The key for integrating with VictorOps.
func (o AlertChannelConfigPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// A map of key/value pairs that represents the webhook payload.  Must provide `payloadType` if setting this argument.
func (o AlertChannelConfigPtrOutput) Payload() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertChannelConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Payload
	}).(pulumi.StringMapOutput)
}

// Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
func (o AlertChannelConfigPtrOutput) PayloadString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.PayloadString
	}).(pulumi.StringPtrOutput)
}

// Can either be `application/json` or `application/x-www-form-urlencoded`. The `payloadType` argument is _required_ if `payload` is set.
// * `pagerduty`
func (o AlertChannelConfigPtrOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.PayloadType
	}).(pulumi.StringPtrOutput)
}

// A set of recipients for targeting notifications.  Multiple values are comma separated.
func (o AlertChannelConfigPtrOutput) Recipients() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Recipients
	}).(pulumi.StringPtrOutput)
}

// The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
func (o AlertChannelConfigPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The route key for integrating with VictorOps.
// * `slack`
func (o AlertChannelConfigPtrOutput) RouteKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.RouteKey
	}).(pulumi.StringPtrOutput)
}

// Specifies the service key for integrating with Pagerduty.
// * `victorops`
func (o AlertChannelConfigPtrOutput) ServiceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServiceKey
	}).(pulumi.StringPtrOutput)
}

// A set of tags for targeting notifications. Multiple values are comma separated.
func (o AlertChannelConfigPtrOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringPtrOutput)
}

// A set of teams for targeting notifications. Multiple values are comma separated.
func (o AlertChannelConfigPtrOutput) Teams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Teams
	}).(pulumi.StringPtrOutput)
}

// Your organization's Slack URL.
func (o AlertChannelConfigPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

func (o AlertChannelConfigPtrOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.UserId
	}).(pulumi.StringPtrOutput)
}

type AlertConditionTerm struct {
	Duration     int     `pulumi:"duration"`
	Operator     *string `pulumi:"operator"`
	Priority     *string `pulumi:"priority"`
	Threshold    float64 `pulumi:"threshold"`
	TimeFunction string  `pulumi:"timeFunction"`
}

// AlertConditionTermInput is an input type that accepts AlertConditionTermArgs and AlertConditionTermOutput values.
// You can construct a concrete instance of `AlertConditionTermInput` via:
//
// 		 AlertConditionTermArgs{...}
//
type AlertConditionTermInput interface {
	pulumi.Input

	ToAlertConditionTermOutput() AlertConditionTermOutput
	ToAlertConditionTermOutputWithContext(context.Context) AlertConditionTermOutput
}

type AlertConditionTermArgs struct {
	Duration     pulumi.IntInput       `pulumi:"duration"`
	Operator     pulumi.StringPtrInput `pulumi:"operator"`
	Priority     pulumi.StringPtrInput `pulumi:"priority"`
	Threshold    pulumi.Float64Input   `pulumi:"threshold"`
	TimeFunction pulumi.StringInput    `pulumi:"timeFunction"`
}

func (AlertConditionTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertConditionTerm)(nil)).Elem()
}

func (i AlertConditionTermArgs) ToAlertConditionTermOutput() AlertConditionTermOutput {
	return i.ToAlertConditionTermOutputWithContext(context.Background())
}

func (i AlertConditionTermArgs) ToAlertConditionTermOutputWithContext(ctx context.Context) AlertConditionTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertConditionTermOutput)
}

// AlertConditionTermArrayInput is an input type that accepts AlertConditionTermArray and AlertConditionTermArrayOutput values.
// You can construct a concrete instance of `AlertConditionTermArrayInput` via:
//
// 		 AlertConditionTermArray{ AlertConditionTermArgs{...} }
//
type AlertConditionTermArrayInput interface {
	pulumi.Input

	ToAlertConditionTermArrayOutput() AlertConditionTermArrayOutput
	ToAlertConditionTermArrayOutputWithContext(context.Context) AlertConditionTermArrayOutput
}

type AlertConditionTermArray []AlertConditionTermInput

func (AlertConditionTermArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertConditionTerm)(nil)).Elem()
}

func (i AlertConditionTermArray) ToAlertConditionTermArrayOutput() AlertConditionTermArrayOutput {
	return i.ToAlertConditionTermArrayOutputWithContext(context.Background())
}

func (i AlertConditionTermArray) ToAlertConditionTermArrayOutputWithContext(ctx context.Context) AlertConditionTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertConditionTermArrayOutput)
}

type AlertConditionTermOutput struct{ *pulumi.OutputState }

func (AlertConditionTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertConditionTerm)(nil)).Elem()
}

func (o AlertConditionTermOutput) ToAlertConditionTermOutput() AlertConditionTermOutput {
	return o
}

func (o AlertConditionTermOutput) ToAlertConditionTermOutputWithContext(ctx context.Context) AlertConditionTermOutput {
	return o
}

func (o AlertConditionTermOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v AlertConditionTerm) int { return v.Duration }).(pulumi.IntOutput)
}

func (o AlertConditionTermOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertConditionTerm) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

func (o AlertConditionTermOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertConditionTerm) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

func (o AlertConditionTermOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v AlertConditionTerm) float64 { return v.Threshold }).(pulumi.Float64Output)
}

func (o AlertConditionTermOutput) TimeFunction() pulumi.StringOutput {
	return o.ApplyT(func(v AlertConditionTerm) string { return v.TimeFunction }).(pulumi.StringOutput)
}

type AlertConditionTermArrayOutput struct{ *pulumi.OutputState }

func (AlertConditionTermArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertConditionTerm)(nil)).Elem()
}

func (o AlertConditionTermArrayOutput) ToAlertConditionTermArrayOutput() AlertConditionTermArrayOutput {
	return o
}

func (o AlertConditionTermArrayOutput) ToAlertConditionTermArrayOutputWithContext(ctx context.Context) AlertConditionTermArrayOutput {
	return o
}

func (o AlertConditionTermArrayOutput) Index(i pulumi.IntInput) AlertConditionTermOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertConditionTerm {
		return vs[0].([]AlertConditionTerm)[vs[1].(int)]
	}).(AlertConditionTermOutput)
}

type DashboardFilter struct {
	Attributes []string `pulumi:"attributes"`
	EventTypes []string `pulumi:"eventTypes"`
}

// DashboardFilterInput is an input type that accepts DashboardFilterArgs and DashboardFilterOutput values.
// You can construct a concrete instance of `DashboardFilterInput` via:
//
// 		 DashboardFilterArgs{...}
//
type DashboardFilterInput interface {
	pulumi.Input

	ToDashboardFilterOutput() DashboardFilterOutput
	ToDashboardFilterOutputWithContext(context.Context) DashboardFilterOutput
}

type DashboardFilterArgs struct {
	Attributes pulumi.StringArrayInput `pulumi:"attributes"`
	EventTypes pulumi.StringArrayInput `pulumi:"eventTypes"`
}

func (DashboardFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardFilter)(nil)).Elem()
}

func (i DashboardFilterArgs) ToDashboardFilterOutput() DashboardFilterOutput {
	return i.ToDashboardFilterOutputWithContext(context.Background())
}

func (i DashboardFilterArgs) ToDashboardFilterOutputWithContext(ctx context.Context) DashboardFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardFilterOutput)
}

func (i DashboardFilterArgs) ToDashboardFilterPtrOutput() DashboardFilterPtrOutput {
	return i.ToDashboardFilterPtrOutputWithContext(context.Background())
}

func (i DashboardFilterArgs) ToDashboardFilterPtrOutputWithContext(ctx context.Context) DashboardFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardFilterOutput).ToDashboardFilterPtrOutputWithContext(ctx)
}

// DashboardFilterPtrInput is an input type that accepts DashboardFilterArgs, DashboardFilterPtr and DashboardFilterPtrOutput values.
// You can construct a concrete instance of `DashboardFilterPtrInput` via:
//
// 		 DashboardFilterArgs{...}
//
//  or:
//
// 		 nil
//
type DashboardFilterPtrInput interface {
	pulumi.Input

	ToDashboardFilterPtrOutput() DashboardFilterPtrOutput
	ToDashboardFilterPtrOutputWithContext(context.Context) DashboardFilterPtrOutput
}

type dashboardFilterPtrType DashboardFilterArgs

func DashboardFilterPtr(v *DashboardFilterArgs) DashboardFilterPtrInput {
	return (*dashboardFilterPtrType)(v)
}

func (*dashboardFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardFilter)(nil)).Elem()
}

func (i *dashboardFilterPtrType) ToDashboardFilterPtrOutput() DashboardFilterPtrOutput {
	return i.ToDashboardFilterPtrOutputWithContext(context.Background())
}

func (i *dashboardFilterPtrType) ToDashboardFilterPtrOutputWithContext(ctx context.Context) DashboardFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardFilterPtrOutput)
}

type DashboardFilterOutput struct{ *pulumi.OutputState }

func (DashboardFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardFilter)(nil)).Elem()
}

func (o DashboardFilterOutput) ToDashboardFilterOutput() DashboardFilterOutput {
	return o
}

func (o DashboardFilterOutput) ToDashboardFilterOutputWithContext(ctx context.Context) DashboardFilterOutput {
	return o
}

func (o DashboardFilterOutput) ToDashboardFilterPtrOutput() DashboardFilterPtrOutput {
	return o.ToDashboardFilterPtrOutputWithContext(context.Background())
}

func (o DashboardFilterOutput) ToDashboardFilterPtrOutputWithContext(ctx context.Context) DashboardFilterPtrOutput {
	return o.ApplyT(func(v DashboardFilter) *DashboardFilter {
		return &v
	}).(DashboardFilterPtrOutput)
}
func (o DashboardFilterOutput) Attributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardFilter) []string { return v.Attributes }).(pulumi.StringArrayOutput)
}

func (o DashboardFilterOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardFilter) []string { return v.EventTypes }).(pulumi.StringArrayOutput)
}

type DashboardFilterPtrOutput struct{ *pulumi.OutputState }

func (DashboardFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardFilter)(nil)).Elem()
}

func (o DashboardFilterPtrOutput) ToDashboardFilterPtrOutput() DashboardFilterPtrOutput {
	return o
}

func (o DashboardFilterPtrOutput) ToDashboardFilterPtrOutputWithContext(ctx context.Context) DashboardFilterPtrOutput {
	return o
}

func (o DashboardFilterPtrOutput) Elem() DashboardFilterOutput {
	return o.ApplyT(func(v *DashboardFilter) DashboardFilter { return *v }).(DashboardFilterOutput)
}

func (o DashboardFilterPtrOutput) Attributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DashboardFilter) []string {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(pulumi.StringArrayOutput)
}

func (o DashboardFilterPtrOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DashboardFilter) []string {
		if v == nil {
			return nil
		}
		return v.EventTypes
	}).(pulumi.StringArrayOutput)
}

type DashboardWidget struct {
	Column               int                          `pulumi:"column"`
	CompareWiths         []DashboardWidgetCompareWith `pulumi:"compareWiths"`
	DrilldownDashboardId *int                         `pulumi:"drilldownDashboardId"`
	Duration             *int                         `pulumi:"duration"`
	EndTime              *int                         `pulumi:"endTime"`
	EntityIds            []int                        `pulumi:"entityIds"`
	Facet                *string                      `pulumi:"facet"`
	Height               *int                         `pulumi:"height"`
	Limit                *int                         `pulumi:"limit"`
	Metrics              []DashboardWidgetMetric      `pulumi:"metrics"`
	Notes                *string                      `pulumi:"notes"`
	Nrql                 *string                      `pulumi:"nrql"`
	OrderBy              *string                      `pulumi:"orderBy"`
	RawMetricName        *string                      `pulumi:"rawMetricName"`
	Row                  int                          `pulumi:"row"`
	Source               *string                      `pulumi:"source"`
	ThresholdRed         *float64                     `pulumi:"thresholdRed"`
	ThresholdYellow      *float64                     `pulumi:"thresholdYellow"`
	// The title of the dashboard.
	Title         string `pulumi:"title"`
	Visualization string `pulumi:"visualization"`
	WidgetId      *int   `pulumi:"widgetId"`
	Width         *int   `pulumi:"width"`
}

// DashboardWidgetInput is an input type that accepts DashboardWidgetArgs and DashboardWidgetOutput values.
// You can construct a concrete instance of `DashboardWidgetInput` via:
//
// 		 DashboardWidgetArgs{...}
//
type DashboardWidgetInput interface {
	pulumi.Input

	ToDashboardWidgetOutput() DashboardWidgetOutput
	ToDashboardWidgetOutputWithContext(context.Context) DashboardWidgetOutput
}

type DashboardWidgetArgs struct {
	Column               pulumi.IntInput                      `pulumi:"column"`
	CompareWiths         DashboardWidgetCompareWithArrayInput `pulumi:"compareWiths"`
	DrilldownDashboardId pulumi.IntPtrInput                   `pulumi:"drilldownDashboardId"`
	Duration             pulumi.IntPtrInput                   `pulumi:"duration"`
	EndTime              pulumi.IntPtrInput                   `pulumi:"endTime"`
	EntityIds            pulumi.IntArrayInput                 `pulumi:"entityIds"`
	Facet                pulumi.StringPtrInput                `pulumi:"facet"`
	Height               pulumi.IntPtrInput                   `pulumi:"height"`
	Limit                pulumi.IntPtrInput                   `pulumi:"limit"`
	Metrics              DashboardWidgetMetricArrayInput      `pulumi:"metrics"`
	Notes                pulumi.StringPtrInput                `pulumi:"notes"`
	Nrql                 pulumi.StringPtrInput                `pulumi:"nrql"`
	OrderBy              pulumi.StringPtrInput                `pulumi:"orderBy"`
	RawMetricName        pulumi.StringPtrInput                `pulumi:"rawMetricName"`
	Row                  pulumi.IntInput                      `pulumi:"row"`
	Source               pulumi.StringPtrInput                `pulumi:"source"`
	ThresholdRed         pulumi.Float64PtrInput               `pulumi:"thresholdRed"`
	ThresholdYellow      pulumi.Float64PtrInput               `pulumi:"thresholdYellow"`
	// The title of the dashboard.
	Title         pulumi.StringInput `pulumi:"title"`
	Visualization pulumi.StringInput `pulumi:"visualization"`
	WidgetId      pulumi.IntPtrInput `pulumi:"widgetId"`
	Width         pulumi.IntPtrInput `pulumi:"width"`
}

func (DashboardWidgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidget)(nil)).Elem()
}

func (i DashboardWidgetArgs) ToDashboardWidgetOutput() DashboardWidgetOutput {
	return i.ToDashboardWidgetOutputWithContext(context.Background())
}

func (i DashboardWidgetArgs) ToDashboardWidgetOutputWithContext(ctx context.Context) DashboardWidgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetOutput)
}

// DashboardWidgetArrayInput is an input type that accepts DashboardWidgetArray and DashboardWidgetArrayOutput values.
// You can construct a concrete instance of `DashboardWidgetArrayInput` via:
//
// 		 DashboardWidgetArray{ DashboardWidgetArgs{...} }
//
type DashboardWidgetArrayInput interface {
	pulumi.Input

	ToDashboardWidgetArrayOutput() DashboardWidgetArrayOutput
	ToDashboardWidgetArrayOutputWithContext(context.Context) DashboardWidgetArrayOutput
}

type DashboardWidgetArray []DashboardWidgetInput

func (DashboardWidgetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidget)(nil)).Elem()
}

func (i DashboardWidgetArray) ToDashboardWidgetArrayOutput() DashboardWidgetArrayOutput {
	return i.ToDashboardWidgetArrayOutputWithContext(context.Background())
}

func (i DashboardWidgetArray) ToDashboardWidgetArrayOutputWithContext(ctx context.Context) DashboardWidgetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetArrayOutput)
}

type DashboardWidgetOutput struct{ *pulumi.OutputState }

func (DashboardWidgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidget)(nil)).Elem()
}

func (o DashboardWidgetOutput) ToDashboardWidgetOutput() DashboardWidgetOutput {
	return o
}

func (o DashboardWidgetOutput) ToDashboardWidgetOutputWithContext(ctx context.Context) DashboardWidgetOutput {
	return o
}

func (o DashboardWidgetOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardWidget) int { return v.Column }).(pulumi.IntOutput)
}

func (o DashboardWidgetOutput) CompareWiths() DashboardWidgetCompareWithArrayOutput {
	return o.ApplyT(func(v DashboardWidget) []DashboardWidgetCompareWith { return v.CompareWiths }).(DashboardWidgetCompareWithArrayOutput)
}

func (o DashboardWidgetOutput) DrilldownDashboardId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.DrilldownDashboardId }).(pulumi.IntPtrOutput)
}

func (o DashboardWidgetOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

func (o DashboardWidgetOutput) EndTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.EndTime }).(pulumi.IntPtrOutput)
}

func (o DashboardWidgetOutput) EntityIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DashboardWidget) []int { return v.EntityIds }).(pulumi.IntArrayOutput)
}

func (o DashboardWidgetOutput) Facet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.Facet }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o DashboardWidgetOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

func (o DashboardWidgetOutput) Metrics() DashboardWidgetMetricArrayOutput {
	return o.ApplyT(func(v DashboardWidget) []DashboardWidgetMetric { return v.Metrics }).(DashboardWidgetMetricArrayOutput)
}

func (o DashboardWidgetOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.Notes }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetOutput) Nrql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.Nrql }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetOutput) OrderBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.OrderBy }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetOutput) RawMetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.RawMetricName }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardWidget) int { return v.Row }).(pulumi.IntOutput)
}

func (o DashboardWidgetOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetOutput) ThresholdRed() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardWidget) *float64 { return v.ThresholdRed }).(pulumi.Float64PtrOutput)
}

func (o DashboardWidgetOutput) ThresholdYellow() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardWidget) *float64 { return v.ThresholdYellow }).(pulumi.Float64PtrOutput)
}

// The title of the dashboard.
func (o DashboardWidgetOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidget) string { return v.Title }).(pulumi.StringOutput)
}

func (o DashboardWidgetOutput) Visualization() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidget) string { return v.Visualization }).(pulumi.StringOutput)
}

func (o DashboardWidgetOutput) WidgetId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.WidgetId }).(pulumi.IntPtrOutput)
}

func (o DashboardWidgetOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type DashboardWidgetArrayOutput struct{ *pulumi.OutputState }

func (DashboardWidgetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidget)(nil)).Elem()
}

func (o DashboardWidgetArrayOutput) ToDashboardWidgetArrayOutput() DashboardWidgetArrayOutput {
	return o
}

func (o DashboardWidgetArrayOutput) ToDashboardWidgetArrayOutputWithContext(ctx context.Context) DashboardWidgetArrayOutput {
	return o
}

func (o DashboardWidgetArrayOutput) Index(i pulumi.IntInput) DashboardWidgetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardWidget {
		return vs[0].([]DashboardWidget)[vs[1].(int)]
	}).(DashboardWidgetOutput)
}

type DashboardWidgetCompareWith struct {
	OffsetDuration string                                 `pulumi:"offsetDuration"`
	Presentation   DashboardWidgetCompareWithPresentation `pulumi:"presentation"`
}

// DashboardWidgetCompareWithInput is an input type that accepts DashboardWidgetCompareWithArgs and DashboardWidgetCompareWithOutput values.
// You can construct a concrete instance of `DashboardWidgetCompareWithInput` via:
//
// 		 DashboardWidgetCompareWithArgs{...}
//
type DashboardWidgetCompareWithInput interface {
	pulumi.Input

	ToDashboardWidgetCompareWithOutput() DashboardWidgetCompareWithOutput
	ToDashboardWidgetCompareWithOutputWithContext(context.Context) DashboardWidgetCompareWithOutput
}

type DashboardWidgetCompareWithArgs struct {
	OffsetDuration pulumi.StringInput                          `pulumi:"offsetDuration"`
	Presentation   DashboardWidgetCompareWithPresentationInput `pulumi:"presentation"`
}

func (DashboardWidgetCompareWithArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetCompareWith)(nil)).Elem()
}

func (i DashboardWidgetCompareWithArgs) ToDashboardWidgetCompareWithOutput() DashboardWidgetCompareWithOutput {
	return i.ToDashboardWidgetCompareWithOutputWithContext(context.Background())
}

func (i DashboardWidgetCompareWithArgs) ToDashboardWidgetCompareWithOutputWithContext(ctx context.Context) DashboardWidgetCompareWithOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetCompareWithOutput)
}

// DashboardWidgetCompareWithArrayInput is an input type that accepts DashboardWidgetCompareWithArray and DashboardWidgetCompareWithArrayOutput values.
// You can construct a concrete instance of `DashboardWidgetCompareWithArrayInput` via:
//
// 		 DashboardWidgetCompareWithArray{ DashboardWidgetCompareWithArgs{...} }
//
type DashboardWidgetCompareWithArrayInput interface {
	pulumi.Input

	ToDashboardWidgetCompareWithArrayOutput() DashboardWidgetCompareWithArrayOutput
	ToDashboardWidgetCompareWithArrayOutputWithContext(context.Context) DashboardWidgetCompareWithArrayOutput
}

type DashboardWidgetCompareWithArray []DashboardWidgetCompareWithInput

func (DashboardWidgetCompareWithArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidgetCompareWith)(nil)).Elem()
}

func (i DashboardWidgetCompareWithArray) ToDashboardWidgetCompareWithArrayOutput() DashboardWidgetCompareWithArrayOutput {
	return i.ToDashboardWidgetCompareWithArrayOutputWithContext(context.Background())
}

func (i DashboardWidgetCompareWithArray) ToDashboardWidgetCompareWithArrayOutputWithContext(ctx context.Context) DashboardWidgetCompareWithArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetCompareWithArrayOutput)
}

type DashboardWidgetCompareWithOutput struct{ *pulumi.OutputState }

func (DashboardWidgetCompareWithOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetCompareWith)(nil)).Elem()
}

func (o DashboardWidgetCompareWithOutput) ToDashboardWidgetCompareWithOutput() DashboardWidgetCompareWithOutput {
	return o
}

func (o DashboardWidgetCompareWithOutput) ToDashboardWidgetCompareWithOutputWithContext(ctx context.Context) DashboardWidgetCompareWithOutput {
	return o
}

func (o DashboardWidgetCompareWithOutput) OffsetDuration() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidgetCompareWith) string { return v.OffsetDuration }).(pulumi.StringOutput)
}

func (o DashboardWidgetCompareWithOutput) Presentation() DashboardWidgetCompareWithPresentationOutput {
	return o.ApplyT(func(v DashboardWidgetCompareWith) DashboardWidgetCompareWithPresentation { return v.Presentation }).(DashboardWidgetCompareWithPresentationOutput)
}

type DashboardWidgetCompareWithArrayOutput struct{ *pulumi.OutputState }

func (DashboardWidgetCompareWithArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidgetCompareWith)(nil)).Elem()
}

func (o DashboardWidgetCompareWithArrayOutput) ToDashboardWidgetCompareWithArrayOutput() DashboardWidgetCompareWithArrayOutput {
	return o
}

func (o DashboardWidgetCompareWithArrayOutput) ToDashboardWidgetCompareWithArrayOutputWithContext(ctx context.Context) DashboardWidgetCompareWithArrayOutput {
	return o
}

func (o DashboardWidgetCompareWithArrayOutput) Index(i pulumi.IntInput) DashboardWidgetCompareWithOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardWidgetCompareWith {
		return vs[0].([]DashboardWidgetCompareWith)[vs[1].(int)]
	}).(DashboardWidgetCompareWithOutput)
}

type DashboardWidgetCompareWithPresentation struct {
	Color string `pulumi:"color"`
	Name  string `pulumi:"name"`
}

// DashboardWidgetCompareWithPresentationInput is an input type that accepts DashboardWidgetCompareWithPresentationArgs and DashboardWidgetCompareWithPresentationOutput values.
// You can construct a concrete instance of `DashboardWidgetCompareWithPresentationInput` via:
//
// 		 DashboardWidgetCompareWithPresentationArgs{...}
//
type DashboardWidgetCompareWithPresentationInput interface {
	pulumi.Input

	ToDashboardWidgetCompareWithPresentationOutput() DashboardWidgetCompareWithPresentationOutput
	ToDashboardWidgetCompareWithPresentationOutputWithContext(context.Context) DashboardWidgetCompareWithPresentationOutput
}

type DashboardWidgetCompareWithPresentationArgs struct {
	Color pulumi.StringInput `pulumi:"color"`
	Name  pulumi.StringInput `pulumi:"name"`
}

func (DashboardWidgetCompareWithPresentationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetCompareWithPresentation)(nil)).Elem()
}

func (i DashboardWidgetCompareWithPresentationArgs) ToDashboardWidgetCompareWithPresentationOutput() DashboardWidgetCompareWithPresentationOutput {
	return i.ToDashboardWidgetCompareWithPresentationOutputWithContext(context.Background())
}

func (i DashboardWidgetCompareWithPresentationArgs) ToDashboardWidgetCompareWithPresentationOutputWithContext(ctx context.Context) DashboardWidgetCompareWithPresentationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetCompareWithPresentationOutput)
}

type DashboardWidgetCompareWithPresentationOutput struct{ *pulumi.OutputState }

func (DashboardWidgetCompareWithPresentationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetCompareWithPresentation)(nil)).Elem()
}

func (o DashboardWidgetCompareWithPresentationOutput) ToDashboardWidgetCompareWithPresentationOutput() DashboardWidgetCompareWithPresentationOutput {
	return o
}

func (o DashboardWidgetCompareWithPresentationOutput) ToDashboardWidgetCompareWithPresentationOutputWithContext(ctx context.Context) DashboardWidgetCompareWithPresentationOutput {
	return o
}

func (o DashboardWidgetCompareWithPresentationOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidgetCompareWithPresentation) string { return v.Color }).(pulumi.StringOutput)
}

func (o DashboardWidgetCompareWithPresentationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidgetCompareWithPresentation) string { return v.Name }).(pulumi.StringOutput)
}

type DashboardWidgetMetric struct {
	Name   string   `pulumi:"name"`
	Scope  *string  `pulumi:"scope"`
	Units  *string  `pulumi:"units"`
	Values []string `pulumi:"values"`
}

// DashboardWidgetMetricInput is an input type that accepts DashboardWidgetMetricArgs and DashboardWidgetMetricOutput values.
// You can construct a concrete instance of `DashboardWidgetMetricInput` via:
//
// 		 DashboardWidgetMetricArgs{...}
//
type DashboardWidgetMetricInput interface {
	pulumi.Input

	ToDashboardWidgetMetricOutput() DashboardWidgetMetricOutput
	ToDashboardWidgetMetricOutputWithContext(context.Context) DashboardWidgetMetricOutput
}

type DashboardWidgetMetricArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Scope  pulumi.StringPtrInput   `pulumi:"scope"`
	Units  pulumi.StringPtrInput   `pulumi:"units"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardWidgetMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetMetric)(nil)).Elem()
}

func (i DashboardWidgetMetricArgs) ToDashboardWidgetMetricOutput() DashboardWidgetMetricOutput {
	return i.ToDashboardWidgetMetricOutputWithContext(context.Background())
}

func (i DashboardWidgetMetricArgs) ToDashboardWidgetMetricOutputWithContext(ctx context.Context) DashboardWidgetMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetMetricOutput)
}

// DashboardWidgetMetricArrayInput is an input type that accepts DashboardWidgetMetricArray and DashboardWidgetMetricArrayOutput values.
// You can construct a concrete instance of `DashboardWidgetMetricArrayInput` via:
//
// 		 DashboardWidgetMetricArray{ DashboardWidgetMetricArgs{...} }
//
type DashboardWidgetMetricArrayInput interface {
	pulumi.Input

	ToDashboardWidgetMetricArrayOutput() DashboardWidgetMetricArrayOutput
	ToDashboardWidgetMetricArrayOutputWithContext(context.Context) DashboardWidgetMetricArrayOutput
}

type DashboardWidgetMetricArray []DashboardWidgetMetricInput

func (DashboardWidgetMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidgetMetric)(nil)).Elem()
}

func (i DashboardWidgetMetricArray) ToDashboardWidgetMetricArrayOutput() DashboardWidgetMetricArrayOutput {
	return i.ToDashboardWidgetMetricArrayOutputWithContext(context.Background())
}

func (i DashboardWidgetMetricArray) ToDashboardWidgetMetricArrayOutputWithContext(ctx context.Context) DashboardWidgetMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetMetricArrayOutput)
}

type DashboardWidgetMetricOutput struct{ *pulumi.OutputState }

func (DashboardWidgetMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetMetric)(nil)).Elem()
}

func (o DashboardWidgetMetricOutput) ToDashboardWidgetMetricOutput() DashboardWidgetMetricOutput {
	return o
}

func (o DashboardWidgetMetricOutput) ToDashboardWidgetMetricOutputWithContext(ctx context.Context) DashboardWidgetMetricOutput {
	return o
}

func (o DashboardWidgetMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidgetMetric) string { return v.Name }).(pulumi.StringOutput)
}

func (o DashboardWidgetMetricOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidgetMetric) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetMetricOutput) Units() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidgetMetric) *string { return v.Units }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetMetricOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardWidgetMetric) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardWidgetMetricArrayOutput struct{ *pulumi.OutputState }

func (DashboardWidgetMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidgetMetric)(nil)).Elem()
}

func (o DashboardWidgetMetricArrayOutput) ToDashboardWidgetMetricArrayOutput() DashboardWidgetMetricArrayOutput {
	return o
}

func (o DashboardWidgetMetricArrayOutput) ToDashboardWidgetMetricArrayOutputWithContext(ctx context.Context) DashboardWidgetMetricArrayOutput {
	return o
}

func (o DashboardWidgetMetricArrayOutput) Index(i pulumi.IntInput) DashboardWidgetMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardWidgetMetric {
		return vs[0].([]DashboardWidgetMetric)[vs[1].(int)]
	}).(DashboardWidgetMetricOutput)
}

type EntityTagsTag struct {
	// The tag key.
	Key string `pulumi:"key"`
	// The tag values.
	Values []string `pulumi:"values"`
}

// EntityTagsTagInput is an input type that accepts EntityTagsTagArgs and EntityTagsTagOutput values.
// You can construct a concrete instance of `EntityTagsTagInput` via:
//
// 		 EntityTagsTagArgs{...}
//
type EntityTagsTagInput interface {
	pulumi.Input

	ToEntityTagsTagOutput() EntityTagsTagOutput
	ToEntityTagsTagOutputWithContext(context.Context) EntityTagsTagOutput
}

type EntityTagsTagArgs struct {
	// The tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// The tag values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EntityTagsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityTagsTag)(nil)).Elem()
}

func (i EntityTagsTagArgs) ToEntityTagsTagOutput() EntityTagsTagOutput {
	return i.ToEntityTagsTagOutputWithContext(context.Background())
}

func (i EntityTagsTagArgs) ToEntityTagsTagOutputWithContext(ctx context.Context) EntityTagsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityTagsTagOutput)
}

// EntityTagsTagArrayInput is an input type that accepts EntityTagsTagArray and EntityTagsTagArrayOutput values.
// You can construct a concrete instance of `EntityTagsTagArrayInput` via:
//
// 		 EntityTagsTagArray{ EntityTagsTagArgs{...} }
//
type EntityTagsTagArrayInput interface {
	pulumi.Input

	ToEntityTagsTagArrayOutput() EntityTagsTagArrayOutput
	ToEntityTagsTagArrayOutputWithContext(context.Context) EntityTagsTagArrayOutput
}

type EntityTagsTagArray []EntityTagsTagInput

func (EntityTagsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityTagsTag)(nil)).Elem()
}

func (i EntityTagsTagArray) ToEntityTagsTagArrayOutput() EntityTagsTagArrayOutput {
	return i.ToEntityTagsTagArrayOutputWithContext(context.Background())
}

func (i EntityTagsTagArray) ToEntityTagsTagArrayOutputWithContext(ctx context.Context) EntityTagsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityTagsTagArrayOutput)
}

type EntityTagsTagOutput struct{ *pulumi.OutputState }

func (EntityTagsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityTagsTag)(nil)).Elem()
}

func (o EntityTagsTagOutput) ToEntityTagsTagOutput() EntityTagsTagOutput {
	return o
}

func (o EntityTagsTagOutput) ToEntityTagsTagOutputWithContext(ctx context.Context) EntityTagsTagOutput {
	return o
}

// The tag key.
func (o EntityTagsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EntityTagsTag) string { return v.Key }).(pulumi.StringOutput)
}

// The tag values.
func (o EntityTagsTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EntityTagsTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EntityTagsTagArrayOutput struct{ *pulumi.OutputState }

func (EntityTagsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityTagsTag)(nil)).Elem()
}

func (o EntityTagsTagArrayOutput) ToEntityTagsTagArrayOutput() EntityTagsTagArrayOutput {
	return o
}

func (o EntityTagsTagArrayOutput) ToEntityTagsTagArrayOutputWithContext(ctx context.Context) EntityTagsTagArrayOutput {
	return o
}

func (o EntityTagsTagArrayOutput) Index(i pulumi.IntInput) EntityTagsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityTagsTag {
		return vs[0].([]EntityTagsTag)[vs[1].(int)]
	}).(EntityTagsTagOutput)
}

type InfraAlertConditionCritical struct {
	Duration     int      `pulumi:"duration"`
	TimeFunction *string  `pulumi:"timeFunction"`
	Value        *float64 `pulumi:"value"`
}

// InfraAlertConditionCriticalInput is an input type that accepts InfraAlertConditionCriticalArgs and InfraAlertConditionCriticalOutput values.
// You can construct a concrete instance of `InfraAlertConditionCriticalInput` via:
//
// 		 InfraAlertConditionCriticalArgs{...}
//
type InfraAlertConditionCriticalInput interface {
	pulumi.Input

	ToInfraAlertConditionCriticalOutput() InfraAlertConditionCriticalOutput
	ToInfraAlertConditionCriticalOutputWithContext(context.Context) InfraAlertConditionCriticalOutput
}

type InfraAlertConditionCriticalArgs struct {
	Duration     pulumi.IntInput        `pulumi:"duration"`
	TimeFunction pulumi.StringPtrInput  `pulumi:"timeFunction"`
	Value        pulumi.Float64PtrInput `pulumi:"value"`
}

func (InfraAlertConditionCriticalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfraAlertConditionCritical)(nil)).Elem()
}

func (i InfraAlertConditionCriticalArgs) ToInfraAlertConditionCriticalOutput() InfraAlertConditionCriticalOutput {
	return i.ToInfraAlertConditionCriticalOutputWithContext(context.Background())
}

func (i InfraAlertConditionCriticalArgs) ToInfraAlertConditionCriticalOutputWithContext(ctx context.Context) InfraAlertConditionCriticalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionCriticalOutput)
}

func (i InfraAlertConditionCriticalArgs) ToInfraAlertConditionCriticalPtrOutput() InfraAlertConditionCriticalPtrOutput {
	return i.ToInfraAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (i InfraAlertConditionCriticalArgs) ToInfraAlertConditionCriticalPtrOutputWithContext(ctx context.Context) InfraAlertConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionCriticalOutput).ToInfraAlertConditionCriticalPtrOutputWithContext(ctx)
}

// InfraAlertConditionCriticalPtrInput is an input type that accepts InfraAlertConditionCriticalArgs, InfraAlertConditionCriticalPtr and InfraAlertConditionCriticalPtrOutput values.
// You can construct a concrete instance of `InfraAlertConditionCriticalPtrInput` via:
//
// 		 InfraAlertConditionCriticalArgs{...}
//
//  or:
//
// 		 nil
//
type InfraAlertConditionCriticalPtrInput interface {
	pulumi.Input

	ToInfraAlertConditionCriticalPtrOutput() InfraAlertConditionCriticalPtrOutput
	ToInfraAlertConditionCriticalPtrOutputWithContext(context.Context) InfraAlertConditionCriticalPtrOutput
}

type infraAlertConditionCriticalPtrType InfraAlertConditionCriticalArgs

func InfraAlertConditionCriticalPtr(v *InfraAlertConditionCriticalArgs) InfraAlertConditionCriticalPtrInput {
	return (*infraAlertConditionCriticalPtrType)(v)
}

func (*infraAlertConditionCriticalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraAlertConditionCritical)(nil)).Elem()
}

func (i *infraAlertConditionCriticalPtrType) ToInfraAlertConditionCriticalPtrOutput() InfraAlertConditionCriticalPtrOutput {
	return i.ToInfraAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (i *infraAlertConditionCriticalPtrType) ToInfraAlertConditionCriticalPtrOutputWithContext(ctx context.Context) InfraAlertConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionCriticalPtrOutput)
}

type InfraAlertConditionCriticalOutput struct{ *pulumi.OutputState }

func (InfraAlertConditionCriticalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfraAlertConditionCritical)(nil)).Elem()
}

func (o InfraAlertConditionCriticalOutput) ToInfraAlertConditionCriticalOutput() InfraAlertConditionCriticalOutput {
	return o
}

func (o InfraAlertConditionCriticalOutput) ToInfraAlertConditionCriticalOutputWithContext(ctx context.Context) InfraAlertConditionCriticalOutput {
	return o
}

func (o InfraAlertConditionCriticalOutput) ToInfraAlertConditionCriticalPtrOutput() InfraAlertConditionCriticalPtrOutput {
	return o.ToInfraAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (o InfraAlertConditionCriticalOutput) ToInfraAlertConditionCriticalPtrOutputWithContext(ctx context.Context) InfraAlertConditionCriticalPtrOutput {
	return o.ApplyT(func(v InfraAlertConditionCritical) *InfraAlertConditionCritical {
		return &v
	}).(InfraAlertConditionCriticalPtrOutput)
}
func (o InfraAlertConditionCriticalOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v InfraAlertConditionCritical) int { return v.Duration }).(pulumi.IntOutput)
}

func (o InfraAlertConditionCriticalOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfraAlertConditionCritical) *string { return v.TimeFunction }).(pulumi.StringPtrOutput)
}

func (o InfraAlertConditionCriticalOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v InfraAlertConditionCritical) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type InfraAlertConditionCriticalPtrOutput struct{ *pulumi.OutputState }

func (InfraAlertConditionCriticalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraAlertConditionCritical)(nil)).Elem()
}

func (o InfraAlertConditionCriticalPtrOutput) ToInfraAlertConditionCriticalPtrOutput() InfraAlertConditionCriticalPtrOutput {
	return o
}

func (o InfraAlertConditionCriticalPtrOutput) ToInfraAlertConditionCriticalPtrOutputWithContext(ctx context.Context) InfraAlertConditionCriticalPtrOutput {
	return o
}

func (o InfraAlertConditionCriticalPtrOutput) Elem() InfraAlertConditionCriticalOutput {
	return o.ApplyT(func(v *InfraAlertConditionCritical) InfraAlertConditionCritical { return *v }).(InfraAlertConditionCriticalOutput)
}

func (o InfraAlertConditionCriticalPtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionCritical) *int {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.IntPtrOutput)
}

func (o InfraAlertConditionCriticalPtrOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionCritical) *string {
		if v == nil {
			return nil
		}
		return v.TimeFunction
	}).(pulumi.StringPtrOutput)
}

func (o InfraAlertConditionCriticalPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionCritical) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

type InfraAlertConditionWarning struct {
	Duration     int      `pulumi:"duration"`
	TimeFunction *string  `pulumi:"timeFunction"`
	Value        *float64 `pulumi:"value"`
}

// InfraAlertConditionWarningInput is an input type that accepts InfraAlertConditionWarningArgs and InfraAlertConditionWarningOutput values.
// You can construct a concrete instance of `InfraAlertConditionWarningInput` via:
//
// 		 InfraAlertConditionWarningArgs{...}
//
type InfraAlertConditionWarningInput interface {
	pulumi.Input

	ToInfraAlertConditionWarningOutput() InfraAlertConditionWarningOutput
	ToInfraAlertConditionWarningOutputWithContext(context.Context) InfraAlertConditionWarningOutput
}

type InfraAlertConditionWarningArgs struct {
	Duration     pulumi.IntInput        `pulumi:"duration"`
	TimeFunction pulumi.StringPtrInput  `pulumi:"timeFunction"`
	Value        pulumi.Float64PtrInput `pulumi:"value"`
}

func (InfraAlertConditionWarningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfraAlertConditionWarning)(nil)).Elem()
}

func (i InfraAlertConditionWarningArgs) ToInfraAlertConditionWarningOutput() InfraAlertConditionWarningOutput {
	return i.ToInfraAlertConditionWarningOutputWithContext(context.Background())
}

func (i InfraAlertConditionWarningArgs) ToInfraAlertConditionWarningOutputWithContext(ctx context.Context) InfraAlertConditionWarningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionWarningOutput)
}

func (i InfraAlertConditionWarningArgs) ToInfraAlertConditionWarningPtrOutput() InfraAlertConditionWarningPtrOutput {
	return i.ToInfraAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (i InfraAlertConditionWarningArgs) ToInfraAlertConditionWarningPtrOutputWithContext(ctx context.Context) InfraAlertConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionWarningOutput).ToInfraAlertConditionWarningPtrOutputWithContext(ctx)
}

// InfraAlertConditionWarningPtrInput is an input type that accepts InfraAlertConditionWarningArgs, InfraAlertConditionWarningPtr and InfraAlertConditionWarningPtrOutput values.
// You can construct a concrete instance of `InfraAlertConditionWarningPtrInput` via:
//
// 		 InfraAlertConditionWarningArgs{...}
//
//  or:
//
// 		 nil
//
type InfraAlertConditionWarningPtrInput interface {
	pulumi.Input

	ToInfraAlertConditionWarningPtrOutput() InfraAlertConditionWarningPtrOutput
	ToInfraAlertConditionWarningPtrOutputWithContext(context.Context) InfraAlertConditionWarningPtrOutput
}

type infraAlertConditionWarningPtrType InfraAlertConditionWarningArgs

func InfraAlertConditionWarningPtr(v *InfraAlertConditionWarningArgs) InfraAlertConditionWarningPtrInput {
	return (*infraAlertConditionWarningPtrType)(v)
}

func (*infraAlertConditionWarningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraAlertConditionWarning)(nil)).Elem()
}

func (i *infraAlertConditionWarningPtrType) ToInfraAlertConditionWarningPtrOutput() InfraAlertConditionWarningPtrOutput {
	return i.ToInfraAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (i *infraAlertConditionWarningPtrType) ToInfraAlertConditionWarningPtrOutputWithContext(ctx context.Context) InfraAlertConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionWarningPtrOutput)
}

type InfraAlertConditionWarningOutput struct{ *pulumi.OutputState }

func (InfraAlertConditionWarningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfraAlertConditionWarning)(nil)).Elem()
}

func (o InfraAlertConditionWarningOutput) ToInfraAlertConditionWarningOutput() InfraAlertConditionWarningOutput {
	return o
}

func (o InfraAlertConditionWarningOutput) ToInfraAlertConditionWarningOutputWithContext(ctx context.Context) InfraAlertConditionWarningOutput {
	return o
}

func (o InfraAlertConditionWarningOutput) ToInfraAlertConditionWarningPtrOutput() InfraAlertConditionWarningPtrOutput {
	return o.ToInfraAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (o InfraAlertConditionWarningOutput) ToInfraAlertConditionWarningPtrOutputWithContext(ctx context.Context) InfraAlertConditionWarningPtrOutput {
	return o.ApplyT(func(v InfraAlertConditionWarning) *InfraAlertConditionWarning {
		return &v
	}).(InfraAlertConditionWarningPtrOutput)
}
func (o InfraAlertConditionWarningOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v InfraAlertConditionWarning) int { return v.Duration }).(pulumi.IntOutput)
}

func (o InfraAlertConditionWarningOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfraAlertConditionWarning) *string { return v.TimeFunction }).(pulumi.StringPtrOutput)
}

func (o InfraAlertConditionWarningOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v InfraAlertConditionWarning) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type InfraAlertConditionWarningPtrOutput struct{ *pulumi.OutputState }

func (InfraAlertConditionWarningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraAlertConditionWarning)(nil)).Elem()
}

func (o InfraAlertConditionWarningPtrOutput) ToInfraAlertConditionWarningPtrOutput() InfraAlertConditionWarningPtrOutput {
	return o
}

func (o InfraAlertConditionWarningPtrOutput) ToInfraAlertConditionWarningPtrOutputWithContext(ctx context.Context) InfraAlertConditionWarningPtrOutput {
	return o
}

func (o InfraAlertConditionWarningPtrOutput) Elem() InfraAlertConditionWarningOutput {
	return o.ApplyT(func(v *InfraAlertConditionWarning) InfraAlertConditionWarning { return *v }).(InfraAlertConditionWarningOutput)
}

func (o InfraAlertConditionWarningPtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionWarning) *int {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.IntPtrOutput)
}

func (o InfraAlertConditionWarningPtrOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionWarning) *string {
		if v == nil {
			return nil
		}
		return v.TimeFunction
	}).(pulumi.StringPtrOutput)
}

func (o InfraAlertConditionWarningPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionWarning) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

type NrqlAlertConditionCritical struct {
	// Deprecated: use `threshold_duration` attribute instead
	Duration             *int    `pulumi:"duration"`
	Operator             *string `pulumi:"operator"`
	Threshold            float64 `pulumi:"threshold"`
	ThresholdDuration    *int    `pulumi:"thresholdDuration"`
	ThresholdOccurrences *string `pulumi:"thresholdOccurrences"`
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction *string `pulumi:"timeFunction"`
}

// NrqlAlertConditionCriticalInput is an input type that accepts NrqlAlertConditionCriticalArgs and NrqlAlertConditionCriticalOutput values.
// You can construct a concrete instance of `NrqlAlertConditionCriticalInput` via:
//
// 		 NrqlAlertConditionCriticalArgs{...}
//
type NrqlAlertConditionCriticalInput interface {
	pulumi.Input

	ToNrqlAlertConditionCriticalOutput() NrqlAlertConditionCriticalOutput
	ToNrqlAlertConditionCriticalOutputWithContext(context.Context) NrqlAlertConditionCriticalOutput
}

type NrqlAlertConditionCriticalArgs struct {
	// Deprecated: use `threshold_duration` attribute instead
	Duration             pulumi.IntPtrInput    `pulumi:"duration"`
	Operator             pulumi.StringPtrInput `pulumi:"operator"`
	Threshold            pulumi.Float64Input   `pulumi:"threshold"`
	ThresholdDuration    pulumi.IntPtrInput    `pulumi:"thresholdDuration"`
	ThresholdOccurrences pulumi.StringPtrInput `pulumi:"thresholdOccurrences"`
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction pulumi.StringPtrInput `pulumi:"timeFunction"`
}

func (NrqlAlertConditionCriticalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionCritical)(nil)).Elem()
}

func (i NrqlAlertConditionCriticalArgs) ToNrqlAlertConditionCriticalOutput() NrqlAlertConditionCriticalOutput {
	return i.ToNrqlAlertConditionCriticalOutputWithContext(context.Background())
}

func (i NrqlAlertConditionCriticalArgs) ToNrqlAlertConditionCriticalOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionCriticalOutput)
}

func (i NrqlAlertConditionCriticalArgs) ToNrqlAlertConditionCriticalPtrOutput() NrqlAlertConditionCriticalPtrOutput {
	return i.ToNrqlAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (i NrqlAlertConditionCriticalArgs) ToNrqlAlertConditionCriticalPtrOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionCriticalOutput).ToNrqlAlertConditionCriticalPtrOutputWithContext(ctx)
}

// NrqlAlertConditionCriticalPtrInput is an input type that accepts NrqlAlertConditionCriticalArgs, NrqlAlertConditionCriticalPtr and NrqlAlertConditionCriticalPtrOutput values.
// You can construct a concrete instance of `NrqlAlertConditionCriticalPtrInput` via:
//
// 		 NrqlAlertConditionCriticalArgs{...}
//
//  or:
//
// 		 nil
//
type NrqlAlertConditionCriticalPtrInput interface {
	pulumi.Input

	ToNrqlAlertConditionCriticalPtrOutput() NrqlAlertConditionCriticalPtrOutput
	ToNrqlAlertConditionCriticalPtrOutputWithContext(context.Context) NrqlAlertConditionCriticalPtrOutput
}

type nrqlAlertConditionCriticalPtrType NrqlAlertConditionCriticalArgs

func NrqlAlertConditionCriticalPtr(v *NrqlAlertConditionCriticalArgs) NrqlAlertConditionCriticalPtrInput {
	return (*nrqlAlertConditionCriticalPtrType)(v)
}

func (*nrqlAlertConditionCriticalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionCritical)(nil)).Elem()
}

func (i *nrqlAlertConditionCriticalPtrType) ToNrqlAlertConditionCriticalPtrOutput() NrqlAlertConditionCriticalPtrOutput {
	return i.ToNrqlAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (i *nrqlAlertConditionCriticalPtrType) ToNrqlAlertConditionCriticalPtrOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionCriticalPtrOutput)
}

type NrqlAlertConditionCriticalOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionCriticalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionCritical)(nil)).Elem()
}

func (o NrqlAlertConditionCriticalOutput) ToNrqlAlertConditionCriticalOutput() NrqlAlertConditionCriticalOutput {
	return o
}

func (o NrqlAlertConditionCriticalOutput) ToNrqlAlertConditionCriticalOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalOutput {
	return o
}

func (o NrqlAlertConditionCriticalOutput) ToNrqlAlertConditionCriticalPtrOutput() NrqlAlertConditionCriticalPtrOutput {
	return o.ToNrqlAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (o NrqlAlertConditionCriticalOutput) ToNrqlAlertConditionCriticalPtrOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *NrqlAlertConditionCritical {
		return &v
	}).(NrqlAlertConditionCriticalPtrOutput)
}

// Deprecated: use `threshold_duration` attribute instead
func (o NrqlAlertConditionCriticalOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

func (o NrqlAlertConditionCriticalOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

func (o NrqlAlertConditionCriticalOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v NrqlAlertConditionCritical) float64 { return v.Threshold }).(pulumi.Float64Output)
}

func (o NrqlAlertConditionCriticalOutput) ThresholdDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *int { return v.ThresholdDuration }).(pulumi.IntPtrOutput)
}

func (o NrqlAlertConditionCriticalOutput) ThresholdOccurrences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *string { return v.ThresholdOccurrences }).(pulumi.StringPtrOutput)
}

// Deprecated: use `threshold_occurrences` attribute instead
func (o NrqlAlertConditionCriticalOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *string { return v.TimeFunction }).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionCriticalPtrOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionCriticalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionCritical)(nil)).Elem()
}

func (o NrqlAlertConditionCriticalPtrOutput) ToNrqlAlertConditionCriticalPtrOutput() NrqlAlertConditionCriticalPtrOutput {
	return o
}

func (o NrqlAlertConditionCriticalPtrOutput) ToNrqlAlertConditionCriticalPtrOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalPtrOutput {
	return o
}

func (o NrqlAlertConditionCriticalPtrOutput) Elem() NrqlAlertConditionCriticalOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) NrqlAlertConditionCritical { return *v }).(NrqlAlertConditionCriticalOutput)
}

// Deprecated: use `threshold_duration` attribute instead
func (o NrqlAlertConditionCriticalPtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *int {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.IntPtrOutput)
}

func (o NrqlAlertConditionCriticalPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

func (o NrqlAlertConditionCriticalPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *float64 {
		if v == nil {
			return nil
		}
		return &v.Threshold
	}).(pulumi.Float64PtrOutput)
}

func (o NrqlAlertConditionCriticalPtrOutput) ThresholdDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *int {
		if v == nil {
			return nil
		}
		return v.ThresholdDuration
	}).(pulumi.IntPtrOutput)
}

func (o NrqlAlertConditionCriticalPtrOutput) ThresholdOccurrences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdOccurrences
	}).(pulumi.StringPtrOutput)
}

// Deprecated: use `threshold_occurrences` attribute instead
func (o NrqlAlertConditionCriticalPtrOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *string {
		if v == nil {
			return nil
		}
		return v.TimeFunction
	}).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionNrql struct {
	EvaluationOffset *int   `pulumi:"evaluationOffset"`
	Query            string `pulumi:"query"`
	// Deprecated: use `evaluation_offset` attribute instead
	SinceValue *string `pulumi:"sinceValue"`
}

// NrqlAlertConditionNrqlInput is an input type that accepts NrqlAlertConditionNrqlArgs and NrqlAlertConditionNrqlOutput values.
// You can construct a concrete instance of `NrqlAlertConditionNrqlInput` via:
//
// 		 NrqlAlertConditionNrqlArgs{...}
//
type NrqlAlertConditionNrqlInput interface {
	pulumi.Input

	ToNrqlAlertConditionNrqlOutput() NrqlAlertConditionNrqlOutput
	ToNrqlAlertConditionNrqlOutputWithContext(context.Context) NrqlAlertConditionNrqlOutput
}

type NrqlAlertConditionNrqlArgs struct {
	EvaluationOffset pulumi.IntPtrInput `pulumi:"evaluationOffset"`
	Query            pulumi.StringInput `pulumi:"query"`
	// Deprecated: use `evaluation_offset` attribute instead
	SinceValue pulumi.StringPtrInput `pulumi:"sinceValue"`
}

func (NrqlAlertConditionNrqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionNrql)(nil)).Elem()
}

func (i NrqlAlertConditionNrqlArgs) ToNrqlAlertConditionNrqlOutput() NrqlAlertConditionNrqlOutput {
	return i.ToNrqlAlertConditionNrqlOutputWithContext(context.Background())
}

func (i NrqlAlertConditionNrqlArgs) ToNrqlAlertConditionNrqlOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionNrqlOutput)
}

func (i NrqlAlertConditionNrqlArgs) ToNrqlAlertConditionNrqlPtrOutput() NrqlAlertConditionNrqlPtrOutput {
	return i.ToNrqlAlertConditionNrqlPtrOutputWithContext(context.Background())
}

func (i NrqlAlertConditionNrqlArgs) ToNrqlAlertConditionNrqlPtrOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionNrqlOutput).ToNrqlAlertConditionNrqlPtrOutputWithContext(ctx)
}

// NrqlAlertConditionNrqlPtrInput is an input type that accepts NrqlAlertConditionNrqlArgs, NrqlAlertConditionNrqlPtr and NrqlAlertConditionNrqlPtrOutput values.
// You can construct a concrete instance of `NrqlAlertConditionNrqlPtrInput` via:
//
// 		 NrqlAlertConditionNrqlArgs{...}
//
//  or:
//
// 		 nil
//
type NrqlAlertConditionNrqlPtrInput interface {
	pulumi.Input

	ToNrqlAlertConditionNrqlPtrOutput() NrqlAlertConditionNrqlPtrOutput
	ToNrqlAlertConditionNrqlPtrOutputWithContext(context.Context) NrqlAlertConditionNrqlPtrOutput
}

type nrqlAlertConditionNrqlPtrType NrqlAlertConditionNrqlArgs

func NrqlAlertConditionNrqlPtr(v *NrqlAlertConditionNrqlArgs) NrqlAlertConditionNrqlPtrInput {
	return (*nrqlAlertConditionNrqlPtrType)(v)
}

func (*nrqlAlertConditionNrqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionNrql)(nil)).Elem()
}

func (i *nrqlAlertConditionNrqlPtrType) ToNrqlAlertConditionNrqlPtrOutput() NrqlAlertConditionNrqlPtrOutput {
	return i.ToNrqlAlertConditionNrqlPtrOutputWithContext(context.Background())
}

func (i *nrqlAlertConditionNrqlPtrType) ToNrqlAlertConditionNrqlPtrOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionNrqlPtrOutput)
}

type NrqlAlertConditionNrqlOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionNrqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionNrql)(nil)).Elem()
}

func (o NrqlAlertConditionNrqlOutput) ToNrqlAlertConditionNrqlOutput() NrqlAlertConditionNrqlOutput {
	return o
}

func (o NrqlAlertConditionNrqlOutput) ToNrqlAlertConditionNrqlOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlOutput {
	return o
}

func (o NrqlAlertConditionNrqlOutput) ToNrqlAlertConditionNrqlPtrOutput() NrqlAlertConditionNrqlPtrOutput {
	return o.ToNrqlAlertConditionNrqlPtrOutputWithContext(context.Background())
}

func (o NrqlAlertConditionNrqlOutput) ToNrqlAlertConditionNrqlPtrOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionNrql) *NrqlAlertConditionNrql {
		return &v
	}).(NrqlAlertConditionNrqlPtrOutput)
}
func (o NrqlAlertConditionNrqlOutput) EvaluationOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionNrql) *int { return v.EvaluationOffset }).(pulumi.IntPtrOutput)
}

func (o NrqlAlertConditionNrqlOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v NrqlAlertConditionNrql) string { return v.Query }).(pulumi.StringOutput)
}

// Deprecated: use `evaluation_offset` attribute instead
func (o NrqlAlertConditionNrqlOutput) SinceValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionNrql) *string { return v.SinceValue }).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionNrqlPtrOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionNrqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionNrql)(nil)).Elem()
}

func (o NrqlAlertConditionNrqlPtrOutput) ToNrqlAlertConditionNrqlPtrOutput() NrqlAlertConditionNrqlPtrOutput {
	return o
}

func (o NrqlAlertConditionNrqlPtrOutput) ToNrqlAlertConditionNrqlPtrOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlPtrOutput {
	return o
}

func (o NrqlAlertConditionNrqlPtrOutput) Elem() NrqlAlertConditionNrqlOutput {
	return o.ApplyT(func(v *NrqlAlertConditionNrql) NrqlAlertConditionNrql { return *v }).(NrqlAlertConditionNrqlOutput)
}

func (o NrqlAlertConditionNrqlPtrOutput) EvaluationOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionNrql) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationOffset
	}).(pulumi.IntPtrOutput)
}

func (o NrqlAlertConditionNrqlPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionNrql) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

// Deprecated: use `evaluation_offset` attribute instead
func (o NrqlAlertConditionNrqlPtrOutput) SinceValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionNrql) *string {
		if v == nil {
			return nil
		}
		return v.SinceValue
	}).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionTerm struct {
	// Deprecated: use `threshold_duration` attribute instead
	Duration             *int    `pulumi:"duration"`
	Operator             *string `pulumi:"operator"`
	Priority             *string `pulumi:"priority"`
	Threshold            float64 `pulumi:"threshold"`
	ThresholdDuration    *int    `pulumi:"thresholdDuration"`
	ThresholdOccurrences *string `pulumi:"thresholdOccurrences"`
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction *string `pulumi:"timeFunction"`
}

// NrqlAlertConditionTermInput is an input type that accepts NrqlAlertConditionTermArgs and NrqlAlertConditionTermOutput values.
// You can construct a concrete instance of `NrqlAlertConditionTermInput` via:
//
// 		 NrqlAlertConditionTermArgs{...}
//
type NrqlAlertConditionTermInput interface {
	pulumi.Input

	ToNrqlAlertConditionTermOutput() NrqlAlertConditionTermOutput
	ToNrqlAlertConditionTermOutputWithContext(context.Context) NrqlAlertConditionTermOutput
}

type NrqlAlertConditionTermArgs struct {
	// Deprecated: use `threshold_duration` attribute instead
	Duration             pulumi.IntPtrInput    `pulumi:"duration"`
	Operator             pulumi.StringPtrInput `pulumi:"operator"`
	Priority             pulumi.StringPtrInput `pulumi:"priority"`
	Threshold            pulumi.Float64Input   `pulumi:"threshold"`
	ThresholdDuration    pulumi.IntPtrInput    `pulumi:"thresholdDuration"`
	ThresholdOccurrences pulumi.StringPtrInput `pulumi:"thresholdOccurrences"`
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction pulumi.StringPtrInput `pulumi:"timeFunction"`
}

func (NrqlAlertConditionTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionTerm)(nil)).Elem()
}

func (i NrqlAlertConditionTermArgs) ToNrqlAlertConditionTermOutput() NrqlAlertConditionTermOutput {
	return i.ToNrqlAlertConditionTermOutputWithContext(context.Background())
}

func (i NrqlAlertConditionTermArgs) ToNrqlAlertConditionTermOutputWithContext(ctx context.Context) NrqlAlertConditionTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionTermOutput)
}

// NrqlAlertConditionTermArrayInput is an input type that accepts NrqlAlertConditionTermArray and NrqlAlertConditionTermArrayOutput values.
// You can construct a concrete instance of `NrqlAlertConditionTermArrayInput` via:
//
// 		 NrqlAlertConditionTermArray{ NrqlAlertConditionTermArgs{...} }
//
type NrqlAlertConditionTermArrayInput interface {
	pulumi.Input

	ToNrqlAlertConditionTermArrayOutput() NrqlAlertConditionTermArrayOutput
	ToNrqlAlertConditionTermArrayOutputWithContext(context.Context) NrqlAlertConditionTermArrayOutput
}

type NrqlAlertConditionTermArray []NrqlAlertConditionTermInput

func (NrqlAlertConditionTermArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NrqlAlertConditionTerm)(nil)).Elem()
}

func (i NrqlAlertConditionTermArray) ToNrqlAlertConditionTermArrayOutput() NrqlAlertConditionTermArrayOutput {
	return i.ToNrqlAlertConditionTermArrayOutputWithContext(context.Background())
}

func (i NrqlAlertConditionTermArray) ToNrqlAlertConditionTermArrayOutputWithContext(ctx context.Context) NrqlAlertConditionTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionTermArrayOutput)
}

type NrqlAlertConditionTermOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionTerm)(nil)).Elem()
}

func (o NrqlAlertConditionTermOutput) ToNrqlAlertConditionTermOutput() NrqlAlertConditionTermOutput {
	return o
}

func (o NrqlAlertConditionTermOutput) ToNrqlAlertConditionTermOutputWithContext(ctx context.Context) NrqlAlertConditionTermOutput {
	return o
}

// Deprecated: use `threshold_duration` attribute instead
func (o NrqlAlertConditionTermOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

func (o NrqlAlertConditionTermOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

func (o NrqlAlertConditionTermOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

func (o NrqlAlertConditionTermOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v NrqlAlertConditionTerm) float64 { return v.Threshold }).(pulumi.Float64Output)
}

func (o NrqlAlertConditionTermOutput) ThresholdDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *int { return v.ThresholdDuration }).(pulumi.IntPtrOutput)
}

func (o NrqlAlertConditionTermOutput) ThresholdOccurrences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *string { return v.ThresholdOccurrences }).(pulumi.StringPtrOutput)
}

// Deprecated: use `threshold_occurrences` attribute instead
func (o NrqlAlertConditionTermOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *string { return v.TimeFunction }).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionTermArrayOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionTermArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NrqlAlertConditionTerm)(nil)).Elem()
}

func (o NrqlAlertConditionTermArrayOutput) ToNrqlAlertConditionTermArrayOutput() NrqlAlertConditionTermArrayOutput {
	return o
}

func (o NrqlAlertConditionTermArrayOutput) ToNrqlAlertConditionTermArrayOutputWithContext(ctx context.Context) NrqlAlertConditionTermArrayOutput {
	return o
}

func (o NrqlAlertConditionTermArrayOutput) Index(i pulumi.IntInput) NrqlAlertConditionTermOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NrqlAlertConditionTerm {
		return vs[0].([]NrqlAlertConditionTerm)[vs[1].(int)]
	}).(NrqlAlertConditionTermOutput)
}

type NrqlAlertConditionWarning struct {
	// Deprecated: use `threshold_duration` attribute instead
	Duration             *int    `pulumi:"duration"`
	Operator             *string `pulumi:"operator"`
	Threshold            float64 `pulumi:"threshold"`
	ThresholdDuration    *int    `pulumi:"thresholdDuration"`
	ThresholdOccurrences *string `pulumi:"thresholdOccurrences"`
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction *string `pulumi:"timeFunction"`
}

// NrqlAlertConditionWarningInput is an input type that accepts NrqlAlertConditionWarningArgs and NrqlAlertConditionWarningOutput values.
// You can construct a concrete instance of `NrqlAlertConditionWarningInput` via:
//
// 		 NrqlAlertConditionWarningArgs{...}
//
type NrqlAlertConditionWarningInput interface {
	pulumi.Input

	ToNrqlAlertConditionWarningOutput() NrqlAlertConditionWarningOutput
	ToNrqlAlertConditionWarningOutputWithContext(context.Context) NrqlAlertConditionWarningOutput
}

type NrqlAlertConditionWarningArgs struct {
	// Deprecated: use `threshold_duration` attribute instead
	Duration             pulumi.IntPtrInput    `pulumi:"duration"`
	Operator             pulumi.StringPtrInput `pulumi:"operator"`
	Threshold            pulumi.Float64Input   `pulumi:"threshold"`
	ThresholdDuration    pulumi.IntPtrInput    `pulumi:"thresholdDuration"`
	ThresholdOccurrences pulumi.StringPtrInput `pulumi:"thresholdOccurrences"`
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction pulumi.StringPtrInput `pulumi:"timeFunction"`
}

func (NrqlAlertConditionWarningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionWarning)(nil)).Elem()
}

func (i NrqlAlertConditionWarningArgs) ToNrqlAlertConditionWarningOutput() NrqlAlertConditionWarningOutput {
	return i.ToNrqlAlertConditionWarningOutputWithContext(context.Background())
}

func (i NrqlAlertConditionWarningArgs) ToNrqlAlertConditionWarningOutputWithContext(ctx context.Context) NrqlAlertConditionWarningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionWarningOutput)
}

func (i NrqlAlertConditionWarningArgs) ToNrqlAlertConditionWarningPtrOutput() NrqlAlertConditionWarningPtrOutput {
	return i.ToNrqlAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (i NrqlAlertConditionWarningArgs) ToNrqlAlertConditionWarningPtrOutputWithContext(ctx context.Context) NrqlAlertConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionWarningOutput).ToNrqlAlertConditionWarningPtrOutputWithContext(ctx)
}

// NrqlAlertConditionWarningPtrInput is an input type that accepts NrqlAlertConditionWarningArgs, NrqlAlertConditionWarningPtr and NrqlAlertConditionWarningPtrOutput values.
// You can construct a concrete instance of `NrqlAlertConditionWarningPtrInput` via:
//
// 		 NrqlAlertConditionWarningArgs{...}
//
//  or:
//
// 		 nil
//
type NrqlAlertConditionWarningPtrInput interface {
	pulumi.Input

	ToNrqlAlertConditionWarningPtrOutput() NrqlAlertConditionWarningPtrOutput
	ToNrqlAlertConditionWarningPtrOutputWithContext(context.Context) NrqlAlertConditionWarningPtrOutput
}

type nrqlAlertConditionWarningPtrType NrqlAlertConditionWarningArgs

func NrqlAlertConditionWarningPtr(v *NrqlAlertConditionWarningArgs) NrqlAlertConditionWarningPtrInput {
	return (*nrqlAlertConditionWarningPtrType)(v)
}

func (*nrqlAlertConditionWarningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionWarning)(nil)).Elem()
}

func (i *nrqlAlertConditionWarningPtrType) ToNrqlAlertConditionWarningPtrOutput() NrqlAlertConditionWarningPtrOutput {
	return i.ToNrqlAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (i *nrqlAlertConditionWarningPtrType) ToNrqlAlertConditionWarningPtrOutputWithContext(ctx context.Context) NrqlAlertConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionWarningPtrOutput)
}

type NrqlAlertConditionWarningOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionWarningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionWarning)(nil)).Elem()
}

func (o NrqlAlertConditionWarningOutput) ToNrqlAlertConditionWarningOutput() NrqlAlertConditionWarningOutput {
	return o
}

func (o NrqlAlertConditionWarningOutput) ToNrqlAlertConditionWarningOutputWithContext(ctx context.Context) NrqlAlertConditionWarningOutput {
	return o
}

func (o NrqlAlertConditionWarningOutput) ToNrqlAlertConditionWarningPtrOutput() NrqlAlertConditionWarningPtrOutput {
	return o.ToNrqlAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (o NrqlAlertConditionWarningOutput) ToNrqlAlertConditionWarningPtrOutputWithContext(ctx context.Context) NrqlAlertConditionWarningPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *NrqlAlertConditionWarning {
		return &v
	}).(NrqlAlertConditionWarningPtrOutput)
}

// Deprecated: use `threshold_duration` attribute instead
func (o NrqlAlertConditionWarningOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

func (o NrqlAlertConditionWarningOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

func (o NrqlAlertConditionWarningOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v NrqlAlertConditionWarning) float64 { return v.Threshold }).(pulumi.Float64Output)
}

func (o NrqlAlertConditionWarningOutput) ThresholdDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *int { return v.ThresholdDuration }).(pulumi.IntPtrOutput)
}

func (o NrqlAlertConditionWarningOutput) ThresholdOccurrences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *string { return v.ThresholdOccurrences }).(pulumi.StringPtrOutput)
}

// Deprecated: use `threshold_occurrences` attribute instead
func (o NrqlAlertConditionWarningOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *string { return v.TimeFunction }).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionWarningPtrOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionWarningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionWarning)(nil)).Elem()
}

func (o NrqlAlertConditionWarningPtrOutput) ToNrqlAlertConditionWarningPtrOutput() NrqlAlertConditionWarningPtrOutput {
	return o
}

func (o NrqlAlertConditionWarningPtrOutput) ToNrqlAlertConditionWarningPtrOutputWithContext(ctx context.Context) NrqlAlertConditionWarningPtrOutput {
	return o
}

func (o NrqlAlertConditionWarningPtrOutput) Elem() NrqlAlertConditionWarningOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) NrqlAlertConditionWarning { return *v }).(NrqlAlertConditionWarningOutput)
}

// Deprecated: use `threshold_duration` attribute instead
func (o NrqlAlertConditionWarningPtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *int {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.IntPtrOutput)
}

func (o NrqlAlertConditionWarningPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

func (o NrqlAlertConditionWarningPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *float64 {
		if v == nil {
			return nil
		}
		return &v.Threshold
	}).(pulumi.Float64PtrOutput)
}

func (o NrqlAlertConditionWarningPtrOutput) ThresholdDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *int {
		if v == nil {
			return nil
		}
		return v.ThresholdDuration
	}).(pulumi.IntPtrOutput)
}

func (o NrqlAlertConditionWarningPtrOutput) ThresholdOccurrences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdOccurrences
	}).(pulumi.StringPtrOutput)
}

// Deprecated: use `threshold_occurrences` attribute instead
func (o NrqlAlertConditionWarningPtrOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *string {
		if v == nil {
			return nil
		}
		return v.TimeFunction
	}).(pulumi.StringPtrOutput)
}

type GetAlertChannelConfig struct {
	ApiKey                *string           `pulumi:"apiKey"`
	AuthPassword          *string           `pulumi:"authPassword"`
	AuthType              *string           `pulumi:"authType"`
	AuthUsername          *string           `pulumi:"authUsername"`
	BaseUrl               *string           `pulumi:"baseUrl"`
	Channel               *string           `pulumi:"channel"`
	Headers               map[string]string `pulumi:"headers"`
	IncludeJsonAttachment *string           `pulumi:"includeJsonAttachment"`
	Key                   *string           `pulumi:"key"`
	Payload               map[string]string `pulumi:"payload"`
	PayloadType           *string           `pulumi:"payloadType"`
	Recipients            *string           `pulumi:"recipients"`
	Region                *string           `pulumi:"region"`
	RouteKey              *string           `pulumi:"routeKey"`
	ServiceKey            *string           `pulumi:"serviceKey"`
	Tags                  *string           `pulumi:"tags"`
	Teams                 *string           `pulumi:"teams"`
	Url                   *string           `pulumi:"url"`
	UserId                *string           `pulumi:"userId"`
}

// GetAlertChannelConfigInput is an input type that accepts GetAlertChannelConfigArgs and GetAlertChannelConfigOutput values.
// You can construct a concrete instance of `GetAlertChannelConfigInput` via:
//
// 		 GetAlertChannelConfigArgs{...}
//
type GetAlertChannelConfigInput interface {
	pulumi.Input

	ToGetAlertChannelConfigOutput() GetAlertChannelConfigOutput
	ToGetAlertChannelConfigOutputWithContext(context.Context) GetAlertChannelConfigOutput
}

type GetAlertChannelConfigArgs struct {
	ApiKey                pulumi.StringPtrInput `pulumi:"apiKey"`
	AuthPassword          pulumi.StringPtrInput `pulumi:"authPassword"`
	AuthType              pulumi.StringPtrInput `pulumi:"authType"`
	AuthUsername          pulumi.StringPtrInput `pulumi:"authUsername"`
	BaseUrl               pulumi.StringPtrInput `pulumi:"baseUrl"`
	Channel               pulumi.StringPtrInput `pulumi:"channel"`
	Headers               pulumi.StringMapInput `pulumi:"headers"`
	IncludeJsonAttachment pulumi.StringPtrInput `pulumi:"includeJsonAttachment"`
	Key                   pulumi.StringPtrInput `pulumi:"key"`
	Payload               pulumi.StringMapInput `pulumi:"payload"`
	PayloadType           pulumi.StringPtrInput `pulumi:"payloadType"`
	Recipients            pulumi.StringPtrInput `pulumi:"recipients"`
	Region                pulumi.StringPtrInput `pulumi:"region"`
	RouteKey              pulumi.StringPtrInput `pulumi:"routeKey"`
	ServiceKey            pulumi.StringPtrInput `pulumi:"serviceKey"`
	Tags                  pulumi.StringPtrInput `pulumi:"tags"`
	Teams                 pulumi.StringPtrInput `pulumi:"teams"`
	Url                   pulumi.StringPtrInput `pulumi:"url"`
	UserId                pulumi.StringPtrInput `pulumi:"userId"`
}

func (GetAlertChannelConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlertChannelConfig)(nil)).Elem()
}

func (i GetAlertChannelConfigArgs) ToGetAlertChannelConfigOutput() GetAlertChannelConfigOutput {
	return i.ToGetAlertChannelConfigOutputWithContext(context.Background())
}

func (i GetAlertChannelConfigArgs) ToGetAlertChannelConfigOutputWithContext(ctx context.Context) GetAlertChannelConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAlertChannelConfigOutput)
}

type GetAlertChannelConfigOutput struct{ *pulumi.OutputState }

func (GetAlertChannelConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlertChannelConfig)(nil)).Elem()
}

func (o GetAlertChannelConfigOutput) ToGetAlertChannelConfigOutput() GetAlertChannelConfigOutput {
	return o
}

func (o GetAlertChannelConfigOutput) ToGetAlertChannelConfigOutputWithContext(ctx context.Context) GetAlertChannelConfigOutput {
	return o
}

func (o GetAlertChannelConfigOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) AuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.AuthPassword }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) AuthUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.AuthUsername }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

func (o GetAlertChannelConfigOutput) IncludeJsonAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.IncludeJsonAttachment }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Payload() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) map[string]string { return v.Payload }).(pulumi.StringMapOutput)
}

func (o GetAlertChannelConfigOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.PayloadType }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Recipients() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Recipients }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) RouteKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.RouteKey }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) ServiceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.ServiceKey }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Tags }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Teams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Teams }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type GetEntityTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetEntityTagInput is an input type that accepts GetEntityTagArgs and GetEntityTagOutput values.
// You can construct a concrete instance of `GetEntityTagInput` via:
//
// 		 GetEntityTagArgs{...}
//
type GetEntityTagInput interface {
	pulumi.Input

	ToGetEntityTagOutput() GetEntityTagOutput
	ToGetEntityTagOutputWithContext(context.Context) GetEntityTagOutput
}

type GetEntityTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetEntityTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEntityTag)(nil)).Elem()
}

func (i GetEntityTagArgs) ToGetEntityTagOutput() GetEntityTagOutput {
	return i.ToGetEntityTagOutputWithContext(context.Background())
}

func (i GetEntityTagArgs) ToGetEntityTagOutputWithContext(ctx context.Context) GetEntityTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEntityTagOutput)
}

type GetEntityTagOutput struct{ *pulumi.OutputState }

func (GetEntityTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEntityTag)(nil)).Elem()
}

func (o GetEntityTagOutput) ToGetEntityTagOutput() GetEntityTagOutput {
	return o
}

func (o GetEntityTagOutput) ToGetEntityTagOutputWithContext(ctx context.Context) GetEntityTagOutput {
	return o
}

func (o GetEntityTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetEntityTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetEntityTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetEntityTag) string { return v.Value }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AlertChannelConfigOutput{})
	pulumi.RegisterOutputType(AlertChannelConfigPtrOutput{})
	pulumi.RegisterOutputType(AlertConditionTermOutput{})
	pulumi.RegisterOutputType(AlertConditionTermArrayOutput{})
	pulumi.RegisterOutputType(DashboardFilterOutput{})
	pulumi.RegisterOutputType(DashboardFilterPtrOutput{})
	pulumi.RegisterOutputType(DashboardWidgetOutput{})
	pulumi.RegisterOutputType(DashboardWidgetArrayOutput{})
	pulumi.RegisterOutputType(DashboardWidgetCompareWithOutput{})
	pulumi.RegisterOutputType(DashboardWidgetCompareWithArrayOutput{})
	pulumi.RegisterOutputType(DashboardWidgetCompareWithPresentationOutput{})
	pulumi.RegisterOutputType(DashboardWidgetMetricOutput{})
	pulumi.RegisterOutputType(DashboardWidgetMetricArrayOutput{})
	pulumi.RegisterOutputType(EntityTagsTagOutput{})
	pulumi.RegisterOutputType(EntityTagsTagArrayOutput{})
	pulumi.RegisterOutputType(InfraAlertConditionCriticalOutput{})
	pulumi.RegisterOutputType(InfraAlertConditionCriticalPtrOutput{})
	pulumi.RegisterOutputType(InfraAlertConditionWarningOutput{})
	pulumi.RegisterOutputType(InfraAlertConditionWarningPtrOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionCriticalOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionCriticalPtrOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionNrqlOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionNrqlPtrOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionTermOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionTermArrayOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionWarningOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionWarningPtrOutput{})
	pulumi.RegisterOutputType(GetAlertChannelConfigOutput{})
	pulumi.RegisterOutputType(GetEntityTagOutput{})
}
