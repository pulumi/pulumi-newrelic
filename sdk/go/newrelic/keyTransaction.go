// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to create a new Key Transaction in New Relic.
//
// > **NOTE:** For more information on Key Transactions, head over to [this page](https://docs.newrelic.com/docs/apm/transactions/key-transactions/introduction-key-transactions/) in New Relic's docs.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := newrelic.NewKeyTransaction(ctx, "foo", &newrelic.KeyTransactionArgs{
//				ApplicationGuid:    pulumi.String("MzgfNjUyNnxBUE19QVBQTElDQVHJT068NTUfNDT4MjUy"),
//				ApdexIndex:         pulumi.Float64(0.5),
//				BrowserApdexTarget: pulumi.Float64(0.5),
//				MetricName:         pulumi.String("WebTransaction/Function/__main__:foo_bar"),
//				Name:               pulumi.String("Sample Key Transaction"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A Key Transaction in New Relic may be imported into Terraform using its GUID specified in the `<id>` field, in the following command.
//
// bash
//
// ```sh
// $ pulumi import newrelic:index/keyTransaction:KeyTransaction foo <id>
// ```
type KeyTransaction struct {
	pulumi.CustomResourceState

	// A decimal value, measuring user satisfaction with response times, ranging from 0 (frustrated) to 1 (satisfied).
	ApdexIndex pulumi.Float64Output `pulumi:"apdexIndex"`
	// The GUID of the APM Application comprising transactions, of which one would be made a key transaction.
	ApplicationGuid pulumi.StringOutput `pulumi:"applicationGuid"`
	// A decimal value representing the response time threshold for satisfactory experience (e.g., 0.5 seconds).
	//
	// > **NOTE:** It may be noted that the `metricName` and `applicationGuid` of a Key Transaction _cannot_ be updated in a key transaction that has already been created; since this is not supported. As a consequence, altering the values of `applicationGuid` and/or `metricName` of a `KeyTransaction` resource created (to try updating these values) would result in `pulumi preview` prompting a forced destruction and re-creation of the resource.
	BrowserApdexTarget pulumi.Float64Output `pulumi:"browserApdexTarget"`
	// The domain of the entity monitored by the key transaction.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The name of the underlying metric monitored by the key transaction to be created.
	MetricName pulumi.StringOutput `pulumi:"metricName"`
	// The name of the key transaction.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of the entity monitored by the key transaction.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewKeyTransaction registers a new resource with the given unique name, arguments, and options.
func NewKeyTransaction(ctx *pulumi.Context,
	name string, args *KeyTransactionArgs, opts ...pulumi.ResourceOption) (*KeyTransaction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApdexIndex == nil {
		return nil, errors.New("invalid value for required argument 'ApdexIndex'")
	}
	if args.ApplicationGuid == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationGuid'")
	}
	if args.BrowserApdexTarget == nil {
		return nil, errors.New("invalid value for required argument 'BrowserApdexTarget'")
	}
	if args.MetricName == nil {
		return nil, errors.New("invalid value for required argument 'MetricName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyTransaction
	err := ctx.RegisterResource("newrelic:index/keyTransaction:KeyTransaction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyTransaction gets an existing KeyTransaction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyTransaction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyTransactionState, opts ...pulumi.ResourceOption) (*KeyTransaction, error) {
	var resource KeyTransaction
	err := ctx.ReadResource("newrelic:index/keyTransaction:KeyTransaction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyTransaction resources.
type keyTransactionState struct {
	// A decimal value, measuring user satisfaction with response times, ranging from 0 (frustrated) to 1 (satisfied).
	ApdexIndex *float64 `pulumi:"apdexIndex"`
	// The GUID of the APM Application comprising transactions, of which one would be made a key transaction.
	ApplicationGuid *string `pulumi:"applicationGuid"`
	// A decimal value representing the response time threshold for satisfactory experience (e.g., 0.5 seconds).
	//
	// > **NOTE:** It may be noted that the `metricName` and `applicationGuid` of a Key Transaction _cannot_ be updated in a key transaction that has already been created; since this is not supported. As a consequence, altering the values of `applicationGuid` and/or `metricName` of a `KeyTransaction` resource created (to try updating these values) would result in `pulumi preview` prompting a forced destruction and re-creation of the resource.
	BrowserApdexTarget *float64 `pulumi:"browserApdexTarget"`
	// The domain of the entity monitored by the key transaction.
	Domain *string `pulumi:"domain"`
	// The name of the underlying metric monitored by the key transaction to be created.
	MetricName *string `pulumi:"metricName"`
	// The name of the key transaction.
	Name *string `pulumi:"name"`
	// The type of the entity monitored by the key transaction.
	Type *string `pulumi:"type"`
}

type KeyTransactionState struct {
	// A decimal value, measuring user satisfaction with response times, ranging from 0 (frustrated) to 1 (satisfied).
	ApdexIndex pulumi.Float64PtrInput
	// The GUID of the APM Application comprising transactions, of which one would be made a key transaction.
	ApplicationGuid pulumi.StringPtrInput
	// A decimal value representing the response time threshold for satisfactory experience (e.g., 0.5 seconds).
	//
	// > **NOTE:** It may be noted that the `metricName` and `applicationGuid` of a Key Transaction _cannot_ be updated in a key transaction that has already been created; since this is not supported. As a consequence, altering the values of `applicationGuid` and/or `metricName` of a `KeyTransaction` resource created (to try updating these values) would result in `pulumi preview` prompting a forced destruction and re-creation of the resource.
	BrowserApdexTarget pulumi.Float64PtrInput
	// The domain of the entity monitored by the key transaction.
	Domain pulumi.StringPtrInput
	// The name of the underlying metric monitored by the key transaction to be created.
	MetricName pulumi.StringPtrInput
	// The name of the key transaction.
	Name pulumi.StringPtrInput
	// The type of the entity monitored by the key transaction.
	Type pulumi.StringPtrInput
}

func (KeyTransactionState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyTransactionState)(nil)).Elem()
}

type keyTransactionArgs struct {
	// A decimal value, measuring user satisfaction with response times, ranging from 0 (frustrated) to 1 (satisfied).
	ApdexIndex float64 `pulumi:"apdexIndex"`
	// The GUID of the APM Application comprising transactions, of which one would be made a key transaction.
	ApplicationGuid string `pulumi:"applicationGuid"`
	// A decimal value representing the response time threshold for satisfactory experience (e.g., 0.5 seconds).
	//
	// > **NOTE:** It may be noted that the `metricName` and `applicationGuid` of a Key Transaction _cannot_ be updated in a key transaction that has already been created; since this is not supported. As a consequence, altering the values of `applicationGuid` and/or `metricName` of a `KeyTransaction` resource created (to try updating these values) would result in `pulumi preview` prompting a forced destruction and re-creation of the resource.
	BrowserApdexTarget float64 `pulumi:"browserApdexTarget"`
	// The name of the underlying metric monitored by the key transaction to be created.
	MetricName string `pulumi:"metricName"`
	// The name of the key transaction.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a KeyTransaction resource.
type KeyTransactionArgs struct {
	// A decimal value, measuring user satisfaction with response times, ranging from 0 (frustrated) to 1 (satisfied).
	ApdexIndex pulumi.Float64Input
	// The GUID of the APM Application comprising transactions, of which one would be made a key transaction.
	ApplicationGuid pulumi.StringInput
	// A decimal value representing the response time threshold for satisfactory experience (e.g., 0.5 seconds).
	//
	// > **NOTE:** It may be noted that the `metricName` and `applicationGuid` of a Key Transaction _cannot_ be updated in a key transaction that has already been created; since this is not supported. As a consequence, altering the values of `applicationGuid` and/or `metricName` of a `KeyTransaction` resource created (to try updating these values) would result in `pulumi preview` prompting a forced destruction and re-creation of the resource.
	BrowserApdexTarget pulumi.Float64Input
	// The name of the underlying metric monitored by the key transaction to be created.
	MetricName pulumi.StringInput
	// The name of the key transaction.
	Name pulumi.StringPtrInput
}

func (KeyTransactionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyTransactionArgs)(nil)).Elem()
}

type KeyTransactionInput interface {
	pulumi.Input

	ToKeyTransactionOutput() KeyTransactionOutput
	ToKeyTransactionOutputWithContext(ctx context.Context) KeyTransactionOutput
}

func (*KeyTransaction) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyTransaction)(nil)).Elem()
}

func (i *KeyTransaction) ToKeyTransactionOutput() KeyTransactionOutput {
	return i.ToKeyTransactionOutputWithContext(context.Background())
}

func (i *KeyTransaction) ToKeyTransactionOutputWithContext(ctx context.Context) KeyTransactionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyTransactionOutput)
}

// KeyTransactionArrayInput is an input type that accepts KeyTransactionArray and KeyTransactionArrayOutput values.
// You can construct a concrete instance of `KeyTransactionArrayInput` via:
//
//	KeyTransactionArray{ KeyTransactionArgs{...} }
type KeyTransactionArrayInput interface {
	pulumi.Input

	ToKeyTransactionArrayOutput() KeyTransactionArrayOutput
	ToKeyTransactionArrayOutputWithContext(context.Context) KeyTransactionArrayOutput
}

type KeyTransactionArray []KeyTransactionInput

func (KeyTransactionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyTransaction)(nil)).Elem()
}

func (i KeyTransactionArray) ToKeyTransactionArrayOutput() KeyTransactionArrayOutput {
	return i.ToKeyTransactionArrayOutputWithContext(context.Background())
}

func (i KeyTransactionArray) ToKeyTransactionArrayOutputWithContext(ctx context.Context) KeyTransactionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyTransactionArrayOutput)
}

// KeyTransactionMapInput is an input type that accepts KeyTransactionMap and KeyTransactionMapOutput values.
// You can construct a concrete instance of `KeyTransactionMapInput` via:
//
//	KeyTransactionMap{ "key": KeyTransactionArgs{...} }
type KeyTransactionMapInput interface {
	pulumi.Input

	ToKeyTransactionMapOutput() KeyTransactionMapOutput
	ToKeyTransactionMapOutputWithContext(context.Context) KeyTransactionMapOutput
}

type KeyTransactionMap map[string]KeyTransactionInput

func (KeyTransactionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyTransaction)(nil)).Elem()
}

func (i KeyTransactionMap) ToKeyTransactionMapOutput() KeyTransactionMapOutput {
	return i.ToKeyTransactionMapOutputWithContext(context.Background())
}

func (i KeyTransactionMap) ToKeyTransactionMapOutputWithContext(ctx context.Context) KeyTransactionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyTransactionMapOutput)
}

type KeyTransactionOutput struct{ *pulumi.OutputState }

func (KeyTransactionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyTransaction)(nil)).Elem()
}

func (o KeyTransactionOutput) ToKeyTransactionOutput() KeyTransactionOutput {
	return o
}

func (o KeyTransactionOutput) ToKeyTransactionOutputWithContext(ctx context.Context) KeyTransactionOutput {
	return o
}

// A decimal value, measuring user satisfaction with response times, ranging from 0 (frustrated) to 1 (satisfied).
func (o KeyTransactionOutput) ApdexIndex() pulumi.Float64Output {
	return o.ApplyT(func(v *KeyTransaction) pulumi.Float64Output { return v.ApdexIndex }).(pulumi.Float64Output)
}

// The GUID of the APM Application comprising transactions, of which one would be made a key transaction.
func (o KeyTransactionOutput) ApplicationGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyTransaction) pulumi.StringOutput { return v.ApplicationGuid }).(pulumi.StringOutput)
}

// A decimal value representing the response time threshold for satisfactory experience (e.g., 0.5 seconds).
//
// > **NOTE:** It may be noted that the `metricName` and `applicationGuid` of a Key Transaction _cannot_ be updated in a key transaction that has already been created; since this is not supported. As a consequence, altering the values of `applicationGuid` and/or `metricName` of a `KeyTransaction` resource created (to try updating these values) would result in `pulumi preview` prompting a forced destruction and re-creation of the resource.
func (o KeyTransactionOutput) BrowserApdexTarget() pulumi.Float64Output {
	return o.ApplyT(func(v *KeyTransaction) pulumi.Float64Output { return v.BrowserApdexTarget }).(pulumi.Float64Output)
}

// The domain of the entity monitored by the key transaction.
func (o KeyTransactionOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyTransaction) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The name of the underlying metric monitored by the key transaction to be created.
func (o KeyTransactionOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyTransaction) pulumi.StringOutput { return v.MetricName }).(pulumi.StringOutput)
}

// The name of the key transaction.
func (o KeyTransactionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyTransaction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of the entity monitored by the key transaction.
func (o KeyTransactionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyTransaction) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type KeyTransactionArrayOutput struct{ *pulumi.OutputState }

func (KeyTransactionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyTransaction)(nil)).Elem()
}

func (o KeyTransactionArrayOutput) ToKeyTransactionArrayOutput() KeyTransactionArrayOutput {
	return o
}

func (o KeyTransactionArrayOutput) ToKeyTransactionArrayOutputWithContext(ctx context.Context) KeyTransactionArrayOutput {
	return o
}

func (o KeyTransactionArrayOutput) Index(i pulumi.IntInput) KeyTransactionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeyTransaction {
		return vs[0].([]*KeyTransaction)[vs[1].(int)]
	}).(KeyTransactionOutput)
}

type KeyTransactionMapOutput struct{ *pulumi.OutputState }

func (KeyTransactionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyTransaction)(nil)).Elem()
}

func (o KeyTransactionMapOutput) ToKeyTransactionMapOutput() KeyTransactionMapOutput {
	return o
}

func (o KeyTransactionMapOutput) ToKeyTransactionMapOutputWithContext(ctx context.Context) KeyTransactionMapOutput {
	return o
}

func (o KeyTransactionMapOutput) MapIndex(k pulumi.StringInput) KeyTransactionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeyTransaction {
		return vs[0].(map[string]*KeyTransaction)[vs[1].(string)]
	}).(KeyTransactionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyTransactionInput)(nil)).Elem(), &KeyTransaction{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyTransactionArrayInput)(nil)).Elem(), KeyTransactionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyTransactionMapInput)(nil)).Elem(), KeyTransactionMap{})
	pulumi.RegisterOutputType(KeyTransactionOutput{})
	pulumi.RegisterOutputType(KeyTransactionArrayOutput{})
	pulumi.RegisterOutputType(KeyTransactionMapOutput{})
}
