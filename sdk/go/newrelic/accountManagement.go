// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to create and manage New Relic sub accounts.
//
// > **WARNING:** The `AccountManagement` resource will only create/update but won't delete a sub account. Please visit our documentation on  [`Account Management`](https://docs.newrelic.com/docs/apis/nerdgraph/examples/manage-accounts-nerdgraph/#delete) for more information .
//
// ## Example Usage
//
// ##### Create Account
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := newrelic.NewAccountManagement(ctx, "foo", &newrelic.AccountManagementArgs{
//				Name:   pulumi.String("Test Account Name"),
//				Region: pulumi.String("us01"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Accounts can be imported using the `id`, e.g.
//
// bash
//
// ```sh
// $ pulumi import newrelic:index/accountManagement:AccountManagement foo <id>
// ```
type AccountManagement struct {
	pulumi.CustomResourceState

	// Name of the account to be created
	Name pulumi.StringOutput `pulumi:"name"`
	// A description of what this parsing rule represents.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewAccountManagement registers a new resource with the given unique name, arguments, and options.
func NewAccountManagement(ctx *pulumi.Context,
	name string, args *AccountManagementArgs, opts ...pulumi.ResourceOption) (*AccountManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountManagement
	err := ctx.RegisterResource("newrelic:index/accountManagement:AccountManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountManagement gets an existing AccountManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountManagementState, opts ...pulumi.ResourceOption) (*AccountManagement, error) {
	var resource AccountManagement
	err := ctx.ReadResource("newrelic:index/accountManagement:AccountManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountManagement resources.
type accountManagementState struct {
	// Name of the account to be created
	Name *string `pulumi:"name"`
	// A description of what this parsing rule represents.
	Region *string `pulumi:"region"`
}

type AccountManagementState struct {
	// Name of the account to be created
	Name pulumi.StringPtrInput
	// A description of what this parsing rule represents.
	Region pulumi.StringPtrInput
}

func (AccountManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountManagementState)(nil)).Elem()
}

type accountManagementArgs struct {
	// Name of the account to be created
	Name *string `pulumi:"name"`
	// A description of what this parsing rule represents.
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a AccountManagement resource.
type AccountManagementArgs struct {
	// Name of the account to be created
	Name pulumi.StringPtrInput
	// A description of what this parsing rule represents.
	Region pulumi.StringInput
}

func (AccountManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountManagementArgs)(nil)).Elem()
}

type AccountManagementInput interface {
	pulumi.Input

	ToAccountManagementOutput() AccountManagementOutput
	ToAccountManagementOutputWithContext(ctx context.Context) AccountManagementOutput
}

func (*AccountManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountManagement)(nil)).Elem()
}

func (i *AccountManagement) ToAccountManagementOutput() AccountManagementOutput {
	return i.ToAccountManagementOutputWithContext(context.Background())
}

func (i *AccountManagement) ToAccountManagementOutputWithContext(ctx context.Context) AccountManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountManagementOutput)
}

// AccountManagementArrayInput is an input type that accepts AccountManagementArray and AccountManagementArrayOutput values.
// You can construct a concrete instance of `AccountManagementArrayInput` via:
//
//	AccountManagementArray{ AccountManagementArgs{...} }
type AccountManagementArrayInput interface {
	pulumi.Input

	ToAccountManagementArrayOutput() AccountManagementArrayOutput
	ToAccountManagementArrayOutputWithContext(context.Context) AccountManagementArrayOutput
}

type AccountManagementArray []AccountManagementInput

func (AccountManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountManagement)(nil)).Elem()
}

func (i AccountManagementArray) ToAccountManagementArrayOutput() AccountManagementArrayOutput {
	return i.ToAccountManagementArrayOutputWithContext(context.Background())
}

func (i AccountManagementArray) ToAccountManagementArrayOutputWithContext(ctx context.Context) AccountManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountManagementArrayOutput)
}

// AccountManagementMapInput is an input type that accepts AccountManagementMap and AccountManagementMapOutput values.
// You can construct a concrete instance of `AccountManagementMapInput` via:
//
//	AccountManagementMap{ "key": AccountManagementArgs{...} }
type AccountManagementMapInput interface {
	pulumi.Input

	ToAccountManagementMapOutput() AccountManagementMapOutput
	ToAccountManagementMapOutputWithContext(context.Context) AccountManagementMapOutput
}

type AccountManagementMap map[string]AccountManagementInput

func (AccountManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountManagement)(nil)).Elem()
}

func (i AccountManagementMap) ToAccountManagementMapOutput() AccountManagementMapOutput {
	return i.ToAccountManagementMapOutputWithContext(context.Background())
}

func (i AccountManagementMap) ToAccountManagementMapOutputWithContext(ctx context.Context) AccountManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountManagementMapOutput)
}

type AccountManagementOutput struct{ *pulumi.OutputState }

func (AccountManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountManagement)(nil)).Elem()
}

func (o AccountManagementOutput) ToAccountManagementOutput() AccountManagementOutput {
	return o
}

func (o AccountManagementOutput) ToAccountManagementOutputWithContext(ctx context.Context) AccountManagementOutput {
	return o
}

// Name of the account to be created
func (o AccountManagementOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountManagement) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A description of what this parsing rule represents.
func (o AccountManagementOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountManagement) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type AccountManagementArrayOutput struct{ *pulumi.OutputState }

func (AccountManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountManagement)(nil)).Elem()
}

func (o AccountManagementArrayOutput) ToAccountManagementArrayOutput() AccountManagementArrayOutput {
	return o
}

func (o AccountManagementArrayOutput) ToAccountManagementArrayOutputWithContext(ctx context.Context) AccountManagementArrayOutput {
	return o
}

func (o AccountManagementArrayOutput) Index(i pulumi.IntInput) AccountManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountManagement {
		return vs[0].([]*AccountManagement)[vs[1].(int)]
	}).(AccountManagementOutput)
}

type AccountManagementMapOutput struct{ *pulumi.OutputState }

func (AccountManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountManagement)(nil)).Elem()
}

func (o AccountManagementMapOutput) ToAccountManagementMapOutput() AccountManagementMapOutput {
	return o
}

func (o AccountManagementMapOutput) ToAccountManagementMapOutputWithContext(ctx context.Context) AccountManagementMapOutput {
	return o
}

func (o AccountManagementMapOutput) MapIndex(k pulumi.StringInput) AccountManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountManagement {
		return vs[0].(map[string]*AccountManagement)[vs[1].(string)]
	}).(AccountManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountManagementInput)(nil)).Elem(), &AccountManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountManagementArrayInput)(nil)).Elem(), AccountManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountManagementMapInput)(nil)).Elem(), AccountManagementMap{})
	pulumi.RegisterOutputType(AccountManagementOutput{})
	pulumi.RegisterOutputType(AccountManagementArrayOutput{})
	pulumi.RegisterOutputType(AccountManagementMapOutput{})
}
