// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the newrelic package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	AccountId   pulumi.StringPtrOutput `pulumi:"accountId"`
	AdminApiKey pulumi.StringPtrOutput `pulumi:"adminApiKey"`
	ApiKey      pulumi.StringPtrOutput `pulumi:"apiKey"`
	// Deprecated: New Relic internal use only. API URLs are now configured based on the configured region.
	ApiUrl     pulumi.StringPtrOutput `pulumi:"apiUrl"`
	CacertFile pulumi.StringPtrOutput `pulumi:"cacertFile"`
	// Deprecated: New Relic internal use only. API URLs are now configured based on the configured region.
	InfrastructureApiUrl pulumi.StringPtrOutput `pulumi:"infrastructureApiUrl"`
	InsightsInsertKey    pulumi.StringPtrOutput `pulumi:"insightsInsertKey"`
	InsightsInsertUrl    pulumi.StringPtrOutput `pulumi:"insightsInsertUrl"`
	InsightsQueryUrl     pulumi.StringPtrOutput `pulumi:"insightsQueryUrl"`
	// Deprecated: New Relic internal use only. API URLs are now configured based on the configured region.
	NerdgraphApiUrl pulumi.StringPtrOutput `pulumi:"nerdgraphApiUrl"`
	// The data center for which your New Relic account is configured. Only one region per provider block is permitted.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// Deprecated: New Relic internal use only. API URLs are now configured based on the configured region.
	SyntheticsApiUrl pulumi.StringPtrOutput `pulumi:"syntheticsApiUrl"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.AccountId == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "NEW_RELIC_ACCOUNT_ID"); d != nil {
			args.AccountId = pulumi.StringPtr(d.(string))
		}
	}
	if args.Region == nil {
		if d := internal.GetEnvOrDefault("US", nil, "NEW_RELIC_REGION"); d != nil {
			args.Region = pulumi.StringPtr(d.(string))
		}
	}
	if args.AccountId != nil {
		args.AccountId = pulumi.ToSecret(args.AccountId).(pulumi.StringPtrInput)
	}
	if args.AdminApiKey != nil {
		args.AdminApiKey = pulumi.ToSecret(args.AdminApiKey).(pulumi.StringPtrInput)
	}
	if args.ApiKey != nil {
		args.ApiKey = pulumi.ToSecret(args.ApiKey).(pulumi.StringPtrInput)
	}
	if args.InsightsInsertKey != nil {
		args.InsightsInsertKey = pulumi.ToSecret(args.InsightsInsertKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accountId",
		"adminApiKey",
		"apiKey",
		"insightsInsertKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:newrelic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	AccountId   *string `pulumi:"accountId"`
	AdminApiKey *string `pulumi:"adminApiKey"`
	ApiKey      *string `pulumi:"apiKey"`
	// Deprecated: New Relic internal use only. API URLs are now configured based on the configured region.
	ApiUrl     *string `pulumi:"apiUrl"`
	CacertFile *string `pulumi:"cacertFile"`
	// Deprecated: New Relic internal use only. API URLs are now configured based on the configured region.
	InfrastructureApiUrl *string `pulumi:"infrastructureApiUrl"`
	InsecureSkipVerify   *bool   `pulumi:"insecureSkipVerify"`
	InsightsInsertKey    *string `pulumi:"insightsInsertKey"`
	InsightsInsertUrl    *string `pulumi:"insightsInsertUrl"`
	InsightsQueryUrl     *string `pulumi:"insightsQueryUrl"`
	// Deprecated: New Relic internal use only. API URLs are now configured based on the configured region.
	NerdgraphApiUrl *string `pulumi:"nerdgraphApiUrl"`
	// The data center for which your New Relic account is configured. Only one region per provider block is permitted.
	Region *string `pulumi:"region"`
	// Deprecated: New Relic internal use only. API URLs are now configured based on the configured region.
	SyntheticsApiUrl *string `pulumi:"syntheticsApiUrl"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	AccountId   pulumi.StringPtrInput
	AdminApiKey pulumi.StringPtrInput
	ApiKey      pulumi.StringPtrInput
	// Deprecated: New Relic internal use only. API URLs are now configured based on the configured region.
	ApiUrl     pulumi.StringPtrInput
	CacertFile pulumi.StringPtrInput
	// Deprecated: New Relic internal use only. API URLs are now configured based on the configured region.
	InfrastructureApiUrl pulumi.StringPtrInput
	InsecureSkipVerify   pulumi.BoolPtrInput
	InsightsInsertKey    pulumi.StringPtrInput
	InsightsInsertUrl    pulumi.StringPtrInput
	InsightsQueryUrl     pulumi.StringPtrInput
	// Deprecated: New Relic internal use only. API URLs are now configured based on the configured region.
	NerdgraphApiUrl pulumi.StringPtrInput
	// The data center for which your New Relic account is configured. Only one region per provider block is permitted.
	Region pulumi.StringPtrInput
	// Deprecated: New Relic internal use only. API URLs are now configured based on the configured region.
	SyntheticsApiUrl pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
func (r *Provider) TerraformConfig(ctx *pulumi.Context) (ProviderTerraformConfigResultOutput, error) {
	out, err := ctx.Call("pulumi:providers:newrelic/terraformConfig", nil, ProviderTerraformConfigResultOutput{}, r)
	if err != nil {
		return ProviderTerraformConfigResultOutput{}, err
	}
	return out.(ProviderTerraformConfigResultOutput), nil
}

type ProviderTerraformConfigResult struct {
	Result map[string]interface{} `pulumi:"result"`
}

type ProviderTerraformConfigResultOutput struct{ *pulumi.OutputState }

func (ProviderTerraformConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTerraformConfigResult)(nil)).Elem()
}

func (o ProviderTerraformConfigResultOutput) Result() pulumi.MapOutput {
	return o.ApplyT(func(v ProviderTerraformConfigResult) map[string]interface{} { return v.Result }).(pulumi.MapOutput)
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) AdminApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.AdminApiKey }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// Deprecated: New Relic internal use only. API URLs are now configured based on the configured region.
func (o ProviderOutput) ApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ApiUrl }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) CacertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.CacertFile }).(pulumi.StringPtrOutput)
}

// Deprecated: New Relic internal use only. API URLs are now configured based on the configured region.
func (o ProviderOutput) InfrastructureApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.InfrastructureApiUrl }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) InsightsInsertKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.InsightsInsertKey }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) InsightsInsertUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.InsightsInsertUrl }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) InsightsQueryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.InsightsQueryUrl }).(pulumi.StringPtrOutput)
}

// Deprecated: New Relic internal use only. API URLs are now configured based on the configured region.
func (o ProviderOutput) NerdgraphApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.NerdgraphApiUrl }).(pulumi.StringPtrOutput)
}

// The data center for which your New Relic account is configured. Only one region per provider block is permitted.
func (o ProviderOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// Deprecated: New Relic internal use only. API URLs are now configured based on the configured region.
func (o ProviderOutput) SyntheticsApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.SyntheticsApiUrl }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderTerraformConfigResultOutput{})
}
