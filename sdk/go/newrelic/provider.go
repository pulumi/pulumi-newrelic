// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The provider type for the newrelic package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}
	if args.ApiKey == nil {
		args.ApiKey = pulumi.StringPtr(getEnvOrDefault("", nil, "NEWRELIC_API_KEY").(string))
	}
	if args.ApiUrl == nil {
		args.ApiUrl = pulumi.StringPtr(getEnvOrDefault("https://api.newrelic.com/v2", nil, "NEWRELIC_API_URL").(string))
	}
	if args.CacertFile == nil {
		args.CacertFile = pulumi.StringPtr(getEnvOrDefault("", nil, "NEWRELIC_API_CACERT").(string))
	}
	if args.InfraApiUrl == nil {
		args.InfraApiUrl = pulumi.StringPtr(getEnvOrDefault("https://infra-api.newrelic.com/v2", nil, "NEWRELIC_INFRA_API_URL").(string))
	}
	if args.InfrastructureApiUrl == nil {
		args.InfrastructureApiUrl = pulumi.StringPtr(getEnvOrDefault("", nil, "NEWRELIC_INFRASTRUCTURE_API_URL").(string))
	}
	if args.InsecureSkipVerify == nil {
		args.InsecureSkipVerify = pulumi.BoolPtr(getEnvOrDefault(false, parseEnvBool, "NEWRELIC_API_SKIP_VERIFY").(bool))
	}
	if args.InsightsAccountId == nil {
		args.InsightsAccountId = pulumi.StringPtr(getEnvOrDefault("", nil, "NEWRELIC_INSIGHTS_ACCOUNT_ID").(string))
	}
	if args.InsightsInsertKey == nil {
		args.InsightsInsertKey = pulumi.StringPtr(getEnvOrDefault("", nil, "NEWRELIC_INSIGHTS_INSERT_KEY").(string))
	}
	if args.InsightsInsertUrl == nil {
		args.InsightsInsertUrl = pulumi.StringPtr(getEnvOrDefault("https://insights-collector.newrelic.com/v1/accounts", nil, "NEWRELIC_INSIGHTS_INSERT_URL").(string))
	}
	if args.InsightsQueryKey == nil {
		args.InsightsQueryKey = pulumi.StringPtr(getEnvOrDefault("", nil, "NEWRELIC_INSIGHTS_QUERY_KEY").(string))
	}
	if args.InsightsQueryUrl == nil {
		args.InsightsQueryUrl = pulumi.StringPtr(getEnvOrDefault("https://insights-api.newrelic.com/v1/accounts", nil, "NEWRELIC_INSIGHTS_QUERY_URL").(string))
	}
	if args.NerdgraphApiUrl == nil {
		args.NerdgraphApiUrl = pulumi.StringPtr(getEnvOrDefault("", nil, "NEWRELIC_NERDGRAPH_API_URL").(string))
	}
	if args.SyntheticsApiUrl == nil {
		args.SyntheticsApiUrl = pulumi.StringPtr(getEnvOrDefault("https://synthetics.newrelic.com/synthetics/api/v3", nil, "NEWRELIC_SYNTHETICS_API_URL").(string))
	}
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:newrelic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	ApiKey               *string `pulumi:"apiKey"`
	ApiUrl               *string `pulumi:"apiUrl"`
	CacertFile           *string `pulumi:"cacertFile"`
	InfraApiUrl          *string `pulumi:"infraApiUrl"`
	InfrastructureApiUrl *string `pulumi:"infrastructureApiUrl"`
	InsecureSkipVerify   *bool   `pulumi:"insecureSkipVerify"`
	InsightsAccountId    *string `pulumi:"insightsAccountId"`
	InsightsInsertKey    *string `pulumi:"insightsInsertKey"`
	InsightsInsertUrl    *string `pulumi:"insightsInsertUrl"`
	InsightsQueryKey     *string `pulumi:"insightsQueryKey"`
	InsightsQueryUrl     *string `pulumi:"insightsQueryUrl"`
	NerdgraphApiUrl      *string `pulumi:"nerdgraphApiUrl"`
	PersonalApiKey       *string `pulumi:"personalApiKey"`
	SyntheticsApiUrl     *string `pulumi:"syntheticsApiUrl"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	ApiKey               pulumi.StringPtrInput
	ApiUrl               pulumi.StringPtrInput
	CacertFile           pulumi.StringPtrInput
	InfraApiUrl          pulumi.StringPtrInput
	InfrastructureApiUrl pulumi.StringPtrInput
	InsecureSkipVerify   pulumi.BoolPtrInput
	InsightsAccountId    pulumi.StringPtrInput
	InsightsInsertKey    pulumi.StringPtrInput
	InsightsInsertUrl    pulumi.StringPtrInput
	InsightsQueryKey     pulumi.StringPtrInput
	InsightsQueryUrl     pulumi.StringPtrInput
	NerdgraphApiUrl      pulumi.StringPtrInput
	PersonalApiKey       pulumi.StringPtrInput
	SyntheticsApiUrl     pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}
