// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// Alert conditions can be imported using a composite ID of `<account_id>:<muting_rule_id>`, e.g.
//
// ```sh
//  $ pulumi import newrelic:index/alertMutingRule:AlertMutingRule foo 538291:6789035
// ```
type AlertMutingRule struct {
	pulumi.CustomResourceState

	// The account id of the MutingRule.
	AccountId pulumi.IntOutput `pulumi:"accountId"`
	// The condition that defines which violations to target. See Nested condition blocks below for details.
	Condition AlertMutingRuleConditionOutput `pulumi:"condition"`
	// The description of the MutingRule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the MutingRule is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The name of the MutingRule.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAlertMutingRule registers a new resource with the given unique name, arguments, and options.
func NewAlertMutingRule(ctx *pulumi.Context,
	name string, args *AlertMutingRuleArgs, opts ...pulumi.ResourceOption) (*AlertMutingRule, error) {
	if args == nil || args.Condition == nil {
		return nil, errors.New("missing required argument 'Condition'")
	}
	if args == nil || args.Enabled == nil {
		return nil, errors.New("missing required argument 'Enabled'")
	}
	if args == nil {
		args = &AlertMutingRuleArgs{}
	}
	var resource AlertMutingRule
	err := ctx.RegisterResource("newrelic:index/alertMutingRule:AlertMutingRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertMutingRule gets an existing AlertMutingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertMutingRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertMutingRuleState, opts ...pulumi.ResourceOption) (*AlertMutingRule, error) {
	var resource AlertMutingRule
	err := ctx.ReadResource("newrelic:index/alertMutingRule:AlertMutingRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertMutingRule resources.
type alertMutingRuleState struct {
	// The account id of the MutingRule.
	AccountId *int `pulumi:"accountId"`
	// The condition that defines which violations to target. See Nested condition blocks below for details.
	Condition *AlertMutingRuleCondition `pulumi:"condition"`
	// The description of the MutingRule.
	Description *string `pulumi:"description"`
	// Whether the MutingRule is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The name of the MutingRule.
	Name *string `pulumi:"name"`
}

type AlertMutingRuleState struct {
	// The account id of the MutingRule.
	AccountId pulumi.IntPtrInput
	// The condition that defines which violations to target. See Nested condition blocks below for details.
	Condition AlertMutingRuleConditionPtrInput
	// The description of the MutingRule.
	Description pulumi.StringPtrInput
	// Whether the MutingRule is enabled.
	Enabled pulumi.BoolPtrInput
	// The name of the MutingRule.
	Name pulumi.StringPtrInput
}

func (AlertMutingRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertMutingRuleState)(nil)).Elem()
}

type alertMutingRuleArgs struct {
	// The account id of the MutingRule.
	AccountId *int `pulumi:"accountId"`
	// The condition that defines which violations to target. See Nested condition blocks below for details.
	Condition AlertMutingRuleCondition `pulumi:"condition"`
	// The description of the MutingRule.
	Description *string `pulumi:"description"`
	// Whether the MutingRule is enabled.
	Enabled bool `pulumi:"enabled"`
	// The name of the MutingRule.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AlertMutingRule resource.
type AlertMutingRuleArgs struct {
	// The account id of the MutingRule.
	AccountId pulumi.IntPtrInput
	// The condition that defines which violations to target. See Nested condition blocks below for details.
	Condition AlertMutingRuleConditionInput
	// The description of the MutingRule.
	Description pulumi.StringPtrInput
	// Whether the MutingRule is enabled.
	Enabled pulumi.BoolInput
	// The name of the MutingRule.
	Name pulumi.StringPtrInput
}

func (AlertMutingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertMutingRuleArgs)(nil)).Elem()
}

type AlertMutingRuleInput interface {
	pulumi.Input

	ToAlertMutingRuleOutput() AlertMutingRuleOutput
	ToAlertMutingRuleOutputWithContext(ctx context.Context) AlertMutingRuleOutput
}

func (AlertMutingRule) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRule)(nil)).Elem()
}

func (i AlertMutingRule) ToAlertMutingRuleOutput() AlertMutingRuleOutput {
	return i.ToAlertMutingRuleOutputWithContext(context.Background())
}

func (i AlertMutingRule) ToAlertMutingRuleOutputWithContext(ctx context.Context) AlertMutingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleOutput)
}

type AlertMutingRuleOutput struct {
	*pulumi.OutputState
}

func (AlertMutingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleOutput)(nil)).Elem()
}

func (o AlertMutingRuleOutput) ToAlertMutingRuleOutput() AlertMutingRuleOutput {
	return o
}

func (o AlertMutingRuleOutput) ToAlertMutingRuleOutputWithContext(ctx context.Context) AlertMutingRuleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AlertMutingRuleOutput{})
}
