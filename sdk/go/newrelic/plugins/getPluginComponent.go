// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package plugins

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Use this data source to get information about a single plugin component in New Relic that already exists.
//
// Each plugin component reporting into to New Relic is assigned a unique ID. Once you have a plugin component reporting data into your account, its component ID can be used to create Plugins alert conditions.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic"
// 	"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/plugins"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooPlugin, err := plugins.GetPlugin(ctx, &plugins.GetPluginArgs{
// 			Guid: "com.example.my-plugin",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		fooPluginComponent, err := plugins.GetPluginComponent(ctx, &plugins.GetPluginComponentArgs{
// 			PluginId: fooPlugin.Id,
// 			Name:     "My Plugin Component",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		fooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, "fooAlertPolicy", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = plugins.NewAlertCondition(ctx, "fooAlertCondition", &plugins.AlertConditionArgs{
// 			PolicyId:   fooAlertPolicy.ID(),
// 			Metric:     pulumi.String("Component/Summary/Consumers[consumers]"),
// 			PluginId:   pulumi.String(fooPlugin.Id),
// 			PluginGuid: pulumi.String(fooPlugin.Guid),
// 			Entities: pulumi.IntArray{
// 				pulumi.String(fooPluginComponent.Id),
// 			},
// 			ValueFunction:     pulumi.String("average"),
// 			MetricDescription: pulumi.String("Queue consumers"),
// 			Terms: plugins.AlertConditionTermArray{
// 				&plugins.AlertConditionTermArgs{
// 					Duration:     pulumi.Int(5),
// 					Operator:     pulumi.String("below"),
// 					Priority:     pulumi.String("critical"),
// 					Threshold:    pulumi.Float64(0.75),
// 					TimeFunction: pulumi.String("all"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetPluginComponent(ctx *pulumi.Context, args *GetPluginComponentArgs, opts ...pulumi.InvokeOption) (*GetPluginComponentResult, error) {
	var rv GetPluginComponentResult
	err := ctx.Invoke("newrelic:plugins/getPluginComponent:getPluginComponent", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPluginComponent.
type GetPluginComponentArgs struct {
	// The name of the plugin component.
	Name string `pulumi:"name"`
	// The ID of the plugin instance this component belongs to.
	PluginId int `pulumi:"pluginId"`
}

// A collection of values returned by getPluginComponent.
type GetPluginComponentResult struct {
	// The health status of the plugin component.
	HealthStatus string `pulumi:"healthStatus"`
	// The ID of the plugin component.
	Id       string `pulumi:"id"`
	Name     string `pulumi:"name"`
	PluginId int    `pulumi:"pluginId"`
}
