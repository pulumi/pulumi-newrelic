// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package plugins

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to create, update, and delete a New Relic One workload.
//
// A New Relic User API key is required to provision this resource.  Set the `apiKey`
// attribute in the `provider` block or the `NEW_RELIC_API_KEY` environment
// variable with your User API key.
//
// ## Example Usage
//
// Include entities with a certain string on the name.
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/plugins"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := plugins.NewWorkload(ctx, "foo", &plugins.WorkloadArgs{
//				Name:      pulumi.String("Example workload"),
//				AccountId: pulumi.String("12345678"),
//				EntityGuids: pulumi.StringArray{
//					pulumi.String("MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1"),
//				},
//				EntitySearchQueries: plugins.WorkloadEntitySearchQueryArray{
//					&plugins.WorkloadEntitySearchQueryArgs{
//						Query: pulumi.String("name like '%Example application%'"),
//					},
//				},
//				ScopeAccountIds: pulumi.StringArray{
//					pulumi.String("12345678"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Include entities with a set of tags.
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/plugins"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := plugins.NewWorkload(ctx, "foo", &plugins.WorkloadArgs{
//				Name:      pulumi.String("Example workload with tags"),
//				AccountId: pulumi.String("12345678"),
//				EntityGuids: pulumi.StringArray{
//					pulumi.String("MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1"),
//				},
//				EntitySearchQueries: plugins.WorkloadEntitySearchQueryArray{
//					&plugins.WorkloadEntitySearchQueryArgs{
//						Query: pulumi.String("tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'"),
//					},
//				},
//				ScopeAccountIds: pulumi.StringArray{
//					pulumi.String("12345678"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Include entities with a set of tags.
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/plugins"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := plugins.NewWorkload(ctx, "foo", &plugins.WorkloadArgs{
//				Name:      pulumi.String("Example workload with tags"),
//				AccountId: pulumi.String("12345678"),
//				EntityGuids: pulumi.StringArray{
//					pulumi.String("MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1"),
//				},
//				EntitySearchQueries: plugins.WorkloadEntitySearchQueryArray{
//					&plugins.WorkloadEntitySearchQueryArgs{
//						Query: pulumi.String("tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'"),
//					},
//				},
//				ScopeAccountIds: pulumi.StringArray{
//					pulumi.String("12345678"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// # Include automatic status
//
// > The global status of your workload is a quick indicator of the workload health. You can configure it to be calculated automatically, and you can also set an alert and get a notification whenever the workload stops being operational. Alternatively, you can communicate a certain status of the workload by setting up a static value and a description. [See our docs](https://docs.newrelic.com/docs/workloads/use-workloads/workloads/workload-status)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/plugins"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := plugins.NewWorkload(ctx, "foo", &plugins.WorkloadArgs{
//				Name:      pulumi.String("Example workload"),
//				AccountId: pulumi.String("12345678"),
//				EntityGuids: pulumi.StringArray{
//					pulumi.String("MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1"),
//				},
//				EntitySearchQueries: plugins.WorkloadEntitySearchQueryArray{
//					&plugins.WorkloadEntitySearchQueryArgs{
//						Query: pulumi.String("name like '%Example application%'"),
//					},
//				},
//				ScopeAccountIds: pulumi.StringArray{
//					pulumi.String("12345678"),
//				},
//				Description: pulumi.String("Description"),
//				StatusConfigAutomatic: &plugins.WorkloadStatusConfigAutomaticArgs{
//					Enabled: pulumi.Bool(true),
//					RemainingEntitiesRule: &plugins.WorkloadStatusConfigAutomaticRemainingEntitiesRuleArgs{
//						RemainingEntitiesRuleRollup: &plugins.WorkloadStatusConfigAutomaticRemainingEntitiesRuleRemainingEntitiesRuleRollupArgs{
//							Strategy:       pulumi.String("BEST_STATUS_WINS"),
//							ThresholdType:  pulumi.String("FIXED"),
//							ThresholdValue: pulumi.Int(100),
//							GroupBy:        pulumi.String("ENTITY_TYPE"),
//						},
//					},
//					Rules: plugins.WorkloadStatusConfigAutomaticRuleArray{
//						&plugins.WorkloadStatusConfigAutomaticRuleArgs{
//							EntityGuids: pulumi.StringArray{
//								pulumi.String("MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1"),
//							},
//							NrqlQueries: plugins.WorkloadStatusConfigAutomaticRuleNrqlQueryArray{
//								&plugins.WorkloadStatusConfigAutomaticRuleNrqlQueryArgs{
//									Query: pulumi.String("name like '%Example application2%'"),
//								},
//							},
//							Rollup: &plugins.WorkloadStatusConfigAutomaticRuleRollupArgs{
//								Strategy:       pulumi.String("BEST_STATUS_WINS"),
//								ThresholdType:  pulumi.String("FIXED"),
//								ThresholdValue: pulumi.Int(100),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// # Include static status
//
// > You can use this during maintenance tasks or any other time you want to provide a fixed status for your workload. This overrides all automatic rules. [See our docs](https://docs.newrelic.com/docs/workloads/use-workloads/workloads/workload-status#configure-static)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/plugins"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := plugins.NewWorkload(ctx, "foo", &plugins.WorkloadArgs{
//				Name:      pulumi.String("Example workload"),
//				AccountId: pulumi.String("12345678"),
//				EntityGuids: pulumi.StringArray{
//					pulumi.String("MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1"),
//				},
//				EntitySearchQueries: plugins.WorkloadEntitySearchQueryArray{
//					&plugins.WorkloadEntitySearchQueryArgs{
//						Query: pulumi.String("name like '%Example application%'"),
//					},
//				},
//				ScopeAccountIds: pulumi.StringArray{
//					pulumi.String("12345678"),
//				},
//				Description: pulumi.String("Description"),
//				StatusConfigStatic: &plugins.WorkloadStatusConfigStaticArgs{
//					Description: pulumi.String("test"),
//					Enabled:     pulumi.Bool(true),
//					Status:      pulumi.String("OPERATIONAL"),
//					Summary:     pulumi.String("summary of the status"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// New Relic workloads can be imported using a concatenated string of the format
//
//	`<account_id>:<workload_id>:<guid>`, e.g.
//
// bash
//
// ```sh
// $ pulumi import newrelic:plugins/workload:Workload foo 12345678:1456:MjUyMDUyOHxBUE18QVBRTElDQVRJT058MjE1MDM3Nzk1
// ```
type Workload struct {
	pulumi.CustomResourceState

	// The New Relic account ID where you want to create the workload.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The composite query used to compose a dynamic workload.
	CompositeEntitySearchQuery pulumi.StringOutput `pulumi:"compositeEntitySearchQuery"`
	// Relevant information about the workload.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A list of entity GUIDs manually assigned to this workload.
	EntityGuids pulumi.StringArrayOutput `pulumi:"entityGuids"`
	// A list of search queries that define a dynamic workload.
	EntitySearchQueries WorkloadEntitySearchQueryArrayOutput `pulumi:"entitySearchQueries"`
	// The unique entity identifier of the workload in New Relic.
	Guid pulumi.StringOutput `pulumi:"guid"`
	// The workload's name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The URL of the workload.
	Permalink pulumi.StringOutput `pulumi:"permalink"`
	// A list of account IDs that will be used to get entities from.
	ScopeAccountIds pulumi.StringArrayOutput `pulumi:"scopeAccountIds"`
	// An input object used to represent an automatic status configuration.
	StatusConfigAutomatic WorkloadStatusConfigAutomaticPtrOutput `pulumi:"statusConfigAutomatic"`
	// A list of static status configurations. You can only configure one static status for a workload.
	StatusConfigStatic WorkloadStatusConfigStaticPtrOutput `pulumi:"statusConfigStatic"`
	// The unique entity identifier of the workload.
	WorkloadId pulumi.StringOutput `pulumi:"workloadId"`
}

// NewWorkload registers a new resource with the given unique name, arguments, and options.
func NewWorkload(ctx *pulumi.Context,
	name string, args *WorkloadArgs, opts ...pulumi.ResourceOption) (*Workload, error) {
	if args == nil {
		args = &WorkloadArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workload
	err := ctx.RegisterResource("newrelic:plugins/workload:Workload", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkload gets an existing Workload resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkload(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkloadState, opts ...pulumi.ResourceOption) (*Workload, error) {
	var resource Workload
	err := ctx.ReadResource("newrelic:plugins/workload:Workload", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workload resources.
type workloadState struct {
	// The New Relic account ID where you want to create the workload.
	AccountId *string `pulumi:"accountId"`
	// The composite query used to compose a dynamic workload.
	CompositeEntitySearchQuery *string `pulumi:"compositeEntitySearchQuery"`
	// Relevant information about the workload.
	Description *string `pulumi:"description"`
	// A list of entity GUIDs manually assigned to this workload.
	EntityGuids []string `pulumi:"entityGuids"`
	// A list of search queries that define a dynamic workload.
	EntitySearchQueries []WorkloadEntitySearchQuery `pulumi:"entitySearchQueries"`
	// The unique entity identifier of the workload in New Relic.
	Guid *string `pulumi:"guid"`
	// The workload's name.
	Name *string `pulumi:"name"`
	// The URL of the workload.
	Permalink *string `pulumi:"permalink"`
	// A list of account IDs that will be used to get entities from.
	ScopeAccountIds []string `pulumi:"scopeAccountIds"`
	// An input object used to represent an automatic status configuration.
	StatusConfigAutomatic *WorkloadStatusConfigAutomatic `pulumi:"statusConfigAutomatic"`
	// A list of static status configurations. You can only configure one static status for a workload.
	StatusConfigStatic *WorkloadStatusConfigStatic `pulumi:"statusConfigStatic"`
	// The unique entity identifier of the workload.
	WorkloadId *string `pulumi:"workloadId"`
}

type WorkloadState struct {
	// The New Relic account ID where you want to create the workload.
	AccountId pulumi.StringPtrInput
	// The composite query used to compose a dynamic workload.
	CompositeEntitySearchQuery pulumi.StringPtrInput
	// Relevant information about the workload.
	Description pulumi.StringPtrInput
	// A list of entity GUIDs manually assigned to this workload.
	EntityGuids pulumi.StringArrayInput
	// A list of search queries that define a dynamic workload.
	EntitySearchQueries WorkloadEntitySearchQueryArrayInput
	// The unique entity identifier of the workload in New Relic.
	Guid pulumi.StringPtrInput
	// The workload's name.
	Name pulumi.StringPtrInput
	// The URL of the workload.
	Permalink pulumi.StringPtrInput
	// A list of account IDs that will be used to get entities from.
	ScopeAccountIds pulumi.StringArrayInput
	// An input object used to represent an automatic status configuration.
	StatusConfigAutomatic WorkloadStatusConfigAutomaticPtrInput
	// A list of static status configurations. You can only configure one static status for a workload.
	StatusConfigStatic WorkloadStatusConfigStaticPtrInput
	// The unique entity identifier of the workload.
	WorkloadId pulumi.StringPtrInput
}

func (WorkloadState) ElementType() reflect.Type {
	return reflect.TypeOf((*workloadState)(nil)).Elem()
}

type workloadArgs struct {
	// The New Relic account ID where you want to create the workload.
	AccountId *string `pulumi:"accountId"`
	// Relevant information about the workload.
	Description *string `pulumi:"description"`
	// A list of entity GUIDs manually assigned to this workload.
	EntityGuids []string `pulumi:"entityGuids"`
	// A list of search queries that define a dynamic workload.
	EntitySearchQueries []WorkloadEntitySearchQuery `pulumi:"entitySearchQueries"`
	// The workload's name.
	Name *string `pulumi:"name"`
	// A list of account IDs that will be used to get entities from.
	ScopeAccountIds []string `pulumi:"scopeAccountIds"`
	// An input object used to represent an automatic status configuration.
	StatusConfigAutomatic *WorkloadStatusConfigAutomatic `pulumi:"statusConfigAutomatic"`
	// A list of static status configurations. You can only configure one static status for a workload.
	StatusConfigStatic *WorkloadStatusConfigStatic `pulumi:"statusConfigStatic"`
}

// The set of arguments for constructing a Workload resource.
type WorkloadArgs struct {
	// The New Relic account ID where you want to create the workload.
	AccountId pulumi.StringPtrInput
	// Relevant information about the workload.
	Description pulumi.StringPtrInput
	// A list of entity GUIDs manually assigned to this workload.
	EntityGuids pulumi.StringArrayInput
	// A list of search queries that define a dynamic workload.
	EntitySearchQueries WorkloadEntitySearchQueryArrayInput
	// The workload's name.
	Name pulumi.StringPtrInput
	// A list of account IDs that will be used to get entities from.
	ScopeAccountIds pulumi.StringArrayInput
	// An input object used to represent an automatic status configuration.
	StatusConfigAutomatic WorkloadStatusConfigAutomaticPtrInput
	// A list of static status configurations. You can only configure one static status for a workload.
	StatusConfigStatic WorkloadStatusConfigStaticPtrInput
}

func (WorkloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workloadArgs)(nil)).Elem()
}

type WorkloadInput interface {
	pulumi.Input

	ToWorkloadOutput() WorkloadOutput
	ToWorkloadOutputWithContext(ctx context.Context) WorkloadOutput
}

func (*Workload) ElementType() reflect.Type {
	return reflect.TypeOf((**Workload)(nil)).Elem()
}

func (i *Workload) ToWorkloadOutput() WorkloadOutput {
	return i.ToWorkloadOutputWithContext(context.Background())
}

func (i *Workload) ToWorkloadOutputWithContext(ctx context.Context) WorkloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadOutput)
}

// WorkloadArrayInput is an input type that accepts WorkloadArray and WorkloadArrayOutput values.
// You can construct a concrete instance of `WorkloadArrayInput` via:
//
//	WorkloadArray{ WorkloadArgs{...} }
type WorkloadArrayInput interface {
	pulumi.Input

	ToWorkloadArrayOutput() WorkloadArrayOutput
	ToWorkloadArrayOutputWithContext(context.Context) WorkloadArrayOutput
}

type WorkloadArray []WorkloadInput

func (WorkloadArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workload)(nil)).Elem()
}

func (i WorkloadArray) ToWorkloadArrayOutput() WorkloadArrayOutput {
	return i.ToWorkloadArrayOutputWithContext(context.Background())
}

func (i WorkloadArray) ToWorkloadArrayOutputWithContext(ctx context.Context) WorkloadArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadArrayOutput)
}

// WorkloadMapInput is an input type that accepts WorkloadMap and WorkloadMapOutput values.
// You can construct a concrete instance of `WorkloadMapInput` via:
//
//	WorkloadMap{ "key": WorkloadArgs{...} }
type WorkloadMapInput interface {
	pulumi.Input

	ToWorkloadMapOutput() WorkloadMapOutput
	ToWorkloadMapOutputWithContext(context.Context) WorkloadMapOutput
}

type WorkloadMap map[string]WorkloadInput

func (WorkloadMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workload)(nil)).Elem()
}

func (i WorkloadMap) ToWorkloadMapOutput() WorkloadMapOutput {
	return i.ToWorkloadMapOutputWithContext(context.Background())
}

func (i WorkloadMap) ToWorkloadMapOutputWithContext(ctx context.Context) WorkloadMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadMapOutput)
}

type WorkloadOutput struct{ *pulumi.OutputState }

func (WorkloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workload)(nil)).Elem()
}

func (o WorkloadOutput) ToWorkloadOutput() WorkloadOutput {
	return o
}

func (o WorkloadOutput) ToWorkloadOutputWithContext(ctx context.Context) WorkloadOutput {
	return o
}

// The New Relic account ID where you want to create the workload.
func (o WorkloadOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The composite query used to compose a dynamic workload.
func (o WorkloadOutput) CompositeEntitySearchQuery() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.CompositeEntitySearchQuery }).(pulumi.StringOutput)
}

// Relevant information about the workload.
func (o WorkloadOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of entity GUIDs manually assigned to this workload.
func (o WorkloadOutput) EntityGuids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringArrayOutput { return v.EntityGuids }).(pulumi.StringArrayOutput)
}

// A list of search queries that define a dynamic workload.
func (o WorkloadOutput) EntitySearchQueries() WorkloadEntitySearchQueryArrayOutput {
	return o.ApplyT(func(v *Workload) WorkloadEntitySearchQueryArrayOutput { return v.EntitySearchQueries }).(WorkloadEntitySearchQueryArrayOutput)
}

// The unique entity identifier of the workload in New Relic.
func (o WorkloadOutput) Guid() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.Guid }).(pulumi.StringOutput)
}

// The workload's name.
func (o WorkloadOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The URL of the workload.
func (o WorkloadOutput) Permalink() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.Permalink }).(pulumi.StringOutput)
}

// A list of account IDs that will be used to get entities from.
func (o WorkloadOutput) ScopeAccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringArrayOutput { return v.ScopeAccountIds }).(pulumi.StringArrayOutput)
}

// An input object used to represent an automatic status configuration.
func (o WorkloadOutput) StatusConfigAutomatic() WorkloadStatusConfigAutomaticPtrOutput {
	return o.ApplyT(func(v *Workload) WorkloadStatusConfigAutomaticPtrOutput { return v.StatusConfigAutomatic }).(WorkloadStatusConfigAutomaticPtrOutput)
}

// A list of static status configurations. You can only configure one static status for a workload.
func (o WorkloadOutput) StatusConfigStatic() WorkloadStatusConfigStaticPtrOutput {
	return o.ApplyT(func(v *Workload) WorkloadStatusConfigStaticPtrOutput { return v.StatusConfigStatic }).(WorkloadStatusConfigStaticPtrOutput)
}

// The unique entity identifier of the workload.
func (o WorkloadOutput) WorkloadId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.WorkloadId }).(pulumi.StringOutput)
}

type WorkloadArrayOutput struct{ *pulumi.OutputState }

func (WorkloadArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workload)(nil)).Elem()
}

func (o WorkloadArrayOutput) ToWorkloadArrayOutput() WorkloadArrayOutput {
	return o
}

func (o WorkloadArrayOutput) ToWorkloadArrayOutputWithContext(ctx context.Context) WorkloadArrayOutput {
	return o
}

func (o WorkloadArrayOutput) Index(i pulumi.IntInput) WorkloadOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Workload {
		return vs[0].([]*Workload)[vs[1].(int)]
	}).(WorkloadOutput)
}

type WorkloadMapOutput struct{ *pulumi.OutputState }

func (WorkloadMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workload)(nil)).Elem()
}

func (o WorkloadMapOutput) ToWorkloadMapOutput() WorkloadMapOutput {
	return o
}

func (o WorkloadMapOutput) ToWorkloadMapOutputWithContext(ctx context.Context) WorkloadMapOutput {
	return o
}

func (o WorkloadMapOutput) MapIndex(k pulumi.StringInput) WorkloadOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Workload {
		return vs[0].(map[string]*Workload)[vs[1].(string)]
	}).(WorkloadOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadInput)(nil)).Elem(), &Workload{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadArrayInput)(nil)).Elem(), WorkloadArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadMapInput)(nil)).Elem(), WorkloadMap{})
	pulumi.RegisterOutputType(WorkloadOutput{})
	pulumi.RegisterOutputType(WorkloadArrayOutput{})
	pulumi.RegisterOutputType(WorkloadMapOutput{})
}
