// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package plugins

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// New Relic Plugins reached end of life Wednesday June 16, 2021.
//
// **This resource has been removed.**
//
// For more information, [click here](https://discuss.newrelic.com/t/new-relic-plugin-eol-wednesday-june-16th-2021/127267)
type AlertCondition struct {
	pulumi.CustomResourceState

	// Whether or not this condition is enabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The plugin component IDs to target.
	Entities pulumi.IntArrayOutput `pulumi:"entities"`
	// The plugin metric to evaluate.
	Metric pulumi.StringOutput `pulumi:"metric"`
	// The metric description.
	MetricDescription pulumi.StringOutput `pulumi:"metricDescription"`
	// The title of the condition. Must be between 1 and 64 characters, inclusive.
	Name pulumi.StringOutput `pulumi:"name"`
	// The GUID of the plugin which produces the metric.
	PluginGuid pulumi.StringOutput `pulumi:"pluginGuid"`
	// The ID of the installed plugin instance which produces the metric.
	PluginId pulumi.StringOutput `pulumi:"pluginId"`
	// The ID of the policy where this condition should be used.
	PolicyId pulumi.IntOutput `pulumi:"policyId"`
	// Runbook URL to display in notifications.
	RunbookUrl pulumi.StringPtrOutput        `pulumi:"runbookUrl"`
	Terms      AlertConditionTermArrayOutput `pulumi:"terms"`
	// The value function to apply to the metric data. One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.
	ValueFunction pulumi.StringOutput `pulumi:"valueFunction"`
}

// NewAlertCondition registers a new resource with the given unique name, arguments, and options.
func NewAlertCondition(ctx *pulumi.Context,
	name string, args *AlertConditionArgs, opts ...pulumi.ResourceOption) (*AlertCondition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entities == nil {
		return nil, errors.New("invalid value for required argument 'Entities'")
	}
	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	if args.MetricDescription == nil {
		return nil, errors.New("invalid value for required argument 'MetricDescription'")
	}
	if args.PluginGuid == nil {
		return nil, errors.New("invalid value for required argument 'PluginGuid'")
	}
	if args.PluginId == nil {
		return nil, errors.New("invalid value for required argument 'PluginId'")
	}
	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	if args.Terms == nil {
		return nil, errors.New("invalid value for required argument 'Terms'")
	}
	if args.ValueFunction == nil {
		return nil, errors.New("invalid value for required argument 'ValueFunction'")
	}
	var resource AlertCondition
	err := ctx.RegisterResource("newrelic:plugins/alertCondition:AlertCondition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertCondition gets an existing AlertCondition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertCondition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertConditionState, opts ...pulumi.ResourceOption) (*AlertCondition, error) {
	var resource AlertCondition
	err := ctx.ReadResource("newrelic:plugins/alertCondition:AlertCondition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertCondition resources.
type alertConditionState struct {
	// Whether or not this condition is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The plugin component IDs to target.
	Entities []int `pulumi:"entities"`
	// The plugin metric to evaluate.
	Metric *string `pulumi:"metric"`
	// The metric description.
	MetricDescription *string `pulumi:"metricDescription"`
	// The title of the condition. Must be between 1 and 64 characters, inclusive.
	Name *string `pulumi:"name"`
	// The GUID of the plugin which produces the metric.
	PluginGuid *string `pulumi:"pluginGuid"`
	// The ID of the installed plugin instance which produces the metric.
	PluginId *string `pulumi:"pluginId"`
	// The ID of the policy where this condition should be used.
	PolicyId *int `pulumi:"policyId"`
	// Runbook URL to display in notifications.
	RunbookUrl *string              `pulumi:"runbookUrl"`
	Terms      []AlertConditionTerm `pulumi:"terms"`
	// The value function to apply to the metric data. One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.
	ValueFunction *string `pulumi:"valueFunction"`
}

type AlertConditionState struct {
	// Whether or not this condition is enabled.
	Enabled pulumi.BoolPtrInput
	// The plugin component IDs to target.
	Entities pulumi.IntArrayInput
	// The plugin metric to evaluate.
	Metric pulumi.StringPtrInput
	// The metric description.
	MetricDescription pulumi.StringPtrInput
	// The title of the condition. Must be between 1 and 64 characters, inclusive.
	Name pulumi.StringPtrInput
	// The GUID of the plugin which produces the metric.
	PluginGuid pulumi.StringPtrInput
	// The ID of the installed plugin instance which produces the metric.
	PluginId pulumi.StringPtrInput
	// The ID of the policy where this condition should be used.
	PolicyId pulumi.IntPtrInput
	// Runbook URL to display in notifications.
	RunbookUrl pulumi.StringPtrInput
	Terms      AlertConditionTermArrayInput
	// The value function to apply to the metric data. One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.
	ValueFunction pulumi.StringPtrInput
}

func (AlertConditionState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertConditionState)(nil)).Elem()
}

type alertConditionArgs struct {
	// Whether or not this condition is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The plugin component IDs to target.
	Entities []int `pulumi:"entities"`
	// The plugin metric to evaluate.
	Metric string `pulumi:"metric"`
	// The metric description.
	MetricDescription string `pulumi:"metricDescription"`
	// The title of the condition. Must be between 1 and 64 characters, inclusive.
	Name *string `pulumi:"name"`
	// The GUID of the plugin which produces the metric.
	PluginGuid string `pulumi:"pluginGuid"`
	// The ID of the installed plugin instance which produces the metric.
	PluginId string `pulumi:"pluginId"`
	// The ID of the policy where this condition should be used.
	PolicyId int `pulumi:"policyId"`
	// Runbook URL to display in notifications.
	RunbookUrl *string              `pulumi:"runbookUrl"`
	Terms      []AlertConditionTerm `pulumi:"terms"`
	// The value function to apply to the metric data. One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.
	ValueFunction string `pulumi:"valueFunction"`
}

// The set of arguments for constructing a AlertCondition resource.
type AlertConditionArgs struct {
	// Whether or not this condition is enabled.
	Enabled pulumi.BoolPtrInput
	// The plugin component IDs to target.
	Entities pulumi.IntArrayInput
	// The plugin metric to evaluate.
	Metric pulumi.StringInput
	// The metric description.
	MetricDescription pulumi.StringInput
	// The title of the condition. Must be between 1 and 64 characters, inclusive.
	Name pulumi.StringPtrInput
	// The GUID of the plugin which produces the metric.
	PluginGuid pulumi.StringInput
	// The ID of the installed plugin instance which produces the metric.
	PluginId pulumi.StringInput
	// The ID of the policy where this condition should be used.
	PolicyId pulumi.IntInput
	// Runbook URL to display in notifications.
	RunbookUrl pulumi.StringPtrInput
	Terms      AlertConditionTermArrayInput
	// The value function to apply to the metric data. One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.
	ValueFunction pulumi.StringInput
}

func (AlertConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertConditionArgs)(nil)).Elem()
}

type AlertConditionInput interface {
	pulumi.Input

	ToAlertConditionOutput() AlertConditionOutput
	ToAlertConditionOutputWithContext(ctx context.Context) AlertConditionOutput
}

func (*AlertCondition) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertCondition)(nil)).Elem()
}

func (i *AlertCondition) ToAlertConditionOutput() AlertConditionOutput {
	return i.ToAlertConditionOutputWithContext(context.Background())
}

func (i *AlertCondition) ToAlertConditionOutputWithContext(ctx context.Context) AlertConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertConditionOutput)
}

// AlertConditionArrayInput is an input type that accepts AlertConditionArray and AlertConditionArrayOutput values.
// You can construct a concrete instance of `AlertConditionArrayInput` via:
//
//          AlertConditionArray{ AlertConditionArgs{...} }
type AlertConditionArrayInput interface {
	pulumi.Input

	ToAlertConditionArrayOutput() AlertConditionArrayOutput
	ToAlertConditionArrayOutputWithContext(context.Context) AlertConditionArrayOutput
}

type AlertConditionArray []AlertConditionInput

func (AlertConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertCondition)(nil)).Elem()
}

func (i AlertConditionArray) ToAlertConditionArrayOutput() AlertConditionArrayOutput {
	return i.ToAlertConditionArrayOutputWithContext(context.Background())
}

func (i AlertConditionArray) ToAlertConditionArrayOutputWithContext(ctx context.Context) AlertConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertConditionArrayOutput)
}

// AlertConditionMapInput is an input type that accepts AlertConditionMap and AlertConditionMapOutput values.
// You can construct a concrete instance of `AlertConditionMapInput` via:
//
//          AlertConditionMap{ "key": AlertConditionArgs{...} }
type AlertConditionMapInput interface {
	pulumi.Input

	ToAlertConditionMapOutput() AlertConditionMapOutput
	ToAlertConditionMapOutputWithContext(context.Context) AlertConditionMapOutput
}

type AlertConditionMap map[string]AlertConditionInput

func (AlertConditionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertCondition)(nil)).Elem()
}

func (i AlertConditionMap) ToAlertConditionMapOutput() AlertConditionMapOutput {
	return i.ToAlertConditionMapOutputWithContext(context.Background())
}

func (i AlertConditionMap) ToAlertConditionMapOutputWithContext(ctx context.Context) AlertConditionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertConditionMapOutput)
}

type AlertConditionOutput struct{ *pulumi.OutputState }

func (AlertConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertCondition)(nil)).Elem()
}

func (o AlertConditionOutput) ToAlertConditionOutput() AlertConditionOutput {
	return o
}

func (o AlertConditionOutput) ToAlertConditionOutputWithContext(ctx context.Context) AlertConditionOutput {
	return o
}

type AlertConditionArrayOutput struct{ *pulumi.OutputState }

func (AlertConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertCondition)(nil)).Elem()
}

func (o AlertConditionArrayOutput) ToAlertConditionArrayOutput() AlertConditionArrayOutput {
	return o
}

func (o AlertConditionArrayOutput) ToAlertConditionArrayOutputWithContext(ctx context.Context) AlertConditionArrayOutput {
	return o
}

func (o AlertConditionArrayOutput) Index(i pulumi.IntInput) AlertConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlertCondition {
		return vs[0].([]*AlertCondition)[vs[1].(int)]
	}).(AlertConditionOutput)
}

type AlertConditionMapOutput struct{ *pulumi.OutputState }

func (AlertConditionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertCondition)(nil)).Elem()
}

func (o AlertConditionMapOutput) ToAlertConditionMapOutput() AlertConditionMapOutput {
	return o
}

func (o AlertConditionMapOutput) ToAlertConditionMapOutputWithContext(ctx context.Context) AlertConditionMapOutput {
	return o
}

func (o AlertConditionMapOutput) MapIndex(k pulumi.StringInput) AlertConditionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlertCondition {
		return vs[0].(map[string]*AlertCondition)[vs[1].(string)]
	}).(AlertConditionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertConditionInput)(nil)).Elem(), &AlertCondition{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertConditionArrayInput)(nil)).Elem(), AlertConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertConditionMapInput)(nil)).Elem(), AlertConditionMap{})
	pulumi.RegisterOutputType(AlertConditionOutput{})
	pulumi.RegisterOutputType(AlertConditionArrayOutput{})
	pulumi.RegisterOutputType(AlertConditionMapOutput{})
}
