// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package plugins

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Applications can be imported using notation `application_guid`, e.g.
//
// ```sh
// $ pulumi import newrelic:plugins/applicationSettings:ApplicationSettings main Mzk1NzUyNHQVRJNTxBUE18QVBQTElDc4ODU1MzYx
// ```
type ApplicationSettings struct {
	pulumi.CustomResourceState

	// The acceptable response time limit (Apdex threshold) for the application.
	AppApdexThreshold pulumi.Float64PtrOutput `pulumi:"appApdexThreshold"`
	// Dummy field to support backward compatibility of previous version.should be removed with next major version.
	EnableRealUserMonitoring pulumi.BoolPtrOutput `pulumi:"enableRealUserMonitoring"`
	// Enable or disable the collection of slowest database queries in your traces.
	EnableSlowSql pulumi.BoolPtrOutput `pulumi:"enableSlowSql"`
	// Enable or disable the collection of thread profiling data.
	EnableThreadProfiler pulumi.BoolPtrOutput `pulumi:"enableThreadProfiler"`
	// Dummy field to support backward compatibility of previous version.should be removed with next major version.
	EndUserApdexThreshold pulumi.Float64PtrOutput `pulumi:"endUserApdexThreshold"`
	// Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
	ErrorCollectors ApplicationSettingsErrorCollectorArrayOutput `pulumi:"errorCollectors"`
	// The GUID of the application in New Relic APM.
	//
	// > **NOTE:** While the attribute `guid` is not mandatory at a schema level, it is recommended to use `guid` over `name`, as support for using `name` with this resource shall eventually be discontinued. Please see the note under `name` for more details.
	Guid       pulumi.StringOutput `pulumi:"guid"`
	IsImported pulumi.BoolOutput   `pulumi:"isImported"`
	// The name of the application in New Relic.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
	TracerType pulumi.StringPtrOutput `pulumi:"tracerType"`
	// Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
	TransactionTracers ApplicationSettingsTransactionTracerArrayOutput `pulumi:"transactionTracers"`
	// Enable or disable server side monitoring for the New Relic application.
	UseServerSideConfig pulumi.BoolPtrOutput `pulumi:"useServerSideConfig"`
}

// NewApplicationSettings registers a new resource with the given unique name, arguments, and options.
func NewApplicationSettings(ctx *pulumi.Context,
	name string, args *ApplicationSettingsArgs, opts ...pulumi.ResourceOption) (*ApplicationSettings, error) {
	if args == nil {
		args = &ApplicationSettingsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationSettings
	err := ctx.RegisterResource("newrelic:plugins/applicationSettings:ApplicationSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationSettings gets an existing ApplicationSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationSettingsState, opts ...pulumi.ResourceOption) (*ApplicationSettings, error) {
	var resource ApplicationSettings
	err := ctx.ReadResource("newrelic:plugins/applicationSettings:ApplicationSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationSettings resources.
type applicationSettingsState struct {
	// The acceptable response time limit (Apdex threshold) for the application.
	AppApdexThreshold *float64 `pulumi:"appApdexThreshold"`
	// Dummy field to support backward compatibility of previous version.should be removed with next major version.
	EnableRealUserMonitoring *bool `pulumi:"enableRealUserMonitoring"`
	// Enable or disable the collection of slowest database queries in your traces.
	EnableSlowSql *bool `pulumi:"enableSlowSql"`
	// Enable or disable the collection of thread profiling data.
	EnableThreadProfiler *bool `pulumi:"enableThreadProfiler"`
	// Dummy field to support backward compatibility of previous version.should be removed with next major version.
	EndUserApdexThreshold *float64 `pulumi:"endUserApdexThreshold"`
	// Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
	ErrorCollectors []ApplicationSettingsErrorCollector `pulumi:"errorCollectors"`
	// The GUID of the application in New Relic APM.
	//
	// > **NOTE:** While the attribute `guid` is not mandatory at a schema level, it is recommended to use `guid` over `name`, as support for using `name` with this resource shall eventually be discontinued. Please see the note under `name` for more details.
	Guid       *string `pulumi:"guid"`
	IsImported *bool   `pulumi:"isImported"`
	// The name of the application in New Relic.
	Name *string `pulumi:"name"`
	// Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
	TracerType *string `pulumi:"tracerType"`
	// Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
	TransactionTracers []ApplicationSettingsTransactionTracer `pulumi:"transactionTracers"`
	// Enable or disable server side monitoring for the New Relic application.
	UseServerSideConfig *bool `pulumi:"useServerSideConfig"`
}

type ApplicationSettingsState struct {
	// The acceptable response time limit (Apdex threshold) for the application.
	AppApdexThreshold pulumi.Float64PtrInput
	// Dummy field to support backward compatibility of previous version.should be removed with next major version.
	EnableRealUserMonitoring pulumi.BoolPtrInput
	// Enable or disable the collection of slowest database queries in your traces.
	EnableSlowSql pulumi.BoolPtrInput
	// Enable or disable the collection of thread profiling data.
	EnableThreadProfiler pulumi.BoolPtrInput
	// Dummy field to support backward compatibility of previous version.should be removed with next major version.
	EndUserApdexThreshold pulumi.Float64PtrInput
	// Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
	ErrorCollectors ApplicationSettingsErrorCollectorArrayInput
	// The GUID of the application in New Relic APM.
	//
	// > **NOTE:** While the attribute `guid` is not mandatory at a schema level, it is recommended to use `guid` over `name`, as support for using `name` with this resource shall eventually be discontinued. Please see the note under `name` for more details.
	Guid       pulumi.StringPtrInput
	IsImported pulumi.BoolPtrInput
	// The name of the application in New Relic.
	Name pulumi.StringPtrInput
	// Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
	TracerType pulumi.StringPtrInput
	// Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
	TransactionTracers ApplicationSettingsTransactionTracerArrayInput
	// Enable or disable server side monitoring for the New Relic application.
	UseServerSideConfig pulumi.BoolPtrInput
}

func (ApplicationSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSettingsState)(nil)).Elem()
}

type applicationSettingsArgs struct {
	// The acceptable response time limit (Apdex threshold) for the application.
	AppApdexThreshold *float64 `pulumi:"appApdexThreshold"`
	// Dummy field to support backward compatibility of previous version.should be removed with next major version.
	EnableRealUserMonitoring *bool `pulumi:"enableRealUserMonitoring"`
	// Enable or disable the collection of slowest database queries in your traces.
	EnableSlowSql *bool `pulumi:"enableSlowSql"`
	// Enable or disable the collection of thread profiling data.
	EnableThreadProfiler *bool `pulumi:"enableThreadProfiler"`
	// Dummy field to support backward compatibility of previous version.should be removed with next major version.
	EndUserApdexThreshold *float64 `pulumi:"endUserApdexThreshold"`
	// Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
	ErrorCollectors []ApplicationSettingsErrorCollector `pulumi:"errorCollectors"`
	// The GUID of the application in New Relic APM.
	//
	// > **NOTE:** While the attribute `guid` is not mandatory at a schema level, it is recommended to use `guid` over `name`, as support for using `name` with this resource shall eventually be discontinued. Please see the note under `name` for more details.
	Guid *string `pulumi:"guid"`
	// The name of the application in New Relic.
	Name *string `pulumi:"name"`
	// Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
	TracerType *string `pulumi:"tracerType"`
	// Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
	TransactionTracers []ApplicationSettingsTransactionTracer `pulumi:"transactionTracers"`
	// Enable or disable server side monitoring for the New Relic application.
	UseServerSideConfig *bool `pulumi:"useServerSideConfig"`
}

// The set of arguments for constructing a ApplicationSettings resource.
type ApplicationSettingsArgs struct {
	// The acceptable response time limit (Apdex threshold) for the application.
	AppApdexThreshold pulumi.Float64PtrInput
	// Dummy field to support backward compatibility of previous version.should be removed with next major version.
	EnableRealUserMonitoring pulumi.BoolPtrInput
	// Enable or disable the collection of slowest database queries in your traces.
	EnableSlowSql pulumi.BoolPtrInput
	// Enable or disable the collection of thread profiling data.
	EnableThreadProfiler pulumi.BoolPtrInput
	// Dummy field to support backward compatibility of previous version.should be removed with next major version.
	EndUserApdexThreshold pulumi.Float64PtrInput
	// Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
	ErrorCollectors ApplicationSettingsErrorCollectorArrayInput
	// The GUID of the application in New Relic APM.
	//
	// > **NOTE:** While the attribute `guid` is not mandatory at a schema level, it is recommended to use `guid` over `name`, as support for using `name` with this resource shall eventually be discontinued. Please see the note under `name` for more details.
	Guid pulumi.StringPtrInput
	// The name of the application in New Relic.
	Name pulumi.StringPtrInput
	// Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
	TracerType pulumi.StringPtrInput
	// Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
	TransactionTracers ApplicationSettingsTransactionTracerArrayInput
	// Enable or disable server side monitoring for the New Relic application.
	UseServerSideConfig pulumi.BoolPtrInput
}

func (ApplicationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSettingsArgs)(nil)).Elem()
}

type ApplicationSettingsInput interface {
	pulumi.Input

	ToApplicationSettingsOutput() ApplicationSettingsOutput
	ToApplicationSettingsOutputWithContext(ctx context.Context) ApplicationSettingsOutput
}

func (*ApplicationSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSettings)(nil)).Elem()
}

func (i *ApplicationSettings) ToApplicationSettingsOutput() ApplicationSettingsOutput {
	return i.ToApplicationSettingsOutputWithContext(context.Background())
}

func (i *ApplicationSettings) ToApplicationSettingsOutputWithContext(ctx context.Context) ApplicationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSettingsOutput)
}

// ApplicationSettingsArrayInput is an input type that accepts ApplicationSettingsArray and ApplicationSettingsArrayOutput values.
// You can construct a concrete instance of `ApplicationSettingsArrayInput` via:
//
//	ApplicationSettingsArray{ ApplicationSettingsArgs{...} }
type ApplicationSettingsArrayInput interface {
	pulumi.Input

	ToApplicationSettingsArrayOutput() ApplicationSettingsArrayOutput
	ToApplicationSettingsArrayOutputWithContext(context.Context) ApplicationSettingsArrayOutput
}

type ApplicationSettingsArray []ApplicationSettingsInput

func (ApplicationSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationSettings)(nil)).Elem()
}

func (i ApplicationSettingsArray) ToApplicationSettingsArrayOutput() ApplicationSettingsArrayOutput {
	return i.ToApplicationSettingsArrayOutputWithContext(context.Background())
}

func (i ApplicationSettingsArray) ToApplicationSettingsArrayOutputWithContext(ctx context.Context) ApplicationSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSettingsArrayOutput)
}

// ApplicationSettingsMapInput is an input type that accepts ApplicationSettingsMap and ApplicationSettingsMapOutput values.
// You can construct a concrete instance of `ApplicationSettingsMapInput` via:
//
//	ApplicationSettingsMap{ "key": ApplicationSettingsArgs{...} }
type ApplicationSettingsMapInput interface {
	pulumi.Input

	ToApplicationSettingsMapOutput() ApplicationSettingsMapOutput
	ToApplicationSettingsMapOutputWithContext(context.Context) ApplicationSettingsMapOutput
}

type ApplicationSettingsMap map[string]ApplicationSettingsInput

func (ApplicationSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationSettings)(nil)).Elem()
}

func (i ApplicationSettingsMap) ToApplicationSettingsMapOutput() ApplicationSettingsMapOutput {
	return i.ToApplicationSettingsMapOutputWithContext(context.Background())
}

func (i ApplicationSettingsMap) ToApplicationSettingsMapOutputWithContext(ctx context.Context) ApplicationSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSettingsMapOutput)
}

type ApplicationSettingsOutput struct{ *pulumi.OutputState }

func (ApplicationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSettings)(nil)).Elem()
}

func (o ApplicationSettingsOutput) ToApplicationSettingsOutput() ApplicationSettingsOutput {
	return o
}

func (o ApplicationSettingsOutput) ToApplicationSettingsOutputWithContext(ctx context.Context) ApplicationSettingsOutput {
	return o
}

// The acceptable response time limit (Apdex threshold) for the application.
func (o ApplicationSettingsOutput) AppApdexThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ApplicationSettings) pulumi.Float64PtrOutput { return v.AppApdexThreshold }).(pulumi.Float64PtrOutput)
}

// Dummy field to support backward compatibility of previous version.should be removed with next major version.
func (o ApplicationSettingsOutput) EnableRealUserMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSettings) pulumi.BoolPtrOutput { return v.EnableRealUserMonitoring }).(pulumi.BoolPtrOutput)
}

// Enable or disable the collection of slowest database queries in your traces.
func (o ApplicationSettingsOutput) EnableSlowSql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSettings) pulumi.BoolPtrOutput { return v.EnableSlowSql }).(pulumi.BoolPtrOutput)
}

// Enable or disable the collection of thread profiling data.
func (o ApplicationSettingsOutput) EnableThreadProfiler() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSettings) pulumi.BoolPtrOutput { return v.EnableThreadProfiler }).(pulumi.BoolPtrOutput)
}

// Dummy field to support backward compatibility of previous version.should be removed with next major version.
func (o ApplicationSettingsOutput) EndUserApdexThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ApplicationSettings) pulumi.Float64PtrOutput { return v.EndUserApdexThreshold }).(pulumi.Float64PtrOutput)
}

// Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
func (o ApplicationSettingsOutput) ErrorCollectors() ApplicationSettingsErrorCollectorArrayOutput {
	return o.ApplyT(func(v *ApplicationSettings) ApplicationSettingsErrorCollectorArrayOutput { return v.ErrorCollectors }).(ApplicationSettingsErrorCollectorArrayOutput)
}

// The GUID of the application in New Relic APM.
//
// > **NOTE:** While the attribute `guid` is not mandatory at a schema level, it is recommended to use `guid` over `name`, as support for using `name` with this resource shall eventually be discontinued. Please see the note under `name` for more details.
func (o ApplicationSettingsOutput) Guid() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSettings) pulumi.StringOutput { return v.Guid }).(pulumi.StringOutput)
}

func (o ApplicationSettingsOutput) IsImported() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApplicationSettings) pulumi.BoolOutput { return v.IsImported }).(pulumi.BoolOutput)
}

// The name of the application in New Relic.
func (o ApplicationSettingsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSettings) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
func (o ApplicationSettingsOutput) TracerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSettings) pulumi.StringPtrOutput { return v.TracerType }).(pulumi.StringPtrOutput)
}

// Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
func (o ApplicationSettingsOutput) TransactionTracers() ApplicationSettingsTransactionTracerArrayOutput {
	return o.ApplyT(func(v *ApplicationSettings) ApplicationSettingsTransactionTracerArrayOutput {
		return v.TransactionTracers
	}).(ApplicationSettingsTransactionTracerArrayOutput)
}

// Enable or disable server side monitoring for the New Relic application.
func (o ApplicationSettingsOutput) UseServerSideConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSettings) pulumi.BoolPtrOutput { return v.UseServerSideConfig }).(pulumi.BoolPtrOutput)
}

type ApplicationSettingsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationSettings)(nil)).Elem()
}

func (o ApplicationSettingsArrayOutput) ToApplicationSettingsArrayOutput() ApplicationSettingsArrayOutput {
	return o
}

func (o ApplicationSettingsArrayOutput) ToApplicationSettingsArrayOutputWithContext(ctx context.Context) ApplicationSettingsArrayOutput {
	return o
}

func (o ApplicationSettingsArrayOutput) Index(i pulumi.IntInput) ApplicationSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationSettings {
		return vs[0].([]*ApplicationSettings)[vs[1].(int)]
	}).(ApplicationSettingsOutput)
}

type ApplicationSettingsMapOutput struct{ *pulumi.OutputState }

func (ApplicationSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationSettings)(nil)).Elem()
}

func (o ApplicationSettingsMapOutput) ToApplicationSettingsMapOutput() ApplicationSettingsMapOutput {
	return o
}

func (o ApplicationSettingsMapOutput) ToApplicationSettingsMapOutputWithContext(ctx context.Context) ApplicationSettingsMapOutput {
	return o
}

func (o ApplicationSettingsMapOutput) MapIndex(k pulumi.StringInput) ApplicationSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationSettings {
		return vs[0].(map[string]*ApplicationSettings)[vs[1].(string)]
	}).(ApplicationSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSettingsInput)(nil)).Elem(), &ApplicationSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSettingsArrayInput)(nil)).Elem(), ApplicationSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSettingsMapInput)(nil)).Elem(), ApplicationSettingsMap{})
	pulumi.RegisterOutputType(ApplicationSettingsOutput{})
	pulumi.RegisterOutputType(ApplicationSettingsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSettingsMapOutput{})
}
