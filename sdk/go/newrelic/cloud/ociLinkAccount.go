// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to link an Oracle Cloud Infrastructure (OCI) account to New Relic.
//
// This setup is used to create a provider account with OCI credentials, establishing a relationship between Oracle and New Relic. Additionally, as part of this integration, we store WIF (Workload Identity Federation) credentials which are further used for fetching data and validations, and vault OCIDs corresponding to the vault resource where the New Relic ingest and user keys are stored in the OCI console.
//
// ## Prerequisites
//
// For the `cloud.OciLinkAccount` resource to work properly, you need an OCI tenancy with IAM permissions to create and manage the identity artifacts (client/application, secrets, compartments, and service user) referenced below. OCI provides enterprise-grade cloud services across multiple global regions.
//
// > NOTE: Before using this resource, ensure the New Relic provider is configured with valid credentials.\
// See Getting Started: New Relic provider guide
//
// If you encounter issues or bugs, please open an issue in the GitHub repository.
//
// ### Workload Identity Federation (WIF) Attributes
//
// The following arguments rely on an OCI Identity Domain OAuth2 client set up for workload identity federation (identity propagation): `ociClientId`, `ociClientSecret`, `ociDomainUrl`, and `ociSvcUserName`.
//
// To create and retrieve these values, follow Oracle's guidance for configuring identity propagation / JWT token exchange:
//
// [Oracle documentation: Create an identity propagation trust (JWT token exchange)](https://docs.oracle.com/en-us/iaas/Content/Identity/api-getstarted/json_web_token_exchange.htm#jwt_token_exchange__create-identity-propagation-trust)
//
// WIF configuration steps:
// 1. Create (or identify) an Identity Domain and register an OAuth2 confidential application (client) to represent New Relic ingestion.
// 2. Generate / record the client ID (`ociClientId`) and client secret (`ociClientSecret`). Store the secret securely (e.g., in OCI Vault; reference its OCID via `ingestVaultOcid` / `userVaultOcid` if desired).
// 3. Use the Identity Domain base URL as `ociDomainUrl` (format: `https://idcs-<hash>.identity.oraclecloud.com`).
// 4. Provide / map a service user (or principal) used for workload identity federation as `ociSvcUserName`.
// 5. Ensure the client has the required scopes and the tenancy policies allow the token exchange.
//
// > TIP: Rotating the OAuth2 client secret only requires updating `ociClientSecret`; it does not force resource replacement.
//
// ## Example Usage
//
// Minimal example (required arguments for creation):
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/cloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloud.NewOciLinkAccount(ctx, "example", &cloud.OciLinkAccountArgs{
//				AccountId:       pulumi.String("1234567"),
//				TenantId:        pulumi.String("ocid1.tenancy.oc1..aaaaaaaaexample"),
//				Name:            pulumi.String("my-oci-link"),
//				CompartmentOcid: pulumi.String("ocid1.compartment.oc1..bbbbbbbbexample"),
//				OciClientId:     pulumi.String("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
//				OciClientSecret: pulumi.Any(ociClientSecret),
//				OciDomainUrl:    pulumi.String("https://idcs-1234567890abcdef.identity.oraclecloud.com"),
//				OciHomeRegion:   pulumi.String("us-ashburn-1"),
//				OciSvcUserName:  pulumi.String("svc-newrelic-collector"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Example including optional secret references and update-only fields:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/cloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloud.NewOciLinkAccount(ctx, "full", &cloud.OciLinkAccountArgs{
//				Name:                pulumi.String("my-oci-link-full"),
//				TenantId:            pulumi.String("ocid1.tenancy.oc1..aaaaaaaaexample"),
//				CompartmentOcid:     pulumi.String("ocid1.compartment.oc1..bbbbbbbbexample"),
//				OciClientId:         pulumi.String("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
//				OciClientSecret:     pulumi.Any(ociClientSecret),
//				OciDomainUrl:        pulumi.String("https://idcs-1234567890abcdef.identity.oraclecloud.com"),
//				OciHomeRegion:       pulumi.String("us-ashburn-1"),
//				OciSvcUserName:      pulumi.String("svc-newrelic-collector"),
//				IngestVaultOcid:     pulumi.String("ocid1.vaultsecret.oc1..ccccccccexample"),
//				UserVaultOcid:       pulumi.String("ocid1.vaultsecret.oc1..ddddddddexample"),
//				InstrumentationType: pulumi.String("METRICS,LOGS"),
//				OciRegion:           pulumi.String("us-phoenix-1"),
//				MetricStackOcid:     pulumi.String("ocid1.stack.oc1..eeeeeeeeexample"),
//				LoggingStackOcid:    pulumi.String("ocid1.stack.oc1..ffffffloggingstack"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Linked OCI accounts can be imported using the `id`, e.g.
//
// bash
//
// ```sh
// $ pulumi import newrelic:cloud/ociLinkAccount:OciLinkAccount foo <id>
// ```
type OciLinkAccount struct {
	pulumi.CustomResourceState

	// New Relic account to operate on. Overrides the provider-level `accountId`. If omitted, use the provider default or `NEW_RELIC_ACCOUNT_ID`.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// OCI compartment OCID representing (or containing) the monitored resources/newrelic compartment.
	CompartmentOcid pulumi.StringOutput `pulumi:"compartmentOcid"`
	// Vault secret OCID containing an ingest secret.
	IngestVaultOcid pulumi.StringPtrOutput `pulumi:"ingestVaultOcid"`
	// Specifies the type of integration, such as metrics, logs, or a combination of logs and metrics (e.g., `METRICS`, `LOGS`, `METRICS,LOGS`).
	InstrumentationType pulumi.StringPtrOutput `pulumi:"instrumentationType"`
	// The Logging stack identifier for the OCI account.
	LoggingStackOcid pulumi.StringPtrOutput `pulumi:"loggingStackOcid"`
	// Metric stack OCID (ignored on create, applied on update).
	MetricStackOcid pulumi.StringPtrOutput `pulumi:"metricStackOcid"`
	// Display name for the linked account.
	Name pulumi.StringOutput `pulumi:"name"`
	// OCI Identity Domain (IDCS) OAuth2 client ID used for workload identity federation.
	OciClientId pulumi.StringOutput `pulumi:"ociClientId"`
	// OAuth2 client secret. Not displayed in plans or state outputs.
	OciClientSecret pulumi.StringOutput `pulumi:"ociClientSecret"`
	// Base URL of the OCI Identity Domain (e.g. `https://idcs-<hash>.identity.oraclecloud.com`).
	OciDomainUrl pulumi.StringOutput `pulumi:"ociDomainUrl"`
	// Home region of the tenancy (e.g. `us-ashburn-1`).
	OciHomeRegion pulumi.StringOutput `pulumi:"ociHomeRegion"`
	// OCI region for the linkage (ignored on create, applied on update).
	OciRegion pulumi.StringPtrOutput `pulumi:"ociRegion"`
	// Service user name associated with the WIF configuration.
	OciSvcUserName pulumi.StringOutput `pulumi:"ociSvcUserName"`
	// OCI tenancy OCID (root tenancy). Changing forces a new linked account.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Vault secret OCID containing a user or auxiliary secret.
	UserVaultOcid pulumi.StringPtrOutput `pulumi:"userVaultOcid"`
}

// NewOciLinkAccount registers a new resource with the given unique name, arguments, and options.
func NewOciLinkAccount(ctx *pulumi.Context,
	name string, args *OciLinkAccountArgs, opts ...pulumi.ResourceOption) (*OciLinkAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentOcid == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentOcid'")
	}
	if args.OciClientId == nil {
		return nil, errors.New("invalid value for required argument 'OciClientId'")
	}
	if args.OciClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'OciClientSecret'")
	}
	if args.OciDomainUrl == nil {
		return nil, errors.New("invalid value for required argument 'OciDomainUrl'")
	}
	if args.OciHomeRegion == nil {
		return nil, errors.New("invalid value for required argument 'OciHomeRegion'")
	}
	if args.OciSvcUserName == nil {
		return nil, errors.New("invalid value for required argument 'OciSvcUserName'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.OciClientSecret != nil {
		args.OciClientSecret = pulumi.ToSecret(args.OciClientSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"ociClientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OciLinkAccount
	err := ctx.RegisterResource("newrelic:cloud/ociLinkAccount:OciLinkAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOciLinkAccount gets an existing OciLinkAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOciLinkAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OciLinkAccountState, opts ...pulumi.ResourceOption) (*OciLinkAccount, error) {
	var resource OciLinkAccount
	err := ctx.ReadResource("newrelic:cloud/ociLinkAccount:OciLinkAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OciLinkAccount resources.
type ociLinkAccountState struct {
	// New Relic account to operate on. Overrides the provider-level `accountId`. If omitted, use the provider default or `NEW_RELIC_ACCOUNT_ID`.
	AccountId *string `pulumi:"accountId"`
	// OCI compartment OCID representing (or containing) the monitored resources/newrelic compartment.
	CompartmentOcid *string `pulumi:"compartmentOcid"`
	// Vault secret OCID containing an ingest secret.
	IngestVaultOcid *string `pulumi:"ingestVaultOcid"`
	// Specifies the type of integration, such as metrics, logs, or a combination of logs and metrics (e.g., `METRICS`, `LOGS`, `METRICS,LOGS`).
	InstrumentationType *string `pulumi:"instrumentationType"`
	// The Logging stack identifier for the OCI account.
	LoggingStackOcid *string `pulumi:"loggingStackOcid"`
	// Metric stack OCID (ignored on create, applied on update).
	MetricStackOcid *string `pulumi:"metricStackOcid"`
	// Display name for the linked account.
	Name *string `pulumi:"name"`
	// OCI Identity Domain (IDCS) OAuth2 client ID used for workload identity federation.
	OciClientId *string `pulumi:"ociClientId"`
	// OAuth2 client secret. Not displayed in plans or state outputs.
	OciClientSecret *string `pulumi:"ociClientSecret"`
	// Base URL of the OCI Identity Domain (e.g. `https://idcs-<hash>.identity.oraclecloud.com`).
	OciDomainUrl *string `pulumi:"ociDomainUrl"`
	// Home region of the tenancy (e.g. `us-ashburn-1`).
	OciHomeRegion *string `pulumi:"ociHomeRegion"`
	// OCI region for the linkage (ignored on create, applied on update).
	OciRegion *string `pulumi:"ociRegion"`
	// Service user name associated with the WIF configuration.
	OciSvcUserName *string `pulumi:"ociSvcUserName"`
	// OCI tenancy OCID (root tenancy). Changing forces a new linked account.
	TenantId *string `pulumi:"tenantId"`
	// Vault secret OCID containing a user or auxiliary secret.
	UserVaultOcid *string `pulumi:"userVaultOcid"`
}

type OciLinkAccountState struct {
	// New Relic account to operate on. Overrides the provider-level `accountId`. If omitted, use the provider default or `NEW_RELIC_ACCOUNT_ID`.
	AccountId pulumi.StringPtrInput
	// OCI compartment OCID representing (or containing) the monitored resources/newrelic compartment.
	CompartmentOcid pulumi.StringPtrInput
	// Vault secret OCID containing an ingest secret.
	IngestVaultOcid pulumi.StringPtrInput
	// Specifies the type of integration, such as metrics, logs, or a combination of logs and metrics (e.g., `METRICS`, `LOGS`, `METRICS,LOGS`).
	InstrumentationType pulumi.StringPtrInput
	// The Logging stack identifier for the OCI account.
	LoggingStackOcid pulumi.StringPtrInput
	// Metric stack OCID (ignored on create, applied on update).
	MetricStackOcid pulumi.StringPtrInput
	// Display name for the linked account.
	Name pulumi.StringPtrInput
	// OCI Identity Domain (IDCS) OAuth2 client ID used for workload identity federation.
	OciClientId pulumi.StringPtrInput
	// OAuth2 client secret. Not displayed in plans or state outputs.
	OciClientSecret pulumi.StringPtrInput
	// Base URL of the OCI Identity Domain (e.g. `https://idcs-<hash>.identity.oraclecloud.com`).
	OciDomainUrl pulumi.StringPtrInput
	// Home region of the tenancy (e.g. `us-ashburn-1`).
	OciHomeRegion pulumi.StringPtrInput
	// OCI region for the linkage (ignored on create, applied on update).
	OciRegion pulumi.StringPtrInput
	// Service user name associated with the WIF configuration.
	OciSvcUserName pulumi.StringPtrInput
	// OCI tenancy OCID (root tenancy). Changing forces a new linked account.
	TenantId pulumi.StringPtrInput
	// Vault secret OCID containing a user or auxiliary secret.
	UserVaultOcid pulumi.StringPtrInput
}

func (OciLinkAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*ociLinkAccountState)(nil)).Elem()
}

type ociLinkAccountArgs struct {
	// New Relic account to operate on. Overrides the provider-level `accountId`. If omitted, use the provider default or `NEW_RELIC_ACCOUNT_ID`.
	AccountId *string `pulumi:"accountId"`
	// OCI compartment OCID representing (or containing) the monitored resources/newrelic compartment.
	CompartmentOcid string `pulumi:"compartmentOcid"`
	// Vault secret OCID containing an ingest secret.
	IngestVaultOcid *string `pulumi:"ingestVaultOcid"`
	// Specifies the type of integration, such as metrics, logs, or a combination of logs and metrics (e.g., `METRICS`, `LOGS`, `METRICS,LOGS`).
	InstrumentationType *string `pulumi:"instrumentationType"`
	// The Logging stack identifier for the OCI account.
	LoggingStackOcid *string `pulumi:"loggingStackOcid"`
	// Metric stack OCID (ignored on create, applied on update).
	MetricStackOcid *string `pulumi:"metricStackOcid"`
	// Display name for the linked account.
	Name *string `pulumi:"name"`
	// OCI Identity Domain (IDCS) OAuth2 client ID used for workload identity federation.
	OciClientId string `pulumi:"ociClientId"`
	// OAuth2 client secret. Not displayed in plans or state outputs.
	OciClientSecret string `pulumi:"ociClientSecret"`
	// Base URL of the OCI Identity Domain (e.g. `https://idcs-<hash>.identity.oraclecloud.com`).
	OciDomainUrl string `pulumi:"ociDomainUrl"`
	// Home region of the tenancy (e.g. `us-ashburn-1`).
	OciHomeRegion string `pulumi:"ociHomeRegion"`
	// OCI region for the linkage (ignored on create, applied on update).
	OciRegion *string `pulumi:"ociRegion"`
	// Service user name associated with the WIF configuration.
	OciSvcUserName string `pulumi:"ociSvcUserName"`
	// OCI tenancy OCID (root tenancy). Changing forces a new linked account.
	TenantId string `pulumi:"tenantId"`
	// Vault secret OCID containing a user or auxiliary secret.
	UserVaultOcid *string `pulumi:"userVaultOcid"`
}

// The set of arguments for constructing a OciLinkAccount resource.
type OciLinkAccountArgs struct {
	// New Relic account to operate on. Overrides the provider-level `accountId`. If omitted, use the provider default or `NEW_RELIC_ACCOUNT_ID`.
	AccountId pulumi.StringPtrInput
	// OCI compartment OCID representing (or containing) the monitored resources/newrelic compartment.
	CompartmentOcid pulumi.StringInput
	// Vault secret OCID containing an ingest secret.
	IngestVaultOcid pulumi.StringPtrInput
	// Specifies the type of integration, such as metrics, logs, or a combination of logs and metrics (e.g., `METRICS`, `LOGS`, `METRICS,LOGS`).
	InstrumentationType pulumi.StringPtrInput
	// The Logging stack identifier for the OCI account.
	LoggingStackOcid pulumi.StringPtrInput
	// Metric stack OCID (ignored on create, applied on update).
	MetricStackOcid pulumi.StringPtrInput
	// Display name for the linked account.
	Name pulumi.StringPtrInput
	// OCI Identity Domain (IDCS) OAuth2 client ID used for workload identity federation.
	OciClientId pulumi.StringInput
	// OAuth2 client secret. Not displayed in plans or state outputs.
	OciClientSecret pulumi.StringInput
	// Base URL of the OCI Identity Domain (e.g. `https://idcs-<hash>.identity.oraclecloud.com`).
	OciDomainUrl pulumi.StringInput
	// Home region of the tenancy (e.g. `us-ashburn-1`).
	OciHomeRegion pulumi.StringInput
	// OCI region for the linkage (ignored on create, applied on update).
	OciRegion pulumi.StringPtrInput
	// Service user name associated with the WIF configuration.
	OciSvcUserName pulumi.StringInput
	// OCI tenancy OCID (root tenancy). Changing forces a new linked account.
	TenantId pulumi.StringInput
	// Vault secret OCID containing a user or auxiliary secret.
	UserVaultOcid pulumi.StringPtrInput
}

func (OciLinkAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ociLinkAccountArgs)(nil)).Elem()
}

type OciLinkAccountInput interface {
	pulumi.Input

	ToOciLinkAccountOutput() OciLinkAccountOutput
	ToOciLinkAccountOutputWithContext(ctx context.Context) OciLinkAccountOutput
}

func (*OciLinkAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**OciLinkAccount)(nil)).Elem()
}

func (i *OciLinkAccount) ToOciLinkAccountOutput() OciLinkAccountOutput {
	return i.ToOciLinkAccountOutputWithContext(context.Background())
}

func (i *OciLinkAccount) ToOciLinkAccountOutputWithContext(ctx context.Context) OciLinkAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OciLinkAccountOutput)
}

// OciLinkAccountArrayInput is an input type that accepts OciLinkAccountArray and OciLinkAccountArrayOutput values.
// You can construct a concrete instance of `OciLinkAccountArrayInput` via:
//
//	OciLinkAccountArray{ OciLinkAccountArgs{...} }
type OciLinkAccountArrayInput interface {
	pulumi.Input

	ToOciLinkAccountArrayOutput() OciLinkAccountArrayOutput
	ToOciLinkAccountArrayOutputWithContext(context.Context) OciLinkAccountArrayOutput
}

type OciLinkAccountArray []OciLinkAccountInput

func (OciLinkAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OciLinkAccount)(nil)).Elem()
}

func (i OciLinkAccountArray) ToOciLinkAccountArrayOutput() OciLinkAccountArrayOutput {
	return i.ToOciLinkAccountArrayOutputWithContext(context.Background())
}

func (i OciLinkAccountArray) ToOciLinkAccountArrayOutputWithContext(ctx context.Context) OciLinkAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OciLinkAccountArrayOutput)
}

// OciLinkAccountMapInput is an input type that accepts OciLinkAccountMap and OciLinkAccountMapOutput values.
// You can construct a concrete instance of `OciLinkAccountMapInput` via:
//
//	OciLinkAccountMap{ "key": OciLinkAccountArgs{...} }
type OciLinkAccountMapInput interface {
	pulumi.Input

	ToOciLinkAccountMapOutput() OciLinkAccountMapOutput
	ToOciLinkAccountMapOutputWithContext(context.Context) OciLinkAccountMapOutput
}

type OciLinkAccountMap map[string]OciLinkAccountInput

func (OciLinkAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OciLinkAccount)(nil)).Elem()
}

func (i OciLinkAccountMap) ToOciLinkAccountMapOutput() OciLinkAccountMapOutput {
	return i.ToOciLinkAccountMapOutputWithContext(context.Background())
}

func (i OciLinkAccountMap) ToOciLinkAccountMapOutputWithContext(ctx context.Context) OciLinkAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OciLinkAccountMapOutput)
}

type OciLinkAccountOutput struct{ *pulumi.OutputState }

func (OciLinkAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OciLinkAccount)(nil)).Elem()
}

func (o OciLinkAccountOutput) ToOciLinkAccountOutput() OciLinkAccountOutput {
	return o
}

func (o OciLinkAccountOutput) ToOciLinkAccountOutputWithContext(ctx context.Context) OciLinkAccountOutput {
	return o
}

// New Relic account to operate on. Overrides the provider-level `accountId`. If omitted, use the provider default or `NEW_RELIC_ACCOUNT_ID`.
func (o OciLinkAccountOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *OciLinkAccount) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// OCI compartment OCID representing (or containing) the monitored resources/newrelic compartment.
func (o OciLinkAccountOutput) CompartmentOcid() pulumi.StringOutput {
	return o.ApplyT(func(v *OciLinkAccount) pulumi.StringOutput { return v.CompartmentOcid }).(pulumi.StringOutput)
}

// Vault secret OCID containing an ingest secret.
func (o OciLinkAccountOutput) IngestVaultOcid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OciLinkAccount) pulumi.StringPtrOutput { return v.IngestVaultOcid }).(pulumi.StringPtrOutput)
}

// Specifies the type of integration, such as metrics, logs, or a combination of logs and metrics (e.g., `METRICS`, `LOGS`, `METRICS,LOGS`).
func (o OciLinkAccountOutput) InstrumentationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OciLinkAccount) pulumi.StringPtrOutput { return v.InstrumentationType }).(pulumi.StringPtrOutput)
}

// The Logging stack identifier for the OCI account.
func (o OciLinkAccountOutput) LoggingStackOcid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OciLinkAccount) pulumi.StringPtrOutput { return v.LoggingStackOcid }).(pulumi.StringPtrOutput)
}

// Metric stack OCID (ignored on create, applied on update).
func (o OciLinkAccountOutput) MetricStackOcid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OciLinkAccount) pulumi.StringPtrOutput { return v.MetricStackOcid }).(pulumi.StringPtrOutput)
}

// Display name for the linked account.
func (o OciLinkAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OciLinkAccount) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// OCI Identity Domain (IDCS) OAuth2 client ID used for workload identity federation.
func (o OciLinkAccountOutput) OciClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *OciLinkAccount) pulumi.StringOutput { return v.OciClientId }).(pulumi.StringOutput)
}

// OAuth2 client secret. Not displayed in plans or state outputs.
func (o OciLinkAccountOutput) OciClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *OciLinkAccount) pulumi.StringOutput { return v.OciClientSecret }).(pulumi.StringOutput)
}

// Base URL of the OCI Identity Domain (e.g. `https://idcs-<hash>.identity.oraclecloud.com`).
func (o OciLinkAccountOutput) OciDomainUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *OciLinkAccount) pulumi.StringOutput { return v.OciDomainUrl }).(pulumi.StringOutput)
}

// Home region of the tenancy (e.g. `us-ashburn-1`).
func (o OciLinkAccountOutput) OciHomeRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *OciLinkAccount) pulumi.StringOutput { return v.OciHomeRegion }).(pulumi.StringOutput)
}

// OCI region for the linkage (ignored on create, applied on update).
func (o OciLinkAccountOutput) OciRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OciLinkAccount) pulumi.StringPtrOutput { return v.OciRegion }).(pulumi.StringPtrOutput)
}

// Service user name associated with the WIF configuration.
func (o OciLinkAccountOutput) OciSvcUserName() pulumi.StringOutput {
	return o.ApplyT(func(v *OciLinkAccount) pulumi.StringOutput { return v.OciSvcUserName }).(pulumi.StringOutput)
}

// OCI tenancy OCID (root tenancy). Changing forces a new linked account.
func (o OciLinkAccountOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *OciLinkAccount) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Vault secret OCID containing a user or auxiliary secret.
func (o OciLinkAccountOutput) UserVaultOcid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OciLinkAccount) pulumi.StringPtrOutput { return v.UserVaultOcid }).(pulumi.StringPtrOutput)
}

type OciLinkAccountArrayOutput struct{ *pulumi.OutputState }

func (OciLinkAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OciLinkAccount)(nil)).Elem()
}

func (o OciLinkAccountArrayOutput) ToOciLinkAccountArrayOutput() OciLinkAccountArrayOutput {
	return o
}

func (o OciLinkAccountArrayOutput) ToOciLinkAccountArrayOutputWithContext(ctx context.Context) OciLinkAccountArrayOutput {
	return o
}

func (o OciLinkAccountArrayOutput) Index(i pulumi.IntInput) OciLinkAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OciLinkAccount {
		return vs[0].([]*OciLinkAccount)[vs[1].(int)]
	}).(OciLinkAccountOutput)
}

type OciLinkAccountMapOutput struct{ *pulumi.OutputState }

func (OciLinkAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OciLinkAccount)(nil)).Elem()
}

func (o OciLinkAccountMapOutput) ToOciLinkAccountMapOutput() OciLinkAccountMapOutput {
	return o
}

func (o OciLinkAccountMapOutput) ToOciLinkAccountMapOutputWithContext(ctx context.Context) OciLinkAccountMapOutput {
	return o
}

func (o OciLinkAccountMapOutput) MapIndex(k pulumi.StringInput) OciLinkAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OciLinkAccount {
		return vs[0].(map[string]*OciLinkAccount)[vs[1].(string)]
	}).(OciLinkAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OciLinkAccountInput)(nil)).Elem(), &OciLinkAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*OciLinkAccountArrayInput)(nil)).Elem(), OciLinkAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OciLinkAccountMapInput)(nil)).Elem(), OciLinkAccountMap{})
	pulumi.RegisterOutputType(OciLinkAccountOutput{})
	pulumi.RegisterOutputType(OciLinkAccountArrayOutput{})
	pulumi.RegisterOutputType(OciLinkAccountMapOutput{})
}
