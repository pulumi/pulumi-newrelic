// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Use this data source to get information about a specific entity in New Relic One that already exists.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "APM"
// 		opt1 := "APPLICATION"
// 		_, err := newrelic.GetEntity(ctx, &newrelic.GetEntityArgs{
// 			Name:   "my-app",
// 			Domain: &opt0,
// 			Type:   &opt1,
// 			Tag: newrelic.GetEntityTag{
// 				Key:   "my-tag",
// 				Value: "my-tag-value",
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		fooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, "fooAlertPolicy", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = newrelic.NewAlertCondition(ctx, "fooAlertCondition", &newrelic.AlertConditionArgs{
// 			PolicyId: fooAlertPolicy.ID(),
// 			Type:     pulumi.String("apm_app_metric"),
// 			Entities: pulumi.IntArray{
// 				pulumi.String(data.Newrelic_application.App.Application_id),
// 			},
// 			Metric:     pulumi.String("apdex"),
// 			RunbookUrl: pulumi.String("https://www.example.com"),
// 			Terms: newrelic.AlertConditionTermArray{
// 				&newrelic.AlertConditionTermArgs{
// 					Duration:     pulumi.Int(5),
// 					Operator:     pulumi.String("below"),
// 					Priority:     pulumi.String("critical"),
// 					Threshold:    pulumi.Float64(0.75),
// 					TimeFunction: pulumi.String("all"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetEntity(ctx *pulumi.Context, args *GetEntityArgs, opts ...pulumi.InvokeOption) (*GetEntityResult, error) {
	var rv GetEntityResult
	err := ctx.Invoke("newrelic:index/getEntity:getEntity", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEntity.
type GetEntityArgs struct {
	// The entity's domain. Valid values are APM, BROWSER, INFRA, MOBILE, and SYNTH.
	Domain *string `pulumi:"domain"`
	// The name of the entity in New Relic One.  The first entity matching this name for the given search parameters will be returned.
	Name string        `pulumi:"name"`
	Tag  *GetEntityTag `pulumi:"tag"`
	// The entity's type. Valid values are APPLICATION, DASHBOARD, HOST, MONITOR, and WORRKLOAD.
	Type *string `pulumi:"type"`
}

// A collection of values returned by getEntity.
type GetEntityResult struct {
	// The New Relic account ID associated with this entity.
	AccountId int `pulumi:"accountId"`
	// The domain-specific application ID of the entity. Only returned for APM and Browser applications.
	ApplicationId int    `pulumi:"applicationId"`
	Domain        string `pulumi:"domain"`
	// The unique GUID of the entity.
	Guid string `pulumi:"guid"`
	// The provider-assigned unique ID for this managed resource.
	Id   string        `pulumi:"id"`
	Name string        `pulumi:"name"`
	Tag  *GetEntityTag `pulumi:"tag"`
	Type string        `pulumi:"type"`
}
