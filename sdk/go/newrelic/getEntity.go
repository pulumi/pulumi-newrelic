// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about a specific entity in New Relic One that already exists.
//
// ### Example: Filter By Account ID
//
// The default behaviour of this data source is to retrieve entities matching the specified parameters (such as `name`, `domain`, `type`) from NerdGraph with the credentials specified in the configuration of the provider (account ID and API Key), filter them by the account ID specified in the configuration of the provider, and return the first match.
//
// This would mean, if no entity with the specified search parameters is found associated with the account ID in the configuration of the provider, i.e. `NEW_RELIC_ACCOUNT_ID`, an error is thrown, stating that no matching entity has been found.
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := newrelic.GetEntity(ctx, &newrelic.GetEntityArgs{
//				Domain: pulumi.StringRef("APM"),
//				Name:   "my-app",
//				Type:   pulumi.StringRef("APPLICATION"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
// However, in order to cater to scenarios in which it could be necessary to retrieve an entity belonging to a subaccount using the account ID and API Key of the parent account (for instance, when entities with identical names are present in both the parent account and subaccounts, since matching entities from subaccounts too are returned by NerdGraph), the `accountId` attribute of this data source may be availed. This ensures that the account ID in the configuration of the provider, used to filter entities returned by the API is now overridden by the `accountId` specified in the configuration; i.e., in the below example, the data source would now return an entity matching the specified `name`, belonging to the account with the ID `accountId`.
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := newrelic.GetEntity(ctx, &newrelic.GetEntityArgs{
//				AccountId: pulumi.IntRef(654321),
//				Domain:    pulumi.StringRef("APM"),
//				Name:      "my-app",
//				Type:      pulumi.StringRef("APPLICATION"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
// The following example explains a use case along the lines of the aforementioned; using the `accountId` argument in the data source to allow the filtering criteria to be the `accountId` specified (of the subaccount), and not the account ID in the provider configuration.
//
// In simpler terms, when entities are queried from the parent account, entities with matching names are returned from subaccounts too, hence, specifying the `accountId` of the subaccount in the configuration allows the entity returned to belong to the subaccount with `accountId`.
// ### Query for an OTEL entity
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := newrelic.GetEntity(ctx, &newrelic.GetEntityArgs{
//				Domain: pulumi.StringRef("EXT"),
//				Name:   "my-otel-app",
//				Tags: []newrelic.GetEntityTag{
//					{
//						Key:   "accountID",
//						Value: "12345",
//					},
//				},
//				Type: pulumi.StringRef("SERVICE"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Query for an entity by type (AWS Lambda entity in this example)
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := newrelic.GetEntity(ctx, &newrelic.GetEntityArgs{
//				Name: "my_lambda_trace",
//				Type: pulumi.StringRef("AWSLAMBDAFUNCTION"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetEntity(ctx *pulumi.Context, args *GetEntityArgs, opts ...pulumi.InvokeOption) (*GetEntityResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetEntityResult
	err := ctx.Invoke("newrelic:index/getEntity:getEntity", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEntity.
type GetEntityArgs struct {
	// The New Relic account ID the entity to be returned would be associated with, i.e. if specified, the data source would filter matching entities received by `accountId` and return the first match. If not, matching entities are filtered by the account ID specified in the configuration of the provider. See the **Example: Filter By Account ID** section above for more details.
	AccountId *int `pulumi:"accountId"`
	// The entity's domain. Valid values are APM, BROWSER, INFRA, MOBILE, SYNTH, and EXT. If not specified, all domains are searched.
	Domain *string `pulumi:"domain"`
	// Ignore case of the `name` when searching for the entity. Defaults to false.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// The name of the entity in New Relic One.  The first entity matching this name for the given search parameters will be returned.
	Name string `pulumi:"name"`
	// A tag applied to the entity. See Nested tag blocks below for details.
	Tags []GetEntityTag `pulumi:"tags"`
	// The entity's type. Valid values are APPLICATION, DASHBOARD, HOST, MONITOR, WORKLOAD, AWSLAMBDAFUNCTION, SERVICE_LEVEL, and KEY_TRANSACTION. Note: Other entity types may also be queryable as the list of entity types may fluctuate over time.
	Type *string `pulumi:"type"`
}

// A collection of values returned by getEntity.
type GetEntityResult struct {
	AccountId int `pulumi:"accountId"`
	// The domain-specific application ID of the entity. Only returned for APM and Browser applications.
	ApplicationId int    `pulumi:"applicationId"`
	Domain        string `pulumi:"domain"`
	// The unique GUID of the entity.
	Guid string `pulumi:"guid"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	IgnoreCase *bool  `pulumi:"ignoreCase"`
	Name       string `pulumi:"name"`
	// The browser-specific ID of the backing APM entity. Only returned for Browser applications.
	ServingApmApplicationId int            `pulumi:"servingApmApplicationId"`
	Tags                    []GetEntityTag `pulumi:"tags"`
	Type                    string         `pulumi:"type"`
}

func GetEntityOutput(ctx *pulumi.Context, args GetEntityOutputArgs, opts ...pulumi.InvokeOption) GetEntityResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetEntityResult, error) {
			args := v.(GetEntityArgs)
			r, err := GetEntity(ctx, &args, opts...)
			var s GetEntityResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetEntityResultOutput)
}

// A collection of arguments for invoking getEntity.
type GetEntityOutputArgs struct {
	// The New Relic account ID the entity to be returned would be associated with, i.e. if specified, the data source would filter matching entities received by `accountId` and return the first match. If not, matching entities are filtered by the account ID specified in the configuration of the provider. See the **Example: Filter By Account ID** section above for more details.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// The entity's domain. Valid values are APM, BROWSER, INFRA, MOBILE, SYNTH, and EXT. If not specified, all domains are searched.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Ignore case of the `name` when searching for the entity. Defaults to false.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// The name of the entity in New Relic One.  The first entity matching this name for the given search parameters will be returned.
	Name pulumi.StringInput `pulumi:"name"`
	// A tag applied to the entity. See Nested tag blocks below for details.
	Tags GetEntityTagArrayInput `pulumi:"tags"`
	// The entity's type. Valid values are APPLICATION, DASHBOARD, HOST, MONITOR, WORKLOAD, AWSLAMBDAFUNCTION, SERVICE_LEVEL, and KEY_TRANSACTION. Note: Other entity types may also be queryable as the list of entity types may fluctuate over time.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GetEntityOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEntityArgs)(nil)).Elem()
}

// A collection of values returned by getEntity.
type GetEntityResultOutput struct{ *pulumi.OutputState }

func (GetEntityResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEntityResult)(nil)).Elem()
}

func (o GetEntityResultOutput) ToGetEntityResultOutput() GetEntityResultOutput {
	return o
}

func (o GetEntityResultOutput) ToGetEntityResultOutputWithContext(ctx context.Context) GetEntityResultOutput {
	return o
}

func (o GetEntityResultOutput) AccountId() pulumi.IntOutput {
	return o.ApplyT(func(v GetEntityResult) int { return v.AccountId }).(pulumi.IntOutput)
}

// The domain-specific application ID of the entity. Only returned for APM and Browser applications.
func (o GetEntityResultOutput) ApplicationId() pulumi.IntOutput {
	return o.ApplyT(func(v GetEntityResult) int { return v.ApplicationId }).(pulumi.IntOutput)
}

func (o GetEntityResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetEntityResult) string { return v.Domain }).(pulumi.StringOutput)
}

// The unique GUID of the entity.
func (o GetEntityResultOutput) Guid() pulumi.StringOutput {
	return o.ApplyT(func(v GetEntityResult) string { return v.Guid }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetEntityResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEntityResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetEntityResultOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetEntityResult) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

func (o GetEntityResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetEntityResult) string { return v.Name }).(pulumi.StringOutput)
}

// The browser-specific ID of the backing APM entity. Only returned for Browser applications.
func (o GetEntityResultOutput) ServingApmApplicationId() pulumi.IntOutput {
	return o.ApplyT(func(v GetEntityResult) int { return v.ServingApmApplicationId }).(pulumi.IntOutput)
}

func (o GetEntityResultOutput) Tags() GetEntityTagArrayOutput {
	return o.ApplyT(func(v GetEntityResult) []GetEntityTag { return v.Tags }).(GetEntityTagArrayOutput)
}

func (o GetEntityResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetEntityResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetEntityResultOutput{})
}
