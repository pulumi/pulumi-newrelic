// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synthetics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about a specific Synthetics monitor private location in New Relic that already exists.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := synthetics.LookupPrivateLocation(ctx, &synthetics.LookupPrivateLocationArgs{
//				AccountId: pulumi.StringRef("123456"),
//				Name:      "My private location",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = synthetics.NewMonitor(ctx, "foo", &synthetics.MonitorArgs{
//				LocationsPrivates: pulumi.StringArray{
//					pulumi.String(example.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := synthetics.LookupPrivateLocation(ctx, &synthetics.LookupPrivateLocationArgs{
//				AccountId: pulumi.StringRef("123456"),
//				Name:      "My private location",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = synthetics.NewStepMonitor(ctx, "foo", &synthetics.StepMonitorArgs{
//				LocationPrivates: synthetics.StepMonitorLocationPrivateArray{
//					&synthetics.StepMonitorLocationPrivateArgs{
//						Guid: pulumi.String(example.Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPrivateLocation(ctx *pulumi.Context, args *LookupPrivateLocationArgs, opts ...pulumi.InvokeOption) (*LookupPrivateLocationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPrivateLocationResult
	err := ctx.Invoke("newrelic:synthetics/getPrivateLocation:getPrivateLocation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPrivateLocation.
type LookupPrivateLocationArgs struct {
	// The New Relic account ID of the associated private location. If left empty will default to account ID specified in provider level configuration.
	AccountId *string `pulumi:"accountId"`
	// The key of the private location.
	Keys []string `pulumi:"keys"`
	// The name of the Synthetics monitor private location.
	Name string `pulumi:"name"`
}

// A collection of values returned by getPrivateLocation.
type LookupPrivateLocationResult struct {
	AccountId *string `pulumi:"accountId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The key of the private location.
	Keys []string `pulumi:"keys"`
	Name string   `pulumi:"name"`
}

func LookupPrivateLocationOutput(ctx *pulumi.Context, args LookupPrivateLocationOutputArgs, opts ...pulumi.InvokeOption) LookupPrivateLocationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPrivateLocationResultOutput, error) {
			args := v.(LookupPrivateLocationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("newrelic:synthetics/getPrivateLocation:getPrivateLocation", args, LookupPrivateLocationResultOutput{}, options).(LookupPrivateLocationResultOutput), nil
		}).(LookupPrivateLocationResultOutput)
}

// A collection of arguments for invoking getPrivateLocation.
type LookupPrivateLocationOutputArgs struct {
	// The New Relic account ID of the associated private location. If left empty will default to account ID specified in provider level configuration.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// The key of the private location.
	Keys pulumi.StringArrayInput `pulumi:"keys"`
	// The name of the Synthetics monitor private location.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupPrivateLocationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPrivateLocationArgs)(nil)).Elem()
}

// A collection of values returned by getPrivateLocation.
type LookupPrivateLocationResultOutput struct{ *pulumi.OutputState }

func (LookupPrivateLocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPrivateLocationResult)(nil)).Elem()
}

func (o LookupPrivateLocationResultOutput) ToLookupPrivateLocationResultOutput() LookupPrivateLocationResultOutput {
	return o
}

func (o LookupPrivateLocationResultOutput) ToLookupPrivateLocationResultOutputWithContext(ctx context.Context) LookupPrivateLocationResultOutput {
	return o
}

func (o LookupPrivateLocationResultOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPrivateLocationResult) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPrivateLocationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrivateLocationResult) string { return v.Id }).(pulumi.StringOutput)
}

// The key of the private location.
func (o LookupPrivateLocationResultOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPrivateLocationResult) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

func (o LookupPrivateLocationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrivateLocationResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPrivateLocationResultOutput{})
}
