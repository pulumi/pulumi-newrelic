// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synthetics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type BrokenLinksMonitorTag struct {
	// Name of the tag key.
	Key string `pulumi:"key"`
	// Values associated with the tag key.
	Values []string `pulumi:"values"`
}

// BrokenLinksMonitorTagInput is an input type that accepts BrokenLinksMonitorTagArgs and BrokenLinksMonitorTagOutput values.
// You can construct a concrete instance of `BrokenLinksMonitorTagInput` via:
//
//	BrokenLinksMonitorTagArgs{...}
type BrokenLinksMonitorTagInput interface {
	pulumi.Input

	ToBrokenLinksMonitorTagOutput() BrokenLinksMonitorTagOutput
	ToBrokenLinksMonitorTagOutputWithContext(context.Context) BrokenLinksMonitorTagOutput
}

type BrokenLinksMonitorTagArgs struct {
	// Name of the tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// Values associated with the tag key.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (BrokenLinksMonitorTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokenLinksMonitorTag)(nil)).Elem()
}

func (i BrokenLinksMonitorTagArgs) ToBrokenLinksMonitorTagOutput() BrokenLinksMonitorTagOutput {
	return i.ToBrokenLinksMonitorTagOutputWithContext(context.Background())
}

func (i BrokenLinksMonitorTagArgs) ToBrokenLinksMonitorTagOutputWithContext(ctx context.Context) BrokenLinksMonitorTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokenLinksMonitorTagOutput)
}

// BrokenLinksMonitorTagArrayInput is an input type that accepts BrokenLinksMonitorTagArray and BrokenLinksMonitorTagArrayOutput values.
// You can construct a concrete instance of `BrokenLinksMonitorTagArrayInput` via:
//
//	BrokenLinksMonitorTagArray{ BrokenLinksMonitorTagArgs{...} }
type BrokenLinksMonitorTagArrayInput interface {
	pulumi.Input

	ToBrokenLinksMonitorTagArrayOutput() BrokenLinksMonitorTagArrayOutput
	ToBrokenLinksMonitorTagArrayOutputWithContext(context.Context) BrokenLinksMonitorTagArrayOutput
}

type BrokenLinksMonitorTagArray []BrokenLinksMonitorTagInput

func (BrokenLinksMonitorTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokenLinksMonitorTag)(nil)).Elem()
}

func (i BrokenLinksMonitorTagArray) ToBrokenLinksMonitorTagArrayOutput() BrokenLinksMonitorTagArrayOutput {
	return i.ToBrokenLinksMonitorTagArrayOutputWithContext(context.Background())
}

func (i BrokenLinksMonitorTagArray) ToBrokenLinksMonitorTagArrayOutputWithContext(ctx context.Context) BrokenLinksMonitorTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokenLinksMonitorTagArrayOutput)
}

type BrokenLinksMonitorTagOutput struct{ *pulumi.OutputState }

func (BrokenLinksMonitorTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokenLinksMonitorTag)(nil)).Elem()
}

func (o BrokenLinksMonitorTagOutput) ToBrokenLinksMonitorTagOutput() BrokenLinksMonitorTagOutput {
	return o
}

func (o BrokenLinksMonitorTagOutput) ToBrokenLinksMonitorTagOutputWithContext(ctx context.Context) BrokenLinksMonitorTagOutput {
	return o
}

// Name of the tag key.
func (o BrokenLinksMonitorTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v BrokenLinksMonitorTag) string { return v.Key }).(pulumi.StringOutput)
}

// Values associated with the tag key.
func (o BrokenLinksMonitorTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BrokenLinksMonitorTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type BrokenLinksMonitorTagArrayOutput struct{ *pulumi.OutputState }

func (BrokenLinksMonitorTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokenLinksMonitorTag)(nil)).Elem()
}

func (o BrokenLinksMonitorTagArrayOutput) ToBrokenLinksMonitorTagArrayOutput() BrokenLinksMonitorTagArrayOutput {
	return o
}

func (o BrokenLinksMonitorTagArrayOutput) ToBrokenLinksMonitorTagArrayOutputWithContext(ctx context.Context) BrokenLinksMonitorTagArrayOutput {
	return o
}

func (o BrokenLinksMonitorTagArrayOutput) Index(i pulumi.IntInput) BrokenLinksMonitorTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BrokenLinksMonitorTag {
		return vs[0].([]BrokenLinksMonitorTag)[vs[1].(int)]
	}).(BrokenLinksMonitorTagOutput)
}

type CertCheckMonitorTag struct {
	// Name of the tag key.
	Key string `pulumi:"key"`
	// Values associated with the tag key.
	Values []string `pulumi:"values"`
}

// CertCheckMonitorTagInput is an input type that accepts CertCheckMonitorTagArgs and CertCheckMonitorTagOutput values.
// You can construct a concrete instance of `CertCheckMonitorTagInput` via:
//
//	CertCheckMonitorTagArgs{...}
type CertCheckMonitorTagInput interface {
	pulumi.Input

	ToCertCheckMonitorTagOutput() CertCheckMonitorTagOutput
	ToCertCheckMonitorTagOutputWithContext(context.Context) CertCheckMonitorTagOutput
}

type CertCheckMonitorTagArgs struct {
	// Name of the tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// Values associated with the tag key.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CertCheckMonitorTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertCheckMonitorTag)(nil)).Elem()
}

func (i CertCheckMonitorTagArgs) ToCertCheckMonitorTagOutput() CertCheckMonitorTagOutput {
	return i.ToCertCheckMonitorTagOutputWithContext(context.Background())
}

func (i CertCheckMonitorTagArgs) ToCertCheckMonitorTagOutputWithContext(ctx context.Context) CertCheckMonitorTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertCheckMonitorTagOutput)
}

// CertCheckMonitorTagArrayInput is an input type that accepts CertCheckMonitorTagArray and CertCheckMonitorTagArrayOutput values.
// You can construct a concrete instance of `CertCheckMonitorTagArrayInput` via:
//
//	CertCheckMonitorTagArray{ CertCheckMonitorTagArgs{...} }
type CertCheckMonitorTagArrayInput interface {
	pulumi.Input

	ToCertCheckMonitorTagArrayOutput() CertCheckMonitorTagArrayOutput
	ToCertCheckMonitorTagArrayOutputWithContext(context.Context) CertCheckMonitorTagArrayOutput
}

type CertCheckMonitorTagArray []CertCheckMonitorTagInput

func (CertCheckMonitorTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertCheckMonitorTag)(nil)).Elem()
}

func (i CertCheckMonitorTagArray) ToCertCheckMonitorTagArrayOutput() CertCheckMonitorTagArrayOutput {
	return i.ToCertCheckMonitorTagArrayOutputWithContext(context.Background())
}

func (i CertCheckMonitorTagArray) ToCertCheckMonitorTagArrayOutputWithContext(ctx context.Context) CertCheckMonitorTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertCheckMonitorTagArrayOutput)
}

type CertCheckMonitorTagOutput struct{ *pulumi.OutputState }

func (CertCheckMonitorTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertCheckMonitorTag)(nil)).Elem()
}

func (o CertCheckMonitorTagOutput) ToCertCheckMonitorTagOutput() CertCheckMonitorTagOutput {
	return o
}

func (o CertCheckMonitorTagOutput) ToCertCheckMonitorTagOutputWithContext(ctx context.Context) CertCheckMonitorTagOutput {
	return o
}

// Name of the tag key.
func (o CertCheckMonitorTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CertCheckMonitorTag) string { return v.Key }).(pulumi.StringOutput)
}

// Values associated with the tag key.
func (o CertCheckMonitorTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertCheckMonitorTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type CertCheckMonitorTagArrayOutput struct{ *pulumi.OutputState }

func (CertCheckMonitorTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertCheckMonitorTag)(nil)).Elem()
}

func (o CertCheckMonitorTagArrayOutput) ToCertCheckMonitorTagArrayOutput() CertCheckMonitorTagArrayOutput {
	return o
}

func (o CertCheckMonitorTagArrayOutput) ToCertCheckMonitorTagArrayOutputWithContext(ctx context.Context) CertCheckMonitorTagArrayOutput {
	return o
}

func (o CertCheckMonitorTagArrayOutput) Index(i pulumi.IntInput) CertCheckMonitorTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertCheckMonitorTag {
		return vs[0].([]CertCheckMonitorTag)[vs[1].(int)]
	}).(CertCheckMonitorTagOutput)
}

type MonitorCustomHeader struct {
	// Header name.
	Name *string `pulumi:"name"`
	// Header Value.
	Value *string `pulumi:"value"`
}

// MonitorCustomHeaderInput is an input type that accepts MonitorCustomHeaderArgs and MonitorCustomHeaderOutput values.
// You can construct a concrete instance of `MonitorCustomHeaderInput` via:
//
//	MonitorCustomHeaderArgs{...}
type MonitorCustomHeaderInput interface {
	pulumi.Input

	ToMonitorCustomHeaderOutput() MonitorCustomHeaderOutput
	ToMonitorCustomHeaderOutputWithContext(context.Context) MonitorCustomHeaderOutput
}

type MonitorCustomHeaderArgs struct {
	// Header name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Header Value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (MonitorCustomHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorCustomHeader)(nil)).Elem()
}

func (i MonitorCustomHeaderArgs) ToMonitorCustomHeaderOutput() MonitorCustomHeaderOutput {
	return i.ToMonitorCustomHeaderOutputWithContext(context.Background())
}

func (i MonitorCustomHeaderArgs) ToMonitorCustomHeaderOutputWithContext(ctx context.Context) MonitorCustomHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorCustomHeaderOutput)
}

// MonitorCustomHeaderArrayInput is an input type that accepts MonitorCustomHeaderArray and MonitorCustomHeaderArrayOutput values.
// You can construct a concrete instance of `MonitorCustomHeaderArrayInput` via:
//
//	MonitorCustomHeaderArray{ MonitorCustomHeaderArgs{...} }
type MonitorCustomHeaderArrayInput interface {
	pulumi.Input

	ToMonitorCustomHeaderArrayOutput() MonitorCustomHeaderArrayOutput
	ToMonitorCustomHeaderArrayOutputWithContext(context.Context) MonitorCustomHeaderArrayOutput
}

type MonitorCustomHeaderArray []MonitorCustomHeaderInput

func (MonitorCustomHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorCustomHeader)(nil)).Elem()
}

func (i MonitorCustomHeaderArray) ToMonitorCustomHeaderArrayOutput() MonitorCustomHeaderArrayOutput {
	return i.ToMonitorCustomHeaderArrayOutputWithContext(context.Background())
}

func (i MonitorCustomHeaderArray) ToMonitorCustomHeaderArrayOutputWithContext(ctx context.Context) MonitorCustomHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorCustomHeaderArrayOutput)
}

type MonitorCustomHeaderOutput struct{ *pulumi.OutputState }

func (MonitorCustomHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorCustomHeader)(nil)).Elem()
}

func (o MonitorCustomHeaderOutput) ToMonitorCustomHeaderOutput() MonitorCustomHeaderOutput {
	return o
}

func (o MonitorCustomHeaderOutput) ToMonitorCustomHeaderOutputWithContext(ctx context.Context) MonitorCustomHeaderOutput {
	return o
}

// Header name.
func (o MonitorCustomHeaderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorCustomHeader) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Header Value.
func (o MonitorCustomHeaderOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorCustomHeader) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type MonitorCustomHeaderArrayOutput struct{ *pulumi.OutputState }

func (MonitorCustomHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorCustomHeader)(nil)).Elem()
}

func (o MonitorCustomHeaderArrayOutput) ToMonitorCustomHeaderArrayOutput() MonitorCustomHeaderArrayOutput {
	return o
}

func (o MonitorCustomHeaderArrayOutput) ToMonitorCustomHeaderArrayOutputWithContext(ctx context.Context) MonitorCustomHeaderArrayOutput {
	return o
}

func (o MonitorCustomHeaderArrayOutput) Index(i pulumi.IntInput) MonitorCustomHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitorCustomHeader {
		return vs[0].([]MonitorCustomHeader)[vs[1].(int)]
	}).(MonitorCustomHeaderOutput)
}

type MonitorDowntimeEndRepeat struct {
	// The date on which the monitor downtime's repeat cycle would need to come to an end, a string in `DDDD-MM-YY` format.
	OnDate *string `pulumi:"onDate"`
	// An integer that specifies the number of occurrences, after which the monitor downtime's repeat cycle would need to come to an end.
	//
	// > **NOTE:** `endRepeat` **can only be used with the modes** `DAILY`, `MONTHLY` and `WEEKLY` and **is an optional argument** when monitor downtimes of these modes are created. Additionally, **either** `onDate` or `onRepeat` **are required to be specified with** `endRepeat`, but not both, as `onDate` and `onRepeat` are mutually exclusive.
	OnRepeat *int `pulumi:"onRepeat"`
}

// MonitorDowntimeEndRepeatInput is an input type that accepts MonitorDowntimeEndRepeatArgs and MonitorDowntimeEndRepeatOutput values.
// You can construct a concrete instance of `MonitorDowntimeEndRepeatInput` via:
//
//	MonitorDowntimeEndRepeatArgs{...}
type MonitorDowntimeEndRepeatInput interface {
	pulumi.Input

	ToMonitorDowntimeEndRepeatOutput() MonitorDowntimeEndRepeatOutput
	ToMonitorDowntimeEndRepeatOutputWithContext(context.Context) MonitorDowntimeEndRepeatOutput
}

type MonitorDowntimeEndRepeatArgs struct {
	// The date on which the monitor downtime's repeat cycle would need to come to an end, a string in `DDDD-MM-YY` format.
	OnDate pulumi.StringPtrInput `pulumi:"onDate"`
	// An integer that specifies the number of occurrences, after which the monitor downtime's repeat cycle would need to come to an end.
	//
	// > **NOTE:** `endRepeat` **can only be used with the modes** `DAILY`, `MONTHLY` and `WEEKLY` and **is an optional argument** when monitor downtimes of these modes are created. Additionally, **either** `onDate` or `onRepeat` **are required to be specified with** `endRepeat`, but not both, as `onDate` and `onRepeat` are mutually exclusive.
	OnRepeat pulumi.IntPtrInput `pulumi:"onRepeat"`
}

func (MonitorDowntimeEndRepeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorDowntimeEndRepeat)(nil)).Elem()
}

func (i MonitorDowntimeEndRepeatArgs) ToMonitorDowntimeEndRepeatOutput() MonitorDowntimeEndRepeatOutput {
	return i.ToMonitorDowntimeEndRepeatOutputWithContext(context.Background())
}

func (i MonitorDowntimeEndRepeatArgs) ToMonitorDowntimeEndRepeatOutputWithContext(ctx context.Context) MonitorDowntimeEndRepeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorDowntimeEndRepeatOutput)
}

func (i MonitorDowntimeEndRepeatArgs) ToMonitorDowntimeEndRepeatPtrOutput() MonitorDowntimeEndRepeatPtrOutput {
	return i.ToMonitorDowntimeEndRepeatPtrOutputWithContext(context.Background())
}

func (i MonitorDowntimeEndRepeatArgs) ToMonitorDowntimeEndRepeatPtrOutputWithContext(ctx context.Context) MonitorDowntimeEndRepeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorDowntimeEndRepeatOutput).ToMonitorDowntimeEndRepeatPtrOutputWithContext(ctx)
}

// MonitorDowntimeEndRepeatPtrInput is an input type that accepts MonitorDowntimeEndRepeatArgs, MonitorDowntimeEndRepeatPtr and MonitorDowntimeEndRepeatPtrOutput values.
// You can construct a concrete instance of `MonitorDowntimeEndRepeatPtrInput` via:
//
//	        MonitorDowntimeEndRepeatArgs{...}
//
//	or:
//
//	        nil
type MonitorDowntimeEndRepeatPtrInput interface {
	pulumi.Input

	ToMonitorDowntimeEndRepeatPtrOutput() MonitorDowntimeEndRepeatPtrOutput
	ToMonitorDowntimeEndRepeatPtrOutputWithContext(context.Context) MonitorDowntimeEndRepeatPtrOutput
}

type monitorDowntimeEndRepeatPtrType MonitorDowntimeEndRepeatArgs

func MonitorDowntimeEndRepeatPtr(v *MonitorDowntimeEndRepeatArgs) MonitorDowntimeEndRepeatPtrInput {
	return (*monitorDowntimeEndRepeatPtrType)(v)
}

func (*monitorDowntimeEndRepeatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorDowntimeEndRepeat)(nil)).Elem()
}

func (i *monitorDowntimeEndRepeatPtrType) ToMonitorDowntimeEndRepeatPtrOutput() MonitorDowntimeEndRepeatPtrOutput {
	return i.ToMonitorDowntimeEndRepeatPtrOutputWithContext(context.Background())
}

func (i *monitorDowntimeEndRepeatPtrType) ToMonitorDowntimeEndRepeatPtrOutputWithContext(ctx context.Context) MonitorDowntimeEndRepeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorDowntimeEndRepeatPtrOutput)
}

type MonitorDowntimeEndRepeatOutput struct{ *pulumi.OutputState }

func (MonitorDowntimeEndRepeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorDowntimeEndRepeat)(nil)).Elem()
}

func (o MonitorDowntimeEndRepeatOutput) ToMonitorDowntimeEndRepeatOutput() MonitorDowntimeEndRepeatOutput {
	return o
}

func (o MonitorDowntimeEndRepeatOutput) ToMonitorDowntimeEndRepeatOutputWithContext(ctx context.Context) MonitorDowntimeEndRepeatOutput {
	return o
}

func (o MonitorDowntimeEndRepeatOutput) ToMonitorDowntimeEndRepeatPtrOutput() MonitorDowntimeEndRepeatPtrOutput {
	return o.ToMonitorDowntimeEndRepeatPtrOutputWithContext(context.Background())
}

func (o MonitorDowntimeEndRepeatOutput) ToMonitorDowntimeEndRepeatPtrOutputWithContext(ctx context.Context) MonitorDowntimeEndRepeatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorDowntimeEndRepeat) *MonitorDowntimeEndRepeat {
		return &v
	}).(MonitorDowntimeEndRepeatPtrOutput)
}

// The date on which the monitor downtime's repeat cycle would need to come to an end, a string in `DDDD-MM-YY` format.
func (o MonitorDowntimeEndRepeatOutput) OnDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorDowntimeEndRepeat) *string { return v.OnDate }).(pulumi.StringPtrOutput)
}

// An integer that specifies the number of occurrences, after which the monitor downtime's repeat cycle would need to come to an end.
//
// > **NOTE:** `endRepeat` **can only be used with the modes** `DAILY`, `MONTHLY` and `WEEKLY` and **is an optional argument** when monitor downtimes of these modes are created. Additionally, **either** `onDate` or `onRepeat` **are required to be specified with** `endRepeat`, but not both, as `onDate` and `onRepeat` are mutually exclusive.
func (o MonitorDowntimeEndRepeatOutput) OnRepeat() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonitorDowntimeEndRepeat) *int { return v.OnRepeat }).(pulumi.IntPtrOutput)
}

type MonitorDowntimeEndRepeatPtrOutput struct{ *pulumi.OutputState }

func (MonitorDowntimeEndRepeatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorDowntimeEndRepeat)(nil)).Elem()
}

func (o MonitorDowntimeEndRepeatPtrOutput) ToMonitorDowntimeEndRepeatPtrOutput() MonitorDowntimeEndRepeatPtrOutput {
	return o
}

func (o MonitorDowntimeEndRepeatPtrOutput) ToMonitorDowntimeEndRepeatPtrOutputWithContext(ctx context.Context) MonitorDowntimeEndRepeatPtrOutput {
	return o
}

func (o MonitorDowntimeEndRepeatPtrOutput) Elem() MonitorDowntimeEndRepeatOutput {
	return o.ApplyT(func(v *MonitorDowntimeEndRepeat) MonitorDowntimeEndRepeat {
		if v != nil {
			return *v
		}
		var ret MonitorDowntimeEndRepeat
		return ret
	}).(MonitorDowntimeEndRepeatOutput)
}

// The date on which the monitor downtime's repeat cycle would need to come to an end, a string in `DDDD-MM-YY` format.
func (o MonitorDowntimeEndRepeatPtrOutput) OnDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorDowntimeEndRepeat) *string {
		if v == nil {
			return nil
		}
		return v.OnDate
	}).(pulumi.StringPtrOutput)
}

// An integer that specifies the number of occurrences, after which the monitor downtime's repeat cycle would need to come to an end.
//
// > **NOTE:** `endRepeat` **can only be used with the modes** `DAILY`, `MONTHLY` and `WEEKLY` and **is an optional argument** when monitor downtimes of these modes are created. Additionally, **either** `onDate` or `onRepeat` **are required to be specified with** `endRepeat`, but not both, as `onDate` and `onRepeat` are mutually exclusive.
func (o MonitorDowntimeEndRepeatPtrOutput) OnRepeat() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonitorDowntimeEndRepeat) *int {
		if v == nil {
			return nil
		}
		return v.OnRepeat
	}).(pulumi.IntPtrOutput)
}

type MonitorDowntimeFrequency struct {
	// A list of integers, specifying the days of a month on which the monthly monitor downtime would function, e.g. [3, 6, 14, 23].
	DaysOfMonths []int `pulumi:"daysOfMonths"`
	// An argument that specifies a day of a week and its occurrence in a month, on which the monthly monitor downtime would function. This argument, further, comprises the following nested arguments -
	DaysOfWeek *MonitorDowntimeFrequencyDaysOfWeek `pulumi:"daysOfWeek"`
}

// MonitorDowntimeFrequencyInput is an input type that accepts MonitorDowntimeFrequencyArgs and MonitorDowntimeFrequencyOutput values.
// You can construct a concrete instance of `MonitorDowntimeFrequencyInput` via:
//
//	MonitorDowntimeFrequencyArgs{...}
type MonitorDowntimeFrequencyInput interface {
	pulumi.Input

	ToMonitorDowntimeFrequencyOutput() MonitorDowntimeFrequencyOutput
	ToMonitorDowntimeFrequencyOutputWithContext(context.Context) MonitorDowntimeFrequencyOutput
}

type MonitorDowntimeFrequencyArgs struct {
	// A list of integers, specifying the days of a month on which the monthly monitor downtime would function, e.g. [3, 6, 14, 23].
	DaysOfMonths pulumi.IntArrayInput `pulumi:"daysOfMonths"`
	// An argument that specifies a day of a week and its occurrence in a month, on which the monthly monitor downtime would function. This argument, further, comprises the following nested arguments -
	DaysOfWeek MonitorDowntimeFrequencyDaysOfWeekPtrInput `pulumi:"daysOfWeek"`
}

func (MonitorDowntimeFrequencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorDowntimeFrequency)(nil)).Elem()
}

func (i MonitorDowntimeFrequencyArgs) ToMonitorDowntimeFrequencyOutput() MonitorDowntimeFrequencyOutput {
	return i.ToMonitorDowntimeFrequencyOutputWithContext(context.Background())
}

func (i MonitorDowntimeFrequencyArgs) ToMonitorDowntimeFrequencyOutputWithContext(ctx context.Context) MonitorDowntimeFrequencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorDowntimeFrequencyOutput)
}

func (i MonitorDowntimeFrequencyArgs) ToMonitorDowntimeFrequencyPtrOutput() MonitorDowntimeFrequencyPtrOutput {
	return i.ToMonitorDowntimeFrequencyPtrOutputWithContext(context.Background())
}

func (i MonitorDowntimeFrequencyArgs) ToMonitorDowntimeFrequencyPtrOutputWithContext(ctx context.Context) MonitorDowntimeFrequencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorDowntimeFrequencyOutput).ToMonitorDowntimeFrequencyPtrOutputWithContext(ctx)
}

// MonitorDowntimeFrequencyPtrInput is an input type that accepts MonitorDowntimeFrequencyArgs, MonitorDowntimeFrequencyPtr and MonitorDowntimeFrequencyPtrOutput values.
// You can construct a concrete instance of `MonitorDowntimeFrequencyPtrInput` via:
//
//	        MonitorDowntimeFrequencyArgs{...}
//
//	or:
//
//	        nil
type MonitorDowntimeFrequencyPtrInput interface {
	pulumi.Input

	ToMonitorDowntimeFrequencyPtrOutput() MonitorDowntimeFrequencyPtrOutput
	ToMonitorDowntimeFrequencyPtrOutputWithContext(context.Context) MonitorDowntimeFrequencyPtrOutput
}

type monitorDowntimeFrequencyPtrType MonitorDowntimeFrequencyArgs

func MonitorDowntimeFrequencyPtr(v *MonitorDowntimeFrequencyArgs) MonitorDowntimeFrequencyPtrInput {
	return (*monitorDowntimeFrequencyPtrType)(v)
}

func (*monitorDowntimeFrequencyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorDowntimeFrequency)(nil)).Elem()
}

func (i *monitorDowntimeFrequencyPtrType) ToMonitorDowntimeFrequencyPtrOutput() MonitorDowntimeFrequencyPtrOutput {
	return i.ToMonitorDowntimeFrequencyPtrOutputWithContext(context.Background())
}

func (i *monitorDowntimeFrequencyPtrType) ToMonitorDowntimeFrequencyPtrOutputWithContext(ctx context.Context) MonitorDowntimeFrequencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorDowntimeFrequencyPtrOutput)
}

type MonitorDowntimeFrequencyOutput struct{ *pulumi.OutputState }

func (MonitorDowntimeFrequencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorDowntimeFrequency)(nil)).Elem()
}

func (o MonitorDowntimeFrequencyOutput) ToMonitorDowntimeFrequencyOutput() MonitorDowntimeFrequencyOutput {
	return o
}

func (o MonitorDowntimeFrequencyOutput) ToMonitorDowntimeFrequencyOutputWithContext(ctx context.Context) MonitorDowntimeFrequencyOutput {
	return o
}

func (o MonitorDowntimeFrequencyOutput) ToMonitorDowntimeFrequencyPtrOutput() MonitorDowntimeFrequencyPtrOutput {
	return o.ToMonitorDowntimeFrequencyPtrOutputWithContext(context.Background())
}

func (o MonitorDowntimeFrequencyOutput) ToMonitorDowntimeFrequencyPtrOutputWithContext(ctx context.Context) MonitorDowntimeFrequencyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorDowntimeFrequency) *MonitorDowntimeFrequency {
		return &v
	}).(MonitorDowntimeFrequencyPtrOutput)
}

// A list of integers, specifying the days of a month on which the monthly monitor downtime would function, e.g. [3, 6, 14, 23].
func (o MonitorDowntimeFrequencyOutput) DaysOfMonths() pulumi.IntArrayOutput {
	return o.ApplyT(func(v MonitorDowntimeFrequency) []int { return v.DaysOfMonths }).(pulumi.IntArrayOutput)
}

// An argument that specifies a day of a week and its occurrence in a month, on which the monthly monitor downtime would function. This argument, further, comprises the following nested arguments -
func (o MonitorDowntimeFrequencyOutput) DaysOfWeek() MonitorDowntimeFrequencyDaysOfWeekPtrOutput {
	return o.ApplyT(func(v MonitorDowntimeFrequency) *MonitorDowntimeFrequencyDaysOfWeek { return v.DaysOfWeek }).(MonitorDowntimeFrequencyDaysOfWeekPtrOutput)
}

type MonitorDowntimeFrequencyPtrOutput struct{ *pulumi.OutputState }

func (MonitorDowntimeFrequencyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorDowntimeFrequency)(nil)).Elem()
}

func (o MonitorDowntimeFrequencyPtrOutput) ToMonitorDowntimeFrequencyPtrOutput() MonitorDowntimeFrequencyPtrOutput {
	return o
}

func (o MonitorDowntimeFrequencyPtrOutput) ToMonitorDowntimeFrequencyPtrOutputWithContext(ctx context.Context) MonitorDowntimeFrequencyPtrOutput {
	return o
}

func (o MonitorDowntimeFrequencyPtrOutput) Elem() MonitorDowntimeFrequencyOutput {
	return o.ApplyT(func(v *MonitorDowntimeFrequency) MonitorDowntimeFrequency {
		if v != nil {
			return *v
		}
		var ret MonitorDowntimeFrequency
		return ret
	}).(MonitorDowntimeFrequencyOutput)
}

// A list of integers, specifying the days of a month on which the monthly monitor downtime would function, e.g. [3, 6, 14, 23].
func (o MonitorDowntimeFrequencyPtrOutput) DaysOfMonths() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *MonitorDowntimeFrequency) []int {
		if v == nil {
			return nil
		}
		return v.DaysOfMonths
	}).(pulumi.IntArrayOutput)
}

// An argument that specifies a day of a week and its occurrence in a month, on which the monthly monitor downtime would function. This argument, further, comprises the following nested arguments -
func (o MonitorDowntimeFrequencyPtrOutput) DaysOfWeek() MonitorDowntimeFrequencyDaysOfWeekPtrOutput {
	return o.ApplyT(func(v *MonitorDowntimeFrequency) *MonitorDowntimeFrequencyDaysOfWeek {
		if v == nil {
			return nil
		}
		return v.DaysOfWeek
	}).(MonitorDowntimeFrequencyDaysOfWeekPtrOutput)
}

type MonitorDowntimeFrequencyDaysOfWeek struct {
	// The occurrence of `weekDay` in a month (one of `"FIRST"`, `"SECOND"`, `"THIRD"`, `"FOURTH"`, `"LAST"`).
	//
	// > **NOTE:** `frequency` **can only be used with the mode** `MONTHLY`, and **is a required argument** with monthly monitor downtimes (if the `mode` is `MONTHLY`). Additionally, **either** `daysOfMonth` or `daysOfWeek` **are required to be specified with** `frequency`, but not both, as `daysOfMonth` and `daysOfWeek` are mutually exclusive. If `daysOfWeek` is specified, values of **both** of its nested arguments, `weekDay` and `ordinalDayOfMonth` **would need to be specified** too.
	OrdinalDayOfMonth string `pulumi:"ordinalDayOfMonth"`
	// A day of the week (one of `"SUNDAY"`, `"MONDAY"`, `"TUESDAY"`, `"WEDNESDAY"`, `"THURSDAY"`, `"FRIDAY"` or `"SATURDAY"`).
	WeekDay string `pulumi:"weekDay"`
}

// MonitorDowntimeFrequencyDaysOfWeekInput is an input type that accepts MonitorDowntimeFrequencyDaysOfWeekArgs and MonitorDowntimeFrequencyDaysOfWeekOutput values.
// You can construct a concrete instance of `MonitorDowntimeFrequencyDaysOfWeekInput` via:
//
//	MonitorDowntimeFrequencyDaysOfWeekArgs{...}
type MonitorDowntimeFrequencyDaysOfWeekInput interface {
	pulumi.Input

	ToMonitorDowntimeFrequencyDaysOfWeekOutput() MonitorDowntimeFrequencyDaysOfWeekOutput
	ToMonitorDowntimeFrequencyDaysOfWeekOutputWithContext(context.Context) MonitorDowntimeFrequencyDaysOfWeekOutput
}

type MonitorDowntimeFrequencyDaysOfWeekArgs struct {
	// The occurrence of `weekDay` in a month (one of `"FIRST"`, `"SECOND"`, `"THIRD"`, `"FOURTH"`, `"LAST"`).
	//
	// > **NOTE:** `frequency` **can only be used with the mode** `MONTHLY`, and **is a required argument** with monthly monitor downtimes (if the `mode` is `MONTHLY`). Additionally, **either** `daysOfMonth` or `daysOfWeek` **are required to be specified with** `frequency`, but not both, as `daysOfMonth` and `daysOfWeek` are mutually exclusive. If `daysOfWeek` is specified, values of **both** of its nested arguments, `weekDay` and `ordinalDayOfMonth` **would need to be specified** too.
	OrdinalDayOfMonth pulumi.StringInput `pulumi:"ordinalDayOfMonth"`
	// A day of the week (one of `"SUNDAY"`, `"MONDAY"`, `"TUESDAY"`, `"WEDNESDAY"`, `"THURSDAY"`, `"FRIDAY"` or `"SATURDAY"`).
	WeekDay pulumi.StringInput `pulumi:"weekDay"`
}

func (MonitorDowntimeFrequencyDaysOfWeekArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorDowntimeFrequencyDaysOfWeek)(nil)).Elem()
}

func (i MonitorDowntimeFrequencyDaysOfWeekArgs) ToMonitorDowntimeFrequencyDaysOfWeekOutput() MonitorDowntimeFrequencyDaysOfWeekOutput {
	return i.ToMonitorDowntimeFrequencyDaysOfWeekOutputWithContext(context.Background())
}

func (i MonitorDowntimeFrequencyDaysOfWeekArgs) ToMonitorDowntimeFrequencyDaysOfWeekOutputWithContext(ctx context.Context) MonitorDowntimeFrequencyDaysOfWeekOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorDowntimeFrequencyDaysOfWeekOutput)
}

func (i MonitorDowntimeFrequencyDaysOfWeekArgs) ToMonitorDowntimeFrequencyDaysOfWeekPtrOutput() MonitorDowntimeFrequencyDaysOfWeekPtrOutput {
	return i.ToMonitorDowntimeFrequencyDaysOfWeekPtrOutputWithContext(context.Background())
}

func (i MonitorDowntimeFrequencyDaysOfWeekArgs) ToMonitorDowntimeFrequencyDaysOfWeekPtrOutputWithContext(ctx context.Context) MonitorDowntimeFrequencyDaysOfWeekPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorDowntimeFrequencyDaysOfWeekOutput).ToMonitorDowntimeFrequencyDaysOfWeekPtrOutputWithContext(ctx)
}

// MonitorDowntimeFrequencyDaysOfWeekPtrInput is an input type that accepts MonitorDowntimeFrequencyDaysOfWeekArgs, MonitorDowntimeFrequencyDaysOfWeekPtr and MonitorDowntimeFrequencyDaysOfWeekPtrOutput values.
// You can construct a concrete instance of `MonitorDowntimeFrequencyDaysOfWeekPtrInput` via:
//
//	        MonitorDowntimeFrequencyDaysOfWeekArgs{...}
//
//	or:
//
//	        nil
type MonitorDowntimeFrequencyDaysOfWeekPtrInput interface {
	pulumi.Input

	ToMonitorDowntimeFrequencyDaysOfWeekPtrOutput() MonitorDowntimeFrequencyDaysOfWeekPtrOutput
	ToMonitorDowntimeFrequencyDaysOfWeekPtrOutputWithContext(context.Context) MonitorDowntimeFrequencyDaysOfWeekPtrOutput
}

type monitorDowntimeFrequencyDaysOfWeekPtrType MonitorDowntimeFrequencyDaysOfWeekArgs

func MonitorDowntimeFrequencyDaysOfWeekPtr(v *MonitorDowntimeFrequencyDaysOfWeekArgs) MonitorDowntimeFrequencyDaysOfWeekPtrInput {
	return (*monitorDowntimeFrequencyDaysOfWeekPtrType)(v)
}

func (*monitorDowntimeFrequencyDaysOfWeekPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorDowntimeFrequencyDaysOfWeek)(nil)).Elem()
}

func (i *monitorDowntimeFrequencyDaysOfWeekPtrType) ToMonitorDowntimeFrequencyDaysOfWeekPtrOutput() MonitorDowntimeFrequencyDaysOfWeekPtrOutput {
	return i.ToMonitorDowntimeFrequencyDaysOfWeekPtrOutputWithContext(context.Background())
}

func (i *monitorDowntimeFrequencyDaysOfWeekPtrType) ToMonitorDowntimeFrequencyDaysOfWeekPtrOutputWithContext(ctx context.Context) MonitorDowntimeFrequencyDaysOfWeekPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorDowntimeFrequencyDaysOfWeekPtrOutput)
}

type MonitorDowntimeFrequencyDaysOfWeekOutput struct{ *pulumi.OutputState }

func (MonitorDowntimeFrequencyDaysOfWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorDowntimeFrequencyDaysOfWeek)(nil)).Elem()
}

func (o MonitorDowntimeFrequencyDaysOfWeekOutput) ToMonitorDowntimeFrequencyDaysOfWeekOutput() MonitorDowntimeFrequencyDaysOfWeekOutput {
	return o
}

func (o MonitorDowntimeFrequencyDaysOfWeekOutput) ToMonitorDowntimeFrequencyDaysOfWeekOutputWithContext(ctx context.Context) MonitorDowntimeFrequencyDaysOfWeekOutput {
	return o
}

func (o MonitorDowntimeFrequencyDaysOfWeekOutput) ToMonitorDowntimeFrequencyDaysOfWeekPtrOutput() MonitorDowntimeFrequencyDaysOfWeekPtrOutput {
	return o.ToMonitorDowntimeFrequencyDaysOfWeekPtrOutputWithContext(context.Background())
}

func (o MonitorDowntimeFrequencyDaysOfWeekOutput) ToMonitorDowntimeFrequencyDaysOfWeekPtrOutputWithContext(ctx context.Context) MonitorDowntimeFrequencyDaysOfWeekPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorDowntimeFrequencyDaysOfWeek) *MonitorDowntimeFrequencyDaysOfWeek {
		return &v
	}).(MonitorDowntimeFrequencyDaysOfWeekPtrOutput)
}

// The occurrence of `weekDay` in a month (one of `"FIRST"`, `"SECOND"`, `"THIRD"`, `"FOURTH"`, `"LAST"`).
//
// > **NOTE:** `frequency` **can only be used with the mode** `MONTHLY`, and **is a required argument** with monthly monitor downtimes (if the `mode` is `MONTHLY`). Additionally, **either** `daysOfMonth` or `daysOfWeek` **are required to be specified with** `frequency`, but not both, as `daysOfMonth` and `daysOfWeek` are mutually exclusive. If `daysOfWeek` is specified, values of **both** of its nested arguments, `weekDay` and `ordinalDayOfMonth` **would need to be specified** too.
func (o MonitorDowntimeFrequencyDaysOfWeekOutput) OrdinalDayOfMonth() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorDowntimeFrequencyDaysOfWeek) string { return v.OrdinalDayOfMonth }).(pulumi.StringOutput)
}

// A day of the week (one of `"SUNDAY"`, `"MONDAY"`, `"TUESDAY"`, `"WEDNESDAY"`, `"THURSDAY"`, `"FRIDAY"` or `"SATURDAY"`).
func (o MonitorDowntimeFrequencyDaysOfWeekOutput) WeekDay() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorDowntimeFrequencyDaysOfWeek) string { return v.WeekDay }).(pulumi.StringOutput)
}

type MonitorDowntimeFrequencyDaysOfWeekPtrOutput struct{ *pulumi.OutputState }

func (MonitorDowntimeFrequencyDaysOfWeekPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorDowntimeFrequencyDaysOfWeek)(nil)).Elem()
}

func (o MonitorDowntimeFrequencyDaysOfWeekPtrOutput) ToMonitorDowntimeFrequencyDaysOfWeekPtrOutput() MonitorDowntimeFrequencyDaysOfWeekPtrOutput {
	return o
}

func (o MonitorDowntimeFrequencyDaysOfWeekPtrOutput) ToMonitorDowntimeFrequencyDaysOfWeekPtrOutputWithContext(ctx context.Context) MonitorDowntimeFrequencyDaysOfWeekPtrOutput {
	return o
}

func (o MonitorDowntimeFrequencyDaysOfWeekPtrOutput) Elem() MonitorDowntimeFrequencyDaysOfWeekOutput {
	return o.ApplyT(func(v *MonitorDowntimeFrequencyDaysOfWeek) MonitorDowntimeFrequencyDaysOfWeek {
		if v != nil {
			return *v
		}
		var ret MonitorDowntimeFrequencyDaysOfWeek
		return ret
	}).(MonitorDowntimeFrequencyDaysOfWeekOutput)
}

// The occurrence of `weekDay` in a month (one of `"FIRST"`, `"SECOND"`, `"THIRD"`, `"FOURTH"`, `"LAST"`).
//
// > **NOTE:** `frequency` **can only be used with the mode** `MONTHLY`, and **is a required argument** with monthly monitor downtimes (if the `mode` is `MONTHLY`). Additionally, **either** `daysOfMonth` or `daysOfWeek` **are required to be specified with** `frequency`, but not both, as `daysOfMonth` and `daysOfWeek` are mutually exclusive. If `daysOfWeek` is specified, values of **both** of its nested arguments, `weekDay` and `ordinalDayOfMonth` **would need to be specified** too.
func (o MonitorDowntimeFrequencyDaysOfWeekPtrOutput) OrdinalDayOfMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorDowntimeFrequencyDaysOfWeek) *string {
		if v == nil {
			return nil
		}
		return &v.OrdinalDayOfMonth
	}).(pulumi.StringPtrOutput)
}

// A day of the week (one of `"SUNDAY"`, `"MONDAY"`, `"TUESDAY"`, `"WEDNESDAY"`, `"THURSDAY"`, `"FRIDAY"` or `"SATURDAY"`).
func (o MonitorDowntimeFrequencyDaysOfWeekPtrOutput) WeekDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorDowntimeFrequencyDaysOfWeek) *string {
		if v == nil {
			return nil
		}
		return &v.WeekDay
	}).(pulumi.StringPtrOutput)
}

type MonitorTag struct {
	// Name of the tag key.
	Key string `pulumi:"key"`
	// Values associated with the tag key.
	Values []string `pulumi:"values"`
}

// MonitorTagInput is an input type that accepts MonitorTagArgs and MonitorTagOutput values.
// You can construct a concrete instance of `MonitorTagInput` via:
//
//	MonitorTagArgs{...}
type MonitorTagInput interface {
	pulumi.Input

	ToMonitorTagOutput() MonitorTagOutput
	ToMonitorTagOutputWithContext(context.Context) MonitorTagOutput
}

type MonitorTagArgs struct {
	// Name of the tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// Values associated with the tag key.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MonitorTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTag)(nil)).Elem()
}

func (i MonitorTagArgs) ToMonitorTagOutput() MonitorTagOutput {
	return i.ToMonitorTagOutputWithContext(context.Background())
}

func (i MonitorTagArgs) ToMonitorTagOutputWithContext(ctx context.Context) MonitorTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTagOutput)
}

// MonitorTagArrayInput is an input type that accepts MonitorTagArray and MonitorTagArrayOutput values.
// You can construct a concrete instance of `MonitorTagArrayInput` via:
//
//	MonitorTagArray{ MonitorTagArgs{...} }
type MonitorTagArrayInput interface {
	pulumi.Input

	ToMonitorTagArrayOutput() MonitorTagArrayOutput
	ToMonitorTagArrayOutputWithContext(context.Context) MonitorTagArrayOutput
}

type MonitorTagArray []MonitorTagInput

func (MonitorTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorTag)(nil)).Elem()
}

func (i MonitorTagArray) ToMonitorTagArrayOutput() MonitorTagArrayOutput {
	return i.ToMonitorTagArrayOutputWithContext(context.Background())
}

func (i MonitorTagArray) ToMonitorTagArrayOutputWithContext(ctx context.Context) MonitorTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTagArrayOutput)
}

type MonitorTagOutput struct{ *pulumi.OutputState }

func (MonitorTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTag)(nil)).Elem()
}

func (o MonitorTagOutput) ToMonitorTagOutput() MonitorTagOutput {
	return o
}

func (o MonitorTagOutput) ToMonitorTagOutputWithContext(ctx context.Context) MonitorTagOutput {
	return o
}

// Name of the tag key.
func (o MonitorTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTag) string { return v.Key }).(pulumi.StringOutput)
}

// Values associated with the tag key.
func (o MonitorTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MonitorTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MonitorTagArrayOutput struct{ *pulumi.OutputState }

func (MonitorTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorTag)(nil)).Elem()
}

func (o MonitorTagArrayOutput) ToMonitorTagArrayOutput() MonitorTagArrayOutput {
	return o
}

func (o MonitorTagArrayOutput) ToMonitorTagArrayOutputWithContext(ctx context.Context) MonitorTagArrayOutput {
	return o
}

func (o MonitorTagArrayOutput) Index(i pulumi.IntInput) MonitorTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitorTag {
		return vs[0].([]MonitorTag)[vs[1].(int)]
	}).(MonitorTagOutput)
}

type MultiLocationAlertConditionCritical struct {
	// The minimum number of monitor locations that must be concurrently failing before an incident is opened.
	Threshold int `pulumi:"threshold"`
}

// MultiLocationAlertConditionCriticalInput is an input type that accepts MultiLocationAlertConditionCriticalArgs and MultiLocationAlertConditionCriticalOutput values.
// You can construct a concrete instance of `MultiLocationAlertConditionCriticalInput` via:
//
//	MultiLocationAlertConditionCriticalArgs{...}
type MultiLocationAlertConditionCriticalInput interface {
	pulumi.Input

	ToMultiLocationAlertConditionCriticalOutput() MultiLocationAlertConditionCriticalOutput
	ToMultiLocationAlertConditionCriticalOutputWithContext(context.Context) MultiLocationAlertConditionCriticalOutput
}

type MultiLocationAlertConditionCriticalArgs struct {
	// The minimum number of monitor locations that must be concurrently failing before an incident is opened.
	Threshold pulumi.IntInput `pulumi:"threshold"`
}

func (MultiLocationAlertConditionCriticalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiLocationAlertConditionCritical)(nil)).Elem()
}

func (i MultiLocationAlertConditionCriticalArgs) ToMultiLocationAlertConditionCriticalOutput() MultiLocationAlertConditionCriticalOutput {
	return i.ToMultiLocationAlertConditionCriticalOutputWithContext(context.Background())
}

func (i MultiLocationAlertConditionCriticalArgs) ToMultiLocationAlertConditionCriticalOutputWithContext(ctx context.Context) MultiLocationAlertConditionCriticalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiLocationAlertConditionCriticalOutput)
}

func (i MultiLocationAlertConditionCriticalArgs) ToMultiLocationAlertConditionCriticalPtrOutput() MultiLocationAlertConditionCriticalPtrOutput {
	return i.ToMultiLocationAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (i MultiLocationAlertConditionCriticalArgs) ToMultiLocationAlertConditionCriticalPtrOutputWithContext(ctx context.Context) MultiLocationAlertConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiLocationAlertConditionCriticalOutput).ToMultiLocationAlertConditionCriticalPtrOutputWithContext(ctx)
}

// MultiLocationAlertConditionCriticalPtrInput is an input type that accepts MultiLocationAlertConditionCriticalArgs, MultiLocationAlertConditionCriticalPtr and MultiLocationAlertConditionCriticalPtrOutput values.
// You can construct a concrete instance of `MultiLocationAlertConditionCriticalPtrInput` via:
//
//	        MultiLocationAlertConditionCriticalArgs{...}
//
//	or:
//
//	        nil
type MultiLocationAlertConditionCriticalPtrInput interface {
	pulumi.Input

	ToMultiLocationAlertConditionCriticalPtrOutput() MultiLocationAlertConditionCriticalPtrOutput
	ToMultiLocationAlertConditionCriticalPtrOutputWithContext(context.Context) MultiLocationAlertConditionCriticalPtrOutput
}

type multiLocationAlertConditionCriticalPtrType MultiLocationAlertConditionCriticalArgs

func MultiLocationAlertConditionCriticalPtr(v *MultiLocationAlertConditionCriticalArgs) MultiLocationAlertConditionCriticalPtrInput {
	return (*multiLocationAlertConditionCriticalPtrType)(v)
}

func (*multiLocationAlertConditionCriticalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiLocationAlertConditionCritical)(nil)).Elem()
}

func (i *multiLocationAlertConditionCriticalPtrType) ToMultiLocationAlertConditionCriticalPtrOutput() MultiLocationAlertConditionCriticalPtrOutput {
	return i.ToMultiLocationAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (i *multiLocationAlertConditionCriticalPtrType) ToMultiLocationAlertConditionCriticalPtrOutputWithContext(ctx context.Context) MultiLocationAlertConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiLocationAlertConditionCriticalPtrOutput)
}

type MultiLocationAlertConditionCriticalOutput struct{ *pulumi.OutputState }

func (MultiLocationAlertConditionCriticalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiLocationAlertConditionCritical)(nil)).Elem()
}

func (o MultiLocationAlertConditionCriticalOutput) ToMultiLocationAlertConditionCriticalOutput() MultiLocationAlertConditionCriticalOutput {
	return o
}

func (o MultiLocationAlertConditionCriticalOutput) ToMultiLocationAlertConditionCriticalOutputWithContext(ctx context.Context) MultiLocationAlertConditionCriticalOutput {
	return o
}

func (o MultiLocationAlertConditionCriticalOutput) ToMultiLocationAlertConditionCriticalPtrOutput() MultiLocationAlertConditionCriticalPtrOutput {
	return o.ToMultiLocationAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (o MultiLocationAlertConditionCriticalOutput) ToMultiLocationAlertConditionCriticalPtrOutputWithContext(ctx context.Context) MultiLocationAlertConditionCriticalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MultiLocationAlertConditionCritical) *MultiLocationAlertConditionCritical {
		return &v
	}).(MultiLocationAlertConditionCriticalPtrOutput)
}

// The minimum number of monitor locations that must be concurrently failing before an incident is opened.
func (o MultiLocationAlertConditionCriticalOutput) Threshold() pulumi.IntOutput {
	return o.ApplyT(func(v MultiLocationAlertConditionCritical) int { return v.Threshold }).(pulumi.IntOutput)
}

type MultiLocationAlertConditionCriticalPtrOutput struct{ *pulumi.OutputState }

func (MultiLocationAlertConditionCriticalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiLocationAlertConditionCritical)(nil)).Elem()
}

func (o MultiLocationAlertConditionCriticalPtrOutput) ToMultiLocationAlertConditionCriticalPtrOutput() MultiLocationAlertConditionCriticalPtrOutput {
	return o
}

func (o MultiLocationAlertConditionCriticalPtrOutput) ToMultiLocationAlertConditionCriticalPtrOutputWithContext(ctx context.Context) MultiLocationAlertConditionCriticalPtrOutput {
	return o
}

func (o MultiLocationAlertConditionCriticalPtrOutput) Elem() MultiLocationAlertConditionCriticalOutput {
	return o.ApplyT(func(v *MultiLocationAlertConditionCritical) MultiLocationAlertConditionCritical {
		if v != nil {
			return *v
		}
		var ret MultiLocationAlertConditionCritical
		return ret
	}).(MultiLocationAlertConditionCriticalOutput)
}

// The minimum number of monitor locations that must be concurrently failing before an incident is opened.
func (o MultiLocationAlertConditionCriticalPtrOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MultiLocationAlertConditionCritical) *int {
		if v == nil {
			return nil
		}
		return &v.Threshold
	}).(pulumi.IntPtrOutput)
}

type MultiLocationAlertConditionWarning struct {
	// The minimum number of monitor locations that must be concurrently failing before an incident is opened.
	Threshold int `pulumi:"threshold"`
}

// MultiLocationAlertConditionWarningInput is an input type that accepts MultiLocationAlertConditionWarningArgs and MultiLocationAlertConditionWarningOutput values.
// You can construct a concrete instance of `MultiLocationAlertConditionWarningInput` via:
//
//	MultiLocationAlertConditionWarningArgs{...}
type MultiLocationAlertConditionWarningInput interface {
	pulumi.Input

	ToMultiLocationAlertConditionWarningOutput() MultiLocationAlertConditionWarningOutput
	ToMultiLocationAlertConditionWarningOutputWithContext(context.Context) MultiLocationAlertConditionWarningOutput
}

type MultiLocationAlertConditionWarningArgs struct {
	// The minimum number of monitor locations that must be concurrently failing before an incident is opened.
	Threshold pulumi.IntInput `pulumi:"threshold"`
}

func (MultiLocationAlertConditionWarningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiLocationAlertConditionWarning)(nil)).Elem()
}

func (i MultiLocationAlertConditionWarningArgs) ToMultiLocationAlertConditionWarningOutput() MultiLocationAlertConditionWarningOutput {
	return i.ToMultiLocationAlertConditionWarningOutputWithContext(context.Background())
}

func (i MultiLocationAlertConditionWarningArgs) ToMultiLocationAlertConditionWarningOutputWithContext(ctx context.Context) MultiLocationAlertConditionWarningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiLocationAlertConditionWarningOutput)
}

func (i MultiLocationAlertConditionWarningArgs) ToMultiLocationAlertConditionWarningPtrOutput() MultiLocationAlertConditionWarningPtrOutput {
	return i.ToMultiLocationAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (i MultiLocationAlertConditionWarningArgs) ToMultiLocationAlertConditionWarningPtrOutputWithContext(ctx context.Context) MultiLocationAlertConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiLocationAlertConditionWarningOutput).ToMultiLocationAlertConditionWarningPtrOutputWithContext(ctx)
}

// MultiLocationAlertConditionWarningPtrInput is an input type that accepts MultiLocationAlertConditionWarningArgs, MultiLocationAlertConditionWarningPtr and MultiLocationAlertConditionWarningPtrOutput values.
// You can construct a concrete instance of `MultiLocationAlertConditionWarningPtrInput` via:
//
//	        MultiLocationAlertConditionWarningArgs{...}
//
//	or:
//
//	        nil
type MultiLocationAlertConditionWarningPtrInput interface {
	pulumi.Input

	ToMultiLocationAlertConditionWarningPtrOutput() MultiLocationAlertConditionWarningPtrOutput
	ToMultiLocationAlertConditionWarningPtrOutputWithContext(context.Context) MultiLocationAlertConditionWarningPtrOutput
}

type multiLocationAlertConditionWarningPtrType MultiLocationAlertConditionWarningArgs

func MultiLocationAlertConditionWarningPtr(v *MultiLocationAlertConditionWarningArgs) MultiLocationAlertConditionWarningPtrInput {
	return (*multiLocationAlertConditionWarningPtrType)(v)
}

func (*multiLocationAlertConditionWarningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiLocationAlertConditionWarning)(nil)).Elem()
}

func (i *multiLocationAlertConditionWarningPtrType) ToMultiLocationAlertConditionWarningPtrOutput() MultiLocationAlertConditionWarningPtrOutput {
	return i.ToMultiLocationAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (i *multiLocationAlertConditionWarningPtrType) ToMultiLocationAlertConditionWarningPtrOutputWithContext(ctx context.Context) MultiLocationAlertConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiLocationAlertConditionWarningPtrOutput)
}

type MultiLocationAlertConditionWarningOutput struct{ *pulumi.OutputState }

func (MultiLocationAlertConditionWarningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiLocationAlertConditionWarning)(nil)).Elem()
}

func (o MultiLocationAlertConditionWarningOutput) ToMultiLocationAlertConditionWarningOutput() MultiLocationAlertConditionWarningOutput {
	return o
}

func (o MultiLocationAlertConditionWarningOutput) ToMultiLocationAlertConditionWarningOutputWithContext(ctx context.Context) MultiLocationAlertConditionWarningOutput {
	return o
}

func (o MultiLocationAlertConditionWarningOutput) ToMultiLocationAlertConditionWarningPtrOutput() MultiLocationAlertConditionWarningPtrOutput {
	return o.ToMultiLocationAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (o MultiLocationAlertConditionWarningOutput) ToMultiLocationAlertConditionWarningPtrOutputWithContext(ctx context.Context) MultiLocationAlertConditionWarningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MultiLocationAlertConditionWarning) *MultiLocationAlertConditionWarning {
		return &v
	}).(MultiLocationAlertConditionWarningPtrOutput)
}

// The minimum number of monitor locations that must be concurrently failing before an incident is opened.
func (o MultiLocationAlertConditionWarningOutput) Threshold() pulumi.IntOutput {
	return o.ApplyT(func(v MultiLocationAlertConditionWarning) int { return v.Threshold }).(pulumi.IntOutput)
}

type MultiLocationAlertConditionWarningPtrOutput struct{ *pulumi.OutputState }

func (MultiLocationAlertConditionWarningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiLocationAlertConditionWarning)(nil)).Elem()
}

func (o MultiLocationAlertConditionWarningPtrOutput) ToMultiLocationAlertConditionWarningPtrOutput() MultiLocationAlertConditionWarningPtrOutput {
	return o
}

func (o MultiLocationAlertConditionWarningPtrOutput) ToMultiLocationAlertConditionWarningPtrOutputWithContext(ctx context.Context) MultiLocationAlertConditionWarningPtrOutput {
	return o
}

func (o MultiLocationAlertConditionWarningPtrOutput) Elem() MultiLocationAlertConditionWarningOutput {
	return o.ApplyT(func(v *MultiLocationAlertConditionWarning) MultiLocationAlertConditionWarning {
		if v != nil {
			return *v
		}
		var ret MultiLocationAlertConditionWarning
		return ret
	}).(MultiLocationAlertConditionWarningOutput)
}

// The minimum number of monitor locations that must be concurrently failing before an incident is opened.
func (o MultiLocationAlertConditionWarningPtrOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MultiLocationAlertConditionWarning) *int {
		if v == nil {
			return nil
		}
		return &v.Threshold
	}).(pulumi.IntPtrOutput)
}

type ScriptMonitorLocationPrivate struct {
	// The unique identifier for the Synthetics private location in New Relic.
	Guid string `pulumi:"guid"`
	// The location's Verified Script Execution password, Only necessary if Verified Script Execution is enabled for the location.
	VsePassword *string `pulumi:"vsePassword"`
}

// ScriptMonitorLocationPrivateInput is an input type that accepts ScriptMonitorLocationPrivateArgs and ScriptMonitorLocationPrivateOutput values.
// You can construct a concrete instance of `ScriptMonitorLocationPrivateInput` via:
//
//	ScriptMonitorLocationPrivateArgs{...}
type ScriptMonitorLocationPrivateInput interface {
	pulumi.Input

	ToScriptMonitorLocationPrivateOutput() ScriptMonitorLocationPrivateOutput
	ToScriptMonitorLocationPrivateOutputWithContext(context.Context) ScriptMonitorLocationPrivateOutput
}

type ScriptMonitorLocationPrivateArgs struct {
	// The unique identifier for the Synthetics private location in New Relic.
	Guid pulumi.StringInput `pulumi:"guid"`
	// The location's Verified Script Execution password, Only necessary if Verified Script Execution is enabled for the location.
	VsePassword pulumi.StringPtrInput `pulumi:"vsePassword"`
}

func (ScriptMonitorLocationPrivateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptMonitorLocationPrivate)(nil)).Elem()
}

func (i ScriptMonitorLocationPrivateArgs) ToScriptMonitorLocationPrivateOutput() ScriptMonitorLocationPrivateOutput {
	return i.ToScriptMonitorLocationPrivateOutputWithContext(context.Background())
}

func (i ScriptMonitorLocationPrivateArgs) ToScriptMonitorLocationPrivateOutputWithContext(ctx context.Context) ScriptMonitorLocationPrivateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptMonitorLocationPrivateOutput)
}

// ScriptMonitorLocationPrivateArrayInput is an input type that accepts ScriptMonitorLocationPrivateArray and ScriptMonitorLocationPrivateArrayOutput values.
// You can construct a concrete instance of `ScriptMonitorLocationPrivateArrayInput` via:
//
//	ScriptMonitorLocationPrivateArray{ ScriptMonitorLocationPrivateArgs{...} }
type ScriptMonitorLocationPrivateArrayInput interface {
	pulumi.Input

	ToScriptMonitorLocationPrivateArrayOutput() ScriptMonitorLocationPrivateArrayOutput
	ToScriptMonitorLocationPrivateArrayOutputWithContext(context.Context) ScriptMonitorLocationPrivateArrayOutput
}

type ScriptMonitorLocationPrivateArray []ScriptMonitorLocationPrivateInput

func (ScriptMonitorLocationPrivateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptMonitorLocationPrivate)(nil)).Elem()
}

func (i ScriptMonitorLocationPrivateArray) ToScriptMonitorLocationPrivateArrayOutput() ScriptMonitorLocationPrivateArrayOutput {
	return i.ToScriptMonitorLocationPrivateArrayOutputWithContext(context.Background())
}

func (i ScriptMonitorLocationPrivateArray) ToScriptMonitorLocationPrivateArrayOutputWithContext(ctx context.Context) ScriptMonitorLocationPrivateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptMonitorLocationPrivateArrayOutput)
}

type ScriptMonitorLocationPrivateOutput struct{ *pulumi.OutputState }

func (ScriptMonitorLocationPrivateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptMonitorLocationPrivate)(nil)).Elem()
}

func (o ScriptMonitorLocationPrivateOutput) ToScriptMonitorLocationPrivateOutput() ScriptMonitorLocationPrivateOutput {
	return o
}

func (o ScriptMonitorLocationPrivateOutput) ToScriptMonitorLocationPrivateOutputWithContext(ctx context.Context) ScriptMonitorLocationPrivateOutput {
	return o
}

// The unique identifier for the Synthetics private location in New Relic.
func (o ScriptMonitorLocationPrivateOutput) Guid() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptMonitorLocationPrivate) string { return v.Guid }).(pulumi.StringOutput)
}

// The location's Verified Script Execution password, Only necessary if Verified Script Execution is enabled for the location.
func (o ScriptMonitorLocationPrivateOutput) VsePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptMonitorLocationPrivate) *string { return v.VsePassword }).(pulumi.StringPtrOutput)
}

type ScriptMonitorLocationPrivateArrayOutput struct{ *pulumi.OutputState }

func (ScriptMonitorLocationPrivateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptMonitorLocationPrivate)(nil)).Elem()
}

func (o ScriptMonitorLocationPrivateArrayOutput) ToScriptMonitorLocationPrivateArrayOutput() ScriptMonitorLocationPrivateArrayOutput {
	return o
}

func (o ScriptMonitorLocationPrivateArrayOutput) ToScriptMonitorLocationPrivateArrayOutputWithContext(ctx context.Context) ScriptMonitorLocationPrivateArrayOutput {
	return o
}

func (o ScriptMonitorLocationPrivateArrayOutput) Index(i pulumi.IntInput) ScriptMonitorLocationPrivateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptMonitorLocationPrivate {
		return vs[0].([]ScriptMonitorLocationPrivate)[vs[1].(int)]
	}).(ScriptMonitorLocationPrivateOutput)
}

type ScriptMonitorTag struct {
	// Name of the tag key.
	Key string `pulumi:"key"`
	// Values associated with the tag key.
	Values []string `pulumi:"values"`
}

// ScriptMonitorTagInput is an input type that accepts ScriptMonitorTagArgs and ScriptMonitorTagOutput values.
// You can construct a concrete instance of `ScriptMonitorTagInput` via:
//
//	ScriptMonitorTagArgs{...}
type ScriptMonitorTagInput interface {
	pulumi.Input

	ToScriptMonitorTagOutput() ScriptMonitorTagOutput
	ToScriptMonitorTagOutputWithContext(context.Context) ScriptMonitorTagOutput
}

type ScriptMonitorTagArgs struct {
	// Name of the tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// Values associated with the tag key.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScriptMonitorTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptMonitorTag)(nil)).Elem()
}

func (i ScriptMonitorTagArgs) ToScriptMonitorTagOutput() ScriptMonitorTagOutput {
	return i.ToScriptMonitorTagOutputWithContext(context.Background())
}

func (i ScriptMonitorTagArgs) ToScriptMonitorTagOutputWithContext(ctx context.Context) ScriptMonitorTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptMonitorTagOutput)
}

// ScriptMonitorTagArrayInput is an input type that accepts ScriptMonitorTagArray and ScriptMonitorTagArrayOutput values.
// You can construct a concrete instance of `ScriptMonitorTagArrayInput` via:
//
//	ScriptMonitorTagArray{ ScriptMonitorTagArgs{...} }
type ScriptMonitorTagArrayInput interface {
	pulumi.Input

	ToScriptMonitorTagArrayOutput() ScriptMonitorTagArrayOutput
	ToScriptMonitorTagArrayOutputWithContext(context.Context) ScriptMonitorTagArrayOutput
}

type ScriptMonitorTagArray []ScriptMonitorTagInput

func (ScriptMonitorTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptMonitorTag)(nil)).Elem()
}

func (i ScriptMonitorTagArray) ToScriptMonitorTagArrayOutput() ScriptMonitorTagArrayOutput {
	return i.ToScriptMonitorTagArrayOutputWithContext(context.Background())
}

func (i ScriptMonitorTagArray) ToScriptMonitorTagArrayOutputWithContext(ctx context.Context) ScriptMonitorTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptMonitorTagArrayOutput)
}

type ScriptMonitorTagOutput struct{ *pulumi.OutputState }

func (ScriptMonitorTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptMonitorTag)(nil)).Elem()
}

func (o ScriptMonitorTagOutput) ToScriptMonitorTagOutput() ScriptMonitorTagOutput {
	return o
}

func (o ScriptMonitorTagOutput) ToScriptMonitorTagOutputWithContext(ctx context.Context) ScriptMonitorTagOutput {
	return o
}

// Name of the tag key.
func (o ScriptMonitorTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptMonitorTag) string { return v.Key }).(pulumi.StringOutput)
}

// Values associated with the tag key.
func (o ScriptMonitorTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScriptMonitorTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScriptMonitorTagArrayOutput struct{ *pulumi.OutputState }

func (ScriptMonitorTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptMonitorTag)(nil)).Elem()
}

func (o ScriptMonitorTagArrayOutput) ToScriptMonitorTagArrayOutput() ScriptMonitorTagArrayOutput {
	return o
}

func (o ScriptMonitorTagArrayOutput) ToScriptMonitorTagArrayOutputWithContext(ctx context.Context) ScriptMonitorTagArrayOutput {
	return o
}

func (o ScriptMonitorTagArrayOutput) Index(i pulumi.IntInput) ScriptMonitorTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptMonitorTag {
		return vs[0].([]ScriptMonitorTag)[vs[1].(int)]
	}).(ScriptMonitorTagOutput)
}

type StepMonitorLocationPrivate struct {
	// The unique identifier for the Synthetics private location in New Relic.
	Guid string `pulumi:"guid"`
	// The location's Verified Script Execution password, only necessary if Verified Script Execution is enabled for the location.
	VsePassword *string `pulumi:"vsePassword"`
}

// StepMonitorLocationPrivateInput is an input type that accepts StepMonitorLocationPrivateArgs and StepMonitorLocationPrivateOutput values.
// You can construct a concrete instance of `StepMonitorLocationPrivateInput` via:
//
//	StepMonitorLocationPrivateArgs{...}
type StepMonitorLocationPrivateInput interface {
	pulumi.Input

	ToStepMonitorLocationPrivateOutput() StepMonitorLocationPrivateOutput
	ToStepMonitorLocationPrivateOutputWithContext(context.Context) StepMonitorLocationPrivateOutput
}

type StepMonitorLocationPrivateArgs struct {
	// The unique identifier for the Synthetics private location in New Relic.
	Guid pulumi.StringInput `pulumi:"guid"`
	// The location's Verified Script Execution password, only necessary if Verified Script Execution is enabled for the location.
	VsePassword pulumi.StringPtrInput `pulumi:"vsePassword"`
}

func (StepMonitorLocationPrivateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StepMonitorLocationPrivate)(nil)).Elem()
}

func (i StepMonitorLocationPrivateArgs) ToStepMonitorLocationPrivateOutput() StepMonitorLocationPrivateOutput {
	return i.ToStepMonitorLocationPrivateOutputWithContext(context.Background())
}

func (i StepMonitorLocationPrivateArgs) ToStepMonitorLocationPrivateOutputWithContext(ctx context.Context) StepMonitorLocationPrivateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepMonitorLocationPrivateOutput)
}

// StepMonitorLocationPrivateArrayInput is an input type that accepts StepMonitorLocationPrivateArray and StepMonitorLocationPrivateArrayOutput values.
// You can construct a concrete instance of `StepMonitorLocationPrivateArrayInput` via:
//
//	StepMonitorLocationPrivateArray{ StepMonitorLocationPrivateArgs{...} }
type StepMonitorLocationPrivateArrayInput interface {
	pulumi.Input

	ToStepMonitorLocationPrivateArrayOutput() StepMonitorLocationPrivateArrayOutput
	ToStepMonitorLocationPrivateArrayOutputWithContext(context.Context) StepMonitorLocationPrivateArrayOutput
}

type StepMonitorLocationPrivateArray []StepMonitorLocationPrivateInput

func (StepMonitorLocationPrivateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepMonitorLocationPrivate)(nil)).Elem()
}

func (i StepMonitorLocationPrivateArray) ToStepMonitorLocationPrivateArrayOutput() StepMonitorLocationPrivateArrayOutput {
	return i.ToStepMonitorLocationPrivateArrayOutputWithContext(context.Background())
}

func (i StepMonitorLocationPrivateArray) ToStepMonitorLocationPrivateArrayOutputWithContext(ctx context.Context) StepMonitorLocationPrivateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepMonitorLocationPrivateArrayOutput)
}

type StepMonitorLocationPrivateOutput struct{ *pulumi.OutputState }

func (StepMonitorLocationPrivateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StepMonitorLocationPrivate)(nil)).Elem()
}

func (o StepMonitorLocationPrivateOutput) ToStepMonitorLocationPrivateOutput() StepMonitorLocationPrivateOutput {
	return o
}

func (o StepMonitorLocationPrivateOutput) ToStepMonitorLocationPrivateOutputWithContext(ctx context.Context) StepMonitorLocationPrivateOutput {
	return o
}

// The unique identifier for the Synthetics private location in New Relic.
func (o StepMonitorLocationPrivateOutput) Guid() pulumi.StringOutput {
	return o.ApplyT(func(v StepMonitorLocationPrivate) string { return v.Guid }).(pulumi.StringOutput)
}

// The location's Verified Script Execution password, only necessary if Verified Script Execution is enabled for the location.
func (o StepMonitorLocationPrivateOutput) VsePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StepMonitorLocationPrivate) *string { return v.VsePassword }).(pulumi.StringPtrOutput)
}

type StepMonitorLocationPrivateArrayOutput struct{ *pulumi.OutputState }

func (StepMonitorLocationPrivateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepMonitorLocationPrivate)(nil)).Elem()
}

func (o StepMonitorLocationPrivateArrayOutput) ToStepMonitorLocationPrivateArrayOutput() StepMonitorLocationPrivateArrayOutput {
	return o
}

func (o StepMonitorLocationPrivateArrayOutput) ToStepMonitorLocationPrivateArrayOutputWithContext(ctx context.Context) StepMonitorLocationPrivateArrayOutput {
	return o
}

func (o StepMonitorLocationPrivateArrayOutput) Index(i pulumi.IntInput) StepMonitorLocationPrivateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StepMonitorLocationPrivate {
		return vs[0].([]StepMonitorLocationPrivate)[vs[1].(int)]
	}).(StepMonitorLocationPrivateOutput)
}

type StepMonitorStep struct {
	// The position of the step within the script ranging from 0-100.
	Ordinal int `pulumi:"ordinal"`
	// Name of the tag key. Valid values are ASSERT_ELEMENT, ASSERT_MODAL, ASSERT_TEXT, ASSERT_TITLE, CLICK_ELEMENT, DISMISS_MODAL, DOUBLE_CLICK_ELEMENT, HOVER_ELEMENT, NAVIGATE, SECURE_TEXT_ENTRY, SELECT_ELEMENT, TEXT_ENTRY.
	Type string `pulumi:"type"`
	// The metadata values related to the step.
	Values []string `pulumi:"values"`
}

// StepMonitorStepInput is an input type that accepts StepMonitorStepArgs and StepMonitorStepOutput values.
// You can construct a concrete instance of `StepMonitorStepInput` via:
//
//	StepMonitorStepArgs{...}
type StepMonitorStepInput interface {
	pulumi.Input

	ToStepMonitorStepOutput() StepMonitorStepOutput
	ToStepMonitorStepOutputWithContext(context.Context) StepMonitorStepOutput
}

type StepMonitorStepArgs struct {
	// The position of the step within the script ranging from 0-100.
	Ordinal pulumi.IntInput `pulumi:"ordinal"`
	// Name of the tag key. Valid values are ASSERT_ELEMENT, ASSERT_MODAL, ASSERT_TEXT, ASSERT_TITLE, CLICK_ELEMENT, DISMISS_MODAL, DOUBLE_CLICK_ELEMENT, HOVER_ELEMENT, NAVIGATE, SECURE_TEXT_ENTRY, SELECT_ELEMENT, TEXT_ENTRY.
	Type pulumi.StringInput `pulumi:"type"`
	// The metadata values related to the step.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StepMonitorStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StepMonitorStep)(nil)).Elem()
}

func (i StepMonitorStepArgs) ToStepMonitorStepOutput() StepMonitorStepOutput {
	return i.ToStepMonitorStepOutputWithContext(context.Background())
}

func (i StepMonitorStepArgs) ToStepMonitorStepOutputWithContext(ctx context.Context) StepMonitorStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepMonitorStepOutput)
}

// StepMonitorStepArrayInput is an input type that accepts StepMonitorStepArray and StepMonitorStepArrayOutput values.
// You can construct a concrete instance of `StepMonitorStepArrayInput` via:
//
//	StepMonitorStepArray{ StepMonitorStepArgs{...} }
type StepMonitorStepArrayInput interface {
	pulumi.Input

	ToStepMonitorStepArrayOutput() StepMonitorStepArrayOutput
	ToStepMonitorStepArrayOutputWithContext(context.Context) StepMonitorStepArrayOutput
}

type StepMonitorStepArray []StepMonitorStepInput

func (StepMonitorStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepMonitorStep)(nil)).Elem()
}

func (i StepMonitorStepArray) ToStepMonitorStepArrayOutput() StepMonitorStepArrayOutput {
	return i.ToStepMonitorStepArrayOutputWithContext(context.Background())
}

func (i StepMonitorStepArray) ToStepMonitorStepArrayOutputWithContext(ctx context.Context) StepMonitorStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepMonitorStepArrayOutput)
}

type StepMonitorStepOutput struct{ *pulumi.OutputState }

func (StepMonitorStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StepMonitorStep)(nil)).Elem()
}

func (o StepMonitorStepOutput) ToStepMonitorStepOutput() StepMonitorStepOutput {
	return o
}

func (o StepMonitorStepOutput) ToStepMonitorStepOutputWithContext(ctx context.Context) StepMonitorStepOutput {
	return o
}

// The position of the step within the script ranging from 0-100.
func (o StepMonitorStepOutput) Ordinal() pulumi.IntOutput {
	return o.ApplyT(func(v StepMonitorStep) int { return v.Ordinal }).(pulumi.IntOutput)
}

// Name of the tag key. Valid values are ASSERT_ELEMENT, ASSERT_MODAL, ASSERT_TEXT, ASSERT_TITLE, CLICK_ELEMENT, DISMISS_MODAL, DOUBLE_CLICK_ELEMENT, HOVER_ELEMENT, NAVIGATE, SECURE_TEXT_ENTRY, SELECT_ELEMENT, TEXT_ENTRY.
func (o StepMonitorStepOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StepMonitorStep) string { return v.Type }).(pulumi.StringOutput)
}

// The metadata values related to the step.
func (o StepMonitorStepOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StepMonitorStep) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type StepMonitorStepArrayOutput struct{ *pulumi.OutputState }

func (StepMonitorStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepMonitorStep)(nil)).Elem()
}

func (o StepMonitorStepArrayOutput) ToStepMonitorStepArrayOutput() StepMonitorStepArrayOutput {
	return o
}

func (o StepMonitorStepArrayOutput) ToStepMonitorStepArrayOutputWithContext(ctx context.Context) StepMonitorStepArrayOutput {
	return o
}

func (o StepMonitorStepArrayOutput) Index(i pulumi.IntInput) StepMonitorStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StepMonitorStep {
		return vs[0].([]StepMonitorStep)[vs[1].(int)]
	}).(StepMonitorStepOutput)
}

type StepMonitorTag struct {
	// Name of the tag key.
	Key string `pulumi:"key"`
	// Values associated with the tag key.
	Values []string `pulumi:"values"`
}

// StepMonitorTagInput is an input type that accepts StepMonitorTagArgs and StepMonitorTagOutput values.
// You can construct a concrete instance of `StepMonitorTagInput` via:
//
//	StepMonitorTagArgs{...}
type StepMonitorTagInput interface {
	pulumi.Input

	ToStepMonitorTagOutput() StepMonitorTagOutput
	ToStepMonitorTagOutputWithContext(context.Context) StepMonitorTagOutput
}

type StepMonitorTagArgs struct {
	// Name of the tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// Values associated with the tag key.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StepMonitorTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StepMonitorTag)(nil)).Elem()
}

func (i StepMonitorTagArgs) ToStepMonitorTagOutput() StepMonitorTagOutput {
	return i.ToStepMonitorTagOutputWithContext(context.Background())
}

func (i StepMonitorTagArgs) ToStepMonitorTagOutputWithContext(ctx context.Context) StepMonitorTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepMonitorTagOutput)
}

// StepMonitorTagArrayInput is an input type that accepts StepMonitorTagArray and StepMonitorTagArrayOutput values.
// You can construct a concrete instance of `StepMonitorTagArrayInput` via:
//
//	StepMonitorTagArray{ StepMonitorTagArgs{...} }
type StepMonitorTagArrayInput interface {
	pulumi.Input

	ToStepMonitorTagArrayOutput() StepMonitorTagArrayOutput
	ToStepMonitorTagArrayOutputWithContext(context.Context) StepMonitorTagArrayOutput
}

type StepMonitorTagArray []StepMonitorTagInput

func (StepMonitorTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepMonitorTag)(nil)).Elem()
}

func (i StepMonitorTagArray) ToStepMonitorTagArrayOutput() StepMonitorTagArrayOutput {
	return i.ToStepMonitorTagArrayOutputWithContext(context.Background())
}

func (i StepMonitorTagArray) ToStepMonitorTagArrayOutputWithContext(ctx context.Context) StepMonitorTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepMonitorTagArrayOutput)
}

type StepMonitorTagOutput struct{ *pulumi.OutputState }

func (StepMonitorTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StepMonitorTag)(nil)).Elem()
}

func (o StepMonitorTagOutput) ToStepMonitorTagOutput() StepMonitorTagOutput {
	return o
}

func (o StepMonitorTagOutput) ToStepMonitorTagOutputWithContext(ctx context.Context) StepMonitorTagOutput {
	return o
}

// Name of the tag key.
func (o StepMonitorTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v StepMonitorTag) string { return v.Key }).(pulumi.StringOutput)
}

// Values associated with the tag key.
func (o StepMonitorTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StepMonitorTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type StepMonitorTagArrayOutput struct{ *pulumi.OutputState }

func (StepMonitorTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepMonitorTag)(nil)).Elem()
}

func (o StepMonitorTagArrayOutput) ToStepMonitorTagArrayOutput() StepMonitorTagArrayOutput {
	return o
}

func (o StepMonitorTagArrayOutput) ToStepMonitorTagArrayOutputWithContext(ctx context.Context) StepMonitorTagArrayOutput {
	return o
}

func (o StepMonitorTagArrayOutput) Index(i pulumi.IntInput) StepMonitorTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StepMonitorTag {
		return vs[0].([]StepMonitorTag)[vs[1].(int)]
	}).(StepMonitorTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrokenLinksMonitorTagInput)(nil)).Elem(), BrokenLinksMonitorTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrokenLinksMonitorTagArrayInput)(nil)).Elem(), BrokenLinksMonitorTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertCheckMonitorTagInput)(nil)).Elem(), CertCheckMonitorTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertCheckMonitorTagArrayInput)(nil)).Elem(), CertCheckMonitorTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorCustomHeaderInput)(nil)).Elem(), MonitorCustomHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorCustomHeaderArrayInput)(nil)).Elem(), MonitorCustomHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorDowntimeEndRepeatInput)(nil)).Elem(), MonitorDowntimeEndRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorDowntimeEndRepeatPtrInput)(nil)).Elem(), MonitorDowntimeEndRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorDowntimeFrequencyInput)(nil)).Elem(), MonitorDowntimeFrequencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorDowntimeFrequencyPtrInput)(nil)).Elem(), MonitorDowntimeFrequencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorDowntimeFrequencyDaysOfWeekInput)(nil)).Elem(), MonitorDowntimeFrequencyDaysOfWeekArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorDowntimeFrequencyDaysOfWeekPtrInput)(nil)).Elem(), MonitorDowntimeFrequencyDaysOfWeekArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTagInput)(nil)).Elem(), MonitorTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTagArrayInput)(nil)).Elem(), MonitorTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiLocationAlertConditionCriticalInput)(nil)).Elem(), MultiLocationAlertConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiLocationAlertConditionCriticalPtrInput)(nil)).Elem(), MultiLocationAlertConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiLocationAlertConditionWarningInput)(nil)).Elem(), MultiLocationAlertConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiLocationAlertConditionWarningPtrInput)(nil)).Elem(), MultiLocationAlertConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScriptMonitorLocationPrivateInput)(nil)).Elem(), ScriptMonitorLocationPrivateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScriptMonitorLocationPrivateArrayInput)(nil)).Elem(), ScriptMonitorLocationPrivateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScriptMonitorTagInput)(nil)).Elem(), ScriptMonitorTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScriptMonitorTagArrayInput)(nil)).Elem(), ScriptMonitorTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StepMonitorLocationPrivateInput)(nil)).Elem(), StepMonitorLocationPrivateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StepMonitorLocationPrivateArrayInput)(nil)).Elem(), StepMonitorLocationPrivateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StepMonitorStepInput)(nil)).Elem(), StepMonitorStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StepMonitorStepArrayInput)(nil)).Elem(), StepMonitorStepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StepMonitorTagInput)(nil)).Elem(), StepMonitorTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StepMonitorTagArrayInput)(nil)).Elem(), StepMonitorTagArray{})
	pulumi.RegisterOutputType(BrokenLinksMonitorTagOutput{})
	pulumi.RegisterOutputType(BrokenLinksMonitorTagArrayOutput{})
	pulumi.RegisterOutputType(CertCheckMonitorTagOutput{})
	pulumi.RegisterOutputType(CertCheckMonitorTagArrayOutput{})
	pulumi.RegisterOutputType(MonitorCustomHeaderOutput{})
	pulumi.RegisterOutputType(MonitorCustomHeaderArrayOutput{})
	pulumi.RegisterOutputType(MonitorDowntimeEndRepeatOutput{})
	pulumi.RegisterOutputType(MonitorDowntimeEndRepeatPtrOutput{})
	pulumi.RegisterOutputType(MonitorDowntimeFrequencyOutput{})
	pulumi.RegisterOutputType(MonitorDowntimeFrequencyPtrOutput{})
	pulumi.RegisterOutputType(MonitorDowntimeFrequencyDaysOfWeekOutput{})
	pulumi.RegisterOutputType(MonitorDowntimeFrequencyDaysOfWeekPtrOutput{})
	pulumi.RegisterOutputType(MonitorTagOutput{})
	pulumi.RegisterOutputType(MonitorTagArrayOutput{})
	pulumi.RegisterOutputType(MultiLocationAlertConditionCriticalOutput{})
	pulumi.RegisterOutputType(MultiLocationAlertConditionCriticalPtrOutput{})
	pulumi.RegisterOutputType(MultiLocationAlertConditionWarningOutput{})
	pulumi.RegisterOutputType(MultiLocationAlertConditionWarningPtrOutput{})
	pulumi.RegisterOutputType(ScriptMonitorLocationPrivateOutput{})
	pulumi.RegisterOutputType(ScriptMonitorLocationPrivateArrayOutput{})
	pulumi.RegisterOutputType(ScriptMonitorTagOutput{})
	pulumi.RegisterOutputType(ScriptMonitorTagArrayOutput{})
	pulumi.RegisterOutputType(StepMonitorLocationPrivateOutput{})
	pulumi.RegisterOutputType(StepMonitorLocationPrivateArrayOutput{})
	pulumi.RegisterOutputType(StepMonitorStepOutput{})
	pulumi.RegisterOutputType(StepMonitorStepArrayOutput{})
	pulumi.RegisterOutputType(StepMonitorTagOutput{})
	pulumi.RegisterOutputType(StepMonitorTagArrayOutput{})
}
