// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package synthetics

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Use this data source to get information about a specific synthetics monitor in New Relic that already exists. This can be used to set up a Synthetics alert condition.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/synthetics"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		bar, err := synthetics.LookupMonitor(ctx, &synthetics.LookupMonitorArgs{
// 			Name: "bar",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = synthetics.NewAlertCondition(ctx, "baz", &synthetics.AlertConditionArgs{
// 			PolicyId:   pulumi.String(newrelic_alert_policy.Foo.Id),
// 			MonitorId:  pulumi.String(bar.Id),
// 			RunbookUrl: pulumi.String("https://www.example.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupMonitor(ctx *pulumi.Context, args *LookupMonitorArgs, opts ...pulumi.InvokeOption) (*LookupMonitorResult, error) {
	var rv LookupMonitorResult
	err := ctx.Invoke("newrelic:synthetics/getMonitor:getMonitor", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMonitor.
type LookupMonitorArgs struct {
	// The name of the synthetics monitor in New Relic.
	Name string `pulumi:"name"`
}

// A collection of values returned by getMonitor.
type LookupMonitorResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the synthetics monitor.
	MonitorId string `pulumi:"monitorId"`
	Name      string `pulumi:"name"`
}
