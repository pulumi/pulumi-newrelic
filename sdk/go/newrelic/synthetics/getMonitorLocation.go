// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synthetics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about a specific Synthetics monitor location in New Relic that already exists.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-newrelic/sdk/v4/go/newrelic/synthetics"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		bar, err := synthetics.GetMonitorLocation(ctx, &synthetics.GetMonitorLocationArgs{
// 			Label: "My private location",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = synthetics.NewMonitor(ctx, "foo", &synthetics.MonitorArgs{
// 			Type:      pulumi.String("SIMPLE"),
// 			Frequency: pulumi.Int(5),
// 			Status:    pulumi.String("ENABLED"),
// 			Locations: pulumi.StringArray{
// 				pulumi.String(bar.Name),
// 			},
// 			Uri:              pulumi.String("https://example.com"),
// 			ValidationString: pulumi.String("add example validation check here"),
// 			VerifySsl:        pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetMonitorLocation(ctx *pulumi.Context, args *GetMonitorLocationArgs, opts ...pulumi.InvokeOption) (*GetMonitorLocationResult, error) {
	var rv GetMonitorLocationResult
	err := ctx.Invoke("newrelic:synthetics/getMonitorLocation:getMonitorLocation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMonitorLocation.
type GetMonitorLocationArgs struct {
	// The label of the Synthetics monitor location.
	Label string `pulumi:"label"`
}

// A collection of values returned by getMonitorLocation.
type GetMonitorLocationResult struct {
	// A description of the Synthetics monitor location.
	Description string `pulumi:"description"`
	// Represents if high security mode is enabled for the location. A value of true means that high security mode is enabled, and a value of false means it is disabled.
	HighSecurityMode bool `pulumi:"highSecurityMode"`
	// The provider-assigned unique ID for this managed resource.
	Id    string `pulumi:"id"`
	Label string `pulumi:"label"`
	// The name of the Synthetics monitor location.
	Name string `pulumi:"name"`
	// Represents if this location is a private location. A value of true means that the location is private, and a value of false means it is public.
	Private bool `pulumi:"private"`
}

func GetMonitorLocationOutput(ctx *pulumi.Context, args GetMonitorLocationOutputArgs, opts ...pulumi.InvokeOption) GetMonitorLocationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetMonitorLocationResult, error) {
			args := v.(GetMonitorLocationArgs)
			r, err := GetMonitorLocation(ctx, &args, opts...)
			var s GetMonitorLocationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetMonitorLocationResultOutput)
}

// A collection of arguments for invoking getMonitorLocation.
type GetMonitorLocationOutputArgs struct {
	// The label of the Synthetics monitor location.
	Label pulumi.StringInput `pulumi:"label"`
}

func (GetMonitorLocationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorLocationArgs)(nil)).Elem()
}

// A collection of values returned by getMonitorLocation.
type GetMonitorLocationResultOutput struct{ *pulumi.OutputState }

func (GetMonitorLocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorLocationResult)(nil)).Elem()
}

func (o GetMonitorLocationResultOutput) ToGetMonitorLocationResultOutput() GetMonitorLocationResultOutput {
	return o
}

func (o GetMonitorLocationResultOutput) ToGetMonitorLocationResultOutputWithContext(ctx context.Context) GetMonitorLocationResultOutput {
	return o
}

// A description of the Synthetics monitor location.
func (o GetMonitorLocationResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorLocationResult) string { return v.Description }).(pulumi.StringOutput)
}

// Represents if high security mode is enabled for the location. A value of true means that high security mode is enabled, and a value of false means it is disabled.
func (o GetMonitorLocationResultOutput) HighSecurityMode() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMonitorLocationResult) bool { return v.HighSecurityMode }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetMonitorLocationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorLocationResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetMonitorLocationResultOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorLocationResult) string { return v.Label }).(pulumi.StringOutput)
}

// The name of the Synthetics monitor location.
func (o GetMonitorLocationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorLocationResult) string { return v.Name }).(pulumi.StringOutput)
}

// Represents if this location is a private location. A value of true means that the location is private, and a value of false means it is public.
func (o GetMonitorLocationResultOutput) Private() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMonitorLocationResult) bool { return v.Private }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMonitorLocationResultOutput{})
}
