// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synthetics

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "newrelic:synthetics/alertCondition:AlertCondition":
		r = &AlertCondition{}
	case "newrelic:synthetics/brokenLinksMonitor:BrokenLinksMonitor":
		r = &BrokenLinksMonitor{}
	case "newrelic:synthetics/certCheckMonitor:CertCheckMonitor":
		r = &CertCheckMonitor{}
	case "newrelic:synthetics/monitor:Monitor":
		r = &Monitor{}
	case "newrelic:synthetics/multiLocationAlertCondition:MultiLocationAlertCondition":
		r = &MultiLocationAlertCondition{}
	case "newrelic:synthetics/privateLocation:PrivateLocation":
		r = &PrivateLocation{}
	case "newrelic:synthetics/scriptMonitor:ScriptMonitor":
		r = &ScriptMonitor{}
	case "newrelic:synthetics/secureCredential:SecureCredential":
		r = &SecureCredential{}
	case "newrelic:synthetics/stepMonitor:StepMonitor":
		r = &StepMonitor{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"newrelic",
		"synthetics/alertCondition",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"synthetics/brokenLinksMonitor",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"synthetics/certCheckMonitor",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"synthetics/monitor",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"synthetics/multiLocationAlertCondition",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"synthetics/privateLocation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"synthetics/scriptMonitor",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"synthetics/secureCredential",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"synthetics/stepMonitor",
		&module{version},
	)
}
