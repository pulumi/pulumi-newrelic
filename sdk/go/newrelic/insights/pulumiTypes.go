// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package insights

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type EventEvent struct {
	Attributes []EventEventAttribute `pulumi:"attributes"`
	Timestamp  *int                  `pulumi:"timestamp"`
	Type       string                `pulumi:"type"`
}

// EventEventInput is an input type that accepts EventEventArgs and EventEventOutput values.
// You can construct a concrete instance of `EventEventInput` via:
//
// 		 EventEventArgs{...}
//
type EventEventInput interface {
	pulumi.Input

	ToEventEventOutput() EventEventOutput
	ToEventEventOutputWithContext(context.Context) EventEventOutput
}

type EventEventArgs struct {
	Attributes EventEventAttributeArrayInput `pulumi:"attributes"`
	Timestamp  pulumi.IntPtrInput            `pulumi:"timestamp"`
	Type       pulumi.StringInput            `pulumi:"type"`
}

func (EventEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEvent)(nil)).Elem()
}

func (i EventEventArgs) ToEventEventOutput() EventEventOutput {
	return i.ToEventEventOutputWithContext(context.Background())
}

func (i EventEventArgs) ToEventEventOutputWithContext(ctx context.Context) EventEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventEventOutput)
}

// EventEventArrayInput is an input type that accepts EventEventArray and EventEventArrayOutput values.
// You can construct a concrete instance of `EventEventArrayInput` via:
//
// 		 EventEventArray{ EventEventArgs{...} }
//
type EventEventArrayInput interface {
	pulumi.Input

	ToEventEventArrayOutput() EventEventArrayOutput
	ToEventEventArrayOutputWithContext(context.Context) EventEventArrayOutput
}

type EventEventArray []EventEventInput

func (EventEventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventEvent)(nil)).Elem()
}

func (i EventEventArray) ToEventEventArrayOutput() EventEventArrayOutput {
	return i.ToEventEventArrayOutputWithContext(context.Background())
}

func (i EventEventArray) ToEventEventArrayOutputWithContext(ctx context.Context) EventEventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventEventArrayOutput)
}

type EventEventOutput struct{ *pulumi.OutputState }

func (EventEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEvent)(nil)).Elem()
}

func (o EventEventOutput) ToEventEventOutput() EventEventOutput {
	return o
}

func (o EventEventOutput) ToEventEventOutputWithContext(ctx context.Context) EventEventOutput {
	return o
}

func (o EventEventOutput) Attributes() EventEventAttributeArrayOutput {
	return o.ApplyT(func(v EventEvent) []EventEventAttribute { return v.Attributes }).(EventEventAttributeArrayOutput)
}

func (o EventEventOutput) Timestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventEvent) *int { return v.Timestamp }).(pulumi.IntPtrOutput)
}

func (o EventEventOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventEvent) string { return v.Type }).(pulumi.StringOutput)
}

type EventEventArrayOutput struct{ *pulumi.OutputState }

func (EventEventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventEvent)(nil)).Elem()
}

func (o EventEventArrayOutput) ToEventEventArrayOutput() EventEventArrayOutput {
	return o
}

func (o EventEventArrayOutput) ToEventEventArrayOutputWithContext(ctx context.Context) EventEventArrayOutput {
	return o
}

func (o EventEventArrayOutput) Index(i pulumi.IntInput) EventEventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventEvent {
		return vs[0].([]EventEvent)[vs[1].(int)]
	}).(EventEventOutput)
}

type EventEventAttribute struct {
	Key   string  `pulumi:"key"`
	Type  *string `pulumi:"type"`
	Value string  `pulumi:"value"`
}

// EventEventAttributeInput is an input type that accepts EventEventAttributeArgs and EventEventAttributeOutput values.
// You can construct a concrete instance of `EventEventAttributeInput` via:
//
// 		 EventEventAttributeArgs{...}
//
type EventEventAttributeInput interface {
	pulumi.Input

	ToEventEventAttributeOutput() EventEventAttributeOutput
	ToEventEventAttributeOutputWithContext(context.Context) EventEventAttributeOutput
}

type EventEventAttributeArgs struct {
	Key   pulumi.StringInput    `pulumi:"key"`
	Type  pulumi.StringPtrInput `pulumi:"type"`
	Value pulumi.StringInput    `pulumi:"value"`
}

func (EventEventAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEventAttribute)(nil)).Elem()
}

func (i EventEventAttributeArgs) ToEventEventAttributeOutput() EventEventAttributeOutput {
	return i.ToEventEventAttributeOutputWithContext(context.Background())
}

func (i EventEventAttributeArgs) ToEventEventAttributeOutputWithContext(ctx context.Context) EventEventAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventEventAttributeOutput)
}

// EventEventAttributeArrayInput is an input type that accepts EventEventAttributeArray and EventEventAttributeArrayOutput values.
// You can construct a concrete instance of `EventEventAttributeArrayInput` via:
//
// 		 EventEventAttributeArray{ EventEventAttributeArgs{...} }
//
type EventEventAttributeArrayInput interface {
	pulumi.Input

	ToEventEventAttributeArrayOutput() EventEventAttributeArrayOutput
	ToEventEventAttributeArrayOutputWithContext(context.Context) EventEventAttributeArrayOutput
}

type EventEventAttributeArray []EventEventAttributeInput

func (EventEventAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventEventAttribute)(nil)).Elem()
}

func (i EventEventAttributeArray) ToEventEventAttributeArrayOutput() EventEventAttributeArrayOutput {
	return i.ToEventEventAttributeArrayOutputWithContext(context.Background())
}

func (i EventEventAttributeArray) ToEventEventAttributeArrayOutputWithContext(ctx context.Context) EventEventAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventEventAttributeArrayOutput)
}

type EventEventAttributeOutput struct{ *pulumi.OutputState }

func (EventEventAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEventAttribute)(nil)).Elem()
}

func (o EventEventAttributeOutput) ToEventEventAttributeOutput() EventEventAttributeOutput {
	return o
}

func (o EventEventAttributeOutput) ToEventEventAttributeOutputWithContext(ctx context.Context) EventEventAttributeOutput {
	return o
}

func (o EventEventAttributeOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventEventAttribute) string { return v.Key }).(pulumi.StringOutput)
}

func (o EventEventAttributeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventEventAttribute) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o EventEventAttributeOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventEventAttribute) string { return v.Value }).(pulumi.StringOutput)
}

type EventEventAttributeArrayOutput struct{ *pulumi.OutputState }

func (EventEventAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventEventAttribute)(nil)).Elem()
}

func (o EventEventAttributeArrayOutput) ToEventEventAttributeArrayOutput() EventEventAttributeArrayOutput {
	return o
}

func (o EventEventAttributeArrayOutput) ToEventEventAttributeArrayOutputWithContext(ctx context.Context) EventEventAttributeArrayOutput {
	return o
}

func (o EventEventAttributeArrayOutput) Index(i pulumi.IntInput) EventEventAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventEventAttribute {
		return vs[0].([]EventEventAttribute)[vs[1].(int)]
	}).(EventEventAttributeOutput)
}

func init() {
	pulumi.RegisterOutputType(EventEventOutput{})
	pulumi.RegisterOutputType(EventEventArrayOutput{})
	pulumi.RegisterOutputType(EventEventAttributeOutput{})
	pulumi.RegisterOutputType(EventEventAttributeArrayOutput{})
}
