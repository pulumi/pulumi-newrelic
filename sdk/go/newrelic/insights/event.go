// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package insights

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Use this resource to create one or more Insights events.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/insights"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := insights.NewEvent(ctx, "foo", &insights.EventArgs{
// 			Events: insights.EventEventArray{
// 				&insights.EventEventArgs{
// 					Attributes: insights.EventEventAttributeArray{
// 						&insights.EventEventAttributeArgs{
// 							Key:   pulumi.String("a_string_attribute"),
// 							Value: pulumi.String("a string"),
// 						},
// 						&insights.EventEventAttributeArgs{
// 							Key:   pulumi.String("an_integer_attribute"),
// 							Type:  pulumi.String("int"),
// 							Value: pulumi.String("42"),
// 						},
// 						&insights.EventEventAttributeArgs{
// 							Key:   pulumi.String("a_float_attribute"),
// 							Type:  pulumi.String("float"),
// 							Value: pulumi.String("101.1"),
// 						},
// 					},
// 					Timestamp: pulumi.Int(1232471100),
// 					Type:      pulumi.String("MyEvent"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Events
//
// The `event` mapping supports the following arguments:
//
//   * `type` - (Required) The event's name. Can be a combination of alphanumeric characters, underscores, and colons.
//   * `timestamp` - (Optional) Must be a Unix epoch timestamp. You can define timestamps either in seconds or in milliseconds.
//   * `attribute` - (Required) An attribute to include in your event payload. Multiple attribute blocks can be defined for an event. See Attributes below for details.
//
// ### Attributes
//
// The `attribute` mapping supports the following arguments:
//
//   * `key` - (Required) The name of the attribute.
//   * `value` - (Required) The value of the attribute.
//   * `type` - (Optional) Specify the type for the attribute value. This is useful when passing integer or float values to Insights. Allowed values are `string`, `int`, or `float`. Defaults to `string`.
type Event struct {
	pulumi.CustomResourceState

	// An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.
	Events EventEventArrayOutput `pulumi:"events"`
}

// NewEvent registers a new resource with the given unique name, arguments, and options.
func NewEvent(ctx *pulumi.Context,
	name string, args *EventArgs, opts ...pulumi.ResourceOption) (*Event, error) {
	if args == nil || args.Events == nil {
		return nil, errors.New("missing required argument 'Events'")
	}
	if args == nil {
		args = &EventArgs{}
	}
	var resource Event
	err := ctx.RegisterResource("newrelic:insights/event:Event", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEvent gets an existing Event resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEvent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventState, opts ...pulumi.ResourceOption) (*Event, error) {
	var resource Event
	err := ctx.ReadResource("newrelic:insights/event:Event", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Event resources.
type eventState struct {
	// An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.
	Events []EventEvent `pulumi:"events"`
}

type EventState struct {
	// An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.
	Events EventEventArrayInput
}

func (EventState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventState)(nil)).Elem()
}

type eventArgs struct {
	// An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.
	Events []EventEvent `pulumi:"events"`
}

// The set of arguments for constructing a Event resource.
type EventArgs struct {
	// An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.
	Events EventEventArrayInput
}

func (EventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventArgs)(nil)).Elem()
}
