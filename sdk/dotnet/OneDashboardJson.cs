// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    /// <summary>
    /// ## Import
    /// 
    /// New Relic dashboards can be imported using their GUID, e.g. bash
    /// 
    /// ```sh
    ///  $ pulumi import newrelic:index/oneDashboardJson:OneDashboardJson my_dashboard &lt;dashboard GUID&gt;
    /// ```
    /// </summary>
    [NewRelicResourceType("newrelic:index/oneDashboardJson:OneDashboardJson")]
    public partial class OneDashboardJson : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The New Relic account ID where you want to create the dashboard.
        /// </summary>
        [Output("accountId")]
        public Output<int> AccountId { get; private set; } = null!;

        /// <summary>
        /// The unique entity identifier of the dashboard in New Relic.
        /// </summary>
        [Output("guid")]
        public Output<string> Guid { get; private set; } = null!;

        /// <summary>
        /// The JSON export of a dashboard. [The JSON can be exported from the UI](https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/dashboards-charts-import-export-data/#dashboards)
        /// </summary>
        [Output("json")]
        public Output<string> Json { get; private set; } = null!;

        /// <summary>
        /// The URL for viewing the dashboard.
        /// </summary>
        [Output("permalink")]
        public Output<string> Permalink { get; private set; } = null!;

        /// <summary>
        /// The date and time when the dashboard was last updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a OneDashboardJson resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OneDashboardJson(string name, OneDashboardJsonArgs args, CustomResourceOptions? options = null)
            : base("newrelic:index/oneDashboardJson:OneDashboardJson", name, args ?? new OneDashboardJsonArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OneDashboardJson(string name, Input<string> id, OneDashboardJsonState? state = null, CustomResourceOptions? options = null)
            : base("newrelic:index/oneDashboardJson:OneDashboardJson", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OneDashboardJson resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OneDashboardJson Get(string name, Input<string> id, OneDashboardJsonState? state = null, CustomResourceOptions? options = null)
        {
            return new OneDashboardJson(name, id, state, options);
        }
    }

    public sealed class OneDashboardJsonArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The New Relic account ID where you want to create the dashboard.
        /// </summary>
        [Input("accountId")]
        public Input<int>? AccountId { get; set; }

        /// <summary>
        /// The JSON export of a dashboard. [The JSON can be exported from the UI](https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/dashboards-charts-import-export-data/#dashboards)
        /// </summary>
        [Input("json", required: true)]
        public Input<string> Json { get; set; } = null!;

        public OneDashboardJsonArgs()
        {
        }
        public static new OneDashboardJsonArgs Empty => new OneDashboardJsonArgs();
    }

    public sealed class OneDashboardJsonState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The New Relic account ID where you want to create the dashboard.
        /// </summary>
        [Input("accountId")]
        public Input<int>? AccountId { get; set; }

        /// <summary>
        /// The unique entity identifier of the dashboard in New Relic.
        /// </summary>
        [Input("guid")]
        public Input<string>? Guid { get; set; }

        /// <summary>
        /// The JSON export of a dashboard. [The JSON can be exported from the UI](https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/dashboards-charts-import-export-data/#dashboards)
        /// </summary>
        [Input("json")]
        public Input<string>? Json { get; set; }

        /// <summary>
        /// The URL for viewing the dashboard.
        /// </summary>
        [Input("permalink")]
        public Input<string>? Permalink { get; set; }

        /// <summary>
        /// The date and time when the dashboard was last updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public OneDashboardJsonState()
        {
        }
        public static new OneDashboardJsonState Empty => new OneDashboardJsonState();
    }
}
