// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    /// <summary>
    /// Use this resource to create, update and delete New Relic Log Parsing Rule.
    /// 
    /// ## Example Usage
    /// 
    /// Use this example to create the log parse rule.
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using NewRelic = Pulumi.NewRelic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new NewRelic.LogParsingRule("foo", new()
    ///     {
    ///         Attribute = "message",
    ///         Enabled = true,
    ///         Grok = "sampleattribute='%%{NUMBER:test:int}'",
    ///         Lucene = "logtype:linux_messages",
    ///         Nrql = "SELECT * FROM Log WHERE logtype = 'linux_messages'",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Additional Example
    /// 
    /// Use this example to validate a grok pattern and create the log parse rule.  More
    /// information on grok pattern can be found [here](https://docs.newrelic.com/docs/logs/ui-data/parsing/#grok)
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using NewRelic = Pulumi.NewRelic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var grok = NewRelic.GetTestGrokPattern.Invoke(new()
    ///     {
    ///         Grok = "%{IP:host_ip}",
    ///         LogLines = new[]
    ///         {
    ///             "host_ip: 43.3.120.2",
    ///         },
    ///     });
    /// 
    ///     var foo = new NewRelic.LogParsingRule("foo", new()
    ///     {
    ///         Attribute = "message",
    ///         Enabled = true,
    ///         Grok = grok.Apply(getTestGrokPatternResult =&gt; getTestGrokPatternResult.Grok),
    ///         Lucene = "logtype:linux_messages",
    ///         Nrql = "SELECT * FROM Log WHERE logtype = 'linux_messages'",
    ///         Matched = grok.Apply(getTestGrokPatternResult =&gt; getTestGrokPatternResult.TestGroks[0]?.Matched),
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// New Relic log parsing rule can be imported using the rule ID, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import newrelic:index/logParsingRule:LogParsingRule foo 3456789
    /// ```
    /// </summary>
    [NewRelicResourceType("newrelic:index/logParsingRule:LogParsingRule")]
    public partial class LogParsingRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account id associated with the obfuscation rule.
        /// </summary>
        [Output("accountId")]
        public Output<int> AccountId { get; private set; } = null!;

        /// <summary>
        /// The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.
        /// </summary>
        [Output("attribute")]
        public Output<string?> Attribute { get; private set; } = null!;

        /// <summary>
        /// Whether or not this rule is deleted.
        /// </summary>
        [Output("deleted")]
        public Output<bool> Deleted { get; private set; } = null!;

        /// <summary>
        /// Whether the rule should be applied or not to incoming data.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The Grok of what to parse.
        /// </summary>
        [Output("grok")]
        public Output<string> Grok { get; private set; } = null!;

        /// <summary>
        /// The Lucene to match events to the parsing rule.
        /// </summary>
        [Output("lucene")]
        public Output<string> Lucene { get; private set; } = null!;

        /// <summary>
        /// Whether the Grok pattern matched.
        /// </summary>
        [Output("matched")]
        public Output<bool> Matched { get; private set; } = null!;

        /// <summary>
        /// Name of rule.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The NRQL to match events to the parsing rule.
        /// </summary>
        [Output("nrql")]
        public Output<string> Nrql { get; private set; } = null!;


        /// <summary>
        /// Create a LogParsingRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogParsingRule(string name, LogParsingRuleArgs args, CustomResourceOptions? options = null)
            : base("newrelic:index/logParsingRule:LogParsingRule", name, args ?? new LogParsingRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogParsingRule(string name, Input<string> id, LogParsingRuleState? state = null, CustomResourceOptions? options = null)
            : base("newrelic:index/logParsingRule:LogParsingRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogParsingRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogParsingRule Get(string name, Input<string> id, LogParsingRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new LogParsingRule(name, id, state, options);
        }
    }

    public sealed class LogParsingRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account id associated with the obfuscation rule.
        /// </summary>
        [Input("accountId")]
        public Input<int>? AccountId { get; set; }

        /// <summary>
        /// The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.
        /// </summary>
        [Input("attribute")]
        public Input<string>? Attribute { get; set; }

        /// <summary>
        /// Whether the rule should be applied or not to incoming data.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The Grok of what to parse.
        /// </summary>
        [Input("grok", required: true)]
        public Input<string> Grok { get; set; } = null!;

        /// <summary>
        /// The Lucene to match events to the parsing rule.
        /// </summary>
        [Input("lucene", required: true)]
        public Input<string> Lucene { get; set; } = null!;

        /// <summary>
        /// Whether the Grok pattern matched.
        /// </summary>
        [Input("matched")]
        public Input<bool>? Matched { get; set; }

        /// <summary>
        /// Name of rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The NRQL to match events to the parsing rule.
        /// </summary>
        [Input("nrql", required: true)]
        public Input<string> Nrql { get; set; } = null!;

        public LogParsingRuleArgs()
        {
        }
        public static new LogParsingRuleArgs Empty => new LogParsingRuleArgs();
    }

    public sealed class LogParsingRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account id associated with the obfuscation rule.
        /// </summary>
        [Input("accountId")]
        public Input<int>? AccountId { get; set; }

        /// <summary>
        /// The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.
        /// </summary>
        [Input("attribute")]
        public Input<string>? Attribute { get; set; }

        /// <summary>
        /// Whether or not this rule is deleted.
        /// </summary>
        [Input("deleted")]
        public Input<bool>? Deleted { get; set; }

        /// <summary>
        /// Whether the rule should be applied or not to incoming data.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The Grok of what to parse.
        /// </summary>
        [Input("grok")]
        public Input<string>? Grok { get; set; }

        /// <summary>
        /// The Lucene to match events to the parsing rule.
        /// </summary>
        [Input("lucene")]
        public Input<string>? Lucene { get; set; }

        /// <summary>
        /// Whether the Grok pattern matched.
        /// </summary>
        [Input("matched")]
        public Input<bool>? Matched { get; set; }

        /// <summary>
        /// Name of rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The NRQL to match events to the parsing rule.
        /// </summary>
        [Input("nrql")]
        public Input<string>? Nrql { get; set; }

        public LogParsingRuleState()
        {
        }
        public static new LogParsingRuleState Empty => new LogParsingRuleState();
    }
}
