// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    public static class GetAccount
    {
        /// <summary>
        /// Use this data source to get information about a specific account in New Relic.
        /// Accounts can be located by ID or name.  At most one of the two attributes can
        /// be provided. If neither are provided, the provider's `account_id` will be used.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var acc = NewRelic.GetAccount.Invoke(new()
        ///     {
        ///         Scope = "global",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAccountResult> InvokeAsync(GetAccountArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountResult>("newrelic:index/getAccount:getAccount", args ?? new GetAccountArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a specific account in New Relic.
        /// Accounts can be located by ID or name.  At most one of the two attributes can
        /// be provided. If neither are provided, the provider's `account_id` will be used.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var acc = NewRelic.GetAccount.Invoke(new()
        ///     {
        ///         Scope = "global",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountResult> Invoke(GetAccountInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountResult>("newrelic:index/getAccount:getAccount", args ?? new GetAccountInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account ID in New Relic.
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        /// <summary>
        /// The account name in New Relic.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The scope of the account in New Relic.  Valid values are "global" and "in_region".  Defaults to "in_region".
        /// </summary>
        [Input("scope")]
        public string? Scope { get; set; }

        public GetAccountArgs()
        {
        }
        public static new GetAccountArgs Empty => new GetAccountArgs();
    }

    public sealed class GetAccountInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account ID in New Relic.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The account name in New Relic.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The scope of the account in New Relic.  Valid values are "global" and "in_region".  Defaults to "in_region".
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public GetAccountInvokeArgs()
        {
        }
        public static new GetAccountInvokeArgs Empty => new GetAccountInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountResult
    {
        public readonly string? AccountId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;
        public readonly string? Scope;

        [OutputConstructor]
        private GetAccountResult(
            string? accountId,

            string id,

            string? name,

            string? scope)
        {
            AccountId = accountId;
            Id = id;
            Name = name;
            Scope = scope;
        }
    }
}
