// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    /// <summary>
    /// ## Import
    /// 
    /// Destination id can be found in the Destinations page -&gt; three dots at the right of the chosen destination -&gt; copy destination id to clipboard.
    /// 
    /// This example is especially useful for slack destinations which *must* be imported.
    /// 
    /// 1. Add an empty resource to your terraform file:
    /// 
    /// terraform
    /// 
    /// resource "newrelic_notification_destination" "foo" {
    /// 
    /// }
    /// 
    /// ```sh
    /// $ pulumi import newrelic:index/notificationDestination:NotificationDestination  Run import command: `newrelic_notification_destination.foo &lt;destination_id&gt;`
    /// ```
    /// 
    /// 3. Run the following command after the import successfully done and copy the information to your resource:
    /// 
    /// `terraform state show newrelic_notification_destination.foo`
    /// 
    /// 4. Add `ignore_changes` attribute on `auth_token` in your imported resource:
    /// 
    /// terraform
    /// 
    /// lifecycle {
    /// 
    ///     ignore_changes = [auth_token]
    /// 
    ///   }
    /// 
    /// Your imported destination should look like that:
    /// 
    /// terraform
    /// 
    /// resource "newrelic_notification_destination" "foo" {
    /// 
    ///   lifecycle {
    /// 
    ///     ignore_changes = [auth_token]
    /// 
    ///   }
    /// 
    ///   name = "*********"
    /// 
    ///   type = "SLACK"
    /// 
    ///   auth_token {
    /// 
    ///     prefix = "Bearer"
    /// 
    ///   }
    /// 
    ///   property {
    /// 
    ///       key   = "teamName"
    ///     
    ///       label = "Team Name"
    ///     
    ///       value = "******"
    /// 
    ///   }
    /// 
    /// }
    /// </summary>
    [NewRelicResourceType("newrelic:index/notificationDestination:NotificationDestination")]
    public partial class NotificationDestination : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.
        /// </summary>
        [Output("accountId")]
        public Output<int> AccountId { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the destination is active.
        /// </summary>
        [Output("active")]
        public Output<bool?> Active { get; private set; } = null!;

        /// <summary>
        /// A nested block that describes a basic username and password authentication credentials. Only one auth_basic block is permitted per notification destination definition.  See Nested auth_basic blocks below for details.
        /// </summary>
        [Output("authBasic")]
        public Output<Outputs.NotificationDestinationAuthBasic?> AuthBasic { get; private set; } = null!;

        /// <summary>
        /// A nested block that describes a token authentication credentials. Only one auth_token block is permitted per notification destination definition.  See Nested auth_token blocks below for details.
        /// </summary>
        [Output("authToken")]
        public Output<Outputs.NotificationDestinationAuthToken?> AuthToken { get; private set; } = null!;

        /// <summary>
        /// The last time a notification was sent.
        /// </summary>
        [Output("lastSent")]
        public Output<string> LastSent { get; private set; } = null!;

        /// <summary>
        /// The name of the destination.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A nested block that describes a notification destination property. See Nested property blocks below for details.
        /// </summary>
        [Output("properties")]
        public Output<ImmutableArray<Outputs.NotificationDestinationProperty>> Properties { get; private set; } = null!;

        /// <summary>
        /// The status of the destination.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
        /// PAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY, MOBILE_PUSH, EVENT_BRIDGE).
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a NotificationDestination resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NotificationDestination(string name, NotificationDestinationArgs args, CustomResourceOptions? options = null)
            : base("newrelic:index/notificationDestination:NotificationDestination", name, args ?? new NotificationDestinationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NotificationDestination(string name, Input<string> id, NotificationDestinationState? state = null, CustomResourceOptions? options = null)
            : base("newrelic:index/notificationDestination:NotificationDestination", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NotificationDestination resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NotificationDestination Get(string name, Input<string> id, NotificationDestinationState? state = null, CustomResourceOptions? options = null)
        {
            return new NotificationDestination(name, id, state, options);
        }
    }

    public sealed class NotificationDestinationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.
        /// </summary>
        [Input("accountId")]
        public Input<int>? AccountId { get; set; }

        /// <summary>
        /// Indicates whether the destination is active.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// A nested block that describes a basic username and password authentication credentials. Only one auth_basic block is permitted per notification destination definition.  See Nested auth_basic blocks below for details.
        /// </summary>
        [Input("authBasic")]
        public Input<Inputs.NotificationDestinationAuthBasicArgs>? AuthBasic { get; set; }

        /// <summary>
        /// A nested block that describes a token authentication credentials. Only one auth_token block is permitted per notification destination definition.  See Nested auth_token blocks below for details.
        /// </summary>
        [Input("authToken")]
        public Input<Inputs.NotificationDestinationAuthTokenArgs>? AuthToken { get; set; }

        /// <summary>
        /// The name of the destination.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("properties", required: true)]
        private InputList<Inputs.NotificationDestinationPropertyArgs>? _properties;

        /// <summary>
        /// A nested block that describes a notification destination property. See Nested property blocks below for details.
        /// </summary>
        public InputList<Inputs.NotificationDestinationPropertyArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.NotificationDestinationPropertyArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
        /// PAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY, MOBILE_PUSH, EVENT_BRIDGE).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public NotificationDestinationArgs()
        {
        }
        public static new NotificationDestinationArgs Empty => new NotificationDestinationArgs();
    }

    public sealed class NotificationDestinationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.
        /// </summary>
        [Input("accountId")]
        public Input<int>? AccountId { get; set; }

        /// <summary>
        /// Indicates whether the destination is active.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// A nested block that describes a basic username and password authentication credentials. Only one auth_basic block is permitted per notification destination definition.  See Nested auth_basic blocks below for details.
        /// </summary>
        [Input("authBasic")]
        public Input<Inputs.NotificationDestinationAuthBasicGetArgs>? AuthBasic { get; set; }

        /// <summary>
        /// A nested block that describes a token authentication credentials. Only one auth_token block is permitted per notification destination definition.  See Nested auth_token blocks below for details.
        /// </summary>
        [Input("authToken")]
        public Input<Inputs.NotificationDestinationAuthTokenGetArgs>? AuthToken { get; set; }

        /// <summary>
        /// The last time a notification was sent.
        /// </summary>
        [Input("lastSent")]
        public Input<string>? LastSent { get; set; }

        /// <summary>
        /// The name of the destination.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("properties")]
        private InputList<Inputs.NotificationDestinationPropertyGetArgs>? _properties;

        /// <summary>
        /// A nested block that describes a notification destination property. See Nested property blocks below for details.
        /// </summary>
        public InputList<Inputs.NotificationDestinationPropertyGetArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.NotificationDestinationPropertyGetArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// The status of the destination.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
        /// PAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY, MOBILE_PUSH, EVENT_BRIDGE).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public NotificationDestinationState()
        {
        }
        public static new NotificationDestinationState Empty => new NotificationDestinationState();
    }
}
