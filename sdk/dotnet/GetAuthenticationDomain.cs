// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    public static class GetAuthenticationDomain
    {
        /// <summary>
        /// Use this data source to fetch the ID of an authentication domain belonging to your account, matching the specified name.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooAuthenticationDomain = NewRelic.GetAuthenticationDomain.Invoke(new()
        ///     {
        ///         Name = "Test Authentication Domain",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["foo"] = fooAuthenticationDomain.Apply(getAuthenticationDomainResult =&gt; getAuthenticationDomainResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAuthenticationDomainResult> InvokeAsync(GetAuthenticationDomainArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuthenticationDomainResult>("newrelic:index/getAuthenticationDomain:getAuthenticationDomain", args ?? new GetAuthenticationDomainArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to fetch the ID of an authentication domain belonging to your account, matching the specified name.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooAuthenticationDomain = NewRelic.GetAuthenticationDomain.Invoke(new()
        ///     {
        ///         Name = "Test Authentication Domain",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["foo"] = fooAuthenticationDomain.Apply(getAuthenticationDomainResult =&gt; getAuthenticationDomainResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAuthenticationDomainResult> Invoke(GetAuthenticationDomainInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuthenticationDomainResult>("newrelic:index/getAuthenticationDomain:getAuthenticationDomain", args ?? new GetAuthenticationDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuthenticationDomainArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the authentication domain to be searched for. An error is thrown, if no authentication domain is found with the specified name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetAuthenticationDomainArgs()
        {
        }
        public static new GetAuthenticationDomainArgs Empty => new GetAuthenticationDomainArgs();
    }

    public sealed class GetAuthenticationDomainInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the authentication domain to be searched for. An error is thrown, if no authentication domain is found with the specified name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetAuthenticationDomainInvokeArgs()
        {
        }
        public static new GetAuthenticationDomainInvokeArgs Empty => new GetAuthenticationDomainInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuthenticationDomainResult
    {
        /// <summary>
        /// The ID of the matching authentication domain fetched.
        /// </summary>
        public readonly string Id;
        public readonly string Name;

        [OutputConstructor]
        private GetAuthenticationDomainResult(
            string id,

            string name)
        {
            Id = id;
            Name = name;
        }
    }
}
