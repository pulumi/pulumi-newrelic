// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic.Plugins
{
    /// <summary>
    /// ## Import
    /// 
    /// Applications can be imported using notation `application_guid`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import newrelic:plugins/applicationSettings:ApplicationSettings main Mzk1NzUyNHQVRJNTxBUE18QVBQTElDc4ODU1MzYx
    /// ```
    /// </summary>
    [NewRelicResourceType("newrelic:plugins/applicationSettings:ApplicationSettings")]
    public partial class ApplicationSettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The acceptable response time limit (Apdex threshold) for the application.
        /// </summary>
        [Output("appApdexThreshold")]
        public Output<double?> AppApdexThreshold { get; private set; } = null!;

        /// <summary>
        /// Dummy field to support backward compatibility of previous version.should be removed with next major version.
        /// </summary>
        [Output("enableRealUserMonitoring")]
        public Output<bool?> EnableRealUserMonitoring { get; private set; } = null!;

        /// <summary>
        /// Enable or disable the collection of slowest database queries in your traces.
        /// </summary>
        [Output("enableSlowSql")]
        public Output<bool?> EnableSlowSql { get; private set; } = null!;

        /// <summary>
        /// Enable or disable the collection of thread profiling data.
        /// </summary>
        [Output("enableThreadProfiler")]
        public Output<bool?> EnableThreadProfiler { get; private set; } = null!;

        /// <summary>
        /// Dummy field to support backward compatibility of previous version.should be removed with next major version.
        /// </summary>
        [Output("endUserApdexThreshold")]
        public Output<double?> EndUserApdexThreshold { get; private set; } = null!;

        /// <summary>
        /// Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
        /// </summary>
        [Output("errorCollectors")]
        public Output<ImmutableArray<Outputs.ApplicationSettingsErrorCollector>> ErrorCollectors { get; private set; } = null!;

        /// <summary>
        /// The GUID of the application in New Relic APM.
        /// 
        /// &gt; **NOTE:** While the attribute `Guid` is not mandatory at a schema level, it is recommended to use `Guid` over `Name`, as support for using `Name` with this resource shall eventually be discontinued. Please see the note under `Name` for more details.
        /// </summary>
        [Output("guid")]
        public Output<string> Guid { get; private set; } = null!;

        [Output("isImported")]
        public Output<bool> IsImported { get; private set; } = null!;

        /// <summary>
        /// The name of the application in New Relic.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
        /// </summary>
        [Output("tracerType")]
        public Output<string?> TracerType { get; private set; } = null!;

        /// <summary>
        /// Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
        /// </summary>
        [Output("transactionTracers")]
        public Output<ImmutableArray<Outputs.ApplicationSettingsTransactionTracer>> TransactionTracers { get; private set; } = null!;

        /// <summary>
        /// Enable or disable server side monitoring for the New Relic application.
        /// </summary>
        [Output("useServerSideConfig")]
        public Output<bool?> UseServerSideConfig { get; private set; } = null!;


        /// <summary>
        /// Create a ApplicationSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApplicationSettings(string name, ApplicationSettingsArgs? args = null, CustomResourceOptions? options = null)
            : base("newrelic:plugins/applicationSettings:ApplicationSettings", name, args ?? new ApplicationSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApplicationSettings(string name, Input<string> id, ApplicationSettingsState? state = null, CustomResourceOptions? options = null)
            : base("newrelic:plugins/applicationSettings:ApplicationSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApplicationSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApplicationSettings Get(string name, Input<string> id, ApplicationSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new ApplicationSettings(name, id, state, options);
        }
    }

    public sealed class ApplicationSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The acceptable response time limit (Apdex threshold) for the application.
        /// </summary>
        [Input("appApdexThreshold")]
        public Input<double>? AppApdexThreshold { get; set; }

        /// <summary>
        /// Dummy field to support backward compatibility of previous version.should be removed with next major version.
        /// </summary>
        [Input("enableRealUserMonitoring")]
        public Input<bool>? EnableRealUserMonitoring { get; set; }

        /// <summary>
        /// Enable or disable the collection of slowest database queries in your traces.
        /// </summary>
        [Input("enableSlowSql")]
        public Input<bool>? EnableSlowSql { get; set; }

        /// <summary>
        /// Enable or disable the collection of thread profiling data.
        /// </summary>
        [Input("enableThreadProfiler")]
        public Input<bool>? EnableThreadProfiler { get; set; }

        /// <summary>
        /// Dummy field to support backward compatibility of previous version.should be removed with next major version.
        /// </summary>
        [Input("endUserApdexThreshold")]
        public Input<double>? EndUserApdexThreshold { get; set; }

        [Input("errorCollectors")]
        private InputList<Inputs.ApplicationSettingsErrorCollectorArgs>? _errorCollectors;

        /// <summary>
        /// Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
        /// </summary>
        public InputList<Inputs.ApplicationSettingsErrorCollectorArgs> ErrorCollectors
        {
            get => _errorCollectors ?? (_errorCollectors = new InputList<Inputs.ApplicationSettingsErrorCollectorArgs>());
            set => _errorCollectors = value;
        }

        /// <summary>
        /// The GUID of the application in New Relic APM.
        /// 
        /// &gt; **NOTE:** While the attribute `Guid` is not mandatory at a schema level, it is recommended to use `Guid` over `Name`, as support for using `Name` with this resource shall eventually be discontinued. Please see the note under `Name` for more details.
        /// </summary>
        [Input("guid")]
        public Input<string>? Guid { get; set; }

        /// <summary>
        /// The name of the application in New Relic.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
        /// </summary>
        [Input("tracerType")]
        public Input<string>? TracerType { get; set; }

        [Input("transactionTracers")]
        private InputList<Inputs.ApplicationSettingsTransactionTracerArgs>? _transactionTracers;

        /// <summary>
        /// Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
        /// </summary>
        public InputList<Inputs.ApplicationSettingsTransactionTracerArgs> TransactionTracers
        {
            get => _transactionTracers ?? (_transactionTracers = new InputList<Inputs.ApplicationSettingsTransactionTracerArgs>());
            set => _transactionTracers = value;
        }

        /// <summary>
        /// Enable or disable server side monitoring for the New Relic application.
        /// </summary>
        [Input("useServerSideConfig")]
        public Input<bool>? UseServerSideConfig { get; set; }

        public ApplicationSettingsArgs()
        {
        }
        public static new ApplicationSettingsArgs Empty => new ApplicationSettingsArgs();
    }

    public sealed class ApplicationSettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The acceptable response time limit (Apdex threshold) for the application.
        /// </summary>
        [Input("appApdexThreshold")]
        public Input<double>? AppApdexThreshold { get; set; }

        /// <summary>
        /// Dummy field to support backward compatibility of previous version.should be removed with next major version.
        /// </summary>
        [Input("enableRealUserMonitoring")]
        public Input<bool>? EnableRealUserMonitoring { get; set; }

        /// <summary>
        /// Enable or disable the collection of slowest database queries in your traces.
        /// </summary>
        [Input("enableSlowSql")]
        public Input<bool>? EnableSlowSql { get; set; }

        /// <summary>
        /// Enable or disable the collection of thread profiling data.
        /// </summary>
        [Input("enableThreadProfiler")]
        public Input<bool>? EnableThreadProfiler { get; set; }

        /// <summary>
        /// Dummy field to support backward compatibility of previous version.should be removed with next major version.
        /// </summary>
        [Input("endUserApdexThreshold")]
        public Input<double>? EndUserApdexThreshold { get; set; }

        [Input("errorCollectors")]
        private InputList<Inputs.ApplicationSettingsErrorCollectorGetArgs>? _errorCollectors;

        /// <summary>
        /// Configuration block for error collection. Including this block enables the error collector. The following arguments are supported:
        /// </summary>
        public InputList<Inputs.ApplicationSettingsErrorCollectorGetArgs> ErrorCollectors
        {
            get => _errorCollectors ?? (_errorCollectors = new InputList<Inputs.ApplicationSettingsErrorCollectorGetArgs>());
            set => _errorCollectors = value;
        }

        /// <summary>
        /// The GUID of the application in New Relic APM.
        /// 
        /// &gt; **NOTE:** While the attribute `Guid` is not mandatory at a schema level, it is recommended to use `Guid` over `Name`, as support for using `Name` with this resource shall eventually be discontinued. Please see the note under `Name` for more details.
        /// </summary>
        [Input("guid")]
        public Input<string>? Guid { get; set; }

        [Input("isImported")]
        public Input<bool>? IsImported { get; set; }

        /// <summary>
        /// The name of the application in New Relic.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configures the type of tracer used. Valid values are `CROSS_APPLICATION_TRACER`, `DISTRIBUTED_TRACING`, `NONE`, `OPT_OUT`.
        /// </summary>
        [Input("tracerType")]
        public Input<string>? TracerType { get; set; }

        [Input("transactionTracers")]
        private InputList<Inputs.ApplicationSettingsTransactionTracerGetArgs>? _transactionTracers;

        /// <summary>
        /// Configuration block for transaction tracer. Providing this block enables transaction tracing. The following arguments are supported:
        /// </summary>
        public InputList<Inputs.ApplicationSettingsTransactionTracerGetArgs> TransactionTracers
        {
            get => _transactionTracers ?? (_transactionTracers = new InputList<Inputs.ApplicationSettingsTransactionTracerGetArgs>());
            set => _transactionTracers = value;
        }

        /// <summary>
        /// Enable or disable server side monitoring for the New Relic application.
        /// </summary>
        [Input("useServerSideConfig")]
        public Input<bool>? UseServerSideConfig { get; set; }

        public ApplicationSettingsState()
        {
        }
        public static new ApplicationSettingsState Empty => new ApplicationSettingsState();
    }
}
