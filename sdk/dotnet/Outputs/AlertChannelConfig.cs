// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic.Outputs
{

    [OutputType]
    public sealed class AlertChannelConfig
    {
        /// <summary>
        /// The API key for integrating with OpsGenie.
        /// </summary>
        public readonly string? ApiKey;
        /// <summary>
        /// Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
        /// </summary>
        public readonly string? AuthPassword;
        /// <summary>
        /// Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
        /// </summary>
        public readonly string? AuthType;
        /// <summary>
        /// Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
        /// </summary>
        public readonly string? AuthUsername;
        /// <summary>
        /// The base URL of the webhook destination.
        /// </summary>
        public readonly string? BaseUrl;
        /// <summary>
        /// The Slack channel to send notifications to.
        /// * `opsgenie`
        /// </summary>
        public readonly string? Channel;
        /// <summary>
        /// A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Headers;
        /// <summary>
        /// Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
        /// </summary>
        public readonly string? HeadersString;
        /// <summary>
        /// `0` or `1`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
        /// * `webhook`
        /// </summary>
        public readonly string? IncludeJsonAttachment;
        /// <summary>
        /// The key for integrating with VictorOps.
        /// </summary>
        public readonly string? Key;
        /// <summary>
        /// A map of key/value pairs that represents the webhook payload.  Must provide `payload_type` if setting this argument.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Payload;
        /// <summary>
        /// Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
        /// </summary>
        public readonly string? PayloadString;
        /// <summary>
        /// Can either be `application/json` or `application/x-www-form-urlencoded`. The `payload_type` argument is _required_ if `payload` is set.
        /// * `pagerduty`
        /// </summary>
        public readonly string? PayloadType;
        /// <summary>
        /// A set of recipients for targeting notifications.  Multiple values are comma separated.
        /// </summary>
        public readonly string? Recipients;
        /// <summary>
        /// The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
        /// </summary>
        public readonly string? Region;
        /// <summary>
        /// The route key for integrating with VictorOps.
        /// * `slack`
        /// </summary>
        public readonly string? RouteKey;
        /// <summary>
        /// Specifies the service key for integrating with Pagerduty.
        /// * `victorops`
        /// </summary>
        public readonly string? ServiceKey;
        /// <summary>
        /// A set of tags for targeting notifications. Multiple values are comma separated.
        /// </summary>
        public readonly string? Tags;
        /// <summary>
        /// A set of teams for targeting notifications. Multiple values are comma separated.
        /// </summary>
        public readonly string? Teams;
        /// <summary>
        /// Your organization's Slack URL.
        /// </summary>
        public readonly string? Url;
        public readonly string? UserId;

        [OutputConstructor]
        private AlertChannelConfig(
            string? apiKey,

            string? authPassword,

            string? authType,

            string? authUsername,

            string? baseUrl,

            string? channel,

            ImmutableDictionary<string, string>? headers,

            string? headersString,

            string? includeJsonAttachment,

            string? key,

            ImmutableDictionary<string, string>? payload,

            string? payloadString,

            string? payloadType,

            string? recipients,

            string? region,

            string? routeKey,

            string? serviceKey,

            string? tags,

            string? teams,

            string? url,

            string? userId)
        {
            ApiKey = apiKey;
            AuthPassword = authPassword;
            AuthType = authType;
            AuthUsername = authUsername;
            BaseUrl = baseUrl;
            Channel = channel;
            Headers = headers;
            HeadersString = headersString;
            IncludeJsonAttachment = includeJsonAttachment;
            Key = key;
            Payload = payload;
            PayloadString = payloadString;
            PayloadType = payloadType;
            Recipients = recipients;
            Region = region;
            RouteKey = routeKey;
            ServiceKey = serviceKey;
            Tags = tags;
            Teams = teams;
            Url = url;
            UserId = userId;
        }
    }
}
