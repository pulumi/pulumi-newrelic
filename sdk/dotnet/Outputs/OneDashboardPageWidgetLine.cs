// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic.Outputs
{

    [OutputType]
    public sealed class OneDashboardPageWidgetLine
    {
        /// <summary>
        /// (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.OneDashboardPageWidgetLineColor> Colors;
        /// <summary>
        /// (Required) Column position of widget from top left, starting at `1`.
        /// </summary>
        public readonly int Column;
        /// <summary>
        /// (Optional) A nested block that describes data format. See Nested DataFormat blocks below for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.OneDashboardPageWidgetLineDataFormat> DataFormats;
        /// <summary>
        /// (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `False`
        /// </summary>
        public readonly bool? FacetShowOtherSeries;
        /// <summary>
        /// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        /// </summary>
        public readonly int? Height;
        /// <summary>
        /// The ID of the widget.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// (Optional) An argument with a boolean value that is supported only by variables of `Type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        /// </summary>
        public readonly bool? IgnoreTimeRange;
        /// <summary>
        /// (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        /// </summary>
        public readonly Outputs.OneDashboardPageWidgetLineInitialSorting? InitialSorting;
        /// <summary>
        /// (Optional) A boolean value, which when true, sets the label to be visibly displayed within thresholds. In other words, if this attribute is set to true, the _label always visible_ toggle in the _Thresholds_ section in the settings of the widget is enabled.
        /// </summary>
        public readonly bool? IsLabelVisible;
        /// <summary>
        /// (Optional) With this turned on, the legend will be displayed. Defaults to `True`.
        /// </summary>
        public readonly bool? LegendEnabled;
        /// <summary>
        /// (Optional) Configuration for variables of type `Nrql`. See Nested nrql\_query blocks for Variables for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.OneDashboardPageWidgetLineNrqlQuery> NrqlQueries;
        /// <summary>
        /// (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.OneDashboardPageWidgetLineNullValue> NullValues;
        /// <summary>
        /// (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `Auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        /// </summary>
        public readonly string? RefreshRate;
        /// <summary>
        /// (Required) Row position of widget from top left, starting at `1`.
        /// </summary>
        public readonly int Row;
        /// <summary>
        /// (Optional) An attribute that helps specify multiple thresholds, each inclusive of a range of values between which the threshold would need to function, the name of the threshold and its severity. Multiple thresholds can be defined in a table widget. The `Threshold` attribute requires specifying the following attributes in a nested block -
        /// </summary>
        public readonly ImmutableArray<Outputs.OneDashboardPageWidgetLineThreshold> Thresholds;
        /// <summary>
        /// (Optional) A human-friendly display string for this value.
        /// </summary>
        public readonly string Title;
        /// <summary>
        /// (Optional) A nested block that describes tooltip configuration for area, line, and stacked bar widgets. See Nested tooltip blocks below for details.
        /// </summary>
        public readonly Outputs.OneDashboardPageWidgetLineTooltip? Tooltip;
        /// <summary>
        /// (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.OneDashboardPageWidgetLineUnit> Units;
        /// <summary>
        /// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        /// </summary>
        public readonly int? Width;
        public readonly double? YAxisLeftMax;
        /// <summary>
        /// , `YAxisLeftMax` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        /// </summary>
        public readonly double? YAxisLeftMin;
        /// <summary>
        /// (Optional) An attribute that specifies if the values on the graph to be rendered need to be fit to scale, or printed within the specified range from `YAxisLeftMin` (or 0 if it is not defined) to `YAxisLeftMax`. Use `YAxisLeftZero = true` with a combination of `YAxisLeftMin` and `YAxisLeftMax` to render values from 0 or the specified minimum to the maximum, and `YAxisLeftZero = false` to fit the graph to scale.
        /// </summary>
        public readonly bool? YAxisLeftZero;
        /// <summary>
        /// (Optional) An attribute which helps specify the configuration of the Y-Axis displayed on the right side of the line widget. This is a nested block, which includes the following attributes:
        /// </summary>
        public readonly Outputs.OneDashboardPageWidgetLineYAxisRight? YAxisRight;

        [OutputConstructor]
        private OneDashboardPageWidgetLine(
            ImmutableArray<Outputs.OneDashboardPageWidgetLineColor> colors,

            int column,

            ImmutableArray<Outputs.OneDashboardPageWidgetLineDataFormat> dataFormats,

            bool? facetShowOtherSeries,

            int? height,

            string? id,

            bool? ignoreTimeRange,

            Outputs.OneDashboardPageWidgetLineInitialSorting? initialSorting,

            bool? isLabelVisible,

            bool? legendEnabled,

            ImmutableArray<Outputs.OneDashboardPageWidgetLineNrqlQuery> nrqlQueries,

            ImmutableArray<Outputs.OneDashboardPageWidgetLineNullValue> nullValues,

            string? refreshRate,

            int row,

            ImmutableArray<Outputs.OneDashboardPageWidgetLineThreshold> thresholds,

            string title,

            Outputs.OneDashboardPageWidgetLineTooltip? tooltip,

            ImmutableArray<Outputs.OneDashboardPageWidgetLineUnit> units,

            int? width,

            double? yAxisLeftMax,

            double? yAxisLeftMin,

            bool? yAxisLeftZero,

            Outputs.OneDashboardPageWidgetLineYAxisRight? yAxisRight)
        {
            Colors = colors;
            Column = column;
            DataFormats = dataFormats;
            FacetShowOtherSeries = facetShowOtherSeries;
            Height = height;
            Id = id;
            IgnoreTimeRange = ignoreTimeRange;
            InitialSorting = initialSorting;
            IsLabelVisible = isLabelVisible;
            LegendEnabled = legendEnabled;
            NrqlQueries = nrqlQueries;
            NullValues = nullValues;
            RefreshRate = refreshRate;
            Row = row;
            Thresholds = thresholds;
            Title = title;
            Tooltip = tooltip;
            Units = units;
            Width = width;
            YAxisLeftMax = yAxisLeftMax;
            YAxisLeftMin = yAxisLeftMin;
            YAxisLeftZero = yAxisLeftZero;
            YAxisRight = yAxisRight;
        }
    }
}
