// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    /// <summary>
    /// layout: "newrelic"
    /// page_title: "New Relic: newrelic.ObfuscationRule"
    /// sidebar_current: "docs-newrelic-resource-obfuscation-rule"
    /// description: |-
    /// Create and manage Obfuscation Rule.
    /// &lt;!-- yaml: line 6: could not find expected ':' --&gt;
    /// 
    /// # Resource: newrelic\_obfuscation\_rule
    /// 
    /// Use this resource to create, update and delete New Relic Obfuscation Rule.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using NewRelic = Pulumi.NewRelic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var bar = new NewRelic.ObfuscationExpression("bar", new()
    ///     {
    ///         Name = "expressionName",
    ///         Description = "description of the expression",
    ///         Regex = "(^http)",
    ///     });
    /// 
    ///     var foo = new NewRelic.ObfuscationRule("foo", new()
    ///     {
    ///         Name = "ruleName",
    ///         Description = "description of the rule",
    ///         Filter = "hostStatus=running",
    ///         Enabled = true,
    ///         Actions = new[]
    ///         {
    ///             new NewRelic.Inputs.ObfuscationRuleActionArgs
    ///             {
    ///                 Attributes = new[]
    ///                 {
    ///                     "message",
    ///                 },
    ///                 ExpressionId = bar.Id,
    ///                 Method = "MASK",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// New Relic obfuscation rule can be imported using the rule ID, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import newrelic:index/obfuscationRule:ObfuscationRule foo 34567
    /// ```
    /// </summary>
    [NewRelicResourceType("newrelic:index/obfuscationRule:ObfuscationRule")]
    public partial class ObfuscationRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account id associated with the obfuscation rule.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Actions for the rule. The actions will be applied in the order specified by this list.
        /// </summary>
        [Output("actions")]
        public Output<ImmutableArray<Outputs.ObfuscationRuleAction>> Actions { get; private set; } = null!;

        /// <summary>
        /// Description of rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the rule should be applied or not to incoming data.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// NRQL for determining whether a given log record should have obfuscation actions applied.
        /// </summary>
        [Output("filter")]
        public Output<string> Filter { get; private set; } = null!;

        /// <summary>
        /// Name of rule.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a ObfuscationRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ObfuscationRule(string name, ObfuscationRuleArgs args, CustomResourceOptions? options = null)
            : base("newrelic:index/obfuscationRule:ObfuscationRule", name, args ?? new ObfuscationRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ObfuscationRule(string name, Input<string> id, ObfuscationRuleState? state = null, CustomResourceOptions? options = null)
            : base("newrelic:index/obfuscationRule:ObfuscationRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ObfuscationRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ObfuscationRule Get(string name, Input<string> id, ObfuscationRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new ObfuscationRule(name, id, state, options);
        }
    }

    public sealed class ObfuscationRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account id associated with the obfuscation rule.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("actions", required: true)]
        private InputList<Inputs.ObfuscationRuleActionArgs>? _actions;

        /// <summary>
        /// Actions for the rule. The actions will be applied in the order specified by this list.
        /// </summary>
        public InputList<Inputs.ObfuscationRuleActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.ObfuscationRuleActionArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// Description of rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the rule should be applied or not to incoming data.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// NRQL for determining whether a given log record should have obfuscation actions applied.
        /// </summary>
        [Input("filter", required: true)]
        public Input<string> Filter { get; set; } = null!;

        /// <summary>
        /// Name of rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ObfuscationRuleArgs()
        {
        }
        public static new ObfuscationRuleArgs Empty => new ObfuscationRuleArgs();
    }

    public sealed class ObfuscationRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account id associated with the obfuscation rule.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("actions")]
        private InputList<Inputs.ObfuscationRuleActionGetArgs>? _actions;

        /// <summary>
        /// Actions for the rule. The actions will be applied in the order specified by this list.
        /// </summary>
        public InputList<Inputs.ObfuscationRuleActionGetArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.ObfuscationRuleActionGetArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// Description of rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the rule should be applied or not to incoming data.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// NRQL for determining whether a given log record should have obfuscation actions applied.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// Name of rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ObfuscationRuleState()
        {
        }
        public static new ObfuscationRuleState Empty => new ObfuscationRuleState();
    }
}
