// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic.Cloud
{
    /// <summary>
    /// Use this resource to link an Oracle Cloud Infrastructure (OCI) account to New Relic.
    /// 
    /// This setup is used to create a provider account with OCI credentials, establishing a relationship between Oracle and New Relic. Additionally, as part of this integration, we store WIF (Workload Identity Federation) credentials which are further used for fetching data and validations, and vault OCIDs corresponding to the vault resource where the New Relic ingest and user keys are stored in the OCI console.
    /// 
    /// ## Prerequisites
    /// 
    /// For the `newrelic.cloud.OciLinkAccount` resource to work properly, you need an OCI tenancy with IAM permissions to create and manage the identity artifacts (client/application, secrets, compartments, and service user) referenced below. OCI provides enterprise-grade cloud services across multiple global regions.
    /// 
    /// &gt; NOTE: Before using this resource, ensure the New Relic provider is configured with valid credentials.\
    /// See Getting Started: New Relic provider guide
    /// 
    /// If you encounter issues or bugs, please open an issue in the GitHub repository.
    /// 
    /// ### Workload Identity Federation (WIF) Attributes
    /// 
    /// The following arguments rely on an OCI Identity Domain OAuth2 client set up for workload identity federation (identity propagation): `OciClientId`, `OciClientSecret`, `OciDomainUrl`, and `OciSvcUserName`.
    /// 
    /// To create and retrieve these values, follow Oracle's guidance for configuring identity propagation / JWT token exchange:
    /// 
    /// [Oracle documentation: Create an identity propagation trust (JWT token exchange)](https://docs.oracle.com/en-us/iaas/Content/Identity/api-getstarted/json_web_token_exchange.htm#jwt_token_exchange__create-identity-propagation-trust)
    /// 
    /// WIF configuration steps:
    /// 1. Create (or identify) an Identity Domain and register an OAuth2 confidential application (client) to represent New Relic ingestion.
    /// 2. Generate / record the client ID (`OciClientId`) and client secret (`OciClientSecret`). Store the secret securely (e.g., in OCI Vault; reference its OCID via `IngestVaultOcid` / `UserVaultOcid` if desired).
    /// 3. Use the Identity Domain base URL as `OciDomainUrl` (format: `https://idcs-&lt;hash&gt;.identity.oraclecloud.com`).
    /// 4. Provide / map a service user (or principal) used for workload identity federation as `OciSvcUserName`.
    /// 5. Ensure the client has the required scopes and the tenancy policies allow the token exchange.
    /// 
    /// &gt; TIP: Rotating the OAuth2 client secret only requires updating `OciClientSecret`; it does not force resource replacement.
    /// 
    /// ## Example Usage
    /// 
    /// Minimal example (required arguments for creation):
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using NewRelic = Pulumi.NewRelic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new NewRelic.Cloud.OciLinkAccount("example", new()
    ///     {
    ///         AccountId = "1234567",
    ///         TenantId = "ocid1.tenancy.oc1..aaaaaaaaexample",
    ///         Name = "my-oci-link",
    ///         CompartmentOcid = "ocid1.compartment.oc1..bbbbbbbbexample",
    ///         OciClientId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",
    ///         OciClientSecret = ociClientSecret,
    ///         OciDomainUrl = "https://idcs-1234567890abcdef.identity.oraclecloud.com",
    ///         OciHomeRegion = "us-ashburn-1",
    ///         OciSvcUserName = "svc-newrelic-collector",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Example including optional secret references and update-only fields:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using NewRelic = Pulumi.NewRelic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var full = new NewRelic.Cloud.OciLinkAccount("full", new()
    ///     {
    ///         Name = "my-oci-link-full",
    ///         TenantId = "ocid1.tenancy.oc1..aaaaaaaaexample",
    ///         CompartmentOcid = "ocid1.compartment.oc1..bbbbbbbbexample",
    ///         OciClientId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",
    ///         OciClientSecret = ociClientSecret,
    ///         OciDomainUrl = "https://idcs-1234567890abcdef.identity.oraclecloud.com",
    ///         OciHomeRegion = "us-ashburn-1",
    ///         OciSvcUserName = "svc-newrelic-collector",
    ///         IngestVaultOcid = "ocid1.vaultsecret.oc1..ccccccccexample",
    ///         UserVaultOcid = "ocid1.vaultsecret.oc1..ddddddddexample",
    ///         InstrumentationType = "METRICS,LOGS",
    ///         OciRegion = "us-phoenix-1",
    ///         MetricStackOcid = "ocid1.stack.oc1..eeeeeeeeexample",
    ///         LoggingStackOcid = "ocid1.stack.oc1..ffffffloggingstack",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Linked OCI accounts can be imported using the `id`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import newrelic:cloud/ociLinkAccount:OciLinkAccount foo &lt;id&gt;
    /// ```
    /// </summary>
    [NewRelicResourceType("newrelic:cloud/ociLinkAccount:OciLinkAccount")]
    public partial class OciLinkAccount : global::Pulumi.CustomResource
    {
        /// <summary>
        /// New Relic account to operate on. Overrides the provider-level `AccountId`. If omitted, use the provider default or `NEW_RELIC_ACCOUNT_ID`.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// OCI compartment OCID representing (or containing) the monitored resources/newrelic compartment.
        /// </summary>
        [Output("compartmentOcid")]
        public Output<string> CompartmentOcid { get; private set; } = null!;

        /// <summary>
        /// Vault secret OCID containing an ingest secret.
        /// </summary>
        [Output("ingestVaultOcid")]
        public Output<string?> IngestVaultOcid { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of integration, such as metrics, logs, or a combination of logs and metrics (e.g., `METRICS`, `LOGS`, `METRICS,LOGS`).
        /// </summary>
        [Output("instrumentationType")]
        public Output<string?> InstrumentationType { get; private set; } = null!;

        /// <summary>
        /// The Logging stack identifier for the OCI account.
        /// </summary>
        [Output("loggingStackOcid")]
        public Output<string?> LoggingStackOcid { get; private set; } = null!;

        /// <summary>
        /// Metric stack OCID (ignored on create, applied on update).
        /// </summary>
        [Output("metricStackOcid")]
        public Output<string?> MetricStackOcid { get; private set; } = null!;

        /// <summary>
        /// Display name for the linked account.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// OCI Identity Domain (IDCS) OAuth2 client ID used for workload identity federation.
        /// </summary>
        [Output("ociClientId")]
        public Output<string> OciClientId { get; private set; } = null!;

        /// <summary>
        /// OAuth2 client secret. Not displayed in plans or state outputs.
        /// </summary>
        [Output("ociClientSecret")]
        public Output<string> OciClientSecret { get; private set; } = null!;

        /// <summary>
        /// Base URL of the OCI Identity Domain (e.g. `https://idcs-&lt;hash&gt;.identity.oraclecloud.com`).
        /// </summary>
        [Output("ociDomainUrl")]
        public Output<string> OciDomainUrl { get; private set; } = null!;

        /// <summary>
        /// Home region of the tenancy (e.g. `us-ashburn-1`).
        /// </summary>
        [Output("ociHomeRegion")]
        public Output<string> OciHomeRegion { get; private set; } = null!;

        /// <summary>
        /// OCI region for the linkage (ignored on create, applied on update).
        /// </summary>
        [Output("ociRegion")]
        public Output<string?> OciRegion { get; private set; } = null!;

        /// <summary>
        /// Service user name associated with the WIF configuration.
        /// </summary>
        [Output("ociSvcUserName")]
        public Output<string> OciSvcUserName { get; private set; } = null!;

        /// <summary>
        /// OCI tenancy OCID (root tenancy). Changing forces a new linked account.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;

        /// <summary>
        /// Vault secret OCID containing a user or auxiliary secret.
        /// </summary>
        [Output("userVaultOcid")]
        public Output<string?> UserVaultOcid { get; private set; } = null!;


        /// <summary>
        /// Create a OciLinkAccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OciLinkAccount(string name, OciLinkAccountArgs args, CustomResourceOptions? options = null)
            : base("newrelic:cloud/ociLinkAccount:OciLinkAccount", name, args ?? new OciLinkAccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OciLinkAccount(string name, Input<string> id, OciLinkAccountState? state = null, CustomResourceOptions? options = null)
            : base("newrelic:cloud/ociLinkAccount:OciLinkAccount", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "ociClientSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OciLinkAccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OciLinkAccount Get(string name, Input<string> id, OciLinkAccountState? state = null, CustomResourceOptions? options = null)
        {
            return new OciLinkAccount(name, id, state, options);
        }
    }

    public sealed class OciLinkAccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// New Relic account to operate on. Overrides the provider-level `AccountId`. If omitted, use the provider default or `NEW_RELIC_ACCOUNT_ID`.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// OCI compartment OCID representing (or containing) the monitored resources/newrelic compartment.
        /// </summary>
        [Input("compartmentOcid", required: true)]
        public Input<string> CompartmentOcid { get; set; } = null!;

        /// <summary>
        /// Vault secret OCID containing an ingest secret.
        /// </summary>
        [Input("ingestVaultOcid")]
        public Input<string>? IngestVaultOcid { get; set; }

        /// <summary>
        /// Specifies the type of integration, such as metrics, logs, or a combination of logs and metrics (e.g., `METRICS`, `LOGS`, `METRICS,LOGS`).
        /// </summary>
        [Input("instrumentationType")]
        public Input<string>? InstrumentationType { get; set; }

        /// <summary>
        /// The Logging stack identifier for the OCI account.
        /// </summary>
        [Input("loggingStackOcid")]
        public Input<string>? LoggingStackOcid { get; set; }

        /// <summary>
        /// Metric stack OCID (ignored on create, applied on update).
        /// </summary>
        [Input("metricStackOcid")]
        public Input<string>? MetricStackOcid { get; set; }

        /// <summary>
        /// Display name for the linked account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// OCI Identity Domain (IDCS) OAuth2 client ID used for workload identity federation.
        /// </summary>
        [Input("ociClientId", required: true)]
        public Input<string> OciClientId { get; set; } = null!;

        [Input("ociClientSecret", required: true)]
        private Input<string>? _ociClientSecret;

        /// <summary>
        /// OAuth2 client secret. Not displayed in plans or state outputs.
        /// </summary>
        public Input<string>? OciClientSecret
        {
            get => _ociClientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _ociClientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Base URL of the OCI Identity Domain (e.g. `https://idcs-&lt;hash&gt;.identity.oraclecloud.com`).
        /// </summary>
        [Input("ociDomainUrl", required: true)]
        public Input<string> OciDomainUrl { get; set; } = null!;

        /// <summary>
        /// Home region of the tenancy (e.g. `us-ashburn-1`).
        /// </summary>
        [Input("ociHomeRegion", required: true)]
        public Input<string> OciHomeRegion { get; set; } = null!;

        /// <summary>
        /// OCI region for the linkage (ignored on create, applied on update).
        /// </summary>
        [Input("ociRegion")]
        public Input<string>? OciRegion { get; set; }

        /// <summary>
        /// Service user name associated with the WIF configuration.
        /// </summary>
        [Input("ociSvcUserName", required: true)]
        public Input<string> OciSvcUserName { get; set; } = null!;

        /// <summary>
        /// OCI tenancy OCID (root tenancy). Changing forces a new linked account.
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        /// <summary>
        /// Vault secret OCID containing a user or auxiliary secret.
        /// </summary>
        [Input("userVaultOcid")]
        public Input<string>? UserVaultOcid { get; set; }

        public OciLinkAccountArgs()
        {
        }
        public static new OciLinkAccountArgs Empty => new OciLinkAccountArgs();
    }

    public sealed class OciLinkAccountState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// New Relic account to operate on. Overrides the provider-level `AccountId`. If omitted, use the provider default or `NEW_RELIC_ACCOUNT_ID`.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// OCI compartment OCID representing (or containing) the monitored resources/newrelic compartment.
        /// </summary>
        [Input("compartmentOcid")]
        public Input<string>? CompartmentOcid { get; set; }

        /// <summary>
        /// Vault secret OCID containing an ingest secret.
        /// </summary>
        [Input("ingestVaultOcid")]
        public Input<string>? IngestVaultOcid { get; set; }

        /// <summary>
        /// Specifies the type of integration, such as metrics, logs, or a combination of logs and metrics (e.g., `METRICS`, `LOGS`, `METRICS,LOGS`).
        /// </summary>
        [Input("instrumentationType")]
        public Input<string>? InstrumentationType { get; set; }

        /// <summary>
        /// The Logging stack identifier for the OCI account.
        /// </summary>
        [Input("loggingStackOcid")]
        public Input<string>? LoggingStackOcid { get; set; }

        /// <summary>
        /// Metric stack OCID (ignored on create, applied on update).
        /// </summary>
        [Input("metricStackOcid")]
        public Input<string>? MetricStackOcid { get; set; }

        /// <summary>
        /// Display name for the linked account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// OCI Identity Domain (IDCS) OAuth2 client ID used for workload identity federation.
        /// </summary>
        [Input("ociClientId")]
        public Input<string>? OciClientId { get; set; }

        [Input("ociClientSecret")]
        private Input<string>? _ociClientSecret;

        /// <summary>
        /// OAuth2 client secret. Not displayed in plans or state outputs.
        /// </summary>
        public Input<string>? OciClientSecret
        {
            get => _ociClientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _ociClientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Base URL of the OCI Identity Domain (e.g. `https://idcs-&lt;hash&gt;.identity.oraclecloud.com`).
        /// </summary>
        [Input("ociDomainUrl")]
        public Input<string>? OciDomainUrl { get; set; }

        /// <summary>
        /// Home region of the tenancy (e.g. `us-ashburn-1`).
        /// </summary>
        [Input("ociHomeRegion")]
        public Input<string>? OciHomeRegion { get; set; }

        /// <summary>
        /// OCI region for the linkage (ignored on create, applied on update).
        /// </summary>
        [Input("ociRegion")]
        public Input<string>? OciRegion { get; set; }

        /// <summary>
        /// Service user name associated with the WIF configuration.
        /// </summary>
        [Input("ociSvcUserName")]
        public Input<string>? OciSvcUserName { get; set; }

        /// <summary>
        /// OCI tenancy OCID (root tenancy). Changing forces a new linked account.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// Vault secret OCID containing a user or auxiliary secret.
        /// </summary>
        [Input("userVaultOcid")]
        public Input<string>? UserVaultOcid { get; set; }

        public OciLinkAccountState()
        {
        }
        public static new OciLinkAccountState Empty => new OciLinkAccountState();
    }
}
