// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic.Cloud
{
    /// <summary>
    /// ## Import
    /// 
    /// Linked Azure accounts can be imported using `id`, you can find the `id` of existing Azure linked accounts in Azure dashboard under Infrastructure in NewRelic bash
    /// 
    /// ```sh
    ///  $ pulumi import newrelic:cloud/azureLinkAccount:AzureLinkAccount foo &lt;id&gt;
    /// ```
    /// </summary>
    [NewRelicResourceType("newrelic:cloud/azureLinkAccount:AzureLinkAccount")]
    public partial class AzureLinkAccount : global::Pulumi.CustomResource
    {
        /// <summary>
        /// - Account ID of the New Relic.
        /// </summary>
        [Output("accountId")]
        public Output<int> AccountId { get; private set; } = null!;

        /// <summary>
        /// - Application ID of the App.
        /// </summary>
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// - Secret Value of the client.
        /// </summary>
        [Output("clientSecret")]
        public Output<string> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// - The name of the application in New Relic APM.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// - Subscription ID of the Azure cloud account.
        /// </summary>
        [Output("subscriptionId")]
        public Output<string> SubscriptionId { get; private set; } = null!;

        /// <summary>
        /// - Tenant ID of the Azure cloud account.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;


        /// <summary>
        /// Create a AzureLinkAccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AzureLinkAccount(string name, AzureLinkAccountArgs args, CustomResourceOptions? options = null)
            : base("newrelic:cloud/azureLinkAccount:AzureLinkAccount", name, args ?? new AzureLinkAccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AzureLinkAccount(string name, Input<string> id, AzureLinkAccountState? state = null, CustomResourceOptions? options = null)
            : base("newrelic:cloud/azureLinkAccount:AzureLinkAccount", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AzureLinkAccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AzureLinkAccount Get(string name, Input<string> id, AzureLinkAccountState? state = null, CustomResourceOptions? options = null)
        {
            return new AzureLinkAccount(name, id, state, options);
        }
    }

    public sealed class AzureLinkAccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// - Account ID of the New Relic.
        /// </summary>
        [Input("accountId")]
        public Input<int>? AccountId { get; set; }

        /// <summary>
        /// - Application ID of the App.
        /// </summary>
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        /// <summary>
        /// - Secret Value of the client.
        /// </summary>
        [Input("clientSecret", required: true)]
        public Input<string> ClientSecret { get; set; } = null!;

        /// <summary>
        /// - The name of the application in New Relic APM.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// - Subscription ID of the Azure cloud account.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        /// <summary>
        /// - Tenant ID of the Azure cloud account.
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        public AzureLinkAccountArgs()
        {
        }
        public static new AzureLinkAccountArgs Empty => new AzureLinkAccountArgs();
    }

    public sealed class AzureLinkAccountState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// - Account ID of the New Relic.
        /// </summary>
        [Input("accountId")]
        public Input<int>? AccountId { get; set; }

        /// <summary>
        /// - Application ID of the App.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// - Secret Value of the client.
        /// </summary>
        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        /// <summary>
        /// - The name of the application in New Relic APM.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// - Subscription ID of the Azure cloud account.
        /// </summary>
        [Input("subscriptionId")]
        public Input<string>? SubscriptionId { get; set; }

        /// <summary>
        /// - Tenant ID of the Azure cloud account.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public AzureLinkAccountState()
        {
        }
        public static new AzureLinkAccountState Empty => new AzureLinkAccountState();
    }
}
