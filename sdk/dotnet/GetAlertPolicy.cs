// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    public static class GetAlertPolicy
    {
        /// <summary>
        /// Use this data source to get information about a specific alert policy in New Relic that already exists.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = NewRelic.GetAlertChannel.Invoke(new()
        ///     {
        ///         Name = "foo@example.com",
        ///     });
        /// 
        ///     var fooGetAlertPolicy = NewRelic.GetAlertPolicy.Invoke(new()
        ///     {
        ///         Name = "foo policy",
        ///     });
        /// 
        ///     var fooAlertPolicyChannel = new NewRelic.AlertPolicyChannel("foo", new()
        ///     {
        ///         PolicyId = fooGetAlertPolicy.Apply(getAlertPolicyResult =&gt; getAlertPolicyResult.Id),
        ///         ChannelId = foo.Apply(getAlertChannelResult =&gt; getAlertChannelResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAlertPolicyResult> InvokeAsync(GetAlertPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAlertPolicyResult>("newrelic:index/getAlertPolicy:getAlertPolicy", args ?? new GetAlertPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a specific alert policy in New Relic that already exists.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = NewRelic.GetAlertChannel.Invoke(new()
        ///     {
        ///         Name = "foo@example.com",
        ///     });
        /// 
        ///     var fooGetAlertPolicy = NewRelic.GetAlertPolicy.Invoke(new()
        ///     {
        ///         Name = "foo policy",
        ///     });
        /// 
        ///     var fooAlertPolicyChannel = new NewRelic.AlertPolicyChannel("foo", new()
        ///     {
        ///         PolicyId = fooGetAlertPolicy.Apply(getAlertPolicyResult =&gt; getAlertPolicyResult.Id),
        ///         ChannelId = foo.Apply(getAlertChannelResult =&gt; getAlertChannelResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAlertPolicyResult> Invoke(GetAlertPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAlertPolicyResult>("newrelic:index/getAlertPolicy:getAlertPolicy", args ?? new GetAlertPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a specific alert policy in New Relic that already exists.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = NewRelic.GetAlertChannel.Invoke(new()
        ///     {
        ///         Name = "foo@example.com",
        ///     });
        /// 
        ///     var fooGetAlertPolicy = NewRelic.GetAlertPolicy.Invoke(new()
        ///     {
        ///         Name = "foo policy",
        ///     });
        /// 
        ///     var fooAlertPolicyChannel = new NewRelic.AlertPolicyChannel("foo", new()
        ///     {
        ///         PolicyId = fooGetAlertPolicy.Apply(getAlertPolicyResult =&gt; getAlertPolicyResult.Id),
        ///         ChannelId = foo.Apply(getAlertChannelResult =&gt; getAlertChannelResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAlertPolicyResult> Invoke(GetAlertPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAlertPolicyResult>("newrelic:index/getAlertPolicy:getAlertPolicy", args ?? new GetAlertPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAlertPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The New Relic account ID to operate on.  This allows you to override the `AccountId` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        /// <summary>
        /// The rollup strategy for the policy, which can have one of the following values:
        /// * `PER_POLICY` - Represents the incident grouping preference **One issue per policy**. Refer to [this page](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/specify-when-alerts-create-incidents/#preference-policy) for more details on this incident grouping preference.
        /// * `PER_CONDITION` - Represents the incident grouping preference **One issue per condition**. Refer to [this page](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/specify-when-alerts-create-incidents/#preference-condition) for more details on this incident grouping preference.
        /// * `PER_CONDITION_AND_TARGET` - Represents the incident grouping preference **One issue per condition and signal**. Refer to [this page](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/specify-when-alerts-create-incidents/#preference-signal) for more details on this incident grouping preference.
        /// </summary>
        [Input("incidentPreference")]
        public string? IncidentPreference { get; set; }

        /// <summary>
        /// The name of the alert policy in New Relic.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetAlertPolicyArgs()
        {
        }
        public static new GetAlertPolicyArgs Empty => new GetAlertPolicyArgs();
    }

    public sealed class GetAlertPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The New Relic account ID to operate on.  This allows you to override the `AccountId` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The rollup strategy for the policy, which can have one of the following values:
        /// * `PER_POLICY` - Represents the incident grouping preference **One issue per policy**. Refer to [this page](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/specify-when-alerts-create-incidents/#preference-policy) for more details on this incident grouping preference.
        /// * `PER_CONDITION` - Represents the incident grouping preference **One issue per condition**. Refer to [this page](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/specify-when-alerts-create-incidents/#preference-condition) for more details on this incident grouping preference.
        /// * `PER_CONDITION_AND_TARGET` - Represents the incident grouping preference **One issue per condition and signal**. Refer to [this page](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/specify-when-alerts-create-incidents/#preference-signal) for more details on this incident grouping preference.
        /// </summary>
        [Input("incidentPreference")]
        public Input<string>? IncidentPreference { get; set; }

        /// <summary>
        /// The name of the alert policy in New Relic.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetAlertPolicyInvokeArgs()
        {
        }
        public static new GetAlertPolicyInvokeArgs Empty => new GetAlertPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetAlertPolicyResult
    {
        public readonly string AccountId;
        /// <summary>
        /// The time the policy was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The rollup strategy for the policy, which can have one of the following values:
        /// * `PER_POLICY` - Represents the incident grouping preference **One issue per policy**. Refer to [this page](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/specify-when-alerts-create-incidents/#preference-policy) for more details on this incident grouping preference.
        /// * `PER_CONDITION` - Represents the incident grouping preference **One issue per condition**. Refer to [this page](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/specify-when-alerts-create-incidents/#preference-condition) for more details on this incident grouping preference.
        /// * `PER_CONDITION_AND_TARGET` - Represents the incident grouping preference **One issue per condition and signal**. Refer to [this page](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/specify-when-alerts-create-incidents/#preference-signal) for more details on this incident grouping preference.
        /// </summary>
        public readonly string? IncidentPreference;
        public readonly string Name;
        /// <summary>
        /// The time the policy was last updated.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetAlertPolicyResult(
            string accountId,

            string createdAt,

            string id,

            string? incidentPreference,

            string name,

            string updatedAt)
        {
            AccountId = accountId;
            CreatedAt = createdAt;
            Id = id;
            IncidentPreference = incidentPreference;
            Name = name;
            UpdatedAt = updatedAt;
        }
    }
}
