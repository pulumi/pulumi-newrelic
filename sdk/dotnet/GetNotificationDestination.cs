// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    public static class GetNotificationDestination
    {
        public static Task<GetNotificationDestinationResult> InvokeAsync(GetNotificationDestinationArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNotificationDestinationResult>("newrelic:index/getNotificationDestination:getNotificationDestination", args ?? new GetNotificationDestinationArgs(), options.WithDefaults());

        public static Output<GetNotificationDestinationResult> Invoke(GetNotificationDestinationInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNotificationDestinationResult>("newrelic:index/getNotificationDestination:getNotificationDestination", args ?? new GetNotificationDestinationInvokeArgs(), options.WithDefaults());

        public static Output<GetNotificationDestinationResult> Invoke(GetNotificationDestinationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNotificationDestinationResult>("newrelic:index/getNotificationDestination:getNotificationDestination", args ?? new GetNotificationDestinationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNotificationDestinationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The New Relic account ID to operate on.  This allows you to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        /// <summary>
        /// The id of the notification destination in New Relic.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the notification destination.
        /// 
        /// Optional:
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("secureUrls")]
        private List<Inputs.GetNotificationDestinationSecureUrlArgs>? _secureUrls;

        /// <summary>
        /// The URL in secure format, showing only the `prefix`, as the `secure_suffix` is a secret.
        /// </summary>
        public List<Inputs.GetNotificationDestinationSecureUrlArgs> SecureUrls
        {
            get => _secureUrls ?? (_secureUrls = new List<Inputs.GetNotificationDestinationSecureUrlArgs>());
            set => _secureUrls = value;
        }

        public GetNotificationDestinationArgs()
        {
        }
        public static new GetNotificationDestinationArgs Empty => new GetNotificationDestinationArgs();
    }

    public sealed class GetNotificationDestinationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The New Relic account ID to operate on.  This allows you to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The id of the notification destination in New Relic.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the notification destination.
        /// 
        /// Optional:
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("secureUrls")]
        private InputList<Inputs.GetNotificationDestinationSecureUrlInputArgs>? _secureUrls;

        /// <summary>
        /// The URL in secure format, showing only the `prefix`, as the `secure_suffix` is a secret.
        /// </summary>
        public InputList<Inputs.GetNotificationDestinationSecureUrlInputArgs> SecureUrls
        {
            get => _secureUrls ?? (_secureUrls = new InputList<Inputs.GetNotificationDestinationSecureUrlInputArgs>());
            set => _secureUrls = value;
        }

        public GetNotificationDestinationInvokeArgs()
        {
        }
        public static new GetNotificationDestinationInvokeArgs Empty => new GetNotificationDestinationInvokeArgs();
    }


    [OutputType]
    public sealed class GetNotificationDestinationResult
    {
        public readonly string AccountId;
        /// <summary>
        /// An indication whether the notification destination is active or not.
        /// </summary>
        public readonly bool Active;
        /// <summary>
        /// The unique entity identifier of the destination in New Relic.
        /// </summary>
        public readonly string Guid;
        public readonly string? Id;
        /// <summary>
        /// The name of the notification destination.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// A nested block that describes a notification destination property.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNotificationDestinationPropertyResult> Properties;
        /// <summary>
        /// The URL in secure format, showing only the `prefix`, as the `secure_suffix` is a secret.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNotificationDestinationSecureUrlResult> SecureUrls;
        /// <summary>
        /// The status of the notification destination.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The notification destination type, either: `EMAIL`, `SERVICE_NOW`, `SERVICE_NOW_APP`, `WEBHOOK`, `JIRA`, `MOBILE_PUSH`, `EVENT_BRIDGE`, `PAGERDUTY_ACCOUNT_INTEGRATION` or `PAGERDUTY_SERVICE_INTEGRATION`, `SLACK` and `SLACK_COLLABORATION`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNotificationDestinationResult(
            string accountId,

            bool active,

            string guid,

            string? id,

            string? name,

            ImmutableArray<Outputs.GetNotificationDestinationPropertyResult> properties,

            ImmutableArray<Outputs.GetNotificationDestinationSecureUrlResult> secureUrls,

            string status,

            string type)
        {
            AccountId = accountId;
            Active = active;
            Guid = guid;
            Id = id;
            Name = name;
            Properties = properties;
            SecureUrls = secureUrls;
            Status = status;
            Type = type;
        }
    }
}
