// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    public static class GetNotificationDestination
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = NewRelic.GetNotificationDestination.Invoke(new()
        ///     {
        ///         Id = "1e543419-0c25-456a-9057-fb0eb310e60b",
        ///     });
        /// 
        ///     // Resource
        ///     var foo_channel = new NewRelic.NotificationChannel("foo-channel", new()
        ///     {
        ///         Type = "WEBHOOK",
        ///         DestinationId = foo.Apply(getNotificationDestinationResult =&gt; getNotificationDestinationResult.Id),
        ///         Product = "IINT",
        ///         Properties = new[]
        ///         {
        ///             new NewRelic.Inputs.NotificationChannelPropertyArgs
        ///             {
        ///                 Key = "payload",
        ///                 Value = @"{
        /// 	""name"": ""foo""
        /// }",
        ///                 Label = "Payload Template",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNotificationDestinationResult> InvokeAsync(GetNotificationDestinationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNotificationDestinationResult>("newrelic:index/getNotificationDestination:getNotificationDestination", args ?? new GetNotificationDestinationArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = NewRelic.GetNotificationDestination.Invoke(new()
        ///     {
        ///         Id = "1e543419-0c25-456a-9057-fb0eb310e60b",
        ///     });
        /// 
        ///     // Resource
        ///     var foo_channel = new NewRelic.NotificationChannel("foo-channel", new()
        ///     {
        ///         Type = "WEBHOOK",
        ///         DestinationId = foo.Apply(getNotificationDestinationResult =&gt; getNotificationDestinationResult.Id),
        ///         Product = "IINT",
        ///         Properties = new[]
        ///         {
        ///             new NewRelic.Inputs.NotificationChannelPropertyArgs
        ///             {
        ///                 Key = "payload",
        ///                 Value = @"{
        /// 	""name"": ""foo""
        /// }",
        ///                 Label = "Payload Template",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNotificationDestinationResult> Invoke(GetNotificationDestinationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNotificationDestinationResult>("newrelic:index/getNotificationDestination:getNotificationDestination", args ?? new GetNotificationDestinationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNotificationDestinationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The New Relic account ID to operate on.  This allows you to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        /// </summary>
        [Input("accountId")]
        public int? AccountId { get; set; }

        /// <summary>
        /// The id of the notification destination in New Relic.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetNotificationDestinationArgs()
        {
        }
        public static new GetNotificationDestinationArgs Empty => new GetNotificationDestinationArgs();
    }

    public sealed class GetNotificationDestinationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The New Relic account ID to operate on.  This allows you to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        /// </summary>
        [Input("accountId")]
        public Input<int>? AccountId { get; set; }

        /// <summary>
        /// The id of the notification destination in New Relic.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetNotificationDestinationInvokeArgs()
        {
        }
        public static new GetNotificationDestinationInvokeArgs Empty => new GetNotificationDestinationInvokeArgs();
    }


    [OutputType]
    public sealed class GetNotificationDestinationResult
    {
        public readonly int AccountId;
        /// <summary>
        /// An indication whether the notification destination is active or not.
        /// </summary>
        public readonly bool Active;
        public readonly string Id;
        /// <summary>
        /// The name of the notification destination.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A nested block that describes a notification destination property.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNotificationDestinationPropertyResult> Properties;
        /// <summary>
        /// The status of the notification destination.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The notification destination type, either: `EMAIL`, `SERVICE_NOW`, `WEBHOOK`, `JIRA`, `MOBILE_PUSH`, `EVENT_BRIDGE`, `PAGERDUTY_ACCOUNT_INTEGRATION` or `PAGERDUTY_SERVICE_INTEGRATION`, `SLACK` and `SLACK_COLLABORATION`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNotificationDestinationResult(
            int accountId,

            bool active,

            string id,

            string name,

            ImmutableArray<Outputs.GetNotificationDestinationPropertyResult> properties,

            string status,

            string type)
        {
            AccountId = accountId;
            Active = active;
            Id = id;
            Name = name;
            Properties = properties;
            Status = status;
            Type = type;
        }
    }
}
