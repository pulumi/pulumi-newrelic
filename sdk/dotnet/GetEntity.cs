// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    public static class GetEntity
    {
        /// <summary>
        /// Use this data source to get information about a specific entity in New Relic One that already exists.
        /// 
        /// ## Additional Examples
        /// 
        /// &gt; If the entities are not found please try again without providing the `types` field.
        /// 
        /// ### Query for an OTEL entity
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var app = NewRelic.GetEntity.Invoke(new()
        ///     {
        ///         Domain = "EXT",
        ///         Name = "my-otel-app",
        ///         Tags = new[]
        ///         {
        ///             new NewRelic.Inputs.GetEntityTagInputArgs
        ///             {
        ///                 Key = "accountID",
        ///                 Value = "12345",
        ///             },
        ///         },
        ///         Type = "SERVICE",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Query for an entity by type (AWS Lambda entity in this example)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var app = NewRelic.GetEntity.Invoke(new()
        ///     {
        ///         Name = "my_lambda_trace",
        ///         Type = "AWSLAMBDAFUNCTION",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetEntityResult> InvokeAsync(GetEntityArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEntityResult>("newrelic:index/getEntity:getEntity", args ?? new GetEntityArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a specific entity in New Relic One that already exists.
        /// 
        /// ## Additional Examples
        /// 
        /// &gt; If the entities are not found please try again without providing the `types` field.
        /// 
        /// ### Query for an OTEL entity
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var app = NewRelic.GetEntity.Invoke(new()
        ///     {
        ///         Domain = "EXT",
        ///         Name = "my-otel-app",
        ///         Tags = new[]
        ///         {
        ///             new NewRelic.Inputs.GetEntityTagInputArgs
        ///             {
        ///                 Key = "accountID",
        ///                 Value = "12345",
        ///             },
        ///         },
        ///         Type = "SERVICE",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Query for an entity by type (AWS Lambda entity in this example)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var app = NewRelic.GetEntity.Invoke(new()
        ///     {
        ///         Name = "my_lambda_trace",
        ///         Type = "AWSLAMBDAFUNCTION",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetEntityResult> Invoke(GetEntityInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEntityResult>("newrelic:index/getEntity:getEntity", args ?? new GetEntityInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEntityArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The entity's domain. Valid values are APM, BROWSER, INFRA, MOBILE, SYNTH, and EXT. If not specified, all domains are searched.
        /// </summary>
        [Input("domain")]
        public string? Domain { get; set; }

        /// <summary>
        /// Ignore case of the `name` when searching for the entity. Defaults to false.
        /// </summary>
        [Input("ignoreCase")]
        public bool? IgnoreCase { get; set; }

        /// <summary>
        /// The name of the entity in New Relic One.  The first entity matching this name for the given search parameters will be returned.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("tags")]
        private List<Inputs.GetEntityTagArgs>? _tags;

        /// <summary>
        /// A tag applied to the entity. See Nested tag blocks below for details.
        /// </summary>
        public List<Inputs.GetEntityTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetEntityTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The entity's type. Valid values are APPLICATION, DASHBOARD, HOST, MONITOR, WORKLOAD, AWSLAMBDAFUNCTION, SERVICE_LEVEL, and KEY_TRANSACTION. Note: Other entity types may also be queryable as the list of entity types may fluctuate over time.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetEntityArgs()
        {
        }
        public static new GetEntityArgs Empty => new GetEntityArgs();
    }

    public sealed class GetEntityInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The entity's domain. Valid values are APM, BROWSER, INFRA, MOBILE, SYNTH, and EXT. If not specified, all domains are searched.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Ignore case of the `name` when searching for the entity. Defaults to false.
        /// </summary>
        [Input("ignoreCase")]
        public Input<bool>? IgnoreCase { get; set; }

        /// <summary>
        /// The name of the entity in New Relic One.  The first entity matching this name for the given search parameters will be returned.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.GetEntityTagInputArgs>? _tags;

        /// <summary>
        /// A tag applied to the entity. See Nested tag blocks below for details.
        /// </summary>
        public InputList<Inputs.GetEntityTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetEntityTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The entity's type. Valid values are APPLICATION, DASHBOARD, HOST, MONITOR, WORKLOAD, AWSLAMBDAFUNCTION, SERVICE_LEVEL, and KEY_TRANSACTION. Note: Other entity types may also be queryable as the list of entity types may fluctuate over time.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetEntityInvokeArgs()
        {
        }
        public static new GetEntityInvokeArgs Empty => new GetEntityInvokeArgs();
    }


    [OutputType]
    public sealed class GetEntityResult
    {
        /// <summary>
        /// The New Relic account ID associated with this entity.
        /// </summary>
        public readonly int AccountId;
        /// <summary>
        /// The domain-specific application ID of the entity. Only returned for APM and Browser applications.
        /// </summary>
        public readonly int ApplicationId;
        public readonly string Domain;
        /// <summary>
        /// The unique GUID of the entity.
        /// </summary>
        public readonly string Guid;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IgnoreCase;
        public readonly string Name;
        /// <summary>
        /// The browser-specific ID of the backing APM entity. Only returned for Browser applications.
        /// </summary>
        public readonly int ServingApmApplicationId;
        public readonly ImmutableArray<Outputs.GetEntityTagResult> Tags;
        public readonly string Type;

        [OutputConstructor]
        private GetEntityResult(
            int accountId,

            int applicationId,

            string domain,

            string guid,

            string id,

            bool? ignoreCase,

            string name,

            int servingApmApplicationId,

            ImmutableArray<Outputs.GetEntityTagResult> tags,

            string type)
        {
            AccountId = accountId;
            ApplicationId = applicationId;
            Domain = domain;
            Guid = guid;
            Id = id;
            IgnoreCase = ignoreCase;
            Name = name;
            ServingApmApplicationId = servingApmApplicationId;
            Tags = tags;
            Type = type;
        }
    }
}
