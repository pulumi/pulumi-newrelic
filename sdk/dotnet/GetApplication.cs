// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    public static class GetApplication
    {
        /// <summary>
        /// #### DEPRECATED! Use at your own risk. Use the `newrelic.getEntity` data source instead. This feature may be removed in the next major release
        /// 
        /// Use this data source to get information about a specific application in New Relic that already exists.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var app = NewRelic.GetApplication.Invoke(new()
        ///     {
        ///         Name = "my-app",
        ///     });
        /// 
        ///     var foo = new NewRelic.AlertPolicy("foo", new()
        ///     {
        ///         Name = "foo",
        ///     });
        /// 
        ///     var fooAlertCondition = new NewRelic.AlertCondition("foo", new()
        ///     {
        ///         PolicyId = foo.Id,
        ///         Name = "foo",
        ///         Type = "apm_app_metric",
        ///         Entities = new[]
        ///         {
        ///             app.Apply(getApplicationResult =&gt; getApplicationResult.Id),
        ///         },
        ///         Metric = "apdex",
        ///         RunbookUrl = "https://www.example.com",
        ///         Terms = new[]
        ///         {
        ///             new NewRelic.Inputs.AlertConditionTermArgs
        ///             {
        ///                 Duration = 5,
        ///                 Operator = "below",
        ///                 Priority = "critical",
        ///                 Threshold = 0.75,
        ///                 TimeFunction = "all",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetApplicationResult> InvokeAsync(GetApplicationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApplicationResult>("newrelic:index/getApplication:getApplication", args ?? new GetApplicationArgs(), options.WithDefaults());

        /// <summary>
        /// #### DEPRECATED! Use at your own risk. Use the `newrelic.getEntity` data source instead. This feature may be removed in the next major release
        /// 
        /// Use this data source to get information about a specific application in New Relic that already exists.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var app = NewRelic.GetApplication.Invoke(new()
        ///     {
        ///         Name = "my-app",
        ///     });
        /// 
        ///     var foo = new NewRelic.AlertPolicy("foo", new()
        ///     {
        ///         Name = "foo",
        ///     });
        /// 
        ///     var fooAlertCondition = new NewRelic.AlertCondition("foo", new()
        ///     {
        ///         PolicyId = foo.Id,
        ///         Name = "foo",
        ///         Type = "apm_app_metric",
        ///         Entities = new[]
        ///         {
        ///             app.Apply(getApplicationResult =&gt; getApplicationResult.Id),
        ///         },
        ///         Metric = "apdex",
        ///         RunbookUrl = "https://www.example.com",
        ///         Terms = new[]
        ///         {
        ///             new NewRelic.Inputs.AlertConditionTermArgs
        ///             {
        ///                 Duration = 5,
        ///                 Operator = "below",
        ///                 Priority = "critical",
        ///                 Threshold = 0.75,
        ///                 TimeFunction = "all",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetApplicationResult> Invoke(GetApplicationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationResult>("newrelic:index/getApplication:getApplication", args ?? new GetApplicationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// #### DEPRECATED! Use at your own risk. Use the `newrelic.getEntity` data source instead. This feature may be removed in the next major release
        /// 
        /// Use this data source to get information about a specific application in New Relic that already exists.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var app = NewRelic.GetApplication.Invoke(new()
        ///     {
        ///         Name = "my-app",
        ///     });
        /// 
        ///     var foo = new NewRelic.AlertPolicy("foo", new()
        ///     {
        ///         Name = "foo",
        ///     });
        /// 
        ///     var fooAlertCondition = new NewRelic.AlertCondition("foo", new()
        ///     {
        ///         PolicyId = foo.Id,
        ///         Name = "foo",
        ///         Type = "apm_app_metric",
        ///         Entities = new[]
        ///         {
        ///             app.Apply(getApplicationResult =&gt; getApplicationResult.Id),
        ///         },
        ///         Metric = "apdex",
        ///         RunbookUrl = "https://www.example.com",
        ///         Terms = new[]
        ///         {
        ///             new NewRelic.Inputs.AlertConditionTermArgs
        ///             {
        ///                 Duration = 5,
        ///                 Operator = "below",
        ///                 Priority = "critical",
        ///                 Threshold = 0.75,
        ///                 TimeFunction = "all",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetApplicationResult> Invoke(GetApplicationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationResult>("newrelic:index/getApplication:getApplication", args ?? new GetApplicationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the application in New Relic.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetApplicationArgs()
        {
        }
        public static new GetApplicationArgs Empty => new GetApplicationArgs();
    }

    public sealed class GetApplicationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the application in New Relic.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetApplicationInvokeArgs()
        {
        }
        public static new GetApplicationInvokeArgs Empty => new GetApplicationInvokeArgs();
    }


    [OutputType]
    public sealed class GetApplicationResult
    {
        /// <summary>
        /// A list of host IDs associated with the application.
        /// </summary>
        public readonly ImmutableArray<string> HostIds;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of instance IDs associated with the application.
        /// </summary>
        public readonly ImmutableArray<string> InstanceIds;
        public readonly string Name;

        [OutputConstructor]
        private GetApplicationResult(
            ImmutableArray<string> hostIds,

            string id,

            ImmutableArray<string> instanceIds,

            string name)
        {
            HostIds = hostIds;
            Id = id;
            InstanceIds = instanceIds;
            Name = name;
        }
    }
}
