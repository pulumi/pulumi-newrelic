// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    public static class GetAlertChannel
    {
        /// <summary>
        /// Use this data source to get information about a specific alert channel in New Relic that already exists.
        /// 
        /// &gt; **WARNING:** The `newrelic.AlertChannel` data source is deprecated and will be removed in the next major release.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data source
        ///     var foo = NewRelic.GetAlertChannel.Invoke(new()
        ///     {
        ///         Name = "foo@example.com",
        ///     });
        /// 
        ///     // Resource
        ///     var fooAlertPolicy = new NewRelic.AlertPolicy("foo", new()
        ///     {
        ///         Name = "foo",
        ///     });
        /// 
        ///     // Using the data source and resource together
        ///     var fooAlertPolicyChannel = new NewRelic.AlertPolicyChannel("foo", new()
        ///     {
        ///         PolicyId = fooAlertPolicy.Id,
        ///         ChannelId = foo.Apply(getAlertChannelResult =&gt; getAlertChannelResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAlertChannelResult> InvokeAsync(GetAlertChannelArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAlertChannelResult>("newrelic:index/getAlertChannel:getAlertChannel", args ?? new GetAlertChannelArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a specific alert channel in New Relic that already exists.
        /// 
        /// &gt; **WARNING:** The `newrelic.AlertChannel` data source is deprecated and will be removed in the next major release.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data source
        ///     var foo = NewRelic.GetAlertChannel.Invoke(new()
        ///     {
        ///         Name = "foo@example.com",
        ///     });
        /// 
        ///     // Resource
        ///     var fooAlertPolicy = new NewRelic.AlertPolicy("foo", new()
        ///     {
        ///         Name = "foo",
        ///     });
        /// 
        ///     // Using the data source and resource together
        ///     var fooAlertPolicyChannel = new NewRelic.AlertPolicyChannel("foo", new()
        ///     {
        ///         PolicyId = fooAlertPolicy.Id,
        ///         ChannelId = foo.Apply(getAlertChannelResult =&gt; getAlertChannelResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAlertChannelResult> Invoke(GetAlertChannelInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAlertChannelResult>("newrelic:index/getAlertChannel:getAlertChannel", args ?? new GetAlertChannelInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a specific alert channel in New Relic that already exists.
        /// 
        /// &gt; **WARNING:** The `newrelic.AlertChannel` data source is deprecated and will be removed in the next major release.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using NewRelic = Pulumi.NewRelic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Data source
        ///     var foo = NewRelic.GetAlertChannel.Invoke(new()
        ///     {
        ///         Name = "foo@example.com",
        ///     });
        /// 
        ///     // Resource
        ///     var fooAlertPolicy = new NewRelic.AlertPolicy("foo", new()
        ///     {
        ///         Name = "foo",
        ///     });
        /// 
        ///     // Using the data source and resource together
        ///     var fooAlertPolicyChannel = new NewRelic.AlertPolicyChannel("foo", new()
        ///     {
        ///         PolicyId = fooAlertPolicy.Id,
        ///         ChannelId = foo.Apply(getAlertChannelResult =&gt; getAlertChannelResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAlertChannelResult> Invoke(GetAlertChannelInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAlertChannelResult>("newrelic:index/getAlertChannel:getAlertChannel", args ?? new GetAlertChannelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAlertChannelArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The New Relic account ID to operate on.  This allows you to override the `AccountId` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        /// <summary>
        /// The name of the alert channel in New Relic.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetAlertChannelArgs()
        {
        }
        public static new GetAlertChannelArgs Empty => new GetAlertChannelArgs();
    }

    public sealed class GetAlertChannelInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The New Relic account ID to operate on.  This allows you to override the `AccountId` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The name of the alert channel in New Relic.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetAlertChannelInvokeArgs()
        {
        }
        public static new GetAlertChannelInvokeArgs Empty => new GetAlertChannelInvokeArgs();
    }


    [OutputType]
    public sealed class GetAlertChannelResult
    {
        public readonly string AccountId;
        /// <summary>
        /// Alert channel configuration.
        /// </summary>
        public readonly Outputs.GetAlertChannelConfigResult Config;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// A list of policy IDs associated with the alert channel.
        /// </summary>
        public readonly ImmutableArray<string> PolicyIds;
        /// <summary>
        /// Alert channel type, either: `Email`, `Opsgenie`, `Pagerduty`, `Slack`, `Victorops`, or `Webhook`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAlertChannelResult(
            string accountId,

            Outputs.GetAlertChannelConfigResult config,

            string id,

            string name,

            ImmutableArray<string> policyIds,

            string type)
        {
            AccountId = accountId;
            Config = config;
            Id = id;
            Name = name;
            PolicyIds = policyIds;
            Type = type;
        }
    }
}
