// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Create a New Relic One Dashboard
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using NewRelic = Pulumi.NewRelic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampledash = new NewRelic.OneDashboard("exampledash", new()
    ///     {
    ///         Name = "New Relic Terraform Example",
    ///         Permissions = "public_read_only",
    ///         Pages = new[]
    ///         {
    ///             new NewRelic.Inputs.OneDashboardPageArgs
    ///             {
    ///                 Name = "New Relic Terraform Example",
    ///                 WidgetBillboards = new[]
    ///                 {
    ///                     new NewRelic.Inputs.OneDashboardPageWidgetBillboardArgs
    ///                     {
    ///                         Title = "Requests per minute",
    ///                         Row = 1,
    ///                         Column = 1,
    ///                         Width = 6,
    ///                         Height = 3,
    ///                         NrqlQueries = new[]
    ///                         {
    ///                             new NewRelic.Inputs.OneDashboardPageWidgetBillboardNrqlQueryArgs
    ///                             {
    ///                                 Query = "FROM Transaction SELECT rate(count(*), 1 minute)",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 WidgetBars = new[]
    ///                 {
    ///                     new NewRelic.Inputs.OneDashboardPageWidgetBarArgs
    ///                     {
    ///                         Title = "Average transaction duration, by application",
    ///                         Row = 1,
    ///                         Column = 7,
    ///                         Width = 6,
    ///                         Height = 3,
    ///                         NrqlQueries = new[]
    ///                         {
    ///                             new NewRelic.Inputs.OneDashboardPageWidgetBarNrqlQueryArgs
    ///                             {
    ///                                 AccountId = "12345",
    ///                                 Query = "FROM Transaction SELECT average(duration) FACET appName",
    ///                             },
    ///                         },
    ///                         LinkedEntityGuids = new[]
    ///                         {
    ///                             "abc123",
    ///                         },
    ///                     },
    ///                     new NewRelic.Inputs.OneDashboardPageWidgetBarArgs
    ///                     {
    ///                         Title = "Average transaction duration, by application",
    ///                         Row = 4,
    ///                         Column = 1,
    ///                         Width = 6,
    ///                         Height = 3,
    ///                         NrqlQueries = new[]
    ///                         {
    ///                             new NewRelic.Inputs.OneDashboardPageWidgetBarNrqlQueryArgs
    ///                             {
    ///                                 AccountId = "12345",
    ///                                 Query = "FROM Transaction SELECT average(duration) FACET appName",
    ///                             },
    ///                         },
    ///                         FilterCurrentDashboard = true,
    ///                         Colors = new[]
    ///                         {
    ///                             new NewRelic.Inputs.OneDashboardPageWidgetBarColorArgs
    ///                             {
    ///                                 Color = "#722727",
    ///                                 SeriesOverrides = new[]
    ///                                 {
    ///                                     new NewRelic.Inputs.OneDashboardPageWidgetBarColorSeriesOverrideArgs
    ///                                     {
    ///                                         Color = "#722322",
    ///                                         SeriesName = "Node",
    ///                                     },
    ///                                     new NewRelic.Inputs.OneDashboardPageWidgetBarColorSeriesOverrideArgs
    ///                                     {
    ///                                         Color = "#236f70",
    ///                                         SeriesName = "Java",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 WidgetLines = new[]
    ///                 {
    ///                     new NewRelic.Inputs.OneDashboardPageWidgetLineArgs
    ///                     {
    ///                         Title = "Average transaction duration and the request per minute, by application",
    ///                         Row = 4,
    ///                         Column = 7,
    ///                         Width = 6,
    ///                         Height = 3,
    ///                         NrqlQueries = new[]
    ///                         {
    ///                             new NewRelic.Inputs.OneDashboardPageWidgetLineNrqlQueryArgs
    ///                             {
    ///                                 AccountId = "12345",
    ///                                 Query = "FROM Transaction select max(duration) as 'max duration' where httpResponseCode = '504' timeseries since 5 minutes ago",
    ///                             },
    ///                             new NewRelic.Inputs.OneDashboardPageWidgetLineNrqlQueryArgs
    ///                             {
    ///                                 Query = "FROM Transaction SELECT rate(count(*), 1 minute)",
    ///                             },
    ///                         },
    ///                         LegendEnabled = true,
    ///                         IgnoreTimeRange = false,
    ///                         YAxisLeftZero = true,
    ///                         YAxisLeftMin = 0,
    ///                         YAxisLeftMax = 1,
    ///                         YAxisRight = new NewRelic.Inputs.OneDashboardPageWidgetLineYAxisRightArgs
    ///                         {
    ///                             YAxisRightZero = true,
    ///                             YAxisRightMin = 0,
    ///                             YAxisRightMax = 300,
    ///                             YAxisRightSeries = new[]
    ///                             {
    ///                                 "A",
    ///                                 "B",
    ///                             },
    ///                         },
    ///                         IsLabelVisible = true,
    ///                         Thresholds = new[]
    ///                         {
    ///                             new NewRelic.Inputs.OneDashboardPageWidgetLineThresholdArgs
    ///                             {
    ///                                 Name = "Duration Threshold",
    ///                                 From = "1",
    ///                                 To = "2",
    ///                                 Severity = "critical",
    ///                             },
    ///                             new NewRelic.Inputs.OneDashboardPageWidgetLineThresholdArgs
    ///                             {
    ///                                 Name = "Duration Threshold Two",
    ///                                 From = "2.1",
    ///                                 To = "3.3",
    ///                                 Severity = "warning",
    ///                             },
    ///                         },
    ///                         Units = new[]
    ///                         {
    ///                             new NewRelic.Inputs.OneDashboardPageWidgetLineUnitArgs
    ///                             {
    ///                                 Unit = "ms",
    ///                                 SeriesOverrides = new[]
    ///                                 {
    ///                                     new NewRelic.Inputs.OneDashboardPageWidgetLineUnitSeriesOverrideArgs
    ///                                     {
    ///                                         Unit = "ms",
    ///                                         SeriesName = "max duration",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     new NewRelic.Inputs.OneDashboardPageWidgetLineArgs
    ///                     {
    ///                         Title = "Overall CPU % Statistics",
    ///                         Row = 1,
    ///                         Column = 5,
    ///                         Height = 3,
    ///                         Width = 4,
    ///                         NrqlQueries = new[]
    ///                         {
    ///                             new NewRelic.Inputs.OneDashboardPageWidgetLineNrqlQueryArgs
    ///                             {
    ///                                 Query = @"SELECT average(cpuSystemPercent), average(cpuUserPercent), average(cpuIdlePercent), average(cpuIOWaitPercent) FROM SystemSample  SINCE 1 hour ago TIMESERIES
    /// ",
    ///                             },
    ///                         },
    ///                         FacetShowOtherSeries = false,
    ///                         LegendEnabled = true,
    ///                         IgnoreTimeRange = false,
    ///                         YAxisLeftZero = true,
    ///                         YAxisLeftMin = 0,
    ///                         YAxisLeftMax = 0,
    ///                         NullValues = new[]
    ///                         {
    ///                             new NewRelic.Inputs.OneDashboardPageWidgetLineNullValueArgs
    ///                             {
    ///                                 NullValue = "default",
    ///                                 SeriesOverrides = new[]
    ///                                 {
    ///                                     new NewRelic.Inputs.OneDashboardPageWidgetLineNullValueSeriesOverrideArgs
    ///                                     {
    ///                                         NullValue = "remove",
    ///                                         SeriesName = "Avg Cpu User Percent",
    ///                                     },
    ///                                     new NewRelic.Inputs.OneDashboardPageWidgetLineNullValueSeriesOverrideArgs
    ///                                     {
    ///                                         NullValue = "zero",
    ///                                         SeriesName = "Avg Cpu Idle Percent",
    ///                                     },
    ///                                     new NewRelic.Inputs.OneDashboardPageWidgetLineNullValueSeriesOverrideArgs
    ///                                     {
    ///                                         NullValue = "default",
    ///                                         SeriesName = "Avg Cpu IO Wait Percent",
    ///                                     },
    ///                                     new NewRelic.Inputs.OneDashboardPageWidgetLineNullValueSeriesOverrideArgs
    ///                                     {
    ///                                         NullValue = "preserve",
    ///                                         SeriesName = "Avg Cpu System Percent",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 WidgetMarkdowns = new[]
    ///                 {
    ///                     new NewRelic.Inputs.OneDashboardPageWidgetMarkdownArgs
    ///                     {
    ///                         Title = "Dashboard Note",
    ///                         Row = 7,
    ///                         Column = 1,
    ///                         Width = 12,
    ///                         Height = 3,
    ///                         Text = @"### Helpful Links
    /// 
    /// * [New Relic One](https://one.newrelic.com)
    /// * [Developer Portal](https://developer.newrelic.com)",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Variables = new[]
    ///         {
    ///             new NewRelic.Inputs.OneDashboardVariableArgs
    ///             {
    ///                 DefaultValues = new[]
    ///                 {
    ///                     "value",
    ///                 },
    ///                 IsMultiSelection = true,
    ///                 Items = new[]
    ///                 {
    ///                     new NewRelic.Inputs.OneDashboardVariableItemArgs
    ///                     {
    ///                         Title = "item",
    ///                         Value = "ITEM",
    ///                     },
    ///                 },
    ///                 Name = "variable",
    ///                 NrqlQuery = new NewRelic.Inputs.OneDashboardVariableNrqlQueryArgs
    ///                 {
    ///                     AccountIds = new[]
    ///                     {
    ///                         "12345",
    ///                     },
    ///                     Query = "FROM Transaction SELECT average(duration) FACET appName",
    ///                 },
    ///                 ReplacementStrategy = "default",
    ///                 Title = "title",
    ///                 Type = "nrql",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// See additional examples.
    /// 
    /// ## Import
    /// 
    /// New Relic dashboards can be imported using their GUID, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import newrelic:index/oneDashboard:OneDashboard my_dashboard &lt;dashboard GUID&gt;
    /// ```
    /// </summary>
    [NewRelicResourceType("newrelic:index/oneDashboard:OneDashboard")]
    public partial class OneDashboard : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Brief text describing the dashboard.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The unique entity identifier of the dashboard page in New Relic.
        /// </summary>
        [Output("guid")]
        public Output<string> Guid { get; private set; } = null!;

        /// <summary>
        /// The title of the dashboard.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A nested block that describes a page. See Nested page blocks below for details.
        /// </summary>
        [Output("pages")]
        public Output<ImmutableArray<Outputs.OneDashboardPage>> Pages { get; private set; } = null!;

        /// <summary>
        /// The URL for viewing the dashboard.
        /// </summary>
        [Output("permalink")]
        public Output<string> Permalink { get; private set; } = null!;

        /// <summary>
        /// Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`.  Defaults to `public_read_only`.
        /// </summary>
        [Output("permissions")]
        public Output<string?> Permissions { get; private set; } = null!;

        /// <summary>
        /// A nested block that describes a dashboard-local variable. See Nested variable blocks below for details.
        /// </summary>
        [Output("variables")]
        public Output<ImmutableArray<Outputs.OneDashboardVariable>> Variables { get; private set; } = null!;


        /// <summary>
        /// Create a OneDashboard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OneDashboard(string name, OneDashboardArgs args, CustomResourceOptions? options = null)
            : base("newrelic:index/oneDashboard:OneDashboard", name, args ?? new OneDashboardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OneDashboard(string name, Input<string> id, OneDashboardState? state = null, CustomResourceOptions? options = null)
            : base("newrelic:index/oneDashboard:OneDashboard", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OneDashboard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OneDashboard Get(string name, Input<string> id, OneDashboardState? state = null, CustomResourceOptions? options = null)
        {
            return new OneDashboard(name, id, state, options);
        }
    }

    public sealed class OneDashboardArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Brief text describing the dashboard.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The title of the dashboard.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pages", required: true)]
        private InputList<Inputs.OneDashboardPageArgs>? _pages;

        /// <summary>
        /// A nested block that describes a page. See Nested page blocks below for details.
        /// </summary>
        public InputList<Inputs.OneDashboardPageArgs> Pages
        {
            get => _pages ?? (_pages = new InputList<Inputs.OneDashboardPageArgs>());
            set => _pages = value;
        }

        /// <summary>
        /// Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`.  Defaults to `public_read_only`.
        /// </summary>
        [Input("permissions")]
        public Input<string>? Permissions { get; set; }

        [Input("variables")]
        private InputList<Inputs.OneDashboardVariableArgs>? _variables;

        /// <summary>
        /// A nested block that describes a dashboard-local variable. See Nested variable blocks below for details.
        /// </summary>
        public InputList<Inputs.OneDashboardVariableArgs> Variables
        {
            get => _variables ?? (_variables = new InputList<Inputs.OneDashboardVariableArgs>());
            set => _variables = value;
        }

        public OneDashboardArgs()
        {
        }
        public static new OneDashboardArgs Empty => new OneDashboardArgs();
    }

    public sealed class OneDashboardState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Brief text describing the dashboard.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The unique entity identifier of the dashboard page in New Relic.
        /// </summary>
        [Input("guid")]
        public Input<string>? Guid { get; set; }

        /// <summary>
        /// The title of the dashboard.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pages")]
        private InputList<Inputs.OneDashboardPageGetArgs>? _pages;

        /// <summary>
        /// A nested block that describes a page. See Nested page blocks below for details.
        /// </summary>
        public InputList<Inputs.OneDashboardPageGetArgs> Pages
        {
            get => _pages ?? (_pages = new InputList<Inputs.OneDashboardPageGetArgs>());
            set => _pages = value;
        }

        /// <summary>
        /// The URL for viewing the dashboard.
        /// </summary>
        [Input("permalink")]
        public Input<string>? Permalink { get; set; }

        /// <summary>
        /// Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`.  Defaults to `public_read_only`.
        /// </summary>
        [Input("permissions")]
        public Input<string>? Permissions { get; set; }

        [Input("variables")]
        private InputList<Inputs.OneDashboardVariableGetArgs>? _variables;

        /// <summary>
        /// A nested block that describes a dashboard-local variable. See Nested variable blocks below for details.
        /// </summary>
        public InputList<Inputs.OneDashboardVariableGetArgs> Variables
        {
            get => _variables ?? (_variables = new InputList<Inputs.OneDashboardVariableGetArgs>());
            set => _variables = value;
        }

        public OneDashboardState()
        {
        }
        public static new OneDashboardState Empty => new OneDashboardState();
    }
}
