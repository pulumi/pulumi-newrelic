// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    /// <summary>
    /// ## Import
    /// 
    /// Existing API access keys can be imported using a composite ID of `&lt;api_access_key_id&gt;:&lt;key_type&gt;`, where `&lt;key_type&gt;` is either `INGEST` or `USER`. Refer to the considerations listed in the Important Considerations section above regarding limitations on importing the actual key value.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import newrelic:index/apiAccessKey:ApiAccessKey foobar "131313133A331313130B5F13DF01313FDB13B13133EE5E133D13EAAB3A3C13D3:INGEST"
    /// ```
    /// 
    /// For customers using Terraform v1.5 and above, it is recommended to use the `import {}` block in your Terraform configuration. This allows Terraform to generate the resource configuration automatically during the import process by running a `pulumi preview -generate-config-out=&lt;filename&gt;.tf`, reducing manual effort and ensuring accuracy.
    /// 
    /// For example:
    /// 
    /// hcl
    /// 
    /// import {
    /// 
    ///   id = "131313133A331313130B5F13DF01313FDB13B13133EE5E133D13EAAB3A3C13D3:INGEST"
    /// 
    ///   to = newrelic_api_access_key.foobar
    /// 
    /// }
    /// 
    /// This approach simplifies the import process and ensures that the resource configuration aligns with the imported state.
    /// </summary>
    [NewRelicResourceType("newrelic:index/apiAccessKey:ApiAccessKey")]
    public partial class ApiAccessKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The New Relic account ID where the API access key will be created.
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// Required if `key_type` is `INGEST`. Valid options are `BROWSER` or `LICENSE` (case-sensitive).
        /// </summary>
        [Output("ingestType")]
        public Output<string> IngestType { get; private set; } = null!;

        /// <summary>
        /// The actual API key.
        /// - &lt;span style="color:tomato;"&gt;It is important to exercise caution when exporting the value of `key`, as it is sensitive information&lt;/span&gt;. Avoid logging or exposing it inappropriately.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// The type of API key to create. Valid options are `INGEST` or `USER` (case-sensitive).
        /// - If `key_type` is `INGEST`, then `ingest_type` must be specified.
        /// - If `key_type` is `USER`, then `user_id` must be specified.
        /// </summary>
        [Output("keyType")]
        public Output<string> KeyType { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Additional notes about the API access key.
        /// </summary>
        [Output("notes")]
        public Output<string> Notes { get; private set; } = null!;

        /// <summary>
        /// Required if `key_type` is `USER`. The New Relic user ID for which the API access key will be created.
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a ApiAccessKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApiAccessKey(string name, ApiAccessKeyArgs args, CustomResourceOptions? options = null)
            : base("newrelic:index/apiAccessKey:ApiAccessKey", name, args ?? new ApiAccessKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApiAccessKey(string name, Input<string> id, ApiAccessKeyState? state = null, CustomResourceOptions? options = null)
            : base("newrelic:index/apiAccessKey:ApiAccessKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApiAccessKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApiAccessKey Get(string name, Input<string> id, ApiAccessKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new ApiAccessKey(name, id, state, options);
        }
    }

    public sealed class ApiAccessKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The New Relic account ID where the API access key will be created.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Required if `key_type` is `INGEST`. Valid options are `BROWSER` or `LICENSE` (case-sensitive).
        /// </summary>
        [Input("ingestType")]
        public Input<string>? IngestType { get; set; }

        /// <summary>
        /// The type of API key to create. Valid options are `INGEST` or `USER` (case-sensitive).
        /// - If `key_type` is `INGEST`, then `ingest_type` must be specified.
        /// - If `key_type` is `USER`, then `user_id` must be specified.
        /// </summary>
        [Input("keyType", required: true)]
        public Input<string> KeyType { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Additional notes about the API access key.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// Required if `key_type` is `USER`. The New Relic user ID for which the API access key will be created.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public ApiAccessKeyArgs()
        {
        }
        public static new ApiAccessKeyArgs Empty => new ApiAccessKeyArgs();
    }

    public sealed class ApiAccessKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The New Relic account ID where the API access key will be created.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Required if `key_type` is `INGEST`. Valid options are `BROWSER` or `LICENSE` (case-sensitive).
        /// </summary>
        [Input("ingestType")]
        public Input<string>? IngestType { get; set; }

        /// <summary>
        /// The actual API key.
        /// - &lt;span style="color:tomato;"&gt;It is important to exercise caution when exporting the value of `key`, as it is sensitive information&lt;/span&gt;. Avoid logging or exposing it inappropriately.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The type of API key to create. Valid options are `INGEST` or `USER` (case-sensitive).
        /// - If `key_type` is `INGEST`, then `ingest_type` must be specified.
        /// - If `key_type` is `USER`, then `user_id` must be specified.
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Additional notes about the API access key.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// Required if `key_type` is `USER`. The New Relic user ID for which the API access key will be created.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public ApiAccessKeyState()
        {
        }
        public static new ApiAccessKeyState Empty => new ApiAccessKeyState();
    }
}
