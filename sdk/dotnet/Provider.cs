// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    /// <summary>
    /// The provider type for the newrelic package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [NewRelicResourceType("pulumi:providers:newrelic")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        [Output("adminApiKey")]
        public Output<string?> AdminApiKey { get; private set; } = null!;

        [Output("apiKey")]
        public Output<string?> ApiKey { get; private set; } = null!;

        [Output("apiUrl")]
        public Output<string?> ApiUrl { get; private set; } = null!;

        [Output("cacertFile")]
        public Output<string?> CacertFile { get; private set; } = null!;

        [Output("infrastructureApiUrl")]
        public Output<string?> InfrastructureApiUrl { get; private set; } = null!;

        [Output("insightsInsertKey")]
        public Output<string?> InsightsInsertKey { get; private set; } = null!;

        [Output("insightsInsertUrl")]
        public Output<string?> InsightsInsertUrl { get; private set; } = null!;

        [Output("insightsQueryUrl")]
        public Output<string?> InsightsQueryUrl { get; private set; } = null!;

        [Output("nerdgraphApiUrl")]
        public Output<string?> NerdgraphApiUrl { get; private set; } = null!;

        /// <summary>
        /// The data center for which your New Relic account is configured. Only one region per provider block is permitted.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        [Output("syntheticsApiUrl")]
        public Output<string?> SyntheticsApiUrl { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("newrelic", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountId", json: true)]
        public Input<int>? AccountId { get; set; }

        [Input("adminApiKey")]
        public Input<string>? AdminApiKey { get; set; }

        [Input("apiKey")]
        public Input<string>? ApiKey { get; set; }

        [Input("apiUrl")]
        public Input<string>? ApiUrl { get; set; }

        [Input("cacertFile")]
        public Input<string>? CacertFile { get; set; }

        [Input("infrastructureApiUrl")]
        public Input<string>? InfrastructureApiUrl { get; set; }

        [Input("insecureSkipVerify", json: true)]
        public Input<bool>? InsecureSkipVerify { get; set; }

        [Input("insightsInsertKey")]
        public Input<string>? InsightsInsertKey { get; set; }

        [Input("insightsInsertUrl")]
        public Input<string>? InsightsInsertUrl { get; set; }

        [Input("insightsQueryUrl")]
        public Input<string>? InsightsQueryUrl { get; set; }

        [Input("nerdgraphApiUrl")]
        public Input<string>? NerdgraphApiUrl { get; set; }

        /// <summary>
        /// The data center for which your New Relic account is configured. Only one region per provider block is permitted.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("syntheticsApiUrl")]
        public Input<string>? SyntheticsApiUrl { get; set; }

        public ProviderArgs()
        {
            AccountId = Utilities.GetEnvInt32("NEW_RELIC_ACCOUNT_ID");
            Region = Utilities.GetEnv("NEW_RELIC_REGION") ?? "US";
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }
}
