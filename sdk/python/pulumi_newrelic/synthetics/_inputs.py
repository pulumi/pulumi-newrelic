# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'MonitorScriptLocationArgs',
    'MultiLocationAlertConditionCriticalArgs',
    'MultiLocationAlertConditionWarningArgs',
]

@pulumi.input_type
class MonitorScriptLocationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 hmac: Optional[pulumi.Input[str]] = None,
                 vse_password: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The monitor script location name.
        :param pulumi.Input[str] hmac: The monitor script authentication code for the location. Use one of either `hmac` or `vse_password`.
        :param pulumi.Input[str] vse_password: The password for the location used to calculate the HMAC. Use one of either `hmac` or `vse_password`.
        """
        pulumi.set(__self__, "name", name)
        if hmac is not None:
            pulumi.set(__self__, "hmac", hmac)
        if vse_password is not None:
            pulumi.set(__self__, "vse_password", vse_password)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The monitor script location name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def hmac(self) -> Optional[pulumi.Input[str]]:
        """
        The monitor script authentication code for the location. Use one of either `hmac` or `vse_password`.
        """
        return pulumi.get(self, "hmac")

    @hmac.setter
    def hmac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hmac", value)

    @property
    @pulumi.getter(name="vsePassword")
    def vse_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the location used to calculate the HMAC. Use one of either `hmac` or `vse_password`.
        """
        return pulumi.get(self, "vse_password")

    @vse_password.setter
    def vse_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vse_password", value)


@pulumi.input_type
class MultiLocationAlertConditionCriticalArgs:
    def __init__(__self__, *,
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class MultiLocationAlertConditionWarningArgs:
    def __init__(__self__, *,
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


