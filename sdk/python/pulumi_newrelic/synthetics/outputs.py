# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'MonitorScriptLocation',
    'MultiLocationAlertConditionCritical',
    'MultiLocationAlertConditionWarning',
]

@pulumi.output_type
class MonitorScriptLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vsePassword":
            suggest = "vse_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorScriptLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorScriptLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorScriptLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 hmac: Optional[str] = None,
                 vse_password: Optional[str] = None):
        """
        :param str name: The monitor script location name.
        :param str hmac: The monitor script authentication code for the location. Use one of either `hmac` or `vse_password`.
        :param str vse_password: The password for the location used to calculate the HMAC. Use one of either `hmac` or `vse_password`.
        """
        pulumi.set(__self__, "name", name)
        if hmac is not None:
            pulumi.set(__self__, "hmac", hmac)
        if vse_password is not None:
            pulumi.set(__self__, "vse_password", vse_password)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The monitor script location name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def hmac(self) -> Optional[str]:
        """
        The monitor script authentication code for the location. Use one of either `hmac` or `vse_password`.
        """
        return pulumi.get(self, "hmac")

    @property
    @pulumi.getter(name="vsePassword")
    def vse_password(self) -> Optional[str]:
        """
        The password for the location used to calculate the HMAC. Use one of either `hmac` or `vse_password`.
        """
        return pulumi.get(self, "vse_password")


@pulumi.output_type
class MultiLocationAlertConditionCritical(dict):
    def __init__(__self__, *,
                 threshold: int):
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def threshold(self) -> int:
        return pulumi.get(self, "threshold")


@pulumi.output_type
class MultiLocationAlertConditionWarning(dict):
    def __init__(__self__, *,
                 threshold: int):
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def threshold(self) -> int:
        return pulumi.get(self, "threshold")


