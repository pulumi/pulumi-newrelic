# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetAlertChannelResult:
    """
    A collection of values returned by getAlertChannel.
    """
    def __init__(__self__, config=None, id=None, name=None, policy_ids=None, type=None):
        if config and not isinstance(config, dict):
            raise TypeError("Expected argument 'config' to be a dict")
        __self__.config = config
        """
        Alert channel configuration.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if policy_ids and not isinstance(policy_ids, list):
            raise TypeError("Expected argument 'policy_ids' to be a list")
        __self__.policy_ids = policy_ids
        """
        A list of policy IDs associated with the alert channel.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Alert channel type, either: `email`, `opsgenie`, `pagerduty`, `slack`, `victorops`, or `webhook`.
        """
class AwaitableGetAlertChannelResult(GetAlertChannelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlertChannelResult(
            config=self.config,
            id=self.id,
            name=self.name,
            policy_ids=self.policy_ids,
            type=self.type)

def get_alert_channel(name=None,opts=None):
    """
    Use this data source to get information about a specific alert channel in New Relic that already exists. 

    ## Example Usage



    ```python
    import pulumi
    import pulumi_newrelic as newrelic

    foo_alert_channel = newrelic.get_alert_channel(name="foo@example.com")
    # Resource
    foo_alert_policy = newrelic.AlertPolicy("fooAlertPolicy")
    # Using the data source and resource together
    foo_alert_policy_channel = newrelic.AlertPolicyChannel("fooAlertPolicyChannel",
        policy_id=foo_alert_policy.id,
        channel_id=foo_alert_channel.id)
    ```



    :param str name: The name of the alert channel in New Relic.
    """
    __args__ = dict()


    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('newrelic:index/getAlertChannel:getAlertChannel', __args__, opts=opts).value

    return AwaitableGetAlertChannelResult(
        config=__ret__.get('config'),
        id=__ret__.get('id'),
        name=__ret__.get('name'),
        policy_ids=__ret__.get('policyIds'),
        type=__ret__.get('type'))
