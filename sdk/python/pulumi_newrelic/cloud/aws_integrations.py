# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AwsIntegrationsArgs', 'AwsIntegrations']

@pulumi.input_type
class AwsIntegrationsArgs:
    def __init__(__self__, *,
                 linked_account_id: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None,
                 alb: Optional[pulumi.Input['AwsIntegrationsAlbArgs']] = None,
                 api_gateway: Optional[pulumi.Input['AwsIntegrationsApiGatewayArgs']] = None,
                 auto_scaling: Optional[pulumi.Input['AwsIntegrationsAutoScalingArgs']] = None,
                 aws_app_sync: Optional[pulumi.Input['AwsIntegrationsAwsAppSyncArgs']] = None,
                 aws_athena: Optional[pulumi.Input['AwsIntegrationsAwsAthenaArgs']] = None,
                 aws_cognito: Optional[pulumi.Input['AwsIntegrationsAwsCognitoArgs']] = None,
                 aws_connect: Optional[pulumi.Input['AwsIntegrationsAwsConnectArgs']] = None,
                 aws_direct_connect: Optional[pulumi.Input['AwsIntegrationsAwsDirectConnectArgs']] = None,
                 aws_fsx: Optional[pulumi.Input['AwsIntegrationsAwsFsxArgs']] = None,
                 aws_glue: Optional[pulumi.Input['AwsIntegrationsAwsGlueArgs']] = None,
                 aws_kinesis_analytics: Optional[pulumi.Input['AwsIntegrationsAwsKinesisAnalyticsArgs']] = None,
                 aws_media_convert: Optional[pulumi.Input['AwsIntegrationsAwsMediaConvertArgs']] = None,
                 aws_media_package_vod: Optional[pulumi.Input['AwsIntegrationsAwsMediaPackageVodArgs']] = None,
                 aws_mq: Optional[pulumi.Input['AwsIntegrationsAwsMqArgs']] = None,
                 aws_msk: Optional[pulumi.Input['AwsIntegrationsAwsMskArgs']] = None,
                 aws_neptune: Optional[pulumi.Input['AwsIntegrationsAwsNeptuneArgs']] = None,
                 aws_qldb: Optional[pulumi.Input['AwsIntegrationsAwsQldbArgs']] = None,
                 aws_route53resolver: Optional[pulumi.Input['AwsIntegrationsAwsRoute53resolverArgs']] = None,
                 aws_states: Optional[pulumi.Input['AwsIntegrationsAwsStatesArgs']] = None,
                 aws_transit_gateway: Optional[pulumi.Input['AwsIntegrationsAwsTransitGatewayArgs']] = None,
                 aws_waf: Optional[pulumi.Input['AwsIntegrationsAwsWafArgs']] = None,
                 aws_wafv2: Optional[pulumi.Input['AwsIntegrationsAwsWafv2Args']] = None,
                 billing: Optional[pulumi.Input['AwsIntegrationsBillingArgs']] = None,
                 cloudfront: Optional[pulumi.Input['AwsIntegrationsCloudfrontArgs']] = None,
                 cloudtrail: Optional[pulumi.Input['AwsIntegrationsCloudtrailArgs']] = None,
                 doc_db: Optional[pulumi.Input['AwsIntegrationsDocDbArgs']] = None,
                 dynamodb: Optional[pulumi.Input['AwsIntegrationsDynamodbArgs']] = None,
                 ebs: Optional[pulumi.Input['AwsIntegrationsEbsArgs']] = None,
                 ec2: Optional[pulumi.Input['AwsIntegrationsEc2Args']] = None,
                 ecs: Optional[pulumi.Input['AwsIntegrationsEcsArgs']] = None,
                 efs: Optional[pulumi.Input['AwsIntegrationsEfsArgs']] = None,
                 elasticache: Optional[pulumi.Input['AwsIntegrationsElasticacheArgs']] = None,
                 elasticbeanstalk: Optional[pulumi.Input['AwsIntegrationsElasticbeanstalkArgs']] = None,
                 elasticsearch: Optional[pulumi.Input['AwsIntegrationsElasticsearchArgs']] = None,
                 elb: Optional[pulumi.Input['AwsIntegrationsElbArgs']] = None,
                 emr: Optional[pulumi.Input['AwsIntegrationsEmrArgs']] = None,
                 health: Optional[pulumi.Input['AwsIntegrationsHealthArgs']] = None,
                 iam: Optional[pulumi.Input['AwsIntegrationsIamArgs']] = None,
                 iot: Optional[pulumi.Input['AwsIntegrationsIotArgs']] = None,
                 kinesis: Optional[pulumi.Input['AwsIntegrationsKinesisArgs']] = None,
                 kinesis_firehose: Optional[pulumi.Input['AwsIntegrationsKinesisFirehoseArgs']] = None,
                 lambda_: Optional[pulumi.Input['AwsIntegrationsLambdaArgs']] = None,
                 rds: Optional[pulumi.Input['AwsIntegrationsRdsArgs']] = None,
                 redshift: Optional[pulumi.Input['AwsIntegrationsRedshiftArgs']] = None,
                 route53: Optional[pulumi.Input['AwsIntegrationsRoute53Args']] = None,
                 s3: Optional[pulumi.Input['AwsIntegrationsS3Args']] = None,
                 ses: Optional[pulumi.Input['AwsIntegrationsSesArgs']] = None,
                 sns: Optional[pulumi.Input['AwsIntegrationsSnsArgs']] = None,
                 sqs: Optional[pulumi.Input['AwsIntegrationsSqsArgs']] = None,
                 trusted_advisor: Optional[pulumi.Input['AwsIntegrationsTrustedAdvisorArgs']] = None,
                 vpc: Optional[pulumi.Input['AwsIntegrationsVpcArgs']] = None,
                 x_ray: Optional[pulumi.Input['AwsIntegrationsXRayArgs']] = None):
        """
        The set of arguments for constructing a AwsIntegrations resource.
        :param pulumi.Input[str] linked_account_id: The ID of the linked AWS account in New Relic.
        :param pulumi.Input[str] account_id: The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        :param pulumi.Input['AwsIntegrationsAlbArgs'] alb: ALB integration
        :param pulumi.Input['AwsIntegrationsApiGatewayArgs'] api_gateway: API Gateway integration
        :param pulumi.Input['AwsIntegrationsAutoScalingArgs'] auto_scaling: AutoScaling integration
        :param pulumi.Input['AwsIntegrationsAwsAppSyncArgs'] aws_app_sync: Aws Appsync integration
        :param pulumi.Input['AwsIntegrationsAwsAthenaArgs'] aws_athena: Aws Athena integration
        :param pulumi.Input['AwsIntegrationsAwsCognitoArgs'] aws_cognito: Aws Cognito integration
        :param pulumi.Input['AwsIntegrationsAwsConnectArgs'] aws_connect: Aws Connect integration
        :param pulumi.Input['AwsIntegrationsAwsDirectConnectArgs'] aws_direct_connect: Aws Direct Connect integration
        :param pulumi.Input['AwsIntegrationsAwsFsxArgs'] aws_fsx: Aws Fsx integration
        :param pulumi.Input['AwsIntegrationsAwsGlueArgs'] aws_glue: Aws Glue integration
        :param pulumi.Input['AwsIntegrationsAwsKinesisAnalyticsArgs'] aws_kinesis_analytics: Aws Kinesis Analytics integration
        :param pulumi.Input['AwsIntegrationsAwsMediaConvertArgs'] aws_media_convert: Aws Media Convert integration
        :param pulumi.Input['AwsIntegrationsAwsMediaPackageVodArgs'] aws_media_package_vod: Aws Media PackageVod integration
        :param pulumi.Input['AwsIntegrationsAwsMqArgs'] aws_mq: Aws Mq integration
        :param pulumi.Input['AwsIntegrationsAwsMskArgs'] aws_msk: Aws Msk integration
        :param pulumi.Input['AwsIntegrationsAwsNeptuneArgs'] aws_neptune: Aws Neptune integration
        :param pulumi.Input['AwsIntegrationsAwsQldbArgs'] aws_qldb: Aws Qldb integration
        :param pulumi.Input['AwsIntegrationsAwsRoute53resolverArgs'] aws_route53resolver: Aws Route53resolver integration
        :param pulumi.Input['AwsIntegrationsAwsStatesArgs'] aws_states: Aws states integration
        :param pulumi.Input['AwsIntegrationsAwsTransitGatewayArgs'] aws_transit_gateway: Aws Transit Gateway integration
        :param pulumi.Input['AwsIntegrationsAwsWafArgs'] aws_waf: Aws Waf integration
        :param pulumi.Input['AwsIntegrationsAwsWafv2Args'] aws_wafv2: Aws Wafv2 integration
        :param pulumi.Input['AwsIntegrationsBillingArgs'] billing: Billing integration
        :param pulumi.Input['AwsIntegrationsCloudfrontArgs'] cloudfront: Cloudfront integration
        :param pulumi.Input['AwsIntegrationsCloudtrailArgs'] cloudtrail: CloudTrail integration
        :param pulumi.Input['AwsIntegrationsDocDbArgs'] doc_db: Doc DB integration
        :param pulumi.Input['AwsIntegrationsDynamodbArgs'] dynamodb: Dynamo DB integration
        :param pulumi.Input['AwsIntegrationsEbsArgs'] ebs: EBS integration
        :param pulumi.Input['AwsIntegrationsEc2Args'] ec2: Ec2 integration
        :param pulumi.Input['AwsIntegrationsEcsArgs'] ecs: Ecs integration
        :param pulumi.Input['AwsIntegrationsEfsArgs'] efs: Efs integration
        :param pulumi.Input['AwsIntegrationsElasticacheArgs'] elasticache: Elasticache integration
        :param pulumi.Input['AwsIntegrationsElasticbeanstalkArgs'] elasticbeanstalk: Elastic Bean Stalk integration
        :param pulumi.Input['AwsIntegrationsElasticsearchArgs'] elasticsearch: Elastic Search integration
        :param pulumi.Input['AwsIntegrationsElbArgs'] elb: Elb integration
        :param pulumi.Input['AwsIntegrationsEmrArgs'] emr: Emr integration
        :param pulumi.Input['AwsIntegrationsHealthArgs'] health: Health integration
        :param pulumi.Input['AwsIntegrationsIamArgs'] iam: Iam integration
        :param pulumi.Input['AwsIntegrationsIotArgs'] iot: Iot integration
        :param pulumi.Input['AwsIntegrationsKinesisArgs'] kinesis: Kinesis integration
        :param pulumi.Input['AwsIntegrationsKinesisFirehoseArgs'] kinesis_firehose: Kinesis Firehose integration
        :param pulumi.Input['AwsIntegrationsLambdaArgs'] lambda_: Lambda integration
        :param pulumi.Input['AwsIntegrationsRdsArgs'] rds: Rds integration
        :param pulumi.Input['AwsIntegrationsRedshiftArgs'] redshift: Redshift integration
        :param pulumi.Input['AwsIntegrationsRoute53Args'] route53: Route53 integration
        :param pulumi.Input['AwsIntegrationsS3Args'] s3: S3 integration
        :param pulumi.Input['AwsIntegrationsSesArgs'] ses: Ses integration
        :param pulumi.Input['AwsIntegrationsSnsArgs'] sns: Sns integration
        :param pulumi.Input['AwsIntegrationsSqsArgs'] sqs: SQS integration
        :param pulumi.Input['AwsIntegrationsTrustedAdvisorArgs'] trusted_advisor: Trusted Advisor integration
        :param pulumi.Input['AwsIntegrationsVpcArgs'] vpc: VPC integration
        :param pulumi.Input['AwsIntegrationsXRayArgs'] x_ray: X-Ray integration
        """
        pulumi.set(__self__, "linked_account_id", linked_account_id)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if alb is not None:
            pulumi.set(__self__, "alb", alb)
        if api_gateway is not None:
            pulumi.set(__self__, "api_gateway", api_gateway)
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if aws_app_sync is not None:
            pulumi.set(__self__, "aws_app_sync", aws_app_sync)
        if aws_athena is not None:
            pulumi.set(__self__, "aws_athena", aws_athena)
        if aws_cognito is not None:
            pulumi.set(__self__, "aws_cognito", aws_cognito)
        if aws_connect is not None:
            pulumi.set(__self__, "aws_connect", aws_connect)
        if aws_direct_connect is not None:
            pulumi.set(__self__, "aws_direct_connect", aws_direct_connect)
        if aws_fsx is not None:
            pulumi.set(__self__, "aws_fsx", aws_fsx)
        if aws_glue is not None:
            pulumi.set(__self__, "aws_glue", aws_glue)
        if aws_kinesis_analytics is not None:
            pulumi.set(__self__, "aws_kinesis_analytics", aws_kinesis_analytics)
        if aws_media_convert is not None:
            pulumi.set(__self__, "aws_media_convert", aws_media_convert)
        if aws_media_package_vod is not None:
            pulumi.set(__self__, "aws_media_package_vod", aws_media_package_vod)
        if aws_mq is not None:
            pulumi.set(__self__, "aws_mq", aws_mq)
        if aws_msk is not None:
            pulumi.set(__self__, "aws_msk", aws_msk)
        if aws_neptune is not None:
            pulumi.set(__self__, "aws_neptune", aws_neptune)
        if aws_qldb is not None:
            pulumi.set(__self__, "aws_qldb", aws_qldb)
        if aws_route53resolver is not None:
            pulumi.set(__self__, "aws_route53resolver", aws_route53resolver)
        if aws_states is not None:
            pulumi.set(__self__, "aws_states", aws_states)
        if aws_transit_gateway is not None:
            pulumi.set(__self__, "aws_transit_gateway", aws_transit_gateway)
        if aws_waf is not None:
            pulumi.set(__self__, "aws_waf", aws_waf)
        if aws_wafv2 is not None:
            pulumi.set(__self__, "aws_wafv2", aws_wafv2)
        if billing is not None:
            pulumi.set(__self__, "billing", billing)
        if cloudfront is not None:
            pulumi.set(__self__, "cloudfront", cloudfront)
        if cloudtrail is not None:
            pulumi.set(__self__, "cloudtrail", cloudtrail)
        if doc_db is not None:
            pulumi.set(__self__, "doc_db", doc_db)
        if dynamodb is not None:
            pulumi.set(__self__, "dynamodb", dynamodb)
        if ebs is not None:
            pulumi.set(__self__, "ebs", ebs)
        if ec2 is not None:
            pulumi.set(__self__, "ec2", ec2)
        if ecs is not None:
            pulumi.set(__self__, "ecs", ecs)
        if efs is not None:
            pulumi.set(__self__, "efs", efs)
        if elasticache is not None:
            pulumi.set(__self__, "elasticache", elasticache)
        if elasticbeanstalk is not None:
            pulumi.set(__self__, "elasticbeanstalk", elasticbeanstalk)
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if elb is not None:
            pulumi.set(__self__, "elb", elb)
        if emr is not None:
            pulumi.set(__self__, "emr", emr)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if iam is not None:
            pulumi.set(__self__, "iam", iam)
        if iot is not None:
            pulumi.set(__self__, "iot", iot)
        if kinesis is not None:
            pulumi.set(__self__, "kinesis", kinesis)
        if kinesis_firehose is not None:
            pulumi.set(__self__, "kinesis_firehose", kinesis_firehose)
        if lambda_ is not None:
            pulumi.set(__self__, "lambda_", lambda_)
        if rds is not None:
            pulumi.set(__self__, "rds", rds)
        if redshift is not None:
            pulumi.set(__self__, "redshift", redshift)
        if route53 is not None:
            pulumi.set(__self__, "route53", route53)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if ses is not None:
            pulumi.set(__self__, "ses", ses)
        if sns is not None:
            pulumi.set(__self__, "sns", sns)
        if sqs is not None:
            pulumi.set(__self__, "sqs", sqs)
        if trusted_advisor is not None:
            pulumi.set(__self__, "trusted_advisor", trusted_advisor)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)
        if x_ray is not None:
            pulumi.set(__self__, "x_ray", x_ray)

    @property
    @pulumi.getter(name="linkedAccountId")
    def linked_account_id(self) -> pulumi.Input[str]:
        """
        The ID of the linked AWS account in New Relic.
        """
        return pulumi.get(self, "linked_account_id")

    @linked_account_id.setter
    def linked_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "linked_account_id", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def alb(self) -> Optional[pulumi.Input['AwsIntegrationsAlbArgs']]:
        """
        ALB integration
        """
        return pulumi.get(self, "alb")

    @alb.setter
    def alb(self, value: Optional[pulumi.Input['AwsIntegrationsAlbArgs']]):
        pulumi.set(self, "alb", value)

    @property
    @pulumi.getter(name="apiGateway")
    def api_gateway(self) -> Optional[pulumi.Input['AwsIntegrationsApiGatewayArgs']]:
        """
        API Gateway integration
        """
        return pulumi.get(self, "api_gateway")

    @api_gateway.setter
    def api_gateway(self, value: Optional[pulumi.Input['AwsIntegrationsApiGatewayArgs']]):
        pulumi.set(self, "api_gateway", value)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['AwsIntegrationsAutoScalingArgs']]:
        """
        AutoScaling integration
        """
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['AwsIntegrationsAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter(name="awsAppSync")
    def aws_app_sync(self) -> Optional[pulumi.Input['AwsIntegrationsAwsAppSyncArgs']]:
        """
        Aws Appsync integration
        """
        return pulumi.get(self, "aws_app_sync")

    @aws_app_sync.setter
    def aws_app_sync(self, value: Optional[pulumi.Input['AwsIntegrationsAwsAppSyncArgs']]):
        pulumi.set(self, "aws_app_sync", value)

    @property
    @pulumi.getter(name="awsAthena")
    def aws_athena(self) -> Optional[pulumi.Input['AwsIntegrationsAwsAthenaArgs']]:
        """
        Aws Athena integration
        """
        return pulumi.get(self, "aws_athena")

    @aws_athena.setter
    def aws_athena(self, value: Optional[pulumi.Input['AwsIntegrationsAwsAthenaArgs']]):
        pulumi.set(self, "aws_athena", value)

    @property
    @pulumi.getter(name="awsCognito")
    def aws_cognito(self) -> Optional[pulumi.Input['AwsIntegrationsAwsCognitoArgs']]:
        """
        Aws Cognito integration
        """
        return pulumi.get(self, "aws_cognito")

    @aws_cognito.setter
    def aws_cognito(self, value: Optional[pulumi.Input['AwsIntegrationsAwsCognitoArgs']]):
        pulumi.set(self, "aws_cognito", value)

    @property
    @pulumi.getter(name="awsConnect")
    def aws_connect(self) -> Optional[pulumi.Input['AwsIntegrationsAwsConnectArgs']]:
        """
        Aws Connect integration
        """
        return pulumi.get(self, "aws_connect")

    @aws_connect.setter
    def aws_connect(self, value: Optional[pulumi.Input['AwsIntegrationsAwsConnectArgs']]):
        pulumi.set(self, "aws_connect", value)

    @property
    @pulumi.getter(name="awsDirectConnect")
    def aws_direct_connect(self) -> Optional[pulumi.Input['AwsIntegrationsAwsDirectConnectArgs']]:
        """
        Aws Direct Connect integration
        """
        return pulumi.get(self, "aws_direct_connect")

    @aws_direct_connect.setter
    def aws_direct_connect(self, value: Optional[pulumi.Input['AwsIntegrationsAwsDirectConnectArgs']]):
        pulumi.set(self, "aws_direct_connect", value)

    @property
    @pulumi.getter(name="awsFsx")
    def aws_fsx(self) -> Optional[pulumi.Input['AwsIntegrationsAwsFsxArgs']]:
        """
        Aws Fsx integration
        """
        return pulumi.get(self, "aws_fsx")

    @aws_fsx.setter
    def aws_fsx(self, value: Optional[pulumi.Input['AwsIntegrationsAwsFsxArgs']]):
        pulumi.set(self, "aws_fsx", value)

    @property
    @pulumi.getter(name="awsGlue")
    def aws_glue(self) -> Optional[pulumi.Input['AwsIntegrationsAwsGlueArgs']]:
        """
        Aws Glue integration
        """
        return pulumi.get(self, "aws_glue")

    @aws_glue.setter
    def aws_glue(self, value: Optional[pulumi.Input['AwsIntegrationsAwsGlueArgs']]):
        pulumi.set(self, "aws_glue", value)

    @property
    @pulumi.getter(name="awsKinesisAnalytics")
    def aws_kinesis_analytics(self) -> Optional[pulumi.Input['AwsIntegrationsAwsKinesisAnalyticsArgs']]:
        """
        Aws Kinesis Analytics integration
        """
        return pulumi.get(self, "aws_kinesis_analytics")

    @aws_kinesis_analytics.setter
    def aws_kinesis_analytics(self, value: Optional[pulumi.Input['AwsIntegrationsAwsKinesisAnalyticsArgs']]):
        pulumi.set(self, "aws_kinesis_analytics", value)

    @property
    @pulumi.getter(name="awsMediaConvert")
    def aws_media_convert(self) -> Optional[pulumi.Input['AwsIntegrationsAwsMediaConvertArgs']]:
        """
        Aws Media Convert integration
        """
        return pulumi.get(self, "aws_media_convert")

    @aws_media_convert.setter
    def aws_media_convert(self, value: Optional[pulumi.Input['AwsIntegrationsAwsMediaConvertArgs']]):
        pulumi.set(self, "aws_media_convert", value)

    @property
    @pulumi.getter(name="awsMediaPackageVod")
    def aws_media_package_vod(self) -> Optional[pulumi.Input['AwsIntegrationsAwsMediaPackageVodArgs']]:
        """
        Aws Media PackageVod integration
        """
        return pulumi.get(self, "aws_media_package_vod")

    @aws_media_package_vod.setter
    def aws_media_package_vod(self, value: Optional[pulumi.Input['AwsIntegrationsAwsMediaPackageVodArgs']]):
        pulumi.set(self, "aws_media_package_vod", value)

    @property
    @pulumi.getter(name="awsMq")
    def aws_mq(self) -> Optional[pulumi.Input['AwsIntegrationsAwsMqArgs']]:
        """
        Aws Mq integration
        """
        return pulumi.get(self, "aws_mq")

    @aws_mq.setter
    def aws_mq(self, value: Optional[pulumi.Input['AwsIntegrationsAwsMqArgs']]):
        pulumi.set(self, "aws_mq", value)

    @property
    @pulumi.getter(name="awsMsk")
    def aws_msk(self) -> Optional[pulumi.Input['AwsIntegrationsAwsMskArgs']]:
        """
        Aws Msk integration
        """
        return pulumi.get(self, "aws_msk")

    @aws_msk.setter
    def aws_msk(self, value: Optional[pulumi.Input['AwsIntegrationsAwsMskArgs']]):
        pulumi.set(self, "aws_msk", value)

    @property
    @pulumi.getter(name="awsNeptune")
    def aws_neptune(self) -> Optional[pulumi.Input['AwsIntegrationsAwsNeptuneArgs']]:
        """
        Aws Neptune integration
        """
        return pulumi.get(self, "aws_neptune")

    @aws_neptune.setter
    def aws_neptune(self, value: Optional[pulumi.Input['AwsIntegrationsAwsNeptuneArgs']]):
        pulumi.set(self, "aws_neptune", value)

    @property
    @pulumi.getter(name="awsQldb")
    def aws_qldb(self) -> Optional[pulumi.Input['AwsIntegrationsAwsQldbArgs']]:
        """
        Aws Qldb integration
        """
        return pulumi.get(self, "aws_qldb")

    @aws_qldb.setter
    def aws_qldb(self, value: Optional[pulumi.Input['AwsIntegrationsAwsQldbArgs']]):
        pulumi.set(self, "aws_qldb", value)

    @property
    @pulumi.getter(name="awsRoute53resolver")
    def aws_route53resolver(self) -> Optional[pulumi.Input['AwsIntegrationsAwsRoute53resolverArgs']]:
        """
        Aws Route53resolver integration
        """
        return pulumi.get(self, "aws_route53resolver")

    @aws_route53resolver.setter
    def aws_route53resolver(self, value: Optional[pulumi.Input['AwsIntegrationsAwsRoute53resolverArgs']]):
        pulumi.set(self, "aws_route53resolver", value)

    @property
    @pulumi.getter(name="awsStates")
    def aws_states(self) -> Optional[pulumi.Input['AwsIntegrationsAwsStatesArgs']]:
        """
        Aws states integration
        """
        return pulumi.get(self, "aws_states")

    @aws_states.setter
    def aws_states(self, value: Optional[pulumi.Input['AwsIntegrationsAwsStatesArgs']]):
        pulumi.set(self, "aws_states", value)

    @property
    @pulumi.getter(name="awsTransitGateway")
    def aws_transit_gateway(self) -> Optional[pulumi.Input['AwsIntegrationsAwsTransitGatewayArgs']]:
        """
        Aws Transit Gateway integration
        """
        return pulumi.get(self, "aws_transit_gateway")

    @aws_transit_gateway.setter
    def aws_transit_gateway(self, value: Optional[pulumi.Input['AwsIntegrationsAwsTransitGatewayArgs']]):
        pulumi.set(self, "aws_transit_gateway", value)

    @property
    @pulumi.getter(name="awsWaf")
    def aws_waf(self) -> Optional[pulumi.Input['AwsIntegrationsAwsWafArgs']]:
        """
        Aws Waf integration
        """
        return pulumi.get(self, "aws_waf")

    @aws_waf.setter
    def aws_waf(self, value: Optional[pulumi.Input['AwsIntegrationsAwsWafArgs']]):
        pulumi.set(self, "aws_waf", value)

    @property
    @pulumi.getter(name="awsWafv2")
    def aws_wafv2(self) -> Optional[pulumi.Input['AwsIntegrationsAwsWafv2Args']]:
        """
        Aws Wafv2 integration
        """
        return pulumi.get(self, "aws_wafv2")

    @aws_wafv2.setter
    def aws_wafv2(self, value: Optional[pulumi.Input['AwsIntegrationsAwsWafv2Args']]):
        pulumi.set(self, "aws_wafv2", value)

    @property
    @pulumi.getter
    def billing(self) -> Optional[pulumi.Input['AwsIntegrationsBillingArgs']]:
        """
        Billing integration
        """
        return pulumi.get(self, "billing")

    @billing.setter
    def billing(self, value: Optional[pulumi.Input['AwsIntegrationsBillingArgs']]):
        pulumi.set(self, "billing", value)

    @property
    @pulumi.getter
    def cloudfront(self) -> Optional[pulumi.Input['AwsIntegrationsCloudfrontArgs']]:
        """
        Cloudfront integration
        """
        return pulumi.get(self, "cloudfront")

    @cloudfront.setter
    def cloudfront(self, value: Optional[pulumi.Input['AwsIntegrationsCloudfrontArgs']]):
        pulumi.set(self, "cloudfront", value)

    @property
    @pulumi.getter
    def cloudtrail(self) -> Optional[pulumi.Input['AwsIntegrationsCloudtrailArgs']]:
        """
        CloudTrail integration
        """
        return pulumi.get(self, "cloudtrail")

    @cloudtrail.setter
    def cloudtrail(self, value: Optional[pulumi.Input['AwsIntegrationsCloudtrailArgs']]):
        pulumi.set(self, "cloudtrail", value)

    @property
    @pulumi.getter(name="docDb")
    def doc_db(self) -> Optional[pulumi.Input['AwsIntegrationsDocDbArgs']]:
        """
        Doc DB integration
        """
        return pulumi.get(self, "doc_db")

    @doc_db.setter
    def doc_db(self, value: Optional[pulumi.Input['AwsIntegrationsDocDbArgs']]):
        pulumi.set(self, "doc_db", value)

    @property
    @pulumi.getter
    def dynamodb(self) -> Optional[pulumi.Input['AwsIntegrationsDynamodbArgs']]:
        """
        Dynamo DB integration
        """
        return pulumi.get(self, "dynamodb")

    @dynamodb.setter
    def dynamodb(self, value: Optional[pulumi.Input['AwsIntegrationsDynamodbArgs']]):
        pulumi.set(self, "dynamodb", value)

    @property
    @pulumi.getter
    def ebs(self) -> Optional[pulumi.Input['AwsIntegrationsEbsArgs']]:
        """
        EBS integration
        """
        return pulumi.get(self, "ebs")

    @ebs.setter
    def ebs(self, value: Optional[pulumi.Input['AwsIntegrationsEbsArgs']]):
        pulumi.set(self, "ebs", value)

    @property
    @pulumi.getter
    def ec2(self) -> Optional[pulumi.Input['AwsIntegrationsEc2Args']]:
        """
        Ec2 integration
        """
        return pulumi.get(self, "ec2")

    @ec2.setter
    def ec2(self, value: Optional[pulumi.Input['AwsIntegrationsEc2Args']]):
        pulumi.set(self, "ec2", value)

    @property
    @pulumi.getter
    def ecs(self) -> Optional[pulumi.Input['AwsIntegrationsEcsArgs']]:
        """
        Ecs integration
        """
        return pulumi.get(self, "ecs")

    @ecs.setter
    def ecs(self, value: Optional[pulumi.Input['AwsIntegrationsEcsArgs']]):
        pulumi.set(self, "ecs", value)

    @property
    @pulumi.getter
    def efs(self) -> Optional[pulumi.Input['AwsIntegrationsEfsArgs']]:
        """
        Efs integration
        """
        return pulumi.get(self, "efs")

    @efs.setter
    def efs(self, value: Optional[pulumi.Input['AwsIntegrationsEfsArgs']]):
        pulumi.set(self, "efs", value)

    @property
    @pulumi.getter
    def elasticache(self) -> Optional[pulumi.Input['AwsIntegrationsElasticacheArgs']]:
        """
        Elasticache integration
        """
        return pulumi.get(self, "elasticache")

    @elasticache.setter
    def elasticache(self, value: Optional[pulumi.Input['AwsIntegrationsElasticacheArgs']]):
        pulumi.set(self, "elasticache", value)

    @property
    @pulumi.getter
    def elasticbeanstalk(self) -> Optional[pulumi.Input['AwsIntegrationsElasticbeanstalkArgs']]:
        """
        Elastic Bean Stalk integration
        """
        return pulumi.get(self, "elasticbeanstalk")

    @elasticbeanstalk.setter
    def elasticbeanstalk(self, value: Optional[pulumi.Input['AwsIntegrationsElasticbeanstalkArgs']]):
        pulumi.set(self, "elasticbeanstalk", value)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input['AwsIntegrationsElasticsearchArgs']]:
        """
        Elastic Search integration
        """
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input['AwsIntegrationsElasticsearchArgs']]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def elb(self) -> Optional[pulumi.Input['AwsIntegrationsElbArgs']]:
        """
        Elb integration
        """
        return pulumi.get(self, "elb")

    @elb.setter
    def elb(self, value: Optional[pulumi.Input['AwsIntegrationsElbArgs']]):
        pulumi.set(self, "elb", value)

    @property
    @pulumi.getter
    def emr(self) -> Optional[pulumi.Input['AwsIntegrationsEmrArgs']]:
        """
        Emr integration
        """
        return pulumi.get(self, "emr")

    @emr.setter
    def emr(self, value: Optional[pulumi.Input['AwsIntegrationsEmrArgs']]):
        pulumi.set(self, "emr", value)

    @property
    @pulumi.getter
    def health(self) -> Optional[pulumi.Input['AwsIntegrationsHealthArgs']]:
        """
        Health integration
        """
        return pulumi.get(self, "health")

    @health.setter
    def health(self, value: Optional[pulumi.Input['AwsIntegrationsHealthArgs']]):
        pulumi.set(self, "health", value)

    @property
    @pulumi.getter
    def iam(self) -> Optional[pulumi.Input['AwsIntegrationsIamArgs']]:
        """
        Iam integration
        """
        return pulumi.get(self, "iam")

    @iam.setter
    def iam(self, value: Optional[pulumi.Input['AwsIntegrationsIamArgs']]):
        pulumi.set(self, "iam", value)

    @property
    @pulumi.getter
    def iot(self) -> Optional[pulumi.Input['AwsIntegrationsIotArgs']]:
        """
        Iot integration
        """
        return pulumi.get(self, "iot")

    @iot.setter
    def iot(self, value: Optional[pulumi.Input['AwsIntegrationsIotArgs']]):
        pulumi.set(self, "iot", value)

    @property
    @pulumi.getter
    def kinesis(self) -> Optional[pulumi.Input['AwsIntegrationsKinesisArgs']]:
        """
        Kinesis integration
        """
        return pulumi.get(self, "kinesis")

    @kinesis.setter
    def kinesis(self, value: Optional[pulumi.Input['AwsIntegrationsKinesisArgs']]):
        pulumi.set(self, "kinesis", value)

    @property
    @pulumi.getter(name="kinesisFirehose")
    def kinesis_firehose(self) -> Optional[pulumi.Input['AwsIntegrationsKinesisFirehoseArgs']]:
        """
        Kinesis Firehose integration
        """
        return pulumi.get(self, "kinesis_firehose")

    @kinesis_firehose.setter
    def kinesis_firehose(self, value: Optional[pulumi.Input['AwsIntegrationsKinesisFirehoseArgs']]):
        pulumi.set(self, "kinesis_firehose", value)

    @property
    @pulumi.getter(name="lambda")
    def lambda_(self) -> Optional[pulumi.Input['AwsIntegrationsLambdaArgs']]:
        """
        Lambda integration
        """
        return pulumi.get(self, "lambda_")

    @lambda_.setter
    def lambda_(self, value: Optional[pulumi.Input['AwsIntegrationsLambdaArgs']]):
        pulumi.set(self, "lambda_", value)

    @property
    @pulumi.getter
    def rds(self) -> Optional[pulumi.Input['AwsIntegrationsRdsArgs']]:
        """
        Rds integration
        """
        return pulumi.get(self, "rds")

    @rds.setter
    def rds(self, value: Optional[pulumi.Input['AwsIntegrationsRdsArgs']]):
        pulumi.set(self, "rds", value)

    @property
    @pulumi.getter
    def redshift(self) -> Optional[pulumi.Input['AwsIntegrationsRedshiftArgs']]:
        """
        Redshift integration
        """
        return pulumi.get(self, "redshift")

    @redshift.setter
    def redshift(self, value: Optional[pulumi.Input['AwsIntegrationsRedshiftArgs']]):
        pulumi.set(self, "redshift", value)

    @property
    @pulumi.getter
    def route53(self) -> Optional[pulumi.Input['AwsIntegrationsRoute53Args']]:
        """
        Route53 integration
        """
        return pulumi.get(self, "route53")

    @route53.setter
    def route53(self, value: Optional[pulumi.Input['AwsIntegrationsRoute53Args']]):
        pulumi.set(self, "route53", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['AwsIntegrationsS3Args']]:
        """
        S3 integration
        """
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['AwsIntegrationsS3Args']]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter
    def ses(self) -> Optional[pulumi.Input['AwsIntegrationsSesArgs']]:
        """
        Ses integration
        """
        return pulumi.get(self, "ses")

    @ses.setter
    def ses(self, value: Optional[pulumi.Input['AwsIntegrationsSesArgs']]):
        pulumi.set(self, "ses", value)

    @property
    @pulumi.getter
    def sns(self) -> Optional[pulumi.Input['AwsIntegrationsSnsArgs']]:
        """
        Sns integration
        """
        return pulumi.get(self, "sns")

    @sns.setter
    def sns(self, value: Optional[pulumi.Input['AwsIntegrationsSnsArgs']]):
        pulumi.set(self, "sns", value)

    @property
    @pulumi.getter
    def sqs(self) -> Optional[pulumi.Input['AwsIntegrationsSqsArgs']]:
        """
        SQS integration
        """
        return pulumi.get(self, "sqs")

    @sqs.setter
    def sqs(self, value: Optional[pulumi.Input['AwsIntegrationsSqsArgs']]):
        pulumi.set(self, "sqs", value)

    @property
    @pulumi.getter(name="trustedAdvisor")
    def trusted_advisor(self) -> Optional[pulumi.Input['AwsIntegrationsTrustedAdvisorArgs']]:
        """
        Trusted Advisor integration
        """
        return pulumi.get(self, "trusted_advisor")

    @trusted_advisor.setter
    def trusted_advisor(self, value: Optional[pulumi.Input['AwsIntegrationsTrustedAdvisorArgs']]):
        pulumi.set(self, "trusted_advisor", value)

    @property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input['AwsIntegrationsVpcArgs']]:
        """
        VPC integration
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input['AwsIntegrationsVpcArgs']]):
        pulumi.set(self, "vpc", value)

    @property
    @pulumi.getter(name="xRay")
    def x_ray(self) -> Optional[pulumi.Input['AwsIntegrationsXRayArgs']]:
        """
        X-Ray integration
        """
        return pulumi.get(self, "x_ray")

    @x_ray.setter
    def x_ray(self, value: Optional[pulumi.Input['AwsIntegrationsXRayArgs']]):
        pulumi.set(self, "x_ray", value)


@pulumi.input_type
class _AwsIntegrationsState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 alb: Optional[pulumi.Input['AwsIntegrationsAlbArgs']] = None,
                 api_gateway: Optional[pulumi.Input['AwsIntegrationsApiGatewayArgs']] = None,
                 auto_scaling: Optional[pulumi.Input['AwsIntegrationsAutoScalingArgs']] = None,
                 aws_app_sync: Optional[pulumi.Input['AwsIntegrationsAwsAppSyncArgs']] = None,
                 aws_athena: Optional[pulumi.Input['AwsIntegrationsAwsAthenaArgs']] = None,
                 aws_cognito: Optional[pulumi.Input['AwsIntegrationsAwsCognitoArgs']] = None,
                 aws_connect: Optional[pulumi.Input['AwsIntegrationsAwsConnectArgs']] = None,
                 aws_direct_connect: Optional[pulumi.Input['AwsIntegrationsAwsDirectConnectArgs']] = None,
                 aws_fsx: Optional[pulumi.Input['AwsIntegrationsAwsFsxArgs']] = None,
                 aws_glue: Optional[pulumi.Input['AwsIntegrationsAwsGlueArgs']] = None,
                 aws_kinesis_analytics: Optional[pulumi.Input['AwsIntegrationsAwsKinesisAnalyticsArgs']] = None,
                 aws_media_convert: Optional[pulumi.Input['AwsIntegrationsAwsMediaConvertArgs']] = None,
                 aws_media_package_vod: Optional[pulumi.Input['AwsIntegrationsAwsMediaPackageVodArgs']] = None,
                 aws_mq: Optional[pulumi.Input['AwsIntegrationsAwsMqArgs']] = None,
                 aws_msk: Optional[pulumi.Input['AwsIntegrationsAwsMskArgs']] = None,
                 aws_neptune: Optional[pulumi.Input['AwsIntegrationsAwsNeptuneArgs']] = None,
                 aws_qldb: Optional[pulumi.Input['AwsIntegrationsAwsQldbArgs']] = None,
                 aws_route53resolver: Optional[pulumi.Input['AwsIntegrationsAwsRoute53resolverArgs']] = None,
                 aws_states: Optional[pulumi.Input['AwsIntegrationsAwsStatesArgs']] = None,
                 aws_transit_gateway: Optional[pulumi.Input['AwsIntegrationsAwsTransitGatewayArgs']] = None,
                 aws_waf: Optional[pulumi.Input['AwsIntegrationsAwsWafArgs']] = None,
                 aws_wafv2: Optional[pulumi.Input['AwsIntegrationsAwsWafv2Args']] = None,
                 billing: Optional[pulumi.Input['AwsIntegrationsBillingArgs']] = None,
                 cloudfront: Optional[pulumi.Input['AwsIntegrationsCloudfrontArgs']] = None,
                 cloudtrail: Optional[pulumi.Input['AwsIntegrationsCloudtrailArgs']] = None,
                 doc_db: Optional[pulumi.Input['AwsIntegrationsDocDbArgs']] = None,
                 dynamodb: Optional[pulumi.Input['AwsIntegrationsDynamodbArgs']] = None,
                 ebs: Optional[pulumi.Input['AwsIntegrationsEbsArgs']] = None,
                 ec2: Optional[pulumi.Input['AwsIntegrationsEc2Args']] = None,
                 ecs: Optional[pulumi.Input['AwsIntegrationsEcsArgs']] = None,
                 efs: Optional[pulumi.Input['AwsIntegrationsEfsArgs']] = None,
                 elasticache: Optional[pulumi.Input['AwsIntegrationsElasticacheArgs']] = None,
                 elasticbeanstalk: Optional[pulumi.Input['AwsIntegrationsElasticbeanstalkArgs']] = None,
                 elasticsearch: Optional[pulumi.Input['AwsIntegrationsElasticsearchArgs']] = None,
                 elb: Optional[pulumi.Input['AwsIntegrationsElbArgs']] = None,
                 emr: Optional[pulumi.Input['AwsIntegrationsEmrArgs']] = None,
                 health: Optional[pulumi.Input['AwsIntegrationsHealthArgs']] = None,
                 iam: Optional[pulumi.Input['AwsIntegrationsIamArgs']] = None,
                 iot: Optional[pulumi.Input['AwsIntegrationsIotArgs']] = None,
                 kinesis: Optional[pulumi.Input['AwsIntegrationsKinesisArgs']] = None,
                 kinesis_firehose: Optional[pulumi.Input['AwsIntegrationsKinesisFirehoseArgs']] = None,
                 lambda_: Optional[pulumi.Input['AwsIntegrationsLambdaArgs']] = None,
                 linked_account_id: Optional[pulumi.Input[str]] = None,
                 rds: Optional[pulumi.Input['AwsIntegrationsRdsArgs']] = None,
                 redshift: Optional[pulumi.Input['AwsIntegrationsRedshiftArgs']] = None,
                 route53: Optional[pulumi.Input['AwsIntegrationsRoute53Args']] = None,
                 s3: Optional[pulumi.Input['AwsIntegrationsS3Args']] = None,
                 ses: Optional[pulumi.Input['AwsIntegrationsSesArgs']] = None,
                 sns: Optional[pulumi.Input['AwsIntegrationsSnsArgs']] = None,
                 sqs: Optional[pulumi.Input['AwsIntegrationsSqsArgs']] = None,
                 trusted_advisor: Optional[pulumi.Input['AwsIntegrationsTrustedAdvisorArgs']] = None,
                 vpc: Optional[pulumi.Input['AwsIntegrationsVpcArgs']] = None,
                 x_ray: Optional[pulumi.Input['AwsIntegrationsXRayArgs']] = None):
        """
        Input properties used for looking up and filtering AwsIntegrations resources.
        :param pulumi.Input[str] account_id: The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        :param pulumi.Input['AwsIntegrationsAlbArgs'] alb: ALB integration
        :param pulumi.Input['AwsIntegrationsApiGatewayArgs'] api_gateway: API Gateway integration
        :param pulumi.Input['AwsIntegrationsAutoScalingArgs'] auto_scaling: AutoScaling integration
        :param pulumi.Input['AwsIntegrationsAwsAppSyncArgs'] aws_app_sync: Aws Appsync integration
        :param pulumi.Input['AwsIntegrationsAwsAthenaArgs'] aws_athena: Aws Athena integration
        :param pulumi.Input['AwsIntegrationsAwsCognitoArgs'] aws_cognito: Aws Cognito integration
        :param pulumi.Input['AwsIntegrationsAwsConnectArgs'] aws_connect: Aws Connect integration
        :param pulumi.Input['AwsIntegrationsAwsDirectConnectArgs'] aws_direct_connect: Aws Direct Connect integration
        :param pulumi.Input['AwsIntegrationsAwsFsxArgs'] aws_fsx: Aws Fsx integration
        :param pulumi.Input['AwsIntegrationsAwsGlueArgs'] aws_glue: Aws Glue integration
        :param pulumi.Input['AwsIntegrationsAwsKinesisAnalyticsArgs'] aws_kinesis_analytics: Aws Kinesis Analytics integration
        :param pulumi.Input['AwsIntegrationsAwsMediaConvertArgs'] aws_media_convert: Aws Media Convert integration
        :param pulumi.Input['AwsIntegrationsAwsMediaPackageVodArgs'] aws_media_package_vod: Aws Media PackageVod integration
        :param pulumi.Input['AwsIntegrationsAwsMqArgs'] aws_mq: Aws Mq integration
        :param pulumi.Input['AwsIntegrationsAwsMskArgs'] aws_msk: Aws Msk integration
        :param pulumi.Input['AwsIntegrationsAwsNeptuneArgs'] aws_neptune: Aws Neptune integration
        :param pulumi.Input['AwsIntegrationsAwsQldbArgs'] aws_qldb: Aws Qldb integration
        :param pulumi.Input['AwsIntegrationsAwsRoute53resolverArgs'] aws_route53resolver: Aws Route53resolver integration
        :param pulumi.Input['AwsIntegrationsAwsStatesArgs'] aws_states: Aws states integration
        :param pulumi.Input['AwsIntegrationsAwsTransitGatewayArgs'] aws_transit_gateway: Aws Transit Gateway integration
        :param pulumi.Input['AwsIntegrationsAwsWafArgs'] aws_waf: Aws Waf integration
        :param pulumi.Input['AwsIntegrationsAwsWafv2Args'] aws_wafv2: Aws Wafv2 integration
        :param pulumi.Input['AwsIntegrationsBillingArgs'] billing: Billing integration
        :param pulumi.Input['AwsIntegrationsCloudfrontArgs'] cloudfront: Cloudfront integration
        :param pulumi.Input['AwsIntegrationsCloudtrailArgs'] cloudtrail: CloudTrail integration
        :param pulumi.Input['AwsIntegrationsDocDbArgs'] doc_db: Doc DB integration
        :param pulumi.Input['AwsIntegrationsDynamodbArgs'] dynamodb: Dynamo DB integration
        :param pulumi.Input['AwsIntegrationsEbsArgs'] ebs: EBS integration
        :param pulumi.Input['AwsIntegrationsEc2Args'] ec2: Ec2 integration
        :param pulumi.Input['AwsIntegrationsEcsArgs'] ecs: Ecs integration
        :param pulumi.Input['AwsIntegrationsEfsArgs'] efs: Efs integration
        :param pulumi.Input['AwsIntegrationsElasticacheArgs'] elasticache: Elasticache integration
        :param pulumi.Input['AwsIntegrationsElasticbeanstalkArgs'] elasticbeanstalk: Elastic Bean Stalk integration
        :param pulumi.Input['AwsIntegrationsElasticsearchArgs'] elasticsearch: Elastic Search integration
        :param pulumi.Input['AwsIntegrationsElbArgs'] elb: Elb integration
        :param pulumi.Input['AwsIntegrationsEmrArgs'] emr: Emr integration
        :param pulumi.Input['AwsIntegrationsHealthArgs'] health: Health integration
        :param pulumi.Input['AwsIntegrationsIamArgs'] iam: Iam integration
        :param pulumi.Input['AwsIntegrationsIotArgs'] iot: Iot integration
        :param pulumi.Input['AwsIntegrationsKinesisArgs'] kinesis: Kinesis integration
        :param pulumi.Input['AwsIntegrationsKinesisFirehoseArgs'] kinesis_firehose: Kinesis Firehose integration
        :param pulumi.Input['AwsIntegrationsLambdaArgs'] lambda_: Lambda integration
        :param pulumi.Input[str] linked_account_id: The ID of the linked AWS account in New Relic.
        :param pulumi.Input['AwsIntegrationsRdsArgs'] rds: Rds integration
        :param pulumi.Input['AwsIntegrationsRedshiftArgs'] redshift: Redshift integration
        :param pulumi.Input['AwsIntegrationsRoute53Args'] route53: Route53 integration
        :param pulumi.Input['AwsIntegrationsS3Args'] s3: S3 integration
        :param pulumi.Input['AwsIntegrationsSesArgs'] ses: Ses integration
        :param pulumi.Input['AwsIntegrationsSnsArgs'] sns: Sns integration
        :param pulumi.Input['AwsIntegrationsSqsArgs'] sqs: SQS integration
        :param pulumi.Input['AwsIntegrationsTrustedAdvisorArgs'] trusted_advisor: Trusted Advisor integration
        :param pulumi.Input['AwsIntegrationsVpcArgs'] vpc: VPC integration
        :param pulumi.Input['AwsIntegrationsXRayArgs'] x_ray: X-Ray integration
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if alb is not None:
            pulumi.set(__self__, "alb", alb)
        if api_gateway is not None:
            pulumi.set(__self__, "api_gateway", api_gateway)
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if aws_app_sync is not None:
            pulumi.set(__self__, "aws_app_sync", aws_app_sync)
        if aws_athena is not None:
            pulumi.set(__self__, "aws_athena", aws_athena)
        if aws_cognito is not None:
            pulumi.set(__self__, "aws_cognito", aws_cognito)
        if aws_connect is not None:
            pulumi.set(__self__, "aws_connect", aws_connect)
        if aws_direct_connect is not None:
            pulumi.set(__self__, "aws_direct_connect", aws_direct_connect)
        if aws_fsx is not None:
            pulumi.set(__self__, "aws_fsx", aws_fsx)
        if aws_glue is not None:
            pulumi.set(__self__, "aws_glue", aws_glue)
        if aws_kinesis_analytics is not None:
            pulumi.set(__self__, "aws_kinesis_analytics", aws_kinesis_analytics)
        if aws_media_convert is not None:
            pulumi.set(__self__, "aws_media_convert", aws_media_convert)
        if aws_media_package_vod is not None:
            pulumi.set(__self__, "aws_media_package_vod", aws_media_package_vod)
        if aws_mq is not None:
            pulumi.set(__self__, "aws_mq", aws_mq)
        if aws_msk is not None:
            pulumi.set(__self__, "aws_msk", aws_msk)
        if aws_neptune is not None:
            pulumi.set(__self__, "aws_neptune", aws_neptune)
        if aws_qldb is not None:
            pulumi.set(__self__, "aws_qldb", aws_qldb)
        if aws_route53resolver is not None:
            pulumi.set(__self__, "aws_route53resolver", aws_route53resolver)
        if aws_states is not None:
            pulumi.set(__self__, "aws_states", aws_states)
        if aws_transit_gateway is not None:
            pulumi.set(__self__, "aws_transit_gateway", aws_transit_gateway)
        if aws_waf is not None:
            pulumi.set(__self__, "aws_waf", aws_waf)
        if aws_wafv2 is not None:
            pulumi.set(__self__, "aws_wafv2", aws_wafv2)
        if billing is not None:
            pulumi.set(__self__, "billing", billing)
        if cloudfront is not None:
            pulumi.set(__self__, "cloudfront", cloudfront)
        if cloudtrail is not None:
            pulumi.set(__self__, "cloudtrail", cloudtrail)
        if doc_db is not None:
            pulumi.set(__self__, "doc_db", doc_db)
        if dynamodb is not None:
            pulumi.set(__self__, "dynamodb", dynamodb)
        if ebs is not None:
            pulumi.set(__self__, "ebs", ebs)
        if ec2 is not None:
            pulumi.set(__self__, "ec2", ec2)
        if ecs is not None:
            pulumi.set(__self__, "ecs", ecs)
        if efs is not None:
            pulumi.set(__self__, "efs", efs)
        if elasticache is not None:
            pulumi.set(__self__, "elasticache", elasticache)
        if elasticbeanstalk is not None:
            pulumi.set(__self__, "elasticbeanstalk", elasticbeanstalk)
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if elb is not None:
            pulumi.set(__self__, "elb", elb)
        if emr is not None:
            pulumi.set(__self__, "emr", emr)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if iam is not None:
            pulumi.set(__self__, "iam", iam)
        if iot is not None:
            pulumi.set(__self__, "iot", iot)
        if kinesis is not None:
            pulumi.set(__self__, "kinesis", kinesis)
        if kinesis_firehose is not None:
            pulumi.set(__self__, "kinesis_firehose", kinesis_firehose)
        if lambda_ is not None:
            pulumi.set(__self__, "lambda_", lambda_)
        if linked_account_id is not None:
            pulumi.set(__self__, "linked_account_id", linked_account_id)
        if rds is not None:
            pulumi.set(__self__, "rds", rds)
        if redshift is not None:
            pulumi.set(__self__, "redshift", redshift)
        if route53 is not None:
            pulumi.set(__self__, "route53", route53)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if ses is not None:
            pulumi.set(__self__, "ses", ses)
        if sns is not None:
            pulumi.set(__self__, "sns", sns)
        if sqs is not None:
            pulumi.set(__self__, "sqs", sqs)
        if trusted_advisor is not None:
            pulumi.set(__self__, "trusted_advisor", trusted_advisor)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)
        if x_ray is not None:
            pulumi.set(__self__, "x_ray", x_ray)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def alb(self) -> Optional[pulumi.Input['AwsIntegrationsAlbArgs']]:
        """
        ALB integration
        """
        return pulumi.get(self, "alb")

    @alb.setter
    def alb(self, value: Optional[pulumi.Input['AwsIntegrationsAlbArgs']]):
        pulumi.set(self, "alb", value)

    @property
    @pulumi.getter(name="apiGateway")
    def api_gateway(self) -> Optional[pulumi.Input['AwsIntegrationsApiGatewayArgs']]:
        """
        API Gateway integration
        """
        return pulumi.get(self, "api_gateway")

    @api_gateway.setter
    def api_gateway(self, value: Optional[pulumi.Input['AwsIntegrationsApiGatewayArgs']]):
        pulumi.set(self, "api_gateway", value)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['AwsIntegrationsAutoScalingArgs']]:
        """
        AutoScaling integration
        """
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['AwsIntegrationsAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter(name="awsAppSync")
    def aws_app_sync(self) -> Optional[pulumi.Input['AwsIntegrationsAwsAppSyncArgs']]:
        """
        Aws Appsync integration
        """
        return pulumi.get(self, "aws_app_sync")

    @aws_app_sync.setter
    def aws_app_sync(self, value: Optional[pulumi.Input['AwsIntegrationsAwsAppSyncArgs']]):
        pulumi.set(self, "aws_app_sync", value)

    @property
    @pulumi.getter(name="awsAthena")
    def aws_athena(self) -> Optional[pulumi.Input['AwsIntegrationsAwsAthenaArgs']]:
        """
        Aws Athena integration
        """
        return pulumi.get(self, "aws_athena")

    @aws_athena.setter
    def aws_athena(self, value: Optional[pulumi.Input['AwsIntegrationsAwsAthenaArgs']]):
        pulumi.set(self, "aws_athena", value)

    @property
    @pulumi.getter(name="awsCognito")
    def aws_cognito(self) -> Optional[pulumi.Input['AwsIntegrationsAwsCognitoArgs']]:
        """
        Aws Cognito integration
        """
        return pulumi.get(self, "aws_cognito")

    @aws_cognito.setter
    def aws_cognito(self, value: Optional[pulumi.Input['AwsIntegrationsAwsCognitoArgs']]):
        pulumi.set(self, "aws_cognito", value)

    @property
    @pulumi.getter(name="awsConnect")
    def aws_connect(self) -> Optional[pulumi.Input['AwsIntegrationsAwsConnectArgs']]:
        """
        Aws Connect integration
        """
        return pulumi.get(self, "aws_connect")

    @aws_connect.setter
    def aws_connect(self, value: Optional[pulumi.Input['AwsIntegrationsAwsConnectArgs']]):
        pulumi.set(self, "aws_connect", value)

    @property
    @pulumi.getter(name="awsDirectConnect")
    def aws_direct_connect(self) -> Optional[pulumi.Input['AwsIntegrationsAwsDirectConnectArgs']]:
        """
        Aws Direct Connect integration
        """
        return pulumi.get(self, "aws_direct_connect")

    @aws_direct_connect.setter
    def aws_direct_connect(self, value: Optional[pulumi.Input['AwsIntegrationsAwsDirectConnectArgs']]):
        pulumi.set(self, "aws_direct_connect", value)

    @property
    @pulumi.getter(name="awsFsx")
    def aws_fsx(self) -> Optional[pulumi.Input['AwsIntegrationsAwsFsxArgs']]:
        """
        Aws Fsx integration
        """
        return pulumi.get(self, "aws_fsx")

    @aws_fsx.setter
    def aws_fsx(self, value: Optional[pulumi.Input['AwsIntegrationsAwsFsxArgs']]):
        pulumi.set(self, "aws_fsx", value)

    @property
    @pulumi.getter(name="awsGlue")
    def aws_glue(self) -> Optional[pulumi.Input['AwsIntegrationsAwsGlueArgs']]:
        """
        Aws Glue integration
        """
        return pulumi.get(self, "aws_glue")

    @aws_glue.setter
    def aws_glue(self, value: Optional[pulumi.Input['AwsIntegrationsAwsGlueArgs']]):
        pulumi.set(self, "aws_glue", value)

    @property
    @pulumi.getter(name="awsKinesisAnalytics")
    def aws_kinesis_analytics(self) -> Optional[pulumi.Input['AwsIntegrationsAwsKinesisAnalyticsArgs']]:
        """
        Aws Kinesis Analytics integration
        """
        return pulumi.get(self, "aws_kinesis_analytics")

    @aws_kinesis_analytics.setter
    def aws_kinesis_analytics(self, value: Optional[pulumi.Input['AwsIntegrationsAwsKinesisAnalyticsArgs']]):
        pulumi.set(self, "aws_kinesis_analytics", value)

    @property
    @pulumi.getter(name="awsMediaConvert")
    def aws_media_convert(self) -> Optional[pulumi.Input['AwsIntegrationsAwsMediaConvertArgs']]:
        """
        Aws Media Convert integration
        """
        return pulumi.get(self, "aws_media_convert")

    @aws_media_convert.setter
    def aws_media_convert(self, value: Optional[pulumi.Input['AwsIntegrationsAwsMediaConvertArgs']]):
        pulumi.set(self, "aws_media_convert", value)

    @property
    @pulumi.getter(name="awsMediaPackageVod")
    def aws_media_package_vod(self) -> Optional[pulumi.Input['AwsIntegrationsAwsMediaPackageVodArgs']]:
        """
        Aws Media PackageVod integration
        """
        return pulumi.get(self, "aws_media_package_vod")

    @aws_media_package_vod.setter
    def aws_media_package_vod(self, value: Optional[pulumi.Input['AwsIntegrationsAwsMediaPackageVodArgs']]):
        pulumi.set(self, "aws_media_package_vod", value)

    @property
    @pulumi.getter(name="awsMq")
    def aws_mq(self) -> Optional[pulumi.Input['AwsIntegrationsAwsMqArgs']]:
        """
        Aws Mq integration
        """
        return pulumi.get(self, "aws_mq")

    @aws_mq.setter
    def aws_mq(self, value: Optional[pulumi.Input['AwsIntegrationsAwsMqArgs']]):
        pulumi.set(self, "aws_mq", value)

    @property
    @pulumi.getter(name="awsMsk")
    def aws_msk(self) -> Optional[pulumi.Input['AwsIntegrationsAwsMskArgs']]:
        """
        Aws Msk integration
        """
        return pulumi.get(self, "aws_msk")

    @aws_msk.setter
    def aws_msk(self, value: Optional[pulumi.Input['AwsIntegrationsAwsMskArgs']]):
        pulumi.set(self, "aws_msk", value)

    @property
    @pulumi.getter(name="awsNeptune")
    def aws_neptune(self) -> Optional[pulumi.Input['AwsIntegrationsAwsNeptuneArgs']]:
        """
        Aws Neptune integration
        """
        return pulumi.get(self, "aws_neptune")

    @aws_neptune.setter
    def aws_neptune(self, value: Optional[pulumi.Input['AwsIntegrationsAwsNeptuneArgs']]):
        pulumi.set(self, "aws_neptune", value)

    @property
    @pulumi.getter(name="awsQldb")
    def aws_qldb(self) -> Optional[pulumi.Input['AwsIntegrationsAwsQldbArgs']]:
        """
        Aws Qldb integration
        """
        return pulumi.get(self, "aws_qldb")

    @aws_qldb.setter
    def aws_qldb(self, value: Optional[pulumi.Input['AwsIntegrationsAwsQldbArgs']]):
        pulumi.set(self, "aws_qldb", value)

    @property
    @pulumi.getter(name="awsRoute53resolver")
    def aws_route53resolver(self) -> Optional[pulumi.Input['AwsIntegrationsAwsRoute53resolverArgs']]:
        """
        Aws Route53resolver integration
        """
        return pulumi.get(self, "aws_route53resolver")

    @aws_route53resolver.setter
    def aws_route53resolver(self, value: Optional[pulumi.Input['AwsIntegrationsAwsRoute53resolverArgs']]):
        pulumi.set(self, "aws_route53resolver", value)

    @property
    @pulumi.getter(name="awsStates")
    def aws_states(self) -> Optional[pulumi.Input['AwsIntegrationsAwsStatesArgs']]:
        """
        Aws states integration
        """
        return pulumi.get(self, "aws_states")

    @aws_states.setter
    def aws_states(self, value: Optional[pulumi.Input['AwsIntegrationsAwsStatesArgs']]):
        pulumi.set(self, "aws_states", value)

    @property
    @pulumi.getter(name="awsTransitGateway")
    def aws_transit_gateway(self) -> Optional[pulumi.Input['AwsIntegrationsAwsTransitGatewayArgs']]:
        """
        Aws Transit Gateway integration
        """
        return pulumi.get(self, "aws_transit_gateway")

    @aws_transit_gateway.setter
    def aws_transit_gateway(self, value: Optional[pulumi.Input['AwsIntegrationsAwsTransitGatewayArgs']]):
        pulumi.set(self, "aws_transit_gateway", value)

    @property
    @pulumi.getter(name="awsWaf")
    def aws_waf(self) -> Optional[pulumi.Input['AwsIntegrationsAwsWafArgs']]:
        """
        Aws Waf integration
        """
        return pulumi.get(self, "aws_waf")

    @aws_waf.setter
    def aws_waf(self, value: Optional[pulumi.Input['AwsIntegrationsAwsWafArgs']]):
        pulumi.set(self, "aws_waf", value)

    @property
    @pulumi.getter(name="awsWafv2")
    def aws_wafv2(self) -> Optional[pulumi.Input['AwsIntegrationsAwsWafv2Args']]:
        """
        Aws Wafv2 integration
        """
        return pulumi.get(self, "aws_wafv2")

    @aws_wafv2.setter
    def aws_wafv2(self, value: Optional[pulumi.Input['AwsIntegrationsAwsWafv2Args']]):
        pulumi.set(self, "aws_wafv2", value)

    @property
    @pulumi.getter
    def billing(self) -> Optional[pulumi.Input['AwsIntegrationsBillingArgs']]:
        """
        Billing integration
        """
        return pulumi.get(self, "billing")

    @billing.setter
    def billing(self, value: Optional[pulumi.Input['AwsIntegrationsBillingArgs']]):
        pulumi.set(self, "billing", value)

    @property
    @pulumi.getter
    def cloudfront(self) -> Optional[pulumi.Input['AwsIntegrationsCloudfrontArgs']]:
        """
        Cloudfront integration
        """
        return pulumi.get(self, "cloudfront")

    @cloudfront.setter
    def cloudfront(self, value: Optional[pulumi.Input['AwsIntegrationsCloudfrontArgs']]):
        pulumi.set(self, "cloudfront", value)

    @property
    @pulumi.getter
    def cloudtrail(self) -> Optional[pulumi.Input['AwsIntegrationsCloudtrailArgs']]:
        """
        CloudTrail integration
        """
        return pulumi.get(self, "cloudtrail")

    @cloudtrail.setter
    def cloudtrail(self, value: Optional[pulumi.Input['AwsIntegrationsCloudtrailArgs']]):
        pulumi.set(self, "cloudtrail", value)

    @property
    @pulumi.getter(name="docDb")
    def doc_db(self) -> Optional[pulumi.Input['AwsIntegrationsDocDbArgs']]:
        """
        Doc DB integration
        """
        return pulumi.get(self, "doc_db")

    @doc_db.setter
    def doc_db(self, value: Optional[pulumi.Input['AwsIntegrationsDocDbArgs']]):
        pulumi.set(self, "doc_db", value)

    @property
    @pulumi.getter
    def dynamodb(self) -> Optional[pulumi.Input['AwsIntegrationsDynamodbArgs']]:
        """
        Dynamo DB integration
        """
        return pulumi.get(self, "dynamodb")

    @dynamodb.setter
    def dynamodb(self, value: Optional[pulumi.Input['AwsIntegrationsDynamodbArgs']]):
        pulumi.set(self, "dynamodb", value)

    @property
    @pulumi.getter
    def ebs(self) -> Optional[pulumi.Input['AwsIntegrationsEbsArgs']]:
        """
        EBS integration
        """
        return pulumi.get(self, "ebs")

    @ebs.setter
    def ebs(self, value: Optional[pulumi.Input['AwsIntegrationsEbsArgs']]):
        pulumi.set(self, "ebs", value)

    @property
    @pulumi.getter
    def ec2(self) -> Optional[pulumi.Input['AwsIntegrationsEc2Args']]:
        """
        Ec2 integration
        """
        return pulumi.get(self, "ec2")

    @ec2.setter
    def ec2(self, value: Optional[pulumi.Input['AwsIntegrationsEc2Args']]):
        pulumi.set(self, "ec2", value)

    @property
    @pulumi.getter
    def ecs(self) -> Optional[pulumi.Input['AwsIntegrationsEcsArgs']]:
        """
        Ecs integration
        """
        return pulumi.get(self, "ecs")

    @ecs.setter
    def ecs(self, value: Optional[pulumi.Input['AwsIntegrationsEcsArgs']]):
        pulumi.set(self, "ecs", value)

    @property
    @pulumi.getter
    def efs(self) -> Optional[pulumi.Input['AwsIntegrationsEfsArgs']]:
        """
        Efs integration
        """
        return pulumi.get(self, "efs")

    @efs.setter
    def efs(self, value: Optional[pulumi.Input['AwsIntegrationsEfsArgs']]):
        pulumi.set(self, "efs", value)

    @property
    @pulumi.getter
    def elasticache(self) -> Optional[pulumi.Input['AwsIntegrationsElasticacheArgs']]:
        """
        Elasticache integration
        """
        return pulumi.get(self, "elasticache")

    @elasticache.setter
    def elasticache(self, value: Optional[pulumi.Input['AwsIntegrationsElasticacheArgs']]):
        pulumi.set(self, "elasticache", value)

    @property
    @pulumi.getter
    def elasticbeanstalk(self) -> Optional[pulumi.Input['AwsIntegrationsElasticbeanstalkArgs']]:
        """
        Elastic Bean Stalk integration
        """
        return pulumi.get(self, "elasticbeanstalk")

    @elasticbeanstalk.setter
    def elasticbeanstalk(self, value: Optional[pulumi.Input['AwsIntegrationsElasticbeanstalkArgs']]):
        pulumi.set(self, "elasticbeanstalk", value)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input['AwsIntegrationsElasticsearchArgs']]:
        """
        Elastic Search integration
        """
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input['AwsIntegrationsElasticsearchArgs']]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def elb(self) -> Optional[pulumi.Input['AwsIntegrationsElbArgs']]:
        """
        Elb integration
        """
        return pulumi.get(self, "elb")

    @elb.setter
    def elb(self, value: Optional[pulumi.Input['AwsIntegrationsElbArgs']]):
        pulumi.set(self, "elb", value)

    @property
    @pulumi.getter
    def emr(self) -> Optional[pulumi.Input['AwsIntegrationsEmrArgs']]:
        """
        Emr integration
        """
        return pulumi.get(self, "emr")

    @emr.setter
    def emr(self, value: Optional[pulumi.Input['AwsIntegrationsEmrArgs']]):
        pulumi.set(self, "emr", value)

    @property
    @pulumi.getter
    def health(self) -> Optional[pulumi.Input['AwsIntegrationsHealthArgs']]:
        """
        Health integration
        """
        return pulumi.get(self, "health")

    @health.setter
    def health(self, value: Optional[pulumi.Input['AwsIntegrationsHealthArgs']]):
        pulumi.set(self, "health", value)

    @property
    @pulumi.getter
    def iam(self) -> Optional[pulumi.Input['AwsIntegrationsIamArgs']]:
        """
        Iam integration
        """
        return pulumi.get(self, "iam")

    @iam.setter
    def iam(self, value: Optional[pulumi.Input['AwsIntegrationsIamArgs']]):
        pulumi.set(self, "iam", value)

    @property
    @pulumi.getter
    def iot(self) -> Optional[pulumi.Input['AwsIntegrationsIotArgs']]:
        """
        Iot integration
        """
        return pulumi.get(self, "iot")

    @iot.setter
    def iot(self, value: Optional[pulumi.Input['AwsIntegrationsIotArgs']]):
        pulumi.set(self, "iot", value)

    @property
    @pulumi.getter
    def kinesis(self) -> Optional[pulumi.Input['AwsIntegrationsKinesisArgs']]:
        """
        Kinesis integration
        """
        return pulumi.get(self, "kinesis")

    @kinesis.setter
    def kinesis(self, value: Optional[pulumi.Input['AwsIntegrationsKinesisArgs']]):
        pulumi.set(self, "kinesis", value)

    @property
    @pulumi.getter(name="kinesisFirehose")
    def kinesis_firehose(self) -> Optional[pulumi.Input['AwsIntegrationsKinesisFirehoseArgs']]:
        """
        Kinesis Firehose integration
        """
        return pulumi.get(self, "kinesis_firehose")

    @kinesis_firehose.setter
    def kinesis_firehose(self, value: Optional[pulumi.Input['AwsIntegrationsKinesisFirehoseArgs']]):
        pulumi.set(self, "kinesis_firehose", value)

    @property
    @pulumi.getter(name="lambda")
    def lambda_(self) -> Optional[pulumi.Input['AwsIntegrationsLambdaArgs']]:
        """
        Lambda integration
        """
        return pulumi.get(self, "lambda_")

    @lambda_.setter
    def lambda_(self, value: Optional[pulumi.Input['AwsIntegrationsLambdaArgs']]):
        pulumi.set(self, "lambda_", value)

    @property
    @pulumi.getter(name="linkedAccountId")
    def linked_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the linked AWS account in New Relic.
        """
        return pulumi.get(self, "linked_account_id")

    @linked_account_id.setter
    def linked_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linked_account_id", value)

    @property
    @pulumi.getter
    def rds(self) -> Optional[pulumi.Input['AwsIntegrationsRdsArgs']]:
        """
        Rds integration
        """
        return pulumi.get(self, "rds")

    @rds.setter
    def rds(self, value: Optional[pulumi.Input['AwsIntegrationsRdsArgs']]):
        pulumi.set(self, "rds", value)

    @property
    @pulumi.getter
    def redshift(self) -> Optional[pulumi.Input['AwsIntegrationsRedshiftArgs']]:
        """
        Redshift integration
        """
        return pulumi.get(self, "redshift")

    @redshift.setter
    def redshift(self, value: Optional[pulumi.Input['AwsIntegrationsRedshiftArgs']]):
        pulumi.set(self, "redshift", value)

    @property
    @pulumi.getter
    def route53(self) -> Optional[pulumi.Input['AwsIntegrationsRoute53Args']]:
        """
        Route53 integration
        """
        return pulumi.get(self, "route53")

    @route53.setter
    def route53(self, value: Optional[pulumi.Input['AwsIntegrationsRoute53Args']]):
        pulumi.set(self, "route53", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['AwsIntegrationsS3Args']]:
        """
        S3 integration
        """
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['AwsIntegrationsS3Args']]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter
    def ses(self) -> Optional[pulumi.Input['AwsIntegrationsSesArgs']]:
        """
        Ses integration
        """
        return pulumi.get(self, "ses")

    @ses.setter
    def ses(self, value: Optional[pulumi.Input['AwsIntegrationsSesArgs']]):
        pulumi.set(self, "ses", value)

    @property
    @pulumi.getter
    def sns(self) -> Optional[pulumi.Input['AwsIntegrationsSnsArgs']]:
        """
        Sns integration
        """
        return pulumi.get(self, "sns")

    @sns.setter
    def sns(self, value: Optional[pulumi.Input['AwsIntegrationsSnsArgs']]):
        pulumi.set(self, "sns", value)

    @property
    @pulumi.getter
    def sqs(self) -> Optional[pulumi.Input['AwsIntegrationsSqsArgs']]:
        """
        SQS integration
        """
        return pulumi.get(self, "sqs")

    @sqs.setter
    def sqs(self, value: Optional[pulumi.Input['AwsIntegrationsSqsArgs']]):
        pulumi.set(self, "sqs", value)

    @property
    @pulumi.getter(name="trustedAdvisor")
    def trusted_advisor(self) -> Optional[pulumi.Input['AwsIntegrationsTrustedAdvisorArgs']]:
        """
        Trusted Advisor integration
        """
        return pulumi.get(self, "trusted_advisor")

    @trusted_advisor.setter
    def trusted_advisor(self, value: Optional[pulumi.Input['AwsIntegrationsTrustedAdvisorArgs']]):
        pulumi.set(self, "trusted_advisor", value)

    @property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input['AwsIntegrationsVpcArgs']]:
        """
        VPC integration
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input['AwsIntegrationsVpcArgs']]):
        pulumi.set(self, "vpc", value)

    @property
    @pulumi.getter(name="xRay")
    def x_ray(self) -> Optional[pulumi.Input['AwsIntegrationsXRayArgs']]:
        """
        X-Ray integration
        """
        return pulumi.get(self, "x_ray")

    @x_ray.setter
    def x_ray(self, value: Optional[pulumi.Input['AwsIntegrationsXRayArgs']]):
        pulumi.set(self, "x_ray", value)


class AwsIntegrations(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 alb: Optional[pulumi.Input[Union['AwsIntegrationsAlbArgs', 'AwsIntegrationsAlbArgsDict']]] = None,
                 api_gateway: Optional[pulumi.Input[Union['AwsIntegrationsApiGatewayArgs', 'AwsIntegrationsApiGatewayArgsDict']]] = None,
                 auto_scaling: Optional[pulumi.Input[Union['AwsIntegrationsAutoScalingArgs', 'AwsIntegrationsAutoScalingArgsDict']]] = None,
                 aws_app_sync: Optional[pulumi.Input[Union['AwsIntegrationsAwsAppSyncArgs', 'AwsIntegrationsAwsAppSyncArgsDict']]] = None,
                 aws_athena: Optional[pulumi.Input[Union['AwsIntegrationsAwsAthenaArgs', 'AwsIntegrationsAwsAthenaArgsDict']]] = None,
                 aws_cognito: Optional[pulumi.Input[Union['AwsIntegrationsAwsCognitoArgs', 'AwsIntegrationsAwsCognitoArgsDict']]] = None,
                 aws_connect: Optional[pulumi.Input[Union['AwsIntegrationsAwsConnectArgs', 'AwsIntegrationsAwsConnectArgsDict']]] = None,
                 aws_direct_connect: Optional[pulumi.Input[Union['AwsIntegrationsAwsDirectConnectArgs', 'AwsIntegrationsAwsDirectConnectArgsDict']]] = None,
                 aws_fsx: Optional[pulumi.Input[Union['AwsIntegrationsAwsFsxArgs', 'AwsIntegrationsAwsFsxArgsDict']]] = None,
                 aws_glue: Optional[pulumi.Input[Union['AwsIntegrationsAwsGlueArgs', 'AwsIntegrationsAwsGlueArgsDict']]] = None,
                 aws_kinesis_analytics: Optional[pulumi.Input[Union['AwsIntegrationsAwsKinesisAnalyticsArgs', 'AwsIntegrationsAwsKinesisAnalyticsArgsDict']]] = None,
                 aws_media_convert: Optional[pulumi.Input[Union['AwsIntegrationsAwsMediaConvertArgs', 'AwsIntegrationsAwsMediaConvertArgsDict']]] = None,
                 aws_media_package_vod: Optional[pulumi.Input[Union['AwsIntegrationsAwsMediaPackageVodArgs', 'AwsIntegrationsAwsMediaPackageVodArgsDict']]] = None,
                 aws_mq: Optional[pulumi.Input[Union['AwsIntegrationsAwsMqArgs', 'AwsIntegrationsAwsMqArgsDict']]] = None,
                 aws_msk: Optional[pulumi.Input[Union['AwsIntegrationsAwsMskArgs', 'AwsIntegrationsAwsMskArgsDict']]] = None,
                 aws_neptune: Optional[pulumi.Input[Union['AwsIntegrationsAwsNeptuneArgs', 'AwsIntegrationsAwsNeptuneArgsDict']]] = None,
                 aws_qldb: Optional[pulumi.Input[Union['AwsIntegrationsAwsQldbArgs', 'AwsIntegrationsAwsQldbArgsDict']]] = None,
                 aws_route53resolver: Optional[pulumi.Input[Union['AwsIntegrationsAwsRoute53resolverArgs', 'AwsIntegrationsAwsRoute53resolverArgsDict']]] = None,
                 aws_states: Optional[pulumi.Input[Union['AwsIntegrationsAwsStatesArgs', 'AwsIntegrationsAwsStatesArgsDict']]] = None,
                 aws_transit_gateway: Optional[pulumi.Input[Union['AwsIntegrationsAwsTransitGatewayArgs', 'AwsIntegrationsAwsTransitGatewayArgsDict']]] = None,
                 aws_waf: Optional[pulumi.Input[Union['AwsIntegrationsAwsWafArgs', 'AwsIntegrationsAwsWafArgsDict']]] = None,
                 aws_wafv2: Optional[pulumi.Input[Union['AwsIntegrationsAwsWafv2Args', 'AwsIntegrationsAwsWafv2ArgsDict']]] = None,
                 billing: Optional[pulumi.Input[Union['AwsIntegrationsBillingArgs', 'AwsIntegrationsBillingArgsDict']]] = None,
                 cloudfront: Optional[pulumi.Input[Union['AwsIntegrationsCloudfrontArgs', 'AwsIntegrationsCloudfrontArgsDict']]] = None,
                 cloudtrail: Optional[pulumi.Input[Union['AwsIntegrationsCloudtrailArgs', 'AwsIntegrationsCloudtrailArgsDict']]] = None,
                 doc_db: Optional[pulumi.Input[Union['AwsIntegrationsDocDbArgs', 'AwsIntegrationsDocDbArgsDict']]] = None,
                 dynamodb: Optional[pulumi.Input[Union['AwsIntegrationsDynamodbArgs', 'AwsIntegrationsDynamodbArgsDict']]] = None,
                 ebs: Optional[pulumi.Input[Union['AwsIntegrationsEbsArgs', 'AwsIntegrationsEbsArgsDict']]] = None,
                 ec2: Optional[pulumi.Input[Union['AwsIntegrationsEc2Args', 'AwsIntegrationsEc2ArgsDict']]] = None,
                 ecs: Optional[pulumi.Input[Union['AwsIntegrationsEcsArgs', 'AwsIntegrationsEcsArgsDict']]] = None,
                 efs: Optional[pulumi.Input[Union['AwsIntegrationsEfsArgs', 'AwsIntegrationsEfsArgsDict']]] = None,
                 elasticache: Optional[pulumi.Input[Union['AwsIntegrationsElasticacheArgs', 'AwsIntegrationsElasticacheArgsDict']]] = None,
                 elasticbeanstalk: Optional[pulumi.Input[Union['AwsIntegrationsElasticbeanstalkArgs', 'AwsIntegrationsElasticbeanstalkArgsDict']]] = None,
                 elasticsearch: Optional[pulumi.Input[Union['AwsIntegrationsElasticsearchArgs', 'AwsIntegrationsElasticsearchArgsDict']]] = None,
                 elb: Optional[pulumi.Input[Union['AwsIntegrationsElbArgs', 'AwsIntegrationsElbArgsDict']]] = None,
                 emr: Optional[pulumi.Input[Union['AwsIntegrationsEmrArgs', 'AwsIntegrationsEmrArgsDict']]] = None,
                 health: Optional[pulumi.Input[Union['AwsIntegrationsHealthArgs', 'AwsIntegrationsHealthArgsDict']]] = None,
                 iam: Optional[pulumi.Input[Union['AwsIntegrationsIamArgs', 'AwsIntegrationsIamArgsDict']]] = None,
                 iot: Optional[pulumi.Input[Union['AwsIntegrationsIotArgs', 'AwsIntegrationsIotArgsDict']]] = None,
                 kinesis: Optional[pulumi.Input[Union['AwsIntegrationsKinesisArgs', 'AwsIntegrationsKinesisArgsDict']]] = None,
                 kinesis_firehose: Optional[pulumi.Input[Union['AwsIntegrationsKinesisFirehoseArgs', 'AwsIntegrationsKinesisFirehoseArgsDict']]] = None,
                 lambda_: Optional[pulumi.Input[Union['AwsIntegrationsLambdaArgs', 'AwsIntegrationsLambdaArgsDict']]] = None,
                 linked_account_id: Optional[pulumi.Input[str]] = None,
                 rds: Optional[pulumi.Input[Union['AwsIntegrationsRdsArgs', 'AwsIntegrationsRdsArgsDict']]] = None,
                 redshift: Optional[pulumi.Input[Union['AwsIntegrationsRedshiftArgs', 'AwsIntegrationsRedshiftArgsDict']]] = None,
                 route53: Optional[pulumi.Input[Union['AwsIntegrationsRoute53Args', 'AwsIntegrationsRoute53ArgsDict']]] = None,
                 s3: Optional[pulumi.Input[Union['AwsIntegrationsS3Args', 'AwsIntegrationsS3ArgsDict']]] = None,
                 ses: Optional[pulumi.Input[Union['AwsIntegrationsSesArgs', 'AwsIntegrationsSesArgsDict']]] = None,
                 sns: Optional[pulumi.Input[Union['AwsIntegrationsSnsArgs', 'AwsIntegrationsSnsArgsDict']]] = None,
                 sqs: Optional[pulumi.Input[Union['AwsIntegrationsSqsArgs', 'AwsIntegrationsSqsArgsDict']]] = None,
                 trusted_advisor: Optional[pulumi.Input[Union['AwsIntegrationsTrustedAdvisorArgs', 'AwsIntegrationsTrustedAdvisorArgsDict']]] = None,
                 vpc: Optional[pulumi.Input[Union['AwsIntegrationsVpcArgs', 'AwsIntegrationsVpcArgsDict']]] = None,
                 x_ray: Optional[pulumi.Input[Union['AwsIntegrationsXRayArgs', 'AwsIntegrationsXRayArgsDict']]] = None,
                 __props__=None):
        """
        ## Import

        Linked AWS account integrations can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import newrelic:cloud/awsIntegrations:AwsIntegrations foo <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        :param pulumi.Input[Union['AwsIntegrationsAlbArgs', 'AwsIntegrationsAlbArgsDict']] alb: ALB integration
        :param pulumi.Input[Union['AwsIntegrationsApiGatewayArgs', 'AwsIntegrationsApiGatewayArgsDict']] api_gateway: API Gateway integration
        :param pulumi.Input[Union['AwsIntegrationsAutoScalingArgs', 'AwsIntegrationsAutoScalingArgsDict']] auto_scaling: AutoScaling integration
        :param pulumi.Input[Union['AwsIntegrationsAwsAppSyncArgs', 'AwsIntegrationsAwsAppSyncArgsDict']] aws_app_sync: Aws Appsync integration
        :param pulumi.Input[Union['AwsIntegrationsAwsAthenaArgs', 'AwsIntegrationsAwsAthenaArgsDict']] aws_athena: Aws Athena integration
        :param pulumi.Input[Union['AwsIntegrationsAwsCognitoArgs', 'AwsIntegrationsAwsCognitoArgsDict']] aws_cognito: Aws Cognito integration
        :param pulumi.Input[Union['AwsIntegrationsAwsConnectArgs', 'AwsIntegrationsAwsConnectArgsDict']] aws_connect: Aws Connect integration
        :param pulumi.Input[Union['AwsIntegrationsAwsDirectConnectArgs', 'AwsIntegrationsAwsDirectConnectArgsDict']] aws_direct_connect: Aws Direct Connect integration
        :param pulumi.Input[Union['AwsIntegrationsAwsFsxArgs', 'AwsIntegrationsAwsFsxArgsDict']] aws_fsx: Aws Fsx integration
        :param pulumi.Input[Union['AwsIntegrationsAwsGlueArgs', 'AwsIntegrationsAwsGlueArgsDict']] aws_glue: Aws Glue integration
        :param pulumi.Input[Union['AwsIntegrationsAwsKinesisAnalyticsArgs', 'AwsIntegrationsAwsKinesisAnalyticsArgsDict']] aws_kinesis_analytics: Aws Kinesis Analytics integration
        :param pulumi.Input[Union['AwsIntegrationsAwsMediaConvertArgs', 'AwsIntegrationsAwsMediaConvertArgsDict']] aws_media_convert: Aws Media Convert integration
        :param pulumi.Input[Union['AwsIntegrationsAwsMediaPackageVodArgs', 'AwsIntegrationsAwsMediaPackageVodArgsDict']] aws_media_package_vod: Aws Media PackageVod integration
        :param pulumi.Input[Union['AwsIntegrationsAwsMqArgs', 'AwsIntegrationsAwsMqArgsDict']] aws_mq: Aws Mq integration
        :param pulumi.Input[Union['AwsIntegrationsAwsMskArgs', 'AwsIntegrationsAwsMskArgsDict']] aws_msk: Aws Msk integration
        :param pulumi.Input[Union['AwsIntegrationsAwsNeptuneArgs', 'AwsIntegrationsAwsNeptuneArgsDict']] aws_neptune: Aws Neptune integration
        :param pulumi.Input[Union['AwsIntegrationsAwsQldbArgs', 'AwsIntegrationsAwsQldbArgsDict']] aws_qldb: Aws Qldb integration
        :param pulumi.Input[Union['AwsIntegrationsAwsRoute53resolverArgs', 'AwsIntegrationsAwsRoute53resolverArgsDict']] aws_route53resolver: Aws Route53resolver integration
        :param pulumi.Input[Union['AwsIntegrationsAwsStatesArgs', 'AwsIntegrationsAwsStatesArgsDict']] aws_states: Aws states integration
        :param pulumi.Input[Union['AwsIntegrationsAwsTransitGatewayArgs', 'AwsIntegrationsAwsTransitGatewayArgsDict']] aws_transit_gateway: Aws Transit Gateway integration
        :param pulumi.Input[Union['AwsIntegrationsAwsWafArgs', 'AwsIntegrationsAwsWafArgsDict']] aws_waf: Aws Waf integration
        :param pulumi.Input[Union['AwsIntegrationsAwsWafv2Args', 'AwsIntegrationsAwsWafv2ArgsDict']] aws_wafv2: Aws Wafv2 integration
        :param pulumi.Input[Union['AwsIntegrationsBillingArgs', 'AwsIntegrationsBillingArgsDict']] billing: Billing integration
        :param pulumi.Input[Union['AwsIntegrationsCloudfrontArgs', 'AwsIntegrationsCloudfrontArgsDict']] cloudfront: Cloudfront integration
        :param pulumi.Input[Union['AwsIntegrationsCloudtrailArgs', 'AwsIntegrationsCloudtrailArgsDict']] cloudtrail: CloudTrail integration
        :param pulumi.Input[Union['AwsIntegrationsDocDbArgs', 'AwsIntegrationsDocDbArgsDict']] doc_db: Doc DB integration
        :param pulumi.Input[Union['AwsIntegrationsDynamodbArgs', 'AwsIntegrationsDynamodbArgsDict']] dynamodb: Dynamo DB integration
        :param pulumi.Input[Union['AwsIntegrationsEbsArgs', 'AwsIntegrationsEbsArgsDict']] ebs: EBS integration
        :param pulumi.Input[Union['AwsIntegrationsEc2Args', 'AwsIntegrationsEc2ArgsDict']] ec2: Ec2 integration
        :param pulumi.Input[Union['AwsIntegrationsEcsArgs', 'AwsIntegrationsEcsArgsDict']] ecs: Ecs integration
        :param pulumi.Input[Union['AwsIntegrationsEfsArgs', 'AwsIntegrationsEfsArgsDict']] efs: Efs integration
        :param pulumi.Input[Union['AwsIntegrationsElasticacheArgs', 'AwsIntegrationsElasticacheArgsDict']] elasticache: Elasticache integration
        :param pulumi.Input[Union['AwsIntegrationsElasticbeanstalkArgs', 'AwsIntegrationsElasticbeanstalkArgsDict']] elasticbeanstalk: Elastic Bean Stalk integration
        :param pulumi.Input[Union['AwsIntegrationsElasticsearchArgs', 'AwsIntegrationsElasticsearchArgsDict']] elasticsearch: Elastic Search integration
        :param pulumi.Input[Union['AwsIntegrationsElbArgs', 'AwsIntegrationsElbArgsDict']] elb: Elb integration
        :param pulumi.Input[Union['AwsIntegrationsEmrArgs', 'AwsIntegrationsEmrArgsDict']] emr: Emr integration
        :param pulumi.Input[Union['AwsIntegrationsHealthArgs', 'AwsIntegrationsHealthArgsDict']] health: Health integration
        :param pulumi.Input[Union['AwsIntegrationsIamArgs', 'AwsIntegrationsIamArgsDict']] iam: Iam integration
        :param pulumi.Input[Union['AwsIntegrationsIotArgs', 'AwsIntegrationsIotArgsDict']] iot: Iot integration
        :param pulumi.Input[Union['AwsIntegrationsKinesisArgs', 'AwsIntegrationsKinesisArgsDict']] kinesis: Kinesis integration
        :param pulumi.Input[Union['AwsIntegrationsKinesisFirehoseArgs', 'AwsIntegrationsKinesisFirehoseArgsDict']] kinesis_firehose: Kinesis Firehose integration
        :param pulumi.Input[Union['AwsIntegrationsLambdaArgs', 'AwsIntegrationsLambdaArgsDict']] lambda_: Lambda integration
        :param pulumi.Input[str] linked_account_id: The ID of the linked AWS account in New Relic.
        :param pulumi.Input[Union['AwsIntegrationsRdsArgs', 'AwsIntegrationsRdsArgsDict']] rds: Rds integration
        :param pulumi.Input[Union['AwsIntegrationsRedshiftArgs', 'AwsIntegrationsRedshiftArgsDict']] redshift: Redshift integration
        :param pulumi.Input[Union['AwsIntegrationsRoute53Args', 'AwsIntegrationsRoute53ArgsDict']] route53: Route53 integration
        :param pulumi.Input[Union['AwsIntegrationsS3Args', 'AwsIntegrationsS3ArgsDict']] s3: S3 integration
        :param pulumi.Input[Union['AwsIntegrationsSesArgs', 'AwsIntegrationsSesArgsDict']] ses: Ses integration
        :param pulumi.Input[Union['AwsIntegrationsSnsArgs', 'AwsIntegrationsSnsArgsDict']] sns: Sns integration
        :param pulumi.Input[Union['AwsIntegrationsSqsArgs', 'AwsIntegrationsSqsArgsDict']] sqs: SQS integration
        :param pulumi.Input[Union['AwsIntegrationsTrustedAdvisorArgs', 'AwsIntegrationsTrustedAdvisorArgsDict']] trusted_advisor: Trusted Advisor integration
        :param pulumi.Input[Union['AwsIntegrationsVpcArgs', 'AwsIntegrationsVpcArgsDict']] vpc: VPC integration
        :param pulumi.Input[Union['AwsIntegrationsXRayArgs', 'AwsIntegrationsXRayArgsDict']] x_ray: X-Ray integration
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AwsIntegrationsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        Linked AWS account integrations can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import newrelic:cloud/awsIntegrations:AwsIntegrations foo <id>
        ```

        :param str resource_name: The name of the resource.
        :param AwsIntegrationsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AwsIntegrationsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 alb: Optional[pulumi.Input[Union['AwsIntegrationsAlbArgs', 'AwsIntegrationsAlbArgsDict']]] = None,
                 api_gateway: Optional[pulumi.Input[Union['AwsIntegrationsApiGatewayArgs', 'AwsIntegrationsApiGatewayArgsDict']]] = None,
                 auto_scaling: Optional[pulumi.Input[Union['AwsIntegrationsAutoScalingArgs', 'AwsIntegrationsAutoScalingArgsDict']]] = None,
                 aws_app_sync: Optional[pulumi.Input[Union['AwsIntegrationsAwsAppSyncArgs', 'AwsIntegrationsAwsAppSyncArgsDict']]] = None,
                 aws_athena: Optional[pulumi.Input[Union['AwsIntegrationsAwsAthenaArgs', 'AwsIntegrationsAwsAthenaArgsDict']]] = None,
                 aws_cognito: Optional[pulumi.Input[Union['AwsIntegrationsAwsCognitoArgs', 'AwsIntegrationsAwsCognitoArgsDict']]] = None,
                 aws_connect: Optional[pulumi.Input[Union['AwsIntegrationsAwsConnectArgs', 'AwsIntegrationsAwsConnectArgsDict']]] = None,
                 aws_direct_connect: Optional[pulumi.Input[Union['AwsIntegrationsAwsDirectConnectArgs', 'AwsIntegrationsAwsDirectConnectArgsDict']]] = None,
                 aws_fsx: Optional[pulumi.Input[Union['AwsIntegrationsAwsFsxArgs', 'AwsIntegrationsAwsFsxArgsDict']]] = None,
                 aws_glue: Optional[pulumi.Input[Union['AwsIntegrationsAwsGlueArgs', 'AwsIntegrationsAwsGlueArgsDict']]] = None,
                 aws_kinesis_analytics: Optional[pulumi.Input[Union['AwsIntegrationsAwsKinesisAnalyticsArgs', 'AwsIntegrationsAwsKinesisAnalyticsArgsDict']]] = None,
                 aws_media_convert: Optional[pulumi.Input[Union['AwsIntegrationsAwsMediaConvertArgs', 'AwsIntegrationsAwsMediaConvertArgsDict']]] = None,
                 aws_media_package_vod: Optional[pulumi.Input[Union['AwsIntegrationsAwsMediaPackageVodArgs', 'AwsIntegrationsAwsMediaPackageVodArgsDict']]] = None,
                 aws_mq: Optional[pulumi.Input[Union['AwsIntegrationsAwsMqArgs', 'AwsIntegrationsAwsMqArgsDict']]] = None,
                 aws_msk: Optional[pulumi.Input[Union['AwsIntegrationsAwsMskArgs', 'AwsIntegrationsAwsMskArgsDict']]] = None,
                 aws_neptune: Optional[pulumi.Input[Union['AwsIntegrationsAwsNeptuneArgs', 'AwsIntegrationsAwsNeptuneArgsDict']]] = None,
                 aws_qldb: Optional[pulumi.Input[Union['AwsIntegrationsAwsQldbArgs', 'AwsIntegrationsAwsQldbArgsDict']]] = None,
                 aws_route53resolver: Optional[pulumi.Input[Union['AwsIntegrationsAwsRoute53resolverArgs', 'AwsIntegrationsAwsRoute53resolverArgsDict']]] = None,
                 aws_states: Optional[pulumi.Input[Union['AwsIntegrationsAwsStatesArgs', 'AwsIntegrationsAwsStatesArgsDict']]] = None,
                 aws_transit_gateway: Optional[pulumi.Input[Union['AwsIntegrationsAwsTransitGatewayArgs', 'AwsIntegrationsAwsTransitGatewayArgsDict']]] = None,
                 aws_waf: Optional[pulumi.Input[Union['AwsIntegrationsAwsWafArgs', 'AwsIntegrationsAwsWafArgsDict']]] = None,
                 aws_wafv2: Optional[pulumi.Input[Union['AwsIntegrationsAwsWafv2Args', 'AwsIntegrationsAwsWafv2ArgsDict']]] = None,
                 billing: Optional[pulumi.Input[Union['AwsIntegrationsBillingArgs', 'AwsIntegrationsBillingArgsDict']]] = None,
                 cloudfront: Optional[pulumi.Input[Union['AwsIntegrationsCloudfrontArgs', 'AwsIntegrationsCloudfrontArgsDict']]] = None,
                 cloudtrail: Optional[pulumi.Input[Union['AwsIntegrationsCloudtrailArgs', 'AwsIntegrationsCloudtrailArgsDict']]] = None,
                 doc_db: Optional[pulumi.Input[Union['AwsIntegrationsDocDbArgs', 'AwsIntegrationsDocDbArgsDict']]] = None,
                 dynamodb: Optional[pulumi.Input[Union['AwsIntegrationsDynamodbArgs', 'AwsIntegrationsDynamodbArgsDict']]] = None,
                 ebs: Optional[pulumi.Input[Union['AwsIntegrationsEbsArgs', 'AwsIntegrationsEbsArgsDict']]] = None,
                 ec2: Optional[pulumi.Input[Union['AwsIntegrationsEc2Args', 'AwsIntegrationsEc2ArgsDict']]] = None,
                 ecs: Optional[pulumi.Input[Union['AwsIntegrationsEcsArgs', 'AwsIntegrationsEcsArgsDict']]] = None,
                 efs: Optional[pulumi.Input[Union['AwsIntegrationsEfsArgs', 'AwsIntegrationsEfsArgsDict']]] = None,
                 elasticache: Optional[pulumi.Input[Union['AwsIntegrationsElasticacheArgs', 'AwsIntegrationsElasticacheArgsDict']]] = None,
                 elasticbeanstalk: Optional[pulumi.Input[Union['AwsIntegrationsElasticbeanstalkArgs', 'AwsIntegrationsElasticbeanstalkArgsDict']]] = None,
                 elasticsearch: Optional[pulumi.Input[Union['AwsIntegrationsElasticsearchArgs', 'AwsIntegrationsElasticsearchArgsDict']]] = None,
                 elb: Optional[pulumi.Input[Union['AwsIntegrationsElbArgs', 'AwsIntegrationsElbArgsDict']]] = None,
                 emr: Optional[pulumi.Input[Union['AwsIntegrationsEmrArgs', 'AwsIntegrationsEmrArgsDict']]] = None,
                 health: Optional[pulumi.Input[Union['AwsIntegrationsHealthArgs', 'AwsIntegrationsHealthArgsDict']]] = None,
                 iam: Optional[pulumi.Input[Union['AwsIntegrationsIamArgs', 'AwsIntegrationsIamArgsDict']]] = None,
                 iot: Optional[pulumi.Input[Union['AwsIntegrationsIotArgs', 'AwsIntegrationsIotArgsDict']]] = None,
                 kinesis: Optional[pulumi.Input[Union['AwsIntegrationsKinesisArgs', 'AwsIntegrationsKinesisArgsDict']]] = None,
                 kinesis_firehose: Optional[pulumi.Input[Union['AwsIntegrationsKinesisFirehoseArgs', 'AwsIntegrationsKinesisFirehoseArgsDict']]] = None,
                 lambda_: Optional[pulumi.Input[Union['AwsIntegrationsLambdaArgs', 'AwsIntegrationsLambdaArgsDict']]] = None,
                 linked_account_id: Optional[pulumi.Input[str]] = None,
                 rds: Optional[pulumi.Input[Union['AwsIntegrationsRdsArgs', 'AwsIntegrationsRdsArgsDict']]] = None,
                 redshift: Optional[pulumi.Input[Union['AwsIntegrationsRedshiftArgs', 'AwsIntegrationsRedshiftArgsDict']]] = None,
                 route53: Optional[pulumi.Input[Union['AwsIntegrationsRoute53Args', 'AwsIntegrationsRoute53ArgsDict']]] = None,
                 s3: Optional[pulumi.Input[Union['AwsIntegrationsS3Args', 'AwsIntegrationsS3ArgsDict']]] = None,
                 ses: Optional[pulumi.Input[Union['AwsIntegrationsSesArgs', 'AwsIntegrationsSesArgsDict']]] = None,
                 sns: Optional[pulumi.Input[Union['AwsIntegrationsSnsArgs', 'AwsIntegrationsSnsArgsDict']]] = None,
                 sqs: Optional[pulumi.Input[Union['AwsIntegrationsSqsArgs', 'AwsIntegrationsSqsArgsDict']]] = None,
                 trusted_advisor: Optional[pulumi.Input[Union['AwsIntegrationsTrustedAdvisorArgs', 'AwsIntegrationsTrustedAdvisorArgsDict']]] = None,
                 vpc: Optional[pulumi.Input[Union['AwsIntegrationsVpcArgs', 'AwsIntegrationsVpcArgsDict']]] = None,
                 x_ray: Optional[pulumi.Input[Union['AwsIntegrationsXRayArgs', 'AwsIntegrationsXRayArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AwsIntegrationsArgs.__new__(AwsIntegrationsArgs)

            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["alb"] = alb
            __props__.__dict__["api_gateway"] = api_gateway
            __props__.__dict__["auto_scaling"] = auto_scaling
            __props__.__dict__["aws_app_sync"] = aws_app_sync
            __props__.__dict__["aws_athena"] = aws_athena
            __props__.__dict__["aws_cognito"] = aws_cognito
            __props__.__dict__["aws_connect"] = aws_connect
            __props__.__dict__["aws_direct_connect"] = aws_direct_connect
            __props__.__dict__["aws_fsx"] = aws_fsx
            __props__.__dict__["aws_glue"] = aws_glue
            __props__.__dict__["aws_kinesis_analytics"] = aws_kinesis_analytics
            __props__.__dict__["aws_media_convert"] = aws_media_convert
            __props__.__dict__["aws_media_package_vod"] = aws_media_package_vod
            __props__.__dict__["aws_mq"] = aws_mq
            __props__.__dict__["aws_msk"] = aws_msk
            __props__.__dict__["aws_neptune"] = aws_neptune
            __props__.__dict__["aws_qldb"] = aws_qldb
            __props__.__dict__["aws_route53resolver"] = aws_route53resolver
            __props__.__dict__["aws_states"] = aws_states
            __props__.__dict__["aws_transit_gateway"] = aws_transit_gateway
            __props__.__dict__["aws_waf"] = aws_waf
            __props__.__dict__["aws_wafv2"] = aws_wafv2
            __props__.__dict__["billing"] = billing
            __props__.__dict__["cloudfront"] = cloudfront
            __props__.__dict__["cloudtrail"] = cloudtrail
            __props__.__dict__["doc_db"] = doc_db
            __props__.__dict__["dynamodb"] = dynamodb
            __props__.__dict__["ebs"] = ebs
            __props__.__dict__["ec2"] = ec2
            __props__.__dict__["ecs"] = ecs
            __props__.__dict__["efs"] = efs
            __props__.__dict__["elasticache"] = elasticache
            __props__.__dict__["elasticbeanstalk"] = elasticbeanstalk
            __props__.__dict__["elasticsearch"] = elasticsearch
            __props__.__dict__["elb"] = elb
            __props__.__dict__["emr"] = emr
            __props__.__dict__["health"] = health
            __props__.__dict__["iam"] = iam
            __props__.__dict__["iot"] = iot
            __props__.__dict__["kinesis"] = kinesis
            __props__.__dict__["kinesis_firehose"] = kinesis_firehose
            __props__.__dict__["lambda_"] = lambda_
            if linked_account_id is None and not opts.urn:
                raise TypeError("Missing required property 'linked_account_id'")
            __props__.__dict__["linked_account_id"] = linked_account_id
            __props__.__dict__["rds"] = rds
            __props__.__dict__["redshift"] = redshift
            __props__.__dict__["route53"] = route53
            __props__.__dict__["s3"] = s3
            __props__.__dict__["ses"] = ses
            __props__.__dict__["sns"] = sns
            __props__.__dict__["sqs"] = sqs
            __props__.__dict__["trusted_advisor"] = trusted_advisor
            __props__.__dict__["vpc"] = vpc
            __props__.__dict__["x_ray"] = x_ray
        super(AwsIntegrations, __self__).__init__(
            'newrelic:cloud/awsIntegrations:AwsIntegrations',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            alb: Optional[pulumi.Input[Union['AwsIntegrationsAlbArgs', 'AwsIntegrationsAlbArgsDict']]] = None,
            api_gateway: Optional[pulumi.Input[Union['AwsIntegrationsApiGatewayArgs', 'AwsIntegrationsApiGatewayArgsDict']]] = None,
            auto_scaling: Optional[pulumi.Input[Union['AwsIntegrationsAutoScalingArgs', 'AwsIntegrationsAutoScalingArgsDict']]] = None,
            aws_app_sync: Optional[pulumi.Input[Union['AwsIntegrationsAwsAppSyncArgs', 'AwsIntegrationsAwsAppSyncArgsDict']]] = None,
            aws_athena: Optional[pulumi.Input[Union['AwsIntegrationsAwsAthenaArgs', 'AwsIntegrationsAwsAthenaArgsDict']]] = None,
            aws_cognito: Optional[pulumi.Input[Union['AwsIntegrationsAwsCognitoArgs', 'AwsIntegrationsAwsCognitoArgsDict']]] = None,
            aws_connect: Optional[pulumi.Input[Union['AwsIntegrationsAwsConnectArgs', 'AwsIntegrationsAwsConnectArgsDict']]] = None,
            aws_direct_connect: Optional[pulumi.Input[Union['AwsIntegrationsAwsDirectConnectArgs', 'AwsIntegrationsAwsDirectConnectArgsDict']]] = None,
            aws_fsx: Optional[pulumi.Input[Union['AwsIntegrationsAwsFsxArgs', 'AwsIntegrationsAwsFsxArgsDict']]] = None,
            aws_glue: Optional[pulumi.Input[Union['AwsIntegrationsAwsGlueArgs', 'AwsIntegrationsAwsGlueArgsDict']]] = None,
            aws_kinesis_analytics: Optional[pulumi.Input[Union['AwsIntegrationsAwsKinesisAnalyticsArgs', 'AwsIntegrationsAwsKinesisAnalyticsArgsDict']]] = None,
            aws_media_convert: Optional[pulumi.Input[Union['AwsIntegrationsAwsMediaConvertArgs', 'AwsIntegrationsAwsMediaConvertArgsDict']]] = None,
            aws_media_package_vod: Optional[pulumi.Input[Union['AwsIntegrationsAwsMediaPackageVodArgs', 'AwsIntegrationsAwsMediaPackageVodArgsDict']]] = None,
            aws_mq: Optional[pulumi.Input[Union['AwsIntegrationsAwsMqArgs', 'AwsIntegrationsAwsMqArgsDict']]] = None,
            aws_msk: Optional[pulumi.Input[Union['AwsIntegrationsAwsMskArgs', 'AwsIntegrationsAwsMskArgsDict']]] = None,
            aws_neptune: Optional[pulumi.Input[Union['AwsIntegrationsAwsNeptuneArgs', 'AwsIntegrationsAwsNeptuneArgsDict']]] = None,
            aws_qldb: Optional[pulumi.Input[Union['AwsIntegrationsAwsQldbArgs', 'AwsIntegrationsAwsQldbArgsDict']]] = None,
            aws_route53resolver: Optional[pulumi.Input[Union['AwsIntegrationsAwsRoute53resolverArgs', 'AwsIntegrationsAwsRoute53resolverArgsDict']]] = None,
            aws_states: Optional[pulumi.Input[Union['AwsIntegrationsAwsStatesArgs', 'AwsIntegrationsAwsStatesArgsDict']]] = None,
            aws_transit_gateway: Optional[pulumi.Input[Union['AwsIntegrationsAwsTransitGatewayArgs', 'AwsIntegrationsAwsTransitGatewayArgsDict']]] = None,
            aws_waf: Optional[pulumi.Input[Union['AwsIntegrationsAwsWafArgs', 'AwsIntegrationsAwsWafArgsDict']]] = None,
            aws_wafv2: Optional[pulumi.Input[Union['AwsIntegrationsAwsWafv2Args', 'AwsIntegrationsAwsWafv2ArgsDict']]] = None,
            billing: Optional[pulumi.Input[Union['AwsIntegrationsBillingArgs', 'AwsIntegrationsBillingArgsDict']]] = None,
            cloudfront: Optional[pulumi.Input[Union['AwsIntegrationsCloudfrontArgs', 'AwsIntegrationsCloudfrontArgsDict']]] = None,
            cloudtrail: Optional[pulumi.Input[Union['AwsIntegrationsCloudtrailArgs', 'AwsIntegrationsCloudtrailArgsDict']]] = None,
            doc_db: Optional[pulumi.Input[Union['AwsIntegrationsDocDbArgs', 'AwsIntegrationsDocDbArgsDict']]] = None,
            dynamodb: Optional[pulumi.Input[Union['AwsIntegrationsDynamodbArgs', 'AwsIntegrationsDynamodbArgsDict']]] = None,
            ebs: Optional[pulumi.Input[Union['AwsIntegrationsEbsArgs', 'AwsIntegrationsEbsArgsDict']]] = None,
            ec2: Optional[pulumi.Input[Union['AwsIntegrationsEc2Args', 'AwsIntegrationsEc2ArgsDict']]] = None,
            ecs: Optional[pulumi.Input[Union['AwsIntegrationsEcsArgs', 'AwsIntegrationsEcsArgsDict']]] = None,
            efs: Optional[pulumi.Input[Union['AwsIntegrationsEfsArgs', 'AwsIntegrationsEfsArgsDict']]] = None,
            elasticache: Optional[pulumi.Input[Union['AwsIntegrationsElasticacheArgs', 'AwsIntegrationsElasticacheArgsDict']]] = None,
            elasticbeanstalk: Optional[pulumi.Input[Union['AwsIntegrationsElasticbeanstalkArgs', 'AwsIntegrationsElasticbeanstalkArgsDict']]] = None,
            elasticsearch: Optional[pulumi.Input[Union['AwsIntegrationsElasticsearchArgs', 'AwsIntegrationsElasticsearchArgsDict']]] = None,
            elb: Optional[pulumi.Input[Union['AwsIntegrationsElbArgs', 'AwsIntegrationsElbArgsDict']]] = None,
            emr: Optional[pulumi.Input[Union['AwsIntegrationsEmrArgs', 'AwsIntegrationsEmrArgsDict']]] = None,
            health: Optional[pulumi.Input[Union['AwsIntegrationsHealthArgs', 'AwsIntegrationsHealthArgsDict']]] = None,
            iam: Optional[pulumi.Input[Union['AwsIntegrationsIamArgs', 'AwsIntegrationsIamArgsDict']]] = None,
            iot: Optional[pulumi.Input[Union['AwsIntegrationsIotArgs', 'AwsIntegrationsIotArgsDict']]] = None,
            kinesis: Optional[pulumi.Input[Union['AwsIntegrationsKinesisArgs', 'AwsIntegrationsKinesisArgsDict']]] = None,
            kinesis_firehose: Optional[pulumi.Input[Union['AwsIntegrationsKinesisFirehoseArgs', 'AwsIntegrationsKinesisFirehoseArgsDict']]] = None,
            lambda_: Optional[pulumi.Input[Union['AwsIntegrationsLambdaArgs', 'AwsIntegrationsLambdaArgsDict']]] = None,
            linked_account_id: Optional[pulumi.Input[str]] = None,
            rds: Optional[pulumi.Input[Union['AwsIntegrationsRdsArgs', 'AwsIntegrationsRdsArgsDict']]] = None,
            redshift: Optional[pulumi.Input[Union['AwsIntegrationsRedshiftArgs', 'AwsIntegrationsRedshiftArgsDict']]] = None,
            route53: Optional[pulumi.Input[Union['AwsIntegrationsRoute53Args', 'AwsIntegrationsRoute53ArgsDict']]] = None,
            s3: Optional[pulumi.Input[Union['AwsIntegrationsS3Args', 'AwsIntegrationsS3ArgsDict']]] = None,
            ses: Optional[pulumi.Input[Union['AwsIntegrationsSesArgs', 'AwsIntegrationsSesArgsDict']]] = None,
            sns: Optional[pulumi.Input[Union['AwsIntegrationsSnsArgs', 'AwsIntegrationsSnsArgsDict']]] = None,
            sqs: Optional[pulumi.Input[Union['AwsIntegrationsSqsArgs', 'AwsIntegrationsSqsArgsDict']]] = None,
            trusted_advisor: Optional[pulumi.Input[Union['AwsIntegrationsTrustedAdvisorArgs', 'AwsIntegrationsTrustedAdvisorArgsDict']]] = None,
            vpc: Optional[pulumi.Input[Union['AwsIntegrationsVpcArgs', 'AwsIntegrationsVpcArgsDict']]] = None,
            x_ray: Optional[pulumi.Input[Union['AwsIntegrationsXRayArgs', 'AwsIntegrationsXRayArgsDict']]] = None) -> 'AwsIntegrations':
        """
        Get an existing AwsIntegrations resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        :param pulumi.Input[Union['AwsIntegrationsAlbArgs', 'AwsIntegrationsAlbArgsDict']] alb: ALB integration
        :param pulumi.Input[Union['AwsIntegrationsApiGatewayArgs', 'AwsIntegrationsApiGatewayArgsDict']] api_gateway: API Gateway integration
        :param pulumi.Input[Union['AwsIntegrationsAutoScalingArgs', 'AwsIntegrationsAutoScalingArgsDict']] auto_scaling: AutoScaling integration
        :param pulumi.Input[Union['AwsIntegrationsAwsAppSyncArgs', 'AwsIntegrationsAwsAppSyncArgsDict']] aws_app_sync: Aws Appsync integration
        :param pulumi.Input[Union['AwsIntegrationsAwsAthenaArgs', 'AwsIntegrationsAwsAthenaArgsDict']] aws_athena: Aws Athena integration
        :param pulumi.Input[Union['AwsIntegrationsAwsCognitoArgs', 'AwsIntegrationsAwsCognitoArgsDict']] aws_cognito: Aws Cognito integration
        :param pulumi.Input[Union['AwsIntegrationsAwsConnectArgs', 'AwsIntegrationsAwsConnectArgsDict']] aws_connect: Aws Connect integration
        :param pulumi.Input[Union['AwsIntegrationsAwsDirectConnectArgs', 'AwsIntegrationsAwsDirectConnectArgsDict']] aws_direct_connect: Aws Direct Connect integration
        :param pulumi.Input[Union['AwsIntegrationsAwsFsxArgs', 'AwsIntegrationsAwsFsxArgsDict']] aws_fsx: Aws Fsx integration
        :param pulumi.Input[Union['AwsIntegrationsAwsGlueArgs', 'AwsIntegrationsAwsGlueArgsDict']] aws_glue: Aws Glue integration
        :param pulumi.Input[Union['AwsIntegrationsAwsKinesisAnalyticsArgs', 'AwsIntegrationsAwsKinesisAnalyticsArgsDict']] aws_kinesis_analytics: Aws Kinesis Analytics integration
        :param pulumi.Input[Union['AwsIntegrationsAwsMediaConvertArgs', 'AwsIntegrationsAwsMediaConvertArgsDict']] aws_media_convert: Aws Media Convert integration
        :param pulumi.Input[Union['AwsIntegrationsAwsMediaPackageVodArgs', 'AwsIntegrationsAwsMediaPackageVodArgsDict']] aws_media_package_vod: Aws Media PackageVod integration
        :param pulumi.Input[Union['AwsIntegrationsAwsMqArgs', 'AwsIntegrationsAwsMqArgsDict']] aws_mq: Aws Mq integration
        :param pulumi.Input[Union['AwsIntegrationsAwsMskArgs', 'AwsIntegrationsAwsMskArgsDict']] aws_msk: Aws Msk integration
        :param pulumi.Input[Union['AwsIntegrationsAwsNeptuneArgs', 'AwsIntegrationsAwsNeptuneArgsDict']] aws_neptune: Aws Neptune integration
        :param pulumi.Input[Union['AwsIntegrationsAwsQldbArgs', 'AwsIntegrationsAwsQldbArgsDict']] aws_qldb: Aws Qldb integration
        :param pulumi.Input[Union['AwsIntegrationsAwsRoute53resolverArgs', 'AwsIntegrationsAwsRoute53resolverArgsDict']] aws_route53resolver: Aws Route53resolver integration
        :param pulumi.Input[Union['AwsIntegrationsAwsStatesArgs', 'AwsIntegrationsAwsStatesArgsDict']] aws_states: Aws states integration
        :param pulumi.Input[Union['AwsIntegrationsAwsTransitGatewayArgs', 'AwsIntegrationsAwsTransitGatewayArgsDict']] aws_transit_gateway: Aws Transit Gateway integration
        :param pulumi.Input[Union['AwsIntegrationsAwsWafArgs', 'AwsIntegrationsAwsWafArgsDict']] aws_waf: Aws Waf integration
        :param pulumi.Input[Union['AwsIntegrationsAwsWafv2Args', 'AwsIntegrationsAwsWafv2ArgsDict']] aws_wafv2: Aws Wafv2 integration
        :param pulumi.Input[Union['AwsIntegrationsBillingArgs', 'AwsIntegrationsBillingArgsDict']] billing: Billing integration
        :param pulumi.Input[Union['AwsIntegrationsCloudfrontArgs', 'AwsIntegrationsCloudfrontArgsDict']] cloudfront: Cloudfront integration
        :param pulumi.Input[Union['AwsIntegrationsCloudtrailArgs', 'AwsIntegrationsCloudtrailArgsDict']] cloudtrail: CloudTrail integration
        :param pulumi.Input[Union['AwsIntegrationsDocDbArgs', 'AwsIntegrationsDocDbArgsDict']] doc_db: Doc DB integration
        :param pulumi.Input[Union['AwsIntegrationsDynamodbArgs', 'AwsIntegrationsDynamodbArgsDict']] dynamodb: Dynamo DB integration
        :param pulumi.Input[Union['AwsIntegrationsEbsArgs', 'AwsIntegrationsEbsArgsDict']] ebs: EBS integration
        :param pulumi.Input[Union['AwsIntegrationsEc2Args', 'AwsIntegrationsEc2ArgsDict']] ec2: Ec2 integration
        :param pulumi.Input[Union['AwsIntegrationsEcsArgs', 'AwsIntegrationsEcsArgsDict']] ecs: Ecs integration
        :param pulumi.Input[Union['AwsIntegrationsEfsArgs', 'AwsIntegrationsEfsArgsDict']] efs: Efs integration
        :param pulumi.Input[Union['AwsIntegrationsElasticacheArgs', 'AwsIntegrationsElasticacheArgsDict']] elasticache: Elasticache integration
        :param pulumi.Input[Union['AwsIntegrationsElasticbeanstalkArgs', 'AwsIntegrationsElasticbeanstalkArgsDict']] elasticbeanstalk: Elastic Bean Stalk integration
        :param pulumi.Input[Union['AwsIntegrationsElasticsearchArgs', 'AwsIntegrationsElasticsearchArgsDict']] elasticsearch: Elastic Search integration
        :param pulumi.Input[Union['AwsIntegrationsElbArgs', 'AwsIntegrationsElbArgsDict']] elb: Elb integration
        :param pulumi.Input[Union['AwsIntegrationsEmrArgs', 'AwsIntegrationsEmrArgsDict']] emr: Emr integration
        :param pulumi.Input[Union['AwsIntegrationsHealthArgs', 'AwsIntegrationsHealthArgsDict']] health: Health integration
        :param pulumi.Input[Union['AwsIntegrationsIamArgs', 'AwsIntegrationsIamArgsDict']] iam: Iam integration
        :param pulumi.Input[Union['AwsIntegrationsIotArgs', 'AwsIntegrationsIotArgsDict']] iot: Iot integration
        :param pulumi.Input[Union['AwsIntegrationsKinesisArgs', 'AwsIntegrationsKinesisArgsDict']] kinesis: Kinesis integration
        :param pulumi.Input[Union['AwsIntegrationsKinesisFirehoseArgs', 'AwsIntegrationsKinesisFirehoseArgsDict']] kinesis_firehose: Kinesis Firehose integration
        :param pulumi.Input[Union['AwsIntegrationsLambdaArgs', 'AwsIntegrationsLambdaArgsDict']] lambda_: Lambda integration
        :param pulumi.Input[str] linked_account_id: The ID of the linked AWS account in New Relic.
        :param pulumi.Input[Union['AwsIntegrationsRdsArgs', 'AwsIntegrationsRdsArgsDict']] rds: Rds integration
        :param pulumi.Input[Union['AwsIntegrationsRedshiftArgs', 'AwsIntegrationsRedshiftArgsDict']] redshift: Redshift integration
        :param pulumi.Input[Union['AwsIntegrationsRoute53Args', 'AwsIntegrationsRoute53ArgsDict']] route53: Route53 integration
        :param pulumi.Input[Union['AwsIntegrationsS3Args', 'AwsIntegrationsS3ArgsDict']] s3: S3 integration
        :param pulumi.Input[Union['AwsIntegrationsSesArgs', 'AwsIntegrationsSesArgsDict']] ses: Ses integration
        :param pulumi.Input[Union['AwsIntegrationsSnsArgs', 'AwsIntegrationsSnsArgsDict']] sns: Sns integration
        :param pulumi.Input[Union['AwsIntegrationsSqsArgs', 'AwsIntegrationsSqsArgsDict']] sqs: SQS integration
        :param pulumi.Input[Union['AwsIntegrationsTrustedAdvisorArgs', 'AwsIntegrationsTrustedAdvisorArgsDict']] trusted_advisor: Trusted Advisor integration
        :param pulumi.Input[Union['AwsIntegrationsVpcArgs', 'AwsIntegrationsVpcArgsDict']] vpc: VPC integration
        :param pulumi.Input[Union['AwsIntegrationsXRayArgs', 'AwsIntegrationsXRayArgsDict']] x_ray: X-Ray integration
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AwsIntegrationsState.__new__(_AwsIntegrationsState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["alb"] = alb
        __props__.__dict__["api_gateway"] = api_gateway
        __props__.__dict__["auto_scaling"] = auto_scaling
        __props__.__dict__["aws_app_sync"] = aws_app_sync
        __props__.__dict__["aws_athena"] = aws_athena
        __props__.__dict__["aws_cognito"] = aws_cognito
        __props__.__dict__["aws_connect"] = aws_connect
        __props__.__dict__["aws_direct_connect"] = aws_direct_connect
        __props__.__dict__["aws_fsx"] = aws_fsx
        __props__.__dict__["aws_glue"] = aws_glue
        __props__.__dict__["aws_kinesis_analytics"] = aws_kinesis_analytics
        __props__.__dict__["aws_media_convert"] = aws_media_convert
        __props__.__dict__["aws_media_package_vod"] = aws_media_package_vod
        __props__.__dict__["aws_mq"] = aws_mq
        __props__.__dict__["aws_msk"] = aws_msk
        __props__.__dict__["aws_neptune"] = aws_neptune
        __props__.__dict__["aws_qldb"] = aws_qldb
        __props__.__dict__["aws_route53resolver"] = aws_route53resolver
        __props__.__dict__["aws_states"] = aws_states
        __props__.__dict__["aws_transit_gateway"] = aws_transit_gateway
        __props__.__dict__["aws_waf"] = aws_waf
        __props__.__dict__["aws_wafv2"] = aws_wafv2
        __props__.__dict__["billing"] = billing
        __props__.__dict__["cloudfront"] = cloudfront
        __props__.__dict__["cloudtrail"] = cloudtrail
        __props__.__dict__["doc_db"] = doc_db
        __props__.__dict__["dynamodb"] = dynamodb
        __props__.__dict__["ebs"] = ebs
        __props__.__dict__["ec2"] = ec2
        __props__.__dict__["ecs"] = ecs
        __props__.__dict__["efs"] = efs
        __props__.__dict__["elasticache"] = elasticache
        __props__.__dict__["elasticbeanstalk"] = elasticbeanstalk
        __props__.__dict__["elasticsearch"] = elasticsearch
        __props__.__dict__["elb"] = elb
        __props__.__dict__["emr"] = emr
        __props__.__dict__["health"] = health
        __props__.__dict__["iam"] = iam
        __props__.__dict__["iot"] = iot
        __props__.__dict__["kinesis"] = kinesis
        __props__.__dict__["kinesis_firehose"] = kinesis_firehose
        __props__.__dict__["lambda_"] = lambda_
        __props__.__dict__["linked_account_id"] = linked_account_id
        __props__.__dict__["rds"] = rds
        __props__.__dict__["redshift"] = redshift
        __props__.__dict__["route53"] = route53
        __props__.__dict__["s3"] = s3
        __props__.__dict__["ses"] = ses
        __props__.__dict__["sns"] = sns
        __props__.__dict__["sqs"] = sqs
        __props__.__dict__["trusted_advisor"] = trusted_advisor
        __props__.__dict__["vpc"] = vpc
        __props__.__dict__["x_ray"] = x_ray
        return AwsIntegrations(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def alb(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAlb']]:
        """
        ALB integration
        """
        return pulumi.get(self, "alb")

    @property
    @pulumi.getter(name="apiGateway")
    def api_gateway(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsApiGateway']]:
        """
        API Gateway integration
        """
        return pulumi.get(self, "api_gateway")

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAutoScaling']]:
        """
        AutoScaling integration
        """
        return pulumi.get(self, "auto_scaling")

    @property
    @pulumi.getter(name="awsAppSync")
    def aws_app_sync(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsAppSync']]:
        """
        Aws Appsync integration
        """
        return pulumi.get(self, "aws_app_sync")

    @property
    @pulumi.getter(name="awsAthena")
    def aws_athena(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsAthena']]:
        """
        Aws Athena integration
        """
        return pulumi.get(self, "aws_athena")

    @property
    @pulumi.getter(name="awsCognito")
    def aws_cognito(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsCognito']]:
        """
        Aws Cognito integration
        """
        return pulumi.get(self, "aws_cognito")

    @property
    @pulumi.getter(name="awsConnect")
    def aws_connect(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsConnect']]:
        """
        Aws Connect integration
        """
        return pulumi.get(self, "aws_connect")

    @property
    @pulumi.getter(name="awsDirectConnect")
    def aws_direct_connect(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsDirectConnect']]:
        """
        Aws Direct Connect integration
        """
        return pulumi.get(self, "aws_direct_connect")

    @property
    @pulumi.getter(name="awsFsx")
    def aws_fsx(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsFsx']]:
        """
        Aws Fsx integration
        """
        return pulumi.get(self, "aws_fsx")

    @property
    @pulumi.getter(name="awsGlue")
    def aws_glue(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsGlue']]:
        """
        Aws Glue integration
        """
        return pulumi.get(self, "aws_glue")

    @property
    @pulumi.getter(name="awsKinesisAnalytics")
    def aws_kinesis_analytics(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsKinesisAnalytics']]:
        """
        Aws Kinesis Analytics integration
        """
        return pulumi.get(self, "aws_kinesis_analytics")

    @property
    @pulumi.getter(name="awsMediaConvert")
    def aws_media_convert(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsMediaConvert']]:
        """
        Aws Media Convert integration
        """
        return pulumi.get(self, "aws_media_convert")

    @property
    @pulumi.getter(name="awsMediaPackageVod")
    def aws_media_package_vod(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsMediaPackageVod']]:
        """
        Aws Media PackageVod integration
        """
        return pulumi.get(self, "aws_media_package_vod")

    @property
    @pulumi.getter(name="awsMq")
    def aws_mq(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsMq']]:
        """
        Aws Mq integration
        """
        return pulumi.get(self, "aws_mq")

    @property
    @pulumi.getter(name="awsMsk")
    def aws_msk(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsMsk']]:
        """
        Aws Msk integration
        """
        return pulumi.get(self, "aws_msk")

    @property
    @pulumi.getter(name="awsNeptune")
    def aws_neptune(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsNeptune']]:
        """
        Aws Neptune integration
        """
        return pulumi.get(self, "aws_neptune")

    @property
    @pulumi.getter(name="awsQldb")
    def aws_qldb(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsQldb']]:
        """
        Aws Qldb integration
        """
        return pulumi.get(self, "aws_qldb")

    @property
    @pulumi.getter(name="awsRoute53resolver")
    def aws_route53resolver(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsRoute53resolver']]:
        """
        Aws Route53resolver integration
        """
        return pulumi.get(self, "aws_route53resolver")

    @property
    @pulumi.getter(name="awsStates")
    def aws_states(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsStates']]:
        """
        Aws states integration
        """
        return pulumi.get(self, "aws_states")

    @property
    @pulumi.getter(name="awsTransitGateway")
    def aws_transit_gateway(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsTransitGateway']]:
        """
        Aws Transit Gateway integration
        """
        return pulumi.get(self, "aws_transit_gateway")

    @property
    @pulumi.getter(name="awsWaf")
    def aws_waf(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsWaf']]:
        """
        Aws Waf integration
        """
        return pulumi.get(self, "aws_waf")

    @property
    @pulumi.getter(name="awsWafv2")
    def aws_wafv2(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsAwsWafv2']]:
        """
        Aws Wafv2 integration
        """
        return pulumi.get(self, "aws_wafv2")

    @property
    @pulumi.getter
    def billing(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsBilling']]:
        """
        Billing integration
        """
        return pulumi.get(self, "billing")

    @property
    @pulumi.getter
    def cloudfront(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsCloudfront']]:
        """
        Cloudfront integration
        """
        return pulumi.get(self, "cloudfront")

    @property
    @pulumi.getter
    def cloudtrail(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsCloudtrail']]:
        """
        CloudTrail integration
        """
        return pulumi.get(self, "cloudtrail")

    @property
    @pulumi.getter(name="docDb")
    def doc_db(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsDocDb']]:
        """
        Doc DB integration
        """
        return pulumi.get(self, "doc_db")

    @property
    @pulumi.getter
    def dynamodb(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsDynamodb']]:
        """
        Dynamo DB integration
        """
        return pulumi.get(self, "dynamodb")

    @property
    @pulumi.getter
    def ebs(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsEbs']]:
        """
        EBS integration
        """
        return pulumi.get(self, "ebs")

    @property
    @pulumi.getter
    def ec2(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsEc2']]:
        """
        Ec2 integration
        """
        return pulumi.get(self, "ec2")

    @property
    @pulumi.getter
    def ecs(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsEcs']]:
        """
        Ecs integration
        """
        return pulumi.get(self, "ecs")

    @property
    @pulumi.getter
    def efs(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsEfs']]:
        """
        Efs integration
        """
        return pulumi.get(self, "efs")

    @property
    @pulumi.getter
    def elasticache(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsElasticache']]:
        """
        Elasticache integration
        """
        return pulumi.get(self, "elasticache")

    @property
    @pulumi.getter
    def elasticbeanstalk(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsElasticbeanstalk']]:
        """
        Elastic Bean Stalk integration
        """
        return pulumi.get(self, "elasticbeanstalk")

    @property
    @pulumi.getter
    def elasticsearch(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsElasticsearch']]:
        """
        Elastic Search integration
        """
        return pulumi.get(self, "elasticsearch")

    @property
    @pulumi.getter
    def elb(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsElb']]:
        """
        Elb integration
        """
        return pulumi.get(self, "elb")

    @property
    @pulumi.getter
    def emr(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsEmr']]:
        """
        Emr integration
        """
        return pulumi.get(self, "emr")

    @property
    @pulumi.getter
    def health(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsHealth']]:
        """
        Health integration
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def iam(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsIam']]:
        """
        Iam integration
        """
        return pulumi.get(self, "iam")

    @property
    @pulumi.getter
    def iot(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsIot']]:
        """
        Iot integration
        """
        return pulumi.get(self, "iot")

    @property
    @pulumi.getter
    def kinesis(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsKinesis']]:
        """
        Kinesis integration
        """
        return pulumi.get(self, "kinesis")

    @property
    @pulumi.getter(name="kinesisFirehose")
    def kinesis_firehose(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsKinesisFirehose']]:
        """
        Kinesis Firehose integration
        """
        return pulumi.get(self, "kinesis_firehose")

    @property
    @pulumi.getter(name="lambda")
    def lambda_(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsLambda']]:
        """
        Lambda integration
        """
        return pulumi.get(self, "lambda_")

    @property
    @pulumi.getter(name="linkedAccountId")
    def linked_account_id(self) -> pulumi.Output[str]:
        """
        The ID of the linked AWS account in New Relic.
        """
        return pulumi.get(self, "linked_account_id")

    @property
    @pulumi.getter
    def rds(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsRds']]:
        """
        Rds integration
        """
        return pulumi.get(self, "rds")

    @property
    @pulumi.getter
    def redshift(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsRedshift']]:
        """
        Redshift integration
        """
        return pulumi.get(self, "redshift")

    @property
    @pulumi.getter
    def route53(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsRoute53']]:
        """
        Route53 integration
        """
        return pulumi.get(self, "route53")

    @property
    @pulumi.getter
    def s3(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsS3']]:
        """
        S3 integration
        """
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter
    def ses(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsSes']]:
        """
        Ses integration
        """
        return pulumi.get(self, "ses")

    @property
    @pulumi.getter
    def sns(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsSns']]:
        """
        Sns integration
        """
        return pulumi.get(self, "sns")

    @property
    @pulumi.getter
    def sqs(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsSqs']]:
        """
        SQS integration
        """
        return pulumi.get(self, "sqs")

    @property
    @pulumi.getter(name="trustedAdvisor")
    def trusted_advisor(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsTrustedAdvisor']]:
        """
        Trusted Advisor integration
        """
        return pulumi.get(self, "trusted_advisor")

    @property
    @pulumi.getter
    def vpc(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsVpc']]:
        """
        VPC integration
        """
        return pulumi.get(self, "vpc")

    @property
    @pulumi.getter(name="xRay")
    def x_ray(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsXRay']]:
        """
        X-Ray integration
        """
        return pulumi.get(self, "x_ray")

