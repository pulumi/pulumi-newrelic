# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AwsIntegrationsArgs', 'AwsIntegrations']

@pulumi.input_type
class AwsIntegrationsArgs:
    def __init__(__self__, *,
                 linked_account_id: pulumi.Input[int],
                 account_id: Optional[pulumi.Input[int]] = None,
                 billing: Optional[pulumi.Input['AwsIntegrationsBillingArgs']] = None,
                 cloudtrail: Optional[pulumi.Input['AwsIntegrationsCloudtrailArgs']] = None,
                 health: Optional[pulumi.Input['AwsIntegrationsHealthArgs']] = None,
                 trusted_advisor: Optional[pulumi.Input['AwsIntegrationsTrustedAdvisorArgs']] = None,
                 vpc: Optional[pulumi.Input['AwsIntegrationsVpcArgs']] = None,
                 x_ray: Optional[pulumi.Input['AwsIntegrationsXRayArgs']] = None):
        """
        The set of arguments for constructing a AwsIntegrations resource.
        :param pulumi.Input[int] linked_account_id: The ID of the linked AWS account in New Relic.
        :param pulumi.Input[int] account_id: The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        :param pulumi.Input['AwsIntegrationsBillingArgs'] billing: Billing integration. See Integration blocks below for details.
        :param pulumi.Input['AwsIntegrationsCloudtrailArgs'] cloudtrail: Cloudtrail integration. See Integration blocks below for details.
        :param pulumi.Input['AwsIntegrationsHealthArgs'] health: Health integration. See Integration blocks below for details.
        :param pulumi.Input['AwsIntegrationsTrustedAdvisorArgs'] trusted_advisor: Trusted Advisor integration. See Integration blocks below for details.
        :param pulumi.Input['AwsIntegrationsVpcArgs'] vpc: VPC integration. See Integration blocks below for details.
        :param pulumi.Input['AwsIntegrationsXRayArgs'] x_ray: X-Ray integration. See Integration blocks below for details.
        """
        pulumi.set(__self__, "linked_account_id", linked_account_id)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if billing is not None:
            pulumi.set(__self__, "billing", billing)
        if cloudtrail is not None:
            pulumi.set(__self__, "cloudtrail", cloudtrail)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if trusted_advisor is not None:
            pulumi.set(__self__, "trusted_advisor", trusted_advisor)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)
        if x_ray is not None:
            pulumi.set(__self__, "x_ray", x_ray)

    @property
    @pulumi.getter(name="linkedAccountId")
    def linked_account_id(self) -> pulumi.Input[int]:
        """
        The ID of the linked AWS account in New Relic.
        """
        return pulumi.get(self, "linked_account_id")

    @linked_account_id.setter
    def linked_account_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "linked_account_id", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[int]]:
        """
        The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def billing(self) -> Optional[pulumi.Input['AwsIntegrationsBillingArgs']]:
        """
        Billing integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "billing")

    @billing.setter
    def billing(self, value: Optional[pulumi.Input['AwsIntegrationsBillingArgs']]):
        pulumi.set(self, "billing", value)

    @property
    @pulumi.getter
    def cloudtrail(self) -> Optional[pulumi.Input['AwsIntegrationsCloudtrailArgs']]:
        """
        Cloudtrail integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "cloudtrail")

    @cloudtrail.setter
    def cloudtrail(self, value: Optional[pulumi.Input['AwsIntegrationsCloudtrailArgs']]):
        pulumi.set(self, "cloudtrail", value)

    @property
    @pulumi.getter
    def health(self) -> Optional[pulumi.Input['AwsIntegrationsHealthArgs']]:
        """
        Health integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "health")

    @health.setter
    def health(self, value: Optional[pulumi.Input['AwsIntegrationsHealthArgs']]):
        pulumi.set(self, "health", value)

    @property
    @pulumi.getter(name="trustedAdvisor")
    def trusted_advisor(self) -> Optional[pulumi.Input['AwsIntegrationsTrustedAdvisorArgs']]:
        """
        Trusted Advisor integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "trusted_advisor")

    @trusted_advisor.setter
    def trusted_advisor(self, value: Optional[pulumi.Input['AwsIntegrationsTrustedAdvisorArgs']]):
        pulumi.set(self, "trusted_advisor", value)

    @property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input['AwsIntegrationsVpcArgs']]:
        """
        VPC integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input['AwsIntegrationsVpcArgs']]):
        pulumi.set(self, "vpc", value)

    @property
    @pulumi.getter(name="xRay")
    def x_ray(self) -> Optional[pulumi.Input['AwsIntegrationsXRayArgs']]:
        """
        X-Ray integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "x_ray")

    @x_ray.setter
    def x_ray(self, value: Optional[pulumi.Input['AwsIntegrationsXRayArgs']]):
        pulumi.set(self, "x_ray", value)


@pulumi.input_type
class _AwsIntegrationsState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[int]] = None,
                 billing: Optional[pulumi.Input['AwsIntegrationsBillingArgs']] = None,
                 cloudtrail: Optional[pulumi.Input['AwsIntegrationsCloudtrailArgs']] = None,
                 health: Optional[pulumi.Input['AwsIntegrationsHealthArgs']] = None,
                 linked_account_id: Optional[pulumi.Input[int]] = None,
                 trusted_advisor: Optional[pulumi.Input['AwsIntegrationsTrustedAdvisorArgs']] = None,
                 vpc: Optional[pulumi.Input['AwsIntegrationsVpcArgs']] = None,
                 x_ray: Optional[pulumi.Input['AwsIntegrationsXRayArgs']] = None):
        """
        Input properties used for looking up and filtering AwsIntegrations resources.
        :param pulumi.Input[int] account_id: The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        :param pulumi.Input['AwsIntegrationsBillingArgs'] billing: Billing integration. See Integration blocks below for details.
        :param pulumi.Input['AwsIntegrationsCloudtrailArgs'] cloudtrail: Cloudtrail integration. See Integration blocks below for details.
        :param pulumi.Input['AwsIntegrationsHealthArgs'] health: Health integration. See Integration blocks below for details.
        :param pulumi.Input[int] linked_account_id: The ID of the linked AWS account in New Relic.
        :param pulumi.Input['AwsIntegrationsTrustedAdvisorArgs'] trusted_advisor: Trusted Advisor integration. See Integration blocks below for details.
        :param pulumi.Input['AwsIntegrationsVpcArgs'] vpc: VPC integration. See Integration blocks below for details.
        :param pulumi.Input['AwsIntegrationsXRayArgs'] x_ray: X-Ray integration. See Integration blocks below for details.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if billing is not None:
            pulumi.set(__self__, "billing", billing)
        if cloudtrail is not None:
            pulumi.set(__self__, "cloudtrail", cloudtrail)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if linked_account_id is not None:
            pulumi.set(__self__, "linked_account_id", linked_account_id)
        if trusted_advisor is not None:
            pulumi.set(__self__, "trusted_advisor", trusted_advisor)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)
        if x_ray is not None:
            pulumi.set(__self__, "x_ray", x_ray)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[int]]:
        """
        The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def billing(self) -> Optional[pulumi.Input['AwsIntegrationsBillingArgs']]:
        """
        Billing integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "billing")

    @billing.setter
    def billing(self, value: Optional[pulumi.Input['AwsIntegrationsBillingArgs']]):
        pulumi.set(self, "billing", value)

    @property
    @pulumi.getter
    def cloudtrail(self) -> Optional[pulumi.Input['AwsIntegrationsCloudtrailArgs']]:
        """
        Cloudtrail integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "cloudtrail")

    @cloudtrail.setter
    def cloudtrail(self, value: Optional[pulumi.Input['AwsIntegrationsCloudtrailArgs']]):
        pulumi.set(self, "cloudtrail", value)

    @property
    @pulumi.getter
    def health(self) -> Optional[pulumi.Input['AwsIntegrationsHealthArgs']]:
        """
        Health integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "health")

    @health.setter
    def health(self, value: Optional[pulumi.Input['AwsIntegrationsHealthArgs']]):
        pulumi.set(self, "health", value)

    @property
    @pulumi.getter(name="linkedAccountId")
    def linked_account_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the linked AWS account in New Relic.
        """
        return pulumi.get(self, "linked_account_id")

    @linked_account_id.setter
    def linked_account_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "linked_account_id", value)

    @property
    @pulumi.getter(name="trustedAdvisor")
    def trusted_advisor(self) -> Optional[pulumi.Input['AwsIntegrationsTrustedAdvisorArgs']]:
        """
        Trusted Advisor integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "trusted_advisor")

    @trusted_advisor.setter
    def trusted_advisor(self, value: Optional[pulumi.Input['AwsIntegrationsTrustedAdvisorArgs']]):
        pulumi.set(self, "trusted_advisor", value)

    @property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input['AwsIntegrationsVpcArgs']]:
        """
        VPC integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input['AwsIntegrationsVpcArgs']]):
        pulumi.set(self, "vpc", value)

    @property
    @pulumi.getter(name="xRay")
    def x_ray(self) -> Optional[pulumi.Input['AwsIntegrationsXRayArgs']]:
        """
        X-Ray integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "x_ray")

    @x_ray.setter
    def x_ray(self, value: Optional[pulumi.Input['AwsIntegrationsXRayArgs']]):
        pulumi.set(self, "x_ray", value)


class AwsIntegrations(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[int]] = None,
                 billing: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsBillingArgs']]] = None,
                 cloudtrail: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsCloudtrailArgs']]] = None,
                 health: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsHealthArgs']]] = None,
                 linked_account_id: Optional[pulumi.Input[int]] = None,
                 trusted_advisor: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsTrustedAdvisorArgs']]] = None,
                 vpc: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsVpcArgs']]] = None,
                 x_ray: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsXRayArgs']]] = None,
                 __props__=None):
        """
        ## Import

        Linked AWS account integrations can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import newrelic:cloud/awsIntegrations:AwsIntegrations foo <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] account_id: The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        :param pulumi.Input[pulumi.InputType['AwsIntegrationsBillingArgs']] billing: Billing integration. See Integration blocks below for details.
        :param pulumi.Input[pulumi.InputType['AwsIntegrationsCloudtrailArgs']] cloudtrail: Cloudtrail integration. See Integration blocks below for details.
        :param pulumi.Input[pulumi.InputType['AwsIntegrationsHealthArgs']] health: Health integration. See Integration blocks below for details.
        :param pulumi.Input[int] linked_account_id: The ID of the linked AWS account in New Relic.
        :param pulumi.Input[pulumi.InputType['AwsIntegrationsTrustedAdvisorArgs']] trusted_advisor: Trusted Advisor integration. See Integration blocks below for details.
        :param pulumi.Input[pulumi.InputType['AwsIntegrationsVpcArgs']] vpc: VPC integration. See Integration blocks below for details.
        :param pulumi.Input[pulumi.InputType['AwsIntegrationsXRayArgs']] x_ray: X-Ray integration. See Integration blocks below for details.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AwsIntegrationsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        Linked AWS account integrations can be imported using the `id`, e.g. bash

        ```sh
         $ pulumi import newrelic:cloud/awsIntegrations:AwsIntegrations foo <id>
        ```

        :param str resource_name: The name of the resource.
        :param AwsIntegrationsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AwsIntegrationsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[int]] = None,
                 billing: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsBillingArgs']]] = None,
                 cloudtrail: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsCloudtrailArgs']]] = None,
                 health: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsHealthArgs']]] = None,
                 linked_account_id: Optional[pulumi.Input[int]] = None,
                 trusted_advisor: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsTrustedAdvisorArgs']]] = None,
                 vpc: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsVpcArgs']]] = None,
                 x_ray: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsXRayArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AwsIntegrationsArgs.__new__(AwsIntegrationsArgs)

            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["billing"] = billing
            __props__.__dict__["cloudtrail"] = cloudtrail
            __props__.__dict__["health"] = health
            if linked_account_id is None and not opts.urn:
                raise TypeError("Missing required property 'linked_account_id'")
            __props__.__dict__["linked_account_id"] = linked_account_id
            __props__.__dict__["trusted_advisor"] = trusted_advisor
            __props__.__dict__["vpc"] = vpc
            __props__.__dict__["x_ray"] = x_ray
        super(AwsIntegrations, __self__).__init__(
            'newrelic:cloud/awsIntegrations:AwsIntegrations',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[int]] = None,
            billing: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsBillingArgs']]] = None,
            cloudtrail: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsCloudtrailArgs']]] = None,
            health: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsHealthArgs']]] = None,
            linked_account_id: Optional[pulumi.Input[int]] = None,
            trusted_advisor: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsTrustedAdvisorArgs']]] = None,
            vpc: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsVpcArgs']]] = None,
            x_ray: Optional[pulumi.Input[pulumi.InputType['AwsIntegrationsXRayArgs']]] = None) -> 'AwsIntegrations':
        """
        Get an existing AwsIntegrations resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] account_id: The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        :param pulumi.Input[pulumi.InputType['AwsIntegrationsBillingArgs']] billing: Billing integration. See Integration blocks below for details.
        :param pulumi.Input[pulumi.InputType['AwsIntegrationsCloudtrailArgs']] cloudtrail: Cloudtrail integration. See Integration blocks below for details.
        :param pulumi.Input[pulumi.InputType['AwsIntegrationsHealthArgs']] health: Health integration. See Integration blocks below for details.
        :param pulumi.Input[int] linked_account_id: The ID of the linked AWS account in New Relic.
        :param pulumi.Input[pulumi.InputType['AwsIntegrationsTrustedAdvisorArgs']] trusted_advisor: Trusted Advisor integration. See Integration blocks below for details.
        :param pulumi.Input[pulumi.InputType['AwsIntegrationsVpcArgs']] vpc: VPC integration. See Integration blocks below for details.
        :param pulumi.Input[pulumi.InputType['AwsIntegrationsXRayArgs']] x_ray: X-Ray integration. See Integration blocks below for details.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AwsIntegrationsState.__new__(_AwsIntegrationsState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["billing"] = billing
        __props__.__dict__["cloudtrail"] = cloudtrail
        __props__.__dict__["health"] = health
        __props__.__dict__["linked_account_id"] = linked_account_id
        __props__.__dict__["trusted_advisor"] = trusted_advisor
        __props__.__dict__["vpc"] = vpc
        __props__.__dict__["x_ray"] = x_ray
        return AwsIntegrations(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[int]:
        """
        The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def billing(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsBilling']]:
        """
        Billing integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "billing")

    @property
    @pulumi.getter
    def cloudtrail(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsCloudtrail']]:
        """
        Cloudtrail integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "cloudtrail")

    @property
    @pulumi.getter
    def health(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsHealth']]:
        """
        Health integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter(name="linkedAccountId")
    def linked_account_id(self) -> pulumi.Output[int]:
        """
        The ID of the linked AWS account in New Relic.
        """
        return pulumi.get(self, "linked_account_id")

    @property
    @pulumi.getter(name="trustedAdvisor")
    def trusted_advisor(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsTrustedAdvisor']]:
        """
        Trusted Advisor integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "trusted_advisor")

    @property
    @pulumi.getter
    def vpc(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsVpc']]:
        """
        VPC integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "vpc")

    @property
    @pulumi.getter(name="xRay")
    def x_ray(self) -> pulumi.Output[Optional['outputs.AwsIntegrationsXRay']]:
        """
        X-Ray integration. See Integration blocks below for details.
        """
        return pulumi.get(self, "x_ray")

