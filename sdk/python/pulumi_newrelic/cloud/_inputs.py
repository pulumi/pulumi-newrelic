# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AwsGovcloudIntegrationsAlbArgs',
    'AwsGovcloudIntegrationsApiGatewayArgs',
    'AwsGovcloudIntegrationsAutoScalingArgs',
    'AwsGovcloudIntegrationsAwsDirectConnectArgs',
    'AwsGovcloudIntegrationsAwsStatesArgs',
    'AwsGovcloudIntegrationsCloudtrailArgs',
    'AwsGovcloudIntegrationsDynamoDbArgs',
    'AwsGovcloudIntegrationsEbsArgs',
    'AwsGovcloudIntegrationsEc2Args',
    'AwsGovcloudIntegrationsElasticSearchArgs',
    'AwsGovcloudIntegrationsElbArgs',
    'AwsGovcloudIntegrationsEmrArgs',
    'AwsGovcloudIntegrationsIamArgs',
    'AwsGovcloudIntegrationsLambdaArgs',
    'AwsGovcloudIntegrationsRdsArgs',
    'AwsGovcloudIntegrationsRedShiftArgs',
    'AwsGovcloudIntegrationsRoute53Args',
    'AwsGovcloudIntegrationsS3Args',
    'AwsGovcloudIntegrationsSnsArgs',
    'AwsGovcloudIntegrationsSqsArgs',
    'AwsIntegrationsAlbArgs',
    'AwsIntegrationsApiGatewayArgs',
    'AwsIntegrationsAutoScalingArgs',
    'AwsIntegrationsAwsAppSyncArgs',
    'AwsIntegrationsAwsAthenaArgs',
    'AwsIntegrationsAwsCognitoArgs',
    'AwsIntegrationsAwsConnectArgs',
    'AwsIntegrationsAwsDirectConnectArgs',
    'AwsIntegrationsAwsFsxArgs',
    'AwsIntegrationsAwsGlueArgs',
    'AwsIntegrationsAwsKinesisAnalyticsArgs',
    'AwsIntegrationsAwsMediaConvertArgs',
    'AwsIntegrationsAwsMediaPackageVodArgs',
    'AwsIntegrationsAwsMqArgs',
    'AwsIntegrationsAwsMskArgs',
    'AwsIntegrationsAwsNeptuneArgs',
    'AwsIntegrationsAwsQldbArgs',
    'AwsIntegrationsAwsRoute53resolverArgs',
    'AwsIntegrationsAwsStatesArgs',
    'AwsIntegrationsAwsTransitGatewayArgs',
    'AwsIntegrationsAwsWafArgs',
    'AwsIntegrationsAwsWafv2Args',
    'AwsIntegrationsBillingArgs',
    'AwsIntegrationsCloudfrontArgs',
    'AwsIntegrationsCloudtrailArgs',
    'AwsIntegrationsDocDbArgs',
    'AwsIntegrationsDynamodbArgs',
    'AwsIntegrationsEbsArgs',
    'AwsIntegrationsEc2Args',
    'AwsIntegrationsEcsArgs',
    'AwsIntegrationsEfsArgs',
    'AwsIntegrationsElasticacheArgs',
    'AwsIntegrationsElasticbeanstalkArgs',
    'AwsIntegrationsElasticsearchArgs',
    'AwsIntegrationsElbArgs',
    'AwsIntegrationsEmrArgs',
    'AwsIntegrationsHealthArgs',
    'AwsIntegrationsIamArgs',
    'AwsIntegrationsIotArgs',
    'AwsIntegrationsKinesisArgs',
    'AwsIntegrationsKinesisFirehoseArgs',
    'AwsIntegrationsLambdaArgs',
    'AwsIntegrationsRdsArgs',
    'AwsIntegrationsRedshiftArgs',
    'AwsIntegrationsRoute53Args',
    'AwsIntegrationsS3Args',
    'AwsIntegrationsSesArgs',
    'AwsIntegrationsSnsArgs',
    'AwsIntegrationsSqsArgs',
    'AwsIntegrationsTrustedAdvisorArgs',
    'AwsIntegrationsVpcArgs',
    'AwsIntegrationsXRayArgs',
    'AzureIntegrationsApiManagementArgs',
    'AzureIntegrationsAppGatewayArgs',
    'AzureIntegrationsAppServiceArgs',
    'AzureIntegrationsContainersArgs',
    'AzureIntegrationsCosmosDbArgs',
    'AzureIntegrationsCostManagementArgs',
    'AzureIntegrationsDataFactoryArgs',
    'AzureIntegrationsEventHubArgs',
    'AzureIntegrationsExpressRouteArgs',
    'AzureIntegrationsFirewallsArgs',
    'AzureIntegrationsFrontDoorArgs',
    'AzureIntegrationsFunctionsArgs',
    'AzureIntegrationsKeyVaultArgs',
    'AzureIntegrationsLoadBalancerArgs',
    'AzureIntegrationsLogicAppsArgs',
    'AzureIntegrationsMachineLearningArgs',
    'AzureIntegrationsMariaDbArgs',
    'AzureIntegrationsMonitorArgs',
    'AzureIntegrationsMysqlArgs',
    'AzureIntegrationsMysqlFlexibleArgs',
    'AzureIntegrationsPostgresqlArgs',
    'AzureIntegrationsPostgresqlFlexibleArgs',
    'AzureIntegrationsPowerBiDedicatedArgs',
    'AzureIntegrationsRedisCacheArgs',
    'AzureIntegrationsServiceBusArgs',
    'AzureIntegrationsSqlArgs',
    'AzureIntegrationsSqlManagedArgs',
    'AzureIntegrationsStorageArgs',
    'AzureIntegrationsVirtualMachineArgs',
    'AzureIntegrationsVirtualNetworksArgs',
    'AzureIntegrationsVmsArgs',
    'AzureIntegrationsVpnGatewayArgs',
    'GcpIntegrationsAlloyDbArgs',
    'GcpIntegrationsAppEngineArgs',
    'GcpIntegrationsBigQueryArgs',
    'GcpIntegrationsBigTableArgs',
    'GcpIntegrationsComposerArgs',
    'GcpIntegrationsDataFlowArgs',
    'GcpIntegrationsDataProcArgs',
    'GcpIntegrationsDataStoreArgs',
    'GcpIntegrationsFireBaseDatabaseArgs',
    'GcpIntegrationsFireBaseHostingArgs',
    'GcpIntegrationsFireBaseStorageArgs',
    'GcpIntegrationsFireStoreArgs',
    'GcpIntegrationsFunctionsArgs',
    'GcpIntegrationsInterconnectArgs',
    'GcpIntegrationsKubernetesArgs',
    'GcpIntegrationsLoadBalancingArgs',
    'GcpIntegrationsMemCacheArgs',
    'GcpIntegrationsPubSubArgs',
    'GcpIntegrationsRedisArgs',
    'GcpIntegrationsRouterArgs',
    'GcpIntegrationsRunArgs',
    'GcpIntegrationsSpannerArgs',
    'GcpIntegrationsSqlArgs',
    'GcpIntegrationsStorageArgs',
    'GcpIntegrationsVirtualMachinesArgs',
    'GcpIntegrationsVpcAccessArgs',
]

@pulumi.input_type
class AwsGovcloudIntegrationsAlbArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 load_balancer_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_prefixes: Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsGovcloudIntegrationsAlbArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_extended_inventory=fetch_extended_inventory,
            fetch_tags=fetch_tags,
            load_balancer_prefixes=load_balancer_prefixes,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             load_balancer_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if load_balancer_prefixes is not None:
            _setter("load_balancer_prefixes", load_balancer_prefixes)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="loadBalancerPrefixes")
    def load_balancer_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "load_balancer_prefixes")

    @load_balancer_prefixes.setter
    def load_balancer_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_prefixes", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsGovcloudIntegrationsApiGatewayArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 stage_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        :param pulumi.Input[Sequence[pulumi.Input[str]]] stage_prefixes: Specify each name or prefix for the Stages that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsGovcloudIntegrationsApiGatewayArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
            stage_prefixes=stage_prefixes,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             stage_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if stage_prefixes is not None:
            _setter("stage_prefixes", stage_prefixes)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="stagePrefixes")
    def stage_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each name or prefix for the Stages that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "stage_prefixes")

    @stage_prefixes.setter
    def stage_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "stage_prefixes", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsGovcloudIntegrationsAutoScalingArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        """
        AwsGovcloudIntegrationsAutoScalingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsGovcloudIntegrationsAwsDirectConnectArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        """
        AwsGovcloudIntegrationsAwsDirectConnectArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsGovcloudIntegrationsAwsStatesArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        """
        AwsGovcloudIntegrationsAwsStatesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsGovcloudIntegrationsCloudtrailArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        """
        AwsGovcloudIntegrationsCloudtrailArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsGovcloudIntegrationsDynamoDbArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsGovcloudIntegrationsDynamoDbArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_extended_inventory=fetch_extended_inventory,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsGovcloudIntegrationsEbsArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsGovcloudIntegrationsEbsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_extended_inventory=fetch_extended_inventory,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsGovcloudIntegrationsEc2Args:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_ip_addresses: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[bool] fetch_ip_addresses: Specify if IP addresses of ec2 instance should be collected
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsGovcloudIntegrationsEc2Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_ip_addresses=fetch_ip_addresses,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_ip_addresses: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_ip_addresses is not None:
            _setter("fetch_ip_addresses", fetch_ip_addresses)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchIpAddresses")
    def fetch_ip_addresses(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if IP addresses of ec2 instance should be collected
        """
        return pulumi.get(self, "fetch_ip_addresses")

    @fetch_ip_addresses.setter
    def fetch_ip_addresses(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_ip_addresses", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsGovcloudIntegrationsElasticSearchArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_nodes: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[bool] fetch_nodes: Specify if metrics should be collected for nodes. Turning it on will increase the number of API calls made to CloudWatch.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsGovcloudIntegrationsElasticSearchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_nodes=fetch_nodes,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_nodes: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_nodes is not None:
            _setter("fetch_nodes", fetch_nodes)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchNodes")
    def fetch_nodes(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if metrics should be collected for nodes. Turning it on will increase the number of API calls made to CloudWatch.
        """
        return pulumi.get(self, "fetch_nodes")

    @fetch_nodes.setter
    def fetch_nodes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_nodes", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsGovcloudIntegrationsElbArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        """
        AwsGovcloudIntegrationsElbArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_extended_inventory=fetch_extended_inventory,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsGovcloudIntegrationsEmrArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[str]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsGovcloudIntegrationsEmrArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[str]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[str]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsGovcloudIntegrationsIamArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsGovcloudIntegrationsIamArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsGovcloudIntegrationsLambdaArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsGovcloudIntegrationsLambdaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsGovcloudIntegrationsRdsArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsGovcloudIntegrationsRdsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsGovcloudIntegrationsRedShiftArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsGovcloudIntegrationsRedShiftArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsGovcloudIntegrationsRoute53Args:
    def __init__(__self__, *,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        """
        AwsGovcloudIntegrationsRoute53Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fetch_extended_inventory=fetch_extended_inventory,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsGovcloudIntegrationsS3Args:
    def __init__(__self__, *,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsGovcloudIntegrationsS3Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fetch_extended_inventory=fetch_extended_inventory,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsGovcloudIntegrationsSnsArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        """
        AwsGovcloudIntegrationsSnsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_extended_inventory=fetch_extended_inventory,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsGovcloudIntegrationsSqsArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 queue_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Some integration types support an additional set of arguments:
        :param pulumi.Input[Sequence[pulumi.Input[str]]] queue_prefixes: Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsGovcloudIntegrationsSqsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_extended_inventory=fetch_extended_inventory,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            queue_prefixes=queue_prefixes,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             queue_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if queue_prefixes is not None:
            _setter("queue_prefixes", queue_prefixes)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Some integration types support an additional set of arguments:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="queuePrefixes")
    def queue_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "queue_prefixes")

    @queue_prefixes.setter
    def queue_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "queue_prefixes", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsAlbArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 load_balancer_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
               
               Furthermore, below integration types supports the following common arguments.
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_prefixes: Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsAlbArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_extended_inventory=fetch_extended_inventory,
            fetch_tags=fetch_tags,
            load_balancer_prefixes=load_balancer_prefixes,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             load_balancer_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if load_balancer_prefixes is not None:
            _setter("load_balancer_prefixes", load_balancer_prefixes)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.

        Furthermore, below integration types supports the following common arguments.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="loadBalancerPrefixes")
    def load_balancer_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "load_balancer_prefixes")

    @load_balancer_prefixes.setter
    def load_balancer_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_prefixes", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsApiGatewayArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 stage_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] stage_prefixes: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsApiGatewayArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
            stage_prefixes=stage_prefixes,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             stage_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if stage_prefixes is not None:
            _setter("stage_prefixes", stage_prefixes)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="stagePrefixes")
    def stage_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "stage_prefixes")

    @stage_prefixes.setter
    def stage_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "stage_prefixes", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsAutoScalingArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAutoScalingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsAppSyncArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsAppSyncArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsAthenaArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsAthenaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsCognitoArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsCognitoArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsConnectArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsConnectArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsDirectConnectArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsDirectConnectArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsFsxArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsFsxArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsGlueArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsGlueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsKinesisAnalyticsArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsKinesisAnalyticsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsMediaConvertArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsMediaConvertArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsMediaPackageVodArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsMediaPackageVodArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsMqArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsMqArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsMskArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsMskArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsNeptuneArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsNeptuneArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsQldbArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsQldbArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsRoute53resolverArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsRoute53resolverArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsStatesArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsStatesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsTransitGatewayArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsTransitGatewayArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsWafArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsWafArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsAwsWafv2Args:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsAwsWafv2Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsBillingArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsBillingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsCloudfrontArgs:
    def __init__(__self__, *,
                 fetch_lambdas_at_edge: Optional[pulumi.Input[bool]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] fetch_lambdas_at_edge: Specify if Lambdas@Edge should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsCloudfrontArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fetch_lambdas_at_edge=fetch_lambdas_at_edge,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fetch_lambdas_at_edge: Optional[pulumi.Input[bool]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if fetch_lambdas_at_edge is not None:
            _setter("fetch_lambdas_at_edge", fetch_lambdas_at_edge)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="fetchLambdasAtEdge")
    def fetch_lambdas_at_edge(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if Lambdas@Edge should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_lambdas_at_edge")

    @fetch_lambdas_at_edge.setter
    def fetch_lambdas_at_edge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_lambdas_at_edge", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsCloudtrailArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsCloudtrailArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsDocDbArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsDocDbArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsDynamodbArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
               
               Furthermore, below integration types supports the following common arguments.
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsDynamodbArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_extended_inventory=fetch_extended_inventory,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.

        Furthermore, below integration types supports the following common arguments.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsEbsArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
               
               Furthermore, below integration types supports the following common arguments.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsEbsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_extended_inventory=fetch_extended_inventory,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.

        Furthermore, below integration types supports the following common arguments.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsEc2Args:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 duplicate_ec2_tags: Optional[pulumi.Input[bool]] = None,
                 fetch_ip_addresses: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] duplicate_ec2_tags: Specify if the old legacy metadata and tag names have to be kept, it will consume more ingest data size.
        :param pulumi.Input[bool] fetch_ip_addresses: Specify if IP addresses of ec2 instance should be collected.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsEc2Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            duplicate_ec2_tags=duplicate_ec2_tags,
            fetch_ip_addresses=fetch_ip_addresses,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             duplicate_ec2_tags: Optional[pulumi.Input[bool]] = None,
             fetch_ip_addresses: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if duplicate_ec2_tags is not None:
            _setter("duplicate_ec2_tags", duplicate_ec2_tags)
        if fetch_ip_addresses is not None:
            _setter("fetch_ip_addresses", fetch_ip_addresses)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="duplicateEc2Tags")
    def duplicate_ec2_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if the old legacy metadata and tag names have to be kept, it will consume more ingest data size.
        """
        return pulumi.get(self, "duplicate_ec2_tags")

    @duplicate_ec2_tags.setter
    def duplicate_ec2_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "duplicate_ec2_tags", value)

    @property
    @pulumi.getter(name="fetchIpAddresses")
    def fetch_ip_addresses(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if IP addresses of ec2 instance should be collected.
        """
        return pulumi.get(self, "fetch_ip_addresses")

    @fetch_ip_addresses.setter
    def fetch_ip_addresses(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_ip_addresses", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsEcsArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsEcsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsEfsArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsEfsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsElasticacheArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsElasticacheArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsElasticbeanstalkArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
               
               Furthermore, below integration types supports the following common arguments.
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsElasticbeanstalkArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_extended_inventory=fetch_extended_inventory,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.

        Furthermore, below integration types supports the following common arguments.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsElasticsearchArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_nodes: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] fetch_nodes: Specify if metrics should be collected for nodes. Turning it on will increase the number of API calls made to CloudWatch.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsElasticsearchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_nodes=fetch_nodes,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_nodes: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_nodes is not None:
            _setter("fetch_nodes", fetch_nodes)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchNodes")
    def fetch_nodes(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if metrics should be collected for nodes. Turning it on will increase the number of API calls made to CloudWatch.
        """
        return pulumi.get(self, "fetch_nodes")

    @fetch_nodes.setter
    def fetch_nodes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_nodes", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsElbArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
               
               Furthermore, below integration types supports the following common arguments.
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsElbArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_extended_inventory=fetch_extended_inventory,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.

        Furthermore, below integration types supports the following common arguments.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsEmrArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsEmrArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsHealthArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsHealthArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsIamArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsIamArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsIotArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsIotArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsKinesisArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_shards: Optional[pulumi.Input[bool]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] fetch_shards: Specify if Shards should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsKinesisArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_shards=fetch_shards,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_shards: Optional[pulumi.Input[bool]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_shards is not None:
            _setter("fetch_shards", fetch_shards)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchShards")
    def fetch_shards(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if Shards should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_shards")

    @fetch_shards.setter
    def fetch_shards(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_shards", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsKinesisFirehoseArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsKinesisFirehoseArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsLambdaArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsLambdaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsRdsArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsRdsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsRedshiftArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsRedshiftArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsRoute53Args:
    def __init__(__self__, *,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
               
               Furthermore, below integration types supports the following common arguments.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsRoute53Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fetch_extended_inventory=fetch_extended_inventory,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.

        Furthermore, below integration types supports the following common arguments.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsS3Args:
    def __init__(__self__, *,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
               
               Furthermore, below integration types supports the following common arguments.
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsS3Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fetch_extended_inventory=fetch_extended_inventory,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.

        Furthermore, below integration types supports the following common arguments.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsSesArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsSesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsSnsArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
               
               Furthermore, below integration types supports the following common arguments.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsSnsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_extended_inventory=fetch_extended_inventory,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.

        Furthermore, below integration types supports the following common arguments.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsSqsArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 queue_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] fetch_extended_inventory: Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
               
               Furthermore, below integration types supports the following common arguments.
        :param pulumi.Input[bool] fetch_tags: Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] queue_prefixes: Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsSqsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_extended_inventory=fetch_extended_inventory,
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
            queue_prefixes=queue_prefixes,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_extended_inventory: Optional[pulumi.Input[bool]] = None,
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             queue_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_extended_inventory is not None:
            _setter("fetch_extended_inventory", fetch_extended_inventory)
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if queue_prefixes is not None:
            _setter("queue_prefixes", queue_prefixes)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchExtendedInventory")
    def fetch_extended_inventory(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.

        Furthermore, below integration types supports the following common arguments.
        """
        return pulumi.get(self, "fetch_extended_inventory")

    @fetch_extended_inventory.setter
    def fetch_extended_inventory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_extended_inventory", value)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="queuePrefixes")
    def queue_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "queue_prefixes")

    @queue_prefixes.setter
    def queue_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "queue_prefixes", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsTrustedAdvisorArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsTrustedAdvisorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AwsIntegrationsVpcArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fetch_nat_gateway: Optional[pulumi.Input[bool]] = None,
                 fetch_vpn: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[bool] fetch_nat_gateway: Specify if NAT gateway should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[bool] fetch_vpn: Specify if VPN should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        :param pulumi.Input[str] tag_key: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        :param pulumi.Input[str] tag_value: Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AwsIntegrationsVpcArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            fetch_nat_gateway=fetch_nat_gateway,
            fetch_vpn=fetch_vpn,
            metrics_polling_interval=metrics_polling_interval,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fetch_nat_gateway: Optional[pulumi.Input[bool]] = None,
             fetch_vpn: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if fetch_nat_gateway is not None:
            _setter("fetch_nat_gateway", fetch_nat_gateway)
        if fetch_vpn is not None:
            _setter("fetch_vpn", fetch_vpn)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="fetchNatGateway")
    def fetch_nat_gateway(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if NAT gateway should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_nat_gateway")

    @fetch_nat_gateway.setter
    def fetch_nat_gateway(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_nat_gateway", value)

    @property
    @pulumi.getter(name="fetchVpn")
    def fetch_vpn(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if VPN should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_vpn")

    @fetch_vpn.setter
    def fetch_vpn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_vpn", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class AwsIntegrationsXRayArgs:
    def __init__(__self__, *,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aws_regions: Specify each AWS region that includes the resources that you want to monitor.  
               </details>
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               <details>
               <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        AwsIntegrationsXRayArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_regions=aws_regions,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each AWS region that includes the resources that you want to monitor.  
        </details>
        """
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        <details>
        <summary> Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. </summary>
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class AzureIntegrationsApiManagementArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsApiManagementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsAppGatewayArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsAppGatewayArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsAppServiceArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsAppServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsContainersArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsContainersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsCosmosDbArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsCosmosDbArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsCostManagementArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 tag_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_keys: Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        AzureIntegrationsCostManagementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            tag_keys=tag_keys,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             tag_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if tag_keys is not None:
            _setter("tag_keys", tag_keys)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="tagKeys")
    def tag_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
        """
        return pulumi.get(self, "tag_keys")

    @tag_keys.setter
    def tag_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_keys", value)


@pulumi.input_type
class AzureIntegrationsDataFactoryArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsDataFactoryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsEventHubArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsEventHubArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsExpressRouteArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsExpressRouteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsFirewallsArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsFirewallsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsFrontDoorArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsFrontDoorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsFunctionsArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsFunctionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsKeyVaultArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsKeyVaultArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsLoadBalancerArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsLoadBalancerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsLogicAppsArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsLogicAppsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsMachineLearningArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsMachineLearningArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsMariaDbArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsMariaDbArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsMonitorArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 include_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] enabled: A boolean value, that specifies if the integration needs to be active. Defaults to 'true' if not specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exclude_tags: A list of resource tags associated with the resources that need to be excluded from monitoring.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] include_tags: A list of resource tags associated with the resources that need to be monitored, in a "key:value" format. If this is not specified, all resources will be monitored.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_types: A list of Azure resource types that need to be monitored.
        """
        AzureIntegrationsMonitorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            exclude_tags=exclude_tags,
            include_tags=include_tags,
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
            resource_types=resource_types,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             exclude_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             include_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enabled is not None:
            _setter("enabled", enabled)
        if exclude_tags is not None:
            _setter("exclude_tags", exclude_tags)
        if include_tags is not None:
            _setter("include_tags", include_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)
        if resource_types is not None:
            _setter("resource_types", resource_types)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value, that specifies if the integration needs to be active. Defaults to 'true' if not specified.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="excludeTags")
    def exclude_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of resource tags associated with the resources that need to be excluded from monitoring.
        """
        return pulumi.get(self, "exclude_tags")

    @exclude_tags.setter
    def exclude_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_tags", value)

    @property
    @pulumi.getter(name="includeTags")
    def include_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of resource tags associated with the resources that need to be monitored, in a "key:value" format. If this is not specified, all resources will be monitored.
        """
        return pulumi.get(self, "include_tags")

    @include_tags.setter
    def include_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "include_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of Azure resource types that need to be monitored.
        """
        return pulumi.get(self, "resource_types")

    @resource_types.setter
    def resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_types", value)


@pulumi.input_type
class AzureIntegrationsMysqlArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsMysqlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsMysqlFlexibleArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsMysqlFlexibleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsPostgresqlArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsPostgresqlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsPostgresqlFlexibleArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsPostgresqlFlexibleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsPowerBiDedicatedArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsPowerBiDedicatedArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsRedisCacheArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsRedisCacheArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsServiceBusArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsServiceBusArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsSqlArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsSqlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsSqlManagedArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsSqlManagedArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsStorageArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsStorageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsVirtualMachineArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsVirtualMachineArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsVirtualNetworksArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsVirtualNetworksArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsVmsArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsVmsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class AzureIntegrationsVpnGatewayArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_groups: Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive
               
               Other integration type support an additional argument:
        """
        AzureIntegrationsVpnGatewayArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
            resource_groups=resource_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)
        if resource_groups is not None:
            _setter("resource_groups", resource_groups)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)

    @property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive

        Other integration type support an additional argument:
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class GcpIntegrationsAlloyDbArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsAlloyDbArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsAppEngineArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsAppEngineArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsBigQueryArgs:
    def __init__(__self__, *,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] fetch_tags: Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsBigQueryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsBigTableArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsBigTableArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsComposerArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsComposerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsDataFlowArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsDataFlowArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsDataProcArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsDataProcArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsDataStoreArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsDataStoreArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsFireBaseDatabaseArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsFireBaseDatabaseArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsFireBaseHostingArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsFireBaseHostingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsFireBaseStorageArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsFireBaseStorageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsFireStoreArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsFireStoreArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsFunctionsArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsFunctionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsInterconnectArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsInterconnectArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsKubernetesArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsKubernetesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsLoadBalancingArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsLoadBalancingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsMemCacheArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsMemCacheArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsPubSubArgs:
    def __init__(__self__, *,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] fetch_tags: Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsPubSubArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsRedisArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsRedisArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsRouterArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsRouterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsRunArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsRunArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsSpannerArgs:
    def __init__(__self__, *,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] fetch_tags: Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsSpannerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsSqlArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsSqlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsStorageArgs:
    def __init__(__self__, *,
                 fetch_tags: Optional[pulumi.Input[bool]] = None,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] fetch_tags: Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsStorageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fetch_tags=fetch_tags,
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fetch_tags: Optional[pulumi.Input[bool]] = None,
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if fetch_tags is not None:
            _setter("fetch_tags", fetch_tags)
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="fetchTags")
    def fetch_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
        """
        return pulumi.get(self, "fetch_tags")

    @fetch_tags.setter
    def fetch_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_tags", value)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsVirtualMachinesArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsVirtualMachinesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


@pulumi.input_type
class GcpIntegrationsVpcAccessArgs:
    def __init__(__self__, *,
                 metrics_polling_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metrics_polling_interval: The data polling interval in seconds.
               
               Other integration supports an additional argument:
        """
        GcpIntegrationsVpcAccessArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_polling_interval=metrics_polling_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_polling_interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metrics_polling_interval is not None:
            _setter("metrics_polling_interval", metrics_polling_interval)

    @property
    @pulumi.getter(name="metricsPollingInterval")
    def metrics_polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The data polling interval in seconds.

        Other integration supports an additional argument:
        """
        return pulumi.get(self, "metrics_polling_interval")

    @metrics_polling_interval.setter
    def metrics_polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_polling_interval", value)


