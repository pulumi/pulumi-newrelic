# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'AlertChannelConfigArgs',
    'AlertChannelConfigArgsDict',
    'AlertConditionTermArgs',
    'AlertConditionTermArgsDict',
    'AlertMutingRuleConditionArgs',
    'AlertMutingRuleConditionArgsDict',
    'AlertMutingRuleConditionConditionArgs',
    'AlertMutingRuleConditionConditionArgsDict',
    'AlertMutingRuleScheduleArgs',
    'AlertMutingRuleScheduleArgsDict',
    'EntityTagsTagArgs',
    'EntityTagsTagArgsDict',
    'InfraAlertConditionCriticalArgs',
    'InfraAlertConditionCriticalArgsDict',
    'InfraAlertConditionWarningArgs',
    'InfraAlertConditionWarningArgsDict',
    'MonitorDowntimeEndRepeatArgs',
    'MonitorDowntimeEndRepeatArgsDict',
    'MonitorDowntimeFrequencyArgs',
    'MonitorDowntimeFrequencyArgsDict',
    'MonitorDowntimeFrequencyDaysOfWeekArgs',
    'MonitorDowntimeFrequencyDaysOfWeekArgsDict',
    'NotificationChannelPropertyArgs',
    'NotificationChannelPropertyArgsDict',
    'NotificationDestinationAuthBasicArgs',
    'NotificationDestinationAuthBasicArgsDict',
    'NotificationDestinationAuthCustomHeaderArgs',
    'NotificationDestinationAuthCustomHeaderArgsDict',
    'NotificationDestinationAuthTokenArgs',
    'NotificationDestinationAuthTokenArgsDict',
    'NotificationDestinationPropertyArgs',
    'NotificationDestinationPropertyArgsDict',
    'NotificationDestinationSecureUrlArgs',
    'NotificationDestinationSecureUrlArgsDict',
    'NrqlAlertConditionCriticalArgs',
    'NrqlAlertConditionCriticalArgsDict',
    'NrqlAlertConditionNrqlArgs',
    'NrqlAlertConditionNrqlArgsDict',
    'NrqlAlertConditionTermArgs',
    'NrqlAlertConditionTermArgsDict',
    'NrqlAlertConditionWarningArgs',
    'NrqlAlertConditionWarningArgsDict',
    'ObfuscationRuleActionArgs',
    'ObfuscationRuleActionArgsDict',
    'OneDashboardPageArgs',
    'OneDashboardPageArgsDict',
    'OneDashboardPageWidgetAreaArgs',
    'OneDashboardPageWidgetAreaArgsDict',
    'OneDashboardPageWidgetAreaColorArgs',
    'OneDashboardPageWidgetAreaColorArgsDict',
    'OneDashboardPageWidgetAreaColorSeriesOverrideArgs',
    'OneDashboardPageWidgetAreaColorSeriesOverrideArgsDict',
    'OneDashboardPageWidgetAreaDataFormatArgs',
    'OneDashboardPageWidgetAreaDataFormatArgsDict',
    'OneDashboardPageWidgetAreaInitialSortingArgs',
    'OneDashboardPageWidgetAreaInitialSortingArgsDict',
    'OneDashboardPageWidgetAreaNrqlQueryArgs',
    'OneDashboardPageWidgetAreaNrqlQueryArgsDict',
    'OneDashboardPageWidgetAreaNullValueArgs',
    'OneDashboardPageWidgetAreaNullValueArgsDict',
    'OneDashboardPageWidgetAreaNullValueSeriesOverrideArgs',
    'OneDashboardPageWidgetAreaNullValueSeriesOverrideArgsDict',
    'OneDashboardPageWidgetAreaUnitArgs',
    'OneDashboardPageWidgetAreaUnitArgsDict',
    'OneDashboardPageWidgetAreaUnitSeriesOverrideArgs',
    'OneDashboardPageWidgetAreaUnitSeriesOverrideArgsDict',
    'OneDashboardPageWidgetBarArgs',
    'OneDashboardPageWidgetBarArgsDict',
    'OneDashboardPageWidgetBarColorArgs',
    'OneDashboardPageWidgetBarColorArgsDict',
    'OneDashboardPageWidgetBarColorSeriesOverrideArgs',
    'OneDashboardPageWidgetBarColorSeriesOverrideArgsDict',
    'OneDashboardPageWidgetBarDataFormatArgs',
    'OneDashboardPageWidgetBarDataFormatArgsDict',
    'OneDashboardPageWidgetBarInitialSortingArgs',
    'OneDashboardPageWidgetBarInitialSortingArgsDict',
    'OneDashboardPageWidgetBarNrqlQueryArgs',
    'OneDashboardPageWidgetBarNrqlQueryArgsDict',
    'OneDashboardPageWidgetBarNullValueArgs',
    'OneDashboardPageWidgetBarNullValueArgsDict',
    'OneDashboardPageWidgetBarNullValueSeriesOverrideArgs',
    'OneDashboardPageWidgetBarNullValueSeriesOverrideArgsDict',
    'OneDashboardPageWidgetBarUnitArgs',
    'OneDashboardPageWidgetBarUnitArgsDict',
    'OneDashboardPageWidgetBarUnitSeriesOverrideArgs',
    'OneDashboardPageWidgetBarUnitSeriesOverrideArgsDict',
    'OneDashboardPageWidgetBillboardArgs',
    'OneDashboardPageWidgetBillboardArgsDict',
    'OneDashboardPageWidgetBillboardColorArgs',
    'OneDashboardPageWidgetBillboardColorArgsDict',
    'OneDashboardPageWidgetBillboardColorSeriesOverrideArgs',
    'OneDashboardPageWidgetBillboardColorSeriesOverrideArgsDict',
    'OneDashboardPageWidgetBillboardDataFormatArgs',
    'OneDashboardPageWidgetBillboardDataFormatArgsDict',
    'OneDashboardPageWidgetBillboardInitialSortingArgs',
    'OneDashboardPageWidgetBillboardInitialSortingArgsDict',
    'OneDashboardPageWidgetBillboardNrqlQueryArgs',
    'OneDashboardPageWidgetBillboardNrqlQueryArgsDict',
    'OneDashboardPageWidgetBillboardNullValueArgs',
    'OneDashboardPageWidgetBillboardNullValueArgsDict',
    'OneDashboardPageWidgetBillboardNullValueSeriesOverrideArgs',
    'OneDashboardPageWidgetBillboardNullValueSeriesOverrideArgsDict',
    'OneDashboardPageWidgetBillboardUnitArgs',
    'OneDashboardPageWidgetBillboardUnitArgsDict',
    'OneDashboardPageWidgetBillboardUnitSeriesOverrideArgs',
    'OneDashboardPageWidgetBillboardUnitSeriesOverrideArgsDict',
    'OneDashboardPageWidgetBulletArgs',
    'OneDashboardPageWidgetBulletArgsDict',
    'OneDashboardPageWidgetBulletColorArgs',
    'OneDashboardPageWidgetBulletColorArgsDict',
    'OneDashboardPageWidgetBulletColorSeriesOverrideArgs',
    'OneDashboardPageWidgetBulletColorSeriesOverrideArgsDict',
    'OneDashboardPageWidgetBulletDataFormatArgs',
    'OneDashboardPageWidgetBulletDataFormatArgsDict',
    'OneDashboardPageWidgetBulletInitialSortingArgs',
    'OneDashboardPageWidgetBulletInitialSortingArgsDict',
    'OneDashboardPageWidgetBulletNrqlQueryArgs',
    'OneDashboardPageWidgetBulletNrqlQueryArgsDict',
    'OneDashboardPageWidgetBulletNullValueArgs',
    'OneDashboardPageWidgetBulletNullValueArgsDict',
    'OneDashboardPageWidgetBulletNullValueSeriesOverrideArgs',
    'OneDashboardPageWidgetBulletNullValueSeriesOverrideArgsDict',
    'OneDashboardPageWidgetBulletUnitArgs',
    'OneDashboardPageWidgetBulletUnitArgsDict',
    'OneDashboardPageWidgetBulletUnitSeriesOverrideArgs',
    'OneDashboardPageWidgetBulletUnitSeriesOverrideArgsDict',
    'OneDashboardPageWidgetFunnelArgs',
    'OneDashboardPageWidgetFunnelArgsDict',
    'OneDashboardPageWidgetFunnelColorArgs',
    'OneDashboardPageWidgetFunnelColorArgsDict',
    'OneDashboardPageWidgetFunnelColorSeriesOverrideArgs',
    'OneDashboardPageWidgetFunnelColorSeriesOverrideArgsDict',
    'OneDashboardPageWidgetFunnelDataFormatArgs',
    'OneDashboardPageWidgetFunnelDataFormatArgsDict',
    'OneDashboardPageWidgetFunnelInitialSortingArgs',
    'OneDashboardPageWidgetFunnelInitialSortingArgsDict',
    'OneDashboardPageWidgetFunnelNrqlQueryArgs',
    'OneDashboardPageWidgetFunnelNrqlQueryArgsDict',
    'OneDashboardPageWidgetFunnelNullValueArgs',
    'OneDashboardPageWidgetFunnelNullValueArgsDict',
    'OneDashboardPageWidgetFunnelNullValueSeriesOverrideArgs',
    'OneDashboardPageWidgetFunnelNullValueSeriesOverrideArgsDict',
    'OneDashboardPageWidgetFunnelUnitArgs',
    'OneDashboardPageWidgetFunnelUnitArgsDict',
    'OneDashboardPageWidgetFunnelUnitSeriesOverrideArgs',
    'OneDashboardPageWidgetFunnelUnitSeriesOverrideArgsDict',
    'OneDashboardPageWidgetHeatmapArgs',
    'OneDashboardPageWidgetHeatmapArgsDict',
    'OneDashboardPageWidgetHeatmapColorArgs',
    'OneDashboardPageWidgetHeatmapColorArgsDict',
    'OneDashboardPageWidgetHeatmapColorSeriesOverrideArgs',
    'OneDashboardPageWidgetHeatmapColorSeriesOverrideArgsDict',
    'OneDashboardPageWidgetHeatmapDataFormatArgs',
    'OneDashboardPageWidgetHeatmapDataFormatArgsDict',
    'OneDashboardPageWidgetHeatmapInitialSortingArgs',
    'OneDashboardPageWidgetHeatmapInitialSortingArgsDict',
    'OneDashboardPageWidgetHeatmapNrqlQueryArgs',
    'OneDashboardPageWidgetHeatmapNrqlQueryArgsDict',
    'OneDashboardPageWidgetHeatmapNullValueArgs',
    'OneDashboardPageWidgetHeatmapNullValueArgsDict',
    'OneDashboardPageWidgetHeatmapNullValueSeriesOverrideArgs',
    'OneDashboardPageWidgetHeatmapNullValueSeriesOverrideArgsDict',
    'OneDashboardPageWidgetHeatmapUnitArgs',
    'OneDashboardPageWidgetHeatmapUnitArgsDict',
    'OneDashboardPageWidgetHeatmapUnitSeriesOverrideArgs',
    'OneDashboardPageWidgetHeatmapUnitSeriesOverrideArgsDict',
    'OneDashboardPageWidgetHistogramArgs',
    'OneDashboardPageWidgetHistogramArgsDict',
    'OneDashboardPageWidgetHistogramColorArgs',
    'OneDashboardPageWidgetHistogramColorArgsDict',
    'OneDashboardPageWidgetHistogramColorSeriesOverrideArgs',
    'OneDashboardPageWidgetHistogramColorSeriesOverrideArgsDict',
    'OneDashboardPageWidgetHistogramDataFormatArgs',
    'OneDashboardPageWidgetHistogramDataFormatArgsDict',
    'OneDashboardPageWidgetHistogramInitialSortingArgs',
    'OneDashboardPageWidgetHistogramInitialSortingArgsDict',
    'OneDashboardPageWidgetHistogramNrqlQueryArgs',
    'OneDashboardPageWidgetHistogramNrqlQueryArgsDict',
    'OneDashboardPageWidgetHistogramNullValueArgs',
    'OneDashboardPageWidgetHistogramNullValueArgsDict',
    'OneDashboardPageWidgetHistogramNullValueSeriesOverrideArgs',
    'OneDashboardPageWidgetHistogramNullValueSeriesOverrideArgsDict',
    'OneDashboardPageWidgetHistogramUnitArgs',
    'OneDashboardPageWidgetHistogramUnitArgsDict',
    'OneDashboardPageWidgetHistogramUnitSeriesOverrideArgs',
    'OneDashboardPageWidgetHistogramUnitSeriesOverrideArgsDict',
    'OneDashboardPageWidgetJsonArgs',
    'OneDashboardPageWidgetJsonArgsDict',
    'OneDashboardPageWidgetJsonColorArgs',
    'OneDashboardPageWidgetJsonColorArgsDict',
    'OneDashboardPageWidgetJsonColorSeriesOverrideArgs',
    'OneDashboardPageWidgetJsonColorSeriesOverrideArgsDict',
    'OneDashboardPageWidgetJsonDataFormatArgs',
    'OneDashboardPageWidgetJsonDataFormatArgsDict',
    'OneDashboardPageWidgetJsonInitialSortingArgs',
    'OneDashboardPageWidgetJsonInitialSortingArgsDict',
    'OneDashboardPageWidgetJsonNrqlQueryArgs',
    'OneDashboardPageWidgetJsonNrqlQueryArgsDict',
    'OneDashboardPageWidgetJsonNullValueArgs',
    'OneDashboardPageWidgetJsonNullValueArgsDict',
    'OneDashboardPageWidgetJsonNullValueSeriesOverrideArgs',
    'OneDashboardPageWidgetJsonNullValueSeriesOverrideArgsDict',
    'OneDashboardPageWidgetJsonUnitArgs',
    'OneDashboardPageWidgetJsonUnitArgsDict',
    'OneDashboardPageWidgetJsonUnitSeriesOverrideArgs',
    'OneDashboardPageWidgetJsonUnitSeriesOverrideArgsDict',
    'OneDashboardPageWidgetLineArgs',
    'OneDashboardPageWidgetLineArgsDict',
    'OneDashboardPageWidgetLineColorArgs',
    'OneDashboardPageWidgetLineColorArgsDict',
    'OneDashboardPageWidgetLineColorSeriesOverrideArgs',
    'OneDashboardPageWidgetLineColorSeriesOverrideArgsDict',
    'OneDashboardPageWidgetLineDataFormatArgs',
    'OneDashboardPageWidgetLineDataFormatArgsDict',
    'OneDashboardPageWidgetLineInitialSortingArgs',
    'OneDashboardPageWidgetLineInitialSortingArgsDict',
    'OneDashboardPageWidgetLineNrqlQueryArgs',
    'OneDashboardPageWidgetLineNrqlQueryArgsDict',
    'OneDashboardPageWidgetLineNullValueArgs',
    'OneDashboardPageWidgetLineNullValueArgsDict',
    'OneDashboardPageWidgetLineNullValueSeriesOverrideArgs',
    'OneDashboardPageWidgetLineNullValueSeriesOverrideArgsDict',
    'OneDashboardPageWidgetLineThresholdArgs',
    'OneDashboardPageWidgetLineThresholdArgsDict',
    'OneDashboardPageWidgetLineUnitArgs',
    'OneDashboardPageWidgetLineUnitArgsDict',
    'OneDashboardPageWidgetLineUnitSeriesOverrideArgs',
    'OneDashboardPageWidgetLineUnitSeriesOverrideArgsDict',
    'OneDashboardPageWidgetLineYAxisRightArgs',
    'OneDashboardPageWidgetLineYAxisRightArgsDict',
    'OneDashboardPageWidgetLogTableArgs',
    'OneDashboardPageWidgetLogTableArgsDict',
    'OneDashboardPageWidgetLogTableColorArgs',
    'OneDashboardPageWidgetLogTableColorArgsDict',
    'OneDashboardPageWidgetLogTableColorSeriesOverrideArgs',
    'OneDashboardPageWidgetLogTableColorSeriesOverrideArgsDict',
    'OneDashboardPageWidgetLogTableDataFormatArgs',
    'OneDashboardPageWidgetLogTableDataFormatArgsDict',
    'OneDashboardPageWidgetLogTableInitialSortingArgs',
    'OneDashboardPageWidgetLogTableInitialSortingArgsDict',
    'OneDashboardPageWidgetLogTableNrqlQueryArgs',
    'OneDashboardPageWidgetLogTableNrqlQueryArgsDict',
    'OneDashboardPageWidgetLogTableNullValueArgs',
    'OneDashboardPageWidgetLogTableNullValueArgsDict',
    'OneDashboardPageWidgetLogTableNullValueSeriesOverrideArgs',
    'OneDashboardPageWidgetLogTableNullValueSeriesOverrideArgsDict',
    'OneDashboardPageWidgetLogTableUnitArgs',
    'OneDashboardPageWidgetLogTableUnitArgsDict',
    'OneDashboardPageWidgetLogTableUnitSeriesOverrideArgs',
    'OneDashboardPageWidgetLogTableUnitSeriesOverrideArgsDict',
    'OneDashboardPageWidgetMarkdownArgs',
    'OneDashboardPageWidgetMarkdownArgsDict',
    'OneDashboardPageWidgetMarkdownColorArgs',
    'OneDashboardPageWidgetMarkdownColorArgsDict',
    'OneDashboardPageWidgetMarkdownColorSeriesOverrideArgs',
    'OneDashboardPageWidgetMarkdownColorSeriesOverrideArgsDict',
    'OneDashboardPageWidgetMarkdownDataFormatArgs',
    'OneDashboardPageWidgetMarkdownDataFormatArgsDict',
    'OneDashboardPageWidgetMarkdownInitialSortingArgs',
    'OneDashboardPageWidgetMarkdownInitialSortingArgsDict',
    'OneDashboardPageWidgetMarkdownNullValueArgs',
    'OneDashboardPageWidgetMarkdownNullValueArgsDict',
    'OneDashboardPageWidgetMarkdownNullValueSeriesOverrideArgs',
    'OneDashboardPageWidgetMarkdownNullValueSeriesOverrideArgsDict',
    'OneDashboardPageWidgetMarkdownUnitArgs',
    'OneDashboardPageWidgetMarkdownUnitArgsDict',
    'OneDashboardPageWidgetMarkdownUnitSeriesOverrideArgs',
    'OneDashboardPageWidgetMarkdownUnitSeriesOverrideArgsDict',
    'OneDashboardPageWidgetPyArgs',
    'OneDashboardPageWidgetPyArgsDict',
    'OneDashboardPageWidgetPyColorArgs',
    'OneDashboardPageWidgetPyColorArgsDict',
    'OneDashboardPageWidgetPyColorSeriesOverrideArgs',
    'OneDashboardPageWidgetPyColorSeriesOverrideArgsDict',
    'OneDashboardPageWidgetPyDataFormatArgs',
    'OneDashboardPageWidgetPyDataFormatArgsDict',
    'OneDashboardPageWidgetPyInitialSortingArgs',
    'OneDashboardPageWidgetPyInitialSortingArgsDict',
    'OneDashboardPageWidgetPyNrqlQueryArgs',
    'OneDashboardPageWidgetPyNrqlQueryArgsDict',
    'OneDashboardPageWidgetPyNullValueArgs',
    'OneDashboardPageWidgetPyNullValueArgsDict',
    'OneDashboardPageWidgetPyNullValueSeriesOverrideArgs',
    'OneDashboardPageWidgetPyNullValueSeriesOverrideArgsDict',
    'OneDashboardPageWidgetPyUnitArgs',
    'OneDashboardPageWidgetPyUnitArgsDict',
    'OneDashboardPageWidgetPyUnitSeriesOverrideArgs',
    'OneDashboardPageWidgetPyUnitSeriesOverrideArgsDict',
    'OneDashboardPageWidgetStackedBarArgs',
    'OneDashboardPageWidgetStackedBarArgsDict',
    'OneDashboardPageWidgetStackedBarColorArgs',
    'OneDashboardPageWidgetStackedBarColorArgsDict',
    'OneDashboardPageWidgetStackedBarColorSeriesOverrideArgs',
    'OneDashboardPageWidgetStackedBarColorSeriesOverrideArgsDict',
    'OneDashboardPageWidgetStackedBarDataFormatArgs',
    'OneDashboardPageWidgetStackedBarDataFormatArgsDict',
    'OneDashboardPageWidgetStackedBarInitialSortingArgs',
    'OneDashboardPageWidgetStackedBarInitialSortingArgsDict',
    'OneDashboardPageWidgetStackedBarNrqlQueryArgs',
    'OneDashboardPageWidgetStackedBarNrqlQueryArgsDict',
    'OneDashboardPageWidgetStackedBarNullValueArgs',
    'OneDashboardPageWidgetStackedBarNullValueArgsDict',
    'OneDashboardPageWidgetStackedBarNullValueSeriesOverrideArgs',
    'OneDashboardPageWidgetStackedBarNullValueSeriesOverrideArgsDict',
    'OneDashboardPageWidgetStackedBarUnitArgs',
    'OneDashboardPageWidgetStackedBarUnitArgsDict',
    'OneDashboardPageWidgetStackedBarUnitSeriesOverrideArgs',
    'OneDashboardPageWidgetStackedBarUnitSeriesOverrideArgsDict',
    'OneDashboardPageWidgetTableArgs',
    'OneDashboardPageWidgetTableArgsDict',
    'OneDashboardPageWidgetTableColorArgs',
    'OneDashboardPageWidgetTableColorArgsDict',
    'OneDashboardPageWidgetTableColorSeriesOverrideArgs',
    'OneDashboardPageWidgetTableColorSeriesOverrideArgsDict',
    'OneDashboardPageWidgetTableDataFormatArgs',
    'OneDashboardPageWidgetTableDataFormatArgsDict',
    'OneDashboardPageWidgetTableInitialSortingArgs',
    'OneDashboardPageWidgetTableInitialSortingArgsDict',
    'OneDashboardPageWidgetTableNrqlQueryArgs',
    'OneDashboardPageWidgetTableNrqlQueryArgsDict',
    'OneDashboardPageWidgetTableNullValueArgs',
    'OneDashboardPageWidgetTableNullValueArgsDict',
    'OneDashboardPageWidgetTableNullValueSeriesOverrideArgs',
    'OneDashboardPageWidgetTableNullValueSeriesOverrideArgsDict',
    'OneDashboardPageWidgetTableThresholdArgs',
    'OneDashboardPageWidgetTableThresholdArgsDict',
    'OneDashboardPageWidgetTableUnitArgs',
    'OneDashboardPageWidgetTableUnitArgsDict',
    'OneDashboardPageWidgetTableUnitSeriesOverrideArgs',
    'OneDashboardPageWidgetTableUnitSeriesOverrideArgsDict',
    'OneDashboardRawPageArgs',
    'OneDashboardRawPageArgsDict',
    'OneDashboardRawPageWidgetArgs',
    'OneDashboardRawPageWidgetArgsDict',
    'OneDashboardVariableArgs',
    'OneDashboardVariableArgsDict',
    'OneDashboardVariableItemArgs',
    'OneDashboardVariableItemArgsDict',
    'OneDashboardVariableNrqlQueryArgs',
    'OneDashboardVariableNrqlQueryArgsDict',
    'OneDashboardVariableOptionArgs',
    'OneDashboardVariableOptionArgsDict',
    'ServiceLevelEventsArgs',
    'ServiceLevelEventsArgsDict',
    'ServiceLevelEventsBadEventsArgs',
    'ServiceLevelEventsBadEventsArgsDict',
    'ServiceLevelEventsBadEventsSelectArgs',
    'ServiceLevelEventsBadEventsSelectArgsDict',
    'ServiceLevelEventsGoodEventsArgs',
    'ServiceLevelEventsGoodEventsArgsDict',
    'ServiceLevelEventsGoodEventsSelectArgs',
    'ServiceLevelEventsGoodEventsSelectArgsDict',
    'ServiceLevelEventsValidEventsArgs',
    'ServiceLevelEventsValidEventsArgsDict',
    'ServiceLevelEventsValidEventsSelectArgs',
    'ServiceLevelEventsValidEventsSelectArgsDict',
    'ServiceLevelObjectiveArgs',
    'ServiceLevelObjectiveArgsDict',
    'ServiceLevelObjectiveTimeWindowArgs',
    'ServiceLevelObjectiveTimeWindowArgsDict',
    'ServiceLevelObjectiveTimeWindowRollingArgs',
    'ServiceLevelObjectiveTimeWindowRollingArgsDict',
    'WorkflowDestinationArgs',
    'WorkflowDestinationArgsDict',
    'WorkflowEnrichmentsArgs',
    'WorkflowEnrichmentsArgsDict',
    'WorkflowEnrichmentsNrqlArgs',
    'WorkflowEnrichmentsNrqlArgsDict',
    'WorkflowEnrichmentsNrqlConfigurationArgs',
    'WorkflowEnrichmentsNrqlConfigurationArgsDict',
    'WorkflowIssuesFilterArgs',
    'WorkflowIssuesFilterArgsDict',
    'WorkflowIssuesFilterPredicateArgs',
    'WorkflowIssuesFilterPredicateArgsDict',
    'GetEntityTagArgs',
    'GetEntityTagArgsDict',
    'GetNotificationDestinationSecureUrlArgs',
    'GetNotificationDestinationSecureUrlArgsDict',
]

MYPY = False

if not MYPY:
    class AlertChannelConfigArgsDict(TypedDict):
        api_key: NotRequired[pulumi.Input[str]]
        """
        The API key for integrating with OpsGenie.
        """
        auth_password: NotRequired[pulumi.Input[str]]
        """
        Specifies an authentication password for use with a channel. Supported by the webhook channel type.
        """
        auth_type: NotRequired[pulumi.Input[str]]
        """
        Specifies an authentication method for use with a channel. Supported by the webhook channel type. Only HTTP basic authentication is currently supported via the value BASIC.
        """
        auth_username: NotRequired[pulumi.Input[str]]
        """
        Specifies an authentication username for use with a channel. Supported by the webhook channel type.
        """
        base_url: NotRequired[pulumi.Input[str]]
        """
        The base URL of the webhook destination.
        """
        channel: NotRequired[pulumi.Input[str]]
        """
        The Slack channel to send notifications to.
        """
        headers: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
        """
        headers_string: NotRequired[pulumi.Input[str]]
        """
        Use instead of headers if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects). The value provided should be a valid JSON string with escaped double quotes. Conflicts with headers.
        """
        include_json_attachment: NotRequired[pulumi.Input[str]]
        """
        true or false. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        The key for integrating with VictorOps.
        """
        payload: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A map of key/value pairs that represents the webhook payload. Must provide payload_type if setting this argument.
        """
        payload_string: NotRequired[pulumi.Input[str]]
        """
        Use instead of payload if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects). The value provided should be a valid JSON string with escaped double quotes. Conflicts with payload.
        """
        payload_type: NotRequired[pulumi.Input[str]]
        """
        Can either be application/json or application/x-www-form-urlencoded. The payload_type argument is required if payload is set.
        """
        recipients: NotRequired[pulumi.Input[str]]
        """
        A set of recipients for targeting notifications. Multiple values are comma separated.
        """
        region: NotRequired[pulumi.Input[str]]
        """
        The data center region to store your data. Valid values are US and EU. Default is US.
        """
        route_key: NotRequired[pulumi.Input[str]]
        """
        The route key for integrating with VictorOps.
        """
        service_key: NotRequired[pulumi.Input[str]]
        """
        Specifies the service key for integrating with Pagerduty.
        """
        tags: NotRequired[pulumi.Input[str]]
        """
        A set of tags for targeting notifications. Multiple values are comma separated.
        """
        teams: NotRequired[pulumi.Input[str]]
        """
        A set of teams for targeting notifications. Multiple values are comma separated.
        """
        url: NotRequired[pulumi.Input[str]]
        """
        Your organization's Slack URL.
        """
        user_id: NotRequired[pulumi.Input[str]]
        """
        The user ID for use with the user channel type.
        """
elif False:
    AlertChannelConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertChannelConfigArgs:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input[str]] = None,
                 auth_password: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 auth_username: Optional[pulumi.Input[str]] = None,
                 base_url: Optional[pulumi.Input[str]] = None,
                 channel: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 headers_string: Optional[pulumi.Input[str]] = None,
                 include_json_attachment: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 payload: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 payload_string: Optional[pulumi.Input[str]] = None,
                 payload_type: Optional[pulumi.Input[str]] = None,
                 recipients: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 route_key: Optional[pulumi.Input[str]] = None,
                 service_key: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[str]] = None,
                 teams: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_key: The API key for integrating with OpsGenie.
        :param pulumi.Input[str] auth_password: Specifies an authentication password for use with a channel. Supported by the webhook channel type.
        :param pulumi.Input[str] auth_type: Specifies an authentication method for use with a channel. Supported by the webhook channel type. Only HTTP basic authentication is currently supported via the value BASIC.
        :param pulumi.Input[str] auth_username: Specifies an authentication username for use with a channel. Supported by the webhook channel type.
        :param pulumi.Input[str] base_url: The base URL of the webhook destination.
        :param pulumi.Input[str] channel: The Slack channel to send notifications to.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] headers: A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
        :param pulumi.Input[str] headers_string: Use instead of headers if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects). The value provided should be a valid JSON string with escaped double quotes. Conflicts with headers.
        :param pulumi.Input[str] include_json_attachment: true or false. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
        :param pulumi.Input[str] key: The key for integrating with VictorOps.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] payload: A map of key/value pairs that represents the webhook payload. Must provide payload_type if setting this argument.
        :param pulumi.Input[str] payload_string: Use instead of payload if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects). The value provided should be a valid JSON string with escaped double quotes. Conflicts with payload.
        :param pulumi.Input[str] payload_type: Can either be application/json or application/x-www-form-urlencoded. The payload_type argument is required if payload is set.
        :param pulumi.Input[str] recipients: A set of recipients for targeting notifications. Multiple values are comma separated.
        :param pulumi.Input[str] region: The data center region to store your data. Valid values are US and EU. Default is US.
        :param pulumi.Input[str] route_key: The route key for integrating with VictorOps.
        :param pulumi.Input[str] service_key: Specifies the service key for integrating with Pagerduty.
        :param pulumi.Input[str] tags: A set of tags for targeting notifications. Multiple values are comma separated.
        :param pulumi.Input[str] teams: A set of teams for targeting notifications. Multiple values are comma separated.
        :param pulumi.Input[str] url: Your organization's Slack URL.
        :param pulumi.Input[str] user_id: The user ID for use with the user channel type.
        """
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if auth_password is not None:
            pulumi.set(__self__, "auth_password", auth_password)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if auth_username is not None:
            pulumi.set(__self__, "auth_username", auth_username)
        if base_url is not None:
            pulumi.set(__self__, "base_url", base_url)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if headers_string is not None:
            pulumi.set(__self__, "headers_string", headers_string)
        if include_json_attachment is not None:
            pulumi.set(__self__, "include_json_attachment", include_json_attachment)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)
        if payload_string is not None:
            pulumi.set(__self__, "payload_string", payload_string)
        if payload_type is not None:
            pulumi.set(__self__, "payload_type", payload_type)
        if recipients is not None:
            pulumi.set(__self__, "recipients", recipients)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if route_key is not None:
            pulumi.set(__self__, "route_key", route_key)
        if service_key is not None:
            pulumi.set(__self__, "service_key", service_key)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        The API key for integrating with OpsGenie.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="authPassword")
    def auth_password(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies an authentication password for use with a channel. Supported by the webhook channel type.
        """
        return pulumi.get(self, "auth_password")

    @auth_password.setter
    def auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies an authentication method for use with a channel. Supported by the webhook channel type. Only HTTP basic authentication is currently supported via the value BASIC.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="authUsername")
    def auth_username(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies an authentication username for use with a channel. Supported by the webhook channel type.
        """
        return pulumi.get(self, "auth_username")

    @auth_username.setter
    def auth_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_username", value)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> Optional[pulumi.Input[str]]:
        """
        The base URL of the webhook destination.
        """
        return pulumi.get(self, "base_url")

    @base_url.setter
    def base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_url", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[str]]:
        """
        The Slack channel to send notifications to.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="headersString")
    def headers_string(self) -> Optional[pulumi.Input[str]]:
        """
        Use instead of headers if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects). The value provided should be a valid JSON string with escaped double quotes. Conflicts with headers.
        """
        return pulumi.get(self, "headers_string")

    @headers_string.setter
    def headers_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "headers_string", value)

    @property
    @pulumi.getter(name="includeJsonAttachment")
    def include_json_attachment(self) -> Optional[pulumi.Input[str]]:
        """
        true or false. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
        """
        return pulumi.get(self, "include_json_attachment")

    @include_json_attachment.setter
    def include_json_attachment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_json_attachment", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key for integrating with VictorOps.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of key/value pairs that represents the webhook payload. Must provide payload_type if setting this argument.
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter(name="payloadString")
    def payload_string(self) -> Optional[pulumi.Input[str]]:
        """
        Use instead of payload if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects). The value provided should be a valid JSON string with escaped double quotes. Conflicts with payload.
        """
        return pulumi.get(self, "payload_string")

    @payload_string.setter
    def payload_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload_string", value)

    @property
    @pulumi.getter(name="payloadType")
    def payload_type(self) -> Optional[pulumi.Input[str]]:
        """
        Can either be application/json or application/x-www-form-urlencoded. The payload_type argument is required if payload is set.
        """
        return pulumi.get(self, "payload_type")

    @payload_type.setter
    def payload_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload_type", value)

    @property
    @pulumi.getter
    def recipients(self) -> Optional[pulumi.Input[str]]:
        """
        A set of recipients for targeting notifications. Multiple values are comma separated.
        """
        return pulumi.get(self, "recipients")

    @recipients.setter
    def recipients(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recipients", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The data center region to store your data. Valid values are US and EU. Default is US.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="routeKey")
    def route_key(self) -> Optional[pulumi.Input[str]]:
        """
        The route key for integrating with VictorOps.
        """
        return pulumi.get(self, "route_key")

    @route_key.setter
    def route_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_key", value)

    @property
    @pulumi.getter(name="serviceKey")
    def service_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the service key for integrating with Pagerduty.
        """
        return pulumi.get(self, "service_key")

    @service_key.setter
    def service_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_key", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        """
        A set of tags for targeting notifications. Multiple values are comma separated.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[str]]:
        """
        A set of teams for targeting notifications. Multiple values are comma separated.
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Your organization's Slack URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        The user ID for use with the user channel type.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)


if not MYPY:
    class AlertConditionTermArgsDict(TypedDict):
        duration: pulumi.Input[int]
        """
        In minutes, must be in the range of 5 to 120, inclusive.
        """
        threshold: pulumi.Input[float]
        """
        Must be 0 or greater.
        """
        time_function: pulumi.Input[str]
        """
        One of (all, any).
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        One of (above, below, equal). Defaults to equal.
        """
        priority: NotRequired[pulumi.Input[str]]
        """
        One of (critical, warning). Defaults to critical.
        """
elif False:
    AlertConditionTermArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertConditionTermArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[int],
                 threshold: pulumi.Input[float],
                 time_function: pulumi.Input[str],
                 operator: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] duration: In minutes, must be in the range of 5 to 120, inclusive.
        :param pulumi.Input[float] threshold: Must be 0 or greater.
        :param pulumi.Input[str] time_function: One of (all, any).
        :param pulumi.Input[str] operator: One of (above, below, equal). Defaults to equal.
        :param pulumi.Input[str] priority: One of (critical, warning). Defaults to critical.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "time_function", time_function)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[int]:
        """
        In minutes, must be in the range of 5 to 120, inclusive.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[float]:
        """
        Must be 0 or greater.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter(name="timeFunction")
    def time_function(self) -> pulumi.Input[str]:
        """
        One of (all, any).
        """
        return pulumi.get(self, "time_function")

    @time_function.setter
    def time_function(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_function", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        One of (above, below, equal). Defaults to equal.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        One of (critical, warning). Defaults to critical.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)


if not MYPY:
    class AlertMutingRuleConditionArgsDict(TypedDict):
        conditions: pulumi.Input[Sequence[pulumi.Input['AlertMutingRuleConditionConditionArgsDict']]]
        """
        The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
        """
        operator: pulumi.Input[str]
        """
        The operator used to combine all the MutingRuleConditions within the group. Valid values are `AND`, `OR`.
        """
elif False:
    AlertMutingRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertMutingRuleConditionArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['AlertMutingRuleConditionConditionArgs']]],
                 operator: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AlertMutingRuleConditionConditionArgs']]] conditions: The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
        :param pulumi.Input[str] operator: The operator used to combine all the MutingRuleConditions within the group. Valid values are `AND`, `OR`.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['AlertMutingRuleConditionConditionArgs']]]:
        """
        The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['AlertMutingRuleConditionConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        The operator used to combine all the MutingRuleConditions within the group. Valid values are `AND`, `OR`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class AlertMutingRuleConditionConditionArgsDict(TypedDict):
        attribute: pulumi.Input[str]
        """
        The attribute on an incident.
        """
        operator: pulumi.Input[str]
        """
        The operator used to compare the attribute's value with the supplied value(s).
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        The value(s) to compare against the attribute's value.
        """
elif False:
    AlertMutingRuleConditionConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertMutingRuleConditionConditionArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] attribute: The attribute on an incident.
        :param pulumi.Input[str] operator: The operator used to compare the attribute's value with the supplied value(s).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: The value(s) to compare against the attribute's value.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        """
        The attribute on an incident.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        The operator used to compare the attribute's value with the supplied value(s).
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The value(s) to compare against the attribute's value.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class AlertMutingRuleScheduleArgsDict(TypedDict):
        time_zone: pulumi.Input[str]
        """
        The time zone that applies to the MutingRule schedule.
        """
        end_repeat: NotRequired[pulumi.Input[str]]
        """
        The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeat_count`
        """
        end_time: NotRequired[pulumi.Input[str]]
        """
        The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'
        * `timeZone` (Required) The time zone that applies to the muting rule schedule. Example: 'America/Los_Angeles'. See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
        """
        repeat: NotRequired[pulumi.Input[str]]
        """
        The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
        """
        repeat_count: NotRequired[pulumi.Input[int]]
        """
        The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `end_repeat`
        """
        start_time: NotRequired[pulumi.Input[str]]
        """
        The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'
        """
        weekly_repeat_days: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
        """
elif False:
    AlertMutingRuleScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertMutingRuleScheduleArgs:
    def __init__(__self__, *,
                 time_zone: pulumi.Input[str],
                 end_repeat: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 repeat: Optional[pulumi.Input[str]] = None,
                 repeat_count: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 weekly_repeat_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] time_zone: The time zone that applies to the MutingRule schedule.
        :param pulumi.Input[str] end_repeat: The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeat_count`
        :param pulumi.Input[str] end_time: The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'
               * `timeZone` (Required) The time zone that applies to the muting rule schedule. Example: 'America/Los_Angeles'. See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
        :param pulumi.Input[str] repeat: The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
        :param pulumi.Input[int] repeat_count: The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `end_repeat`
        :param pulumi.Input[str] start_time: The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'
        :param pulumi.Input[Sequence[pulumi.Input[str]]] weekly_repeat_days: The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
        """
        pulumi.set(__self__, "time_zone", time_zone)
        if end_repeat is not None:
            pulumi.set(__self__, "end_repeat", end_repeat)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if repeat is not None:
            pulumi.set(__self__, "repeat", repeat)
        if repeat_count is not None:
            pulumi.set(__self__, "repeat_count", repeat_count)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if weekly_repeat_days is not None:
            pulumi.set(__self__, "weekly_repeat_days", weekly_repeat_days)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[str]:
        """
        The time zone that applies to the MutingRule schedule.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="endRepeat")
    def end_repeat(self) -> Optional[pulumi.Input[str]]:
        """
        The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeat_count`
        """
        return pulumi.get(self, "end_repeat")

    @end_repeat.setter
    def end_repeat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_repeat", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'
        * `timeZone` (Required) The time zone that applies to the muting rule schedule. Example: 'America/Los_Angeles'. See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter
    def repeat(self) -> Optional[pulumi.Input[str]]:
        """
        The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
        """
        return pulumi.get(self, "repeat")

    @repeat.setter
    def repeat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat", value)

    @property
    @pulumi.getter(name="repeatCount")
    def repeat_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `end_repeat`
        """
        return pulumi.get(self, "repeat_count")

    @repeat_count.setter
    def repeat_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "repeat_count", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="weeklyRepeatDays")
    def weekly_repeat_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
        """
        return pulumi.get(self, "weekly_repeat_days")

    @weekly_repeat_days.setter
    def weekly_repeat_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "weekly_repeat_days", value)


if not MYPY:
    class EntityTagsTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        """
        The key of the tag.

        > **NOTE:** One should not use reserved (immutable) keys with this resource. It is recommended to choose unique and descriptive keys which do not conflict with existing reserved keys.
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        The tag values.
        """
elif False:
    EntityTagsTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EntityTagsTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] key: The key of the tag.
               
               > **NOTE:** One should not use reserved (immutable) keys with this resource. It is recommended to choose unique and descriptive keys which do not conflict with existing reserved keys.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: The tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the tag.

        > **NOTE:** One should not use reserved (immutable) keys with this resource. It is recommended to choose unique and descriptive keys which do not conflict with existing reserved keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The tag values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class InfraAlertConditionCriticalArgsDict(TypedDict):
        duration: pulumi.Input[int]
        time_function: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[float]]
elif False:
    InfraAlertConditionCriticalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InfraAlertConditionCriticalArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[int],
                 time_function: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[float]] = None):
        pulumi.set(__self__, "duration", duration)
        if time_function is not None:
            pulumi.set(__self__, "time_function", time_function)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[int]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="timeFunction")
    def time_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_function")

    @time_function.setter
    def time_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_function", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class InfraAlertConditionWarningArgsDict(TypedDict):
        duration: pulumi.Input[int]
        time_function: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[float]]
elif False:
    InfraAlertConditionWarningArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InfraAlertConditionWarningArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[int],
                 time_function: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[float]] = None):
        pulumi.set(__self__, "duration", duration)
        if time_function is not None:
            pulumi.set(__self__, "time_function", time_function)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[int]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="timeFunction")
    def time_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_function")

    @time_function.setter
    def time_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_function", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class MonitorDowntimeEndRepeatArgsDict(TypedDict):
        on_date: NotRequired[pulumi.Input[str]]
        """
        A date, on which the Monitor Downtime's repeat cycle is expected to end.
        """
        on_repeat: NotRequired[pulumi.Input[int]]
        """
        Number of repetitions after which the Monitor Downtime's repeat cycle is expected to end.
        """
elif False:
    MonitorDowntimeEndRepeatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MonitorDowntimeEndRepeatArgs:
    def __init__(__self__, *,
                 on_date: Optional[pulumi.Input[str]] = None,
                 on_repeat: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] on_date: A date, on which the Monitor Downtime's repeat cycle is expected to end.
        :param pulumi.Input[int] on_repeat: Number of repetitions after which the Monitor Downtime's repeat cycle is expected to end.
        """
        if on_date is not None:
            pulumi.set(__self__, "on_date", on_date)
        if on_repeat is not None:
            pulumi.set(__self__, "on_repeat", on_repeat)

    @property
    @pulumi.getter(name="onDate")
    def on_date(self) -> Optional[pulumi.Input[str]]:
        """
        A date, on which the Monitor Downtime's repeat cycle is expected to end.
        """
        return pulumi.get(self, "on_date")

    @on_date.setter
    def on_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_date", value)

    @property
    @pulumi.getter(name="onRepeat")
    def on_repeat(self) -> Optional[pulumi.Input[int]]:
        """
        Number of repetitions after which the Monitor Downtime's repeat cycle is expected to end.
        """
        return pulumi.get(self, "on_repeat")

    @on_repeat.setter
    def on_repeat(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "on_repeat", value)


if not MYPY:
    class MonitorDowntimeFrequencyArgsDict(TypedDict):
        days_of_months: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        A numerical list of days of a month on which the Monitor Downtime is scheduled to run.
        """
        days_of_week: NotRequired[pulumi.Input['MonitorDowntimeFrequencyDaysOfWeekArgsDict']]
        """
        A list of days of the week on which the Monitor Downtime is scheduled to run.
        """
elif False:
    MonitorDowntimeFrequencyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MonitorDowntimeFrequencyArgs:
    def __init__(__self__, *,
                 days_of_months: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 days_of_week: Optional[pulumi.Input['MonitorDowntimeFrequencyDaysOfWeekArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] days_of_months: A numerical list of days of a month on which the Monitor Downtime is scheduled to run.
        :param pulumi.Input['MonitorDowntimeFrequencyDaysOfWeekArgs'] days_of_week: A list of days of the week on which the Monitor Downtime is scheduled to run.
        """
        if days_of_months is not None:
            pulumi.set(__self__, "days_of_months", days_of_months)
        if days_of_week is not None:
            pulumi.set(__self__, "days_of_week", days_of_week)

    @property
    @pulumi.getter(name="daysOfMonths")
    def days_of_months(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A numerical list of days of a month on which the Monitor Downtime is scheduled to run.
        """
        return pulumi.get(self, "days_of_months")

    @days_of_months.setter
    def days_of_months(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "days_of_months", value)

    @property
    @pulumi.getter(name="daysOfWeek")
    def days_of_week(self) -> Optional[pulumi.Input['MonitorDowntimeFrequencyDaysOfWeekArgs']]:
        """
        A list of days of the week on which the Monitor Downtime is scheduled to run.
        """
        return pulumi.get(self, "days_of_week")

    @days_of_week.setter
    def days_of_week(self, value: Optional[pulumi.Input['MonitorDowntimeFrequencyDaysOfWeekArgs']]):
        pulumi.set(self, "days_of_week", value)


if not MYPY:
    class MonitorDowntimeFrequencyDaysOfWeekArgsDict(TypedDict):
        ordinal_day_of_month: pulumi.Input[str]
        """
        An occurrence of the day selected within the month.
        """
        week_day: pulumi.Input[str]
        """
        The day of the week on which the Monitor Downtime would run.
        """
elif False:
    MonitorDowntimeFrequencyDaysOfWeekArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MonitorDowntimeFrequencyDaysOfWeekArgs:
    def __init__(__self__, *,
                 ordinal_day_of_month: pulumi.Input[str],
                 week_day: pulumi.Input[str]):
        """
        :param pulumi.Input[str] ordinal_day_of_month: An occurrence of the day selected within the month.
        :param pulumi.Input[str] week_day: The day of the week on which the Monitor Downtime would run.
        """
        pulumi.set(__self__, "ordinal_day_of_month", ordinal_day_of_month)
        pulumi.set(__self__, "week_day", week_day)

    @property
    @pulumi.getter(name="ordinalDayOfMonth")
    def ordinal_day_of_month(self) -> pulumi.Input[str]:
        """
        An occurrence of the day selected within the month.
        """
        return pulumi.get(self, "ordinal_day_of_month")

    @ordinal_day_of_month.setter
    def ordinal_day_of_month(self, value: pulumi.Input[str]):
        pulumi.set(self, "ordinal_day_of_month", value)

    @property
    @pulumi.getter(name="weekDay")
    def week_day(self) -> pulumi.Input[str]:
        """
        The day of the week on which the Monitor Downtime would run.
        """
        return pulumi.get(self, "week_day")

    @week_day.setter
    def week_day(self, value: pulumi.Input[str]):
        pulumi.set(self, "week_day", value)


if not MYPY:
    class NotificationChannelPropertyArgsDict(TypedDict):
        key: pulumi.Input[str]
        """
        Notification property key.
        """
        value: pulumi.Input[str]
        """
        Notification property value.
        """
        display_value: NotRequired[pulumi.Input[str]]
        """
        Notification property display key.
        """
        label: NotRequired[pulumi.Input[str]]
        """
        Notification property label.
        """
elif False:
    NotificationChannelPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NotificationChannelPropertyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str],
                 display_value: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Notification property key.
        :param pulumi.Input[str] value: Notification property value.
        :param pulumi.Input[str] display_value: Notification property display key.
        :param pulumi.Input[str] label: Notification property label.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if display_value is not None:
            pulumi.set(__self__, "display_value", display_value)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Notification property key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Notification property value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="displayValue")
    def display_value(self) -> Optional[pulumi.Input[str]]:
        """
        Notification property display key.
        """
        return pulumi.get(self, "display_value")

    @display_value.setter
    def display_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_value", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Notification property label.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


if not MYPY:
    class NotificationDestinationAuthBasicArgsDict(TypedDict):
        password: pulumi.Input[str]
        """
        Specifies an authentication password for use with a destination.
        """
        user: pulumi.Input[str]
        """
        The username of the basic auth.
        """
elif False:
    NotificationDestinationAuthBasicArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NotificationDestinationAuthBasicArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 user: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: Specifies an authentication password for use with a destination.
        :param pulumi.Input[str] user: The username of the basic auth.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Specifies an authentication password for use with a destination.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        """
        The username of the basic auth.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)


if not MYPY:
    class NotificationDestinationAuthCustomHeaderArgsDict(TypedDict):
        key: pulumi.Input[str]
        """
        The notification property key.
        """
        value: pulumi.Input[str]
        """
        The notification property value.
        """
elif False:
    NotificationDestinationAuthCustomHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NotificationDestinationAuthCustomHeaderArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The notification property key.
        :param pulumi.Input[str] value: The notification property value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The notification property key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The notification property value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NotificationDestinationAuthTokenArgsDict(TypedDict):
        token: pulumi.Input[str]
        """
        Specifies the token for integrating.
        """
        prefix: NotRequired[pulumi.Input[str]]
        """
        The prefix of the URL.
        """
elif False:
    NotificationDestinationAuthTokenArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NotificationDestinationAuthTokenArgs:
    def __init__(__self__, *,
                 token: pulumi.Input[str],
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] token: Specifies the token for integrating.
        :param pulumi.Input[str] prefix: The prefix of the URL.
        """
        pulumi.set(__self__, "token", token)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        """
        Specifies the token for integrating.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix of the URL.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


if not MYPY:
    class NotificationDestinationPropertyArgsDict(TypedDict):
        key: pulumi.Input[str]
        """
        Notification property key.
        """
        value: pulumi.Input[str]
        """
        Notification property value.
        """
        display_value: NotRequired[pulumi.Input[str]]
        """
        Notification property display key.
        """
        label: NotRequired[pulumi.Input[str]]
        """
        Notification property label.
        """
elif False:
    NotificationDestinationPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NotificationDestinationPropertyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str],
                 display_value: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Notification property key.
        :param pulumi.Input[str] value: Notification property value.
        :param pulumi.Input[str] display_value: Notification property display key.
        :param pulumi.Input[str] label: Notification property label.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if display_value is not None:
            pulumi.set(__self__, "display_value", display_value)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Notification property key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Notification property value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="displayValue")
    def display_value(self) -> Optional[pulumi.Input[str]]:
        """
        Notification property display key.
        """
        return pulumi.get(self, "display_value")

    @display_value.setter
    def display_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_value", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Notification property label.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


if not MYPY:
    class NotificationDestinationSecureUrlArgsDict(TypedDict):
        prefix: pulumi.Input[str]
        """
        The prefix of the URL.
        """
        secure_suffix: pulumi.Input[str]
        """
        The suffix of the URL, which contains sensitive data.
        """
elif False:
    NotificationDestinationSecureUrlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NotificationDestinationSecureUrlArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[str],
                 secure_suffix: pulumi.Input[str]):
        """
        :param pulumi.Input[str] prefix: The prefix of the URL.
        :param pulumi.Input[str] secure_suffix: The suffix of the URL, which contains sensitive data.
        """
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "secure_suffix", secure_suffix)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        """
        The prefix of the URL.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="secureSuffix")
    def secure_suffix(self) -> pulumi.Input[str]:
        """
        The suffix of the URL, which contains sensitive data.
        """
        return pulumi.get(self, "secure_suffix")

    @secure_suffix.setter
    def secure_suffix(self, value: pulumi.Input[str]):
        pulumi.set(self, "secure_suffix", value)


if not MYPY:
    class NrqlAlertConditionCriticalArgsDict(TypedDict):
        threshold: pulumi.Input[float]
        """
        For baseline conditions must be in range [1, 1000].
        """
        duration: NotRequired[pulumi.Input[int]]
        """
        In minutes, must be in the range of 1 to 120 (inclusive).
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
        """
        threshold_duration: NotRequired[pulumi.Input[int]]
        """
        The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
        """
        threshold_occurrences: NotRequired[pulumi.Input[str]]
        """
        The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
        """
        time_function: NotRequired[pulumi.Input[str]]
        """
        Valid values are: 'all' or 'any'
        """
elif False:
    NrqlAlertConditionCriticalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NrqlAlertConditionCriticalArgs:
    def __init__(__self__, *,
                 threshold: pulumi.Input[float],
                 duration: Optional[pulumi.Input[int]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 threshold_duration: Optional[pulumi.Input[int]] = None,
                 threshold_occurrences: Optional[pulumi.Input[str]] = None,
                 time_function: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] threshold: For baseline conditions must be in range [1, 1000].
        :param pulumi.Input[int] duration: In minutes, must be in the range of 1 to 120 (inclusive).
        :param pulumi.Input[str] operator: One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
        :param pulumi.Input[int] threshold_duration: The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
        :param pulumi.Input[str] threshold_occurrences: The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
        :param pulumi.Input[str] time_function: Valid values are: 'all' or 'any'
        """
        pulumi.set(__self__, "threshold", threshold)
        if duration is not None:
            warnings.warn("""use `threshold_duration` attribute instead""", DeprecationWarning)
            pulumi.log.warn("""duration is deprecated: use `threshold_duration` attribute instead""")
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if threshold_duration is not None:
            pulumi.set(__self__, "threshold_duration", threshold_duration)
        if threshold_occurrences is not None:
            pulumi.set(__self__, "threshold_occurrences", threshold_occurrences)
        if time_function is not None:
            warnings.warn("""use `threshold_occurrences` attribute instead""", DeprecationWarning)
            pulumi.log.warn("""time_function is deprecated: use `threshold_occurrences` attribute instead""")
        if time_function is not None:
            pulumi.set(__self__, "time_function", time_function)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[float]:
        """
        For baseline conditions must be in range [1, 1000].
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""use `threshold_duration` attribute instead""")
    def duration(self) -> Optional[pulumi.Input[int]]:
        """
        In minutes, must be in the range of 1 to 120 (inclusive).
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="thresholdDuration")
    def threshold_duration(self) -> Optional[pulumi.Input[int]]:
        """
        The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
        """
        return pulumi.get(self, "threshold_duration")

    @threshold_duration.setter
    def threshold_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_duration", value)

    @property
    @pulumi.getter(name="thresholdOccurrences")
    def threshold_occurrences(self) -> Optional[pulumi.Input[str]]:
        """
        The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
        """
        return pulumi.get(self, "threshold_occurrences")

    @threshold_occurrences.setter
    def threshold_occurrences(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "threshold_occurrences", value)

    @property
    @pulumi.getter(name="timeFunction")
    @_utilities.deprecated("""use `threshold_occurrences` attribute instead""")
    def time_function(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are: 'all' or 'any'
        """
        return pulumi.get(self, "time_function")

    @time_function.setter
    def time_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_function", value)


if not MYPY:
    class NrqlAlertConditionNrqlArgsDict(TypedDict):
        query: pulumi.Input[str]
        data_account_id: NotRequired[pulumi.Input[str]]
        """
        BETA PREVIEW: the `data_account_id` field is in limited release and only enabled for preview on a per-account basis. - The New Relic account ID to use as the basis for the NRQL alert condition's `query`; will default to `account_id` if unspecified.
        """
        evaluation_offset: NotRequired[pulumi.Input[int]]
        """
        NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `evaluation_offset`.
        """
        since_value: NotRequired[pulumi.Input[str]]
        """
        NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `since_value`.
        """
elif False:
    NrqlAlertConditionNrqlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NrqlAlertConditionNrqlArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 data_account_id: Optional[pulumi.Input[str]] = None,
                 evaluation_offset: Optional[pulumi.Input[int]] = None,
                 since_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_account_id: BETA PREVIEW: the `data_account_id` field is in limited release and only enabled for preview on a per-account basis. - The New Relic account ID to use as the basis for the NRQL alert condition's `query`; will default to `account_id` if unspecified.
        :param pulumi.Input[int] evaluation_offset: NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `evaluation_offset`.
        :param pulumi.Input[str] since_value: NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `since_value`.
        """
        pulumi.set(__self__, "query", query)
        if data_account_id is not None:
            pulumi.set(__self__, "data_account_id", data_account_id)
        if evaluation_offset is not None:
            warnings.warn("""use `aggregation_method` attribute instead""", DeprecationWarning)
            pulumi.log.warn("""evaluation_offset is deprecated: use `aggregation_method` attribute instead""")
        if evaluation_offset is not None:
            pulumi.set(__self__, "evaluation_offset", evaluation_offset)
        if since_value is not None:
            warnings.warn("""use `aggregation_method` attribute instead""", DeprecationWarning)
            pulumi.log.warn("""since_value is deprecated: use `aggregation_method` attribute instead""")
        if since_value is not None:
            pulumi.set(__self__, "since_value", since_value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="dataAccountId")
    def data_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        BETA PREVIEW: the `data_account_id` field is in limited release and only enabled for preview on a per-account basis. - The New Relic account ID to use as the basis for the NRQL alert condition's `query`; will default to `account_id` if unspecified.
        """
        return pulumi.get(self, "data_account_id")

    @data_account_id.setter
    def data_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_account_id", value)

    @property
    @pulumi.getter(name="evaluationOffset")
    @_utilities.deprecated("""use `aggregation_method` attribute instead""")
    def evaluation_offset(self) -> Optional[pulumi.Input[int]]:
        """
        NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `evaluation_offset`.
        """
        return pulumi.get(self, "evaluation_offset")

    @evaluation_offset.setter
    def evaluation_offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "evaluation_offset", value)

    @property
    @pulumi.getter(name="sinceValue")
    @_utilities.deprecated("""use `aggregation_method` attribute instead""")
    def since_value(self) -> Optional[pulumi.Input[str]]:
        """
        NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `since_value`.
        """
        return pulumi.get(self, "since_value")

    @since_value.setter
    def since_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "since_value", value)


if not MYPY:
    class NrqlAlertConditionTermArgsDict(TypedDict):
        threshold: pulumi.Input[float]
        """
        For baseline conditions must be in range [1, 1000].
        """
        duration: NotRequired[pulumi.Input[int]]
        """
        In minutes, must be in the range of 1 to 120 (inclusive).
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
        """
        priority: NotRequired[pulumi.Input[str]]
        """
        One of (critical, warning). Defaults to 'critical'. At least one condition term must have priority set to 'critical'.
        """
        threshold_duration: NotRequired[pulumi.Input[int]]
        """
        The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
        """
        threshold_occurrences: NotRequired[pulumi.Input[str]]
        """
        The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
        """
        time_function: NotRequired[pulumi.Input[str]]
        """
        Valid values are: 'all' or 'any'
        """
elif False:
    NrqlAlertConditionTermArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NrqlAlertConditionTermArgs:
    def __init__(__self__, *,
                 threshold: pulumi.Input[float],
                 duration: Optional[pulumi.Input[int]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 threshold_duration: Optional[pulumi.Input[int]] = None,
                 threshold_occurrences: Optional[pulumi.Input[str]] = None,
                 time_function: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] threshold: For baseline conditions must be in range [1, 1000].
        :param pulumi.Input[int] duration: In minutes, must be in the range of 1 to 120 (inclusive).
        :param pulumi.Input[str] operator: One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
        :param pulumi.Input[str] priority: One of (critical, warning). Defaults to 'critical'. At least one condition term must have priority set to 'critical'.
        :param pulumi.Input[int] threshold_duration: The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
        :param pulumi.Input[str] threshold_occurrences: The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
        :param pulumi.Input[str] time_function: Valid values are: 'all' or 'any'
        """
        pulumi.set(__self__, "threshold", threshold)
        if duration is not None:
            warnings.warn("""use `threshold_duration` attribute instead""", DeprecationWarning)
            pulumi.log.warn("""duration is deprecated: use `threshold_duration` attribute instead""")
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if threshold_duration is not None:
            pulumi.set(__self__, "threshold_duration", threshold_duration)
        if threshold_occurrences is not None:
            pulumi.set(__self__, "threshold_occurrences", threshold_occurrences)
        if time_function is not None:
            warnings.warn("""use `threshold_occurrences` attribute instead""", DeprecationWarning)
            pulumi.log.warn("""time_function is deprecated: use `threshold_occurrences` attribute instead""")
        if time_function is not None:
            pulumi.set(__self__, "time_function", time_function)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[float]:
        """
        For baseline conditions must be in range [1, 1000].
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""use `threshold_duration` attribute instead""")
    def duration(self) -> Optional[pulumi.Input[int]]:
        """
        In minutes, must be in the range of 1 to 120 (inclusive).
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        One of (critical, warning). Defaults to 'critical'. At least one condition term must have priority set to 'critical'.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="thresholdDuration")
    def threshold_duration(self) -> Optional[pulumi.Input[int]]:
        """
        The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
        """
        return pulumi.get(self, "threshold_duration")

    @threshold_duration.setter
    def threshold_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_duration", value)

    @property
    @pulumi.getter(name="thresholdOccurrences")
    def threshold_occurrences(self) -> Optional[pulumi.Input[str]]:
        """
        The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
        """
        return pulumi.get(self, "threshold_occurrences")

    @threshold_occurrences.setter
    def threshold_occurrences(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "threshold_occurrences", value)

    @property
    @pulumi.getter(name="timeFunction")
    @_utilities.deprecated("""use `threshold_occurrences` attribute instead""")
    def time_function(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are: 'all' or 'any'
        """
        return pulumi.get(self, "time_function")

    @time_function.setter
    def time_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_function", value)


if not MYPY:
    class NrqlAlertConditionWarningArgsDict(TypedDict):
        threshold: pulumi.Input[float]
        """
        For baseline conditions must be in range [1, 1000].
        """
        duration: NotRequired[pulumi.Input[int]]
        """
        In minutes, must be in the range of 1 to 120 (inclusive).
        """
        operator: NotRequired[pulumi.Input[str]]
        """
        One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
        """
        threshold_duration: NotRequired[pulumi.Input[int]]
        """
        The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
        """
        threshold_occurrences: NotRequired[pulumi.Input[str]]
        """
        The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
        """
        time_function: NotRequired[pulumi.Input[str]]
        """
        Valid values are: 'all' or 'any'
        """
elif False:
    NrqlAlertConditionWarningArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NrqlAlertConditionWarningArgs:
    def __init__(__self__, *,
                 threshold: pulumi.Input[float],
                 duration: Optional[pulumi.Input[int]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 threshold_duration: Optional[pulumi.Input[int]] = None,
                 threshold_occurrences: Optional[pulumi.Input[str]] = None,
                 time_function: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] threshold: For baseline conditions must be in range [1, 1000].
        :param pulumi.Input[int] duration: In minutes, must be in the range of 1 to 120 (inclusive).
        :param pulumi.Input[str] operator: One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
        :param pulumi.Input[int] threshold_duration: The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
        :param pulumi.Input[str] threshold_occurrences: The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
        :param pulumi.Input[str] time_function: Valid values are: 'all' or 'any'
        """
        pulumi.set(__self__, "threshold", threshold)
        if duration is not None:
            warnings.warn("""use `threshold_duration` attribute instead""", DeprecationWarning)
            pulumi.log.warn("""duration is deprecated: use `threshold_duration` attribute instead""")
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if threshold_duration is not None:
            pulumi.set(__self__, "threshold_duration", threshold_duration)
        if threshold_occurrences is not None:
            pulumi.set(__self__, "threshold_occurrences", threshold_occurrences)
        if time_function is not None:
            warnings.warn("""use `threshold_occurrences` attribute instead""", DeprecationWarning)
            pulumi.log.warn("""time_function is deprecated: use `threshold_occurrences` attribute instead""")
        if time_function is not None:
            pulumi.set(__self__, "time_function", time_function)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[float]:
        """
        For baseline conditions must be in range [1, 1000].
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""use `threshold_duration` attribute instead""")
    def duration(self) -> Optional[pulumi.Input[int]]:
        """
        In minutes, must be in the range of 1 to 120 (inclusive).
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="thresholdDuration")
    def threshold_duration(self) -> Optional[pulumi.Input[int]]:
        """
        The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
        """
        return pulumi.get(self, "threshold_duration")

    @threshold_duration.setter
    def threshold_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_duration", value)

    @property
    @pulumi.getter(name="thresholdOccurrences")
    def threshold_occurrences(self) -> Optional[pulumi.Input[str]]:
        """
        The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
        """
        return pulumi.get(self, "threshold_occurrences")

    @threshold_occurrences.setter
    def threshold_occurrences(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "threshold_occurrences", value)

    @property
    @pulumi.getter(name="timeFunction")
    @_utilities.deprecated("""use `threshold_occurrences` attribute instead""")
    def time_function(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are: 'all' or 'any'
        """
        return pulumi.get(self, "time_function")

    @time_function.setter
    def time_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_function", value)


if not MYPY:
    class ObfuscationRuleActionArgsDict(TypedDict):
        attributes: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Attribute names for action. An empty list applies the action to all the attributes.
        """
        expression_id: pulumi.Input[str]
        """
        Expression Id for action.
        """
        method: pulumi.Input[str]
        """
        Obfuscation method to use. Methods for replacing obfuscated values are `HASH_SHA256` and `MASK`.
        """
elif False:
    ObfuscationRuleActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ObfuscationRuleActionArgs:
    def __init__(__self__, *,
                 attributes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 expression_id: pulumi.Input[str],
                 method: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] attributes: Attribute names for action. An empty list applies the action to all the attributes.
        :param pulumi.Input[str] expression_id: Expression Id for action.
        :param pulumi.Input[str] method: Obfuscation method to use. Methods for replacing obfuscated values are `HASH_SHA256` and `MASK`.
        """
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "expression_id", expression_id)
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Attribute names for action. An empty list applies the action to all the attributes.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="expressionId")
    def expression_id(self) -> pulumi.Input[str]:
        """
        Expression Id for action.
        """
        return pulumi.get(self, "expression_id")

    @expression_id.setter
    def expression_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_id", value)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        """
        Obfuscation method to use. Methods for replacing obfuscated values are `HASH_SHA256` and `MASK`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


if not MYPY:
    class OneDashboardPageArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Brief text describing the dashboard.
        """
        guid: NotRequired[pulumi.Input[str]]
        """
        The unique entity identifier of the dashboard page in New Relic.
        """
        widget_areas: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaArgsDict']]]]
        """
        An area widget.
        """
        widget_bars: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarArgsDict']]]]
        """
        A bar widget.
        """
        widget_billboards: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardArgsDict']]]]
        """
        A billboard widget.
        """
        widget_bullets: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletArgsDict']]]]
        """
        A bullet widget.
        """
        widget_funnels: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelArgsDict']]]]
        """
        A funnel widget.
        """
        widget_heatmaps: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapArgsDict']]]]
        """
        A heatmap widget.
        """
        widget_histograms: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramArgsDict']]]]
        """
        A histogram widget.
        """
        widget_jsons: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonArgsDict']]]]
        """
        A JSON widget.
        """
        widget_lines: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineArgsDict']]]]
        """
        A line widget.
        """
        widget_log_tables: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableArgsDict']]]]
        """
        A log table widget.
        """
        widget_markdowns: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownArgsDict']]]]
        """
        A markdown widget.
        """
        widget_pies: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyArgsDict']]]]
        """
        A pie widget.
        """
        widget_stacked_bars: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarArgsDict']]]]
        """
        A stacked bar widget.
        """
        widget_tables: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableArgsDict']]]]
        """
        A table widget.
        """
elif False:
    OneDashboardPageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 guid: Optional[pulumi.Input[str]] = None,
                 widget_areas: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaArgs']]]] = None,
                 widget_bars: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarArgs']]]] = None,
                 widget_billboards: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardArgs']]]] = None,
                 widget_bullets: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletArgs']]]] = None,
                 widget_funnels: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelArgs']]]] = None,
                 widget_heatmaps: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapArgs']]]] = None,
                 widget_histograms: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramArgs']]]] = None,
                 widget_jsons: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonArgs']]]] = None,
                 widget_lines: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineArgs']]]] = None,
                 widget_log_tables: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableArgs']]]] = None,
                 widget_markdowns: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownArgs']]]] = None,
                 widget_pies: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyArgs']]]] = None,
                 widget_stacked_bars: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarArgs']]]] = None,
                 widget_tables: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableArgs']]]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] description: Brief text describing the dashboard.
        :param pulumi.Input[str] guid: The unique entity identifier of the dashboard page in New Relic.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaArgs']]] widget_areas: An area widget.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarArgs']]] widget_bars: A bar widget.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardArgs']]] widget_billboards: A billboard widget.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletArgs']]] widget_bullets: A bullet widget.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelArgs']]] widget_funnels: A funnel widget.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapArgs']]] widget_heatmaps: A heatmap widget.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramArgs']]] widget_histograms: A histogram widget.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonArgs']]] widget_jsons: A JSON widget.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineArgs']]] widget_lines: A line widget.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableArgs']]] widget_log_tables: A log table widget.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownArgs']]] widget_markdowns: A markdown widget.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyArgs']]] widget_pies: A pie widget.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarArgs']]] widget_stacked_bars: A stacked bar widget.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableArgs']]] widget_tables: A table widget.
        """
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)
        if widget_areas is not None:
            pulumi.set(__self__, "widget_areas", widget_areas)
        if widget_bars is not None:
            pulumi.set(__self__, "widget_bars", widget_bars)
        if widget_billboards is not None:
            pulumi.set(__self__, "widget_billboards", widget_billboards)
        if widget_bullets is not None:
            pulumi.set(__self__, "widget_bullets", widget_bullets)
        if widget_funnels is not None:
            pulumi.set(__self__, "widget_funnels", widget_funnels)
        if widget_heatmaps is not None:
            pulumi.set(__self__, "widget_heatmaps", widget_heatmaps)
        if widget_histograms is not None:
            pulumi.set(__self__, "widget_histograms", widget_histograms)
        if widget_jsons is not None:
            pulumi.set(__self__, "widget_jsons", widget_jsons)
        if widget_lines is not None:
            pulumi.set(__self__, "widget_lines", widget_lines)
        if widget_log_tables is not None:
            pulumi.set(__self__, "widget_log_tables", widget_log_tables)
        if widget_markdowns is not None:
            pulumi.set(__self__, "widget_markdowns", widget_markdowns)
        if widget_pies is not None:
            pulumi.set(__self__, "widget_pies", widget_pies)
        if widget_stacked_bars is not None:
            pulumi.set(__self__, "widget_stacked_bars", widget_stacked_bars)
        if widget_tables is not None:
            pulumi.set(__self__, "widget_tables", widget_tables)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Brief text describing the dashboard.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def guid(self) -> Optional[pulumi.Input[str]]:
        """
        The unique entity identifier of the dashboard page in New Relic.
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guid", value)

    @property
    @pulumi.getter(name="widgetAreas")
    def widget_areas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaArgs']]]]:
        """
        An area widget.
        """
        return pulumi.get(self, "widget_areas")

    @widget_areas.setter
    def widget_areas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaArgs']]]]):
        pulumi.set(self, "widget_areas", value)

    @property
    @pulumi.getter(name="widgetBars")
    def widget_bars(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarArgs']]]]:
        """
        A bar widget.
        """
        return pulumi.get(self, "widget_bars")

    @widget_bars.setter
    def widget_bars(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarArgs']]]]):
        pulumi.set(self, "widget_bars", value)

    @property
    @pulumi.getter(name="widgetBillboards")
    def widget_billboards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardArgs']]]]:
        """
        A billboard widget.
        """
        return pulumi.get(self, "widget_billboards")

    @widget_billboards.setter
    def widget_billboards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardArgs']]]]):
        pulumi.set(self, "widget_billboards", value)

    @property
    @pulumi.getter(name="widgetBullets")
    def widget_bullets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletArgs']]]]:
        """
        A bullet widget.
        """
        return pulumi.get(self, "widget_bullets")

    @widget_bullets.setter
    def widget_bullets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletArgs']]]]):
        pulumi.set(self, "widget_bullets", value)

    @property
    @pulumi.getter(name="widgetFunnels")
    def widget_funnels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelArgs']]]]:
        """
        A funnel widget.
        """
        return pulumi.get(self, "widget_funnels")

    @widget_funnels.setter
    def widget_funnels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelArgs']]]]):
        pulumi.set(self, "widget_funnels", value)

    @property
    @pulumi.getter(name="widgetHeatmaps")
    def widget_heatmaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapArgs']]]]:
        """
        A heatmap widget.
        """
        return pulumi.get(self, "widget_heatmaps")

    @widget_heatmaps.setter
    def widget_heatmaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapArgs']]]]):
        pulumi.set(self, "widget_heatmaps", value)

    @property
    @pulumi.getter(name="widgetHistograms")
    def widget_histograms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramArgs']]]]:
        """
        A histogram widget.
        """
        return pulumi.get(self, "widget_histograms")

    @widget_histograms.setter
    def widget_histograms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramArgs']]]]):
        pulumi.set(self, "widget_histograms", value)

    @property
    @pulumi.getter(name="widgetJsons")
    def widget_jsons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonArgs']]]]:
        """
        A JSON widget.
        """
        return pulumi.get(self, "widget_jsons")

    @widget_jsons.setter
    def widget_jsons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonArgs']]]]):
        pulumi.set(self, "widget_jsons", value)

    @property
    @pulumi.getter(name="widgetLines")
    def widget_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineArgs']]]]:
        """
        A line widget.
        """
        return pulumi.get(self, "widget_lines")

    @widget_lines.setter
    def widget_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineArgs']]]]):
        pulumi.set(self, "widget_lines", value)

    @property
    @pulumi.getter(name="widgetLogTables")
    def widget_log_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableArgs']]]]:
        """
        A log table widget.
        """
        return pulumi.get(self, "widget_log_tables")

    @widget_log_tables.setter
    def widget_log_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableArgs']]]]):
        pulumi.set(self, "widget_log_tables", value)

    @property
    @pulumi.getter(name="widgetMarkdowns")
    def widget_markdowns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownArgs']]]]:
        """
        A markdown widget.
        """
        return pulumi.get(self, "widget_markdowns")

    @widget_markdowns.setter
    def widget_markdowns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownArgs']]]]):
        pulumi.set(self, "widget_markdowns", value)

    @property
    @pulumi.getter(name="widgetPies")
    def widget_pies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyArgs']]]]:
        """
        A pie widget.
        """
        return pulumi.get(self, "widget_pies")

    @widget_pies.setter
    def widget_pies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyArgs']]]]):
        pulumi.set(self, "widget_pies", value)

    @property
    @pulumi.getter(name="widgetStackedBars")
    def widget_stacked_bars(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarArgs']]]]:
        """
        A stacked bar widget.
        """
        return pulumi.get(self, "widget_stacked_bars")

    @widget_stacked_bars.setter
    def widget_stacked_bars(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarArgs']]]]):
        pulumi.set(self, "widget_stacked_bars", value)

    @property
    @pulumi.getter(name="widgetTables")
    def widget_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableArgs']]]]:
        """
        A table widget.
        """
        return pulumi.get(self, "widget_tables")

    @widget_tables.setter
    def widget_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableArgs']]]]):
        pulumi.set(self, "widget_tables", value)


if not MYPY:
    class OneDashboardPageWidgetAreaArgsDict(TypedDict):
        column: pulumi.Input[int]
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaNrqlQueryArgsDict']]]
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        row: pulumi.Input[int]
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        title: pulumi.Input[str]
        """
        (Optional) A human-friendly display string for this value.
        """
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaColorArgsDict']]]]
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        data_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaDataFormatArgsDict']]]]
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        facet_show_other_series: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        height: NotRequired[pulumi.Input[int]]
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the widget.
        """
        ignore_time_range: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        initial_sorting: NotRequired[pulumi.Input['OneDashboardPageWidgetAreaInitialSortingArgsDict']]
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        legend_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        null_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaNullValueArgsDict']]]]
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        refresh_rate: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        units: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaUnitArgsDict']]]]
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        width: NotRequired[pulumi.Input[int]]
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        y_axis_left_max: NotRequired[pulumi.Input[float]]
        y_axis_left_min: NotRequired[pulumi.Input[float]]
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
elif False:
    OneDashboardPageWidgetAreaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetAreaArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[int],
                 nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaNrqlQueryArgs']]],
                 row: pulumi.Input[int],
                 title: pulumi.Input[str],
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaColorArgs']]]] = None,
                 data_formats: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaDataFormatArgs']]]] = None,
                 facet_show_other_series: Optional[pulumi.Input[bool]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ignore_time_range: Optional[pulumi.Input[bool]] = None,
                 initial_sorting: Optional[pulumi.Input['OneDashboardPageWidgetAreaInitialSortingArgs']] = None,
                 legend_enabled: Optional[pulumi.Input[bool]] = None,
                 null_values: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaNullValueArgs']]]] = None,
                 refresh_rate: Optional[pulumi.Input[str]] = None,
                 units: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaUnitArgs']]]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 y_axis_left_max: Optional[pulumi.Input[float]] = None,
                 y_axis_left_min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[int] column: (Required) Column position of widget from top left, starting at `1`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaNrqlQueryArgs']]] nrql_queries: (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        :param pulumi.Input[int] row: (Required) Row position of widget from top left, starting at `1`.
        :param pulumi.Input[str] title: (Optional) A human-friendly display string for this value.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaColorArgs']]] colors: (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaDataFormatArgs']]] data_formats: (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        :param pulumi.Input[bool] facet_show_other_series: (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        :param pulumi.Input[int] height: (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        :param pulumi.Input[str] id: The ID of the widget.
        :param pulumi.Input[bool] ignore_time_range: (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        :param pulumi.Input['OneDashboardPageWidgetAreaInitialSortingArgs'] initial_sorting: (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        :param pulumi.Input[bool] legend_enabled: (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaNullValueArgs']]] null_values: (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        :param pulumi.Input[str] refresh_rate: (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaUnitArgs']]] units: (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        :param pulumi.Input[int] width: (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        :param pulumi.Input[float] y_axis_left_min: , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "nrql_queries", nrql_queries)
        pulumi.set(__self__, "row", row)
        pulumi.set(__self__, "title", title)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if data_formats is not None:
            pulumi.set(__self__, "data_formats", data_formats)
        if facet_show_other_series is not None:
            pulumi.set(__self__, "facet_show_other_series", facet_show_other_series)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_time_range is not None:
            pulumi.set(__self__, "ignore_time_range", ignore_time_range)
        if initial_sorting is not None:
            pulumi.set(__self__, "initial_sorting", initial_sorting)
        if legend_enabled is not None:
            pulumi.set(__self__, "legend_enabled", legend_enabled)
        if null_values is not None:
            pulumi.set(__self__, "null_values", null_values)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if y_axis_left_max is not None:
            pulumi.set(__self__, "y_axis_left_max", y_axis_left_max)
        if y_axis_left_min is not None:
            pulumi.set(__self__, "y_axis_left_min", y_axis_left_min)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[int]:
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[int]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="nrqlQueries")
    def nrql_queries(self) -> pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaNrqlQueryArgs']]]:
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        return pulumi.get(self, "nrql_queries")

    @nrql_queries.setter
    def nrql_queries(self, value: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaNrqlQueryArgs']]]):
        pulumi.set(self, "nrql_queries", value)

    @property
    @pulumi.getter
    def row(self) -> pulumi.Input[int]:
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: pulumi.Input[int]):
        pulumi.set(self, "row", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        (Optional) A human-friendly display string for this value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaColorArgs']]]]:
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaColorArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="dataFormats")
    def data_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaDataFormatArgs']]]]:
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        return pulumi.get(self, "data_formats")

    @data_formats.setter
    def data_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaDataFormatArgs']]]]):
        pulumi.set(self, "data_formats", value)

    @property
    @pulumi.getter(name="facetShowOtherSeries")
    def facet_show_other_series(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        return pulumi.get(self, "facet_show_other_series")

    @facet_show_other_series.setter
    def facet_show_other_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facet_show_other_series", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ignoreTimeRange")
    def ignore_time_range(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        return pulumi.get(self, "ignore_time_range")

    @ignore_time_range.setter
    def ignore_time_range(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_time_range", value)

    @property
    @pulumi.getter(name="initialSorting")
    def initial_sorting(self) -> Optional[pulumi.Input['OneDashboardPageWidgetAreaInitialSortingArgs']]:
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        return pulumi.get(self, "initial_sorting")

    @initial_sorting.setter
    def initial_sorting(self, value: Optional[pulumi.Input['OneDashboardPageWidgetAreaInitialSortingArgs']]):
        pulumi.set(self, "initial_sorting", value)

    @property
    @pulumi.getter(name="legendEnabled")
    def legend_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        return pulumi.get(self, "legend_enabled")

    @legend_enabled.setter
    def legend_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legend_enabled", value)

    @property
    @pulumi.getter(name="nullValues")
    def null_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaNullValueArgs']]]]:
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        return pulumi.get(self, "null_values")

    @null_values.setter
    def null_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaNullValueArgs']]]]):
        pulumi.set(self, "null_values", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaUnitArgs']]]]:
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaUnitArgs']]]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="yAxisLeftMax")
    def y_axis_left_max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "y_axis_left_max")

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_max", value)

    @property
    @pulumi.getter(name="yAxisLeftMin")
    def y_axis_left_min(self) -> Optional[pulumi.Input[float]]:
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        return pulumi.get(self, "y_axis_left_min")

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_min", value)


if not MYPY:
    class OneDashboardPageWidgetAreaColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaColorSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetAreaColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetAreaColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaColorSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaColorSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaColorSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaColorSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetAreaColorSeriesOverrideArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetAreaColorSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetAreaColorSeriesOverrideArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[str] series_name: Series name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetAreaDataFormatArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        type: pulumi.Input[str]
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        format: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        precision: NotRequired[pulumi.Input[int]]
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
elif False:
    OneDashboardPageWidgetAreaDataFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetAreaDataFormatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 format: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] type: (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        :param pulumi.Input[str] format: (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        :param pulumi.Input[int] precision: (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)


if not MYPY:
    class OneDashboardPageWidgetAreaInitialSortingArgsDict(TypedDict):
        direction: pulumi.Input[str]
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
elif False:
    OneDashboardPageWidgetAreaInitialSortingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetAreaInitialSortingArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] direction: (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        :param pulumi.Input[str] name: The title of the dashboard.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OneDashboardPageWidgetAreaNrqlQueryArgsDict(TypedDict):
        query: pulumi.Input[str]
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        account_id: NotRequired[pulumi.Input[str]]
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
elif False:
    OneDashboardPageWidgetAreaNrqlQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetAreaNrqlQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        :param pulumi.Input[str] account_id: Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        pulumi.set(__self__, "query", query)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)


if not MYPY:
    class OneDashboardPageWidgetAreaNullValueArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaNullValueSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetAreaNullValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetAreaNullValueArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaNullValueSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaNullValueSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaNullValueSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaNullValueSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetAreaNullValueSeriesOverrideArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetAreaNullValueSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetAreaNullValueSeriesOverrideArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[str] series_name: Series name
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetAreaUnitArgsDict(TypedDict):
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaUnitSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetAreaUnitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetAreaUnitArgs:
    def __init__(__self__, *,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaUnitSeriesOverrideArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaUnitSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaUnitSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetAreaUnitSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetAreaUnitSeriesOverrideArgsDict(TypedDict):
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetAreaUnitSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetAreaUnitSeriesOverrideArgs:
    def __init__(__self__, *,
                 series_name: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] series_name: Series name
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetBarArgsDict(TypedDict):
        column: pulumi.Input[int]
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarNrqlQueryArgsDict']]]
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        row: pulumi.Input[int]
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        title: pulumi.Input[str]
        """
        (Optional) A human-friendly display string for this value.
        """
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarColorArgsDict']]]]
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        data_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarDataFormatArgsDict']]]]
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        facet_show_other_series: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        filter_current_dashboard: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Use this item to filter the current dashboard.
        """
        height: NotRequired[pulumi.Input[int]]
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the widget.
        """
        ignore_time_range: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        initial_sorting: NotRequired[pulumi.Input['OneDashboardPageWidgetBarInitialSortingArgsDict']]
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        legend_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        linked_entity_guids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
        """
        null_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarNullValueArgsDict']]]]
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        refresh_rate: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        units: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarUnitArgsDict']]]]
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        width: NotRequired[pulumi.Input[int]]
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        y_axis_left_max: NotRequired[pulumi.Input[float]]
        y_axis_left_min: NotRequired[pulumi.Input[float]]
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
elif False:
    OneDashboardPageWidgetBarArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBarArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[int],
                 nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarNrqlQueryArgs']]],
                 row: pulumi.Input[int],
                 title: pulumi.Input[str],
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarColorArgs']]]] = None,
                 data_formats: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarDataFormatArgs']]]] = None,
                 facet_show_other_series: Optional[pulumi.Input[bool]] = None,
                 filter_current_dashboard: Optional[pulumi.Input[bool]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ignore_time_range: Optional[pulumi.Input[bool]] = None,
                 initial_sorting: Optional[pulumi.Input['OneDashboardPageWidgetBarInitialSortingArgs']] = None,
                 legend_enabled: Optional[pulumi.Input[bool]] = None,
                 linked_entity_guids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 null_values: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarNullValueArgs']]]] = None,
                 refresh_rate: Optional[pulumi.Input[str]] = None,
                 units: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarUnitArgs']]]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 y_axis_left_max: Optional[pulumi.Input[float]] = None,
                 y_axis_left_min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[int] column: (Required) Column position of widget from top left, starting at `1`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarNrqlQueryArgs']]] nrql_queries: (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        :param pulumi.Input[int] row: (Required) Row position of widget from top left, starting at `1`.
        :param pulumi.Input[str] title: (Optional) A human-friendly display string for this value.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarColorArgs']]] colors: (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarDataFormatArgs']]] data_formats: (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        :param pulumi.Input[bool] facet_show_other_series: (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        :param pulumi.Input[bool] filter_current_dashboard: (Optional) Use this item to filter the current dashboard.
        :param pulumi.Input[int] height: (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        :param pulumi.Input[str] id: The ID of the widget.
        :param pulumi.Input[bool] ignore_time_range: (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        :param pulumi.Input['OneDashboardPageWidgetBarInitialSortingArgs'] initial_sorting: (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        :param pulumi.Input[bool] legend_enabled: (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] linked_entity_guids: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarNullValueArgs']]] null_values: (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        :param pulumi.Input[str] refresh_rate: (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarUnitArgs']]] units: (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        :param pulumi.Input[int] width: (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        :param pulumi.Input[float] y_axis_left_min: , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "nrql_queries", nrql_queries)
        pulumi.set(__self__, "row", row)
        pulumi.set(__self__, "title", title)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if data_formats is not None:
            pulumi.set(__self__, "data_formats", data_formats)
        if facet_show_other_series is not None:
            pulumi.set(__self__, "facet_show_other_series", facet_show_other_series)
        if filter_current_dashboard is not None:
            pulumi.set(__self__, "filter_current_dashboard", filter_current_dashboard)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_time_range is not None:
            pulumi.set(__self__, "ignore_time_range", ignore_time_range)
        if initial_sorting is not None:
            pulumi.set(__self__, "initial_sorting", initial_sorting)
        if legend_enabled is not None:
            pulumi.set(__self__, "legend_enabled", legend_enabled)
        if linked_entity_guids is not None:
            pulumi.set(__self__, "linked_entity_guids", linked_entity_guids)
        if null_values is not None:
            pulumi.set(__self__, "null_values", null_values)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if y_axis_left_max is not None:
            pulumi.set(__self__, "y_axis_left_max", y_axis_left_max)
        if y_axis_left_min is not None:
            pulumi.set(__self__, "y_axis_left_min", y_axis_left_min)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[int]:
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[int]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="nrqlQueries")
    def nrql_queries(self) -> pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarNrqlQueryArgs']]]:
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        return pulumi.get(self, "nrql_queries")

    @nrql_queries.setter
    def nrql_queries(self, value: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarNrqlQueryArgs']]]):
        pulumi.set(self, "nrql_queries", value)

    @property
    @pulumi.getter
    def row(self) -> pulumi.Input[int]:
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: pulumi.Input[int]):
        pulumi.set(self, "row", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        (Optional) A human-friendly display string for this value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarColorArgs']]]]:
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarColorArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="dataFormats")
    def data_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarDataFormatArgs']]]]:
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        return pulumi.get(self, "data_formats")

    @data_formats.setter
    def data_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarDataFormatArgs']]]]):
        pulumi.set(self, "data_formats", value)

    @property
    @pulumi.getter(name="facetShowOtherSeries")
    def facet_show_other_series(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        return pulumi.get(self, "facet_show_other_series")

    @facet_show_other_series.setter
    def facet_show_other_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facet_show_other_series", value)

    @property
    @pulumi.getter(name="filterCurrentDashboard")
    def filter_current_dashboard(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Use this item to filter the current dashboard.
        """
        return pulumi.get(self, "filter_current_dashboard")

    @filter_current_dashboard.setter
    def filter_current_dashboard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "filter_current_dashboard", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ignoreTimeRange")
    def ignore_time_range(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        return pulumi.get(self, "ignore_time_range")

    @ignore_time_range.setter
    def ignore_time_range(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_time_range", value)

    @property
    @pulumi.getter(name="initialSorting")
    def initial_sorting(self) -> Optional[pulumi.Input['OneDashboardPageWidgetBarInitialSortingArgs']]:
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        return pulumi.get(self, "initial_sorting")

    @initial_sorting.setter
    def initial_sorting(self, value: Optional[pulumi.Input['OneDashboardPageWidgetBarInitialSortingArgs']]):
        pulumi.set(self, "initial_sorting", value)

    @property
    @pulumi.getter(name="legendEnabled")
    def legend_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        return pulumi.get(self, "legend_enabled")

    @legend_enabled.setter
    def legend_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legend_enabled", value)

    @property
    @pulumi.getter(name="linkedEntityGuids")
    def linked_entity_guids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
        """
        return pulumi.get(self, "linked_entity_guids")

    @linked_entity_guids.setter
    def linked_entity_guids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "linked_entity_guids", value)

    @property
    @pulumi.getter(name="nullValues")
    def null_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarNullValueArgs']]]]:
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        return pulumi.get(self, "null_values")

    @null_values.setter
    def null_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarNullValueArgs']]]]):
        pulumi.set(self, "null_values", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarUnitArgs']]]]:
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarUnitArgs']]]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="yAxisLeftMax")
    def y_axis_left_max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "y_axis_left_max")

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_max", value)

    @property
    @pulumi.getter(name="yAxisLeftMin")
    def y_axis_left_min(self) -> Optional[pulumi.Input[float]]:
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        return pulumi.get(self, "y_axis_left_min")

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_min", value)


if not MYPY:
    class OneDashboardPageWidgetBarColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarColorSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetBarColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBarColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarColorSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarColorSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarColorSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarColorSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetBarColorSeriesOverrideArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetBarColorSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBarColorSeriesOverrideArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[str] series_name: Series name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetBarDataFormatArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        type: pulumi.Input[str]
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        format: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        precision: NotRequired[pulumi.Input[int]]
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
elif False:
    OneDashboardPageWidgetBarDataFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBarDataFormatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 format: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] type: (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        :param pulumi.Input[str] format: (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        :param pulumi.Input[int] precision: (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)


if not MYPY:
    class OneDashboardPageWidgetBarInitialSortingArgsDict(TypedDict):
        direction: pulumi.Input[str]
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
elif False:
    OneDashboardPageWidgetBarInitialSortingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBarInitialSortingArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] direction: (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        :param pulumi.Input[str] name: The title of the dashboard.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OneDashboardPageWidgetBarNrqlQueryArgsDict(TypedDict):
        query: pulumi.Input[str]
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        account_id: NotRequired[pulumi.Input[str]]
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
elif False:
    OneDashboardPageWidgetBarNrqlQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBarNrqlQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        :param pulumi.Input[str] account_id: Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        pulumi.set(__self__, "query", query)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)


if not MYPY:
    class OneDashboardPageWidgetBarNullValueArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarNullValueSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetBarNullValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBarNullValueArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarNullValueSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarNullValueSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarNullValueSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarNullValueSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetBarNullValueSeriesOverrideArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetBarNullValueSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBarNullValueSeriesOverrideArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[str] series_name: Series name
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetBarUnitArgsDict(TypedDict):
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarUnitSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetBarUnitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBarUnitArgs:
    def __init__(__self__, *,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarUnitSeriesOverrideArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarUnitSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarUnitSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBarUnitSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetBarUnitSeriesOverrideArgsDict(TypedDict):
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetBarUnitSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBarUnitSeriesOverrideArgs:
    def __init__(__self__, *,
                 series_name: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] series_name: Series name
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetBillboardArgsDict(TypedDict):
        column: pulumi.Input[int]
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardNrqlQueryArgsDict']]]
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        row: pulumi.Input[int]
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        title: pulumi.Input[str]
        """
        (Optional) A human-friendly display string for this value.
        """
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardColorArgsDict']]]]
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        critical: NotRequired[pulumi.Input[str]]
        """
        (Optional) Threshold above which the displayed value will be styled with a red color.
        """
        data_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardDataFormatArgsDict']]]]
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        facet_show_other_series: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        height: NotRequired[pulumi.Input[int]]
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the widget.
        """
        ignore_time_range: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        initial_sorting: NotRequired[pulumi.Input['OneDashboardPageWidgetBillboardInitialSortingArgsDict']]
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        legend_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        null_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardNullValueArgsDict']]]]
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        refresh_rate: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        units: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardUnitArgsDict']]]]
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        warning: NotRequired[pulumi.Input[str]]
        """
        (Optional) Threshold above which the displayed value will be styled with a yellow color.
        """
        width: NotRequired[pulumi.Input[int]]
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        y_axis_left_max: NotRequired[pulumi.Input[float]]
        y_axis_left_min: NotRequired[pulumi.Input[float]]
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
elif False:
    OneDashboardPageWidgetBillboardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBillboardArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[int],
                 nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardNrqlQueryArgs']]],
                 row: pulumi.Input[int],
                 title: pulumi.Input[str],
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardColorArgs']]]] = None,
                 critical: Optional[pulumi.Input[str]] = None,
                 data_formats: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardDataFormatArgs']]]] = None,
                 facet_show_other_series: Optional[pulumi.Input[bool]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ignore_time_range: Optional[pulumi.Input[bool]] = None,
                 initial_sorting: Optional[pulumi.Input['OneDashboardPageWidgetBillboardInitialSortingArgs']] = None,
                 legend_enabled: Optional[pulumi.Input[bool]] = None,
                 null_values: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardNullValueArgs']]]] = None,
                 refresh_rate: Optional[pulumi.Input[str]] = None,
                 units: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardUnitArgs']]]] = None,
                 warning: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 y_axis_left_max: Optional[pulumi.Input[float]] = None,
                 y_axis_left_min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[int] column: (Required) Column position of widget from top left, starting at `1`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardNrqlQueryArgs']]] nrql_queries: (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        :param pulumi.Input[int] row: (Required) Row position of widget from top left, starting at `1`.
        :param pulumi.Input[str] title: (Optional) A human-friendly display string for this value.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardColorArgs']]] colors: (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        :param pulumi.Input[str] critical: (Optional) Threshold above which the displayed value will be styled with a red color.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardDataFormatArgs']]] data_formats: (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        :param pulumi.Input[bool] facet_show_other_series: (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        :param pulumi.Input[int] height: (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        :param pulumi.Input[str] id: The ID of the widget.
        :param pulumi.Input[bool] ignore_time_range: (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        :param pulumi.Input['OneDashboardPageWidgetBillboardInitialSortingArgs'] initial_sorting: (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        :param pulumi.Input[bool] legend_enabled: (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardNullValueArgs']]] null_values: (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        :param pulumi.Input[str] refresh_rate: (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardUnitArgs']]] units: (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        :param pulumi.Input[str] warning: (Optional) Threshold above which the displayed value will be styled with a yellow color.
        :param pulumi.Input[int] width: (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        :param pulumi.Input[float] y_axis_left_min: , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "nrql_queries", nrql_queries)
        pulumi.set(__self__, "row", row)
        pulumi.set(__self__, "title", title)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if data_formats is not None:
            pulumi.set(__self__, "data_formats", data_formats)
        if facet_show_other_series is not None:
            pulumi.set(__self__, "facet_show_other_series", facet_show_other_series)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_time_range is not None:
            pulumi.set(__self__, "ignore_time_range", ignore_time_range)
        if initial_sorting is not None:
            pulumi.set(__self__, "initial_sorting", initial_sorting)
        if legend_enabled is not None:
            pulumi.set(__self__, "legend_enabled", legend_enabled)
        if null_values is not None:
            pulumi.set(__self__, "null_values", null_values)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if y_axis_left_max is not None:
            pulumi.set(__self__, "y_axis_left_max", y_axis_left_max)
        if y_axis_left_min is not None:
            pulumi.set(__self__, "y_axis_left_min", y_axis_left_min)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[int]:
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[int]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="nrqlQueries")
    def nrql_queries(self) -> pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardNrqlQueryArgs']]]:
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        return pulumi.get(self, "nrql_queries")

    @nrql_queries.setter
    def nrql_queries(self, value: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardNrqlQueryArgs']]]):
        pulumi.set(self, "nrql_queries", value)

    @property
    @pulumi.getter
    def row(self) -> pulumi.Input[int]:
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: pulumi.Input[int]):
        pulumi.set(self, "row", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        (Optional) A human-friendly display string for this value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardColorArgs']]]]:
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardColorArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter
    def critical(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Threshold above which the displayed value will be styled with a red color.
        """
        return pulumi.get(self, "critical")

    @critical.setter
    def critical(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "critical", value)

    @property
    @pulumi.getter(name="dataFormats")
    def data_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardDataFormatArgs']]]]:
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        return pulumi.get(self, "data_formats")

    @data_formats.setter
    def data_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardDataFormatArgs']]]]):
        pulumi.set(self, "data_formats", value)

    @property
    @pulumi.getter(name="facetShowOtherSeries")
    def facet_show_other_series(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        return pulumi.get(self, "facet_show_other_series")

    @facet_show_other_series.setter
    def facet_show_other_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facet_show_other_series", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ignoreTimeRange")
    def ignore_time_range(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        return pulumi.get(self, "ignore_time_range")

    @ignore_time_range.setter
    def ignore_time_range(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_time_range", value)

    @property
    @pulumi.getter(name="initialSorting")
    def initial_sorting(self) -> Optional[pulumi.Input['OneDashboardPageWidgetBillboardInitialSortingArgs']]:
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        return pulumi.get(self, "initial_sorting")

    @initial_sorting.setter
    def initial_sorting(self, value: Optional[pulumi.Input['OneDashboardPageWidgetBillboardInitialSortingArgs']]):
        pulumi.set(self, "initial_sorting", value)

    @property
    @pulumi.getter(name="legendEnabled")
    def legend_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        return pulumi.get(self, "legend_enabled")

    @legend_enabled.setter
    def legend_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legend_enabled", value)

    @property
    @pulumi.getter(name="nullValues")
    def null_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardNullValueArgs']]]]:
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        return pulumi.get(self, "null_values")

    @null_values.setter
    def null_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardNullValueArgs']]]]):
        pulumi.set(self, "null_values", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardUnitArgs']]]]:
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardUnitArgs']]]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter
    def warning(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Threshold above which the displayed value will be styled with a yellow color.
        """
        return pulumi.get(self, "warning")

    @warning.setter
    def warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="yAxisLeftMax")
    def y_axis_left_max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "y_axis_left_max")

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_max", value)

    @property
    @pulumi.getter(name="yAxisLeftMin")
    def y_axis_left_min(self) -> Optional[pulumi.Input[float]]:
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        return pulumi.get(self, "y_axis_left_min")

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_min", value)


if not MYPY:
    class OneDashboardPageWidgetBillboardColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardColorSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetBillboardColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBillboardColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardColorSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardColorSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardColorSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardColorSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetBillboardColorSeriesOverrideArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetBillboardColorSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBillboardColorSeriesOverrideArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[str] series_name: Series name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetBillboardDataFormatArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        type: pulumi.Input[str]
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        format: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        precision: NotRequired[pulumi.Input[int]]
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
elif False:
    OneDashboardPageWidgetBillboardDataFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBillboardDataFormatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 format: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] type: (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        :param pulumi.Input[str] format: (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        :param pulumi.Input[int] precision: (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)


if not MYPY:
    class OneDashboardPageWidgetBillboardInitialSortingArgsDict(TypedDict):
        direction: pulumi.Input[str]
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
elif False:
    OneDashboardPageWidgetBillboardInitialSortingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBillboardInitialSortingArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] direction: (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        :param pulumi.Input[str] name: The title of the dashboard.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OneDashboardPageWidgetBillboardNrqlQueryArgsDict(TypedDict):
        query: pulumi.Input[str]
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        account_id: NotRequired[pulumi.Input[str]]
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
elif False:
    OneDashboardPageWidgetBillboardNrqlQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBillboardNrqlQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        :param pulumi.Input[str] account_id: Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        pulumi.set(__self__, "query", query)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)


if not MYPY:
    class OneDashboardPageWidgetBillboardNullValueArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardNullValueSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetBillboardNullValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBillboardNullValueArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardNullValueSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardNullValueSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardNullValueSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardNullValueSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetBillboardNullValueSeriesOverrideArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetBillboardNullValueSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBillboardNullValueSeriesOverrideArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[str] series_name: Series name
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetBillboardUnitArgsDict(TypedDict):
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardUnitSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetBillboardUnitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBillboardUnitArgs:
    def __init__(__self__, *,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardUnitSeriesOverrideArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardUnitSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardUnitSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBillboardUnitSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetBillboardUnitSeriesOverrideArgsDict(TypedDict):
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetBillboardUnitSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBillboardUnitSeriesOverrideArgs:
    def __init__(__self__, *,
                 series_name: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] series_name: Series name
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetBulletArgsDict(TypedDict):
        column: pulumi.Input[int]
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        limit: pulumi.Input[float]
        """
        (Required) Visualization limit for the widget.
        """
        nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletNrqlQueryArgsDict']]]
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        row: pulumi.Input[int]
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        title: pulumi.Input[str]
        """
        (Optional) A human-friendly display string for this value.
        """
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletColorArgsDict']]]]
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        data_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletDataFormatArgsDict']]]]
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        facet_show_other_series: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        height: NotRequired[pulumi.Input[int]]
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the widget.
        """
        ignore_time_range: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        initial_sorting: NotRequired[pulumi.Input['OneDashboardPageWidgetBulletInitialSortingArgsDict']]
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        legend_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        null_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletNullValueArgsDict']]]]
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        refresh_rate: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        units: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletUnitArgsDict']]]]
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        width: NotRequired[pulumi.Input[int]]
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        y_axis_left_max: NotRequired[pulumi.Input[float]]
        y_axis_left_min: NotRequired[pulumi.Input[float]]
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
elif False:
    OneDashboardPageWidgetBulletArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBulletArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[int],
                 limit: pulumi.Input[float],
                 nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletNrqlQueryArgs']]],
                 row: pulumi.Input[int],
                 title: pulumi.Input[str],
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletColorArgs']]]] = None,
                 data_formats: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletDataFormatArgs']]]] = None,
                 facet_show_other_series: Optional[pulumi.Input[bool]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ignore_time_range: Optional[pulumi.Input[bool]] = None,
                 initial_sorting: Optional[pulumi.Input['OneDashboardPageWidgetBulletInitialSortingArgs']] = None,
                 legend_enabled: Optional[pulumi.Input[bool]] = None,
                 null_values: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletNullValueArgs']]]] = None,
                 refresh_rate: Optional[pulumi.Input[str]] = None,
                 units: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletUnitArgs']]]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 y_axis_left_max: Optional[pulumi.Input[float]] = None,
                 y_axis_left_min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[int] column: (Required) Column position of widget from top left, starting at `1`.
        :param pulumi.Input[float] limit: (Required) Visualization limit for the widget.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletNrqlQueryArgs']]] nrql_queries: (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        :param pulumi.Input[int] row: (Required) Row position of widget from top left, starting at `1`.
        :param pulumi.Input[str] title: (Optional) A human-friendly display string for this value.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletColorArgs']]] colors: (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletDataFormatArgs']]] data_formats: (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        :param pulumi.Input[bool] facet_show_other_series: (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        :param pulumi.Input[int] height: (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        :param pulumi.Input[str] id: The ID of the widget.
        :param pulumi.Input[bool] ignore_time_range: (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        :param pulumi.Input['OneDashboardPageWidgetBulletInitialSortingArgs'] initial_sorting: (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        :param pulumi.Input[bool] legend_enabled: (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletNullValueArgs']]] null_values: (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        :param pulumi.Input[str] refresh_rate: (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletUnitArgs']]] units: (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        :param pulumi.Input[int] width: (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        :param pulumi.Input[float] y_axis_left_min: , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "nrql_queries", nrql_queries)
        pulumi.set(__self__, "row", row)
        pulumi.set(__self__, "title", title)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if data_formats is not None:
            pulumi.set(__self__, "data_formats", data_formats)
        if facet_show_other_series is not None:
            pulumi.set(__self__, "facet_show_other_series", facet_show_other_series)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_time_range is not None:
            pulumi.set(__self__, "ignore_time_range", ignore_time_range)
        if initial_sorting is not None:
            pulumi.set(__self__, "initial_sorting", initial_sorting)
        if legend_enabled is not None:
            pulumi.set(__self__, "legend_enabled", legend_enabled)
        if null_values is not None:
            pulumi.set(__self__, "null_values", null_values)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if y_axis_left_max is not None:
            pulumi.set(__self__, "y_axis_left_max", y_axis_left_max)
        if y_axis_left_min is not None:
            pulumi.set(__self__, "y_axis_left_min", y_axis_left_min)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[int]:
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[int]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def limit(self) -> pulumi.Input[float]:
        """
        (Required) Visualization limit for the widget.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: pulumi.Input[float]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="nrqlQueries")
    def nrql_queries(self) -> pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletNrqlQueryArgs']]]:
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        return pulumi.get(self, "nrql_queries")

    @nrql_queries.setter
    def nrql_queries(self, value: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletNrqlQueryArgs']]]):
        pulumi.set(self, "nrql_queries", value)

    @property
    @pulumi.getter
    def row(self) -> pulumi.Input[int]:
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: pulumi.Input[int]):
        pulumi.set(self, "row", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        (Optional) A human-friendly display string for this value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletColorArgs']]]]:
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletColorArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="dataFormats")
    def data_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletDataFormatArgs']]]]:
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        return pulumi.get(self, "data_formats")

    @data_formats.setter
    def data_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletDataFormatArgs']]]]):
        pulumi.set(self, "data_formats", value)

    @property
    @pulumi.getter(name="facetShowOtherSeries")
    def facet_show_other_series(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        return pulumi.get(self, "facet_show_other_series")

    @facet_show_other_series.setter
    def facet_show_other_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facet_show_other_series", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ignoreTimeRange")
    def ignore_time_range(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        return pulumi.get(self, "ignore_time_range")

    @ignore_time_range.setter
    def ignore_time_range(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_time_range", value)

    @property
    @pulumi.getter(name="initialSorting")
    def initial_sorting(self) -> Optional[pulumi.Input['OneDashboardPageWidgetBulletInitialSortingArgs']]:
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        return pulumi.get(self, "initial_sorting")

    @initial_sorting.setter
    def initial_sorting(self, value: Optional[pulumi.Input['OneDashboardPageWidgetBulletInitialSortingArgs']]):
        pulumi.set(self, "initial_sorting", value)

    @property
    @pulumi.getter(name="legendEnabled")
    def legend_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        return pulumi.get(self, "legend_enabled")

    @legend_enabled.setter
    def legend_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legend_enabled", value)

    @property
    @pulumi.getter(name="nullValues")
    def null_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletNullValueArgs']]]]:
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        return pulumi.get(self, "null_values")

    @null_values.setter
    def null_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletNullValueArgs']]]]):
        pulumi.set(self, "null_values", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletUnitArgs']]]]:
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletUnitArgs']]]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="yAxisLeftMax")
    def y_axis_left_max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "y_axis_left_max")

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_max", value)

    @property
    @pulumi.getter(name="yAxisLeftMin")
    def y_axis_left_min(self) -> Optional[pulumi.Input[float]]:
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        return pulumi.get(self, "y_axis_left_min")

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_min", value)


if not MYPY:
    class OneDashboardPageWidgetBulletColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletColorSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetBulletColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBulletColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletColorSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletColorSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletColorSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletColorSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetBulletColorSeriesOverrideArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetBulletColorSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBulletColorSeriesOverrideArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[str] series_name: Series name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetBulletDataFormatArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        type: pulumi.Input[str]
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        format: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        precision: NotRequired[pulumi.Input[int]]
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
elif False:
    OneDashboardPageWidgetBulletDataFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBulletDataFormatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 format: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] type: (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        :param pulumi.Input[str] format: (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        :param pulumi.Input[int] precision: (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)


if not MYPY:
    class OneDashboardPageWidgetBulletInitialSortingArgsDict(TypedDict):
        direction: pulumi.Input[str]
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
elif False:
    OneDashboardPageWidgetBulletInitialSortingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBulletInitialSortingArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] direction: (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        :param pulumi.Input[str] name: The title of the dashboard.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OneDashboardPageWidgetBulletNrqlQueryArgsDict(TypedDict):
        query: pulumi.Input[str]
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        account_id: NotRequired[pulumi.Input[str]]
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
elif False:
    OneDashboardPageWidgetBulletNrqlQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBulletNrqlQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        :param pulumi.Input[str] account_id: Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        pulumi.set(__self__, "query", query)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)


if not MYPY:
    class OneDashboardPageWidgetBulletNullValueArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletNullValueSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetBulletNullValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBulletNullValueArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletNullValueSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletNullValueSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletNullValueSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletNullValueSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetBulletNullValueSeriesOverrideArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetBulletNullValueSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBulletNullValueSeriesOverrideArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[str] series_name: Series name
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetBulletUnitArgsDict(TypedDict):
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletUnitSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetBulletUnitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBulletUnitArgs:
    def __init__(__self__, *,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletUnitSeriesOverrideArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletUnitSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletUnitSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetBulletUnitSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetBulletUnitSeriesOverrideArgsDict(TypedDict):
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetBulletUnitSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetBulletUnitSeriesOverrideArgs:
    def __init__(__self__, *,
                 series_name: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] series_name: Series name
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetFunnelArgsDict(TypedDict):
        column: pulumi.Input[int]
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelNrqlQueryArgsDict']]]
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        row: pulumi.Input[int]
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        title: pulumi.Input[str]
        """
        (Optional) A human-friendly display string for this value.
        """
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelColorArgsDict']]]]
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        data_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelDataFormatArgsDict']]]]
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        facet_show_other_series: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        height: NotRequired[pulumi.Input[int]]
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the widget.
        """
        ignore_time_range: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        initial_sorting: NotRequired[pulumi.Input['OneDashboardPageWidgetFunnelInitialSortingArgsDict']]
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        legend_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        null_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelNullValueArgsDict']]]]
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        refresh_rate: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        units: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelUnitArgsDict']]]]
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        width: NotRequired[pulumi.Input[int]]
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        y_axis_left_max: NotRequired[pulumi.Input[float]]
        y_axis_left_min: NotRequired[pulumi.Input[float]]
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
elif False:
    OneDashboardPageWidgetFunnelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetFunnelArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[int],
                 nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelNrqlQueryArgs']]],
                 row: pulumi.Input[int],
                 title: pulumi.Input[str],
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelColorArgs']]]] = None,
                 data_formats: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelDataFormatArgs']]]] = None,
                 facet_show_other_series: Optional[pulumi.Input[bool]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ignore_time_range: Optional[pulumi.Input[bool]] = None,
                 initial_sorting: Optional[pulumi.Input['OneDashboardPageWidgetFunnelInitialSortingArgs']] = None,
                 legend_enabled: Optional[pulumi.Input[bool]] = None,
                 null_values: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelNullValueArgs']]]] = None,
                 refresh_rate: Optional[pulumi.Input[str]] = None,
                 units: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelUnitArgs']]]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 y_axis_left_max: Optional[pulumi.Input[float]] = None,
                 y_axis_left_min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[int] column: (Required) Column position of widget from top left, starting at `1`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelNrqlQueryArgs']]] nrql_queries: (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        :param pulumi.Input[int] row: (Required) Row position of widget from top left, starting at `1`.
        :param pulumi.Input[str] title: (Optional) A human-friendly display string for this value.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelColorArgs']]] colors: (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelDataFormatArgs']]] data_formats: (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        :param pulumi.Input[bool] facet_show_other_series: (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        :param pulumi.Input[int] height: (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        :param pulumi.Input[str] id: The ID of the widget.
        :param pulumi.Input[bool] ignore_time_range: (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        :param pulumi.Input['OneDashboardPageWidgetFunnelInitialSortingArgs'] initial_sorting: (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        :param pulumi.Input[bool] legend_enabled: (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelNullValueArgs']]] null_values: (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        :param pulumi.Input[str] refresh_rate: (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelUnitArgs']]] units: (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        :param pulumi.Input[int] width: (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        :param pulumi.Input[float] y_axis_left_min: , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "nrql_queries", nrql_queries)
        pulumi.set(__self__, "row", row)
        pulumi.set(__self__, "title", title)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if data_formats is not None:
            pulumi.set(__self__, "data_formats", data_formats)
        if facet_show_other_series is not None:
            pulumi.set(__self__, "facet_show_other_series", facet_show_other_series)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_time_range is not None:
            pulumi.set(__self__, "ignore_time_range", ignore_time_range)
        if initial_sorting is not None:
            pulumi.set(__self__, "initial_sorting", initial_sorting)
        if legend_enabled is not None:
            pulumi.set(__self__, "legend_enabled", legend_enabled)
        if null_values is not None:
            pulumi.set(__self__, "null_values", null_values)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if y_axis_left_max is not None:
            pulumi.set(__self__, "y_axis_left_max", y_axis_left_max)
        if y_axis_left_min is not None:
            pulumi.set(__self__, "y_axis_left_min", y_axis_left_min)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[int]:
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[int]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="nrqlQueries")
    def nrql_queries(self) -> pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelNrqlQueryArgs']]]:
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        return pulumi.get(self, "nrql_queries")

    @nrql_queries.setter
    def nrql_queries(self, value: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelNrqlQueryArgs']]]):
        pulumi.set(self, "nrql_queries", value)

    @property
    @pulumi.getter
    def row(self) -> pulumi.Input[int]:
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: pulumi.Input[int]):
        pulumi.set(self, "row", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        (Optional) A human-friendly display string for this value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelColorArgs']]]]:
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelColorArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="dataFormats")
    def data_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelDataFormatArgs']]]]:
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        return pulumi.get(self, "data_formats")

    @data_formats.setter
    def data_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelDataFormatArgs']]]]):
        pulumi.set(self, "data_formats", value)

    @property
    @pulumi.getter(name="facetShowOtherSeries")
    def facet_show_other_series(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        return pulumi.get(self, "facet_show_other_series")

    @facet_show_other_series.setter
    def facet_show_other_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facet_show_other_series", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ignoreTimeRange")
    def ignore_time_range(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        return pulumi.get(self, "ignore_time_range")

    @ignore_time_range.setter
    def ignore_time_range(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_time_range", value)

    @property
    @pulumi.getter(name="initialSorting")
    def initial_sorting(self) -> Optional[pulumi.Input['OneDashboardPageWidgetFunnelInitialSortingArgs']]:
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        return pulumi.get(self, "initial_sorting")

    @initial_sorting.setter
    def initial_sorting(self, value: Optional[pulumi.Input['OneDashboardPageWidgetFunnelInitialSortingArgs']]):
        pulumi.set(self, "initial_sorting", value)

    @property
    @pulumi.getter(name="legendEnabled")
    def legend_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        return pulumi.get(self, "legend_enabled")

    @legend_enabled.setter
    def legend_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legend_enabled", value)

    @property
    @pulumi.getter(name="nullValues")
    def null_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelNullValueArgs']]]]:
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        return pulumi.get(self, "null_values")

    @null_values.setter
    def null_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelNullValueArgs']]]]):
        pulumi.set(self, "null_values", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelUnitArgs']]]]:
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelUnitArgs']]]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="yAxisLeftMax")
    def y_axis_left_max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "y_axis_left_max")

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_max", value)

    @property
    @pulumi.getter(name="yAxisLeftMin")
    def y_axis_left_min(self) -> Optional[pulumi.Input[float]]:
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        return pulumi.get(self, "y_axis_left_min")

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_min", value)


if not MYPY:
    class OneDashboardPageWidgetFunnelColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelColorSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetFunnelColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetFunnelColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelColorSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelColorSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelColorSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelColorSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetFunnelColorSeriesOverrideArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetFunnelColorSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetFunnelColorSeriesOverrideArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[str] series_name: Series name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetFunnelDataFormatArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        type: pulumi.Input[str]
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        format: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        precision: NotRequired[pulumi.Input[int]]
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
elif False:
    OneDashboardPageWidgetFunnelDataFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetFunnelDataFormatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 format: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] type: (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        :param pulumi.Input[str] format: (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        :param pulumi.Input[int] precision: (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)


if not MYPY:
    class OneDashboardPageWidgetFunnelInitialSortingArgsDict(TypedDict):
        direction: pulumi.Input[str]
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
elif False:
    OneDashboardPageWidgetFunnelInitialSortingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetFunnelInitialSortingArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] direction: (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        :param pulumi.Input[str] name: The title of the dashboard.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OneDashboardPageWidgetFunnelNrqlQueryArgsDict(TypedDict):
        query: pulumi.Input[str]
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        account_id: NotRequired[pulumi.Input[str]]
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
elif False:
    OneDashboardPageWidgetFunnelNrqlQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetFunnelNrqlQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        :param pulumi.Input[str] account_id: Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        pulumi.set(__self__, "query", query)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)


if not MYPY:
    class OneDashboardPageWidgetFunnelNullValueArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelNullValueSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetFunnelNullValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetFunnelNullValueArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelNullValueSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelNullValueSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelNullValueSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelNullValueSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetFunnelNullValueSeriesOverrideArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetFunnelNullValueSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetFunnelNullValueSeriesOverrideArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[str] series_name: Series name
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetFunnelUnitArgsDict(TypedDict):
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelUnitSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetFunnelUnitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetFunnelUnitArgs:
    def __init__(__self__, *,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelUnitSeriesOverrideArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelUnitSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelUnitSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetFunnelUnitSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetFunnelUnitSeriesOverrideArgsDict(TypedDict):
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetFunnelUnitSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetFunnelUnitSeriesOverrideArgs:
    def __init__(__self__, *,
                 series_name: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] series_name: Series name
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetHeatmapArgsDict(TypedDict):
        column: pulumi.Input[int]
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapNrqlQueryArgsDict']]]
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        row: pulumi.Input[int]
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        title: pulumi.Input[str]
        """
        (Optional) A human-friendly display string for this value.
        """
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapColorArgsDict']]]]
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        data_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapDataFormatArgsDict']]]]
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        facet_show_other_series: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        filter_current_dashboard: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Use this item to filter the current dashboard.
        """
        height: NotRequired[pulumi.Input[int]]
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the widget.
        """
        ignore_time_range: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        initial_sorting: NotRequired[pulumi.Input['OneDashboardPageWidgetHeatmapInitialSortingArgsDict']]
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        legend_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        linked_entity_guids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
        """
        null_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapNullValueArgsDict']]]]
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        refresh_rate: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        units: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapUnitArgsDict']]]]
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        width: NotRequired[pulumi.Input[int]]
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        y_axis_left_max: NotRequired[pulumi.Input[float]]
        y_axis_left_min: NotRequired[pulumi.Input[float]]
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
elif False:
    OneDashboardPageWidgetHeatmapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHeatmapArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[int],
                 nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapNrqlQueryArgs']]],
                 row: pulumi.Input[int],
                 title: pulumi.Input[str],
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapColorArgs']]]] = None,
                 data_formats: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapDataFormatArgs']]]] = None,
                 facet_show_other_series: Optional[pulumi.Input[bool]] = None,
                 filter_current_dashboard: Optional[pulumi.Input[bool]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ignore_time_range: Optional[pulumi.Input[bool]] = None,
                 initial_sorting: Optional[pulumi.Input['OneDashboardPageWidgetHeatmapInitialSortingArgs']] = None,
                 legend_enabled: Optional[pulumi.Input[bool]] = None,
                 linked_entity_guids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 null_values: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapNullValueArgs']]]] = None,
                 refresh_rate: Optional[pulumi.Input[str]] = None,
                 units: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapUnitArgs']]]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 y_axis_left_max: Optional[pulumi.Input[float]] = None,
                 y_axis_left_min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[int] column: (Required) Column position of widget from top left, starting at `1`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapNrqlQueryArgs']]] nrql_queries: (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        :param pulumi.Input[int] row: (Required) Row position of widget from top left, starting at `1`.
        :param pulumi.Input[str] title: (Optional) A human-friendly display string for this value.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapColorArgs']]] colors: (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapDataFormatArgs']]] data_formats: (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        :param pulumi.Input[bool] facet_show_other_series: (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        :param pulumi.Input[bool] filter_current_dashboard: (Optional) Use this item to filter the current dashboard.
        :param pulumi.Input[int] height: (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        :param pulumi.Input[str] id: The ID of the widget.
        :param pulumi.Input[bool] ignore_time_range: (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        :param pulumi.Input['OneDashboardPageWidgetHeatmapInitialSortingArgs'] initial_sorting: (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        :param pulumi.Input[bool] legend_enabled: (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] linked_entity_guids: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapNullValueArgs']]] null_values: (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        :param pulumi.Input[str] refresh_rate: (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapUnitArgs']]] units: (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        :param pulumi.Input[int] width: (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        :param pulumi.Input[float] y_axis_left_min: , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "nrql_queries", nrql_queries)
        pulumi.set(__self__, "row", row)
        pulumi.set(__self__, "title", title)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if data_formats is not None:
            pulumi.set(__self__, "data_formats", data_formats)
        if facet_show_other_series is not None:
            pulumi.set(__self__, "facet_show_other_series", facet_show_other_series)
        if filter_current_dashboard is not None:
            pulumi.set(__self__, "filter_current_dashboard", filter_current_dashboard)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_time_range is not None:
            pulumi.set(__self__, "ignore_time_range", ignore_time_range)
        if initial_sorting is not None:
            pulumi.set(__self__, "initial_sorting", initial_sorting)
        if legend_enabled is not None:
            pulumi.set(__self__, "legend_enabled", legend_enabled)
        if linked_entity_guids is not None:
            pulumi.set(__self__, "linked_entity_guids", linked_entity_guids)
        if null_values is not None:
            pulumi.set(__self__, "null_values", null_values)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if y_axis_left_max is not None:
            pulumi.set(__self__, "y_axis_left_max", y_axis_left_max)
        if y_axis_left_min is not None:
            pulumi.set(__self__, "y_axis_left_min", y_axis_left_min)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[int]:
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[int]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="nrqlQueries")
    def nrql_queries(self) -> pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapNrqlQueryArgs']]]:
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        return pulumi.get(self, "nrql_queries")

    @nrql_queries.setter
    def nrql_queries(self, value: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapNrqlQueryArgs']]]):
        pulumi.set(self, "nrql_queries", value)

    @property
    @pulumi.getter
    def row(self) -> pulumi.Input[int]:
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: pulumi.Input[int]):
        pulumi.set(self, "row", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        (Optional) A human-friendly display string for this value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapColorArgs']]]]:
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapColorArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="dataFormats")
    def data_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapDataFormatArgs']]]]:
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        return pulumi.get(self, "data_formats")

    @data_formats.setter
    def data_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapDataFormatArgs']]]]):
        pulumi.set(self, "data_formats", value)

    @property
    @pulumi.getter(name="facetShowOtherSeries")
    def facet_show_other_series(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        return pulumi.get(self, "facet_show_other_series")

    @facet_show_other_series.setter
    def facet_show_other_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facet_show_other_series", value)

    @property
    @pulumi.getter(name="filterCurrentDashboard")
    def filter_current_dashboard(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Use this item to filter the current dashboard.
        """
        return pulumi.get(self, "filter_current_dashboard")

    @filter_current_dashboard.setter
    def filter_current_dashboard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "filter_current_dashboard", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ignoreTimeRange")
    def ignore_time_range(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        return pulumi.get(self, "ignore_time_range")

    @ignore_time_range.setter
    def ignore_time_range(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_time_range", value)

    @property
    @pulumi.getter(name="initialSorting")
    def initial_sorting(self) -> Optional[pulumi.Input['OneDashboardPageWidgetHeatmapInitialSortingArgs']]:
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        return pulumi.get(self, "initial_sorting")

    @initial_sorting.setter
    def initial_sorting(self, value: Optional[pulumi.Input['OneDashboardPageWidgetHeatmapInitialSortingArgs']]):
        pulumi.set(self, "initial_sorting", value)

    @property
    @pulumi.getter(name="legendEnabled")
    def legend_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        return pulumi.get(self, "legend_enabled")

    @legend_enabled.setter
    def legend_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legend_enabled", value)

    @property
    @pulumi.getter(name="linkedEntityGuids")
    def linked_entity_guids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
        """
        return pulumi.get(self, "linked_entity_guids")

    @linked_entity_guids.setter
    def linked_entity_guids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "linked_entity_guids", value)

    @property
    @pulumi.getter(name="nullValues")
    def null_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapNullValueArgs']]]]:
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        return pulumi.get(self, "null_values")

    @null_values.setter
    def null_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapNullValueArgs']]]]):
        pulumi.set(self, "null_values", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapUnitArgs']]]]:
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapUnitArgs']]]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="yAxisLeftMax")
    def y_axis_left_max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "y_axis_left_max")

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_max", value)

    @property
    @pulumi.getter(name="yAxisLeftMin")
    def y_axis_left_min(self) -> Optional[pulumi.Input[float]]:
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        return pulumi.get(self, "y_axis_left_min")

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_min", value)


if not MYPY:
    class OneDashboardPageWidgetHeatmapColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapColorSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetHeatmapColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHeatmapColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapColorSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapColorSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapColorSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapColorSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetHeatmapColorSeriesOverrideArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetHeatmapColorSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHeatmapColorSeriesOverrideArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[str] series_name: Series name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetHeatmapDataFormatArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        type: pulumi.Input[str]
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        format: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        precision: NotRequired[pulumi.Input[int]]
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
elif False:
    OneDashboardPageWidgetHeatmapDataFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHeatmapDataFormatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 format: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] type: (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        :param pulumi.Input[str] format: (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        :param pulumi.Input[int] precision: (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)


if not MYPY:
    class OneDashboardPageWidgetHeatmapInitialSortingArgsDict(TypedDict):
        direction: pulumi.Input[str]
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
elif False:
    OneDashboardPageWidgetHeatmapInitialSortingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHeatmapInitialSortingArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] direction: (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        :param pulumi.Input[str] name: The title of the dashboard.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OneDashboardPageWidgetHeatmapNrqlQueryArgsDict(TypedDict):
        query: pulumi.Input[str]
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        account_id: NotRequired[pulumi.Input[str]]
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
elif False:
    OneDashboardPageWidgetHeatmapNrqlQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHeatmapNrqlQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        :param pulumi.Input[str] account_id: Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        pulumi.set(__self__, "query", query)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)


if not MYPY:
    class OneDashboardPageWidgetHeatmapNullValueArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapNullValueSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetHeatmapNullValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHeatmapNullValueArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapNullValueSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapNullValueSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapNullValueSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapNullValueSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetHeatmapNullValueSeriesOverrideArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetHeatmapNullValueSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHeatmapNullValueSeriesOverrideArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[str] series_name: Series name
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetHeatmapUnitArgsDict(TypedDict):
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapUnitSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetHeatmapUnitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHeatmapUnitArgs:
    def __init__(__self__, *,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapUnitSeriesOverrideArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapUnitSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapUnitSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHeatmapUnitSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetHeatmapUnitSeriesOverrideArgsDict(TypedDict):
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetHeatmapUnitSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHeatmapUnitSeriesOverrideArgs:
    def __init__(__self__, *,
                 series_name: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] series_name: Series name
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetHistogramArgsDict(TypedDict):
        column: pulumi.Input[int]
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramNrqlQueryArgsDict']]]
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        row: pulumi.Input[int]
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        title: pulumi.Input[str]
        """
        (Optional) A human-friendly display string for this value.
        """
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramColorArgsDict']]]]
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        data_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramDataFormatArgsDict']]]]
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        facet_show_other_series: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        height: NotRequired[pulumi.Input[int]]
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the widget.
        """
        ignore_time_range: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        initial_sorting: NotRequired[pulumi.Input['OneDashboardPageWidgetHistogramInitialSortingArgsDict']]
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        legend_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        null_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramNullValueArgsDict']]]]
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        refresh_rate: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        units: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramUnitArgsDict']]]]
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        width: NotRequired[pulumi.Input[int]]
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        y_axis_left_max: NotRequired[pulumi.Input[float]]
        y_axis_left_min: NotRequired[pulumi.Input[float]]
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
elif False:
    OneDashboardPageWidgetHistogramArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHistogramArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[int],
                 nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramNrqlQueryArgs']]],
                 row: pulumi.Input[int],
                 title: pulumi.Input[str],
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramColorArgs']]]] = None,
                 data_formats: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramDataFormatArgs']]]] = None,
                 facet_show_other_series: Optional[pulumi.Input[bool]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ignore_time_range: Optional[pulumi.Input[bool]] = None,
                 initial_sorting: Optional[pulumi.Input['OneDashboardPageWidgetHistogramInitialSortingArgs']] = None,
                 legend_enabled: Optional[pulumi.Input[bool]] = None,
                 null_values: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramNullValueArgs']]]] = None,
                 refresh_rate: Optional[pulumi.Input[str]] = None,
                 units: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramUnitArgs']]]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 y_axis_left_max: Optional[pulumi.Input[float]] = None,
                 y_axis_left_min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[int] column: (Required) Column position of widget from top left, starting at `1`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramNrqlQueryArgs']]] nrql_queries: (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        :param pulumi.Input[int] row: (Required) Row position of widget from top left, starting at `1`.
        :param pulumi.Input[str] title: (Optional) A human-friendly display string for this value.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramColorArgs']]] colors: (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramDataFormatArgs']]] data_formats: (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        :param pulumi.Input[bool] facet_show_other_series: (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        :param pulumi.Input[int] height: (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        :param pulumi.Input[str] id: The ID of the widget.
        :param pulumi.Input[bool] ignore_time_range: (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        :param pulumi.Input['OneDashboardPageWidgetHistogramInitialSortingArgs'] initial_sorting: (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        :param pulumi.Input[bool] legend_enabled: (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramNullValueArgs']]] null_values: (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        :param pulumi.Input[str] refresh_rate: (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramUnitArgs']]] units: (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        :param pulumi.Input[int] width: (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        :param pulumi.Input[float] y_axis_left_min: , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "nrql_queries", nrql_queries)
        pulumi.set(__self__, "row", row)
        pulumi.set(__self__, "title", title)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if data_formats is not None:
            pulumi.set(__self__, "data_formats", data_formats)
        if facet_show_other_series is not None:
            pulumi.set(__self__, "facet_show_other_series", facet_show_other_series)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_time_range is not None:
            pulumi.set(__self__, "ignore_time_range", ignore_time_range)
        if initial_sorting is not None:
            pulumi.set(__self__, "initial_sorting", initial_sorting)
        if legend_enabled is not None:
            pulumi.set(__self__, "legend_enabled", legend_enabled)
        if null_values is not None:
            pulumi.set(__self__, "null_values", null_values)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if y_axis_left_max is not None:
            pulumi.set(__self__, "y_axis_left_max", y_axis_left_max)
        if y_axis_left_min is not None:
            pulumi.set(__self__, "y_axis_left_min", y_axis_left_min)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[int]:
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[int]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="nrqlQueries")
    def nrql_queries(self) -> pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramNrqlQueryArgs']]]:
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        return pulumi.get(self, "nrql_queries")

    @nrql_queries.setter
    def nrql_queries(self, value: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramNrqlQueryArgs']]]):
        pulumi.set(self, "nrql_queries", value)

    @property
    @pulumi.getter
    def row(self) -> pulumi.Input[int]:
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: pulumi.Input[int]):
        pulumi.set(self, "row", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        (Optional) A human-friendly display string for this value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramColorArgs']]]]:
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramColorArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="dataFormats")
    def data_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramDataFormatArgs']]]]:
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        return pulumi.get(self, "data_formats")

    @data_formats.setter
    def data_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramDataFormatArgs']]]]):
        pulumi.set(self, "data_formats", value)

    @property
    @pulumi.getter(name="facetShowOtherSeries")
    def facet_show_other_series(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        return pulumi.get(self, "facet_show_other_series")

    @facet_show_other_series.setter
    def facet_show_other_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facet_show_other_series", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ignoreTimeRange")
    def ignore_time_range(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        return pulumi.get(self, "ignore_time_range")

    @ignore_time_range.setter
    def ignore_time_range(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_time_range", value)

    @property
    @pulumi.getter(name="initialSorting")
    def initial_sorting(self) -> Optional[pulumi.Input['OneDashboardPageWidgetHistogramInitialSortingArgs']]:
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        return pulumi.get(self, "initial_sorting")

    @initial_sorting.setter
    def initial_sorting(self, value: Optional[pulumi.Input['OneDashboardPageWidgetHistogramInitialSortingArgs']]):
        pulumi.set(self, "initial_sorting", value)

    @property
    @pulumi.getter(name="legendEnabled")
    def legend_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        return pulumi.get(self, "legend_enabled")

    @legend_enabled.setter
    def legend_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legend_enabled", value)

    @property
    @pulumi.getter(name="nullValues")
    def null_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramNullValueArgs']]]]:
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        return pulumi.get(self, "null_values")

    @null_values.setter
    def null_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramNullValueArgs']]]]):
        pulumi.set(self, "null_values", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramUnitArgs']]]]:
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramUnitArgs']]]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="yAxisLeftMax")
    def y_axis_left_max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "y_axis_left_max")

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_max", value)

    @property
    @pulumi.getter(name="yAxisLeftMin")
    def y_axis_left_min(self) -> Optional[pulumi.Input[float]]:
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        return pulumi.get(self, "y_axis_left_min")

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_min", value)


if not MYPY:
    class OneDashboardPageWidgetHistogramColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramColorSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetHistogramColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHistogramColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramColorSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramColorSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramColorSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramColorSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetHistogramColorSeriesOverrideArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetHistogramColorSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHistogramColorSeriesOverrideArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[str] series_name: Series name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetHistogramDataFormatArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        type: pulumi.Input[str]
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        format: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        precision: NotRequired[pulumi.Input[int]]
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
elif False:
    OneDashboardPageWidgetHistogramDataFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHistogramDataFormatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 format: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] type: (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        :param pulumi.Input[str] format: (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        :param pulumi.Input[int] precision: (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)


if not MYPY:
    class OneDashboardPageWidgetHistogramInitialSortingArgsDict(TypedDict):
        direction: pulumi.Input[str]
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
elif False:
    OneDashboardPageWidgetHistogramInitialSortingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHistogramInitialSortingArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] direction: (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        :param pulumi.Input[str] name: The title of the dashboard.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OneDashboardPageWidgetHistogramNrqlQueryArgsDict(TypedDict):
        query: pulumi.Input[str]
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        account_id: NotRequired[pulumi.Input[str]]
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
elif False:
    OneDashboardPageWidgetHistogramNrqlQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHistogramNrqlQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        :param pulumi.Input[str] account_id: Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        pulumi.set(__self__, "query", query)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)


if not MYPY:
    class OneDashboardPageWidgetHistogramNullValueArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramNullValueSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetHistogramNullValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHistogramNullValueArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramNullValueSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramNullValueSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramNullValueSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramNullValueSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetHistogramNullValueSeriesOverrideArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetHistogramNullValueSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHistogramNullValueSeriesOverrideArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[str] series_name: Series name
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetHistogramUnitArgsDict(TypedDict):
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramUnitSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetHistogramUnitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHistogramUnitArgs:
    def __init__(__self__, *,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramUnitSeriesOverrideArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramUnitSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramUnitSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetHistogramUnitSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetHistogramUnitSeriesOverrideArgsDict(TypedDict):
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetHistogramUnitSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetHistogramUnitSeriesOverrideArgs:
    def __init__(__self__, *,
                 series_name: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] series_name: Series name
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetJsonArgsDict(TypedDict):
        column: pulumi.Input[int]
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonNrqlQueryArgsDict']]]
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        row: pulumi.Input[int]
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        title: pulumi.Input[str]
        """
        (Optional) A human-friendly display string for this value.
        """
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonColorArgsDict']]]]
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        data_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonDataFormatArgsDict']]]]
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        facet_show_other_series: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        height: NotRequired[pulumi.Input[int]]
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the widget.
        """
        ignore_time_range: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        initial_sorting: NotRequired[pulumi.Input['OneDashboardPageWidgetJsonInitialSortingArgsDict']]
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        legend_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        null_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonNullValueArgsDict']]]]
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        refresh_rate: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        units: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonUnitArgsDict']]]]
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        width: NotRequired[pulumi.Input[int]]
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        y_axis_left_max: NotRequired[pulumi.Input[float]]
        y_axis_left_min: NotRequired[pulumi.Input[float]]
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
elif False:
    OneDashboardPageWidgetJsonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetJsonArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[int],
                 nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonNrqlQueryArgs']]],
                 row: pulumi.Input[int],
                 title: pulumi.Input[str],
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonColorArgs']]]] = None,
                 data_formats: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonDataFormatArgs']]]] = None,
                 facet_show_other_series: Optional[pulumi.Input[bool]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ignore_time_range: Optional[pulumi.Input[bool]] = None,
                 initial_sorting: Optional[pulumi.Input['OneDashboardPageWidgetJsonInitialSortingArgs']] = None,
                 legend_enabled: Optional[pulumi.Input[bool]] = None,
                 null_values: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonNullValueArgs']]]] = None,
                 refresh_rate: Optional[pulumi.Input[str]] = None,
                 units: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonUnitArgs']]]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 y_axis_left_max: Optional[pulumi.Input[float]] = None,
                 y_axis_left_min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[int] column: (Required) Column position of widget from top left, starting at `1`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonNrqlQueryArgs']]] nrql_queries: (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        :param pulumi.Input[int] row: (Required) Row position of widget from top left, starting at `1`.
        :param pulumi.Input[str] title: (Optional) A human-friendly display string for this value.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonColorArgs']]] colors: (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonDataFormatArgs']]] data_formats: (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        :param pulumi.Input[bool] facet_show_other_series: (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        :param pulumi.Input[int] height: (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        :param pulumi.Input[str] id: The ID of the widget.
        :param pulumi.Input[bool] ignore_time_range: (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        :param pulumi.Input['OneDashboardPageWidgetJsonInitialSortingArgs'] initial_sorting: (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        :param pulumi.Input[bool] legend_enabled: (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonNullValueArgs']]] null_values: (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        :param pulumi.Input[str] refresh_rate: (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonUnitArgs']]] units: (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        :param pulumi.Input[int] width: (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        :param pulumi.Input[float] y_axis_left_min: , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "nrql_queries", nrql_queries)
        pulumi.set(__self__, "row", row)
        pulumi.set(__self__, "title", title)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if data_formats is not None:
            pulumi.set(__self__, "data_formats", data_formats)
        if facet_show_other_series is not None:
            pulumi.set(__self__, "facet_show_other_series", facet_show_other_series)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_time_range is not None:
            pulumi.set(__self__, "ignore_time_range", ignore_time_range)
        if initial_sorting is not None:
            pulumi.set(__self__, "initial_sorting", initial_sorting)
        if legend_enabled is not None:
            pulumi.set(__self__, "legend_enabled", legend_enabled)
        if null_values is not None:
            pulumi.set(__self__, "null_values", null_values)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if y_axis_left_max is not None:
            pulumi.set(__self__, "y_axis_left_max", y_axis_left_max)
        if y_axis_left_min is not None:
            pulumi.set(__self__, "y_axis_left_min", y_axis_left_min)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[int]:
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[int]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="nrqlQueries")
    def nrql_queries(self) -> pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonNrqlQueryArgs']]]:
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        return pulumi.get(self, "nrql_queries")

    @nrql_queries.setter
    def nrql_queries(self, value: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonNrqlQueryArgs']]]):
        pulumi.set(self, "nrql_queries", value)

    @property
    @pulumi.getter
    def row(self) -> pulumi.Input[int]:
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: pulumi.Input[int]):
        pulumi.set(self, "row", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        (Optional) A human-friendly display string for this value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonColorArgs']]]]:
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonColorArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="dataFormats")
    def data_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonDataFormatArgs']]]]:
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        return pulumi.get(self, "data_formats")

    @data_formats.setter
    def data_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonDataFormatArgs']]]]):
        pulumi.set(self, "data_formats", value)

    @property
    @pulumi.getter(name="facetShowOtherSeries")
    def facet_show_other_series(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        return pulumi.get(self, "facet_show_other_series")

    @facet_show_other_series.setter
    def facet_show_other_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facet_show_other_series", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ignoreTimeRange")
    def ignore_time_range(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        return pulumi.get(self, "ignore_time_range")

    @ignore_time_range.setter
    def ignore_time_range(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_time_range", value)

    @property
    @pulumi.getter(name="initialSorting")
    def initial_sorting(self) -> Optional[pulumi.Input['OneDashboardPageWidgetJsonInitialSortingArgs']]:
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        return pulumi.get(self, "initial_sorting")

    @initial_sorting.setter
    def initial_sorting(self, value: Optional[pulumi.Input['OneDashboardPageWidgetJsonInitialSortingArgs']]):
        pulumi.set(self, "initial_sorting", value)

    @property
    @pulumi.getter(name="legendEnabled")
    def legend_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        return pulumi.get(self, "legend_enabled")

    @legend_enabled.setter
    def legend_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legend_enabled", value)

    @property
    @pulumi.getter(name="nullValues")
    def null_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonNullValueArgs']]]]:
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        return pulumi.get(self, "null_values")

    @null_values.setter
    def null_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonNullValueArgs']]]]):
        pulumi.set(self, "null_values", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonUnitArgs']]]]:
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonUnitArgs']]]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="yAxisLeftMax")
    def y_axis_left_max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "y_axis_left_max")

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_max", value)

    @property
    @pulumi.getter(name="yAxisLeftMin")
    def y_axis_left_min(self) -> Optional[pulumi.Input[float]]:
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        return pulumi.get(self, "y_axis_left_min")

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_min", value)


if not MYPY:
    class OneDashboardPageWidgetJsonColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonColorSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetJsonColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetJsonColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonColorSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonColorSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonColorSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonColorSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetJsonColorSeriesOverrideArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetJsonColorSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetJsonColorSeriesOverrideArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[str] series_name: Series name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetJsonDataFormatArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        type: pulumi.Input[str]
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        format: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        precision: NotRequired[pulumi.Input[int]]
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
elif False:
    OneDashboardPageWidgetJsonDataFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetJsonDataFormatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 format: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] type: (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        :param pulumi.Input[str] format: (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        :param pulumi.Input[int] precision: (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)


if not MYPY:
    class OneDashboardPageWidgetJsonInitialSortingArgsDict(TypedDict):
        direction: pulumi.Input[str]
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
elif False:
    OneDashboardPageWidgetJsonInitialSortingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetJsonInitialSortingArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] direction: (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        :param pulumi.Input[str] name: The title of the dashboard.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OneDashboardPageWidgetJsonNrqlQueryArgsDict(TypedDict):
        query: pulumi.Input[str]
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        account_id: NotRequired[pulumi.Input[str]]
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
elif False:
    OneDashboardPageWidgetJsonNrqlQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetJsonNrqlQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        :param pulumi.Input[str] account_id: Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        pulumi.set(__self__, "query", query)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)


if not MYPY:
    class OneDashboardPageWidgetJsonNullValueArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonNullValueSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetJsonNullValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetJsonNullValueArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonNullValueSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonNullValueSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonNullValueSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonNullValueSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetJsonNullValueSeriesOverrideArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetJsonNullValueSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetJsonNullValueSeriesOverrideArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[str] series_name: Series name
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetJsonUnitArgsDict(TypedDict):
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonUnitSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetJsonUnitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetJsonUnitArgs:
    def __init__(__self__, *,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonUnitSeriesOverrideArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonUnitSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonUnitSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetJsonUnitSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetJsonUnitSeriesOverrideArgsDict(TypedDict):
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetJsonUnitSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetJsonUnitSeriesOverrideArgs:
    def __init__(__self__, *,
                 series_name: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] series_name: Series name
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetLineArgsDict(TypedDict):
        column: pulumi.Input[int]
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineNrqlQueryArgsDict']]]
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        row: pulumi.Input[int]
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        title: pulumi.Input[str]
        """
        (Optional) A human-friendly display string for this value.
        """
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineColorArgsDict']]]]
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        data_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineDataFormatArgsDict']]]]
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        facet_show_other_series: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        height: NotRequired[pulumi.Input[int]]
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the widget.
        """
        ignore_time_range: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        initial_sorting: NotRequired[pulumi.Input['OneDashboardPageWidgetLineInitialSortingArgsDict']]
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        is_label_visible: NotRequired[pulumi.Input[bool]]
        """
        (Optional) A boolean value, which when true, sets the label to be visibly displayed within thresholds. In other words, if this attribute is set to true, the _label always visible_ toggle in the _Thresholds_ section in the settings of the widget is enabled.
        """
        legend_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        null_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineNullValueArgsDict']]]]
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        refresh_rate: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        thresholds: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineThresholdArgsDict']]]]
        """
        (Optional) An attribute that helps specify multiple thresholds, each inclusive of a range of values between which the threshold would need to function, the name of the threshold and its severity. Multiple thresholds can be defined in a table widget. The `threshold` attribute requires specifying the following attributes in a nested block -
        """
        units: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineUnitArgsDict']]]]
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        width: NotRequired[pulumi.Input[int]]
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        y_axis_left_max: NotRequired[pulumi.Input[float]]
        y_axis_left_min: NotRequired[pulumi.Input[float]]
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        y_axis_left_zero: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An attribute that specifies if the values on the graph to be rendered need to be fit to scale, or printed within the specified range from `y_axis_left_min` (or 0 if it is not defined) to `y_axis_left_max`. Use `y_axis_left_zero = true` with a combination of `y_axis_left_min` and `y_axis_left_max` to render values from 0 or the specified minimum to the maximum, and `y_axis_left_zero = false` to fit the graph to scale.
        """
        y_axis_right: NotRequired[pulumi.Input['OneDashboardPageWidgetLineYAxisRightArgsDict']]
        """
        (Optional) An attribute which helps specify the configuration of the Y-Axis displayed on the right side of the line widget. This is a nested block, which includes the following attributes:
        """
elif False:
    OneDashboardPageWidgetLineArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLineArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[int],
                 nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineNrqlQueryArgs']]],
                 row: pulumi.Input[int],
                 title: pulumi.Input[str],
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineColorArgs']]]] = None,
                 data_formats: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineDataFormatArgs']]]] = None,
                 facet_show_other_series: Optional[pulumi.Input[bool]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ignore_time_range: Optional[pulumi.Input[bool]] = None,
                 initial_sorting: Optional[pulumi.Input['OneDashboardPageWidgetLineInitialSortingArgs']] = None,
                 is_label_visible: Optional[pulumi.Input[bool]] = None,
                 legend_enabled: Optional[pulumi.Input[bool]] = None,
                 null_values: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineNullValueArgs']]]] = None,
                 refresh_rate: Optional[pulumi.Input[str]] = None,
                 thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineThresholdArgs']]]] = None,
                 units: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineUnitArgs']]]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 y_axis_left_max: Optional[pulumi.Input[float]] = None,
                 y_axis_left_min: Optional[pulumi.Input[float]] = None,
                 y_axis_left_zero: Optional[pulumi.Input[bool]] = None,
                 y_axis_right: Optional[pulumi.Input['OneDashboardPageWidgetLineYAxisRightArgs']] = None):
        """
        :param pulumi.Input[int] column: (Required) Column position of widget from top left, starting at `1`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineNrqlQueryArgs']]] nrql_queries: (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        :param pulumi.Input[int] row: (Required) Row position of widget from top left, starting at `1`.
        :param pulumi.Input[str] title: (Optional) A human-friendly display string for this value.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineColorArgs']]] colors: (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineDataFormatArgs']]] data_formats: (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        :param pulumi.Input[bool] facet_show_other_series: (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        :param pulumi.Input[int] height: (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        :param pulumi.Input[str] id: The ID of the widget.
        :param pulumi.Input[bool] ignore_time_range: (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        :param pulumi.Input['OneDashboardPageWidgetLineInitialSortingArgs'] initial_sorting: (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        :param pulumi.Input[bool] is_label_visible: (Optional) A boolean value, which when true, sets the label to be visibly displayed within thresholds. In other words, if this attribute is set to true, the _label always visible_ toggle in the _Thresholds_ section in the settings of the widget is enabled.
        :param pulumi.Input[bool] legend_enabled: (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineNullValueArgs']]] null_values: (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        :param pulumi.Input[str] refresh_rate: (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineThresholdArgs']]] thresholds: (Optional) An attribute that helps specify multiple thresholds, each inclusive of a range of values between which the threshold would need to function, the name of the threshold and its severity. Multiple thresholds can be defined in a table widget. The `threshold` attribute requires specifying the following attributes in a nested block -
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineUnitArgs']]] units: (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        :param pulumi.Input[int] width: (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        :param pulumi.Input[float] y_axis_left_min: , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        :param pulumi.Input[bool] y_axis_left_zero: (Optional) An attribute that specifies if the values on the graph to be rendered need to be fit to scale, or printed within the specified range from `y_axis_left_min` (or 0 if it is not defined) to `y_axis_left_max`. Use `y_axis_left_zero = true` with a combination of `y_axis_left_min` and `y_axis_left_max` to render values from 0 or the specified minimum to the maximum, and `y_axis_left_zero = false` to fit the graph to scale.
        :param pulumi.Input['OneDashboardPageWidgetLineYAxisRightArgs'] y_axis_right: (Optional) An attribute which helps specify the configuration of the Y-Axis displayed on the right side of the line widget. This is a nested block, which includes the following attributes:
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "nrql_queries", nrql_queries)
        pulumi.set(__self__, "row", row)
        pulumi.set(__self__, "title", title)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if data_formats is not None:
            pulumi.set(__self__, "data_formats", data_formats)
        if facet_show_other_series is not None:
            pulumi.set(__self__, "facet_show_other_series", facet_show_other_series)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_time_range is not None:
            pulumi.set(__self__, "ignore_time_range", ignore_time_range)
        if initial_sorting is not None:
            pulumi.set(__self__, "initial_sorting", initial_sorting)
        if is_label_visible is not None:
            pulumi.set(__self__, "is_label_visible", is_label_visible)
        if legend_enabled is not None:
            pulumi.set(__self__, "legend_enabled", legend_enabled)
        if null_values is not None:
            pulumi.set(__self__, "null_values", null_values)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if y_axis_left_max is not None:
            pulumi.set(__self__, "y_axis_left_max", y_axis_left_max)
        if y_axis_left_min is not None:
            pulumi.set(__self__, "y_axis_left_min", y_axis_left_min)
        if y_axis_left_zero is not None:
            pulumi.set(__self__, "y_axis_left_zero", y_axis_left_zero)
        if y_axis_right is not None:
            pulumi.set(__self__, "y_axis_right", y_axis_right)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[int]:
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[int]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="nrqlQueries")
    def nrql_queries(self) -> pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineNrqlQueryArgs']]]:
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        return pulumi.get(self, "nrql_queries")

    @nrql_queries.setter
    def nrql_queries(self, value: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineNrqlQueryArgs']]]):
        pulumi.set(self, "nrql_queries", value)

    @property
    @pulumi.getter
    def row(self) -> pulumi.Input[int]:
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: pulumi.Input[int]):
        pulumi.set(self, "row", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        (Optional) A human-friendly display string for this value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineColorArgs']]]]:
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineColorArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="dataFormats")
    def data_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineDataFormatArgs']]]]:
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        return pulumi.get(self, "data_formats")

    @data_formats.setter
    def data_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineDataFormatArgs']]]]):
        pulumi.set(self, "data_formats", value)

    @property
    @pulumi.getter(name="facetShowOtherSeries")
    def facet_show_other_series(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        return pulumi.get(self, "facet_show_other_series")

    @facet_show_other_series.setter
    def facet_show_other_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facet_show_other_series", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ignoreTimeRange")
    def ignore_time_range(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        return pulumi.get(self, "ignore_time_range")

    @ignore_time_range.setter
    def ignore_time_range(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_time_range", value)

    @property
    @pulumi.getter(name="initialSorting")
    def initial_sorting(self) -> Optional[pulumi.Input['OneDashboardPageWidgetLineInitialSortingArgs']]:
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        return pulumi.get(self, "initial_sorting")

    @initial_sorting.setter
    def initial_sorting(self, value: Optional[pulumi.Input['OneDashboardPageWidgetLineInitialSortingArgs']]):
        pulumi.set(self, "initial_sorting", value)

    @property
    @pulumi.getter(name="isLabelVisible")
    def is_label_visible(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) A boolean value, which when true, sets the label to be visibly displayed within thresholds. In other words, if this attribute is set to true, the _label always visible_ toggle in the _Thresholds_ section in the settings of the widget is enabled.
        """
        return pulumi.get(self, "is_label_visible")

    @is_label_visible.setter
    def is_label_visible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_label_visible", value)

    @property
    @pulumi.getter(name="legendEnabled")
    def legend_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        return pulumi.get(self, "legend_enabled")

    @legend_enabled.setter
    def legend_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legend_enabled", value)

    @property
    @pulumi.getter(name="nullValues")
    def null_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineNullValueArgs']]]]:
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        return pulumi.get(self, "null_values")

    @null_values.setter
    def null_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineNullValueArgs']]]]):
        pulumi.set(self, "null_values", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineThresholdArgs']]]]:
        """
        (Optional) An attribute that helps specify multiple thresholds, each inclusive of a range of values between which the threshold would need to function, the name of the threshold and its severity. Multiple thresholds can be defined in a table widget. The `threshold` attribute requires specifying the following attributes in a nested block -
        """
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineThresholdArgs']]]]):
        pulumi.set(self, "thresholds", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineUnitArgs']]]]:
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineUnitArgs']]]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="yAxisLeftMax")
    def y_axis_left_max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "y_axis_left_max")

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_max", value)

    @property
    @pulumi.getter(name="yAxisLeftMin")
    def y_axis_left_min(self) -> Optional[pulumi.Input[float]]:
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        return pulumi.get(self, "y_axis_left_min")

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_min", value)

    @property
    @pulumi.getter(name="yAxisLeftZero")
    def y_axis_left_zero(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An attribute that specifies if the values on the graph to be rendered need to be fit to scale, or printed within the specified range from `y_axis_left_min` (or 0 if it is not defined) to `y_axis_left_max`. Use `y_axis_left_zero = true` with a combination of `y_axis_left_min` and `y_axis_left_max` to render values from 0 or the specified minimum to the maximum, and `y_axis_left_zero = false` to fit the graph to scale.
        """
        return pulumi.get(self, "y_axis_left_zero")

    @y_axis_left_zero.setter
    def y_axis_left_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "y_axis_left_zero", value)

    @property
    @pulumi.getter(name="yAxisRight")
    def y_axis_right(self) -> Optional[pulumi.Input['OneDashboardPageWidgetLineYAxisRightArgs']]:
        """
        (Optional) An attribute which helps specify the configuration of the Y-Axis displayed on the right side of the line widget. This is a nested block, which includes the following attributes:
        """
        return pulumi.get(self, "y_axis_right")

    @y_axis_right.setter
    def y_axis_right(self, value: Optional[pulumi.Input['OneDashboardPageWidgetLineYAxisRightArgs']]):
        pulumi.set(self, "y_axis_right", value)


if not MYPY:
    class OneDashboardPageWidgetLineColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineColorSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetLineColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLineColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineColorSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineColorSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineColorSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineColorSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetLineColorSeriesOverrideArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetLineColorSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLineColorSeriesOverrideArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[str] series_name: Series name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetLineDataFormatArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        type: pulumi.Input[str]
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        format: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        precision: NotRequired[pulumi.Input[int]]
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
elif False:
    OneDashboardPageWidgetLineDataFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLineDataFormatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 format: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] type: (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        :param pulumi.Input[str] format: (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        :param pulumi.Input[int] precision: (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)


if not MYPY:
    class OneDashboardPageWidgetLineInitialSortingArgsDict(TypedDict):
        direction: pulumi.Input[str]
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
elif False:
    OneDashboardPageWidgetLineInitialSortingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLineInitialSortingArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] direction: (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        :param pulumi.Input[str] name: The title of the dashboard.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OneDashboardPageWidgetLineNrqlQueryArgsDict(TypedDict):
        query: pulumi.Input[str]
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        account_id: NotRequired[pulumi.Input[str]]
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
elif False:
    OneDashboardPageWidgetLineNrqlQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLineNrqlQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        :param pulumi.Input[str] account_id: Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        pulumi.set(__self__, "query", query)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)


if not MYPY:
    class OneDashboardPageWidgetLineNullValueArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineNullValueSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetLineNullValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLineNullValueArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineNullValueSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineNullValueSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineNullValueSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineNullValueSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetLineNullValueSeriesOverrideArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetLineNullValueSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLineNullValueSeriesOverrideArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[str] series_name: Series name
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetLineThresholdArgsDict(TypedDict):
        from_: NotRequired[pulumi.Input[str]]
        """
        The value 'from' which the threshold would need to be applied.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The title of the dashboard.
        """
        severity: NotRequired[pulumi.Input[str]]
        """
        The severity of the threshold, which would affect the visual appearance of the threshold (such as its color) accordingly. The value of this attribute would need to be one of the following - `warning`, `severe`, `critical`, `success`, `unavailable` which correspond to the severity labels _Warning_, _Approaching critical_, _Critical_, _Good_, _Neutral_ in the dropdown that helps specify the severity of thresholds in table widgets in the UI, respectively.
        """
        to: NotRequired[pulumi.Input[str]]
        """
        The value until which the threshold would need to be applied.
        """
elif False:
    OneDashboardPageWidgetLineThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLineThresholdArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 to: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_: The value 'from' which the threshold would need to be applied.
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] severity: The severity of the threshold, which would affect the visual appearance of the threshold (such as its color) accordingly. The value of this attribute would need to be one of the following - `warning`, `severe`, `critical`, `success`, `unavailable` which correspond to the severity labels _Warning_, _Approaching critical_, _Critical_, _Good_, _Neutral_ in the dropdown that helps specify the severity of thresholds in table widgets in the UI, respectively.
        :param pulumi.Input[str] to: The value until which the threshold would need to be applied.
        """
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[str]]:
        """
        The value 'from' which the threshold would need to be applied.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        The severity of the threshold, which would affect the visual appearance of the threshold (such as its color) accordingly. The value of this attribute would need to be one of the following - `warning`, `severe`, `critical`, `success`, `unavailable` which correspond to the severity labels _Warning_, _Approaching critical_, _Critical_, _Good_, _Neutral_ in the dropdown that helps specify the severity of thresholds in table widgets in the UI, respectively.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[str]]:
        """
        The value until which the threshold would need to be applied.
        """
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "to", value)


if not MYPY:
    class OneDashboardPageWidgetLineUnitArgsDict(TypedDict):
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineUnitSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetLineUnitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLineUnitArgs:
    def __init__(__self__, *,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineUnitSeriesOverrideArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineUnitSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineUnitSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLineUnitSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetLineUnitSeriesOverrideArgsDict(TypedDict):
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetLineUnitSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLineUnitSeriesOverrideArgs:
    def __init__(__self__, *,
                 series_name: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] series_name: Series name
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetLineYAxisRightArgsDict(TypedDict):
        y_axis_right_max: NotRequired[pulumi.Input[float]]
        """
        Minimum value of the range to be specified with the Y-Axis on the right of the line widget.
        """
        y_axis_right_min: NotRequired[pulumi.Input[float]]
        """
        , `y_axis_right_max` - (Optional) Attributes which help specify a range of minimum and maximum values, which adjust the right Y axis to display the data within the specified minimum and maximum value for the axis.
        """
        y_axis_right_series: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Optional) An attribute which takes a list of strings, specifying a selection of series' displayed in the line chart to be adjusted against the values of the right Y-axis.
        """
        y_axis_right_zero: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An attribute that specifies if the values on the graph to be rendered need to be fit to scale, or printed within the specified range from `y_axis_right_min` (or 0 if it is not defined) to `y_axis_right_max`. Use `y_axis_right_zero = true` with a combination of `y_axis_right_min` and `y_axis_right_max` to render values from 0 or the specified minimum to the maximum, and `y_axis_right_zero = false` to fit the graph to scale.
        """
elif False:
    OneDashboardPageWidgetLineYAxisRightArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLineYAxisRightArgs:
    def __init__(__self__, *,
                 y_axis_right_max: Optional[pulumi.Input[float]] = None,
                 y_axis_right_min: Optional[pulumi.Input[float]] = None,
                 y_axis_right_series: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 y_axis_right_zero: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[float] y_axis_right_max: Minimum value of the range to be specified with the Y-Axis on the right of the line widget.
        :param pulumi.Input[float] y_axis_right_min: , `y_axis_right_max` - (Optional) Attributes which help specify a range of minimum and maximum values, which adjust the right Y axis to display the data within the specified minimum and maximum value for the axis.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] y_axis_right_series: (Optional) An attribute which takes a list of strings, specifying a selection of series' displayed in the line chart to be adjusted against the values of the right Y-axis.
        :param pulumi.Input[bool] y_axis_right_zero: (Optional) An attribute that specifies if the values on the graph to be rendered need to be fit to scale, or printed within the specified range from `y_axis_right_min` (or 0 if it is not defined) to `y_axis_right_max`. Use `y_axis_right_zero = true` with a combination of `y_axis_right_min` and `y_axis_right_max` to render values from 0 or the specified minimum to the maximum, and `y_axis_right_zero = false` to fit the graph to scale.
        """
        if y_axis_right_max is not None:
            pulumi.set(__self__, "y_axis_right_max", y_axis_right_max)
        if y_axis_right_min is not None:
            pulumi.set(__self__, "y_axis_right_min", y_axis_right_min)
        if y_axis_right_series is not None:
            pulumi.set(__self__, "y_axis_right_series", y_axis_right_series)
        if y_axis_right_zero is not None:
            pulumi.set(__self__, "y_axis_right_zero", y_axis_right_zero)

    @property
    @pulumi.getter(name="yAxisRightMax")
    def y_axis_right_max(self) -> Optional[pulumi.Input[float]]:
        """
        Minimum value of the range to be specified with the Y-Axis on the right of the line widget.
        """
        return pulumi.get(self, "y_axis_right_max")

    @y_axis_right_max.setter
    def y_axis_right_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_right_max", value)

    @property
    @pulumi.getter(name="yAxisRightMin")
    def y_axis_right_min(self) -> Optional[pulumi.Input[float]]:
        """
        , `y_axis_right_max` - (Optional) Attributes which help specify a range of minimum and maximum values, which adjust the right Y axis to display the data within the specified minimum and maximum value for the axis.
        """
        return pulumi.get(self, "y_axis_right_min")

    @y_axis_right_min.setter
    def y_axis_right_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_right_min", value)

    @property
    @pulumi.getter(name="yAxisRightSeries")
    def y_axis_right_series(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Optional) An attribute which takes a list of strings, specifying a selection of series' displayed in the line chart to be adjusted against the values of the right Y-axis.
        """
        return pulumi.get(self, "y_axis_right_series")

    @y_axis_right_series.setter
    def y_axis_right_series(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "y_axis_right_series", value)

    @property
    @pulumi.getter(name="yAxisRightZero")
    def y_axis_right_zero(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An attribute that specifies if the values on the graph to be rendered need to be fit to scale, or printed within the specified range from `y_axis_right_min` (or 0 if it is not defined) to `y_axis_right_max`. Use `y_axis_right_zero = true` with a combination of `y_axis_right_min` and `y_axis_right_max` to render values from 0 or the specified minimum to the maximum, and `y_axis_right_zero = false` to fit the graph to scale.
        """
        return pulumi.get(self, "y_axis_right_zero")

    @y_axis_right_zero.setter
    def y_axis_right_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "y_axis_right_zero", value)


if not MYPY:
    class OneDashboardPageWidgetLogTableArgsDict(TypedDict):
        column: pulumi.Input[int]
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableNrqlQueryArgsDict']]]
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        row: pulumi.Input[int]
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        title: pulumi.Input[str]
        """
        (Optional) A human-friendly display string for this value.
        """
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableColorArgsDict']]]]
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        data_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableDataFormatArgsDict']]]]
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        facet_show_other_series: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        height: NotRequired[pulumi.Input[int]]
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the widget.
        """
        ignore_time_range: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        initial_sorting: NotRequired[pulumi.Input['OneDashboardPageWidgetLogTableInitialSortingArgsDict']]
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        legend_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        null_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableNullValueArgsDict']]]]
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        refresh_rate: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        units: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableUnitArgsDict']]]]
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        width: NotRequired[pulumi.Input[int]]
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        y_axis_left_max: NotRequired[pulumi.Input[float]]
        y_axis_left_min: NotRequired[pulumi.Input[float]]
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
elif False:
    OneDashboardPageWidgetLogTableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLogTableArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[int],
                 nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableNrqlQueryArgs']]],
                 row: pulumi.Input[int],
                 title: pulumi.Input[str],
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableColorArgs']]]] = None,
                 data_formats: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableDataFormatArgs']]]] = None,
                 facet_show_other_series: Optional[pulumi.Input[bool]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ignore_time_range: Optional[pulumi.Input[bool]] = None,
                 initial_sorting: Optional[pulumi.Input['OneDashboardPageWidgetLogTableInitialSortingArgs']] = None,
                 legend_enabled: Optional[pulumi.Input[bool]] = None,
                 null_values: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableNullValueArgs']]]] = None,
                 refresh_rate: Optional[pulumi.Input[str]] = None,
                 units: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableUnitArgs']]]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 y_axis_left_max: Optional[pulumi.Input[float]] = None,
                 y_axis_left_min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[int] column: (Required) Column position of widget from top left, starting at `1`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableNrqlQueryArgs']]] nrql_queries: (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        :param pulumi.Input[int] row: (Required) Row position of widget from top left, starting at `1`.
        :param pulumi.Input[str] title: (Optional) A human-friendly display string for this value.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableColorArgs']]] colors: (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableDataFormatArgs']]] data_formats: (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        :param pulumi.Input[bool] facet_show_other_series: (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        :param pulumi.Input[int] height: (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        :param pulumi.Input[str] id: The ID of the widget.
        :param pulumi.Input[bool] ignore_time_range: (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        :param pulumi.Input['OneDashboardPageWidgetLogTableInitialSortingArgs'] initial_sorting: (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        :param pulumi.Input[bool] legend_enabled: (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableNullValueArgs']]] null_values: (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        :param pulumi.Input[str] refresh_rate: (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableUnitArgs']]] units: (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        :param pulumi.Input[int] width: (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        :param pulumi.Input[float] y_axis_left_min: , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "nrql_queries", nrql_queries)
        pulumi.set(__self__, "row", row)
        pulumi.set(__self__, "title", title)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if data_formats is not None:
            pulumi.set(__self__, "data_formats", data_formats)
        if facet_show_other_series is not None:
            pulumi.set(__self__, "facet_show_other_series", facet_show_other_series)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_time_range is not None:
            pulumi.set(__self__, "ignore_time_range", ignore_time_range)
        if initial_sorting is not None:
            pulumi.set(__self__, "initial_sorting", initial_sorting)
        if legend_enabled is not None:
            pulumi.set(__self__, "legend_enabled", legend_enabled)
        if null_values is not None:
            pulumi.set(__self__, "null_values", null_values)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if y_axis_left_max is not None:
            pulumi.set(__self__, "y_axis_left_max", y_axis_left_max)
        if y_axis_left_min is not None:
            pulumi.set(__self__, "y_axis_left_min", y_axis_left_min)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[int]:
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[int]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="nrqlQueries")
    def nrql_queries(self) -> pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableNrqlQueryArgs']]]:
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        return pulumi.get(self, "nrql_queries")

    @nrql_queries.setter
    def nrql_queries(self, value: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableNrqlQueryArgs']]]):
        pulumi.set(self, "nrql_queries", value)

    @property
    @pulumi.getter
    def row(self) -> pulumi.Input[int]:
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: pulumi.Input[int]):
        pulumi.set(self, "row", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        (Optional) A human-friendly display string for this value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableColorArgs']]]]:
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableColorArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="dataFormats")
    def data_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableDataFormatArgs']]]]:
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        return pulumi.get(self, "data_formats")

    @data_formats.setter
    def data_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableDataFormatArgs']]]]):
        pulumi.set(self, "data_formats", value)

    @property
    @pulumi.getter(name="facetShowOtherSeries")
    def facet_show_other_series(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        return pulumi.get(self, "facet_show_other_series")

    @facet_show_other_series.setter
    def facet_show_other_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facet_show_other_series", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ignoreTimeRange")
    def ignore_time_range(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        return pulumi.get(self, "ignore_time_range")

    @ignore_time_range.setter
    def ignore_time_range(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_time_range", value)

    @property
    @pulumi.getter(name="initialSorting")
    def initial_sorting(self) -> Optional[pulumi.Input['OneDashboardPageWidgetLogTableInitialSortingArgs']]:
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        return pulumi.get(self, "initial_sorting")

    @initial_sorting.setter
    def initial_sorting(self, value: Optional[pulumi.Input['OneDashboardPageWidgetLogTableInitialSortingArgs']]):
        pulumi.set(self, "initial_sorting", value)

    @property
    @pulumi.getter(name="legendEnabled")
    def legend_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        return pulumi.get(self, "legend_enabled")

    @legend_enabled.setter
    def legend_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legend_enabled", value)

    @property
    @pulumi.getter(name="nullValues")
    def null_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableNullValueArgs']]]]:
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        return pulumi.get(self, "null_values")

    @null_values.setter
    def null_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableNullValueArgs']]]]):
        pulumi.set(self, "null_values", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableUnitArgs']]]]:
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableUnitArgs']]]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="yAxisLeftMax")
    def y_axis_left_max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "y_axis_left_max")

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_max", value)

    @property
    @pulumi.getter(name="yAxisLeftMin")
    def y_axis_left_min(self) -> Optional[pulumi.Input[float]]:
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        return pulumi.get(self, "y_axis_left_min")

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_min", value)


if not MYPY:
    class OneDashboardPageWidgetLogTableColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableColorSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetLogTableColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLogTableColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableColorSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableColorSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableColorSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableColorSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetLogTableColorSeriesOverrideArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetLogTableColorSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLogTableColorSeriesOverrideArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[str] series_name: Series name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetLogTableDataFormatArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        type: pulumi.Input[str]
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        format: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        precision: NotRequired[pulumi.Input[int]]
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
elif False:
    OneDashboardPageWidgetLogTableDataFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLogTableDataFormatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 format: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] type: (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        :param pulumi.Input[str] format: (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        :param pulumi.Input[int] precision: (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)


if not MYPY:
    class OneDashboardPageWidgetLogTableInitialSortingArgsDict(TypedDict):
        direction: pulumi.Input[str]
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
elif False:
    OneDashboardPageWidgetLogTableInitialSortingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLogTableInitialSortingArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] direction: (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        :param pulumi.Input[str] name: The title of the dashboard.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OneDashboardPageWidgetLogTableNrqlQueryArgsDict(TypedDict):
        query: pulumi.Input[str]
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        account_id: NotRequired[pulumi.Input[str]]
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
elif False:
    OneDashboardPageWidgetLogTableNrqlQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLogTableNrqlQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        :param pulumi.Input[str] account_id: Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        pulumi.set(__self__, "query", query)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)


if not MYPY:
    class OneDashboardPageWidgetLogTableNullValueArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableNullValueSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetLogTableNullValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLogTableNullValueArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableNullValueSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableNullValueSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableNullValueSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableNullValueSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetLogTableNullValueSeriesOverrideArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetLogTableNullValueSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLogTableNullValueSeriesOverrideArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[str] series_name: Series name
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetLogTableUnitArgsDict(TypedDict):
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableUnitSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetLogTableUnitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLogTableUnitArgs:
    def __init__(__self__, *,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableUnitSeriesOverrideArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableUnitSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableUnitSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetLogTableUnitSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetLogTableUnitSeriesOverrideArgsDict(TypedDict):
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetLogTableUnitSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetLogTableUnitSeriesOverrideArgs:
    def __init__(__self__, *,
                 series_name: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] series_name: Series name
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetMarkdownArgsDict(TypedDict):
        column: pulumi.Input[int]
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        row: pulumi.Input[int]
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        text: pulumi.Input[str]
        """
        (Required) The markdown source to be rendered in the widget.
        """
        title: pulumi.Input[str]
        """
        (Optional) A human-friendly display string for this value.
        """
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownColorArgsDict']]]]
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        data_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownDataFormatArgsDict']]]]
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        facet_show_other_series: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        height: NotRequired[pulumi.Input[int]]
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the widget.
        """
        ignore_time_range: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        initial_sorting: NotRequired[pulumi.Input['OneDashboardPageWidgetMarkdownInitialSortingArgsDict']]
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        legend_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        null_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownNullValueArgsDict']]]]
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        refresh_rate: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        units: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownUnitArgsDict']]]]
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        width: NotRequired[pulumi.Input[int]]
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        y_axis_left_max: NotRequired[pulumi.Input[float]]
        y_axis_left_min: NotRequired[pulumi.Input[float]]
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
elif False:
    OneDashboardPageWidgetMarkdownArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetMarkdownArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[int],
                 row: pulumi.Input[int],
                 text: pulumi.Input[str],
                 title: pulumi.Input[str],
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownColorArgs']]]] = None,
                 data_formats: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownDataFormatArgs']]]] = None,
                 facet_show_other_series: Optional[pulumi.Input[bool]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ignore_time_range: Optional[pulumi.Input[bool]] = None,
                 initial_sorting: Optional[pulumi.Input['OneDashboardPageWidgetMarkdownInitialSortingArgs']] = None,
                 legend_enabled: Optional[pulumi.Input[bool]] = None,
                 null_values: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownNullValueArgs']]]] = None,
                 refresh_rate: Optional[pulumi.Input[str]] = None,
                 units: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownUnitArgs']]]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 y_axis_left_max: Optional[pulumi.Input[float]] = None,
                 y_axis_left_min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[int] column: (Required) Column position of widget from top left, starting at `1`.
        :param pulumi.Input[int] row: (Required) Row position of widget from top left, starting at `1`.
        :param pulumi.Input[str] text: (Required) The markdown source to be rendered in the widget.
        :param pulumi.Input[str] title: (Optional) A human-friendly display string for this value.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownColorArgs']]] colors: (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownDataFormatArgs']]] data_formats: (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        :param pulumi.Input[bool] facet_show_other_series: (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        :param pulumi.Input[int] height: (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        :param pulumi.Input[str] id: The ID of the widget.
        :param pulumi.Input[bool] ignore_time_range: (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        :param pulumi.Input['OneDashboardPageWidgetMarkdownInitialSortingArgs'] initial_sorting: (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        :param pulumi.Input[bool] legend_enabled: (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownNullValueArgs']]] null_values: (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        :param pulumi.Input[str] refresh_rate: (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownUnitArgs']]] units: (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        :param pulumi.Input[int] width: (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        :param pulumi.Input[float] y_axis_left_min: , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "row", row)
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "title", title)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if data_formats is not None:
            pulumi.set(__self__, "data_formats", data_formats)
        if facet_show_other_series is not None:
            pulumi.set(__self__, "facet_show_other_series", facet_show_other_series)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_time_range is not None:
            pulumi.set(__self__, "ignore_time_range", ignore_time_range)
        if initial_sorting is not None:
            pulumi.set(__self__, "initial_sorting", initial_sorting)
        if legend_enabled is not None:
            pulumi.set(__self__, "legend_enabled", legend_enabled)
        if null_values is not None:
            pulumi.set(__self__, "null_values", null_values)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if y_axis_left_max is not None:
            pulumi.set(__self__, "y_axis_left_max", y_axis_left_max)
        if y_axis_left_min is not None:
            pulumi.set(__self__, "y_axis_left_min", y_axis_left_min)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[int]:
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[int]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def row(self) -> pulumi.Input[int]:
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: pulumi.Input[int]):
        pulumi.set(self, "row", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        (Required) The markdown source to be rendered in the widget.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        (Optional) A human-friendly display string for this value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownColorArgs']]]]:
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownColorArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="dataFormats")
    def data_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownDataFormatArgs']]]]:
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        return pulumi.get(self, "data_formats")

    @data_formats.setter
    def data_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownDataFormatArgs']]]]):
        pulumi.set(self, "data_formats", value)

    @property
    @pulumi.getter(name="facetShowOtherSeries")
    def facet_show_other_series(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        return pulumi.get(self, "facet_show_other_series")

    @facet_show_other_series.setter
    def facet_show_other_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facet_show_other_series", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ignoreTimeRange")
    def ignore_time_range(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        return pulumi.get(self, "ignore_time_range")

    @ignore_time_range.setter
    def ignore_time_range(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_time_range", value)

    @property
    @pulumi.getter(name="initialSorting")
    def initial_sorting(self) -> Optional[pulumi.Input['OneDashboardPageWidgetMarkdownInitialSortingArgs']]:
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        return pulumi.get(self, "initial_sorting")

    @initial_sorting.setter
    def initial_sorting(self, value: Optional[pulumi.Input['OneDashboardPageWidgetMarkdownInitialSortingArgs']]):
        pulumi.set(self, "initial_sorting", value)

    @property
    @pulumi.getter(name="legendEnabled")
    def legend_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        return pulumi.get(self, "legend_enabled")

    @legend_enabled.setter
    def legend_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legend_enabled", value)

    @property
    @pulumi.getter(name="nullValues")
    def null_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownNullValueArgs']]]]:
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        return pulumi.get(self, "null_values")

    @null_values.setter
    def null_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownNullValueArgs']]]]):
        pulumi.set(self, "null_values", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownUnitArgs']]]]:
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownUnitArgs']]]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="yAxisLeftMax")
    def y_axis_left_max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "y_axis_left_max")

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_max", value)

    @property
    @pulumi.getter(name="yAxisLeftMin")
    def y_axis_left_min(self) -> Optional[pulumi.Input[float]]:
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        return pulumi.get(self, "y_axis_left_min")

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_min", value)


if not MYPY:
    class OneDashboardPageWidgetMarkdownColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownColorSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetMarkdownColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetMarkdownColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownColorSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownColorSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownColorSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownColorSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetMarkdownColorSeriesOverrideArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetMarkdownColorSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetMarkdownColorSeriesOverrideArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[str] series_name: Series name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetMarkdownDataFormatArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        type: pulumi.Input[str]
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        format: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        precision: NotRequired[pulumi.Input[int]]
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
elif False:
    OneDashboardPageWidgetMarkdownDataFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetMarkdownDataFormatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 format: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] type: (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        :param pulumi.Input[str] format: (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        :param pulumi.Input[int] precision: (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)


if not MYPY:
    class OneDashboardPageWidgetMarkdownInitialSortingArgsDict(TypedDict):
        direction: pulumi.Input[str]
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
elif False:
    OneDashboardPageWidgetMarkdownInitialSortingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetMarkdownInitialSortingArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] direction: (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        :param pulumi.Input[str] name: The title of the dashboard.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OneDashboardPageWidgetMarkdownNullValueArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownNullValueSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetMarkdownNullValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetMarkdownNullValueArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownNullValueSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownNullValueSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownNullValueSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownNullValueSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetMarkdownNullValueSeriesOverrideArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetMarkdownNullValueSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetMarkdownNullValueSeriesOverrideArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[str] series_name: Series name
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetMarkdownUnitArgsDict(TypedDict):
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownUnitSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetMarkdownUnitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetMarkdownUnitArgs:
    def __init__(__self__, *,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownUnitSeriesOverrideArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownUnitSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownUnitSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetMarkdownUnitSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetMarkdownUnitSeriesOverrideArgsDict(TypedDict):
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetMarkdownUnitSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetMarkdownUnitSeriesOverrideArgs:
    def __init__(__self__, *,
                 series_name: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] series_name: Series name
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetPyArgsDict(TypedDict):
        column: pulumi.Input[int]
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyNrqlQueryArgsDict']]]
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        row: pulumi.Input[int]
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        title: pulumi.Input[str]
        """
        (Optional) A human-friendly display string for this value.
        """
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyColorArgsDict']]]]
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        data_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyDataFormatArgsDict']]]]
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        facet_show_other_series: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        filter_current_dashboard: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Use this item to filter the current dashboard.
        """
        height: NotRequired[pulumi.Input[int]]
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the widget.
        """
        ignore_time_range: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        initial_sorting: NotRequired[pulumi.Input['OneDashboardPageWidgetPyInitialSortingArgsDict']]
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        legend_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        linked_entity_guids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
        """
        null_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyNullValueArgsDict']]]]
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        refresh_rate: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        units: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyUnitArgsDict']]]]
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        width: NotRequired[pulumi.Input[int]]
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        y_axis_left_max: NotRequired[pulumi.Input[float]]
        y_axis_left_min: NotRequired[pulumi.Input[float]]
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
elif False:
    OneDashboardPageWidgetPyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetPyArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[int],
                 nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyNrqlQueryArgs']]],
                 row: pulumi.Input[int],
                 title: pulumi.Input[str],
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyColorArgs']]]] = None,
                 data_formats: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyDataFormatArgs']]]] = None,
                 facet_show_other_series: Optional[pulumi.Input[bool]] = None,
                 filter_current_dashboard: Optional[pulumi.Input[bool]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ignore_time_range: Optional[pulumi.Input[bool]] = None,
                 initial_sorting: Optional[pulumi.Input['OneDashboardPageWidgetPyInitialSortingArgs']] = None,
                 legend_enabled: Optional[pulumi.Input[bool]] = None,
                 linked_entity_guids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 null_values: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyNullValueArgs']]]] = None,
                 refresh_rate: Optional[pulumi.Input[str]] = None,
                 units: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyUnitArgs']]]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 y_axis_left_max: Optional[pulumi.Input[float]] = None,
                 y_axis_left_min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[int] column: (Required) Column position of widget from top left, starting at `1`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyNrqlQueryArgs']]] nrql_queries: (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        :param pulumi.Input[int] row: (Required) Row position of widget from top left, starting at `1`.
        :param pulumi.Input[str] title: (Optional) A human-friendly display string for this value.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyColorArgs']]] colors: (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyDataFormatArgs']]] data_formats: (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        :param pulumi.Input[bool] facet_show_other_series: (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        :param pulumi.Input[bool] filter_current_dashboard: (Optional) Use this item to filter the current dashboard.
        :param pulumi.Input[int] height: (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        :param pulumi.Input[str] id: The ID of the widget.
        :param pulumi.Input[bool] ignore_time_range: (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        :param pulumi.Input['OneDashboardPageWidgetPyInitialSortingArgs'] initial_sorting: (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        :param pulumi.Input[bool] legend_enabled: (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] linked_entity_guids: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyNullValueArgs']]] null_values: (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        :param pulumi.Input[str] refresh_rate: (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyUnitArgs']]] units: (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        :param pulumi.Input[int] width: (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        :param pulumi.Input[float] y_axis_left_min: , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "nrql_queries", nrql_queries)
        pulumi.set(__self__, "row", row)
        pulumi.set(__self__, "title", title)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if data_formats is not None:
            pulumi.set(__self__, "data_formats", data_formats)
        if facet_show_other_series is not None:
            pulumi.set(__self__, "facet_show_other_series", facet_show_other_series)
        if filter_current_dashboard is not None:
            pulumi.set(__self__, "filter_current_dashboard", filter_current_dashboard)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_time_range is not None:
            pulumi.set(__self__, "ignore_time_range", ignore_time_range)
        if initial_sorting is not None:
            pulumi.set(__self__, "initial_sorting", initial_sorting)
        if legend_enabled is not None:
            pulumi.set(__self__, "legend_enabled", legend_enabled)
        if linked_entity_guids is not None:
            pulumi.set(__self__, "linked_entity_guids", linked_entity_guids)
        if null_values is not None:
            pulumi.set(__self__, "null_values", null_values)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if y_axis_left_max is not None:
            pulumi.set(__self__, "y_axis_left_max", y_axis_left_max)
        if y_axis_left_min is not None:
            pulumi.set(__self__, "y_axis_left_min", y_axis_left_min)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[int]:
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[int]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="nrqlQueries")
    def nrql_queries(self) -> pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyNrqlQueryArgs']]]:
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        return pulumi.get(self, "nrql_queries")

    @nrql_queries.setter
    def nrql_queries(self, value: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyNrqlQueryArgs']]]):
        pulumi.set(self, "nrql_queries", value)

    @property
    @pulumi.getter
    def row(self) -> pulumi.Input[int]:
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: pulumi.Input[int]):
        pulumi.set(self, "row", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        (Optional) A human-friendly display string for this value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyColorArgs']]]]:
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyColorArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="dataFormats")
    def data_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyDataFormatArgs']]]]:
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        return pulumi.get(self, "data_formats")

    @data_formats.setter
    def data_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyDataFormatArgs']]]]):
        pulumi.set(self, "data_formats", value)

    @property
    @pulumi.getter(name="facetShowOtherSeries")
    def facet_show_other_series(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        return pulumi.get(self, "facet_show_other_series")

    @facet_show_other_series.setter
    def facet_show_other_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facet_show_other_series", value)

    @property
    @pulumi.getter(name="filterCurrentDashboard")
    def filter_current_dashboard(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Use this item to filter the current dashboard.
        """
        return pulumi.get(self, "filter_current_dashboard")

    @filter_current_dashboard.setter
    def filter_current_dashboard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "filter_current_dashboard", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ignoreTimeRange")
    def ignore_time_range(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        return pulumi.get(self, "ignore_time_range")

    @ignore_time_range.setter
    def ignore_time_range(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_time_range", value)

    @property
    @pulumi.getter(name="initialSorting")
    def initial_sorting(self) -> Optional[pulumi.Input['OneDashboardPageWidgetPyInitialSortingArgs']]:
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        return pulumi.get(self, "initial_sorting")

    @initial_sorting.setter
    def initial_sorting(self, value: Optional[pulumi.Input['OneDashboardPageWidgetPyInitialSortingArgs']]):
        pulumi.set(self, "initial_sorting", value)

    @property
    @pulumi.getter(name="legendEnabled")
    def legend_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        return pulumi.get(self, "legend_enabled")

    @legend_enabled.setter
    def legend_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legend_enabled", value)

    @property
    @pulumi.getter(name="linkedEntityGuids")
    def linked_entity_guids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
        """
        return pulumi.get(self, "linked_entity_guids")

    @linked_entity_guids.setter
    def linked_entity_guids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "linked_entity_guids", value)

    @property
    @pulumi.getter(name="nullValues")
    def null_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyNullValueArgs']]]]:
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        return pulumi.get(self, "null_values")

    @null_values.setter
    def null_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyNullValueArgs']]]]):
        pulumi.set(self, "null_values", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyUnitArgs']]]]:
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyUnitArgs']]]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="yAxisLeftMax")
    def y_axis_left_max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "y_axis_left_max")

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_max", value)

    @property
    @pulumi.getter(name="yAxisLeftMin")
    def y_axis_left_min(self) -> Optional[pulumi.Input[float]]:
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        return pulumi.get(self, "y_axis_left_min")

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_min", value)


if not MYPY:
    class OneDashboardPageWidgetPyColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyColorSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetPyColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetPyColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyColorSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyColorSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyColorSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyColorSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetPyColorSeriesOverrideArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetPyColorSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetPyColorSeriesOverrideArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[str] series_name: Series name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetPyDataFormatArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        type: pulumi.Input[str]
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        format: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        precision: NotRequired[pulumi.Input[int]]
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
elif False:
    OneDashboardPageWidgetPyDataFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetPyDataFormatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 format: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] type: (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        :param pulumi.Input[str] format: (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        :param pulumi.Input[int] precision: (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)


if not MYPY:
    class OneDashboardPageWidgetPyInitialSortingArgsDict(TypedDict):
        direction: pulumi.Input[str]
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
elif False:
    OneDashboardPageWidgetPyInitialSortingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetPyInitialSortingArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] direction: (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        :param pulumi.Input[str] name: The title of the dashboard.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OneDashboardPageWidgetPyNrqlQueryArgsDict(TypedDict):
        query: pulumi.Input[str]
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        account_id: NotRequired[pulumi.Input[str]]
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
elif False:
    OneDashboardPageWidgetPyNrqlQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetPyNrqlQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        :param pulumi.Input[str] account_id: Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        pulumi.set(__self__, "query", query)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)


if not MYPY:
    class OneDashboardPageWidgetPyNullValueArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyNullValueSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetPyNullValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetPyNullValueArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyNullValueSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyNullValueSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyNullValueSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyNullValueSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetPyNullValueSeriesOverrideArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetPyNullValueSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetPyNullValueSeriesOverrideArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[str] series_name: Series name
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetPyUnitArgsDict(TypedDict):
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyUnitSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetPyUnitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetPyUnitArgs:
    def __init__(__self__, *,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyUnitSeriesOverrideArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyUnitSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyUnitSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetPyUnitSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetPyUnitSeriesOverrideArgsDict(TypedDict):
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetPyUnitSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetPyUnitSeriesOverrideArgs:
    def __init__(__self__, *,
                 series_name: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] series_name: Series name
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetStackedBarArgsDict(TypedDict):
        column: pulumi.Input[int]
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarNrqlQueryArgsDict']]]
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        row: pulumi.Input[int]
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        title: pulumi.Input[str]
        """
        (Optional) A human-friendly display string for this value.
        """
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarColorArgsDict']]]]
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        data_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarDataFormatArgsDict']]]]
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        facet_show_other_series: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        height: NotRequired[pulumi.Input[int]]
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the widget.
        """
        ignore_time_range: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        initial_sorting: NotRequired[pulumi.Input['OneDashboardPageWidgetStackedBarInitialSortingArgsDict']]
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        legend_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        null_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarNullValueArgsDict']]]]
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        refresh_rate: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        units: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarUnitArgsDict']]]]
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        width: NotRequired[pulumi.Input[int]]
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        y_axis_left_max: NotRequired[pulumi.Input[float]]
        y_axis_left_min: NotRequired[pulumi.Input[float]]
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
elif False:
    OneDashboardPageWidgetStackedBarArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetStackedBarArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[int],
                 nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarNrqlQueryArgs']]],
                 row: pulumi.Input[int],
                 title: pulumi.Input[str],
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarColorArgs']]]] = None,
                 data_formats: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarDataFormatArgs']]]] = None,
                 facet_show_other_series: Optional[pulumi.Input[bool]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ignore_time_range: Optional[pulumi.Input[bool]] = None,
                 initial_sorting: Optional[pulumi.Input['OneDashboardPageWidgetStackedBarInitialSortingArgs']] = None,
                 legend_enabled: Optional[pulumi.Input[bool]] = None,
                 null_values: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarNullValueArgs']]]] = None,
                 refresh_rate: Optional[pulumi.Input[str]] = None,
                 units: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarUnitArgs']]]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 y_axis_left_max: Optional[pulumi.Input[float]] = None,
                 y_axis_left_min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[int] column: (Required) Column position of widget from top left, starting at `1`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarNrqlQueryArgs']]] nrql_queries: (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        :param pulumi.Input[int] row: (Required) Row position of widget from top left, starting at `1`.
        :param pulumi.Input[str] title: (Optional) A human-friendly display string for this value.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarColorArgs']]] colors: (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarDataFormatArgs']]] data_formats: (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        :param pulumi.Input[bool] facet_show_other_series: (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        :param pulumi.Input[int] height: (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        :param pulumi.Input[str] id: The ID of the widget.
        :param pulumi.Input[bool] ignore_time_range: (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        :param pulumi.Input['OneDashboardPageWidgetStackedBarInitialSortingArgs'] initial_sorting: (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        :param pulumi.Input[bool] legend_enabled: (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarNullValueArgs']]] null_values: (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        :param pulumi.Input[str] refresh_rate: (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarUnitArgs']]] units: (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        :param pulumi.Input[int] width: (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        :param pulumi.Input[float] y_axis_left_min: , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "nrql_queries", nrql_queries)
        pulumi.set(__self__, "row", row)
        pulumi.set(__self__, "title", title)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if data_formats is not None:
            pulumi.set(__self__, "data_formats", data_formats)
        if facet_show_other_series is not None:
            pulumi.set(__self__, "facet_show_other_series", facet_show_other_series)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_time_range is not None:
            pulumi.set(__self__, "ignore_time_range", ignore_time_range)
        if initial_sorting is not None:
            pulumi.set(__self__, "initial_sorting", initial_sorting)
        if legend_enabled is not None:
            pulumi.set(__self__, "legend_enabled", legend_enabled)
        if null_values is not None:
            pulumi.set(__self__, "null_values", null_values)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if y_axis_left_max is not None:
            pulumi.set(__self__, "y_axis_left_max", y_axis_left_max)
        if y_axis_left_min is not None:
            pulumi.set(__self__, "y_axis_left_min", y_axis_left_min)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[int]:
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[int]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="nrqlQueries")
    def nrql_queries(self) -> pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarNrqlQueryArgs']]]:
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        return pulumi.get(self, "nrql_queries")

    @nrql_queries.setter
    def nrql_queries(self, value: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarNrqlQueryArgs']]]):
        pulumi.set(self, "nrql_queries", value)

    @property
    @pulumi.getter
    def row(self) -> pulumi.Input[int]:
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: pulumi.Input[int]):
        pulumi.set(self, "row", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        (Optional) A human-friendly display string for this value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarColorArgs']]]]:
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarColorArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="dataFormats")
    def data_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarDataFormatArgs']]]]:
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        return pulumi.get(self, "data_formats")

    @data_formats.setter
    def data_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarDataFormatArgs']]]]):
        pulumi.set(self, "data_formats", value)

    @property
    @pulumi.getter(name="facetShowOtherSeries")
    def facet_show_other_series(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        return pulumi.get(self, "facet_show_other_series")

    @facet_show_other_series.setter
    def facet_show_other_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facet_show_other_series", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ignoreTimeRange")
    def ignore_time_range(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        return pulumi.get(self, "ignore_time_range")

    @ignore_time_range.setter
    def ignore_time_range(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_time_range", value)

    @property
    @pulumi.getter(name="initialSorting")
    def initial_sorting(self) -> Optional[pulumi.Input['OneDashboardPageWidgetStackedBarInitialSortingArgs']]:
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        return pulumi.get(self, "initial_sorting")

    @initial_sorting.setter
    def initial_sorting(self, value: Optional[pulumi.Input['OneDashboardPageWidgetStackedBarInitialSortingArgs']]):
        pulumi.set(self, "initial_sorting", value)

    @property
    @pulumi.getter(name="legendEnabled")
    def legend_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        return pulumi.get(self, "legend_enabled")

    @legend_enabled.setter
    def legend_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legend_enabled", value)

    @property
    @pulumi.getter(name="nullValues")
    def null_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarNullValueArgs']]]]:
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        return pulumi.get(self, "null_values")

    @null_values.setter
    def null_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarNullValueArgs']]]]):
        pulumi.set(self, "null_values", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarUnitArgs']]]]:
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarUnitArgs']]]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="yAxisLeftMax")
    def y_axis_left_max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "y_axis_left_max")

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_max", value)

    @property
    @pulumi.getter(name="yAxisLeftMin")
    def y_axis_left_min(self) -> Optional[pulumi.Input[float]]:
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        return pulumi.get(self, "y_axis_left_min")

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_min", value)


if not MYPY:
    class OneDashboardPageWidgetStackedBarColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarColorSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetStackedBarColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetStackedBarColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarColorSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarColorSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarColorSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarColorSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetStackedBarColorSeriesOverrideArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetStackedBarColorSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetStackedBarColorSeriesOverrideArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[str] series_name: Series name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetStackedBarDataFormatArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        type: pulumi.Input[str]
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        format: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        precision: NotRequired[pulumi.Input[int]]
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
elif False:
    OneDashboardPageWidgetStackedBarDataFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetStackedBarDataFormatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 format: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] type: (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        :param pulumi.Input[str] format: (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        :param pulumi.Input[int] precision: (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)


if not MYPY:
    class OneDashboardPageWidgetStackedBarInitialSortingArgsDict(TypedDict):
        direction: pulumi.Input[str]
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
elif False:
    OneDashboardPageWidgetStackedBarInitialSortingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetStackedBarInitialSortingArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] direction: (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        :param pulumi.Input[str] name: The title of the dashboard.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OneDashboardPageWidgetStackedBarNrqlQueryArgsDict(TypedDict):
        query: pulumi.Input[str]
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        account_id: NotRequired[pulumi.Input[str]]
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
elif False:
    OneDashboardPageWidgetStackedBarNrqlQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetStackedBarNrqlQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        :param pulumi.Input[str] account_id: Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        pulumi.set(__self__, "query", query)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)


if not MYPY:
    class OneDashboardPageWidgetStackedBarNullValueArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarNullValueSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetStackedBarNullValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetStackedBarNullValueArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarNullValueSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarNullValueSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarNullValueSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarNullValueSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetStackedBarNullValueSeriesOverrideArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetStackedBarNullValueSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetStackedBarNullValueSeriesOverrideArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[str] series_name: Series name
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetStackedBarUnitArgsDict(TypedDict):
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarUnitSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetStackedBarUnitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetStackedBarUnitArgs:
    def __init__(__self__, *,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarUnitSeriesOverrideArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarUnitSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarUnitSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetStackedBarUnitSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetStackedBarUnitSeriesOverrideArgsDict(TypedDict):
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetStackedBarUnitSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetStackedBarUnitSeriesOverrideArgs:
    def __init__(__self__, *,
                 series_name: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] series_name: Series name
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetTableArgsDict(TypedDict):
        column: pulumi.Input[int]
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableNrqlQueryArgsDict']]]
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        row: pulumi.Input[int]
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        title: pulumi.Input[str]
        """
        (Optional) A human-friendly display string for this value.
        """
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableColorArgsDict']]]]
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        data_formats: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableDataFormatArgsDict']]]]
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        facet_show_other_series: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        filter_current_dashboard: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Use this item to filter the current dashboard.
        """
        height: NotRequired[pulumi.Input[int]]
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the widget.
        """
        ignore_time_range: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        initial_sorting: NotRequired[pulumi.Input['OneDashboardPageWidgetTableInitialSortingArgsDict']]
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        legend_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        linked_entity_guids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
        """
        null_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableNullValueArgsDict']]]]
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        refresh_rate: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        thresholds: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableThresholdArgsDict']]]]
        """
        (Optional) An attribute that helps specify multiple thresholds, each inclusive of a range of values between which the threshold would need to function, the name of the threshold and its severity. Multiple thresholds can be defined in a table widget. The `threshold` attribute requires specifying the following attributes in a nested block -
        """
        units: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableUnitArgsDict']]]]
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        width: NotRequired[pulumi.Input[int]]
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        y_axis_left_max: NotRequired[pulumi.Input[float]]
        y_axis_left_min: NotRequired[pulumi.Input[float]]
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
elif False:
    OneDashboardPageWidgetTableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetTableArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[int],
                 nrql_queries: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableNrqlQueryArgs']]],
                 row: pulumi.Input[int],
                 title: pulumi.Input[str],
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableColorArgs']]]] = None,
                 data_formats: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableDataFormatArgs']]]] = None,
                 facet_show_other_series: Optional[pulumi.Input[bool]] = None,
                 filter_current_dashboard: Optional[pulumi.Input[bool]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ignore_time_range: Optional[pulumi.Input[bool]] = None,
                 initial_sorting: Optional[pulumi.Input['OneDashboardPageWidgetTableInitialSortingArgs']] = None,
                 legend_enabled: Optional[pulumi.Input[bool]] = None,
                 linked_entity_guids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 null_values: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableNullValueArgs']]]] = None,
                 refresh_rate: Optional[pulumi.Input[str]] = None,
                 thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableThresholdArgs']]]] = None,
                 units: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableUnitArgs']]]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 y_axis_left_max: Optional[pulumi.Input[float]] = None,
                 y_axis_left_min: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[int] column: (Required) Column position of widget from top left, starting at `1`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableNrqlQueryArgs']]] nrql_queries: (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        :param pulumi.Input[int] row: (Required) Row position of widget from top left, starting at `1`.
        :param pulumi.Input[str] title: (Optional) A human-friendly display string for this value.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableColorArgs']]] colors: (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableDataFormatArgs']]] data_formats: (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        :param pulumi.Input[bool] facet_show_other_series: (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        :param pulumi.Input[bool] filter_current_dashboard: (Optional) Use this item to filter the current dashboard.
        :param pulumi.Input[int] height: (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        :param pulumi.Input[str] id: The ID of the widget.
        :param pulumi.Input[bool] ignore_time_range: (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        :param pulumi.Input['OneDashboardPageWidgetTableInitialSortingArgs'] initial_sorting: (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        :param pulumi.Input[bool] legend_enabled: (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] linked_entity_guids: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableNullValueArgs']]] null_values: (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        :param pulumi.Input[str] refresh_rate: (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableThresholdArgs']]] thresholds: (Optional) An attribute that helps specify multiple thresholds, each inclusive of a range of values between which the threshold would need to function, the name of the threshold and its severity. Multiple thresholds can be defined in a table widget. The `threshold` attribute requires specifying the following attributes in a nested block -
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableUnitArgs']]] units: (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        :param pulumi.Input[int] width: (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        :param pulumi.Input[float] y_axis_left_min: , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "nrql_queries", nrql_queries)
        pulumi.set(__self__, "row", row)
        pulumi.set(__self__, "title", title)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if data_formats is not None:
            pulumi.set(__self__, "data_formats", data_formats)
        if facet_show_other_series is not None:
            pulumi.set(__self__, "facet_show_other_series", facet_show_other_series)
        if filter_current_dashboard is not None:
            pulumi.set(__self__, "filter_current_dashboard", filter_current_dashboard)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_time_range is not None:
            pulumi.set(__self__, "ignore_time_range", ignore_time_range)
        if initial_sorting is not None:
            pulumi.set(__self__, "initial_sorting", initial_sorting)
        if legend_enabled is not None:
            pulumi.set(__self__, "legend_enabled", legend_enabled)
        if linked_entity_guids is not None:
            pulumi.set(__self__, "linked_entity_guids", linked_entity_guids)
        if null_values is not None:
            pulumi.set(__self__, "null_values", null_values)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if y_axis_left_max is not None:
            pulumi.set(__self__, "y_axis_left_max", y_axis_left_max)
        if y_axis_left_min is not None:
            pulumi.set(__self__, "y_axis_left_min", y_axis_left_min)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[int]:
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[int]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="nrqlQueries")
    def nrql_queries(self) -> pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableNrqlQueryArgs']]]:
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        return pulumi.get(self, "nrql_queries")

    @nrql_queries.setter
    def nrql_queries(self, value: pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableNrqlQueryArgs']]]):
        pulumi.set(self, "nrql_queries", value)

    @property
    @pulumi.getter
    def row(self) -> pulumi.Input[int]:
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: pulumi.Input[int]):
        pulumi.set(self, "row", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        (Optional) A human-friendly display string for this value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableColorArgs']]]]:
        """
        (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableColorArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="dataFormats")
    def data_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableDataFormatArgs']]]]:
        """
        (Optional) A nested block that describes data format. See Nested data_format blocks below for details.
        """
        return pulumi.get(self, "data_formats")

    @data_formats.setter
    def data_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableDataFormatArgs']]]]):
        pulumi.set(self, "data_formats", value)

    @property
    @pulumi.getter(name="facetShowOtherSeries")
    def facet_show_other_series(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
        """
        return pulumi.get(self, "facet_show_other_series")

    @facet_show_other_series.setter
    def facet_show_other_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facet_show_other_series", value)

    @property
    @pulumi.getter(name="filterCurrentDashboard")
    def filter_current_dashboard(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Use this item to filter the current dashboard.
        """
        return pulumi.get(self, "filter_current_dashboard")

    @filter_current_dashboard.setter
    def filter_current_dashboard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "filter_current_dashboard", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ignoreTimeRange")
    def ignore_time_range(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        return pulumi.get(self, "ignore_time_range")

    @ignore_time_range.setter
    def ignore_time_range(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_time_range", value)

    @property
    @pulumi.getter(name="initialSorting")
    def initial_sorting(self) -> Optional[pulumi.Input['OneDashboardPageWidgetTableInitialSortingArgs']]:
        """
        (Optional) An attribute that describes the sorting mechanism for the table. This attribute requires specifying the following attributes in a nested block -
        """
        return pulumi.get(self, "initial_sorting")

    @initial_sorting.setter
    def initial_sorting(self, value: Optional[pulumi.Input['OneDashboardPageWidgetTableInitialSortingArgs']]):
        pulumi.set(self, "initial_sorting", value)

    @property
    @pulumi.getter(name="legendEnabled")
    def legend_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
        """
        return pulumi.get(self, "legend_enabled")

    @legend_enabled.setter
    def legend_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legend_enabled", value)

    @property
    @pulumi.getter(name="linkedEntityGuids")
    def linked_entity_guids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
        """
        return pulumi.get(self, "linked_entity_guids")

    @linked_entity_guids.setter
    def linked_entity_guids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "linked_entity_guids", value)

    @property
    @pulumi.getter(name="nullValues")
    def null_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableNullValueArgs']]]]:
        """
        (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.
        """
        return pulumi.get(self, "null_values")

    @null_values.setter
    def null_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableNullValueArgs']]]]):
        pulumi.set(self, "null_values", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute determines the frequency for data refresh specified in milliseconds. Accepted values are `auto` for default value, `0` for no refresh, `5000` for 5 seconds, `30000` for 30 seconds, `60000` for 60 seconds, `300000` for 5 minutes, `1800000` for 30 minutes, `3600000` for 60 minute, `10800000` for 3 hours, `43200000` for 12 hours and `86400000` for 24 hours.
        """
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableThresholdArgs']]]]:
        """
        (Optional) An attribute that helps specify multiple thresholds, each inclusive of a range of values between which the threshold would need to function, the name of the threshold and its severity. Multiple thresholds can be defined in a table widget. The `threshold` attribute requires specifying the following attributes in a nested block -
        """
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableThresholdArgs']]]]):
        pulumi.set(self, "thresholds", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableUnitArgs']]]]:
        """
        (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableUnitArgs']]]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="yAxisLeftMax")
    def y_axis_left_max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "y_axis_left_max")

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_max", value)

    @property
    @pulumi.getter(name="yAxisLeftMin")
    def y_axis_left_min(self) -> Optional[pulumi.Input[float]]:
        """
        , `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
        """
        return pulumi.get(self, "y_axis_left_min")

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y_axis_left_min", value)


if not MYPY:
    class OneDashboardPageWidgetTableColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableColorSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetTableColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetTableColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableColorSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableColorSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableColorSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableColorSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetTableColorSeriesOverrideArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetTableColorSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetTableColorSeriesOverrideArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] color: (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        :param pulumi.Input[str] series_name: Series name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetTableDataFormatArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        type: pulumi.Input[str]
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        format: NotRequired[pulumi.Input[str]]
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        precision: NotRequired[pulumi.Input[int]]
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
elif False:
    OneDashboardPageWidgetTableDataFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetTableDataFormatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 format: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] type: (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        :param pulumi.Input[str] format: (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        :param pulumi.Input[int] precision: (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) This attribute is provided when the `name` is that of a column comprising date/time values and the `type` attribute is set to `custom` defining the specific date format to be applied to your data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) This attribute is utilized when the `type` attribute is set to `decimal`, stipulating the precise number of digits after the decimal point for your data.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)


if not MYPY:
    class OneDashboardPageWidgetTableInitialSortingArgsDict(TypedDict):
        direction: pulumi.Input[str]
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
elif False:
    OneDashboardPageWidgetTableInitialSortingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetTableInitialSortingArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] direction: (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        :param pulumi.Input[str] name: The title of the dashboard.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        (Required) Defines the sort order. Accepted values are `asc` for ascending or `desc` for descending.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OneDashboardPageWidgetTableNrqlQueryArgsDict(TypedDict):
        query: pulumi.Input[str]
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        account_id: NotRequired[pulumi.Input[str]]
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
elif False:
    OneDashboardPageWidgetTableNrqlQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetTableNrqlQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        :param pulumi.Input[str] account_id: Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        pulumi.set(__self__, "query", query)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)


if not MYPY:
    class OneDashboardPageWidgetTableNullValueArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableNullValueSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
elif False:
    OneDashboardPageWidgetTableNullValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetTableNullValueArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableNullValueSeriesOverrideArgs']]]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableNullValueSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableNullValueSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableNullValueSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)


if not MYPY:
    class OneDashboardPageWidgetTableNullValueSeriesOverrideArgsDict(TypedDict):
        null_value: NotRequired[pulumi.Input[str]]
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
elif False:
    OneDashboardPageWidgetTableNullValueSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetTableNullValueSeriesOverrideArgs:
    def __init__(__self__, *,
                 null_value: Optional[pulumi.Input[str]] = None,
                 series_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] null_value: Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        :param pulumi.Input[str] series_name: Series name
        """
        if null_value is not None:
            pulumi.set(__self__, "null_value", null_value)
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)

    @property
    @pulumi.getter(name="nullValue")
    def null_value(self) -> Optional[pulumi.Input[str]]:
        """
        Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
        """
        return pulumi.get(self, "null_value")

    @null_value.setter
    def null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_value", value)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)


if not MYPY:
    class OneDashboardPageWidgetTableThresholdArgsDict(TypedDict):
        column_name: NotRequired[pulumi.Input[str]]
        """
        The name of the column in the table, to which the threshold would need to be applied.
        """
        from_: NotRequired[pulumi.Input[str]]
        """
        The value 'from' which the threshold would need to be applied.
        """
        severity: NotRequired[pulumi.Input[str]]
        """
        The severity of the threshold, which would affect the visual appearance of the threshold (such as its color) accordingly. The value of this attribute would need to be one of the following - `warning`, `severe`, `critical`, `success`, `unavailable` which correspond to the severity labels _Warning_, _Approaching critical_, _Critical_, _Good_, _Neutral_ in the dropdown that helps specify the severity of thresholds in table widgets in the UI, respectively.
        """
        to: NotRequired[pulumi.Input[str]]
        """
        The value until which the threshold would need to be applied.
        """
elif False:
    OneDashboardPageWidgetTableThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetTableThresholdArgs:
    def __init__(__self__, *,
                 column_name: Optional[pulumi.Input[str]] = None,
                 from_: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 to: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] column_name: The name of the column in the table, to which the threshold would need to be applied.
        :param pulumi.Input[str] from_: The value 'from' which the threshold would need to be applied.
        :param pulumi.Input[str] severity: The severity of the threshold, which would affect the visual appearance of the threshold (such as its color) accordingly. The value of this attribute would need to be one of the following - `warning`, `severe`, `critical`, `success`, `unavailable` which correspond to the severity labels _Warning_, _Approaching critical_, _Critical_, _Good_, _Neutral_ in the dropdown that helps specify the severity of thresholds in table widgets in the UI, respectively.
        :param pulumi.Input[str] to: The value until which the threshold would need to be applied.
        """
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the column in the table, to which the threshold would need to be applied.
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[str]]:
        """
        The value 'from' which the threshold would need to be applied.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        The severity of the threshold, which would affect the visual appearance of the threshold (such as its color) accordingly. The value of this attribute would need to be one of the following - `warning`, `severe`, `critical`, `success`, `unavailable` which correspond to the severity labels _Warning_, _Approaching critical_, _Critical_, _Good_, _Neutral_ in the dropdown that helps specify the severity of thresholds in table widgets in the UI, respectively.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[str]]:
        """
        The value until which the threshold would need to be applied.
        """
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "to", value)


if not MYPY:
    class OneDashboardPageWidgetTableUnitArgsDict(TypedDict):
        series_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableUnitSeriesOverrideArgsDict']]]]
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetTableUnitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetTableUnitArgs:
    def __init__(__self__, *,
                 series_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableUnitSeriesOverrideArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableUnitSeriesOverrideArgs']]] series_overrides: (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableUnitSeriesOverrideArgs']]]]:
        """
        (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
        """
        return pulumi.get(self, "series_overrides")

    @series_overrides.setter
    def series_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardPageWidgetTableUnitSeriesOverrideArgs']]]]):
        pulumi.set(self, "series_overrides", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardPageWidgetTableUnitSeriesOverrideArgsDict(TypedDict):
        series_name: NotRequired[pulumi.Input[str]]
        """
        Series name
        """
        unit: NotRequired[pulumi.Input[str]]
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
elif False:
    OneDashboardPageWidgetTableUnitSeriesOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardPageWidgetTableUnitSeriesOverrideArgs:
    def __init__(__self__, *,
                 series_name: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] series_name: Series name
        :param pulumi.Input[str] unit: (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        if series_name is not None:
            pulumi.set(__self__, "series_name", series_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="seriesName")
    def series_name(self) -> Optional[pulumi.Input[str]]:
        """
        Series name
        """
        return pulumi.get(self, "series_name")

    @series_name.setter
    def series_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "series_name", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class OneDashboardRawPageArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Brief text describing the dashboard.
        """
        guid: NotRequired[pulumi.Input[str]]
        """
        The unique entity identifier of the dashboard page in New Relic.
        """
        widgets: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardRawPageWidgetArgsDict']]]]
        """
        (Optional) A nested block that describes a widget. See Nested widget blocks below for details.
        """
elif False:
    OneDashboardRawPageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardRawPageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 guid: Optional[pulumi.Input[str]] = None,
                 widgets: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardRawPageWidgetArgs']]]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] description: Brief text describing the dashboard.
        :param pulumi.Input[str] guid: The unique entity identifier of the dashboard page in New Relic.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardRawPageWidgetArgs']]] widgets: (Optional) A nested block that describes a widget. See Nested widget blocks below for details.
        """
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)
        if widgets is not None:
            pulumi.set(__self__, "widgets", widgets)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Brief text describing the dashboard.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def guid(self) -> Optional[pulumi.Input[str]]:
        """
        The unique entity identifier of the dashboard page in New Relic.
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guid", value)

    @property
    @pulumi.getter
    def widgets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardRawPageWidgetArgs']]]]:
        """
        (Optional) A nested block that describes a widget. See Nested widget blocks below for details.
        """
        return pulumi.get(self, "widgets")

    @widgets.setter
    def widgets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardRawPageWidgetArgs']]]]):
        pulumi.set(self, "widgets", value)


if not MYPY:
    class OneDashboardRawPageWidgetArgsDict(TypedDict):
        column: pulumi.Input[int]
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        configuration: pulumi.Input[str]
        """
        (Required) The configuration of the widget.
        """
        row: pulumi.Input[int]
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        title: pulumi.Input[str]
        """
        (Required) A title for the widget.
        """
        visualization_id: pulumi.Input[str]
        """
        (Required) The visualization ID of the widget
        """
        height: NotRequired[pulumi.Input[int]]
        """
        (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the widget.
        """
        linked_entity_guids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Optional) Related entity GUIDs.
        """
        width: NotRequired[pulumi.Input[int]]
        """
        (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
        """
elif False:
    OneDashboardRawPageWidgetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardRawPageWidgetArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[int],
                 configuration: pulumi.Input[str],
                 row: pulumi.Input[int],
                 title: pulumi.Input[str],
                 visualization_id: pulumi.Input[str],
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 linked_entity_guids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] column: (Required) Column position of widget from top left, starting at `1`.
        :param pulumi.Input[str] configuration: (Required) The configuration of the widget.
        :param pulumi.Input[int] row: (Required) Row position of widget from top left, starting at `1`.
        :param pulumi.Input[str] title: (Required) A title for the widget.
        :param pulumi.Input[str] visualization_id: (Required) The visualization ID of the widget
        :param pulumi.Input[int] height: (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
        :param pulumi.Input[str] id: The ID of the widget.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] linked_entity_guids: (Optional) Related entity GUIDs.
        :param pulumi.Input[int] width: (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "row", row)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "visualization_id", visualization_id)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if linked_entity_guids is not None:
            pulumi.set(__self__, "linked_entity_guids", linked_entity_guids)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[int]:
        """
        (Required) Column position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[int]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input[str]:
        """
        (Required) The configuration of the widget.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input[str]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def row(self) -> pulumi.Input[int]:
        """
        (Required) Row position of widget from top left, starting at `1`.
        """
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: pulumi.Input[int]):
        pulumi.set(self, "row", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        (Required) A title for the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="visualizationId")
    def visualization_id(self) -> pulumi.Input[str]:
        """
        (Required) The visualization ID of the widget
        """
        return pulumi.get(self, "visualization_id")

    @visualization_id.setter
    def visualization_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visualization_id", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="linkedEntityGuids")
    def linked_entity_guids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Optional) Related entity GUIDs.
        """
        return pulumi.get(self, "linked_entity_guids")

    @linked_entity_guids.setter
    def linked_entity_guids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "linked_entity_guids", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


if not MYPY:
    class OneDashboardVariableArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The title of the dashboard.
        """
        replacement_strategy: pulumi.Input[str]
        """
        (Optional) Indicates the strategy to apply when replacing a variable in a NRQL query. One of `default`, `identifier`, `number` or `string`.
        """
        title: pulumi.Input[str]
        """
        (Optional) A human-friendly display string for this value.
        """
        type: pulumi.Input[str]
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        default_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Optional) A list of default values for this variable. To select **all** default values, the appropriate value to be used with this argument would be `["*"]`.
        """
        is_multi_selection: NotRequired[pulumi.Input[bool]]
        """
        (Optional) Indicates whether this variable supports multiple selection or not. Only applies to variables of type `nrql` or `enum`.
        """
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardVariableItemArgsDict']]]]
        """
        (Optional) List of possible values for variables of type `enum`. See Nested item blocks below for details.
        """
        nrql_query: NotRequired[pulumi.Input['OneDashboardVariableNrqlQueryArgsDict']]
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        options: NotRequired[pulumi.Input[Sequence[pulumi.Input['OneDashboardVariableOptionArgsDict']]]]
        """
        (Optional) Specifies additional options to be added to dashboard variables. Supports the following nested attribute(s) -
        """
elif False:
    OneDashboardVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 replacement_strategy: pulumi.Input[str],
                 title: pulumi.Input[str],
                 type: pulumi.Input[str],
                 default_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_multi_selection: Optional[pulumi.Input[bool]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardVariableItemArgs']]]] = None,
                 nrql_query: Optional[pulumi.Input['OneDashboardVariableNrqlQueryArgs']] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardVariableOptionArgs']]]] = None):
        """
        :param pulumi.Input[str] name: The title of the dashboard.
        :param pulumi.Input[str] replacement_strategy: (Optional) Indicates the strategy to apply when replacing a variable in a NRQL query. One of `default`, `identifier`, `number` or `string`.
        :param pulumi.Input[str] title: (Optional) A human-friendly display string for this value.
        :param pulumi.Input[str] type: (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] default_values: (Optional) A list of default values for this variable. To select **all** default values, the appropriate value to be used with this argument would be `["*"]`.
        :param pulumi.Input[bool] is_multi_selection: (Optional) Indicates whether this variable supports multiple selection or not. Only applies to variables of type `nrql` or `enum`.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardVariableItemArgs']]] items: (Optional) List of possible values for variables of type `enum`. See Nested item blocks below for details.
        :param pulumi.Input['OneDashboardVariableNrqlQueryArgs'] nrql_query: (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        :param pulumi.Input[Sequence[pulumi.Input['OneDashboardVariableOptionArgs']]] options: (Optional) Specifies additional options to be added to dashboard variables. Supports the following nested attribute(s) -
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "replacement_strategy", replacement_strategy)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "type", type)
        if default_values is not None:
            pulumi.set(__self__, "default_values", default_values)
        if is_multi_selection is not None:
            pulumi.set(__self__, "is_multi_selection", is_multi_selection)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if nrql_query is not None:
            pulumi.set(__self__, "nrql_query", nrql_query)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="replacementStrategy")
    def replacement_strategy(self) -> pulumi.Input[str]:
        """
        (Optional) Indicates the strategy to apply when replacing a variable in a NRQL query. One of `default`, `identifier`, `number` or `string`.
        """
        return pulumi.get(self, "replacement_strategy")

    @replacement_strategy.setter
    def replacement_strategy(self, value: pulumi.Input[str]):
        pulumi.set(self, "replacement_strategy", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        (Optional) A human-friendly display string for this value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Optional) A list of default values for this variable. To select **all** default values, the appropriate value to be used with this argument would be `["*"]`.
        """
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="isMultiSelection")
    def is_multi_selection(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Indicates whether this variable supports multiple selection or not. Only applies to variables of type `nrql` or `enum`.
        """
        return pulumi.get(self, "is_multi_selection")

    @is_multi_selection.setter
    def is_multi_selection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_multi_selection", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardVariableItemArgs']]]]:
        """
        (Optional) List of possible values for variables of type `enum`. See Nested item blocks below for details.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardVariableItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter(name="nrqlQuery")
    def nrql_query(self) -> Optional[pulumi.Input['OneDashboardVariableNrqlQueryArgs']]:
        """
        (Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.
        """
        return pulumi.get(self, "nrql_query")

    @nrql_query.setter
    def nrql_query(self, value: Optional[pulumi.Input['OneDashboardVariableNrqlQueryArgs']]):
        pulumi.set(self, "nrql_query", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardVariableOptionArgs']]]]:
        """
        (Optional) Specifies additional options to be added to dashboard variables. Supports the following nested attribute(s) -
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OneDashboardVariableOptionArgs']]]]):
        pulumi.set(self, "options", value)


if not MYPY:
    class OneDashboardVariableItemArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        (Required) A possible variable value
        """
        title: NotRequired[pulumi.Input[str]]
        """
        (Optional) A human-friendly display string for this value.
        """
elif False:
    OneDashboardVariableItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardVariableItemArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: (Required) A possible variable value
        :param pulumi.Input[str] title: (Optional) A human-friendly display string for this value.
        """
        pulumi.set(__self__, "value", value)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        (Required) A possible variable value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) A human-friendly display string for this value.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class OneDashboardVariableNrqlQueryArgsDict(TypedDict):
        query: pulumi.Input[str]
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        account_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        New Relic account ID(s) to issue the query against.
        """
elif False:
    OneDashboardVariableNrqlQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardVariableNrqlQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] query: (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_ids: New Relic account ID(s) to issue the query against.
        """
        pulumi.set(__self__, "query", query)
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        New Relic account ID(s) to issue the query against.
        """
        return pulumi.get(self, "account_ids")

    @account_ids.setter
    def account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_ids", value)


if not MYPY:
    class OneDashboardVariableOptionArgsDict(TypedDict):
        ignore_time_range: NotRequired[pulumi.Input[bool]]
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
elif False:
    OneDashboardVariableOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OneDashboardVariableOptionArgs:
    def __init__(__self__, *,
                 ignore_time_range: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] ignore_time_range: (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        if ignore_time_range is not None:
            pulumi.set(__self__, "ignore_time_range", ignore_time_range)

    @property
    @pulumi.getter(name="ignoreTimeRange")
    def ignore_time_range(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) An argument with a boolean value that is supported only by variables of `type` _nrql_ - when true, the time range specified in the query will override the time picker on dashboards and other pages.
        """
        return pulumi.get(self, "ignore_time_range")

    @ignore_time_range.setter
    def ignore_time_range(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_time_range", value)


if not MYPY:
    class ServiceLevelEventsArgsDict(TypedDict):
        account_id: pulumi.Input[str]
        """
        The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,
        and that contains the NRDB data for the SLI/SLO calculations. Note that changing the account ID will force a new resource.
        """
        valid_events: pulumi.Input['ServiceLevelEventsValidEventsArgsDict']
        """
        The definition of valid requests.
        """
        bad_events: NotRequired[pulumi.Input['ServiceLevelEventsBadEventsArgsDict']]
        """
        The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.
        """
        good_events: NotRequired[pulumi.Input['ServiceLevelEventsGoodEventsArgsDict']]
        """
        The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.
        """
elif False:
    ServiceLevelEventsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLevelEventsArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 valid_events: pulumi.Input['ServiceLevelEventsValidEventsArgs'],
                 bad_events: Optional[pulumi.Input['ServiceLevelEventsBadEventsArgs']] = None,
                 good_events: Optional[pulumi.Input['ServiceLevelEventsGoodEventsArgs']] = None):
        """
        :param pulumi.Input[str] account_id: The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,
               and that contains the NRDB data for the SLI/SLO calculations. Note that changing the account ID will force a new resource.
        :param pulumi.Input['ServiceLevelEventsValidEventsArgs'] valid_events: The definition of valid requests.
        :param pulumi.Input['ServiceLevelEventsBadEventsArgs'] bad_events: The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.
        :param pulumi.Input['ServiceLevelEventsGoodEventsArgs'] good_events: The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "valid_events", valid_events)
        if bad_events is not None:
            pulumi.set(__self__, "bad_events", bad_events)
        if good_events is not None:
            pulumi.set(__self__, "good_events", good_events)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        """
        The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,
        and that contains the NRDB data for the SLI/SLO calculations. Note that changing the account ID will force a new resource.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="validEvents")
    def valid_events(self) -> pulumi.Input['ServiceLevelEventsValidEventsArgs']:
        """
        The definition of valid requests.
        """
        return pulumi.get(self, "valid_events")

    @valid_events.setter
    def valid_events(self, value: pulumi.Input['ServiceLevelEventsValidEventsArgs']):
        pulumi.set(self, "valid_events", value)

    @property
    @pulumi.getter(name="badEvents")
    def bad_events(self) -> Optional[pulumi.Input['ServiceLevelEventsBadEventsArgs']]:
        """
        The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.
        """
        return pulumi.get(self, "bad_events")

    @bad_events.setter
    def bad_events(self, value: Optional[pulumi.Input['ServiceLevelEventsBadEventsArgs']]):
        pulumi.set(self, "bad_events", value)

    @property
    @pulumi.getter(name="goodEvents")
    def good_events(self) -> Optional[pulumi.Input['ServiceLevelEventsGoodEventsArgs']]:
        """
        The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.
        """
        return pulumi.get(self, "good_events")

    @good_events.setter
    def good_events(self, value: Optional[pulumi.Input['ServiceLevelEventsGoodEventsArgs']]):
        pulumi.set(self, "good_events", value)


if not MYPY:
    class ServiceLevelEventsBadEventsArgsDict(TypedDict):
        from_: pulumi.Input[str]
        """
        The event type where NRDB data will be fetched from.
        """
        select: NotRequired[pulumi.Input['ServiceLevelEventsBadEventsSelectArgsDict']]
        """
        The NRQL SELECT clause to aggregate events.
        """
        where: NotRequired[pulumi.Input[str]]
        """
        A filter that narrows down the NRDB events just to those that are considered bad responses (e.g, those that refer to
        a particular entity and returned an error).
        """
elif False:
    ServiceLevelEventsBadEventsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLevelEventsBadEventsArgs:
    def __init__(__self__, *,
                 from_: pulumi.Input[str],
                 select: Optional[pulumi.Input['ServiceLevelEventsBadEventsSelectArgs']] = None,
                 where: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_: The event type where NRDB data will be fetched from.
        :param pulumi.Input['ServiceLevelEventsBadEventsSelectArgs'] select: The NRQL SELECT clause to aggregate events.
        :param pulumi.Input[str] where: A filter that narrows down the NRDB events just to those that are considered bad responses (e.g, those that refer to
               a particular entity and returned an error).
        """
        pulumi.set(__self__, "from_", from_)
        if select is not None:
            pulumi.set(__self__, "select", select)
        if where is not None:
            pulumi.set(__self__, "where", where)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Input[str]:
        """
        The event type where NRDB data will be fetched from.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def select(self) -> Optional[pulumi.Input['ServiceLevelEventsBadEventsSelectArgs']]:
        """
        The NRQL SELECT clause to aggregate events.
        """
        return pulumi.get(self, "select")

    @select.setter
    def select(self, value: Optional[pulumi.Input['ServiceLevelEventsBadEventsSelectArgs']]):
        pulumi.set(self, "select", value)

    @property
    @pulumi.getter
    def where(self) -> Optional[pulumi.Input[str]]:
        """
        A filter that narrows down the NRDB events just to those that are considered bad responses (e.g, those that refer to
        a particular entity and returned an error).
        """
        return pulumi.get(self, "where")

    @where.setter
    def where(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "where", value)


if not MYPY:
    class ServiceLevelEventsBadEventsSelectArgsDict(TypedDict):
        function: pulumi.Input[str]
        """
        The function to use in the SELECT clause. Valid values are `COUNT`, `SUM`, `GET_FIELD`, and `GET_CDF_COUNT`.
        """
        attribute: NotRequired[pulumi.Input[str]]
        """
        The event attribute to use in the SELECT clause.
        """
        threshold: NotRequired[pulumi.Input[float]]
        """
        Limit for values to be counter by `GET_CDF_COUNT` function.
        """
elif False:
    ServiceLevelEventsBadEventsSelectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLevelEventsBadEventsSelectArgs:
    def __init__(__self__, *,
                 function: pulumi.Input[str],
                 attribute: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] function: The function to use in the SELECT clause. Valid values are `COUNT`, `SUM`, `GET_FIELD`, and `GET_CDF_COUNT`.
        :param pulumi.Input[str] attribute: The event attribute to use in the SELECT clause.
        :param pulumi.Input[float] threshold: Limit for values to be counter by `GET_CDF_COUNT` function.
        """
        pulumi.set(__self__, "function", function)
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def function(self) -> pulumi.Input[str]:
        """
        The function to use in the SELECT clause. Valid values are `COUNT`, `SUM`, `GET_FIELD`, and `GET_CDF_COUNT`.
        """
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: pulumi.Input[str]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        """
        The event attribute to use in the SELECT clause.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Limit for values to be counter by `GET_CDF_COUNT` function.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "threshold", value)


if not MYPY:
    class ServiceLevelEventsGoodEventsArgsDict(TypedDict):
        from_: pulumi.Input[str]
        """
        The event type where NRDB data will be fetched from.
        """
        select: NotRequired[pulumi.Input['ServiceLevelEventsGoodEventsSelectArgsDict']]
        """
        The NRQL SELECT clause to aggregate events.
        """
        where: NotRequired[pulumi.Input[str]]
        """
        A filter that narrows down the NRDB events just to those that are considered good responses (e.g, those that refer to
        a particular entity and were successful).
        """
elif False:
    ServiceLevelEventsGoodEventsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLevelEventsGoodEventsArgs:
    def __init__(__self__, *,
                 from_: pulumi.Input[str],
                 select: Optional[pulumi.Input['ServiceLevelEventsGoodEventsSelectArgs']] = None,
                 where: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_: The event type where NRDB data will be fetched from.
        :param pulumi.Input['ServiceLevelEventsGoodEventsSelectArgs'] select: The NRQL SELECT clause to aggregate events.
        :param pulumi.Input[str] where: A filter that narrows down the NRDB events just to those that are considered good responses (e.g, those that refer to
               a particular entity and were successful).
        """
        pulumi.set(__self__, "from_", from_)
        if select is not None:
            pulumi.set(__self__, "select", select)
        if where is not None:
            pulumi.set(__self__, "where", where)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Input[str]:
        """
        The event type where NRDB data will be fetched from.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def select(self) -> Optional[pulumi.Input['ServiceLevelEventsGoodEventsSelectArgs']]:
        """
        The NRQL SELECT clause to aggregate events.
        """
        return pulumi.get(self, "select")

    @select.setter
    def select(self, value: Optional[pulumi.Input['ServiceLevelEventsGoodEventsSelectArgs']]):
        pulumi.set(self, "select", value)

    @property
    @pulumi.getter
    def where(self) -> Optional[pulumi.Input[str]]:
        """
        A filter that narrows down the NRDB events just to those that are considered good responses (e.g, those that refer to
        a particular entity and were successful).
        """
        return pulumi.get(self, "where")

    @where.setter
    def where(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "where", value)


if not MYPY:
    class ServiceLevelEventsGoodEventsSelectArgsDict(TypedDict):
        function: pulumi.Input[str]
        """
        The function to use in the SELECT clause. Valid values are `COUNT`, `SUM`, `GET_FIELD`, and `GET_CDF_COUNT`.
        """
        attribute: NotRequired[pulumi.Input[str]]
        """
        The event attribute to use in the SELECT clause.
        """
        threshold: NotRequired[pulumi.Input[float]]
        """
        Limit for values to be counter by `GET_CDF_COUNT` function.
        """
elif False:
    ServiceLevelEventsGoodEventsSelectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLevelEventsGoodEventsSelectArgs:
    def __init__(__self__, *,
                 function: pulumi.Input[str],
                 attribute: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] function: The function to use in the SELECT clause. Valid values are `COUNT`, `SUM`, `GET_FIELD`, and `GET_CDF_COUNT`.
        :param pulumi.Input[str] attribute: The event attribute to use in the SELECT clause.
        :param pulumi.Input[float] threshold: Limit for values to be counter by `GET_CDF_COUNT` function.
        """
        pulumi.set(__self__, "function", function)
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def function(self) -> pulumi.Input[str]:
        """
        The function to use in the SELECT clause. Valid values are `COUNT`, `SUM`, `GET_FIELD`, and `GET_CDF_COUNT`.
        """
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: pulumi.Input[str]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        """
        The event attribute to use in the SELECT clause.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Limit for values to be counter by `GET_CDF_COUNT` function.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "threshold", value)


if not MYPY:
    class ServiceLevelEventsValidEventsArgsDict(TypedDict):
        from_: pulumi.Input[str]
        """
        The event type where NRDB data will be fetched from.
        """
        select: NotRequired[pulumi.Input['ServiceLevelEventsValidEventsSelectArgsDict']]
        """
        The NRQL SELECT clause to aggregate events.
        """
        where: NotRequired[pulumi.Input[str]]
        """
        A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
        """
elif False:
    ServiceLevelEventsValidEventsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLevelEventsValidEventsArgs:
    def __init__(__self__, *,
                 from_: pulumi.Input[str],
                 select: Optional[pulumi.Input['ServiceLevelEventsValidEventsSelectArgs']] = None,
                 where: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_: The event type where NRDB data will be fetched from.
        :param pulumi.Input['ServiceLevelEventsValidEventsSelectArgs'] select: The NRQL SELECT clause to aggregate events.
        :param pulumi.Input[str] where: A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
        """
        pulumi.set(__self__, "from_", from_)
        if select is not None:
            pulumi.set(__self__, "select", select)
        if where is not None:
            pulumi.set(__self__, "where", where)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Input[str]:
        """
        The event type where NRDB data will be fetched from.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def select(self) -> Optional[pulumi.Input['ServiceLevelEventsValidEventsSelectArgs']]:
        """
        The NRQL SELECT clause to aggregate events.
        """
        return pulumi.get(self, "select")

    @select.setter
    def select(self, value: Optional[pulumi.Input['ServiceLevelEventsValidEventsSelectArgs']]):
        pulumi.set(self, "select", value)

    @property
    @pulumi.getter
    def where(self) -> Optional[pulumi.Input[str]]:
        """
        A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
        """
        return pulumi.get(self, "where")

    @where.setter
    def where(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "where", value)


if not MYPY:
    class ServiceLevelEventsValidEventsSelectArgsDict(TypedDict):
        function: pulumi.Input[str]
        """
        The function to use in the SELECT clause. Valid values are `COUNT`, `SUM`, `GET_FIELD`, and `GET_CDF_COUNT`.
        """
        attribute: NotRequired[pulumi.Input[str]]
        """
        The event attribute to use in the SELECT clause.
        """
        threshold: NotRequired[pulumi.Input[float]]
        """
        Limit for values to be counter by `GET_CDF_COUNT` function.
        """
elif False:
    ServiceLevelEventsValidEventsSelectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLevelEventsValidEventsSelectArgs:
    def __init__(__self__, *,
                 function: pulumi.Input[str],
                 attribute: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] function: The function to use in the SELECT clause. Valid values are `COUNT`, `SUM`, `GET_FIELD`, and `GET_CDF_COUNT`.
        :param pulumi.Input[str] attribute: The event attribute to use in the SELECT clause.
        :param pulumi.Input[float] threshold: Limit for values to be counter by `GET_CDF_COUNT` function.
        """
        pulumi.set(__self__, "function", function)
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def function(self) -> pulumi.Input[str]:
        """
        The function to use in the SELECT clause. Valid values are `COUNT`, `SUM`, `GET_FIELD`, and `GET_CDF_COUNT`.
        """
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: pulumi.Input[str]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        """
        The event attribute to use in the SELECT clause.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Limit for values to be counter by `GET_CDF_COUNT` function.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "threshold", value)


if not MYPY:
    class ServiceLevelObjectiveArgsDict(TypedDict):
        target: pulumi.Input[float]
        """
        The target of the objective, valid values between `0` and `100`. Up to 5 decimals accepted.
        """
        time_window: pulumi.Input['ServiceLevelObjectiveTimeWindowArgsDict']
        """
        Time window is the period of the objective.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the SLI.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        A short name for the SLI that will help anyone understand what it is about.
        """
elif False:
    ServiceLevelObjectiveArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLevelObjectiveArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[float],
                 time_window: pulumi.Input['ServiceLevelObjectiveTimeWindowArgs'],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] target: The target of the objective, valid values between `0` and `100`. Up to 5 decimals accepted.
        :param pulumi.Input['ServiceLevelObjectiveTimeWindowArgs'] time_window: Time window is the period of the objective.
        :param pulumi.Input[str] description: The description of the SLI.
        :param pulumi.Input[str] name: A short name for the SLI that will help anyone understand what it is about.
        """
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "time_window", time_window)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[float]:
        """
        The target of the objective, valid values between `0` and `100`. Up to 5 decimals accepted.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[float]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="timeWindow")
    def time_window(self) -> pulumi.Input['ServiceLevelObjectiveTimeWindowArgs']:
        """
        Time window is the period of the objective.
        """
        return pulumi.get(self, "time_window")

    @time_window.setter
    def time_window(self, value: pulumi.Input['ServiceLevelObjectiveTimeWindowArgs']):
        pulumi.set(self, "time_window", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the SLI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A short name for the SLI that will help anyone understand what it is about.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ServiceLevelObjectiveTimeWindowArgsDict(TypedDict):
        rolling: pulumi.Input['ServiceLevelObjectiveTimeWindowRollingArgsDict']
        """
        Rolling window.
        """
elif False:
    ServiceLevelObjectiveTimeWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLevelObjectiveTimeWindowArgs:
    def __init__(__self__, *,
                 rolling: pulumi.Input['ServiceLevelObjectiveTimeWindowRollingArgs']):
        """
        :param pulumi.Input['ServiceLevelObjectiveTimeWindowRollingArgs'] rolling: Rolling window.
        """
        pulumi.set(__self__, "rolling", rolling)

    @property
    @pulumi.getter
    def rolling(self) -> pulumi.Input['ServiceLevelObjectiveTimeWindowRollingArgs']:
        """
        Rolling window.
        """
        return pulumi.get(self, "rolling")

    @rolling.setter
    def rolling(self, value: pulumi.Input['ServiceLevelObjectiveTimeWindowRollingArgs']):
        pulumi.set(self, "rolling", value)


if not MYPY:
    class ServiceLevelObjectiveTimeWindowRollingArgsDict(TypedDict):
        count: pulumi.Input[int]
        """
        Valid values are `1`, `7` and `28`.
        """
        unit: pulumi.Input[str]
        """
        The only supported value is `DAY`.
        """
elif False:
    ServiceLevelObjectiveTimeWindowRollingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLevelObjectiveTimeWindowRollingArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 unit: pulumi.Input[str]):
        """
        :param pulumi.Input[int] count: Valid values are `1`, `7` and `28`.
        :param pulumi.Input[str] unit: The only supported value is `DAY`.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        Valid values are `1`, `7` and `28`.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        The only supported value is `DAY`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class WorkflowDestinationArgsDict(TypedDict):
        channel_id: pulumi.Input[str]
        """
        (Required) Destination's channel id.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name of the workflow.
        """
        notification_triggers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of triggers to notify about in this destination configuration.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        (Required) The type of the destination. One of: (EMAIL, EVENT_BRIDGE, PAGERDUTY_ACCOUNT_INTEGRATION, PAGERDUTY_SERVICE_INTEGRATION, SERVICE_NOW, SERVICE_NOW_APP, WEBHOOK, MOBILE_PUSH, SLACK, JIRA).
        """
        update_original_message: NotRequired[pulumi.Input[bool]]
        """
        Update original notification message (Slack channels only)
        """
elif False:
    WorkflowDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowDestinationArgs:
    def __init__(__self__, *,
                 channel_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 notification_triggers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 update_original_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] channel_id: (Required) Destination's channel id.
        :param pulumi.Input[str] name: The name of the workflow.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notification_triggers: List of triggers to notify about in this destination configuration.
        :param pulumi.Input[str] type: (Required) The type of the destination. One of: (EMAIL, EVENT_BRIDGE, PAGERDUTY_ACCOUNT_INTEGRATION, PAGERDUTY_SERVICE_INTEGRATION, SERVICE_NOW, SERVICE_NOW_APP, WEBHOOK, MOBILE_PUSH, SLACK, JIRA).
        :param pulumi.Input[bool] update_original_message: Update original notification message (Slack channels only)
        """
        pulumi.set(__self__, "channel_id", channel_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_triggers is not None:
            pulumi.set(__self__, "notification_triggers", notification_triggers)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if update_original_message is not None:
            pulumi.set(__self__, "update_original_message", update_original_message)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Input[str]:
        """
        (Required) Destination's channel id.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the workflow.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationTriggers")
    def notification_triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of triggers to notify about in this destination configuration.
        """
        return pulumi.get(self, "notification_triggers")

    @notification_triggers.setter
    def notification_triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "notification_triggers", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The type of the destination. One of: (EMAIL, EVENT_BRIDGE, PAGERDUTY_ACCOUNT_INTEGRATION, PAGERDUTY_SERVICE_INTEGRATION, SERVICE_NOW, SERVICE_NOW_APP, WEBHOOK, MOBILE_PUSH, SLACK, JIRA).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updateOriginalMessage")
    def update_original_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Update original notification message (Slack channels only)
        """
        return pulumi.get(self, "update_original_message")

    @update_original_message.setter
    def update_original_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_original_message", value)


if not MYPY:
    class WorkflowEnrichmentsArgsDict(TypedDict):
        nrqls: pulumi.Input[Sequence[pulumi.Input['WorkflowEnrichmentsNrqlArgsDict']]]
        """
        (Required) Nrql type Enrichments.
        """
elif False:
    WorkflowEnrichmentsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowEnrichmentsArgs:
    def __init__(__self__, *,
                 nrqls: pulumi.Input[Sequence[pulumi.Input['WorkflowEnrichmentsNrqlArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkflowEnrichmentsNrqlArgs']]] nrqls: (Required) Nrql type Enrichments.
        """
        pulumi.set(__self__, "nrqls", nrqls)

    @property
    @pulumi.getter
    def nrqls(self) -> pulumi.Input[Sequence[pulumi.Input['WorkflowEnrichmentsNrqlArgs']]]:
        """
        (Required) Nrql type Enrichments.
        """
        return pulumi.get(self, "nrqls")

    @nrqls.setter
    def nrqls(self, value: pulumi.Input[Sequence[pulumi.Input['WorkflowEnrichmentsNrqlArgs']]]):
        pulumi.set(self, "nrqls", value)


if not MYPY:
    class WorkflowEnrichmentsNrqlArgsDict(TypedDict):
        configurations: pulumi.Input[Sequence[pulumi.Input['WorkflowEnrichmentsNrqlConfigurationArgsDict']]]
        """
        A set of key-value pairs to represent a enrichment configuration.
        """
        name: pulumi.Input[str]
        """
        The name of the workflow.
        """
        account_id: NotRequired[pulumi.Input[str]]
        """
        Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.
        """
        enrichment_id: NotRequired[pulumi.Input[str]]
        """
        Enrichment's id.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of the enrichment. One of: (NRQL).
        """
elif False:
    WorkflowEnrichmentsNrqlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowEnrichmentsNrqlArgs:
    def __init__(__self__, *,
                 configurations: pulumi.Input[Sequence[pulumi.Input['WorkflowEnrichmentsNrqlConfigurationArgs']]],
                 name: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None,
                 enrichment_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkflowEnrichmentsNrqlConfigurationArgs']]] configurations: A set of key-value pairs to represent a enrichment configuration.
        :param pulumi.Input[str] name: The name of the workflow.
        :param pulumi.Input[str] account_id: Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.
        :param pulumi.Input[str] enrichment_id: Enrichment's id.
        :param pulumi.Input[str] type: The type of the enrichment. One of: (NRQL).
        """
        pulumi.set(__self__, "configurations", configurations)
        pulumi.set(__self__, "name", name)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if enrichment_id is not None:
            pulumi.set(__self__, "enrichment_id", enrichment_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def configurations(self) -> pulumi.Input[Sequence[pulumi.Input['WorkflowEnrichmentsNrqlConfigurationArgs']]]:
        """
        A set of key-value pairs to represent a enrichment configuration.
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: pulumi.Input[Sequence[pulumi.Input['WorkflowEnrichmentsNrqlConfigurationArgs']]]):
        pulumi.set(self, "configurations", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the workflow.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="enrichmentId")
    def enrichment_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enrichment's id.
        """
        return pulumi.get(self, "enrichment_id")

    @enrichment_id.setter
    def enrichment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enrichment_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the enrichment. One of: (NRQL).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class WorkflowEnrichmentsNrqlConfigurationArgsDict(TypedDict):
        query: pulumi.Input[str]
        """
        enrichment's NRQL query
        """
elif False:
    WorkflowEnrichmentsNrqlConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowEnrichmentsNrqlConfigurationArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: enrichment's NRQL query
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        enrichment's NRQL query
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


if not MYPY:
    class WorkflowIssuesFilterArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        (Required) Filter's name.
        """
        type: pulumi.Input[str]
        """
        Type of the filter. Please just set this field to `FILTER`. The field is likely to be deprecated/removed in the near future.
        """
        filter_id: NotRequired[pulumi.Input[str]]
        """
        filter id.
        """
        predicates: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkflowIssuesFilterPredicateArgsDict']]]]
        """
        A condition an issue event should satisfy to be processed by the workflow
        """
elif False:
    WorkflowIssuesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowIssuesFilterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 filter_id: Optional[pulumi.Input[str]] = None,
                 predicates: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowIssuesFilterPredicateArgs']]]] = None):
        """
        :param pulumi.Input[str] name: (Required) Filter's name.
        :param pulumi.Input[str] type: Type of the filter. Please just set this field to `FILTER`. The field is likely to be deprecated/removed in the near future.
        :param pulumi.Input[str] filter_id: filter id.
        :param pulumi.Input[Sequence[pulumi.Input['WorkflowIssuesFilterPredicateArgs']]] predicates: A condition an issue event should satisfy to be processed by the workflow
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if filter_id is not None:
            pulumi.set(__self__, "filter_id", filter_id)
        if predicates is not None:
            pulumi.set(__self__, "predicates", predicates)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Required) Filter's name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the filter. Please just set this field to `FILTER`. The field is likely to be deprecated/removed in the near future.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> Optional[pulumi.Input[str]]:
        """
        filter id.
        """
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter
    def predicates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowIssuesFilterPredicateArgs']]]]:
        """
        A condition an issue event should satisfy to be processed by the workflow
        """
        return pulumi.get(self, "predicates")

    @predicates.setter
    def predicates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowIssuesFilterPredicateArgs']]]]):
        pulumi.set(self, "predicates", value)


if not MYPY:
    class WorkflowIssuesFilterPredicateArgsDict(TypedDict):
        attribute: pulumi.Input[str]
        """
        Issue event attribute to check
        """
        operator: pulumi.Input[str]
        """
        An operator to use to compare the attribute with the provided `values`, see supported operators below
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        The `attribute` must match **any** of the values in this list
        """
elif False:
    WorkflowIssuesFilterPredicateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkflowIssuesFilterPredicateArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] attribute: Issue event attribute to check
        :param pulumi.Input[str] operator: An operator to use to compare the attribute with the provided `values`, see supported operators below
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: The `attribute` must match **any** of the values in this list
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        """
        Issue event attribute to check
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        An operator to use to compare the attribute with the provided `values`, see supported operators below
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The `attribute` must match **any** of the values in this list
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetEntityTagArgsDict(TypedDict):
        key: str
        """
        The tag key.
        """
        value: str
        """
        The tag value.
        """
elif False:
    GetEntityTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetEntityTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The tag key.
        :param str value: The tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The tag key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The tag value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetNotificationDestinationSecureUrlArgsDict(TypedDict):
        prefix: str
elif False:
    GetNotificationDestinationSecureUrlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetNotificationDestinationSecureUrlArgs:
    def __init__(__self__, *,
                 prefix: str):
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: str):
        pulumi.set(self, "prefix", value)


