# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class EventsToMetricsRule(pulumi.CustomResource):
    account_id: pulumi.Output[float]
    """
    Account with the event and where the metrics will be put.
    """
    description: pulumi.Output[str]
    """
    Provides additional information about the rule.
    """
    enabled: pulumi.Output[bool]
    """
    True means this rule is enabled. False means the rule is currently not creating metrics.
    """
    name: pulumi.Output[str]
    """
    The name of the rule. This must be unique within an account.
    """
    nrql: pulumi.Output[str]
    """
    Explains how to create metrics from events.
    """
    rule_id: pulumi.Output[str]
    """
    The id, uniquely identifying the rule.
    """
    def __init__(__self__, resource_name, opts=None, account_id=None, description=None, enabled=None, name=None, nrql=None, __props__=None, __name__=None, __opts__=None):
        """
        Use this resource to create, update, and delete New Relic Events to Metrics rules.



        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] account_id: Account with the event and where the metrics will be put.
        :param pulumi.Input[str] description: Provides additional information about the rule.
        :param pulumi.Input[bool] enabled: True means this rule is enabled. False means the rule is currently not creating metrics.
        :param pulumi.Input[str] name: The name of the rule. This must be unique within an account.
        :param pulumi.Input[str] nrql: Explains how to create metrics from events.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if account_id is None:
                raise TypeError("Missing required property 'account_id'")
            __props__['account_id'] = account_id
            __props__['description'] = description
            __props__['enabled'] = enabled
            __props__['name'] = name
            if nrql is None:
                raise TypeError("Missing required property 'nrql'")
            __props__['nrql'] = nrql
            __props__['rule_id'] = None
        super(EventsToMetricsRule, __self__).__init__(
            'newrelic:index/eventsToMetricsRule:EventsToMetricsRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, account_id=None, description=None, enabled=None, name=None, nrql=None, rule_id=None):
        """
        Get an existing EventsToMetricsRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] account_id: Account with the event and where the metrics will be put.
        :param pulumi.Input[str] description: Provides additional information about the rule.
        :param pulumi.Input[bool] enabled: True means this rule is enabled. False means the rule is currently not creating metrics.
        :param pulumi.Input[str] name: The name of the rule. This must be unique within an account.
        :param pulumi.Input[str] nrql: Explains how to create metrics from events.
        :param pulumi.Input[str] rule_id: The id, uniquely identifying the rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["account_id"] = account_id
        __props__["description"] = description
        __props__["enabled"] = enabled
        __props__["name"] = name
        __props__["nrql"] = nrql
        __props__["rule_id"] = rule_id
        return EventsToMetricsRule(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

