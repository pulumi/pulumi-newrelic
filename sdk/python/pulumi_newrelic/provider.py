# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Provider(pulumi.ProviderResource):
    def __init__(__self__, resource_name, opts=None, account_id=None, admin_api_key=None, api_key=None, api_url=None, cacert_file=None, infrastructure_api_url=None, insecure_skip_verify=None, insights_insert_key=None, insights_insert_url=None, insights_query_key=None, insights_query_url=None, nerdgraph_api_url=None, region=None, synthetics_api_url=None, __props__=None, __name__=None, __opts__=None):
        """
        The provider type for the newrelic package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] region: The data center for which your New Relic account is configured. Only one region per provider block is permitted.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if account_id is None:
                account_id = utilities.get_env_int('NEW_RELIC_ACCOUNT_ID')
            __props__['account_id'] = pulumi.Output.from_input(account_id).apply(json.dumps) if account_id is not None else None
            if admin_api_key is None:
                admin_api_key = utilities.get_env('NEW_RELIC_ADMIN_API_KEY')
            __props__['admin_api_key'] = admin_api_key
            if api_key is None:
                api_key = utilities.get_env('NEW_RELIC_API_KEY')
            __props__['api_key'] = api_key
            if api_url is not None:
                warnings.warn("New Relic internal use only. API URLs are now configured based on the configured region.", DeprecationWarning)
                pulumi.log.warn("api_url is deprecated: New Relic internal use only. API URLs are now configured based on the configured region.")
            __props__['api_url'] = api_url
            if cacert_file is None:
                cacert_file = utilities.get_env('NEW_RELIC_API_CACERT')
            __props__['cacert_file'] = cacert_file
            if infrastructure_api_url is not None:
                warnings.warn("New Relic internal use only. API URLs are now configured based on the configured region.", DeprecationWarning)
                pulumi.log.warn("infrastructure_api_url is deprecated: New Relic internal use only. API URLs are now configured based on the configured region.")
            __props__['infrastructure_api_url'] = infrastructure_api_url
            if insecure_skip_verify is None:
                insecure_skip_verify = utilities.get_env_bool('NEW_RELIC_API_SKIP_VERIFY')
            __props__['insecure_skip_verify'] = pulumi.Output.from_input(insecure_skip_verify).apply(json.dumps) if insecure_skip_verify is not None else None
            if insights_insert_key is None:
                insights_insert_key = utilities.get_env('NEW_RELIC_INSIGHTS_INSERT_KEY')
            __props__['insights_insert_key'] = insights_insert_key
            if insights_insert_url is None:
                insights_insert_url = (utilities.get_env('NEW_RELIC_INSIGHTS_INSERT_URL') or 'https://insights-collector.newrelic.com/v1/accounts')
            __props__['insights_insert_url'] = insights_insert_url
            if insights_query_key is None:
                insights_query_key = utilities.get_env('NEW_RELIC_INSIGHTS_QUERY_KEY')
            __props__['insights_query_key'] = insights_query_key
            if insights_query_url is None:
                insights_query_url = (utilities.get_env('NEW_RELIC_INSIGHTS_QUERY_URL') or 'https://insights-api.newrelic.com/v1/accounts')
            __props__['insights_query_url'] = insights_query_url
            if nerdgraph_api_url is not None:
                warnings.warn("New Relic internal use only. API URLs are now configured based on the configured region.", DeprecationWarning)
                pulumi.log.warn("nerdgraph_api_url is deprecated: New Relic internal use only. API URLs are now configured based on the configured region.")
            __props__['nerdgraph_api_url'] = nerdgraph_api_url
            if region is None:
                region = (utilities.get_env('NEW_RELIC_REGION') or 'US')
            __props__['region'] = region
            if synthetics_api_url is not None:
                warnings.warn("New Relic internal use only. API URLs are now configured based on the configured region.", DeprecationWarning)
                pulumi.log.warn("synthetics_api_url is deprecated: New Relic internal use only. API URLs are now configured based on the configured region.")
            __props__['synthetics_api_url'] = synthetics_api_url
        super(Provider, __self__).__init__(
            'newrelic',
            resource_name,
            __props__,
            opts)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

