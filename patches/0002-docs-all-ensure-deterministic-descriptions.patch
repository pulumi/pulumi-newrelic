From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ian Wahbe <ian@wahbe.com>
Date: Tue, 23 Apr 2024 12:39:04 -0700
Subject: [PATCH] docs(all): ensure deterministic descriptions


diff --git a/newrelic/description.go b/newrelic/description.go
new file mode 100644
index 00000000..c8b41264
--- /dev/null
+++ b/newrelic/description.go
@@ -0,0 +1,28 @@
+package newrelic
+
+import (
+	"sort"
+)
+
+// copied Go's std library (1.22.2): cmp
+type Ordered interface {
+	~int | ~int8 | ~int16 | ~int32 | ~int64 |
+		~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64 | ~uintptr |
+		~float32 | ~float64 |
+		~string
+}
+
+// A map that can yield sorted keys.
+type sortedMap[K Ordered, V any] map[K]V
+
+func (s sortedMap[K, V]) Keys() []K {
+	arr := make([]K, 0, len(s))
+	for k := range s {
+		arr = append(arr, k)
+	}
+	sort.Slice(arr, func(i, j int) bool {
+		return arr[i] < arr[j]
+	})
+
+	return arr
+}
diff --git a/newrelic/resource_newrelic_alert_channel.go b/newrelic/resource_newrelic_alert_channel.go
index de242293..f85ee824 100644
--- a/newrelic/resource_newrelic_alert_channel.go
+++ b/newrelic/resource_newrelic_alert_channel.go
@@ -13,7 +13,7 @@ import (
 	"github.com/newrelic/newrelic-client-go/v2/pkg/errors"
 )
 
-var alertChannelTypes = map[string][]string{
+var alertChannelTypes = sortedMap[string, []string]{
 	"email": {
 		"include_json_attachment",
 		"recipients",
@@ -80,8 +80,9 @@ func resourceNewRelicAlertChannel() *schema.Resource {
 				Type:         schema.TypeString,
 				Required:     true,
 				ForceNew:     true,
-				ValidateFunc: validation.StringInSlice(validAlertChannelTypes, false),
-				Description:  fmt.Sprintf("(Required) The type of channel. One of: (%s).", strings.Join(validAlertChannelTypes, ", ")),
+				ValidateFunc: validation.StringInSlice(alertChannelTypes.Keys(), false),
+				Description: fmt.Sprintf("(Required) The type of channel. One of: (%s).",
+					strings.Join(alertChannelTypes.Keys(), ", ")),
 			},
 			"config": {
 				Type:        schema.TypeList,
diff --git a/newrelic/resource_newrelic_alert_condition.go b/newrelic/resource_newrelic_alert_condition.go
index 9e5790bd..af7a5027 100644
--- a/newrelic/resource_newrelic_alert_condition.go
+++ b/newrelic/resource_newrelic_alert_condition.go
@@ -13,7 +13,7 @@ import (
 	"github.com/newrelic/newrelic-client-go/v2/pkg/errors"
 )
 
-var alertConditionTypes = map[string][]string{
+var alertConditionTypes = sortedMap[string, []string]{
 	"apm_app_metric": {
 		"apdex",
 		"error_percentage",
@@ -72,11 +72,6 @@ var alertConditionTypes = map[string][]string{
 }
 
 func resourceNewRelicAlertCondition() *schema.Resource {
-	validAlertConditionTypes := make([]string, 0, len(alertConditionTypes))
-	for k := range alertConditionTypes {
-		validAlertConditionTypes = append(validAlertConditionTypes, k)
-	}
-
 	return &schema.Resource{
 		DeprecationMessage: "The `newrelic_alert_condition` resource is deprecated and will be removed in the next major release.",
 		CreateContext:      resourceNewRelicAlertConditionCreate,
@@ -107,8 +102,9 @@ func resourceNewRelicAlertCondition() *schema.Resource {
 			"type": {
 				Type:         schema.TypeString,
 				Required:     true,
-				ValidateFunc: validation.StringInSlice(validAlertConditionTypes, false),
-				Description:  fmt.Sprintf("The type of condition. One of: (%s).", strings.Join(validAlertConditionTypes, ", ")),
+				ValidateFunc: validation.StringInSlice(alertConditionTypes.Keys(), false),
+				Description: fmt.Sprintf("The type of condition. One of: (%s).",
+					strings.Join(alertConditionTypes.Keys(), ", ")),
 			},
 			"entities": {
 				Type:        schema.TypeSet,
