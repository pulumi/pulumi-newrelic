diff --git b/.github/workflows/changelog.yml a/.github/workflows/changelog.yml
index 2b27f6d2..1c986ee3 100644
--- b/.github/workflows/changelog.yml
+++ a/.github/workflows/changelog.yml
@@ -12,7 +12,7 @@ jobs:
       - name: Install Go
         uses: actions/setup-go@v3
         with:
-          go-version: 1.19.x
+          go-version: 1.18.x
 
       - name: Add GOBIN to PATH
         run: echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
diff --git b/.github/workflows/compile.yml a/.github/workflows/compile.yml
index 4e30ea8c..b1c9a568 100644
--- b/.github/workflows/compile.yml
+++ a/.github/workflows/compile.yml
@@ -12,7 +12,7 @@ jobs:
     strategy:
       matrix:
         go-version:
-          - 1.19.x
+          - 1.18.x
         platform:
           - ubuntu-latest
           - macos-latest
diff --git b/.github/workflows/release.yml a/.github/workflows/release.yml
index bdbf10df..1f669077 100644
--- b/.github/workflows/release.yml
+++ a/.github/workflows/release.yml
@@ -17,7 +17,7 @@ jobs:
       - name: Set up Go
         uses: actions/setup-go@v3
         with:
-          go-version: 1.19
+          go-version: 1.18
 
       - name: Install PGP private key
         shell: bash
@@ -37,3 +37,4 @@ jobs:
           ./scripts/release.sh
 
           make release-publish
+
diff --git b/.github/workflows/test.yml a/.github/workflows/test.yml
index 1880bd59..febc708e 100644
--- b/.github/workflows/test.yml
+++ a/.github/workflows/test.yml
@@ -13,7 +13,7 @@ jobs:
       - name: Install Go
         uses: actions/setup-go@v3
         with:
-          go-version: 1.19.x
+          go-version: 1.18.x
 
       - name: Add GOBIN to PATH
         run: echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
@@ -52,7 +52,7 @@ jobs:
       - name: Install Go
         uses: actions/setup-go@v3
         with:
-          go-version: 1.19.x
+          go-version: 1.18.x
 
       - name: Add GOBIN to PATH
         run: echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
@@ -92,7 +92,7 @@ jobs:
       - name: Install Go
         uses: actions/setup-go@v3
         with:
-          go-version: 1.19.x
+          go-version: 1.18.x
 
       - name: Add GOBIN to PATH
         run: echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
diff --git b/.goreleaser.yml a/.goreleaser.yml
index e9806bdf..adf96cf5 100644
--- b/.goreleaser.yml
+++ a/.goreleaser.yml
@@ -21,6 +21,8 @@ builds:
   ignore:
     - goos: darwin
       goarch: '386'
+    - goos: darwin
+      goarch: arm64
     - goos: openbsd
       goarch: arm
     - goos: openbsd
diff --git b/CHANGELOG.md a/CHANGELOG.md
index 396c639e..39c41119 100644
--- b/CHANGELOG.md
+++ a/CHANGELOG.md
@@ -1,98 +1,12 @@
-<a name="v3.20.2"></a>
-## [v3.20.2] - 2023-04-07
-### Bug Fixes
-- **newrelic_nrql_alert_condition:** add default 'violation_time_limit_seconds' ([#2319](https://github.com/newrelic/terraform-provider-newrelic/issues/2319))
-
-### Documentation Updates
-- add note on 'default_values' to one_dashboard ([#2321](https://github.com/newrelic/terraform-provider-newrelic/issues/2321))
-
-<a name="v3.20.1"></a>
-## [v3.20.1] - 2023-04-05
-### Bug Fixes
-- **newrelic_api_access_key:** add info to TF docs on API Access errors ([#2302](https://github.com/newrelic/terraform-provider-newrelic/issues/2302))
-
-### Documentation Updates
-- correct references to slack webhooks in newrelic_alert_channel ([#2315](https://github.com/newrelic/terraform-provider-newrelic/issues/2315))
-- **guide:** update synthetics migration guide with correct resource reference to remove state ([#2318](https://github.com/newrelic/terraform-provider-newrelic/issues/2318))
-
-<a name="v3.20.0"></a>
-## [v3.20.0] - 2023-03-30
-### Bug Fixes
-- **newrelic_entity:** add helpers to escape single quotes in NRQL queâ€¦ ([#2295](https://github.com/newrelic/terraform-provider-newrelic/issues/2295))
-
-### Documentation Updates
-- update newrelic_synthetics_cert_check_monitor example to use correct argument. ([#2311](https://github.com/newrelic/terraform-provider-newrelic/issues/2311))
-- update docs with newrelic_account_management resource ([#2308](https://github.com/newrelic/terraform-provider-newrelic/issues/2308))
-
-### Features
-- **service_level:** add data source service_level_alert_helper ([#2298](https://github.com/newrelic/terraform-provider-newrelic/issues/2298))
-
-<a name="v3.19.0"></a>
-## [v3.19.0] - 2023-03-28
-### Documentation Updates
-- add examples to dashboard resource to demonstrate importing dashboards using GUID ([#2300](https://github.com/newrelic/terraform-provider-newrelic/issues/2300))
-
-### Features
-- **Alerts:** Expose entity_guid for legacy alert conditions ([#2301](https://github.com/newrelic/terraform-provider-newrelic/issues/2301))
-
-<a name="v3.18.1"></a>
-## [v3.18.1] - 2023-03-24
-### Bug Fixes
-- **NRQLDropRule:** Handle case where resource in state has been deleted
-
-### Documentation Updates
-- **entity:** update entity data source docs with additional entity types and examples ([#2297](https://github.com/newrelic/terraform-provider-newrelic/issues/2297))
-
-<a name="v3.18.0"></a>
-## [v3.18.0] - 2023-03-22
-### Features
-- Allow creating SL using CDF functions. ([#2293](https://github.com/newrelic/terraform-provider-newrelic/issues/2293))
-
-<a name="v3.17.1"></a>
-## [v3.17.1] - 2023-03-17
-### Bug Fixes
-- **account_management:** fixed the docs page link issue ([#2294](https://github.com/newrelic/terraform-provider-newrelic/issues/2294))
-
-<a name="v3.17.0"></a>
-## [v3.17.0] - 2023-03-16
-### Bug Fixes
-- **one_dashboard:** added raw configuration properties to one dashboard resource ([#2278](https://github.com/newrelic/terraform-provider-newrelic/issues/2278))
-
-### Documentation Updates
-- add additional example to one_dashboard_json to demonstrate setting thresholds ([#2292](https://github.com/newrelic/terraform-provider-newrelic/issues/2292))
-- add/update resources and data sources in the NR terraform registry ([#2287](https://github.com/newrelic/terraform-provider-newrelic/issues/2287))
-
-### Features
-- added account managent resource, docs, examples and test cases ([#2275](https://github.com/newrelic/terraform-provider-newrelic/issues/2275))
-
-<a name="v3.16.1"></a>
-## [v3.16.1] - 2023-03-15
-### Bug Fixes
-- **cloud:** return err when error is present or payload is nil
-
-<a name="v3.16.0"></a>
-## [v3.16.0] - 2023-03-09
-### Bug Fixes
-- **cloud:** Reset id if resource not found
-
-### Documentation Updates
-- add deprecation messages to legacy alert resources and data sources
-- **alerts:** adjustments to deprecation messages
-- **alerts:** remove deprecated evaluation_offset from examples
-
-### Features
-- **agentapplication:** add browser agent application resource ([#2262](https://github.com/newrelic/terraform-provider-newrelic/issues/2262))
-- **data_partition:** added data partition rules and tests
-
 <a name="v3.15.0"></a>
-## [v3.15.0] - 2023-02-27
+## [v3.15.0] - 2023-02-23
 ### Bug Fixes
+- **data_notification_destination:** fix data source + try to fix tests
 - **data_notification_destination:** fix naming
 - **data_notification_destination:** add missing test - small fix
 - **data_notification_destination:** add missing test
 - **data_notification_destination:** fix test
 - **data_notification_destination:** fix data source wip
-- **data_notification_destination:** fix data source + try to fix tests
 - **data_notification_destination:** fix data source - wip
 - **one_dashboard:** fix for updating with filter_current_dashboard
 
@@ -208,15 +122,15 @@
 - **destination:** unset destination ID and return nil if destination not found (prevents crash)
 - **notifications:** added deleted test
 - **notifications:** fix auth_basic bug
+- **synthetics:** set additional attribute values on import
 - **synthetics:** set verify_ssl and validation_string during read/import operations
 - **synthetics:** set period and status during read/import operations
 - **synthetics:** set period and status on update of newrelic_synthetics_script_monitor
-- **synthetics:** set additional attribute values on import
 - **workflow:** unset workflow ID and return nil if workflow not found (prevents crash)
 
 ### Documentation Updates
-- Update 'violations' to 'incidents' in Alerts docs
 - fix import command for script monitor
+- Update 'violations' to 'incidents' in Alerts docs
 - **notifications:** Updated notifications channel / destination docs to be clearer about properties
 - **obfusation_rule:** added rules docs and fixed expression docs
 - **obfuscation_expression:** Added the data source document for the expression
@@ -340,19 +254,19 @@
 <a name="v3.2.1"></a>
 ## [v3.2.1] - 2022-09-15
 ### Bug Fixes
-- **channels:** add check for read channels
 - **channels:** lint
+- **channels:** add check for read channels
 - **docs:** link to Azure cloud integration example
+- **notifications:** add missing destination types
 - **notifications:** add examples to docs
 - **notifications:** made account_id optional [#1994](https://github.com/newrelic/terraform-provider-newrelic/issues/1994)
-- **notifications:** add missing destination types
 - **simple_monitor:** [#1984](https://github.com/newrelic/terraform-provider-newrelic/issues/1984) populating uri and custom headers on input struct
-- **workflows:** add schema upgrade version
 - **workflows:** add schema upgrade version - wip
+- **workflows:** add schema upgrade version
 - **workflows:** add schema upgrade version - wip
+- **workflows:** change workflows schema
 - **workflows:** add schema upgrade version
 - **workflows:** docs small change
-- **workflows:** change workflows schema
 
 ### Documentation Updates
 - **newrelic_one_dashboard:** Fix incorrect permission value)
@@ -403,34 +317,34 @@
 <a name="v3.0.0"></a>
 ## [v3.0.0] - 2022-08-26
 ### Bug Fixes
-- **Notifications:** add update to destinations and channels + rename properties
 - **Notifications:** pr review fixes: not needed remove computes and forcenew
+- **Notifications:** add update to destinations and channels + rename properties
 - **channels:** renaming - wip
+- **channels:** fix lint
 - **channels:** add tests
 - **channels:** small renaming
-- **channels:** fix lint
-- **destinations:** general adjustments for destinations read functionality
 - **destinations:** upgrade client version
+- **destinations:** general adjustments for destinations read functionality
 - **destinations:** update docs
 - **docs:** add notifications resources to index doc
 - **newrelic_entity_tags:** extended timeout to see if it fixes not found errors
 - **notification_channel:** ignore channel not found error during terraform destroy (deleting workflow deletes channel)
-- **notifications:** add custom errors handling to notifications
-- **notifications:** fix tests -wip
+- **notifications:** add tests + update docs
 - **notifications:** fix tests
+- **notifications:** add custom errors handling to notifications
 - **notifications:** fix tests + add jira
 - **notifications:** cr changes
-- **notifications:** add tests + update docs
-- **notifications:** update docs
+- **notifications:** lint fix
 - **notifications:** add internal property
+- **notifications:** update docs
+- **notifications:** fix tests -wip
 - **notifications:** upgrade newrelic-client-go
-- **notifications:** lint fix
 - **nrql_alert_condition:** do not show diff for streaming methods when not provided and defaults are used
 - **nrql_alert_condition:** update docs and validation for 'expiration_duration'
-- **workflows:** add custom errors handling to workflows
 - **workflows:** small workflows test twick
-- **workflows:** upgrade newrelic-client-go
+- **workflows:** add custom errors handling to workflows
 - **workflows:** lint fix
+- **workflows:** upgrade newrelic-client-go
 
 ### Documentation Updates
 - add v3 migration guide
@@ -442,18 +356,18 @@
 - **synthetics:** update docs for private location data source
 
 ### Features
-- swap secure credential resource to GraphQL API
 - add new synthetics resources
+- swap secure credential resource to GraphQL API
 - **newrelic_synthetics_cert_check_monitor:** adding cert check monitor
-- **synthetics:** added private location resource
-- **synthetics:** add step monitor resource
 - **synthetics:** [wip] add broken links monitor resource
+- **synthetics:** added private location resource
 - **synthetics:** add newrelic_synthetics_script_monitor resource
 - **synthetics:** migrate monitor location data source to new GraphQL API
+- **synthetics:** add step monitor resource
+- **workflows:** add tests
+- **workflows:** add workflows resources workinggg - wip
 - **workflows:** add workflows resources - wip
 - **workflows:** add workflows resources
-- **workflows:** add workflows resources workinggg - wip
-- **workflows:** add tests
 - **workflows:** resolve conflict
 
 ### BREAKING CHANGE
@@ -637,8 +551,8 @@ new synthetics resources use GraphQL API schema
 <a name="v2.41.2"></a>
 ## [v2.41.2] - 2022-03-25
 ### Bug Fixes
-- add len check when creating cloud link accounts
 - Allow 0 values for aggregation_delay
+- add len check when creating cloud link accounts
 - Allow 0 values for aggregation_delay
 - **cloud:** add import
 - **cloud_azure_link_account:** rename client_secret_id to client_secret
@@ -704,7 +618,7 @@ new synthetics resources use GraphQL API schema
 - fixed mistakes in the Doc
 
 ### Documentation Updates
-- added gcp integration documentation
+- minor changes
 - added gcp integration documentation
 - added gcp integration documentation
 - added gcp integration documentation
@@ -712,12 +626,12 @@ new synthetics resources use GraphQL API schema
 - minor changes
 - added gcp integration documentation
 - added gcp integration documentation
-- minor changes
 - added gcp integration documentation
 - added gcp integration documentation
 - added gcp integration documentation
-- add cloud_aws_link_account resource to docs
+- added gcp integration documentation
 - update version in docs
+- add cloud_aws_link_account resource to docs
 - **servicelevel:** SLO periods now include complete weeks
 
 ### Features
@@ -937,10 +851,10 @@ new synthetics resources use GraphQL API schema
 - **OneDashboardRaw:** Update docs
 
 ### Features
+- use client method context from within resources
 - removed binary file
 - fix tests
 - 0 violation TTL for Infra Conditions returns warning
-- use client method context from within resources
 - **MonitorScript:** Add monitor script locations
 - **dashboard_raw:** add newrelic_one_dashboard_raw
 - **docs:** added documentation links to the dashboard migration guide
@@ -1174,14 +1088,14 @@ new synthetics resources use GraphQL API schema
 <a name="v2.8.0"></a>
 ## [v2.8.0] - 2020-09-30
 ### Documentation Updates
+- update infra alert condition api key type
+- update changelog
 - update development instructions for new TF version
 - DEPRECATION notice for newrelic_alert_condition
 - update supported Go information and test config
-- update infra alert condition api key type
-- update changelog
 - **README:** update provider configuration pin version examples
-- **dashboard:** add cross-account example
 - **dashboard:** update docs with info regarding widget.account_id and cross-account widgets
+- **dashboard:** add cross-account example
 
 ### Features
 - **dashboard:** support cross-account widgets :)
@@ -1335,12 +1249,12 @@ new synthetics resources use GraphQL API schema
 - **alerts:** improve nil handling for alert_channel
 
 ### Documentation Updates
+- **provider:** additional v2 updates, migration guide updates
 - **provider:** add getting started guide to the quick links
 - **provider:** fix incorrect newrelic_application reference in some examples
 - **provider:** add account_id to argument reference, move argument reference above the fold
 - **provider:** add environment variables and schema attribute table
 - **provider:** update getting started example to reflect v2 updates
-- **provider:** additional v2 updates, migration guide updates
 - **readme:** update title, add link to latest documentation
 
 <a name="v2.1.1"></a>
@@ -1363,30 +1277,30 @@ new synthetics resources use GraphQL API schema
 - Require condition_scope = `instance` for validation_close_timer
 - Add validation to newrelic_alert_condtion condition_scope
 - **alerts:** remove DiffSuppressFunc on TypeSet to avoid test drift
-- **alerts:** handle a nil reference with more grace
 - **alerts:** infra alert condition zero value detection
+- **alerts:** handle a nil reference with more grace
 - **application_settings:** Remove delete, as it is not possible
 - **deps:** Revert terraform sdk to 1.10.0
 - **newrelic:** fix the failing integration tests ([#519](https://github.com/newrelic/terraform-provider-newrelic/issues/519))
 - **nrql_alert_condition:** threshold_occurrences is case insensitive, attribute description updates
 
 ### Documentation Updates
-- update API key references to match desires
-- prep for v2.x, isolate v1.x docs
+- add callout to top of each v1.x doc page
+- tidy up after review
 - DEPRECATION notice for 1.x
 - update index header with improved words
-- include v1 index.html in sidebar
+- update getting started guide to reference new material
 - update README with new pointers
-- tidy up after review
 - add table for current endpoint in use per resource
-- update getting started guide to reference new material
-- add callout to top of each v1.x doc page
 - include documentation about upgrading the provider to 2.x
+- update API key references to match desires
+- include v1 index.html in sidebar
+- prep for v2.x, isolate v1.x docs
 - **alert_channel:** fix broken 'nested config' anchor link
-- **alerts:** update examples to reflect deprecation
+- **alerts:** include caveat about NRQL alerts condition operator usage with outliers
 - **alerts:** update wording to avoid implementation details
 - **alerts:** include deprecation notice for "terms"
-- **alerts:** include caveat about NRQL alerts condition operator usage with outliers
+- **alerts:** update examples to reflect deprecation
 - **getting started:** fix resource naming
 - **nrql_alert_condition:** add outlier example, add new attributes, deprecate old attributes, update import section
 - **nrql_alert_condition:** update docs to reflect version 2.0 changes
@@ -1799,17 +1713,7 @@ new synthetics resources use GraphQL API schema
 ## [v0.1.1] - 2017-08-02
 <a name="v0.1.0"></a>
 ## v0.1.0 - 2017-06-21
-[Unreleased]: https://github.com/newrelic/terraform-provider-newrelic/compare/v3.20.2...HEAD
-[v3.20.2]: https://github.com/newrelic/terraform-provider-newrelic/compare/v3.20.1...v3.20.2
-[v3.20.1]: https://github.com/newrelic/terraform-provider-newrelic/compare/v3.20.0...v3.20.1
-[v3.20.0]: https://github.com/newrelic/terraform-provider-newrelic/compare/v3.19.0...v3.20.0
-[v3.19.0]: https://github.com/newrelic/terraform-provider-newrelic/compare/v3.18.1...v3.19.0
-[v3.18.1]: https://github.com/newrelic/terraform-provider-newrelic/compare/v3.18.0...v3.18.1
-[v3.18.0]: https://github.com/newrelic/terraform-provider-newrelic/compare/v3.17.1...v3.18.0
-[v3.17.1]: https://github.com/newrelic/terraform-provider-newrelic/compare/v3.17.0...v3.17.1
-[v3.17.0]: https://github.com/newrelic/terraform-provider-newrelic/compare/v3.16.1...v3.17.0
-[v3.16.1]: https://github.com/newrelic/terraform-provider-newrelic/compare/v3.16.0...v3.16.1
-[v3.16.0]: https://github.com/newrelic/terraform-provider-newrelic/compare/v3.15.0...v3.16.0
+[Unreleased]: https://github.com/newrelic/terraform-provider-newrelic/compare/v3.15.0...HEAD
 [v3.15.0]: https://github.com/newrelic/terraform-provider-newrelic/compare/v3.14.0...v3.15.0
 [v3.14.0]: https://github.com/newrelic/terraform-provider-newrelic/compare/v3.13.0...v3.14.0
 [v3.13.0]: https://github.com/newrelic/terraform-provider-newrelic/compare/v3.12.0...v3.13.0
diff --git b/build/test.mk a/build/test.mk
index 7784e700..e8da3e5b 100644
--- b/build/test.mk
+++ a/build/test.mk
@@ -26,13 +26,13 @@ test-unit: tools
 	@echo "=== $(PROJECT_NAME) === [ test-unit        ]: running unit tests..."
 	@mkdir -p $(COVERAGE_DIR)
 	@$(TEST_RUNNER) -f testname --junitfile $(COVERAGE_DIR)/unit.xml --packages "$(GO_PKGS)" \
-		-- -v -parallel 10 -tags=unit $(TEST_ARGS) -covermode=$(COVERMODE) -coverprofile $(COVERAGE_DIR)/unit.tmp
+		-- -v -parallel 4 -tags=unit $(TEST_ARGS) -covermode=$(COVERMODE) -coverprofile $(COVERAGE_DIR)/unit.tmp
 
 test-integration: tools
 	@echo "=== $(PROJECT_NAME) === [ test-integration ]: running integration tests..."
 	@mkdir -p $(COVERAGE_DIR)
-	@TF_ACC=1 $(TEST_RUNNER) -f testname --junitfile $(COVERAGE_DIR)/integration.xml --rerun-fails=1 --packages "$(GO_PKGS)" \
-		-- -v -parallel 8 -tags=integration $(TEST_ARGS) -covermode=$(COVERMODE) -coverprofile $(COVERAGE_DIR)/integration.tmp \
+	@TF_ACC=1 $(TEST_RUNNER) -f testname --junitfile $(COVERAGE_DIR)/integration.xml --rerun-fails=2 --packages "$(GO_PKGS)" \
+		-- -v -parallel 6 -tags=integration $(TEST_ARGS) -covermode=$(COVERMODE) -coverprofile $(COVERAGE_DIR)/integration.tmp \
 		   -timeout 120m -ldflags=$(LDFLAGS_TEST)
 
 #
diff --git b/go.mod a/go.mod
index 7acbcb34..1117c3c6 100644
--- b/go.mod
+++ a/go.mod
@@ -1,45 +1,46 @@
 module github.com/newrelic/terraform-provider-newrelic/v2
 
-go 1.19
+go 1.18
 
 require (
-	github.com/hashicorp/terraform-plugin-sdk/v2 v2.26.1
+	github.com/hashicorp/terraform-plugin-sdk/v2 v2.20.0
 	github.com/mitchellh/go-homedir v1.1.0
 	github.com/newrelic/go-agent/v3 v3.20.3
 	github.com/newrelic/go-insights v1.0.3
-	github.com/newrelic/newrelic-client-go/v2 v2.17.1
-	github.com/stretchr/testify v1.8.2
+	github.com/newrelic/newrelic-client-go/v2 v2.13.0
+	github.com/stretchr/testify v1.8.1
 )
 
 require (
 	github.com/agext/levenshtein v1.2.2 // indirect
+	github.com/apparentlymart/go-cidr v1.1.0 // indirect
 	github.com/apparentlymart/go-textseg/v13 v13.0.0 // indirect
 	github.com/davecgh/go-spew v1.1.1 // indirect
 	github.com/fatih/color v1.13.0 // indirect
 	github.com/golang/protobuf v1.5.2 // indirect
-	github.com/google/go-cmp v0.5.9 // indirect
+	github.com/google/go-cmp v0.5.8 // indirect
 	github.com/google/go-querystring v1.1.0 // indirect
 	github.com/hashicorp/errwrap v1.0.0 // indirect
 	github.com/hashicorp/go-checkpoint v0.5.0 // indirect
 	github.com/hashicorp/go-cleanhttp v0.5.2 // indirect
 	github.com/hashicorp/go-cty v1.4.1-0.20200414143053-d3edf31b6320 // indirect
-	github.com/hashicorp/go-hclog v1.4.0 // indirect
+	github.com/hashicorp/go-hclog v1.2.1 // indirect
 	github.com/hashicorp/go-multierror v1.1.1 // indirect
-	github.com/hashicorp/go-plugin v1.4.8 // indirect
+	github.com/hashicorp/go-plugin v1.4.4 // indirect
 	github.com/hashicorp/go-retryablehttp v0.7.0 // indirect
 	github.com/hashicorp/go-uuid v1.0.3 // indirect
 	github.com/hashicorp/go-version v1.6.0 // indirect
-	github.com/hashicorp/hc-install v0.5.0 // indirect
-	github.com/hashicorp/hcl/v2 v2.16.2 // indirect
+	github.com/hashicorp/hc-install v0.4.0 // indirect
+	github.com/hashicorp/hcl/v2 v2.13.0 // indirect
 	github.com/hashicorp/logutils v1.0.0 // indirect
-	github.com/hashicorp/terraform-exec v0.18.1 // indirect
-	github.com/hashicorp/terraform-json v0.16.0 // indirect
-	github.com/hashicorp/terraform-plugin-go v0.14.3 // indirect
-	github.com/hashicorp/terraform-plugin-log v0.8.0 // indirect
-	github.com/hashicorp/terraform-registry-address v0.1.0 // indirect
+	github.com/hashicorp/terraform-exec v0.17.2 // indirect
+	github.com/hashicorp/terraform-json v0.14.0 // indirect
+	github.com/hashicorp/terraform-plugin-go v0.12.0 // indirect
+	github.com/hashicorp/terraform-plugin-log v0.7.0 // indirect
+	github.com/hashicorp/terraform-registry-address v0.0.0-20220623143253-7d51757b572c // indirect
 	github.com/hashicorp/terraform-svchost v0.0.0-20200729002733-f050f53b9734 // indirect
 	github.com/hashicorp/yamux v0.0.0-20181012175058-2f1d1f20f75d // indirect
-	github.com/imdario/mergo v0.3.13 // indirect
+	github.com/imdario/mergo v0.3.12 // indirect
 	github.com/mattn/go-colorable v0.1.12 // indirect
 	github.com/mattn/go-isatty v0.0.14 // indirect
 	github.com/mitchellh/copystructure v1.2.0 // indirect
@@ -55,15 +56,14 @@ require (
 	github.com/vmihailenco/msgpack v4.0.4+incompatible // indirect
 	github.com/vmihailenco/msgpack/v4 v4.3.12 // indirect
 	github.com/vmihailenco/tagparser v0.1.1 // indirect
-	github.com/zclconf/go-cty v1.13.1 // indirect
-	golang.org/x/crypto v0.7.0 // indirect
-	golang.org/x/mod v0.8.0 // indirect
-	golang.org/x/net v0.8.0 // indirect
-	golang.org/x/sys v0.6.0 // indirect
-	golang.org/x/text v0.8.0 // indirect
+	github.com/zclconf/go-cty v1.10.0 // indirect
+	golang.org/x/crypto v0.0.0-20220517005047-85d78b3ac167 // indirect
+	golang.org/x/net v0.0.0-20211112202133-69e39bad7dc2 // indirect
+	golang.org/x/sys v0.0.0-20220503163025-988cb79eb6c6 // indirect
+	golang.org/x/text v0.3.7 // indirect
 	google.golang.org/appengine v1.6.6 // indirect
 	google.golang.org/genproto v0.0.0-20200904004341-0bd0a958aa1d // indirect
-	google.golang.org/grpc v1.51.0 // indirect
-	google.golang.org/protobuf v1.28.1 // indirect
+	google.golang.org/grpc v1.49.0 // indirect
+	google.golang.org/protobuf v1.28.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
 )
diff --git b/go.sum a/go.sum
index 6f7ff91e..fc04da28 100644
--- b/go.sum
+++ a/go.sum
@@ -1,9 +1,6 @@
 cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
 cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
 github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
-github.com/Masterminds/goutils v1.1.1/go.mod h1:8cTjp+g8YejhMuvIA5y2vz3BpJxksy863GQaJW2MFNU=
-github.com/Masterminds/semver/v3 v3.1.1/go.mod h1:VPu/7SZ7ePZ3QOrcuXROw5FAcLl4a0cBrbBpGY/8hQs=
-github.com/Masterminds/sprig/v3 v3.2.1/go.mod h1:UoaO7Yp8KlPnJIYWTFkMaqPUYKTfGFPhxNuwnnxkKlk=
 github.com/Microsoft/go-winio v0.4.14/go.mod h1:qXqCSQ3Xa7+6tgxaGTIe4Kpcdsi+P8jBhyzoq1bpyYA=
 github.com/Microsoft/go-winio v0.4.16 h1:FtSW/jqD+l4ba5iPBj9CODVtgfYAD8w2wS923g/cFDk=
 github.com/Microsoft/go-winio v0.4.16/go.mod h1:XB6nPKklQyQ7GC9LdcBEcBl8PF76WugXOPRXwdLnMv0=
@@ -19,16 +16,17 @@ github.com/agext/levenshtein v1.2.2/go.mod h1:JEDfjyjHDjOF/1e4FlBE/PkbqA9OfWu2ki
 github.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=
 github.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=
 github.com/anmitsu/go-shlex v0.0.0-20161002113705-648efa622239/go.mod h1:2FmKhYUyUczH0OGQWaF5ceTx0UBShxjsH6f8oGKYe2c=
+github.com/apparentlymart/go-cidr v1.1.0 h1:2mAhrMoF+nhXqxTzSZMUzDHkLjmIHC+Zzn4tdgBZjnU=
+github.com/apparentlymart/go-cidr v1.1.0/go.mod h1:EBcsNrHc3zQeuaeCeCtQruQm+n9/YjEn/vI25Lg7Gwc=
+github.com/apparentlymart/go-dump v0.0.0-20190214190832-042adf3cf4a0 h1:MzVXffFUye+ZcSR6opIgz9Co7WcDx6ZcY+RjfFHoA0I=
 github.com/apparentlymart/go-textseg v1.0.0/go.mod h1:z96Txxhf3xSFMPmb5X/1W05FF/Nj9VFpLOpjS5yuumk=
 github.com/apparentlymart/go-textseg/v12 v12.0.0/go.mod h1:S/4uRK2UtaQttw1GenVJEynmyUenKwP++x/+DdGV/Ec=
 github.com/apparentlymart/go-textseg/v13 v13.0.0 h1:Y+KvPE1NYz0xl601PVImeQfFyEy6iT90AvPUL1NNfNw=
 github.com/apparentlymart/go-textseg/v13 v13.0.0/go.mod h1:ZK2fH7c4NqDTLtiYLvIkEghdlcqw7yxLeM89kiTRPUo=
 github.com/armon/consul-api v0.0.0-20180202201655-eb2c6b5be1b6/go.mod h1:grANhF5doyWs3UAsr3K4I6qtAmlQcZDesFNEHPZAzj8=
-github.com/armon/go-radix v0.0.0-20180808171621-7fddfc383310/go.mod h1:ufUuZ+zHj4x4TnLV4JWEpy2hxWSpsRywHrMgIH9cCH8=
 github.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5/go.mod h1:wHh0iHkYZB8zMSxRWpUBQtwG5a7fFgvEO+odwuTv2gs=
 github.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=
 github.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=
-github.com/bgentry/speakeasy v0.1.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=
 github.com/bombsimon/wsl/v2 v2.0.0/go.mod h1:mf25kr/SqFEPhhcxW1+7pxzGlW+hIl/hYTKY95VwV8U=
 github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=
 github.com/cespare/xxhash v1.1.0/go.mod h1:XrSqR1VqqWfGrhpAt58auRo0WTKS1nRRg3ghfAqPWnc=
@@ -132,14 +130,12 @@ github.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMyw
 github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
-github.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=
-github.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
+github.com/google/go-cmp v0.5.8 h1:e6P7q2lk1O+qJJb4BtCQXlK8vWEO8V1ZeuEdJNOqZyg=
+github.com/google/go-cmp v0.5.8/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
 github.com/google/go-querystring v1.1.0 h1:AnCroh3fv4ZBgVIf1Iwtovgjaw/GiKJo8M8yD/fhyJ8=
 github.com/google/go-querystring v1.1.0/go.mod h1:Kcdr2DB4koayq7X8pmAG4sNG59So17icRSOU623lUBU=
 github.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=
 github.com/google/uuid v1.0.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
-github.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
-github.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
 github.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=
 github.com/gordonklaus/ineffassign v0.0.0-20190601041439-ed7b1b5ee0f8/go.mod h1:cuNKsD1zp2v6XfE/orVX2QE1LC+i254ceGcVeDT3pTU=
 github.com/gorilla/websocket v1.4.0/go.mod h1:E7qHFY5m1UJ88s3WnNqhKjPHQ0heANvMoAMk2YaljkQ=
@@ -158,51 +154,47 @@ github.com/hashicorp/go-cleanhttp v0.5.2/go.mod h1:kO/YDlP8L1346E6Sodw+PrpBSV4/S
 github.com/hashicorp/go-cty v1.4.1-0.20200414143053-d3edf31b6320 h1:1/D3zfFHttUKaCaGKZ/dR2roBXv0vKbSCnssIldfQdI=
 github.com/hashicorp/go-cty v1.4.1-0.20200414143053-d3edf31b6320/go.mod h1:EiZBMaudVLy8fmjf9Npq1dq9RalhveqZG5w/yz3mHWs=
 github.com/hashicorp/go-hclog v0.9.2/go.mod h1:5CU+agLiy3J7N7QjHK5d05KxGsuXiQLrjA0H7acj2lQ=
-github.com/hashicorp/go-hclog v1.4.0 h1:ctuWFGrhFha8BnnzxqeRGidlEcQkDyL5u8J8t5eA11I=
-github.com/hashicorp/go-hclog v1.4.0/go.mod h1:W4Qnvbt70Wk/zYJryRzDRU/4r0kIg0PVHBcfoyhpF5M=
-github.com/hashicorp/go-multierror v1.0.0/go.mod h1:dHtQlpGsu+cZNNAkkCN/P3hoUDHhCYQXV3UM06sGGrk=
+github.com/hashicorp/go-hclog v1.2.1 h1:YQsLlGDJgwhXFpucSPyVbCBviQtjlHv3jLTlp8YmtEw=
+github.com/hashicorp/go-hclog v1.2.1/go.mod h1:W4Qnvbt70Wk/zYJryRzDRU/4r0kIg0PVHBcfoyhpF5M=
 github.com/hashicorp/go-multierror v1.1.1 h1:H5DkEtf6CXdFp0N0Em5UCwQpXMWke8IA0+lD48awMYo=
 github.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=
-github.com/hashicorp/go-plugin v1.4.8 h1:CHGwpxYDOttQOY7HOWgETU9dyVjOXzniXDqJcYJE1zM=
-github.com/hashicorp/go-plugin v1.4.8/go.mod h1:viDMjcLJuDui6pXb8U4HVfb8AamCWhHGUjr2IrTF67s=
+github.com/hashicorp/go-plugin v1.4.4 h1:NVdrSdFRt3SkZtNckJ6tog7gbpRrcbOjQi/rgF7JYWQ=
+github.com/hashicorp/go-plugin v1.4.4/go.mod h1:viDMjcLJuDui6pXb8U4HVfb8AamCWhHGUjr2IrTF67s=
 github.com/hashicorp/go-retryablehttp v0.7.0 h1:eu1EI/mbirUgP5C8hVsTNaGZreBDlYiwC1FZWkvQPQ4=
 github.com/hashicorp/go-retryablehttp v0.7.0/go.mod h1:vAew36LZh98gCBJNLH42IQ1ER/9wtLZZ8meHqQvEYWY=
 github.com/hashicorp/go-uuid v1.0.0/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=
 github.com/hashicorp/go-uuid v1.0.3 h1:2gKiV6YVmrJ1i2CKKa9obLvRieoRGviZFL26PcT/Co8=
 github.com/hashicorp/go-uuid v1.0.3/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=
 github.com/hashicorp/go-version v1.2.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=
+github.com/hashicorp/go-version v1.5.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=
 github.com/hashicorp/go-version v1.6.0 h1:feTTfFNnjP967rlCxM/I9g701jU+RN74YKx2mOkIeek=
 github.com/hashicorp/go-version v1.6.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=
-github.com/hashicorp/hc-install v0.5.0 h1:D9bl4KayIYKEeJ4vUDe9L5huqxZXczKaykSRcmQ0xY0=
-github.com/hashicorp/hc-install v0.5.0/go.mod h1:JyzMfbzfSBSjoDCRPna1vi/24BEDxFaCPfdHtM5SCdo=
+github.com/hashicorp/hc-install v0.4.0 h1:cZkRFr1WVa0Ty6x5fTvL1TuO1flul231rWkGH92oYYk=
+github.com/hashicorp/hc-install v0.4.0/go.mod h1:5d155H8EC5ewegao9A4PUTMNPZaq+TbOzkJJZ4vrXeI=
 github.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=
-github.com/hashicorp/hcl/v2 v2.16.2 h1:mpkHZh/Tv+xet3sy3F9Ld4FyI2tUpWe9x3XtPx9f1a0=
-github.com/hashicorp/hcl/v2 v2.16.2/go.mod h1:JRmR89jycNkrrqnMmvPDMd56n1rQJ2Q6KocSLCMCXng=
+github.com/hashicorp/hcl/v2 v2.13.0 h1:0Apadu1w6M11dyGFxWnmhhcMjkbAiKCv7G1r/2QgCNc=
+github.com/hashicorp/hcl/v2 v2.13.0/go.mod h1:e4z5nxYlWNPdDSNYX+ph14EvWYMFm3eP0zIUqPc2jr0=
 github.com/hashicorp/logutils v1.0.0 h1:dLEQVugN8vlakKOUE3ihGLTZJRB4j+M2cdTm/ORI65Y=
 github.com/hashicorp/logutils v1.0.0/go.mod h1:QIAnNjmIWmVIIkWDTG1z5v++HQmx9WQRO+LraFDTW64=
-github.com/hashicorp/terraform-exec v0.18.1 h1:LAbfDvNQU1l0NOQlTuudjczVhHj061fNX5H8XZxHlH4=
-github.com/hashicorp/terraform-exec v0.18.1/go.mod h1:58wg4IeuAJ6LVsLUeD2DWZZoc/bYi6dzhLHzxM41980=
-github.com/hashicorp/terraform-json v0.16.0 h1:UKkeWRWb23do5LNAFlh/K3N0ymn1qTOO8c+85Albo3s=
-github.com/hashicorp/terraform-json v0.16.0/go.mod h1:v0Ufk9jJnk6tcIZvScHvetlKfiNTC+WS21mnXIlc0B0=
-github.com/hashicorp/terraform-plugin-go v0.14.3 h1:nlnJ1GXKdMwsC8g1Nh05tK2wsC3+3BL/DBBxFEki+j0=
-github.com/hashicorp/terraform-plugin-go v0.14.3/go.mod h1:7ees7DMZ263q8wQ6E4RdIdR6nHHJtrdt4ogX5lPkX1A=
-github.com/hashicorp/terraform-plugin-log v0.8.0 h1:pX2VQ/TGKu+UU1rCay0OlzosNKe4Nz1pepLXj95oyy0=
-github.com/hashicorp/terraform-plugin-log v0.8.0/go.mod h1:1myFrhVsBLeylQzYYEV17VVjtG8oYPRFdaZs7xdW2xs=
-github.com/hashicorp/terraform-plugin-sdk/v2 v2.26.1 h1:G9WAfb8LHeCxu7Ae8nc1agZlQOSCUWsb610iAogBhCs=
-github.com/hashicorp/terraform-plugin-sdk/v2 v2.26.1/go.mod h1:xcOSYlRVdPLmDUoqPhO9fiO/YCN/l6MGYeTzGt5jgkQ=
-github.com/hashicorp/terraform-registry-address v0.1.0 h1:W6JkV9wbum+m516rCl5/NjKxCyTVaaUBbzYcMzBDO3U=
-github.com/hashicorp/terraform-registry-address v0.1.0/go.mod h1:EnyO2jYO6j29DTHbJcm00E5nQTFeTtyZH3H5ycydQ5A=
+github.com/hashicorp/terraform-exec v0.17.2 h1:EU7i3Fh7vDUI9nNRdMATCEfnm9axzTnad8zszYZ73Go=
+github.com/hashicorp/terraform-exec v0.17.2/go.mod h1:tuIbsL2l4MlwwIZx9HPM+LOV9vVyEfBYu2GsO1uH3/8=
+github.com/hashicorp/terraform-json v0.14.0 h1:sh9iZ1Y8IFJLx+xQiKHGud6/TSUCM0N8e17dKDpqV7s=
+github.com/hashicorp/terraform-json v0.14.0/go.mod h1:5A9HIWPkk4e5aeeXIBbkcOvaZbIYnAIkEyqP2pNSckM=
+github.com/hashicorp/terraform-plugin-go v0.12.0 h1:6wW9mT1dSs0Xq4LR6HXj1heQ5ovr5GxXNJwkErZzpJw=
+github.com/hashicorp/terraform-plugin-go v0.12.0/go.mod h1:kwhmaWHNDvT1B3QiSJdAtrB/D4RaKSY/v3r2BuoWK4M=
+github.com/hashicorp/terraform-plugin-log v0.7.0 h1:SDxJUyT8TwN4l5b5/VkiTIaQgY6R+Y2BQ0sRZftGKQs=
+github.com/hashicorp/terraform-plugin-log v0.7.0/go.mod h1:p4R1jWBXRTvL4odmEkFfDdhUjHf9zcs/BCoNHAc7IK4=
+github.com/hashicorp/terraform-plugin-sdk/v2 v2.20.0 h1:+KxZULPsbjpAVoP0WNj/8aVW6EqpcX5JcUcQ5wl7Da4=
+github.com/hashicorp/terraform-plugin-sdk/v2 v2.20.0/go.mod h1:DwGJG3KNxIPluVk6hexvDfYR/MS/eKGpiztJoT3Bbbw=
+github.com/hashicorp/terraform-registry-address v0.0.0-20220623143253-7d51757b572c h1:D8aRO6+mTqHfLsK/BC3j5OAoogv1WLRWzY1AaTo3rBg=
+github.com/hashicorp/terraform-registry-address v0.0.0-20220623143253-7d51757b572c/go.mod h1:Wn3Na71knbXc1G8Lh+yu/dQWWJeFQEpDeJMtWMtlmNI=
 github.com/hashicorp/terraform-svchost v0.0.0-20200729002733-f050f53b9734 h1:HKLsbzeOsfXmKNpr3GiT18XAblV0BjCbzL8KQAMZGa0=
 github.com/hashicorp/terraform-svchost v0.0.0-20200729002733-f050f53b9734/go.mod h1:kNDNcF7sN4DocDLBkQYz73HGKwN1ANB1blq4lIYLYvg=
 github.com/hashicorp/yamux v0.0.0-20181012175058-2f1d1f20f75d h1:kJCB4vdITiW1eC1vq2e6IsrXKrZit1bv/TDYFGMp4BQ=
 github.com/hashicorp/yamux v0.0.0-20181012175058-2f1d1f20f75d/go.mod h1:+NfK9FKeTrX5uv1uIXGdwYDTeHna2qgaIlx54MXqjAM=
 github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=
-github.com/huandu/xstrings v1.3.1/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=
-github.com/huandu/xstrings v1.3.2/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=
-github.com/imdario/mergo v0.3.11/go.mod h1:jmQim1M+e3UYxmgPu/WyfjB3N3VflVyUjjjwH0dnCYA=
+github.com/imdario/mergo v0.3.12 h1:b6R2BslTbIEToALKP7LxUvijTsNI9TAe80pLWN2g/HU=
 github.com/imdario/mergo v0.3.12/go.mod h1:jmQim1M+e3UYxmgPu/WyfjB3N3VflVyUjjjwH0dnCYA=
-github.com/imdario/mergo v0.3.13 h1:lFzP57bqS/wsqKssCGmtLAb8A0wKjLGrve2q3PPVcBk=
-github.com/imdario/mergo v0.3.13/go.mod h1:4lJ1jqUDcsbIECGy0RUJAXNIhg+6ocWgb1ALK2O4oXg=
 github.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=
 github.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 h1:BQSFePA1RWJOlocH6Fxy8MmwDt+yVQYULKfN0RoTN8A=
 github.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99/go.mod h1:1lJo3i6rXxKeerYnT8Nvf0QmHCRC1n8sfWVwXF2Frvo=
@@ -237,20 +229,16 @@ github.com/magiconair/properties v1.8.0/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czP
 github.com/magiconair/properties v1.8.1/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=
 github.com/matoous/godox v0.0.0-20190911065817-5d6d842e92eb/go.mod h1:1BELzlh859Sh1c6+90blK8lbYy0kwQf1bYlBhBysy1s=
 github.com/matryer/is v1.2.0/go.mod h1:2fLPjFQM9rhQ15aVEtbuwhJinnOqrmgXPNdZsdwlWXA=
-github.com/mattn/go-colorable v0.0.9/go.mod h1:9vuHe8Xs5qXnSaW/c/ABM9alt+Vo+STaOChaDxuIBZU=
 github.com/mattn/go-colorable v0.1.4/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=
 github.com/mattn/go-colorable v0.1.9/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=
 github.com/mattn/go-colorable v0.1.12 h1:jF+Du6AlPIjs2BiUiQlKOX0rt3SujHxPnksPKZbaA40=
 github.com/mattn/go-colorable v0.1.12/go.mod h1:u5H1YNBxpqRaxsYJYSkiCWKzEfiAb1Gb520KVy5xxl4=
-github.com/mattn/go-isatty v0.0.3/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=
 github.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=
 github.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=
 github.com/mattn/go-isatty v0.0.14 h1:yVuAays6BHfxijgZPzw+3Zlu5yQgKGP2/hcQbHb7S9Y=
 github.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=
 github.com/mattn/goveralls v0.0.2/go.mod h1:8d1ZMHsd7fW6IRPKQh46F2WRpyib5/X4FOpevwGNQEw=
 github.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=
-github.com/mitchellh/cli v1.1.5/go.mod h1:v8+iFts2sPIKUV1ltktPXMCC8fumSKFItNcD2cLtRR4=
-github.com/mitchellh/copystructure v1.0.0/go.mod h1:SNtv71yrdKgLRyLFxmLdkAbkKEFWgYaq1OVrnRcwhnw=
 github.com/mitchellh/copystructure v1.2.0 h1:vpKXTN4ewci03Vljg/q9QvCGUDttBOGBIa15WveJJGw=
 github.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=
 github.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=
@@ -263,7 +251,6 @@ github.com/mitchellh/go-wordwrap v1.0.0/go.mod h1:ZXFpozHsX6DPmq2I0TCekCxypsnAUb
 github.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=
 github.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=
 github.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=
-github.com/mitchellh/reflectwalk v1.0.0/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=
 github.com/mitchellh/reflectwalk v1.0.2 h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=
 github.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=
 github.com/mozilla/tls-observatory v0.0.0-20190404164649-a3c1b6cfecfd/go.mod h1:SrKMQvPiws7F7iqYp8/TX+IhxCYhzr6N/1yb8cwHsGk=
@@ -273,9 +260,10 @@ github.com/newrelic/go-agent/v3 v3.20.3 h1:hUBAMq/Y2Y9as5/yxQbf0zNde/X7w58cWZkm2
 github.com/newrelic/go-agent/v3 v3.20.3/go.mod h1:rT6ZUxJc5rQbWLyCtjqQCOcfb01lKRFbc1yMQkcboWM=
 github.com/newrelic/go-insights v1.0.3 h1:zSNp1CEZnXktzSIEsbHJk8v6ZihdPFP2WsO/fzau3OQ=
 github.com/newrelic/go-insights v1.0.3/go.mod h1:A20BoT8TNkqPGX2nS/Z2fYmKl3Cqa3iKZd4whzedCY4=
-github.com/newrelic/newrelic-client-go/v2 v2.17.1 h1:25c09htIWepqX6sKeauUsfsTQjI/lM5z8Auiztb9tQY=
-github.com/newrelic/newrelic-client-go/v2 v2.17.1/go.mod h1:AX08IIL08pYVbnowsR05EqOdfN1Dz+ZXdIwqS0dkT2c=
+github.com/newrelic/newrelic-client-go/v2 v2.13.0 h1:lwkfAtQtvdtQJzTmcmCQ6bnnfAazNS5H3IhYbJ0rJxY=
+github.com/newrelic/newrelic-client-go/v2 v2.13.0/go.mod h1:xDZ6IDWI6fpl7MhTI4Hk75alJLAIfXzOt/rINEolxhQ=
 github.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=
+github.com/nsf/jsondiff v0.0.0-20200515183724-f29ed568f4ce h1:RPclfga2SEJmgMmz2k+Mg7cowZ8yv4Trqw9UsJby758=
 github.com/oklog/run v1.0.0 h1:Ru7dDtJNOyC66gQ5dQmaCa0qIsAUFY3sFpK1Xk8igrw=
 github.com/oklog/run v1.0.0/go.mod h1:dlhp/R75TPv97u0XWUtDeV/lRKWPKSdTuV0TZvrmrQA=
 github.com/oklog/ulid v1.3.1/go.mod h1:CirwcVhetQ6Lv90oh/F+FBtV6XMibvdAFo93nm5qn4U=
@@ -291,7 +279,6 @@ github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINE
 github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
-github.com/posener/complete v1.1.1/go.mod h1:em0nMJCgc9GFtwrmVmEMR/ZL6WyhyjMBndrE9hABlRI=
 github.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=
 github.com/prometheus/client_golang v0.9.3/go.mod h1:/TN21ttK/J9q6uSwhBd54HahCDft0ttaMvbicHlPoso=
 github.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=
@@ -307,12 +294,12 @@ github.com/remyoudompheng/go-misc v0.0.0-20190427085024-2d6ac652a50e/go.mod h1:8
 github.com/rogpeppe/fastuuid v0.0.0-20150106093220-6724a57986af/go.mod h1:XWv6SoW27p1b0cqNHllgS5HIMJraePCO15w5zCzIWYg=
 github.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=
 github.com/russross/blackfriday v1.5.2/go.mod h1:JO/DiYxRf+HjHt06OyowR9PTA263kcR/rfWxYHBV53g=
+github.com/sebdah/goldie v1.0.0/go.mod h1:jXP4hmWywNEwZzhMuv2ccnqTSFpuq8iyQhtQdkkZBH4=
 github.com/securego/gosec v0.0.0-20191002120514-e680875ea14d/go.mod h1:w5+eXa0mYznDkHaMCXA4XYffjlH+cy1oyKbfzJXa2Do=
 github.com/sergi/go-diff v1.1.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=
 github.com/sergi/go-diff v1.2.0 h1:XU+rvMAioB0UC3q1MFrIQy4Vo5/4VsRDQQXHsEya6xQ=
 github.com/shirou/gopsutil v0.0.0-20190901111213-e4ec7b275ada/go.mod h1:WWnYX4lzhCH5h/3YBfyVA3VbLYjlMZZAQcW9ojMexNc=
 github.com/shirou/w32 v0.0.0-20160930032740-bb4de0191aa4/go.mod h1:qsXQc7+bwAM3Q1u/4XEfrquwF8Lw7D7y5cD8CuHnfIc=
-github.com/shopspring/decimal v1.2.0/go.mod h1:DKyhrW/HYNuLGql+MJL6WCR6knT2jwCFRcu2hWCYk4o=
 github.com/shurcooL/go v0.0.0-20180423040247-9e1955d9fb6e/go.mod h1:TDJrrUr11Vxrven61rcy3hJMUqaf/CLWYhHNPmT14Lk=
 github.com/shurcooL/go-goon v0.0.0-20170922171312-37c2f522c041/go.mod h1:N5mDOmsrJOB+vfqUK+7DmDyjhSLIIBnXo9lvZJj3MWQ=
 github.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=
@@ -327,7 +314,6 @@ github.com/sourcegraph/go-diff v0.5.1/go.mod h1:j2dHj3m8aZgQO8lMTcTnBcXkRRRqi34c
 github.com/spaolacci/murmur3 v0.0.0-20180118202830-f09979ecbc72/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=
 github.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=
 github.com/spf13/cast v1.3.0/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=
-github.com/spf13/cast v1.3.1/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=
 github.com/spf13/cobra v0.0.5/go.mod h1:3K3wKZymM7VvHMDS9+Akkh4K60UwM26emMESw8tLCHU=
 github.com/spf13/jwalterweatherman v1.0.0/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb68N+wFjFa4jdeBTo=
 github.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=
@@ -342,14 +328,12 @@ github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpE
 github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
 github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
 github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=
-github.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=
-github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.2/go.mod h1:R6va5+xMeoiuVRoj+gSkQ7d3FALtqAAGI1FQKckRals=
 github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
-github.com/stretchr/testify v1.8.2 h1:+h33VjcLVPDHtOdpUCuF+7gSuG3yGIftsP1YvFihtJ8=
-github.com/stretchr/testify v1.8.2/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
+github.com/stretchr/testify v1.8.1 h1:w7B6lhMri9wdJUVmEZPGGhZzrYTPvgJArz7wNPgYKsk=
+github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
 github.com/subosito/gotenv v1.2.0/go.mod h1:N0PQaV/YGNqwC0u51sEeR/aUtSLEXKX9iv69rRypqCw=
 github.com/timakin/bodyclose v0.0.0-20190930140734-f7f2e9bca95e/go.mod h1:Qimiffbc6q9tBWlVV6x0P9sat/ao1xEkREYPPj9hphk=
 github.com/tmc/grpc-websocket-proxy v0.0.0-20190109142713-0ad062ec5ee5/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=
@@ -378,10 +362,11 @@ github.com/xanzy/ssh-agent v0.3.0 h1:wUMzuKtKilRgBAD1sUb8gOwwRr2FGoBVumcjoOACClI
 github.com/xanzy/ssh-agent v0.3.0/go.mod h1:3s9xbODqPuuhK9JV1R321M/FlMZSBvE5aY6eAcqrDh0=
 github.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2/go.mod h1:UETIi67q53MR2AWcXfiuqkDkRtnGDLqkBTpCHuJHxtU=
 github.com/xordataexchange/crypt v0.0.3-0.20170626215501-b2862e3d0a77/go.mod h1:aYKd//L2LvnjZzWKhF00oedf4jCCReLcmhLdhm1A27Q=
-github.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=
 github.com/zclconf/go-cty v1.1.0/go.mod h1:xnAOWiHeOqg2nWS62VtQ7pbOu17FtxJNW8RLEih+O3s=
-github.com/zclconf/go-cty v1.13.1 h1:0a6bRwuiSHtAmqCqNOE+c2oHgepv0ctoxU4FUe43kwc=
-github.com/zclconf/go-cty v1.13.1/go.mod h1:YKQzy/7pZ7iq2jNFzy5go57xdxdWoLLpaEp4u238AE0=
+github.com/zclconf/go-cty v1.2.0/go.mod h1:hOPWgoHbaTUnI5k4D2ld+GRpFJSCe6bCM7m1q/N4PQ8=
+github.com/zclconf/go-cty v1.10.0 h1:mp9ZXQeIcN8kAwuqorjH+Q+njbJKjLrvB2yIh4q7U+0=
+github.com/zclconf/go-cty v1.10.0/go.mod h1:vVKLxnk3puL4qRAv72AO+W99LUD4da90g3uUAzyuvAk=
+github.com/zclconf/go-cty-debug v0.0.0-20191215020915-b22d67c1ba0b/go.mod h1:ZRKQfBXbGkpdV6QMzT3rU1kSTAnfu1dO8dPKjYprgj8=
 go.etcd.io/bbolt v1.3.2/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=
 go.uber.org/atomic v1.4.0/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=
 go.uber.org/multierr v1.1.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=
@@ -393,14 +378,11 @@ golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACk
 golang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20190923035154-9ee001bba392/go.mod h1:/lpIB1dKB+9EgE3H3cr1v9wB50oz8l4C4h62xy7jSTY=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
-golang.org/x/crypto v0.0.0-20200414173820-0848c9571904/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.0.0-20200820211705-5c72a883971a/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20210322153248-0c34fe9e7dc2/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=
 golang.org/x/crypto v0.0.0-20210421170649-83a5a9bb288b/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=
-golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
-golang.org/x/crypto v0.5.0/go.mod h1:NK/OQwhpMQP3MwtdjgLlYHnH9ebylxKWv3e0fK+mkQU=
-golang.org/x/crypto v0.7.0 h1:AvwMYaRytfdeVt3u6mLaxYtErKYjxA2OXjJ1HHq6t3A=
-golang.org/x/crypto v0.7.0/go.mod h1:pYwdfH91IfpZVANVyUOhSIPZaFoJGxTFbZhFTx+dXZU=
+golang.org/x/crypto v0.0.0-20210616213533-5ff15b29337e/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
+golang.org/x/crypto v0.0.0-20220517005047-85d78b3ac167 h1:O8uGbHCqlTp2P6QJSLmCojM4mN6UemYv8K+dCnmHmu0=
+golang.org/x/crypto v0.0.0-20220517005047-85d78b3ac167/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
 golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=
@@ -408,10 +390,6 @@ golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHl
 golang.org/x/lint v0.0.0-20191125180803-fdd1cda4f05f/go.mod h1:5qLYkcX4OjUUV8bRuDixDT3tpyyb+LUpUlRWLxfhWrs=
 golang.org/x/mod v0.0.0-20190513183733-4bf6d317e70e/go.mod h1:mXi4GBBbnImb6dmsKGUJ2LatrhH/nqhxcFungHvyanc=
 golang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=
-golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=
-golang.org/x/mod v0.7.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
-golang.org/x/mod v0.8.0 h1:LUYupSeNrTNCGzR/hVBk2NHZO4hXcVaW1k4Qx7rjPx8=
-golang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
 golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180811021610-c39426892332/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
@@ -432,17 +410,14 @@ golang.org/x/net v0.0.0-20200301022130-244492dfa37a/go.mod h1:z5CRVTTTmAJ677TzLL
 golang.org/x/net v0.0.0-20210119194325-5f4716e94777/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
 golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
 golang.org/x/net v0.0.0-20210326060303-6b1517762897/go.mod h1:uSPa2vr4CLtc/ILN5odXGNXS6mhrKVzTaCXzk9m6W3k=
-golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.5.0/go.mod h1:DivGGAXEgPSlEBzxGzZI+ZLohi+xUj054jfeKui00ws=
-golang.org/x/net v0.8.0 h1:Zrh2ngAOFYneWTAIAPethzeaQLuHwhuBkuV6ZiRnUaQ=
-golang.org/x/net v0.8.0/go.mod h1:QVkue5JL9kW//ek3r6jTKnTFis1tRmNAW2P1shuFdJc=
+golang.org/x/net v0.0.0-20211112202133-69e39bad7dc2 h1:CIJ76btIcR3eFI5EgSo6k1qKw9KJexJuRLI9G7Hp5wE=
+golang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
@@ -467,23 +442,16 @@ golang.org/x/sys v0.0.0-20210502180810-71e4cd670f79/go.mod h1:h1NjWce9XRLGQEsW7w
 golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20210927094055-39ccf1dd6fa6/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220503163025-988cb79eb6c6 h1:nonptSpoQ4vQjyraW20DXPAglgQfVnM9ZC6MmNLMR60=
 golang.org/x/sys v0.0.0-20220503163025-988cb79eb6c6/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.4.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.6.0 h1:MVltZSvRTcU2ljQOhs94SXPftV6DCNnZViHeQps87pQ=
-golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1 h1:v+OssWQX+hTHEmOBgwxdZxK4zHq3yOs8F9J7mk0PY8E=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
-golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
-golang.org/x/term v0.4.0/go.mod h1:9P2UbLfCdcvo3p/nzKvsmas4TnlujnuoV9hGgYzW1lQ=
-golang.org/x/term v0.6.0 h1:clScbb1cHjoCkyRbWwBEUZ5H/tIFu5TAXIqaZD0Gcjw=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
+golang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
+golang.org/x/text v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.6.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=
-golang.org/x/text v0.8.0 h1:57P1ETyNKtuIjB4SRd15iJxuhj8Gc416Y78H3qgMh68=
-golang.org/x/text v0.8.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=
 golang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/tools v0.0.0-20180221164845-07fd8470d635/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20180525024113-a5b4c53f6e8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
@@ -505,10 +473,8 @@ golang.org/x/tools v0.0.0-20190719005602-e377ae9d6386/go.mod h1:jcCCGcm9btYwXyDq
 golang.org/x/tools v0.0.0-20190910044552-dd2b5c81c578/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20190930201159-7c411dea38b0/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191113232020-e2727e816f5a/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
-golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191125144606-a911d9008d1f/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20200107050322-53017a39ae36/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
-golang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=
 golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
@@ -526,8 +492,8 @@ google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZi
 google.golang.org/grpc v1.21.0/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=
 google.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
 google.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
-google.golang.org/grpc v1.51.0 h1:E1eGv1FTqoLIdnBCZufiSHgKjlqG6fKFf6pPWtMTh8U=
-google.golang.org/grpc v1.51.0/go.mod h1:wgNDFcnuBGmxLKI/qn4T+m5BtEBYXJPvibbUPsAIPww=
+google.golang.org/grpc v1.49.0 h1:WTLtQzmQori5FUH25Pq4WT22oCsv8USpQ+F6rqtsmxw=
+google.golang.org/grpc v1.49.0/go.mod h1:ZgQEeidpAuNRZ8iRrlBKXZQP1ghovWIVhdJRyCDK+GI=
 google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
 google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
 google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=
@@ -538,8 +504,8 @@ google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpAD
 google.golang.org/protobuf v1.24.0/go.mod h1:r/3tXBNzIEhYS9I1OUVjXDlt8tc493IdKGjtUeSXeh4=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.28.1 h1:d0NfwRgPtno5B1Wa6L2DAG+KivqkdutMf1UhdNx175w=
-google.golang.org/protobuf v1.28.1/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
+google.golang.org/protobuf v1.28.0 h1:w43yiav+6bVFTBQFZX0r7ipe9JQ1QsbMgHwbBziscLw=
+google.golang.org/protobuf v1.28.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
 gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
@@ -561,9 +527,8 @@ gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.5/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.7/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
 gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
-gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
-gopkg.in/yaml.v3 v3.0.0/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
 gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
diff --git b/newrelic/condition_helpers.go a/newrelic/condition_helpers.go
deleted file mode 100644
index a2d34d85..00000000
--- b/newrelic/condition_helpers.go
+++ /dev/null
@@ -1,12 +0,0 @@
-package newrelic
-
-import (
-	"encoding/base64"
-	"fmt"
-)
-
-// Builds a condition entity guid of the format "[accountID]|AIOPS|CONDITION|[conditionID]"
-func getConditionEntityGUID(conditionID int, accountID int) string {
-	rawGUID := fmt.Sprintf("%d|AIOPS|CONDITION|%d", accountID, conditionID)
-	return base64.StdEncoding.WithPadding(base64.NoPadding).EncodeToString([]byte(rawGUID))
-}
diff --git b/newrelic/data_source_newrelic_alert_channel.go a/newrelic/data_source_newrelic_alert_channel.go
index 2949772e..016a9c6f 100644
--- b/newrelic/data_source_newrelic_alert_channel.go
+++ a/newrelic/data_source_newrelic_alert_channel.go
@@ -19,8 +19,7 @@ func dataSourceNewRelicAlertChannel() *schema.Resource {
 	}
 
 	return &schema.Resource{
-		DeprecationMessage: "The `newrelic_alert_channel` data source is deprecated and will be removed in the next major release.",
-		ReadContext:        dataSourceNewRelicAlertChannelRead,
+		ReadContext: dataSourceNewRelicAlertChannelRead,
 		Schema: map[string]*schema.Schema{
 			"account_id": {
 				Type:        schema.TypeInt,
diff --git b/newrelic/data_source_newrelic_cloud_account_test.go a/newrelic/data_source_newrelic_cloud_account_test.go
index 304982dc..87d85c06 100644
--- b/newrelic/data_source_newrelic_cloud_account_test.go
+++ a/newrelic/data_source_newrelic_cloud_account_test.go
@@ -44,7 +44,7 @@ func TestAccNewRelicCloudAccountDataSource_Error(t *testing.T) {
 func testNewRelicCloudAccountDataSourceBasicConfig() string {
 	return fmt.Sprintf(`
 data "newrelic_cloud_account" "account" {
-	account_id = 3814156
+	account_id = 2508259
 	name = "NEW-DTK-NAME"
 	cloud_provider = "aws"
 }
diff --git b/newrelic/data_source_newrelic_entity.go a/newrelic/data_source_newrelic_entity.go
index c6e455a1..a52f5821 100644
--- b/newrelic/data_source_newrelic_entity.go
+++ a/newrelic/data_source_newrelic_entity.go
@@ -8,7 +8,6 @@ import (
 
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
-
 	"github.com/newrelic/newrelic-client-go/v2/pkg/entities"
 )
 
@@ -94,30 +93,24 @@ func dataSourceNewRelicEntityRead(ctx context.Context, d *schema.ResourceData, m
 	log.Printf("[INFO] Reading New Relic entities")
 
 	name := d.Get("name").(string)
-	name = escapeSingleQuote(name)
 	ignoreCase := d.Get("ignore_case").(bool)
-	entityType := strings.ToUpper(d.Get("type").(string))
-	domain := strings.ToUpper(d.Get("domain").(string))
-	tags := d.Get("tag").([]interface{})
+	entityType := entities.EntitySearchQueryBuilderType(strings.ToUpper(d.Get("type").(string)))
+	tags := expandEntityTag(d.Get("tag").([]interface{}))
+	domain := entities.EntitySearchQueryBuilderDomain(strings.ToUpper(d.Get("domain").(string)))
 
-	query := buildEntitySearchQuery(name, domain, entityType, tags)
+	params := entities.EntitySearchQueryBuilder{
+		Name:   name,
+		Type:   entityType,
+		Tags:   tags,
+		Domain: domain,
+	}
 
-	entityResults, err := client.Entities.GetEntitySearchByQueryWithContext(ctx,
-		entities.EntitySearchOptions{
-			CaseSensitiveTagMatching: ignoreCase,
-		},
-		query,
-		[]entities.EntitySearchSortCriteria{},
-	)
+	entityResults, err := client.Entities.GetEntitySearchWithContext(ctx, entities.EntitySearchOptions{}, "", params, []entities.EntitySearchSortCriteria{})
 
 	if err != nil {
 		return diag.FromErr(err)
 	}
 
-	if entityResults == nil {
-		return diag.FromErr(fmt.Errorf("GetEntitySearchByQuery response was nil"))
-	}
-
 	var entity *entities.EntityOutlineInterface
 	for _, e := range entityResults.Results.Entities {
 		// Conditional on case sensitive match
@@ -125,7 +118,6 @@ func dataSourceNewRelicEntityRead(ctx context.Context, d *schema.ResourceData, m
 		str := e.GetName()
 		str = strings.TrimSpace(str)
 
-		name = revertEscapedSingleQuote(name)
 		if strings.Compare(str, name) == 0 || (ignoreCase && strings.EqualFold(str, name)) {
 			entity = &e
 			break
@@ -133,7 +125,7 @@ func dataSourceNewRelicEntityRead(ctx context.Context, d *schema.ResourceData, m
 	}
 
 	if entity == nil {
-		return diag.FromErr(fmt.Errorf("no entities found for the provided search parameters, please ensure your schema attributes are valid"))
+		return diag.FromErr(fmt.Errorf("the name '%s' does not match any New Relic One entity for the given search parameters (ignore_case: %t)", name, ignoreCase))
 	}
 
 	return diag.FromErr(flattenEntityData(entity, d))
@@ -191,43 +183,29 @@ func flattenEntityData(entity *entities.EntityOutlineInterface, d *schema.Resour
 	return nil
 }
 
-func buildEntitySearchQuery(name string, domain string, entityType string, tags []interface{}) string {
-	var query string
+func expandEntityTag(cfg []interface{}) []entities.EntitySearchQueryBuilderTag {
+	var tags []entities.EntitySearchQueryBuilderTag
 
-	if name != "" {
-		query = fmt.Sprintf("name = '%s'", name)
+	if len(cfg) == 0 {
+		return tags
 	}
 
-	if domain != "" {
-		query = fmt.Sprintf("%s AND domain = '%s'", query, domain)
-	}
+	tags = make([]entities.EntitySearchQueryBuilderTag, 0, len(cfg))
 
-	if entityType != "" {
-		query = fmt.Sprintf("%s AND type = '%s'", query, entityType)
-	}
+	for _, t := range cfg {
+		cfgTag := t.(map[string]interface{})
 
-	if len(tags) > 0 {
-		query = fmt.Sprintf("%s AND %s", query, buildTagsQueryFragment(tags))
-	}
-
-	return query
-}
+		tag := entities.EntitySearchQueryBuilderTag{}
 
-func buildTagsQueryFragment(tags []interface{}) string {
-	var query string
+		if k, ok := cfgTag["key"]; ok {
+			tag.Key = k.(string)
+			if v, ok := cfgTag["value"]; ok {
+				tag.Value = v.(string)
 
-	for i, t := range tags {
-		tag := t.(map[string]interface{})
-
-		var q string
-		if i > 0 {
-			q = fmt.Sprintf(" AND tags.`%s` = '%s'", tag["key"], tag["value"].(string))
-		} else {
-			q = fmt.Sprintf("tags.`%s` = '%s'", tag["key"], tag["value"].(string))
+				tags = append(tags, tag)
+			}
 		}
-
-		query = fmt.Sprintf("%s%s", query, q)
 	}
 
-	return query
+	return tags
 }
diff --git b/newrelic/data_source_newrelic_entity_integration_test.go a/newrelic/data_source_newrelic_entity_integration_test.go
index cb29064c..5fe5dab2 100644
--- b/newrelic/data_source_newrelic_entity_integration_test.go
+++ a/newrelic/data_source_newrelic_entity_integration_test.go
@@ -30,26 +30,39 @@ func TestAccNewRelicEntityData_Basic(t *testing.T) {
 	})
 }
 
-// This test case checks if an entity with a single quote "'" in its name
-// is created, and is subsequently, fetched by the data source.
-func TestAccNewRelicSingleQuotedEntityData_Basic(t *testing.T) {
+func TestAccNewRelicEntityData_Missing(t *testing.T) {
 	resource.ParallelTest(t, resource.TestCase{
 		PreCheck: func() {
-			testAccSingleQuotedPreCheck(t)
+			testAccPreCheck(t)
 		},
 		Providers: testAccProviders,
 		Steps: []resource.TestStep{
 			{
-				Config: testAccNewRelicEntityDataConfig(testAccExpectedSingleQuotedApplicationName, testAccountID),
+				Config:      testAccNewRelicEntityDataConfig(strings.ToUpper(testAccExpectedApplicationName), testAccountID),
+				ExpectError: regexp.MustCompile(`the name '.*' does not match any New Relic One entity for the given search parameters \(ignore_case: false\)`),
+			},
+		},
+	})
+}
+
+func TestAccNewRelicEntityData_IgnoreCase(t *testing.T) {
+	resource.ParallelTest(t, resource.TestCase{
+		PreCheck: func() {
+			testAccPreCheck(t)
+		},
+		Providers: testAccProviders,
+		Steps: []resource.TestStep{
+			{
+				Config: testAccNewRelicEntityDataConfig_IgnoreCase(strings.ToUpper(testAccExpectedApplicationName), testAccountID),
 				Check: resource.ComposeTestCheckFunc(
-					testAccCheckNewRelicEntityDataExists(t, "data.newrelic_entity.entity", testAccExpectedSingleQuotedApplicationName),
+					testAccCheckNewRelicEntityDataExists(t, "data.newrelic_entity.entity", testAccExpectedApplicationName),
 				),
 			},
 		},
 	})
 }
 
-func TestAccNewRelicEntityData_Missing(t *testing.T) {
+func TestAccNewRelicEntityData_TypeFail(t *testing.T) {
 	resource.ParallelTest(t, resource.TestCase{
 		PreCheck: func() {
 			testAccPreCheck(t)
@@ -57,14 +70,14 @@ func TestAccNewRelicEntityData_Missing(t *testing.T) {
 		Providers: testAccProviders,
 		Steps: []resource.TestStep{
 			{
-				Config:      testAccNewRelicEntityDataConfig(strings.ToUpper(testAccExpectedApplicationName), testAccountID),
-				ExpectError: regexp.MustCompile(`no entities found`),
+				Config:      testAccNewRelicEntityDataConfig_InvalidType(strings.ToUpper(testAccExpectedApplicationName), testAccountID),
+				ExpectError: regexp.MustCompile("Argument \"queryBuilder\""),
 			},
 		},
 	})
 }
 
-func TestAccNewRelicEntityData_IgnoreCase(t *testing.T) {
+func TestAccNewRelicEntityData_DomainFail(t *testing.T) {
 	resource.ParallelTest(t, resource.TestCase{
 		PreCheck: func() {
 			testAccPreCheck(t)
@@ -72,10 +85,8 @@ func TestAccNewRelicEntityData_IgnoreCase(t *testing.T) {
 		Providers: testAccProviders,
 		Steps: []resource.TestStep{
 			{
-				Config: testAccNewRelicEntityDataConfig_IgnoreCase(strings.ToUpper(testAccExpectedApplicationName), testAccountID),
-				Check: resource.ComposeTestCheckFunc(
-					testAccCheckNewRelicEntityDataExists(t, "data.newrelic_entity.entity", testAccExpectedApplicationName),
-				),
+				Config:      testAccNewRelicEntityDataConfig_InvalidDomain(strings.ToUpper(testAccExpectedApplicationName), testAccountID),
+				ExpectError: regexp.MustCompile("Argument \"queryBuilder\""),
 			},
 		},
 	})
diff --git b/newrelic/data_source_newrelic_entity_test.go a/newrelic/data_source_newrelic_entity_test.go
index bbba7e7b..db42633c 100644
--- b/newrelic/data_source_newrelic_entity_test.go
+++ a/newrelic/data_source_newrelic_entity_test.go
@@ -6,94 +6,27 @@ package newrelic
 import (
 	"testing"
 
+	"github.com/newrelic/newrelic-client-go/v2/pkg/entities"
 	"github.com/stretchr/testify/require"
 )
 
-func TestBuildTagsQueryFragment_SingleTag(t *testing.T) {
-	t.Parallel()
-
-	expected := "tags.`tagKey` = 'tagValue'"
-
-	tags := []interface{}{
+func TestExpandEntityTag(t *testing.T) {
+	flattened := []interface{}{
 		map[string]interface{}{
-			"key":   "tagKey",
-			"value": "tagValue",
+			"key":   "my-key",
+			"value": "my-value",
 		},
 	}
 
-	result := buildTagsQueryFragment(tags)
-
-	require.Equal(t, expected, result)
-}
-
-func TestBuildTagsQueryFragment_MultipleTags(t *testing.T) {
-	t.Parallel()
-
-	expected := "tags.`tagKey` = 'tagValue' AND tags.`tagKey2` = 'tagValue2' AND tags.`tagKey3` = 'tagValue3'"
-
-	tags := []interface{}{
-		map[string]interface{}{
-			"key":   "tagKey",
-			"value": "tagValue",
-		},
-		map[string]interface{}{
-			"key":   "tagKey2",
-			"value": "tagValue2",
-		},
-		map[string]interface{}{
-			"key":   "tagKey3",
-			"value": "tagValue3",
+	expected := []entities.EntitySearchQueryBuilderTag{
+		{
+			Key:   "my-key",
+			Value: "my-value",
 		},
 	}
 
-	result := buildTagsQueryFragment(tags)
-
-	require.Equal(t, expected, result)
-}
-
-func TestBuildTagsQueryFragment_EmptyTags(t *testing.T) {
-	t.Parallel()
+	expanded := expandEntityTag(flattened)
 
-	expected := ""
-	tags := []interface{}{}
-
-	result := buildTagsQueryFragment(tags)
-
-	require.Equal(t, expected, result)
-}
-
-func TestBuildEntitySearchQuery(t *testing.T) {
-	t.Parallel()
-
-	tags := []interface{}{}
-
-	// Name only
-	expected := "name = 'Dummy App'"
-	result := buildEntitySearchQuery("Dummy App", "", "", tags)
-	require.Equal(t, expected, result)
-
-	// Name & Domain
-	expected = "name = 'Dummy App' AND domain = 'APM'"
-	result = buildEntitySearchQuery("Dummy App", "APM", "", tags)
-	require.Equal(t, expected, result)
-
-	// Name, domain, and type
-	expected = "name = 'Dummy App' AND domain = 'APM' AND type = 'APPLICATION'"
-	result = buildEntitySearchQuery("Dummy App", "APM", "APPLICATION", tags)
-	require.Equal(t, expected, result)
-
-	// Name, domain, type, and tags
-	expected = "name = 'Dummy App' AND domain = 'APM' AND type = 'APPLICATION' AND tags.`tagKey` = 'tagValue' AND tags.`tagKey2` = 'tagValue2'"
-	tags = []interface{}{
-		map[string]interface{}{
-			"key":   "tagKey",
-			"value": "tagValue",
-		},
-		map[string]interface{}{
-			"key":   "tagKey2",
-			"value": "tagValue2",
-		},
-	}
-	result = buildEntitySearchQuery("Dummy App", "APM", "APPLICATION", tags)
-	require.Equal(t, expected, result)
+	require.NotNil(t, expanded)
+	require.Equal(t, expected, expanded)
 }
diff --git b/newrelic/data_source_newrelic_service_level_alert_helper.go a/newrelic/data_source_newrelic_service_level_alert_helper.go
deleted file mode 100644
index af369ad1..00000000
--- b/newrelic/data_source_newrelic_service_level_alert_helper.go
+++ /dev/null
@@ -1,146 +0,0 @@
-package newrelic
-
-import (
-	"context"
-	"math/rand"
-	"strconv"
-
-	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
-)
-
-type serviceLevelAlertType string
-
-var serviceLevelAlertTypes = struct {
-	custom   serviceLevelAlertType
-	fastBurn serviceLevelAlertType
-}{
-	custom:   "custom",
-	fastBurn: "fast_burn",
-}
-
-func dataSourceNewRelicServiceLevelAlertHelper() *schema.Resource {
-	return &schema.Resource{
-		ReadContext: dataSourceNewRelicServiceLevelAlertHelperRead,
-		Schema: map[string]*schema.Schema{
-			"alert_type": {
-				Type:         schema.TypeString,
-				Required:     true,
-				ValidateFunc: validation.StringInSlice([]string{"custom", "fast_burn"}, true),
-			},
-			"sli_guid": {
-				Type:     schema.TypeString,
-				Required: true,
-			},
-			"slo_target": {
-				Type:         schema.TypeFloat,
-				Required:     true,
-				ValidateFunc: validation.FloatBetween(0, 100),
-			},
-			"slo_period": {
-				Type:         schema.TypeInt,
-				Required:     true,
-				ValidateFunc: validation.IntInSlice([]int{1, 7, 28}),
-			},
-			"custom_tolerated_budget_consumption": {
-				Type:         schema.TypeFloat,
-				Optional:     true,
-				ValidateFunc: validation.FloatBetween(0, 100),
-			},
-			"custom_evaluation_period": {
-				Type:         schema.TypeInt,
-				Optional:     true,
-				ValidateFunc: validation.IntAtLeast(1),
-			},
-			"tolerated_budget_consumption": {
-				Type:     schema.TypeFloat,
-				Computed: true,
-			},
-			"evaluation_period": {
-				Type:     schema.TypeInt,
-				Computed: true,
-			},
-			"threshold": {
-				Type:     schema.TypeFloat,
-				Computed: true,
-			},
-			"nrql": {
-				Type:     schema.TypeString,
-				Computed: true,
-			},
-		},
-	}
-}
-
-func dataSourceNewRelicServiceLevelAlertHelperRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-
-	var sliGUID = d.Get("sli_guid").(string)
-	rnd := strconv.Itoa(rand.Int())
-	d.SetId(sliGUID + rnd)
-
-	var sloPeriod = d.Get("slo_period").(int)
-	var sloTarget = d.Get("slo_target").(float64)
-	var alertType = d.Get("alert_type").(string)
-
-	_, tOk := d.GetOk("custom_tolerated_budget_consumption")
-	_, eOk := d.GetOk("custom_evaluation_period")
-
-	switch serviceLevelAlertType(alertType) {
-	case serviceLevelAlertTypes.fastBurn:
-		if tOk || eOk {
-			return diag.Errorf("For 'fast_burn' alert type do not fill 'custom_evaluation_period' or 'custom_tolerated_budget_consumption', we use 60 minutes and 2%%.")
-		}
-
-		threshold := calculateThreshold(sloTarget, 2, sloPeriod, 60)
-		err := d.Set("threshold", threshold)
-		if err != nil {
-			return diag.FromErr(err)
-		}
-
-		err = d.Set("evaluation_period", 60)
-		if err != nil {
-			return diag.FromErr(err)
-		}
-
-		err = d.Set("tolerated_budget_consumption", 2)
-		if err != nil {
-			return diag.FromErr(err)
-		}
-	case serviceLevelAlertTypes.custom:
-		if !tOk || !eOk {
-			return diag.Errorf("For 'custom' alert type the fields 'custom_evaluation_period' and 'custom_tolerated_budget_consumption' are mandatory.")
-		}
-
-		toleratedBudgetConsumption := d.Get("custom_tolerated_budget_consumption").(float64)
-		evaluationPeriod := d.Get("custom_evaluation_period").(int)
-		var threshold = calculateThreshold(sloTarget, toleratedBudgetConsumption, sloPeriod, evaluationPeriod)
-
-		err := d.Set("threshold", threshold)
-		if err != nil {
-			return diag.FromErr(err)
-		}
-
-		err = d.Set("evaluation_period", evaluationPeriod)
-		if err != nil {
-			return diag.FromErr(err)
-		}
-
-		err = d.Set("tolerated_budget_consumption", toleratedBudgetConsumption)
-		if err != nil {
-			return diag.FromErr(err)
-		}
-
-	}
-
-	err := d.Set("nrql", "FROM Metric SELECT 100 - clamp_max(sum(newrelic.sli.good) / sum(newrelic.sli.valid) * 100, 100) as 'SLO compliance'  WHERE sli.guid = '"+sliGUID+"'")
-	if err != nil {
-		return diag.FromErr(err)
-	}
-
-	return nil
-}
-
-func calculateThreshold(sloTarget float64, toleratedBudgetConsumption float64, sloPeriod int, evaluationPeriod int) float64 {
-	return (100.0 - sloTarget) * ((toleratedBudgetConsumption / 100 * float64(sloPeriod) * 24) / (float64(evaluationPeriod) / 60.0))
-}
diff --git b/newrelic/data_source_newrelic_service_level_alert_helper_integration_test.go a/newrelic/data_source_newrelic_service_level_alert_helper_integration_test.go
deleted file mode 100644
index c6077010..00000000
--- b/newrelic/data_source_newrelic_service_level_alert_helper_integration_test.go
+++ /dev/null
@@ -1,233 +0,0 @@
-//go:build integration
-// +build integration
-
-package newrelic
-
-import (
-	"fmt"
-	"regexp"
-	"testing"
-
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
-)
-
-func TestAccNewRelicServiceLevelAlertHelper_FastBurn(t *testing.T) {
-	resourceName := "data.newrelic_service_level_alert_helper.fast"
-
-	resource.ParallelTest(t, resource.TestCase{
-		Providers: testAccProviders,
-		Steps: []resource.TestStep{
-			{
-				Config: testAccNewRelicServiceLevelAlertHelperFastBurnConfig(),
-				Check: resource.ComposeTestCheckFunc(
-					testAccCheckNewRelicServiceLevelAlertHelper_FastBurn(resourceName),
-				),
-			},
-		},
-	})
-}
-
-func TestAccNewRelicServiceLevelAlertHelper_Custom(t *testing.T) {
-	resourceName := "data.newrelic_service_level_alert_helper.custom"
-
-	resource.ParallelTest(t, resource.TestCase{
-		Providers: testAccProviders,
-		Steps: []resource.TestStep{
-			{
-				Config: testAccNewRelicServiceLevelAlertHelperCustomConfig(),
-				Check: resource.ComposeTestCheckFunc(
-					testAccCheckNewRelicServiceLevelAlertHelper_Custom(resourceName),
-				),
-			},
-		},
-	})
-}
-
-func TestAccNewRelicServiceLevelAlertHelper_FastBurnError(t *testing.T) {
-	expectedErrorMessage := regexp.MustCompile(`For 'fast_burn' alert type do not fill 'custom_evaluation_period' or 'custom_tolerated_budget_consumption'.`)
-
-	resource.ParallelTest(t, resource.TestCase{
-		Providers: testAccProviders,
-		Steps: []resource.TestStep{
-			{
-				Config:      testAccNewRelicServiceLevelAlertHelperFastBurnEvaluationErrorConfig(),
-				ExpectError: expectedErrorMessage,
-			},
-			{
-				Config:      testAccNewRelicServiceLevelAlertHelperFastBurnBudgetErrorConfig(),
-				ExpectError: expectedErrorMessage,
-			},
-		},
-	})
-}
-
-func TestAccNewRelicServiceLevelAlertHelper_CustomError(t *testing.T) {
-	expectedErrorMessage := regexp.MustCompile(`For 'custom' alert type the fields 'custom_evaluation_period' and 'custom_tolerated_budget_consumption' are mandatory.`)
-
-	resource.ParallelTest(t, resource.TestCase{
-		Providers: testAccProviders,
-		Steps: []resource.TestStep{
-			{
-				Config:      testAccNewRelicServiceLevelAlertHelperCustomEvaluationErrorConfig(),
-				ExpectError: expectedErrorMessage,
-			},
-			{
-				Config:      testAccNewRelicServiceLevelAlertHelperCustomBudgetErrorConfig(),
-				ExpectError: expectedErrorMessage,
-			},
-		},
-	})
-}
-
-func testAccNewRelicServiceLevelAlertHelperFastBurnConfig() string {
-	return fmt.Sprintf(`
-data "newrelic_service_level_alert_helper" "fast" {
-    alert_type = "fast_burn"
-    sli_guid = "sliGuid"
-    slo_target = 99.9
-    slo_period = 28
-}
-`)
-}
-
-func testAccNewRelicServiceLevelAlertHelperFastBurnEvaluationErrorConfig() string {
-	return fmt.Sprintf(`
-data "newrelic_service_level_alert_helper" "fastBad" {
-    alert_type = "fast_burn"
-    sli_guid = "sliGuid"
-    slo_target = 99.9
-    slo_period = 28
-    custom_evaluation_period = 12
-}
-`)
-}
-
-func testAccNewRelicServiceLevelAlertHelperFastBurnBudgetErrorConfig() string {
-	return fmt.Sprintf(`
-data "newrelic_service_level_alert_helper" "fastBad" {
-    alert_type = "fast_burn"
-    sli_guid = "sliGuid"
-    slo_target = 99.9
-    slo_period = 28
-    custom_tolerated_budget_consumption = 34
-}
-`)
-}
-
-func testAccNewRelicServiceLevelAlertHelperCustomEvaluationErrorConfig() string {
-	return fmt.Sprintf(`
-data "newrelic_service_level_alert_helper" "customBad" {
-    alert_type = "custom"
-    sli_guid = "sliGuid"
-    slo_target = 99.9
-    slo_period = 28
-    custom_evaluation_period = 12
-}
-`)
-}
-
-func testAccNewRelicServiceLevelAlertHelperCustomBudgetErrorConfig() string {
-	return fmt.Sprintf(`
-data "newrelic_service_level_alert_helper" "customBad" {
-    alert_type = "custom"
-    sli_guid = "sliGuid"
-    slo_target = 99.9
-    slo_period = 28
-    custom_tolerated_budget_consumption = 34
-}
-`)
-}
-
-func testAccCheckNewRelicServiceLevelAlertHelper_FastBurn(n string) resource.TestCheckFunc {
-	return func(s *terraform.State) error {
-
-		rs, ok := s.RootModule().Resources[n]
-		if !ok {
-			return fmt.Errorf("not found: %s", n)
-		}
-		if rs.Primary.ID == "" {
-			return fmt.Errorf("No ID is set")
-		}
-
-		a := rs.Primary.Attributes
-
-		testCases := map[string]string{
-			"slo_period":                          "28",
-			"slo_target":                          "99.9",
-			"alert_type":                          "fast_burn",
-			"custom_evaluation_period":            "",
-			"custom_tolerated_budget_consumption": "",
-			"evaluation_period":                   "60",
-			"tolerated_budget_consumption":        "2",
-			"threshold":                           "1.3439999999999237",
-			"sli_guid":                            "sliGuid",
-			"nrql":                                "FROM Metric SELECT 100 - clamp_max(sum(newrelic.sli.good) / sum(newrelic.sli.valid) * 100, 100) as 'SLO compliance'  WHERE sli.guid = 'sliGuid'",
-		}
-
-		for attrName, expectedVal := range testCases {
-			if err := runTest(a, attrName, expectedVal); err != nil {
-				return err
-			}
-		}
-
-		return nil
-	}
-}
-
-func testAccNewRelicServiceLevelAlertHelperCustomConfig() string {
-	return fmt.Sprintf(`
-data "newrelic_service_level_alert_helper" "custom" {
-    alert_type = "custom"
-    sli_guid = "sliGuidCustom"
-    slo_target = 98
-    slo_period = 7
-    custom_tolerated_budget_consumption = 5
-    custom_evaluation_period = 120
-}
-`)
-}
-
-func testAccCheckNewRelicServiceLevelAlertHelper_Custom(n string) resource.TestCheckFunc {
-	return func(s *terraform.State) error {
-
-		rs, ok := s.RootModule().Resources[n]
-		if !ok {
-			return fmt.Errorf("not found: %s", n)
-		}
-		if rs.Primary.ID == "" {
-			return fmt.Errorf("No ID is set")
-		}
-
-		a := rs.Primary.Attributes
-
-		testCases := map[string]string{
-			"slo_period":                          "7",
-			"slo_target":                          "98",
-			"alert_type":                          "custom",
-			"custom_evaluation_period":            "120",
-			"custom_tolerated_budget_consumption": "5",
-			"evaluation_period":                   "120",
-			"tolerated_budget_consumption":        "5",
-			"threshold":                           "8.4",
-			"sli_guid":                            "sliGuidCustom",
-			"nrql":                                "FROM Metric SELECT 100 - clamp_max(sum(newrelic.sli.good) / sum(newrelic.sli.valid) * 100, 100) as 'SLO compliance'  WHERE sli.guid = 'sliGuidCustom'",
-		}
-
-		for attrName, expectedVal := range testCases {
-			if err := runTest(a, attrName, expectedVal); err != nil {
-				return err
-			}
-		}
-
-		return nil
-	}
-}
-
-func runTest(attributes map[string]string, name string, expected string) error {
-	actual := attributes[name]
-	if actual != expected {
-		return fmt.Errorf("Expected %s was %s, actual was %s", name, expected, actual)
-	}
-	return nil
-}
diff --git b/newrelic/data_source_newrelic_service_level_alert_helper_unit_test.go a/newrelic/data_source_newrelic_service_level_alert_helper_unit_test.go
deleted file mode 100644
index 973ec10c..00000000
--- b/newrelic/data_source_newrelic_service_level_alert_helper_unit_test.go
+++ /dev/null
@@ -1,22 +0,0 @@
-//go:build unit
-// +build unit
-
-package newrelic
-
-import (
-	"testing"
-
-	"github.com/stretchr/testify/require"
-)
-
-func TestCalculateAlertThreshold(t *testing.T) {
-	var sloPeriod = 28
-	var sloTarget = 99.9
-	var toleratedBudgetConsumption = 2.0
-	var evaluationPeriod = 60
-
-	threshold := calculateThreshold(sloTarget, toleratedBudgetConsumption, sloPeriod, evaluationPeriod)
-
-	require.NotNil(t, threshold)
-	require.Equal(t, 1.3439999999999237, threshold)
-}
diff --git b/newrelic/helpers.go a/newrelic/helpers.go
index 4229d5df..45b54d55 100644
--- b/newrelic/helpers.go
+++ a/newrelic/helpers.go
@@ -5,7 +5,6 @@ import (
 	"encoding/json"
 	"fmt"
 	"log"
-	"regexp"
 	"sort"
 	"strconv"
 	"strings"
@@ -131,31 +130,3 @@ func mergeSchemas(schemas ...map[string]*schema.Schema) map[string]*schema.Schem
 	}
 	return schema
 }
-
-// This method helps identify single quotes in the argument 'name', to
-// prefix the '\' escape character before single quotes, in order to allow
-// NRQL to parse the query without errors caused by the single quote '.
-func escapeSingleQuote(name string) string {
-	unescapedSingleQuoteRegex := regexp.MustCompile(`'`)
-	quoteFormattedName := unescapedSingleQuoteRegex.ReplaceAllString(name, "\\'")
-	if strings.Compare(quoteFormattedName, name) != 0 {
-		log.Printf("Changing the name ( %s ---> %s ) since a single quote has been identified.", name, quoteFormattedName)
-		name = quoteFormattedName
-	}
-
-	return name
-}
-
-// This method helps identify escape characters preceding single quotes (')
-// and eliminates the escape characters to match it with the NRQL expression
-// parsed by the Terraform Provider.
-func revertEscapedSingleQuote(name string) string {
-	escapedSingleQuoteRegex := regexp.MustCompile(`\\'`)
-	quoteFormattedName := escapedSingleQuoteRegex.ReplaceAllString(name, "'")
-	if strings.Compare(quoteFormattedName, name) != 0 {
-		log.Printf("Reverting the name ( %s ---> %s ) since a single quote has been identified.", quoteFormattedName, name)
-		name = quoteFormattedName
-	}
-
-	return name
-}
diff --git b/newrelic/provider.go a/newrelic/provider.go
index f0839972..04279b42 100755
--- b/newrelic/provider.go
+++ a/newrelic/provider.go
@@ -132,7 +132,6 @@ func Provider() *schema.Provider {
 			"newrelic_synthetics_private_location":  dataSourceNewRelicSyntheticsPrivateLocation(),
 			"newrelic_synthetics_secure_credential": dataSourceNewRelicSyntheticsSecureCredential(),
 			"newrelic_test_grok_pattern":            dataSourceNewRelicTestGrokPattern(),
-			"newrelic_service_level_alert_helper":   dataSourceNewRelicServiceLevelAlertHelper(),
 		},
 
 		ResourcesMap: map[string]*schema.Resource{
@@ -143,7 +142,6 @@ func Provider() *schema.Provider {
 			"newrelic_alert_policy_channel":                     resourceNewRelicAlertPolicyChannel(),
 			"newrelic_api_access_key":                           resourceNewRelicAPIAccessKey(),
 			"newrelic_application_settings":                     resourceNewRelicApplicationSettings(),
-			"newrelic_browser_application":                      resourceNewRelicBrowserApplication(),
 			"newrelic_cloud_aws_govcloud_link_account":          resourceNewRelicAwsGovCloudLinkAccount(),
 			"newrelic_cloud_aws_govcloud_integrations":          resourceNewRelicAwsGovCloudIntegrations(),
 			"newrelic_cloud_aws_integrations":                   resourceNewRelicCloudAwsIntegrations(),
@@ -152,7 +150,6 @@ func Provider() *schema.Provider {
 			"newrelic_cloud_azure_integrations":                 resourceNewRelicCloudAzureIntegrations(),
 			"newrelic_cloud_gcp_integrations":                   resourceNewrelicCloudGcpIntegrations(),
 			"newrelic_cloud_gcp_link_account":                   resourceNewRelicCloudGcpLinkAccount(),
-			"newrelic_data_partition_rule":                      resourceNewRelicDataPartition(),
 			"newrelic_entity_tags":                              resourceNewRelicEntityTags(),
 			"newrelic_events_to_metrics_rule":                   resourceNewRelicEventsToMetricsRule(),
 			"newrelic_infra_alert_condition":                    resourceNewRelicInfraAlertCondition(),
@@ -179,7 +176,6 @@ func Provider() *schema.Provider {
 			"newrelic_synthetics_step_monitor":                  resourceNewRelicSyntheticsStepMonitor(),
 			"newrelic_workflow":                                 resourceNewRelicWorkflow(),
 			"newrelic_workload":                                 resourceNewRelicWorkload(),
-			"newrelic_account_management":                       resourceNewRelicWorkloadAccountManagement(),
 		},
 	}
 
diff --git b/newrelic/provider_integration_test.go a/newrelic/provider_integration_test.go
index 92155694..71aa08af 100644
--- b/newrelic/provider_integration_test.go
+++ a/newrelic/provider_integration_test.go
@@ -32,7 +32,7 @@ func TestAccNewRelicProvider_Region(t *testing.T) {
 	rName := acctest.RandString(5)
 
 	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:     func() { testAccPreCheckEnvVars(t) },
+		PreCheck:     func() { testAccPreCheck(t) },
 		Providers:    testAccProviders,
 		CheckDestroy: func(*terraform.State) error { return nil },
 		Steps: []resource.TestStep{
diff --git b/newrelic/provider_test.go a/newrelic/provider_test.go
index eb22d5bb..951c0536 100644
--- b/newrelic/provider_test.go
+++ a/newrelic/provider_test.go
@@ -12,7 +12,6 @@ import (
 	"fmt"
 	"os"
 	"strconv"
-	"strings"
 	"testing"
 	"time"
 
@@ -24,29 +23,25 @@ import (
 	"github.com/newrelic/newrelic-client-go/v2/pkg/apm"
 	"github.com/newrelic/newrelic-client-go/v2/pkg/config"
 	"github.com/newrelic/newrelic-client-go/v2/pkg/entities"
-	"github.com/newrelic/newrelic-client-go/v2/pkg/logconfigurations"
 )
 
 var (
-	testAccExpectedAlertChannelName            string
-	testAccExpectedApplicationName             string
-	testAccExpectedSingleQuotedApplicationName string
-	testAccExpectedAlertPolicyName             string
-	testAccAPIKey                              string
-	testAccProviders                           map[string]*schema.Provider
-	testAccProvider                            *schema.Provider
-	testAccountID                              int
-	testSubaccountID                           int
-	testAccountName                            string
-	testAccAPMEntityCreated                    = false
-	testAccAPMSingleQuotedEntityCreated        = false
-	testAccCleanupComplete                     = false
+	testAccExpectedAlertChannelName string
+	testAccExpectedApplicationName  string
+	testAccExpectedAlertPolicyName  string
+	testAccAPIKey                   string
+	testAccProviders                map[string]*schema.Provider
+	testAccProvider                 *schema.Provider
+	testAccountID                   int
+	testSubaccountID                int
+	testAccountName                 string
+	testAccAPMEntityCreated         = false
+	testAccCleanupComplete          = false
 )
 
 func init() {
 	testAccExpectedAlertChannelName = fmt.Sprintf("%s tf-test@example.com", acctest.RandString(5))
 	testAccExpectedApplicationName = fmt.Sprintf("tf_test_%s", acctest.RandString(10))
-	testAccExpectedSingleQuotedApplicationName = fmt.Sprintf("tf_test_quote_%s%s%s", acctest.RandString(5), "'", acctest.RandString(5))
 	testAccExpectedAlertPolicyName = fmt.Sprintf("tf_test_%s", acctest.RandString(10))
 	testAccProvider = Provider()
 	testAccProviders = map[string]*schema.Provider{
@@ -76,14 +71,12 @@ func init() {
 func testAccNewRelicProviderConfig(region string, baseURL string, resourceName string) string {
 	return fmt.Sprintf(`
 provider "newrelic" {
-	alias = "integration-test-provider"
 	region = "%[1]s"
 
 	%[2]s
 }
 
 resource "newrelic_alert_policy" "foo" {
-	provider = newrelic.integration-test-provider
   name = "tf-test-%[3]s"
 }
 `, region, baseURL, resourceName)
@@ -92,72 +85,45 @@ resource "newrelic_alert_policy" "foo" {
 func testAccPreCheck(t *testing.T) {
 	testAccPreCheckEnvVars(t)
 
-	// Clean up old data partitions
-	//testAccLogDataPartitionsCleanup(t)
-
-	// Cleaning up the Parsing rules
-	//testAccLogParsingRulesCleanup(t)
-
 	// Create a test application for use in newrelic_alert_condition and other tests
 	if !testAccAPMEntityCreated {
-		testAccCreateEntity(t, testAccExpectedApplicationName)
-		testAccAPMEntityCreated = true
-	}
-}
-
-func testAccSingleQuotedPreCheck(t *testing.T) {
-	testAccPreCheckEnvVars(t)
-
-	// Clean up old data partitions
-	//testAccLogDataPartitionsCleanup(t)
-
-	// Cleaning up the Parsing rules
-	//testAccLogParsingRulesCleanup(t)
-
-	// Create a test application for use in tests in the "entity" data source
-	// comprising an apostrophe "'".
-	if !testAccAPMSingleQuotedEntityCreated {
-		testAccCreateEntity(t, testAccExpectedSingleQuotedApplicationName)
-		testAccAPMSingleQuotedEntityCreated = true
-	}
-}
-
-func testAccCreateEntity(t *testing.T, name string) {
-	// Clean up old instances of the applications
-	testAccApplicationsCleanup(t)
+		// Clean up old instances of the applications
+		testAccApplicationsCleanup(t)
+
+		// Create the application
+		testAccCreateApplication(t)
+
+		// We need to give the entity search engine time to index the app so
+		// we try to get the entity, and retry if it fails for a certain amount
+		// of time
+		client := entities.New(config.Config{
+			PersonalAPIKey: testAccAPIKey,
+		})
+		params := entities.EntitySearchQueryBuilder{
+			Name:   testAccExpectedApplicationName,
+			Type:   "APPLICATION",
+			Domain: "APM",
+		}
 
-	// Create the application, with the given 'name' in the argument.
-	testAccCreateApplication(t, name)
+		retryErr := resource.RetryContext(context.Background(), 30*time.Second, func() *resource.RetryError {
+			entityResults, err := client.GetEntitySearchWithContext(context.Background(), entities.EntitySearchOptions{}, "", params, []entities.EntitySearchSortCriteria{})
+			if err != nil {
+				return resource.RetryableError(err)
+			}
 
-	// We need to give the entity search engine time to index the app so
-	// we try to get the entity, and retry if it fails for a certain amount
-	// of time
-	client := entities.New(config.Config{
-		PersonalAPIKey: testAccAPIKey,
-	})
-	params := entities.EntitySearchQueryBuilder{
-		Name:   escapeSingleQuote(name),
-		Type:   "APPLICATION",
-		Domain: "APM",
-	}
+			if entityResults.Count != 1 {
+				return resource.RetryableError(fmt.Errorf("Entity not found, or found more than one"))
+			}
 
-	retryErr := resource.RetryContext(context.Background(), 30*time.Second, func() *resource.RetryError {
-		entityResults, err := client.GetEntitySearchWithContext(context.Background(), entities.EntitySearchOptions{}, "", params, []entities.EntitySearchSortCriteria{})
-		if err != nil {
-			return resource.RetryableError(err)
-		}
+			return nil
+		})
 
-		if entityResults.Count != 1 {
-			return resource.RetryableError(fmt.Errorf("Entity not found, or found more than one"))
+		if retryErr != nil {
+			t.Fatalf("Unable to find application entity: %s", retryErr)
 		}
 
-		return nil
-	})
-
-	if retryErr != nil {
-		t.Fatalf("Unable to find application entity: %s", retryErr)
+		testAccAPMEntityCreated = true
 	}
-
 }
 
 func testAccPreCheckEnvVars(t *testing.T) {
@@ -174,10 +140,10 @@ func testAccPreCheckEnvVars(t *testing.T) {
 	}
 }
 
-func testAccCreateApplication(t *testing.T, name string) {
+func testAccCreateApplication(t *testing.T) {
 	app, err := newrelic.NewApplication(
 		newrelic.ConfigFromEnvironment(),
-		newrelic.ConfigAppName(name),
+		newrelic.ConfigAppName(testAccExpectedApplicationName),
 		newrelic.ConfigLicense(os.Getenv("NEW_RELIC_LICENSE_KEY")),
 	)
 
@@ -240,75 +206,5 @@ func testAccApplicationsCleanup(t *testing.T) {
 // resources with names that start with "tf-test-". This helps avoid
 // deleting any resources that might be cross-account, such as workloads.
 func generateNameForIntegrationTestResource() string {
-	return fmt.Sprintf("tf-test-%s", acctest.RandString(15))
-}
-
-// Deleting the data partitions as they start with "Log_Test_"
-// Only run if the data partitions limit exceeded
-func testAccLogDataPartitionsCleanup(t *testing.T) {
-	// Only run cleanup once per test run
-	if testAccCleanupComplete {
-		return
-	}
-	client := logconfigurations.New(config.Config{
-		PersonalAPIKey: testAccAPIKey,
-	})
-	t.Logf("***** Deleting data partitions ******")
-	dataPartitions, err := client.GetDataPartitionRules(testAccountID)
-	if err != nil {
-		t.Logf("error fetching data partitions: %s", err)
-	}
-	deletedDataPartitionCount := 0
-
-	for _, v := range *dataPartitions {
-		str := string(v.TargetDataPartition)
-		if (strings.Contains(str, "Log_Test_") || strings.Contains(str, "Log_testName_")) && v.Deleted != true {
-			_, err = client.LogConfigurationsDeleteDataPartitionRule(testAccountID, v.ID)
-
-			if err == nil {
-				deletedDataPartitionCount++
-				t.Logf("deleted data partition %s (%d/%d)", v.ID, deletedDataPartitionCount, len(*dataPartitions))
-			}
-		}
-	}
-
-	t.Logf("testacc cleanup of %d DataPartition complete", deletedDataPartitionCount)
-
-	testAccCleanupComplete = true
-
-}
-
-// delete the parsing rules
-// Only run if the limit is exceeded
-func testAccLogParsingRulesCleanup(t *testing.T) {
-	// Only run cleanup once per test run
-	if testAccCleanupComplete {
-		return
-	}
-	client := logconfigurations.New(config.Config{
-		PersonalAPIKey: testAccAPIKey,
-	})
-	t.Logf("***** Deleting parsing rules ******")
-	rules, err := client.GetParsingRules(testAccountID)
-	if err != nil {
-		t.Logf("error fetching data parsing rules: %s", err)
-	}
-	deletedCount := 0
-
-	for _, v := range *rules {
-		str := string(v.Description)
-		if (strings.Contains(str, "testDescription_") || strings.Contains(str, "tf_test_")) && v.Deleted != true {
-			_, err = client.LogConfigurationsDeleteParsingRule(testAccountID, v.ID)
-
-			if err == nil {
-				deletedCount++
-				t.Logf("deleted parsing rules %s (%d/%d)", v.ID, deletedCount, len(*rules))
-			}
-		}
-	}
-
-	t.Logf("testacc cleanup of %d DataPartition complete", deletedCount)
-
-	testAccCleanupComplete = true
-
+	return fmt.Sprintf("tf_test_%s", acctest.RandString(5))
 }
diff --git b/newrelic/provider_unit_test.go a/newrelic/provider_unit_test.go
index 67d14760..0a0089b4 100644
--- b/newrelic/provider_unit_test.go
+++ a/newrelic/provider_unit_test.go
@@ -19,7 +19,7 @@ func TestGenerateNameForIntegrationTestResource(t *testing.T) {
 	t.Parallel()
 
 	result := generateNameForIntegrationTestResource()
-	require.Contains(t, result, "tf-test-")
+	require.Contains(t, result, "tf_test_")
 }
 
 func TestBuildUserAgentStringWithDefaultServiceName(t *testing.T) {
diff --git b/newrelic/resource_newrelic_account_management.go a/newrelic/resource_newrelic_account_management.go
deleted file mode 100644
index 7eca150b..00000000
--- b/newrelic/resource_newrelic_account_management.go
+++ /dev/null
@@ -1,144 +0,0 @@
-package newrelic
-
-import (
-	"context"
-	"fmt"
-	"strconv"
-	"time"
-
-	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
-	"github.com/newrelic/newrelic-client-go/v2/newrelic"
-	"github.com/newrelic/newrelic-client-go/v2/pkg/accountmanagement"
-)
-
-func resourceNewRelicWorkloadAccountManagement() *schema.Resource {
-	return &schema.Resource{
-		CreateContext: resourceNewRelicAccountCreate,
-		ReadContext:   resourceNewRelicAccountRead,
-		UpdateContext: resourceNewRelicAccountUpdate,
-		DeleteContext: resourceNewRelicAccountDelete,
-		Importer: &schema.ResourceImporter{
-			StateContext: schema.ImportStatePassthroughContext,
-		},
-		Schema: map[string]*schema.Schema{
-			"name": {
-				Type:        schema.TypeString,
-				Description: "Name of the account to be created",
-				Required:    true,
-			},
-			"region": {
-				Type:         schema.TypeString,
-				Description:  "A description of what this parsing rule represents.",
-				ValidateFunc: validation.StringInSlice([]string{"us01", "eu01"}, false),
-				Required:     true,
-			},
-		},
-		Timeouts: &schema.ResourceTimeout{
-			Create: schema.DefaultTimeout(10 * time.Second),
-		},
-	}
-
-}
-
-func resourceNewRelicAccountRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	providerConfig := meta.(*ProviderConfig)
-	client := providerConfig.NewClient
-
-	retryErr := resource.RetryContext(ctx, d.Timeout(schema.TimeoutCreate), func() *resource.RetryError {
-		account, err := getCreatedAccountByID(client, d.Id())
-		//		fmt.Println("read", account.ID, err)
-		if err != nil {
-			return resource.NonRetryableError(err)
-		}
-
-		if account == nil {
-			return resource.RetryableError(fmt.Errorf("account not found"))
-		}
-		_ = d.Set("region", account.RegionCode)
-		_ = d.Set("name", account.Name)
-
-		return nil
-	})
-
-	if retryErr != nil {
-		return diag.FromErr(retryErr)
-	}
-	return nil
-}
-
-func resourceNewRelicAccountCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	providerConfig := meta.(*ProviderConfig)
-	client := providerConfig.NewClient
-
-	createAccountInput := accountmanagement.AccountManagementCreateInput{
-		Name:       d.Get("name").(string),
-		RegionCode: d.Get("region").(string),
-	}
-	created, err := client.AccountManagement.AccountManagementCreateAccount(createAccountInput)
-
-	if err != nil {
-		return diag.FromErr(err)
-	}
-
-	if created == nil {
-		return diag.Errorf("err: Account not created. Please check the input details")
-	}
-	accountID := created.ManagedAccount.ID
-
-	d.SetId(strconv.Itoa(accountID))
-	return resourceNewRelicAccountRead(ctx, d, meta)
-}
-func resourceNewRelicAccountUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	providerConfig := meta.(*ProviderConfig)
-	client := providerConfig.NewClient
-	accountID, err := strconv.Atoi(d.Id())
-	if err != nil {
-		return diag.FromErr(err)
-	}
-	updateAccountInput := accountmanagement.AccountManagementUpdateInput{
-		Name: d.Get("name").(string),
-		ID:   accountID,
-	}
-	updated, err := client.AccountManagement.AccountManagementUpdateAccount(updateAccountInput)
-
-	if err != nil {
-		return diag.FromErr(err)
-	}
-
-	if updated == nil {
-		return diag.Errorf("err: Account not Updated. Please check the input details")
-	}
-
-	return resourceNewRelicAccountRead(ctx, d, meta)
-}
-
-func resourceNewRelicAccountDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	var diags diag.Diagnostics
-	diags = append(diags, diag.Diagnostic{
-		Severity: diag.Warning,
-		Summary:  "Account cannot be deleted via Terraform. https://docs.newrelic.com/docs/apis/nerdgraph/examples/manage-accounts-nerdgraph/#delete",
-	})
-	return diags
-}
-
-func getCreatedAccountByID(client *newrelic.NewRelic, ruleID string) (*accountmanagement.AccountManagementManagedAccount, error) {
-
-	accountID, err := strconv.Atoi(ruleID)
-	if err != nil {
-		return nil, err
-	}
-	accounts, err := client.AccountManagement.GetManagedAccounts()
-	if err != nil && accounts == nil {
-		return nil, err
-	}
-	for _, account := range *accounts {
-		if account.ID == accountID {
-			return &account, nil
-		}
-	}
-	return nil, nil
-
-}
diff --git b/newrelic/resource_newrelic_account_management_test.go a/newrelic/resource_newrelic_account_management_test.go
deleted file mode 100644
index 05533432..00000000
--- b/newrelic/resource_newrelic_account_management_test.go
+++ /dev/null
@@ -1,148 +0,0 @@
-//go:build integration
-// +build integration
-
-package newrelic
-
-import (
-	"fmt"
-	"regexp"
-	"testing"
-
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
-)
-
-func TestAccNewRelicAccountManagement(t *testing.T) {
-	resourceName := "newrelic_account_management.foo"
-	rName := acctest.RandString(7)
-	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:  func() { testAccPreCheckEnvVars(t) },
-		Providers: testAccProviders,
-		Steps: []resource.TestStep{
-			//Import
-			{
-				ImportState:        true,
-				Config:             testAccNewRelicAccountImportConfig(),
-				ResourceName:       resourceName,
-				ImportStateId:      "3833494",
-				ImportStateCheck:   testAccCheckNewRelicAccountImportCheck(resourceName),
-				ImportStatePersist: true,
-			},
-			//update
-			{
-				Config: testAccNewRelicAccountUpdateConfig("Dont Delete " + rName),
-				Check: resource.ComposeTestCheckFunc(
-					testAccCheckNewRelicAccountExists(resourceName)),
-			},
-		},
-	})
-}
-func TestAccNewRelicAccountManagementInvalidRegion(t *testing.T) {
-	rName := acctest.RandString(7)
-	expectedErrorMsg := regexp.MustCompile(`expected region to be one of \[us01 eu01\], got abcd01`)
-	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:  func() { testAccPreCheck(t) },
-		Providers: testAccProviders,
-		Steps: []resource.TestStep{
-			//create
-			{
-				Config:      testAccNewRelicAccountCreateInvalidRegionConfig("Test " + rName),
-				ExpectError: expectedErrorMsg,
-			},
-		},
-	})
-}
-func TestAccNewRelicAccountManagementInCorrectRegion(t *testing.T) {
-	rName := acctest.RandString(7)
-	expectedErrorMsg := regexp.MustCompile(`An error occurred resolving this field`)
-	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:  func() { testAccPreCheck(t) },
-		Providers: testAccProviders,
-		Steps: []resource.TestStep{
-			//create
-			{
-				Config:      testAccNewRelicAccountCreateConfigInCorrectRegion("Test " + rName),
-				ExpectError: expectedErrorMsg,
-			},
-		},
-	})
-}
-
-func testAccNewRelicAccountImportConfig() string {
-	return fmt.Sprintf(`
-resource "newrelic_account_management" "foo"{
-name =""
-	region= "us01"
-}
-`)
-}
-
-func testAccNewRelicAccountUpdateConfig(name string) string {
-	return fmt.Sprintf(`
-resource "newrelic_account_management" "foo"{
-	name=  "%[1]s"
-	region= "us01"
-}
-`, name)
-}
-
-func testAccCheckNewRelicAccountExists(n string) resource.TestCheckFunc {
-	return func(s *terraform.State) error {
-
-		rs, ok := s.RootModule().Resources[n]
-		if !ok {
-			return fmt.Errorf("not found: %s", n)
-		}
-		if rs.Primary.ID == "" {
-			return fmt.Errorf("no ID is set")
-		}
-
-		client := testAccProvider.Meta().(*ProviderConfig).NewClient
-
-		account, err := getCreatedAccountByID(client, rs.Primary.ID)
-		if err != nil {
-			return err
-		}
-		if account == nil {
-			return fmt.Errorf("account not found")
-		}
-
-		return nil
-	}
-}
-
-func testAccNewRelicAccountCreateInvalidRegionConfig(name string) string {
-	return fmt.Sprintf(`
-resource "newrelic_account_management" "foo"{
-	name=  "%[1]s"
-	region= "abcd01"
-}
-`, name)
-}
-
-func testAccNewRelicAccountCreateConfigInCorrectRegion(name string) string {
-	return fmt.Sprintf(`
-resource "newrelic_account_management" "foo"{
-	name=  "%[1]s"
-	region= "eu01"
-}
-`, name)
-}
-
-func testAccCheckNewRelicAccountImportCheck(resourceName string) resource.ImportStateCheckFunc {
-	return func(state []*terraform.InstanceState) error {
-		expectedRegionCode := "us01"
-		region := state[0].Attributes["region"]
-		if region != expectedRegionCode {
-			return fmt.Errorf(
-				"%s: Attribute '%s' expected %#v got nil",
-				resourceName,
-				"region.#",
-				expectedRegionCode,
-			)
-		}
-
-		return nil
-	}
-}
diff --git b/newrelic/resource_newrelic_agent_application_browser.go a/newrelic/resource_newrelic_agent_application_browser.go
deleted file mode 100644
index f2c7bc91..00000000
--- b/newrelic/resource_newrelic_agent_application_browser.go
+++ /dev/null
@@ -1,182 +0,0 @@
-package newrelic
-
-import (
-	"context"
-	"fmt"
-	"log"
-	"strings"
-
-	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
-	"github.com/newrelic/newrelic-client-go/v2/pkg/agentapplications"
-	"github.com/newrelic/newrelic-client-go/v2/pkg/common"
-	"github.com/newrelic/newrelic-client-go/v2/pkg/entities"
-)
-
-func resourceNewRelicBrowserApplication() *schema.Resource {
-	return &schema.Resource{
-		CreateContext: resourceNewRelicBrowserApplicationCreate,
-		ReadContext:   resourceNewRelicBrowserApplicationRead,
-		UpdateContext: resourceNewRelicBrowserApplicationUpdate,
-		DeleteContext: resourceNewRelicBrowserApplicationDelete,
-		Importer: &schema.ResourceImporter{
-			StateContext: schema.ImportStatePassthroughContext,
-		},
-		Schema: map[string]*schema.Schema{
-			"name": {
-				Type:        schema.TypeString,
-				Required:    true,
-				Description: "The name of the application to monitor.",
-			},
-			"cookies_enabled": {
-				Type:        schema.TypeBool,
-				Optional:    true,
-				Default:     true,
-				Description: "Configure cookies. The default is enabled: true.",
-			},
-			"distributed_tracing_enabled": {
-				Type:        schema.TypeBool,
-				Optional:    true,
-				Default:     true,
-				Description: "Configure distributed tracing in browser apps. The default is enabled: true.",
-			},
-			"loader_type": {
-				Type:        schema.TypeString,
-				Optional:    true,
-				Default:     agentapplications.AgentApplicationBrowserLoaderTypes.SPA,
-				Description: `Determines which browser loader is configured. The default is "SPA".`,
-				DiffSuppressFunc: func(k, old, new string, d *schema.ResourceData) bool {
-					return strings.EqualFold(old, new)
-				},
-			},
-			"guid": {
-				Type:        schema.TypeString,
-				Computed:    true,
-				Description: "The GUID of the browser application.",
-			},
-			"account_id": {
-				Type:        schema.TypeInt,
-				Optional:    true,
-				Computed:    true,
-				Description: "The account ID.",
-			},
-		},
-	}
-}
-
-func resourceNewRelicBrowserApplicationCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	providerConfig := meta.(*ProviderConfig)
-	client := providerConfig.NewClient
-
-	accountID := selectAccountID(providerConfig, d)
-	appName := d.Get("name").(string)
-	settingsInput := agentapplications.AgentApplicationBrowserSettingsInput{
-		CookiesEnabled:            d.Get("cookies_enabled").(bool),
-		DistributedTracingEnabled: d.Get("distributed_tracing_enabled").(bool),
-		LoaderType:                agentapplications.AgentApplicationBrowserLoader(strings.ToUpper(d.Get("loader_type").(string))),
-	}
-
-	resp, err := client.AgentApplications.AgentApplicationCreateBrowserWithContext(ctx, accountID, appName, settingsInput)
-	if err != nil {
-		d.SetId("")
-		return diag.FromErr(err)
-	}
-
-	if resp == nil {
-		d.SetId("")
-		return diag.FromErr(fmt.Errorf("potential error creating browser application resource, response was nil"))
-	}
-
-	d.SetId(string(resp.GUID))
-	_ = d.Set("name", resp.Name)
-	_ = d.Set("account_id", accountID)
-	_ = d.Set("cookies_enabled", resp.Settings.CookiesEnabled)
-	_ = d.Set("distributed_tracing_enabled", resp.Settings.DistributedTracingEnabled)
-	_ = d.Set("loader_type", string(resp.Settings.LoaderType))
-	_ = d.Set("guid", string(resp.GUID))
-
-	return nil
-}
-
-func resourceNewRelicBrowserApplicationRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	providerConfig := meta.(*ProviderConfig)
-	client := providerConfig.NewClient
-
-	guid := d.Id()
-
-	resp, err := client.Entities.GetEntityWithContext(ctx, common.EntityGUID(guid))
-	if err != nil {
-		return diag.FromErr(err)
-	}
-
-	if resp == nil {
-		d.SetId("")
-		return diag.FromErr(fmt.Errorf("entity with GUID %s was nil", guid))
-	}
-
-	switch (*resp).(type) {
-	case *entities.BrowserApplicationEntity:
-		entity := (*resp).(*entities.BrowserApplicationEntity)
-
-		d.SetId(string(entity.GUID))
-		_ = d.Set("name", entity.Name)
-		_ = d.Set("cookies_enabled", entity.BrowserSettings.BrowserMonitoring.Privacy.CookiesEnabled)
-		_ = d.Set("distributed_tracing_enabled", entity.BrowserSettings.BrowserMonitoring.DistributedTracing.Enabled)
-		_ = d.Set("loader_type", string(entity.BrowserSettings.BrowserMonitoring.Loader))
-		_ = d.Set("guid", string(entity.GUID))
-		_ = d.Set("account_id", entity.AccountID)
-	}
-
-	return nil
-}
-
-func resourceNewRelicBrowserApplicationUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	providerConfig := meta.(*ProviderConfig)
-	client := providerConfig.NewClient
-
-	settingsInput := agentapplications.AgentApplicationSettingsUpdateInput{
-		BrowserMonitoring: &agentapplications.AgentApplicationSettingsBrowserMonitoringInput{
-			DistributedTracing: &agentapplications.AgentApplicationSettingsBrowserDistributedTracingInput{
-				Enabled: d.Get("distributed_tracing_enabled").(bool),
-			},
-			Privacy: &agentapplications.AgentApplicationSettingsBrowserPrivacyInput{
-				CookiesEnabled: d.Get("cookies_enabled").(bool),
-			},
-		},
-	}
-
-	guid := d.Id()
-
-	resp, err := client.AgentApplications.AgentApplicationSettingsUpdateWithContext(ctx, common.EntityGUID(guid), settingsInput)
-	if err != nil {
-		d.SetId("")
-		return diag.FromErr(err)
-	}
-
-	if resp == nil {
-		return diag.FromErr(fmt.Errorf("entity with GUID %s was nil", guid))
-	}
-
-	d.SetId(string(resp.GUID))
-	_ = d.Set("name", resp.Name)
-	_ = d.Set("cookies_enabled", resp.BrowserSettings.BrowserMonitoring.Privacy.CookiesEnabled)
-	_ = d.Set("distributed_tracing_enabled", resp.BrowserSettings.BrowserMonitoring.DistributedTracing.Enabled)
-	_ = d.Set("loader_type", string(resp.BrowserSettings.BrowserMonitoring.Loader))
-	_ = d.Set("guid", string(resp.GUID))
-
-	return nil
-}
-
-func resourceNewRelicBrowserApplicationDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	client := meta.(*ProviderConfig).NewClient
-	guid := d.Id()
-
-	log.Printf("[INFO] Deleting New Relic browser application %s", guid)
-
-	_, err := client.AgentApplications.AgentApplicationDeleteWithContext(ctx, common.EntityGUID(guid))
-	if err != nil {
-		return diag.FromErr(err)
-	}
-
-	return diag.FromErr(err)
-}
diff --git b/newrelic/resource_newrelic_agent_application_browser_integration_test.go a/newrelic/resource_newrelic_agent_application_browser_integration_test.go
deleted file mode 100644
index 9fe12d08..00000000
--- b/newrelic/resource_newrelic_agent_application_browser_integration_test.go
+++ /dev/null
@@ -1,117 +0,0 @@
-//go:build integration
-
-package newrelic
-
-import (
-	"fmt"
-	"regexp"
-	"testing"
-	"time"
-
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
-	"github.com/newrelic/newrelic-client-go/v2/pkg/agentapplications"
-	"github.com/newrelic/newrelic-client-go/v2/pkg/common"
-	"github.com/newrelic/newrelic-client-go/v2/pkg/testhelpers"
-)
-
-func TestAccNewRelicAgentApplicationBrowser(t *testing.T) {
-	resourceName := "newrelic_browser_application.foo"
-	rName := generateNameForIntegrationTestResource()
-
-	accountID, err := testhelpers.GetTestAccountID()
-	if err != nil {
-		t.Skip(err)
-	}
-
-	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:     func() { testAccPreCheckEnvVars(t) },
-		Providers:    testAccProviders,
-		CheckDestroy: testAccCheckNewRelicSyntheticsMonitorResourceDestroy,
-		Steps: []resource.TestStep{
-			// Create
-			{
-				Config: testAccNewRelicAgentApplicationBrowserConfig(
-					accountID,
-					rName,
-					string(agentapplications.AgentApplicationBrowserLoaderTypes.SPA),
-				),
-				Check: resource.ComposeTestCheckFunc(
-					testAccCheckNewRelicAgentApplicationBrowserExists(resourceName),
-				),
-			},
-			// Test: Import
-			{
-				ResourceName:      resourceName,
-				ImportState:       true,
-				ImportStateVerify: true,
-			},
-		},
-	})
-}
-
-func TestAccNewRelicAgentApplicationBrowser_InvalidLoaderType(t *testing.T) {
-	rName := generateNameForIntegrationTestResource()
-
-	accountID, err := testhelpers.GetTestAccountID()
-	if err != nil {
-		t.Skip(err)
-	}
-
-	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:     func() { testAccPreCheckEnvVars(t) },
-		Providers:    testAccProviders,
-		CheckDestroy: testAccCheckNewRelicSyntheticsMonitorResourceDestroy,
-		Steps: []resource.TestStep{
-			// Create with invalid loader type. Expect an error.
-			{
-				Config: testAccNewRelicAgentApplicationBrowserConfig(
-					accountID,
-					rName,
-					"INVALID_LOADER_TYPE",
-				),
-				ExpectError: regexp.MustCompile(`Expected type "AgentApplicationBrowserLoader"`),
-			},
-		},
-	})
-}
-
-func testAccCheckNewRelicAgentApplicationBrowserExists(n string) resource.TestCheckFunc {
-	return func(s *terraform.State) error {
-		rs, ok := s.RootModule().Resources[n]
-		if !ok {
-			return fmt.Errorf("not found: %s", n)
-		}
-		if rs.Primary.ID == "" {
-			return fmt.Errorf("no browser agent application ID is set")
-		}
-
-		client := testAccProvider.Meta().(*ProviderConfig).NewClient
-
-		// Provide a minimal delay to allow for the entity to be indexed.
-		time.Sleep(2 * time.Second)
-		result, err := client.Entities.GetEntity(common.EntityGUID(rs.Primary.ID))
-		if err != nil {
-			return err
-		}
-		if result != nil {
-			if string((*result).GetGUID()) != rs.Primary.ID {
-				return fmt.Errorf("the browser agent application was not found %v - %v", (*result).GetGUID(), rs.Primary.ID)
-			}
-		}
-
-		return nil
-	}
-}
-
-func testAccNewRelicAgentApplicationBrowserConfig(accountID int, name string, loaderType string) string {
-	return fmt.Sprintf(`
-resource newrelic_browser_application foo {
- 	account_id = %[1]d
-	name = "%[2]s"
-	cookies_enabled = true
-	distributed_tracing_enabled = true
-	loader_type = "%[3]s"
-}
-`, accountID, name, loaderType)
-}
diff --git b/newrelic/resource_newrelic_alert_channel.go a/newrelic/resource_newrelic_alert_channel.go
index de242293..bfb1b7c8 100644
--- b/newrelic/resource_newrelic_alert_channel.go
+++ a/newrelic/resource_newrelic_alert_channel.go
@@ -55,9 +55,8 @@ func resourceNewRelicAlertChannel() *schema.Resource {
 	}
 
 	return &schema.Resource{
-		DeprecationMessage: "The `newrelic_alert_channel` resource is deprecated and will be removed in the next major release. Please use `newrelic_notification_channel` instead.",
-		CreateContext:      resourceNewRelicAlertChannelCreate,
-		ReadContext:        resourceNewRelicAlertChannelRead,
+		CreateContext: resourceNewRelicAlertChannelCreate,
+		ReadContext:   resourceNewRelicAlertChannelRead,
 		// Update: Not currently supported in API
 		DeleteContext: resourceNewRelicAlertChannelDelete,
 		Importer: &schema.ResourceImporter{
diff --git b/newrelic/resource_newrelic_alert_condition.go a/newrelic/resource_newrelic_alert_condition.go
index 889d4f70..f499f7e9 100644
--- b/newrelic/resource_newrelic_alert_condition.go
+++ a/newrelic/resource_newrelic_alert_condition.go
@@ -196,11 +196,6 @@ func resourceNewRelicAlertCondition() *schema.Resource {
 				ValidateFunc: validation.StringInSlice([]string{"average", "min", "max", "total", "sample_size", "percent", "rate"}, false),
 				Description:  "One of: (average, min, max, total, sample_size, percent, rate).",
 			},
-			"entity_guid": {
-				Type:        schema.TypeString,
-				Computed:    true,
-				Description: "The unique entity identifier of the condition in New Relic.",
-			},
 		},
 	}
 }
@@ -223,7 +218,7 @@ func resourceNewRelicAlertConditionCreate(ctx context.Context, d *schema.Resourc
 
 	d.SetId(serializeIDs([]int{policyID, condition.ID}))
 
-	return resourceNewRelicAlertConditionRead(ctx, d, meta)
+	return nil
 }
 
 func resourceNewRelicAlertConditionRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
@@ -262,13 +257,10 @@ func resourceNewRelicAlertConditionRead(ctx context.Context, d *schema.ResourceD
 
 	_ = d.Set("policy_id", policyID)
 
-	return diag.FromErr(flattenAlertCondition(condition, accountID, d))
+	return diag.FromErr(flattenAlertCondition(condition, d))
 }
 
 func resourceNewRelicAlertConditionUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	providerConfig := meta.(*ProviderConfig)
-	accountID := selectAccountID(providerConfig, d)
-
 	client := meta.(*ProviderConfig).NewClient
 	condition, err := expandAlertCondition(d)
 	if err != nil {
@@ -293,7 +285,7 @@ func resourceNewRelicAlertConditionUpdate(ctx context.Context, d *schema.Resourc
 
 	_ = d.Set("policy_id", policyID)
 
-	return diag.FromErr(flattenAlertCondition(updatedCondition, accountID, d))
+	return diag.FromErr(flattenAlertCondition(updatedCondition, d))
 }
 
 func resourceNewRelicAlertConditionDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
diff --git b/newrelic/resource_newrelic_alert_condition_test.go a/newrelic/resource_newrelic_alert_condition_test.go
index df3175ef..24625c43 100644
--- b/newrelic/resource_newrelic_alert_condition_test.go
+++ a/newrelic/resource_newrelic_alert_condition_test.go
@@ -73,6 +73,9 @@ func testAccCheckNewRelicAlertConditionExists(n string) resource.TestCheckFunc {
 
 func testAccNewRelicAlertConditionConfig(rName string) string {
 	return fmt.Sprintf(`
+provider "newrelic" {
+	api_key = "%[3]s"
+}
 data "newrelic_application" "app" {
 	name = "%[2]s"
 }
@@ -163,6 +166,9 @@ resource "newrelic_alert_condition" "foo" {
 
 func testAccNewRelicAlertConditionConfigDuration(name string, duration int) string {
 	return fmt.Sprintf(`
+provider "newrelic" {
+	api_key = "foo"
+}
 resource "newrelic_alert_policy" "foo" {
 	name = "%[1]s"
 }
@@ -188,6 +194,9 @@ resource "newrelic_alert_condition" "foo" {
 
 func testAccNewRelicAlertConditionApplicationScopeWithCloseTimerConfig(rName string) string {
 	return fmt.Sprintf(`
+provider "newrelic" {
+	api_key = "%[3]s"
+}
 data "newrelic_application" "app" {
 	name = "%[2]s"
 }
@@ -219,6 +228,9 @@ resource "newrelic_alert_condition" "foo" {
 
 func testAccNewRelicAlertConditionInstanceScopeWithCloseTimerConfig(rName string) string {
 	return fmt.Sprintf(`
+provider "newrelic" {
+	api_key = "%[3]s"
+}
 data "newrelic_application" "app" {
 	name = "%[2]s"
 }
@@ -250,6 +262,9 @@ resource "newrelic_alert_condition" "foo" {
 
 func testAccNewRelicAlertConditionAPMJVMMetricApplicationScopeConfig(rName string) string {
 	return fmt.Sprintf(`
+provider "newrelic" {
+	api_key = "%[3]s"
+}
 data "newrelic_application" "app" {
 	name = "%[2]s"
 }
@@ -281,6 +296,9 @@ resource "newrelic_alert_condition" "foo" {
 
 func testAccNewRelicAlertConditionAPMJVMMetricInstanceScopeConfig(rName string) string {
 	return fmt.Sprintf(`
+provider "newrelic" {
+	api_key = "%[3]s"
+}
 data "newrelic_application" "app" {
 	name = "%[2]s"
 }
diff --git b/newrelic/resource_newrelic_alert_policy.go a/newrelic/resource_newrelic_alert_policy.go
index c841f500..afc85fe2 100644
--- b/newrelic/resource_newrelic_alert_policy.go
+++ a/newrelic/resource_newrelic_alert_policy.go
@@ -52,7 +52,6 @@ func resourceNewRelicAlertPolicy() *schema.Resource {
 				Optional:    true,
 				ForceNew:    true,
 				Description: "An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result in a new alert policy resource being created and the old one being destroyed. Also note that channel IDs cannot be imported via terraform import.",
-				Deprecated:  "The `channel_ids` attribute is deprecated and will be removed in the next major release of the provider.",
 			},
 		},
 	}
diff --git b/newrelic/resource_newrelic_alert_policy_channel.go a/newrelic/resource_newrelic_alert_policy_channel.go
index 254fdcd7..555f3394 100644
--- b/newrelic/resource_newrelic_alert_policy_channel.go
+++ a/newrelic/resource_newrelic_alert_policy_channel.go
@@ -16,9 +16,8 @@ import (
 
 func resourceNewRelicAlertPolicyChannel() *schema.Resource {
 	return &schema.Resource{
-		DeprecationMessage: "The `newrelic_alert_policy_channel` resource is deprecated and will be removed in the next major release.",
-		CreateContext:      resourceNewRelicAlertPolicyChannelCreate,
-		ReadContext:        resourceNewRelicAlertPolicyChannelRead,
+		CreateContext: resourceNewRelicAlertPolicyChannelCreate,
+		ReadContext:   resourceNewRelicAlertPolicyChannelRead,
 		// Update: Not currently supported in API
 		DeleteContext: resourceNewRelicAlertPolicyChannelDelete,
 		Importer: &schema.ResourceImporter{
diff --git b/newrelic/resource_newrelic_alert_policy_test.go a/newrelic/resource_newrelic_alert_policy_test.go
index 34fa2318..737607ea 100644
--- b/newrelic/resource_newrelic_alert_policy_test.go
+++ a/newrelic/resource_newrelic_alert_policy_test.go
@@ -91,6 +91,10 @@ resource "newrelic_alert_policy" "foo" {
 
 func testAccNewRelicAlertPolicyConfigNameEmpty() string {
 	return `
+provider "newrelic" {
+	api_key = "foo"
+}
+
 resource "newrelic_alert_policy" "foo" {
   name = ""
 }
diff --git b/newrelic/resource_newrelic_cloud_aws_govcloud_integrations_test.go a/newrelic/resource_newrelic_cloud_aws_govcloud_integrations_test.go
index fd97ac1e..43c565e2 100644
--- b/newrelic/resource_newrelic_cloud_aws_govcloud_integrations_test.go
+++ a/newrelic/resource_newrelic_cloud_aws_govcloud_integrations_test.go
@@ -128,7 +128,7 @@ func testAccNewRelicCloudAwsGovCloudIntegrationsConfig(access_key_id string, aws
    secret_access_key = "%[3]s"
 }
    resource "newrelic_cloud_aws_govcloud_integrations" "foo" {
-     account_id=%[5]d
+     account_id=2520528
      linked_account_id=newrelic_cloud_awsGovcloud_link_account.account.id
      alb{
       metrics_polling_interval=1000
@@ -255,7 +255,7 @@ func testAccNewRelicCloudAwsGovCloudIntegrationsConfig(access_key_id string, aws
       tag_value=""
      }
 }
-`, access_key_id, aws_account_id, secret_access_key, name, testAccountID)
+`, access_key_id, aws_account_id, secret_access_key, name)
 }
 
 func testAccNewRelicCloudAwsGovCloudIntegrationsConfigUpdated(access_key_id string, aws_account_id string, secret_access_key string, name string) string {
@@ -268,7 +268,7 @@ func testAccNewRelicCloudAwsGovCloudIntegrationsConfigUpdated(access_key_id stri
    secret_access_key = "%[3]s"
 }
    resource "newrelic_cloud_aws_govcloud_integrations" "foo" {
-     account_id=%[5]d
+     account_id=2520528
      linked_account_id=newrelic_cloud_awsGovcloud_link_account.account.id
      alb{
       metrics_polling_interval=2000
@@ -395,5 +395,5 @@ func testAccNewRelicCloudAwsGovCloudIntegrationsConfigUpdated(access_key_id stri
       tag_value=""
      }
 }
-`, access_key_id, aws_account_id, secret_access_key, name, testAccountID)
+`, access_key_id, aws_account_id, secret_access_key, name)
 }
diff --git b/newrelic/resource_newrelic_cloud_aws_integrations.go a/newrelic/resource_newrelic_cloud_aws_integrations.go
index b14d70d1..1a359ec1 100644
--- b/newrelic/resource_newrelic_cloud_aws_integrations.go
+++ a/newrelic/resource_newrelic_cloud_aws_integrations.go
@@ -3,7 +3,6 @@ package newrelic
 import (
 	"context"
 	"strconv"
-	"strings"
 
 	"github.com/newrelic/newrelic-client-go/v2/pkg/cloud"
 
@@ -580,10 +579,6 @@ func resourceNewRelicCloudAwsIntegrationsRead(ctx context.Context, d *schema.Res
 
 	linkedAccount, err := client.Cloud.GetLinkedAccountWithContext(ctx, accountID, linkedAccountID)
 	if err != nil {
-		if strings.Contains(err.Error(), "not found") {
-			d.SetId("")
-			return nil
-		}
 		return diag.FromErr(err)
 	}
 
diff --git b/newrelic/resource_newrelic_cloud_aws_link_account.go a/newrelic/resource_newrelic_cloud_aws_link_account.go
index 58c603b0..277771cf 100644
--- b/newrelic/resource_newrelic_cloud_aws_link_account.go
+++ a/newrelic/resource_newrelic_cloud_aws_link_account.go
@@ -136,10 +136,6 @@ func resourceNewRelicCloudAwsAccountLinkRead(ctx context.Context, d *schema.Reso
 	linkedAccount, err := client.Cloud.GetLinkedAccountWithContext(ctx, accountID, linkedAccountID)
 
 	if err != nil {
-		if strings.Contains(err.Error(), "not found") {
-			d.SetId("")
-			return nil
-		}
 		return diag.FromErr(err)
 	}
 
diff --git b/newrelic/resource_newrelic_cloud_azure_integrations.go a/newrelic/resource_newrelic_cloud_azure_integrations.go
index 3d52274e..e4fd09d5 100644
--- b/newrelic/resource_newrelic_cloud_azure_integrations.go
+++ a/newrelic/resource_newrelic_cloud_azure_integrations.go
@@ -3,7 +3,6 @@ package newrelic
 import (
 	"context"
 	"strconv"
-	"strings"
 
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
@@ -2165,10 +2164,6 @@ func resourceNewRelicCloudAzureIntegrationsRead(ctx context.Context, d *schema.R
 
 	linkedAccount, err := client.Cloud.GetLinkedAccountWithContext(ctx, accountID, linkedAccountID)
 	if err != nil {
-		if strings.Contains(err.Error(), "not found") {
-			d.SetId("")
-			return nil
-		}
 		return diag.FromErr(err)
 	}
 
diff --git b/newrelic/resource_newrelic_cloud_azure_link_account.go a/newrelic/resource_newrelic_cloud_azure_link_account.go
index 5f4b8fa7..5ab544b9 100755
--- b/newrelic/resource_newrelic_cloud_azure_link_account.go
+++ a/newrelic/resource_newrelic_cloud_azure_link_account.go
@@ -3,7 +3,6 @@ package newrelic
 import (
 	"context"
 	"strconv"
-	"strings"
 
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
@@ -66,7 +65,7 @@ func resourceNewRelicCloudAzureLinkAccountCreate(ctx context.Context, d *schema.
 	cloudLinkAccountPayload, err := client.Cloud.CloudLinkAccountWithContext(ctx, accountID, linkAccountInput)
 
 	if err != nil {
-		return diag.FromErr(err)
+		diag.FromErr(err)
 	}
 
 	if len(cloudLinkAccountPayload.Errors) > 0 {
@@ -127,10 +126,6 @@ func resourceNewRelicCloudAzureLinkAccountRead(ctx context.Context, d *schema.Re
 	linkedAccount, err := client.Cloud.GetLinkedAccountWithContext(ctx, accountID, linkedAccountID)
 
 	if err != nil {
-		if strings.Contains(err.Error(), "not found") {
-			d.SetId("")
-			return nil
-		}
 		return diag.FromErr(err)
 	}
 
diff --git b/newrelic/resource_newrelic_cloud_gcp_integrations.go a/newrelic/resource_newrelic_cloud_gcp_integrations.go
index e966d3d3..6b7a4529 100644
--- b/newrelic/resource_newrelic_cloud_gcp_integrations.go
+++ a/newrelic/resource_newrelic_cloud_gcp_integrations.go
@@ -3,7 +3,6 @@ package newrelic
 import (
 	"context"
 	"strconv"
-	"strings"
 
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
@@ -1198,10 +1197,6 @@ func resourceNewrelicCloudGcpIntegrationsRead(ctx context.Context, d *schema.Res
 
 	linkedAccount, err := client.Cloud.GetLinkedAccountWithContext(ctx, accountID, linkedAccountID)
 	if err != nil {
-		if strings.Contains(err.Error(), "not found") {
-			d.SetId("")
-			return nil
-		}
 		diag.FromErr(err)
 	}
 	flattenCloudGcpLinkedAccount(d, linkedAccount)
diff --git b/newrelic/resource_newrelic_cloud_gcp_integrations_test.go a/newrelic/resource_newrelic_cloud_gcp_integrations_test.go
index 9cf163b3..987fc7c2 100644
--- b/newrelic/resource_newrelic_cloud_gcp_integrations_test.go
+++ a/newrelic/resource_newrelic_cloud_gcp_integrations_test.go
@@ -19,6 +19,9 @@ func TestAccNewRelicCloudGcpIntegrations_Basic(t *testing.T) {
 	//t.Skipf("Skipping test until environment variables are added")
 	resourceName := "newrelic_cloud_gcp_integrations.foo1"
 	testGcpIntegrationProjectID := os.Getenv("INTEGRATION_TESTING_GCP_INTEGRATIONS_PROJECT_ID")
+	if testGcpIntegrationProjectID == "" {
+		t.Skipf("INTEGRATION_TESTING_GCP_INTEGRATIONS_PROJECT_ID must be set for acceptance test")
+	}
 
 	testGcpAccountName := acctest.RandString(5)
 
@@ -106,12 +109,12 @@ func testAccNewRelicCloudGcpIntegrationsConfig(projectID string, name string) st
 
 resource "newrelic_cloud_gcp_link_account" "foo" {
   name       = "%[2]s"
-  account_id = %[3]d
+  account_id = 2520528
   project_id = "%[1]s"
 }
 
 resource "newrelic_cloud_gcp_integrations" "foo1" {
-  account_id        = %[3]d
+  account_id        = 2520528
   linked_account_id = newrelic_cloud_gcp_link_account.foo.id
   alloy_db {
     metrics_polling_interval = 400
@@ -196,19 +199,19 @@ resource "newrelic_cloud_gcp_integrations" "foo1" {
     metrics_polling_interval = 400
   }
 }
-	`, projectID, name, testAccountID)
+	`, projectID, name)
 }
 
 func testAccNewRelicCloudGcpIntegrationsConfigUpdated(projectID string, name string) string {
 	return fmt.Sprintf(`
 	resource "newrelic_cloud_gcp_link_account" "foo"{
 			name = "%[2]s"
-			account_id = %[3]d
+			account_id = 2520528
 			project_id="%[1]s"
 	}
 
 	resource "newrelic_cloud_gcp_integrations" "foo1" {
-		  account_id = %[3]d
+		  account_id = 2520528
 		  linked_account_id = newrelic_cloud_gcp_link_account.foo.id
 		  app_engine {
 			metrics_polling_interval = 1400
@@ -290,5 +293,5 @@ func testAccNewRelicCloudGcpIntegrationsConfigUpdated(projectID string, name str
 			metrics_polling_interval = 1400
 		  }
 	}
-	`, projectID, name, testAccountID)
+	`, projectID, name)
 }
diff --git b/newrelic/resource_newrelic_cloud_gcp_link_account.go a/newrelic/resource_newrelic_cloud_gcp_link_account.go
index 35c110ec..940de4c5 100644
--- b/newrelic/resource_newrelic_cloud_gcp_link_account.go
+++ a/newrelic/resource_newrelic_cloud_gcp_link_account.go
@@ -2,9 +2,7 @@ package newrelic
 
 import (
 	"context"
-	"fmt"
 	"strconv"
-	"strings"
 
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
@@ -55,11 +53,7 @@ func resourceNewRelicCloudGcpLinkAccountCreate(ctx context.Context, d *schema.Re
 	cloudLinkAccountPayload, err := client.Cloud.CloudLinkAccountWithContext(ctx, accountID, linkAccountInput)
 
 	if err != nil {
-		return diag.FromErr(err)
-	}
-
-	if cloudLinkAccountPayload == nil {
-		return diag.FromErr(fmt.Errorf("[ERROR] cloudLinkAccountPayload was nil"))
+		diag.FromErr(err)
 	}
 
 	if len(cloudLinkAccountPayload.Errors) > 0 {
@@ -114,10 +108,6 @@ func resourceNewRelicCloudGcpLinkAccountRead(ctx context.Context, d *schema.Reso
 	linkedAccount, err := client.Cloud.GetLinkedAccountWithContext(ctx, accountID, linkedAccountID)
 
 	if err != nil {
-		if strings.Contains(err.Error(), "not found") {
-			d.SetId("")
-			return nil
-		}
 		return diag.FromErr(err)
 	}
 
diff --git b/newrelic/resource_newrelic_cloud_gcp_link_account_test.go a/newrelic/resource_newrelic_cloud_gcp_link_account_test.go
index 9cc5db39..3ffa5a13 100644
--- b/newrelic/resource_newrelic_cloud_gcp_link_account_test.go
+++ a/newrelic/resource_newrelic_cloud_gcp_link_account_test.go
@@ -108,18 +108,18 @@ func testAccNewRelicCloudGcpLinkAccountConfig(name string, projectId string) str
 	return fmt.Sprintf(`
 	resource "newrelic_cloud_gcp_link_account" "foo"{
 			name = "%[1]s"
-			account_id = %[3]d
+			account_id = 2520528
 			project_id="%[2]s"
 	}
-	`, name, projectId, testAccountID)
+	`, name, projectId)
 }
 
 func testAccNewRelicCloudGcpLinkAccountConfigUpdated(name string, projectId string) string {
 	return fmt.Sprintf(`
 	resource "newrelic_cloud_gcp_link_account" "foo"{
 			name = "%[1]s-updated"
-			account_id = %[3]d
+			account_id = 2520528
 			project_id="%[2]s"
 	}
-	`, name, projectId, testAccountID)
+	`, name, projectId)
 }
diff --git b/newrelic/resource_newrelic_data_partition.go a/newrelic/resource_newrelic_data_partition.go
deleted file mode 100644
index 10ff4619..00000000
--- b/newrelic/resource_newrelic_data_partition.go
+++ /dev/null
@@ -1,266 +0,0 @@
-package newrelic
-
-import (
-	"context"
-	"errors"
-	"fmt"
-	"log"
-	"time"
-
-	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
-	"github.com/newrelic/newrelic-client-go/v2/newrelic"
-	"github.com/newrelic/newrelic-client-go/v2/pkg/logconfigurations"
-)
-
-func resourceNewRelicDataPartition() *schema.Resource {
-	return &schema.Resource{
-		CreateContext: resourceNewRelicDataPartitionCreate,
-		ReadContext:   resourceNewRelicDataPartitionRead,
-		UpdateContext: resourceNewRelicDataPartitionUpdate,
-		DeleteContext: resourceNewRelicDataPartitionDelete,
-		Importer: &schema.ResourceImporter{
-			StateContext: schema.ImportStatePassthroughContext,
-		},
-		Schema: map[string]*schema.Schema{
-			"account_id": {
-				Type:        schema.TypeInt,
-				Description: "The account id associated with the data partition rule.",
-				Computed:    true,
-				Optional:    true,
-			},
-			"description": {
-				Type:        schema.TypeString,
-				Description: "The description of the data partition rule.",
-				Optional:    true,
-			},
-			"enabled": {
-				Type:        schema.TypeBool,
-				Description: "Whether or not this data partition rule is enabled.",
-				Required:    true,
-			},
-			"nrql": {
-				Type:        schema.TypeString,
-				Description: "The NRQL to match events for this data partition rule. Logs matching this criteria will be routed to the specified data partition.",
-				Required:    true,
-			},
-			"retention_policy": {
-				Type:         schema.TypeString,
-				Description:  "The retention policy of the data partition data.",
-				Required:     true,
-				ForceNew:     true,
-				ValidateFunc: validation.StringInSlice(listValidDataPartitionRuleRetentionPolicyType(), false),
-			},
-			"target_data_partition": {
-				Type:        schema.TypeString,
-				Description: "The name of the data partition where logs will be allocated once the rule is enabled.",
-				Required:    true,
-				ForceNew:    true,
-			},
-			"deleted": {
-				Type:        schema.TypeBool,
-				Computed:    true,
-				Description: "Whether or not this data partition rule is deleted. Deleting a data partition rule does not delete the already persisted data. This data will be retained for a given period of time specified in the retention policy field.",
-			},
-		},
-		Timeouts: &schema.ResourceTimeout{
-			Create: schema.DefaultTimeout(30 * time.Second),
-		},
-	}
-}
-
-func listValidDataPartitionRuleRetentionPolicyType() []string {
-	return []string{
-		string(logconfigurations.LogConfigurationsDataPartitionRuleRetentionPolicyTypeTypes.SECONDARY),
-		string(logconfigurations.LogConfigurationsDataPartitionRuleRetentionPolicyTypeTypes.STANDARD),
-	}
-}
-
-// Create the data partition rule
-func resourceNewRelicDataPartitionCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	providerConfig := meta.(*ProviderConfig)
-	client := providerConfig.NewClient
-
-	accountID := selectAccountID(providerConfig, d)
-
-	createInput := logconfigurations.LogConfigurationsCreateDataPartitionRuleInput{
-		Description: d.Get("description").(string),
-		Enabled:     d.Get("enabled").(bool),
-		NRQL:        logconfigurations.NRQL(d.Get("nrql").(string)),
-	}
-
-	//The name of a log data partition. Has to start with 'Log_' prefix and can only contain alphanumeric characters and underscores.
-	if e, ok := d.GetOk("target_data_partition"); ok {
-		createInput.TargetDataPartition = logconfigurations.LogConfigurationsLogDataPartitionName(e.(string))
-	}
-
-	if e, ok := d.GetOk("retention_policy"); ok {
-		createInput.RetentionPolicy = logconfigurations.LogConfigurationsDataPartitionRuleRetentionPolicyType(e.(string))
-	}
-	log.Printf("[INFO] Creating New Relic Data Partition Rule  %s", createInput.TargetDataPartition)
-
-	created, err := client.Logconfigurations.LogConfigurationsCreateDataPartitionRuleWithContext(ctx, accountID, createInput)
-	if err != nil {
-		return diag.FromErr(err)
-	}
-
-	var apiDiags diag.Diagnostics
-
-	//Setting the errors
-	if created.Errors != nil {
-		for _, err := range created.Errors {
-			apiDiags = append(apiDiags, diag.Diagnostic{
-				Severity: diag.Error,
-				Summary:  err.Message,
-				Detail:   string(err.Type),
-			})
-		}
-		return apiDiags
-	}
-
-	if created == nil {
-		return diag.Errorf("err: data partition rule create result wasn't returned or rule was not created.")
-	}
-
-	ruleID := created.Rule.ID
-
-	d.SetId(ruleID)
-
-	//Need retry mechanism
-	retryErr := resource.RetryContext(ctx, d.Timeout(schema.TimeoutCreate), func() *resource.RetryError {
-		rules, err := client.Logconfigurations.GetDataPartitionRulesWithContext(ctx, accountID)
-		if err != nil {
-			return resource.NonRetryableError(err)
-		}
-
-		for _, v := range *rules {
-			if v.ID == ruleID && !v.Deleted {
-				return nil
-			}
-		}
-		return resource.RetryableError(fmt.Errorf("data partition rule was not created"))
-	})
-
-	if retryErr != nil {
-		return diag.FromErr(retryErr)
-	}
-	return nil
-}
-
-// Read the data partition rule
-func resourceNewRelicDataPartitionRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	providerConfig := meta.(*ProviderConfig)
-	client := providerConfig.NewClient
-	accountID := selectAccountID(providerConfig, d)
-
-	ruleID := d.Id()
-	rule, err := getDataPartitionByID(ctx, client, accountID, ruleID)
-
-	if err != nil || rule == nil || rule.Deleted {
-		d.SetId("")
-		return nil
-	}
-
-	if err := d.Set("account_id", accountID); err != nil {
-		return diag.FromErr(err)
-	}
-
-	if err := d.Set("description", rule.Description); err != nil {
-		return diag.FromErr(err)
-	}
-
-	_ = d.Set("enabled", rule.Enabled)
-	_ = d.Set("target_data_partition", rule.TargetDataPartition)
-	_ = d.Set("nrql", rule.NRQL)
-	_ = d.Set("retention_policy", rule.RetentionPolicy)
-	_ = d.Set("deleted", rule.Deleted)
-
-	return nil
-}
-
-// Update the data partition rule
-func resourceNewRelicDataPartitionUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	client := meta.(*ProviderConfig).NewClient
-	updateInput := expandDataPartitionUpdateInput(d)
-
-	log.Printf("[INFO] Updating New Relic Data Partition Rule %s", d.Id())
-
-	accountID := selectAccountID(meta.(*ProviderConfig), d)
-
-	updated, err := client.Logconfigurations.LogConfigurationsUpdateDataPartitionRuleWithContext(ctx, accountID, updateInput)
-
-	if err != nil {
-		return diag.FromErr(err)
-	}
-
-	var apiDiags diag.Diagnostics
-
-	//Setting the errors
-	if updated.Errors != nil {
-		for _, err := range updated.Errors {
-			apiDiags = append(apiDiags, diag.Diagnostic{
-				Severity: diag.Error,
-				Summary:  err.Message,
-				Detail:   string(err.Type),
-			})
-		}
-		return apiDiags
-	}
-
-	return nil
-}
-
-func expandDataPartitionUpdateInput(d *schema.ResourceData) logconfigurations.LogConfigurationsUpdateDataPartitionRuleInput {
-	updateInp := logconfigurations.LogConfigurationsUpdateDataPartitionRuleInput{
-		ID: d.Id(),
-	}
-	if e, ok := d.GetOk("enabled"); ok {
-		updateInp.Enabled = e.(bool)
-	}
-
-	if e, ok := d.GetOk("description"); ok {
-		updateInp.Description = e.(string)
-	}
-
-	if e, ok := d.GetOk("nrql"); ok {
-		updateInp.NRQL = logconfigurations.NRQL(e.(string))
-	}
-
-	return updateInp
-}
-
-// Delete the data partition rule
-func resourceNewRelicDataPartitionDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	providerConfig := meta.(*ProviderConfig)
-	client := providerConfig.NewClient
-
-	log.Printf("[INFO] Deleting New Relic Data Partition Rule id %s", d.Id())
-
-	accountID := selectAccountID(meta.(*ProviderConfig), d)
-	expressionID := d.Id()
-
-	_, err := client.Logconfigurations.LogConfigurationsDeleteDataPartitionRuleWithContext(ctx, accountID, expressionID)
-
-	if err != nil {
-		return diag.FromErr(err)
-	}
-
-	return nil
-}
-
-func getDataPartitionByID(ctx context.Context, client *newrelic.NewRelic, accountID int, ruleID string) (*logconfigurations.LogConfigurationsDataPartitionRule, error) {
-	rules, err := client.Logconfigurations.GetDataPartitionRulesWithContext(ctx, accountID)
-	if err != nil {
-		return nil, err
-	}
-
-	for _, v := range *rules {
-		if v.ID == ruleID {
-			return &v, nil
-		}
-	}
-	return nil, errors.New("data partition rule not found")
-
-}
diff --git b/newrelic/resource_newrelic_data_partition_test.go a/newrelic/resource_newrelic_data_partition_test.go
deleted file mode 100644
index bcba810a..00000000
--- b/newrelic/resource_newrelic_data_partition_test.go
+++ /dev/null
@@ -1,269 +0,0 @@
-//go:build integration
-// +build integration
-
-package newrelic
-
-import (
-	"context"
-	"fmt"
-	"regexp"
-	"testing"
-
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
-	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
-)
-
-// Checking the creation, update, import and deletion of data partition rule
-func TestAccNewRelicDataPartitionRule_Basic(t *testing.T) {
-	resourceName := "newrelic_data_partition_rule.foo"
-	rName := acctest.RandString(7)
-	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:     func() { testAccPreCheck(t) },
-		Providers:    testAccProviders,
-		CheckDestroy: testAccCheckNewRelicDataPartitionRuleDestroy,
-		Steps: []resource.TestStep{
-			//create
-			{
-				Config: testAccNewRelicDataPartitionRuleConfig(rName),
-				Check: resource.ComposeTestCheckFunc(
-					testAccCheckNewRelicDataPartitionRuleExists(resourceName)),
-			},
-			//update
-			{
-				Config: testAccNewRelicDataPartitionRuleUpdate(rName),
-				Check: resource.ComposeTestCheckFunc(
-					testAccCheckNewRelicDataPartitionRuleExists(resourceName)),
-			},
-			//import
-			{
-				ImportState:       true,
-				ImportStateVerify: true,
-				ResourceName:      resourceName,
-			},
-		},
-	})
-}
-
-// Checking the creation of new resource on update name
-func TestAccNewRelicDataPartitionRule_NameUpdate(t *testing.T) {
-	resourceName := "newrelic_data_partition_rule.foo"
-	rName := acctest.RandString(7)
-	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:     func() { testAccPreCheck(t) },
-		Providers:    testAccProviders,
-		CheckDestroy: testAccCheckNewRelicDataPartitionRuleDestroy,
-		Steps: []resource.TestStep{
-			//create
-			{
-				Config: testAccNewRelicDataPartitionRuleConfig(rName),
-				Check: resource.ComposeTestCheckFunc(
-					testAccCheckNewRelicDataPartitionRuleExists(resourceName)),
-			},
-			//update
-			{
-				Config: testAccNewRelicDataPartitionRuleUpdate_Name(rName),
-				Check: resource.ComposeTestCheckFunc(
-					testAccCheckNewRelicDataPartitionRuleExists(resourceName)),
-			},
-		},
-	})
-}
-
-// Checking the creation of new resource on update NRQL
-func TestAccNewRelicDataPartitionRule_NRQLUpdate(t *testing.T) {
-	resourceName := "newrelic_data_partition_rule.foo"
-	rName := acctest.RandString(7)
-	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:     func() { testAccPreCheck(t) },
-		Providers:    testAccProviders,
-		CheckDestroy: testAccCheckNewRelicDataPartitionRuleDestroy,
-		Steps: []resource.TestStep{
-			//create
-			{
-				Config: testAccNewRelicDataPartitionRuleConfig(rName),
-				Check: resource.ComposeTestCheckFunc(
-					testAccCheckNewRelicDataPartitionRuleExists(resourceName)),
-			},
-			//update
-			{
-				Config: testAccNewRelicDataPartitionRuleUpdate_NRQL(rName),
-				Check: resource.ComposeTestCheckFunc(
-					testAccCheckNewRelicDataPartitionRuleExists(resourceName)),
-			},
-		},
-	})
-}
-
-// Must fail if given the same name
-func TestAccNewRelicDataPartitionRule_DuplicateName(t *testing.T) {
-	rName := acctest.RandString(7)
-	expectedMsg, _ := regexp.Compile("DUPLICATE_DATA_PARTITION_RULE_NAME")
-	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:     func() { testAccPreCheck(t) },
-		Providers:    testAccProviders,
-		CheckDestroy: testAccCheckNewRelicDataPartitionRuleDestroy,
-		Steps: []resource.TestStep{
-			//create
-			{
-				Config:      testAccNewRelicDataPartitionRule_DuplicateName(rName),
-				ExpectError: expectedMsg,
-			},
-		},
-	})
-}
-
-// Must fail if given the invalid name
-func TestAccNewRelicDataPartitionRule_Validation(t *testing.T) {
-	rName := acctest.RandString(7)
-	expectedMsg, _ := regexp.Compile("INVALID_DATA_PARTITION_INPUT")
-	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:     func() { testAccPreCheck(t) },
-		Providers:    testAccProviders,
-		CheckDestroy: testAccCheckNewRelicDataPartitionRuleDestroy,
-		Steps: []resource.TestStep{
-			//create
-			{
-				Config:      testAccNewRelicDataPartitionRule_ValidateName(rName),
-				ExpectError: expectedMsg,
-			},
-		},
-	})
-}
-
-func testAccCheckNewRelicDataPartitionRuleDestroy(s *terraform.State) error {
-	client := testAccProvider.Meta().(*ProviderConfig).NewClient
-	for _, rs := range s.RootModule().Resources {
-		if rs.Type != "newrelic_data_partition_rule" {
-			continue
-		}
-		_, err := getDataPartitionByID(context.Background(), client, testAccountID, rs.Primary.ID)
-
-		if err != nil {
-			return fmt.Errorf("data partition rule still exists: %s", err)
-		}
-	}
-
-	return nil
-}
-
-func testAccCheckNewRelicDataPartitionRuleExists(n string) resource.TestCheckFunc {
-	return func(s *terraform.State) error {
-
-		rs, ok := s.RootModule().Resources[n]
-		if !ok {
-			return fmt.Errorf("not found: %s", n)
-		}
-		if rs.Primary.ID == "" {
-			return fmt.Errorf("no ID is set")
-		}
-
-		client := testAccProvider.Meta().(*ProviderConfig).NewClient
-
-		_, err := getDataPartitionByID(context.Background(), client, testAccountID, rs.Primary.ID)
-		if err != nil {
-			return err
-		}
-
-		return nil
-	}
-}
-
-func testAccNewRelicDataPartitionRuleConfig(name string) string {
-	return fmt.Sprintf(`
-resource "newrelic_data_partition_rule" "foo"{
-	account_id = %[1]d
-	description = "%[3]s"
-	enabled = true
-	nrql = "logtype='node'"
-    retention_policy = "SECONDARY"
-    target_data_partition = "Log_Test_%[2]s"
-}
-`, testAccountID, name, testAccExpectedApplicationName)
-}
-
-func testAccNewRelicDataPartitionRuleUpdate(name string) string {
-	return fmt.Sprintf(`
-resource "newrelic_data_partition_rule" "foo"{
-	account_id = %[1]d
-	description = "%[3]s_update"
-	enabled = true
-	nrql = "logtype='linux_messages'"
-    retention_policy = "SECONDARY"
-    target_data_partition = "Log_Test_%[2]s"
-}
-`, testAccountID, name, testAccExpectedApplicationName)
-}
-
-func testAccNewRelicDataPartitionRule_DuplicateName(name string) string {
-	return fmt.Sprintf(`
-resource "newrelic_data_partition_rule" "foo"{
-	account_id = %[1]d
-	description = "%[3]s"
-	enabled = true
-	nrql = "logtype='node'"
-    retention_policy = "SECONDARY"
-    target_data_partition = "Log_Test_%[2]s"
-}
-resource "newrelic_data_partition_rule" "bar"{
-	account_id = %[1]d
-	description = "%[3]s"
-	enabled = true
-	nrql = "logtype='node'"
-    retention_policy = "SECONDARY"
-    target_data_partition = "Log_Test_%[2]s"
-}
-`, testAccountID, name, testAccExpectedApplicationName)
-}
-
-func testAccNewRelicDataPartitionRule_ValidateName(name string) string {
-	return fmt.Sprintf(`
-resource "newrelic_data_partition_rule" "foo"{
-	account_id = %[1]d
-	description = "%[3]s"
-	enabled = true
-	nrql = "logtype='node'"
-    retention_policy = "SECONDARY"
-    target_data_partition = "Test_%[2]s"
-}
-`, testAccountID, name, testAccExpectedApplicationName)
-}
-
-func testAccNewRelicDataPartitionRuleUpdate_Enabled(name string) string {
-	return fmt.Sprintf(`
-resource "newrelic_data_partition_rule" "foo"{
-	account_id = %[1]d
-	description = "%[3]s_update"
-	enabled = false
-	nrql = "logtype='node'"
-    retention_policy = "SECONDARY"
-    target_data_partition = "Log_Test_%[2]s"
-}
-`, testAccountID, name, testAccExpectedApplicationName)
-}
-
-func testAccNewRelicDataPartitionRuleUpdate_Name(name string) string {
-	return fmt.Sprintf(`
-resource "newrelic_data_partition_rule" "foo"{
-	account_id = %[1]d
-	description = "%[3]s_update"
-	enabled = true
-	nrql = "logtype='node'"
-    retention_policy = "SECONDARY"
-    target_data_partition = "Log_Test_%[2]s_update"
-}
-`, testAccountID, name, testAccExpectedApplicationName)
-}
-
-func testAccNewRelicDataPartitionRuleUpdate_NRQL(name string) string {
-	return fmt.Sprintf(`
-resource "newrelic_data_partition_rule" "foo"{
-	account_id = %[1]d
-	description = "%[3]s_update"
-	enabled = true
-	nrql = "logtype='node'"
-    retention_policy = "SECONDARY"
-    target_data_partition = "Log_Test_%[2]s_update"
-}
-`, testAccountID, name, testAccExpectedApplicationName)
-}
diff --git b/newrelic/resource_newrelic_infra_alert_condition.go a/newrelic/resource_newrelic_infra_alert_condition.go
index 67373d31..46a42ca6 100644
--- b/newrelic/resource_newrelic_infra_alert_condition.go
+++ a/newrelic/resource_newrelic_infra_alert_condition.go
@@ -174,11 +174,6 @@ func resourceNewRelicInfraAlertCondition() *schema.Resource {
 				Optional:    true,
 				Description: "The description of the Infrastructure alert condition.",
 			},
-			"entity_guid": {
-				Type:        schema.TypeString,
-				Computed:    true,
-				Description: "The unique entity identifier of the condition in New Relic.",
-			},
 		},
 	}
 }
@@ -238,7 +233,7 @@ func resourceNewRelicInfraAlertConditionRead(ctx context.Context, d *schema.Reso
 		return diag.FromErr(err)
 	}
 
-	return diag.FromErr(flattenInfraAlertCondition(condition, accountID, d))
+	return diag.FromErr(flattenInfraAlertCondition(condition, d))
 }
 
 func resourceNewRelicInfraAlertConditionUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
diff --git b/newrelic/resource_newrelic_log_parsing_rule_test.go a/newrelic/resource_newrelic_log_parsing_rule_test.go
index 0f623529..ca5209ae 100644
--- b/newrelic/resource_newrelic_log_parsing_rule_test.go
+++ a/newrelic/resource_newrelic_log_parsing_rule_test.go
@@ -9,6 +9,7 @@ import (
 	"regexp"
 	"testing"
 
+	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
 )
@@ -16,7 +17,7 @@ import (
 // Checking the creation, update, import and deletion of logging parsing rule
 func TestAccNewRelicLogParsingRule_Basic(t *testing.T) {
 	resourceName := "newrelic_log_parsing_rule.foo"
-	rName := generateNameForIntegrationTestResource()
+	rName := acctest.RandString(7)
 	resource.ParallelTest(t, resource.TestCase{
 		PreCheck:     func() { testAccPreCheck(t) },
 		Providers:    testAccProviders,
@@ -47,8 +48,8 @@ func TestAccNewRelicLogParsingRule_Basic(t *testing.T) {
 func TestAccNewRelicLogParsingRule_Unique_Name_Update(t *testing.T) {
 	resourceName := "newrelic_log_parsing_rule.foo"
 	expectedErrorMsg := regexp.MustCompile("name is already in use by another rule")
-	rName1 := generateNameForIntegrationTestResource()
-	rName2 := generateNameForIntegrationTestResource()
+	rName1 := acctest.RandString(7)
+	rName2 := acctest.RandString(7)
 	resource.ParallelTest(t, resource.TestCase{
 		PreCheck:     func() { testAccPreCheck(t) },
 		Providers:    testAccProviders,
@@ -77,7 +78,7 @@ func TestAccNewRelicLogParsingRule_Unique_Name_Create(t *testing.T) {
 		Steps: []resource.TestStep{
 			//create
 			{
-				Config:      testAccNewRelicLogParsingRuleUniqueNameConfig("test_tf_DescUnique"),
+				Config:      testAccNewRelicLogParsingRuleUniqueNameConfig("testDescUnique"),
 				ExpectError: expectedErrorMsg,
 			},
 		},
@@ -86,7 +87,7 @@ func TestAccNewRelicLogParsingRule_Unique_Name_Create(t *testing.T) {
 
 func TestAccNewRelicLogParsingRule_Grok_Test_Matched(t *testing.T) {
 	resourceName := "newrelic_log_parsing_rule.foo"
-	rName := generateNameForIntegrationTestResource()
+	rName := acctest.RandString(7)
 	resource.ParallelTest(t, resource.TestCase{
 		PreCheck:     func() { testAccPreCheck(t) },
 		Providers:    testAccProviders,
@@ -104,7 +105,7 @@ func TestAccNewRelicLogParsingRule_Grok_Test_Matched(t *testing.T) {
 
 func TestAccNewRelicLogParsingRule_Grok_Test_Unmatched(t *testing.T) {
 	resourceName := "newrelic_log_parsing_rule.foo"
-	rName := generateNameForIntegrationTestResource()
+	rName := acctest.RandString(7)
 	resource.ParallelTest(t, resource.TestCase{
 		PreCheck:     func() { testAccPreCheck(t) },
 		Providers:    testAccProviders,
@@ -121,7 +122,7 @@ func TestAccNewRelicLogParsingRule_Grok_Test_Unmatched(t *testing.T) {
 }
 
 func TestAccNewRelicLogParsingRule_Invalid_Grok_Test(t *testing.T) {
-	rName := generateNameForIntegrationTestResource()
+	rName := acctest.RandString(7)
 	resource.ParallelTest(t, resource.TestCase{
 		PreCheck:     func() { testAccPreCheck(t) },
 		Providers:    testAccProviders,
diff --git b/newrelic/resource_newrelic_nrql_alert_condition.go a/newrelic/resource_newrelic_nrql_alert_condition.go
index 4235d956..6f89fc79 100644
--- b/newrelic/resource_newrelic_nrql_alert_condition.go
+++ a/newrelic/resource_newrelic_nrql_alert_condition.go
@@ -200,11 +200,8 @@ func resourceNewRelicNrqlAlertCondition() *schema.Resource {
 				ConflictsWith: []string{"term"},
 			},
 			"violation_time_limit_seconds": {
-				Type:     schema.TypeInt,
-				Optional: true,
-				Default:  259200,
-				// Default value added as expected by the NerdGraph API to prevent discrepancies with `terraform plan`
-				// Reference : https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-violations/how-alert-condition-violations-are-closed/#time-limit
+				Type:          schema.TypeInt,
+				Optional:      true,
 				Description:   "Sets a time limit, in seconds, that will automatically force-close a long-lasting incident after the time limit you select.  Must be in the range of 300 to 2592000 (inclusive)",
 				ConflictsWith: []string{"violation_time_limit"},
 				ValidateFunc:  validation.IntBetween(300, 2592000),
diff --git b/newrelic/resource_newrelic_nrql_alert_condition_test.go a/newrelic/resource_newrelic_nrql_alert_condition_test.go
index 41cbdbf6..dde2ab7d 100644
--- b/newrelic/resource_newrelic_nrql_alert_condition_test.go
+++ a/newrelic/resource_newrelic_nrql_alert_condition_test.go
@@ -25,14 +25,14 @@ func TestAccNewRelicNrqlAlertCondition_Basic(t *testing.T) {
 		Steps: []resource.TestStep{
 			// Test: Create
 			{
-				Config: testAccNewRelicNrqlAlertConditionConfigBasic(rName, "120", "120", "sTaTiC", "0", "", "60", "30", "259200"),
+				Config: testAccNewRelicNrqlAlertConditionConfigBasic(rName, "20", "120", "sTaTiC", "0", "", "60", "30", "259200"),
 				Check: resource.ComposeTestCheckFunc(
 					testAccCheckNewRelicNrqlAlertConditionExists(resourceName),
 				),
 			},
 			// Test: Update
 			{
-				Config: testAccNewRelicNrqlAlertConditionConfigBasic(rName, "300", "180", "last_value", "null", "", "60", "30", "259200"),
+				Config: testAccNewRelicNrqlAlertConditionConfigBasic(rName, "5", "180", "last_value", "null", "", "60", "30", "259200"),
 				Check: resource.ComposeTestCheckFunc(
 					testAccCheckNewRelicNrqlAlertConditionExists(resourceName),
 				),
@@ -98,7 +98,7 @@ func TestAccNewRelicNrqlAlertCondition_NerdGraphThresholdDurationValidationError
 				Config: testAccNewRelicNrqlAlertConditionNerdGraphConfig(
 					rNameBaseline,
 					"baseline",
-					120,
+					20,
 					86460, // outside of accepted range [120, 86400] to test error handling
 					"static",
 					"0",
@@ -111,7 +111,7 @@ func TestAccNewRelicNrqlAlertCondition_NerdGraphThresholdDurationValidationError
 				Config: testAccNewRelicNrqlAlertConditionNerdGraphConfig(
 					rNameBaseline,
 					"baseline",
-					120,
+					20,
 					60, // outside of accepted range [120, 86400] to test error handling
 					"static",
 					"0",
@@ -169,7 +169,7 @@ func TestAccNewRelicNrqlAlertCondition_NerdGraphBaseline(t *testing.T) {
 				Config: testAccNewRelicNrqlAlertConditionNerdGraphConfig(
 					rName,
 					conditionType,
-					300,
+					5,
 					3600,
 					"last_value",
 					"null",
@@ -184,7 +184,7 @@ func TestAccNewRelicNrqlAlertCondition_NerdGraphBaseline(t *testing.T) {
 				Config: testAccNewRelicNrqlAlertConditionNerdGraphConfig(
 					rName,
 					conditionType,
-					1200,
+					20,
 					1800,
 					"static",
 					"0",
@@ -258,7 +258,7 @@ func TestAccNewRelicNrqlAlertCondition_NerdGraphStatic(t *testing.T) {
 				Config: testAccNewRelicNrqlAlertConditionNerdGraphConfig(
 					rName,
 					conditionType,
-					300,
+					5,
 					3600,
 					"last_value",
 					"null",
@@ -273,7 +273,7 @@ func TestAccNewRelicNrqlAlertCondition_NerdGraphStatic(t *testing.T) {
 				Config: testAccNewRelicNrqlAlertConditionNerdGraphConfig(
 					rName,
 					conditionType,
-					1200,
+					20,
 					1800,
 					"static",
 					"0",
@@ -646,7 +646,7 @@ func testAccCheckNewRelicNrqlAlertConditionExists(n string) resource.TestCheckFu
 
 func testAccNewRelicNrqlAlertConditionConfigBasic(
 	name string,
-	aggregationDelay string,
+	evaluationOffset string,
 	duration string,
 	fillOption string,
 	fillValue string,
@@ -661,7 +661,7 @@ resource "newrelic_alert_policy" "foo" {
 }
 
 resource "newrelic_nrql_alert_condition" "foo" {
-  policy_id = newrelic_alert_policy.foo.id
+	policy_id = newrelic_alert_policy.foo.id
 
   name                           = "tf-test-%[1]s"
   runbook_url                    = "https://foo.example.com"
@@ -669,35 +669,34 @@ resource "newrelic_nrql_alert_condition" "foo" {
   fill_option                    = "%[4]s"
   fill_value                     = %[5]s
   aggregation_window             = %[7]s
-  slide_by                       = %[8]s
-  aggregation_delay              = %[2]s
-	aggregation_method             = "EVENT_FLOW"
+  slide_by						 = %[8]s
   close_violations_on_expiration = true
   open_violation_on_expiration   = true
   expiration_duration            = 120
   violation_time_limit_seconds   = %[9]s
 
-  nrql {
-    query = "SELECT uniqueCount(hostname) FROM ComputeSample"
-  }
+	nrql {
+    query             = "SELECT uniqueCount(hostname) FROM ComputeSample"
+    evaluation_offset = "%[2]s"
+	}
 
-  critical {
+	critical {
     operator              = "above"
     threshold             = 0.75
     threshold_duration    = %[3]s
     threshold_occurrences = "all"
-  }
+	}
 
-  warning {
-    operator              = "equals"
-    threshold             = 0.5
-    threshold_duration    = 120
-    threshold_occurrences = "AT_LEAST_ONCE"
-  }
+	warning {
+		operator              = "equals"
+		threshold             = 0.5
+		threshold_duration    = 120
+		threshold_occurrences = "AT_LEAST_ONCE"
+	}
 
-  %[6]s
+	%[6]s
 }
-`, name, aggregationDelay, duration, fillOption, fillValue, conditionalAttrs, aggregationWindow, slideBy, violation_time_limit_seconds)
+`, name, evaluationOffset, duration, fillOption, fillValue, conditionalAttrs, aggregationWindow, slideBy, violation_time_limit_seconds)
 }
 
 // Uses deprecated attributes for test case
@@ -723,7 +722,7 @@ resource "newrelic_nrql_alert_condition" "foo" {
 	runbook_url                    = "https://foo.example.com"
 	enabled                        = false
 	description                    = "test description"
-  fill_option                    = "%[5]s"
+    fill_option                    = "%[5]s"
 	fill_value                     = %[6]s
 	close_violations_on_expiration = true
 	open_violation_on_expiration   = true
@@ -762,7 +761,7 @@ resource "newrelic_nrql_alert_condition" "foo" {
 func testAccNewRelicNrqlAlertConditionNerdGraphConfig(
 	name string,
 	conditionType string,
-	aggregationDelay int,
+	nrqlEvalOffset int,
 	termDuration int,
 	fillOption string,
 	fillValue string,
@@ -788,11 +787,10 @@ resource "newrelic_nrql_alert_condition" "foo" {
 	open_violation_on_expiration   = true
 	expiration_duration            = 120
 	aggregation_window             = 60
-	aggregation_delay              = %[3]d
-	aggregation_method             = "EVENT_FLOW"
 
 	nrql {
 		query             = "SELECT uniqueCount(hostname) FROM ComputeSample"
+		evaluation_offset = %[3]d
 	}
 
 	critical {
@@ -812,7 +810,7 @@ resource "newrelic_nrql_alert_condition" "foo" {
 	# Will be baseline_direction depending on condition type
 	%[7]s
 }
-`, name, conditionType, aggregationDelay, termDuration, fillOption, fillValue, conditionalAttr)
+`, name, conditionType, nrqlEvalOffset, termDuration, fillOption, fillValue, conditionalAttr)
 }
 
 func testAccNewRelicNrqlAlertConditionStreamingMethodsNerdGraphConfig(
diff --git b/newrelic/resource_newrelic_nrql_drop_rule.go a/newrelic/resource_newrelic_nrql_drop_rule.go
index c7ab673e..e946d34e 100644
--- b/newrelic/resource_newrelic_nrql_drop_rule.go
+++ a/newrelic/resource_newrelic_nrql_drop_rule.go
@@ -116,8 +116,9 @@ func resourceNewRelicNRQLDropRuleRead(ctx context.Context, d *schema.ResourceDat
 	}
 
 	rule, err := getNRQLDropRuleByID(ctx, client, accountID, ruleID)
+
 	if err != nil {
-		if _, ok := err.(*nrErrors.NotFound); ok {
+		if _, ok := err.(*nrErrors.NotFound); ok || errors.Is(err, errors.New(string(nrqldroprules.NRQLDropRulesErrorReasonTypes.RULE_NOT_FOUND))) {
 			d.SetId("")
 			return nil
 		}
@@ -208,12 +209,12 @@ func getNRQLDropRuleByID(ctx context.Context, client *newrelic.NewRelic, account
 	}
 
 	if rules.Error.Reason == nrqldroprules.NRQLDropRulesErrorReasonTypes.RULE_NOT_FOUND {
-		return nil, nrErrors.NewNotFound("RULE_NOT_FOUND\n" + rules.Error.Description)
+		return nil, errors.New("RULE_NOT_FOUND\n" + rules.Error.Description)
 	}
 	for _, v := range rules.Rules {
 		if v.ID == ruleID {
 			return &v, nil
 		}
 	}
-	return nil, nrErrors.NewNotFound("RULE_NOT_FOUND")
+	return nil, errors.New("drop rule not found")
 }
diff --git b/newrelic/resource_newrelic_obfuscation_expression.go a/newrelic/resource_newrelic_obfuscation_expression.go
index 646ee19d..bd290ee4 100644
--- b/newrelic/resource_newrelic_obfuscation_expression.go
+++ a/newrelic/resource_newrelic_obfuscation_expression.go
@@ -11,6 +11,7 @@ import (
 	"github.com/newrelic/newrelic-client-go/v2/pkg/logconfigurations"
 )
 
+//
 func resourceNewRelicObfuscationExpression() *schema.Resource {
 	return &schema.Resource{
 		CreateContext: resourceNewRelicObfuscationExpressionCreate,
@@ -46,7 +47,7 @@ func resourceNewRelicObfuscationExpression() *schema.Resource {
 	}
 }
 
-// Create the obfuscation expression
+//Create the obfuscation expression
 func resourceNewRelicObfuscationExpressionCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
 	providerConfig := meta.(*ProviderConfig)
 	client := providerConfig.NewClient
@@ -75,7 +76,7 @@ func resourceNewRelicObfuscationExpressionCreate(ctx context.Context, d *schema.
 	return resourceNewRelicObfuscationExpressionRead(ctx, d, meta)
 }
 
-// Read the obfuscation expression
+//Read the obfuscation expression
 func resourceNewRelicObfuscationExpressionRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
 	providerConfig := meta.(*ProviderConfig)
 	client := providerConfig.NewClient
@@ -108,7 +109,7 @@ func resourceNewRelicObfuscationExpressionRead(ctx context.Context, d *schema.Re
 	return nil
 }
 
-// Update the obfuscation expression
+//Update the obfuscation expression
 func resourceNewRelicObfuscationExpressionUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
 	client := meta.(*ProviderConfig).NewClient
 	updateInput := expandObfuscationExpressionUpdateInput(d)
@@ -145,7 +146,7 @@ func expandObfuscationExpressionUpdateInput(d *schema.ResourceData) logconfigura
 	return updateInp
 }
 
-// Delete the obfuscation expression
+//Delete the obfuscation expression
 func resourceNewRelicObfuscationExpressionDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
 	providerConfig := meta.(*ProviderConfig)
 	client := providerConfig.NewClient
diff --git b/newrelic/resource_newrelic_obfuscation_rule.go a/newrelic/resource_newrelic_obfuscation_rule.go
index 7e877d22..859ba096 100644
--- b/newrelic/resource_newrelic_obfuscation_rule.go
+++ a/newrelic/resource_newrelic_obfuscation_rule.go
@@ -4,17 +4,16 @@ import (
 	"context"
 	"errors"
 	"fmt"
-	"log"
-
 	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
 	"github.com/newrelic/newrelic-client-go/v2/newrelic"
 	"github.com/newrelic/newrelic-client-go/v2/pkg/logconfigurations"
+	"log"
 )
 
-// Defining the schema of the New Relic Obfuscation rule
+//Defining the schema of the New Relic Obfuscation rule
 func resourceNewRelicObfuscationRule() *schema.Resource {
 	return &schema.Resource{
 		CreateContext: resourceNewRelicObfuscationRuleCreate,
@@ -61,7 +60,7 @@ func resourceNewRelicObfuscationRule() *schema.Resource {
 	}
 }
 
-// ObfuscationRuleActionInputSchemaElem returns the schema of the actions of the New Relic obfuscation rule
+//ObfuscationRuleActionInputSchemaElem returns the schema of the actions of the New Relic obfuscation rule
 func ObfuscationRuleActionInputSchemaElem() *schema.Resource {
 	return &schema.Resource{
 		Schema: map[string]*schema.Schema{
@@ -95,7 +94,7 @@ func listValidLogConfigurationsObfuscationMethod() []string {
 	}
 }
 
-// Create the obfuscation rule
+//Create the obfuscation rule
 func resourceNewRelicObfuscationRuleCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
 	providerConfig := meta.(*ProviderConfig)
 	client := providerConfig.NewClient
@@ -146,7 +145,7 @@ func resourceNewRelicObfuscationRuleCreate(ctx context.Context, d *schema.Resour
 	return nil
 }
 
-// Read the obfuscation Rule
+//Read the obfuscation Rule
 func resourceNewRelicObfuscationRuleRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
 	providerConfig := meta.(*ProviderConfig)
 	client := providerConfig.NewClient
@@ -200,7 +199,7 @@ func flattenActions(actions *[]logconfigurations.LogConfigurationsObfuscationAct
 	return flatActions
 }
 
-// Update the obfuscation Rule
+//Update the obfuscation Rule
 func resourceNewRelicObfuscationRuleUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
 	client := meta.(*ProviderConfig).NewClient
 	updateInput := expandObfuscationRuleUpdateInput(d)
@@ -247,7 +246,7 @@ func expandObfuscationRuleUpdateInput(d *schema.ResourceData) logconfigurations.
 	return updateInp
 }
 
-// Delete the obfuscation Rule
+//Delete the obfuscation Rule
 func resourceNewRelicObfuscationRuleDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
 	providerConfig := meta.(*ProviderConfig)
 	client := providerConfig.NewClient
diff --git b/newrelic/resource_newrelic_one_dashboard.go a/newrelic/resource_newrelic_one_dashboard.go
index 02b69279..35a55b21 100644
--- b/newrelic/resource_newrelic_one_dashboard.go
+++ a/newrelic/resource_newrelic_one_dashboard.go
@@ -307,125 +307,6 @@ func dashboardWidgetSchemaBase() map[string]*schema.Schema {
 			Type:     schema.TypeBool,
 			Optional: true,
 		},
-		"facet_show_other_series": {
-			Type:     schema.TypeBool,
-			Optional: true,
-		},
-		"legend_enabled": {
-			Type:     schema.TypeBool,
-			Optional: true,
-			Default:  true,
-		},
-		"y_axis_left_min": {
-			Type:     schema.TypeFloat,
-			Optional: true,
-		},
-		"y_axis_left_max": {
-			Type:     schema.TypeFloat,
-			Optional: true,
-		},
-		"null_values": {
-			Type:     schema.TypeList,
-			Optional: true,
-			Elem:     dashboardWidgetNullValuesSchemaElem(),
-		},
-		"units": {
-			Type:     schema.TypeList,
-			Optional: true,
-			Elem:     dashboardWidgetUnitsSchemaElem(),
-		},
-		"colors": {
-			Type:     schema.TypeList,
-			Optional: true,
-			Elem:     dashboardWidgetColorSchemaElem(),
-		},
-	}
-}
-
-func dashboardWidgetColorSchemaElem() *schema.Resource {
-	return &schema.Resource{
-		Schema: map[string]*schema.Schema{
-			"color": {
-				Type:     schema.TypeString,
-				Optional: true,
-			},
-			"series_overrides": {
-				Type:     schema.TypeList,
-				Optional: true,
-				Elem: &schema.Resource{
-					Schema: map[string]*schema.Schema{
-						"color": {
-							Type:        schema.TypeString,
-							Optional:    true,
-							Description: "Color code",
-						},
-						"series_name": {
-							Type:        schema.TypeString,
-							Optional:    true,
-							Description: "Series name",
-						},
-					},
-				},
-			},
-		},
-	}
-}
-
-func dashboardWidgetUnitsSchemaElem() *schema.Resource {
-	return &schema.Resource{
-		Schema: map[string]*schema.Schema{
-			"unit": {
-				Type:     schema.TypeString,
-				Optional: true,
-			},
-			"series_overrides": {
-				Type:     schema.TypeList,
-				Optional: true,
-				Elem: &schema.Resource{
-					Schema: map[string]*schema.Schema{
-						"unit": {
-							Type:        schema.TypeString,
-							Optional:    true,
-							Description: "Unit name",
-						},
-						"series_name": {
-							Type:        schema.TypeString,
-							Optional:    true,
-							Description: "Series name",
-						},
-					},
-				},
-			},
-		},
-	}
-}
-
-func dashboardWidgetNullValuesSchemaElem() *schema.Resource {
-	return &schema.Resource{
-		Schema: map[string]*schema.Schema{
-			"null_value": {
-				Type:     schema.TypeString,
-				Optional: true,
-			},
-			"series_overrides": {
-				Type:     schema.TypeList,
-				Optional: true,
-				Elem: &schema.Resource{
-					Schema: map[string]*schema.Schema{
-						"null_value": {
-							Type:        schema.TypeString,
-							Optional:    true,
-							Description: "Null value",
-						},
-						"series_name": {
-							Type:        schema.TypeString,
-							Optional:    true,
-							Description: "Series name",
-						},
-					},
-				},
-			},
-		},
 	}
 }
 
diff --git b/newrelic/resource_newrelic_one_dashboard_test.go a/newrelic/resource_newrelic_one_dashboard_test.go
index 0b006a77..fd1e79e7 100644
--- b/newrelic/resource_newrelic_one_dashboard_test.go
+++ a/newrelic/resource_newrelic_one_dashboard_test.go
@@ -79,7 +79,7 @@ func TestAccNewRelicOneDashboard_CrossAccountQueries(t *testing.T) {
 		Steps: []resource.TestStep{
 			// Test: Create
 			{
-				Config: testAccCheckNewRelicOneDashboardConfig_TwoPageBasic(rName, "3814156"), // Hard-coded accountID for NRQL queries
+				Config: testAccCheckNewRelicOneDashboardConfig_TwoPageBasic(rName, "1"), // Hard-coded accountID for NRQL queries
 				Check: resource.ComposeTestCheckFunc(
 					testAccCheckNewRelicOneDashboardExists("newrelic_one_dashboard.bar", 0),
 				),
@@ -753,7 +753,7 @@ func testAccCheckNewRelicOneDashboardConfig_VariableNRQL() string {
 	}
     name = "variable"
 	nrql_query {
-		account_ids = [3806526]
+		account_ids = [2520528]
 		query = "FROM Transaction SELECT average(duration) FACET appName"
 	}
 	replacement_strategy = "default"
@@ -774,7 +774,7 @@ func testAccCheckNewRelicOneDashboardConfig_VariableNRQLUpdated() string {
 	}
     name = "variableUpdated"
 	nrql_query {
-		account_ids = [3806526, 3814156]
+		account_ids = [2520528, 1]
 		query = "FROM Transaction SELECT average(duration) FACET appName"
 	}
 	replacement_strategy = "default"
@@ -1197,91 +1197,3 @@ func testAccNewRelicOneDashboard_FilterCurrentDashboardPageChange_TwoPages(dashb
 	  }
 	}`
 }
-
-func TestAccNewRelicOneDashboard_CreateOnePage_RawConfig(t *testing.T) {
-	rName := fmt.Sprintf("tf-test-%s", acctest.RandString(5))
-	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:     func() { testAccPreCheck(t) },
-		Providers:    testAccProviders,
-		CheckDestroy: testAccCheckNewRelicOneDashboardDestroy,
-		Steps: []resource.TestStep{
-			// Test: Create
-			{
-				Config: testAccCheckNewRelicOneDashboardConfig_RawConfig(rName, strconv.Itoa(testAccountID)),
-				Check: resource.ComposeTestCheckFunc(
-					testAccCheckNewRelicOneDashboardExists("newrelic_one_dashboard.bar", 0),
-				),
-			},
-			// Import
-			{
-				ResourceName:      "newrelic_one_dashboard.bar",
-				ImportState:       true,
-				ImportStateVerify: true,
-			},
-		},
-	})
-}
-
-func testAccCheckNewRelicOneDashboardConfig_RawConfig(dashboardName string, accountID string) string {
-	return `
-	resource "newrelic_one_dashboard" "bar" {
-	  name = "` + dashboardName + `"
-	  permissions = "private"
-
-	  page {
-		name = "` + dashboardName + ` page one"
-
-		widget_area {
-      title = "Heap Utilization"
-      row = 1
-      column = 1
-      height = 3
-      width = 4
-
-      nrql_query {
-      account_id = ` + accountID + `
-        query = <<EOT
-FROM JVMSampleActiveMQ SELECT latest(HeapMemoryUsage.Used) / 1000, latest(HeapMemoryUsage.Max) / 1000, latest(HeapMemoryUsage.Committed) / 1000, latest(HeapMemoryUsage.Init) / 1000 TIMESERIES AUTO SINCE 3 month ago
-EOT
-      }
-      facet_show_other_series = true
-      legend_enabled = true
-      ignore_time_range = true
-      y_axis_left_min = 0
-      y_axis_left_max = 0
-
-      null_values {
-        null_value = "preserve"
-        series_overrides {
-          null_value = "default"
-          series_name = "Heap Memory Usage. Used"
-        }
-        series_overrides {
-          null_value = "zero"
-          series_name = "Heap Memory Usage. Max"
-        }
-      }
-
-      units {
-        unit = "BYTES"
-        series_overrides {
-          unit = "BYTES"
-          series_name = "Heap Memory Usage. Committed"
-        }
-      }
-
-      colors {
-        color = "#722727"
-        series_overrides {
-          color = "#722727"
-          series_name = "Heap Memory Usage. Used"
-        }
-        series_overrides {
-          color = "#236f70"
-          series_name = "Heap Memory Usage. Max"
-        }
-      }
-    }
-	  }
-	}`
-}
diff --git b/newrelic/resource_newrelic_service_level.go a/newrelic/resource_newrelic_service_level.go
index ce70d381..d9eeabaa 100644
--- b/newrelic/resource_newrelic_service_level.go
+++ a/newrelic/resource_newrelic_service_level.go
@@ -151,12 +151,7 @@ func eventsQuerySelectSchema() *schema.Resource {
 				Type:         schema.TypeString,
 				Required:     true,
 				Description:  "",
-				ValidateFunc: validation.StringInSlice([]string{"COUNT", "SUM", "GET_CDF_COUNT", "GET_FIELD"}, false),
-			},
-			"threshold": {
-				Type:        schema.TypeFloat,
-				Optional:    true,
-				Description: "The event threshold to use in the SELECT clause",
+				ValidateFunc: validation.StringInSlice([]string{"COUNT", "SUM"}, false),
 			},
 		},
 	}
diff --git b/newrelic/resource_newrelic_service_level_test.go a/newrelic/resource_newrelic_service_level_test.go
index f9c5f7b4..53f2fe81 100644
--- b/newrelic/resource_newrelic_service_level_test.go
+++ a/newrelic/resource_newrelic_service_level_test.go
@@ -81,45 +81,6 @@ resource "newrelic_service_level" "sli" {
 		}
 	}
 }
-
-resource "newrelic_service_level" "cdf_sli" {
-  # Set count to 0 while the API is in beta
-  count = 0
-  guid = newrelic_workload.workload.guid
-  name = "%[2]s using cdf"
-
-  events {
-    account_id = %[1]d
-    valid_events {
-      from = "Metric"
-      select {
-        attribute = "query.wallClockTime.negative.distribution"
-        function = "GET_FIELD"
-      }
-      where = "metricName = 'query.wallClockTime.negative.distribution'"
-    }
-
-    good_events {
-      from = "Metric"
-      select {
-        attribute = "query.wallClockTime.negative.distribution"
-        function =  "GET_CDF_COUNT"
-        threshold = 7
-      }
-      where = "metricName = 'query.wallClockTime.negative.distribution'"
-    }
-  }
-
-  objective {
-    target = 49
-    time_window {
-      rolling {
-        count = 7
-        unit  = "DAY"
-      }
-    }
-  }
-}
 `, testAccountID, name)
 }
 
diff --git b/newrelic/resource_newrelic_synthetics_alert_condition.go a/newrelic/resource_newrelic_synthetics_alert_condition.go
index a94cf9b5..ed9db2c3 100644
--- b/newrelic/resource_newrelic_synthetics_alert_condition.go
+++ a/newrelic/resource_newrelic_synthetics_alert_condition.go
@@ -49,11 +49,6 @@ func resourceNewRelicSyntheticsAlertCondition() *schema.Resource {
 				Default:     true,
 				Description: "Set whether to enable the alert condition. Defaults to true.",
 			},
-			"entity_guid": {
-				Type:        schema.TypeString,
-				Computed:    true,
-				Description: "The unique entity identifier of the condition in New Relic.",
-			},
 		},
 	}
 }
@@ -72,20 +67,18 @@ func expandSyntheticsCondition(d *schema.ResourceData, monitorID string) *alerts
 	return &condition
 }
 
-func flattenSyntheticsCondition(condition *alerts.SyntheticsCondition, accountID int, d *schema.ResourceData) error {
+func flattenSyntheticsCondition(condition *alerts.SyntheticsCondition, d *schema.ResourceData) error {
 	ids, err := parseIDs(d.Id(), 2)
 	if err != nil {
 		return err
 	}
 
 	policyID := ids[0]
-	entityGUID := getConditionEntityGUID(condition.ID, accountID)
 
 	_ = d.Set("policy_id", policyID)
 	_ = d.Set("name", condition.Name)
 	_ = d.Set("runbook_url", condition.RunbookURL)
 	_ = d.Set("enabled", condition.Enabled)
-	_ = d.Set("entity_guid", entityGUID)
 
 	return nil
 }
@@ -147,7 +140,7 @@ func resourceNewRelicSyntheticsAlertConditionRead(ctx context.Context, d *schema
 		return diag.FromErr(err)
 	}
 
-	return diag.FromErr(flattenSyntheticsCondition(condition, accountID, d))
+	return diag.FromErr(flattenSyntheticsCondition(condition, d))
 }
 
 func resourceNewRelicSyntheticsAlertConditionUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
diff --git b/newrelic/resource_newrelic_synthetics_multilocation_alert_condition.go a/newrelic/resource_newrelic_synthetics_multilocation_alert_condition.go
index dcabfde6..20798e60 100644
--- b/newrelic/resource_newrelic_synthetics_multilocation_alert_condition.go
+++ a/newrelic/resource_newrelic_synthetics_multilocation_alert_condition.go
@@ -85,11 +85,6 @@ func resourceNewRelicSyntheticsMultiLocationAlertCondition() *schema.Resource {
 				ValidateFunc: validation.IntInSlice([]int{0, 3600, 7200, 14400, 28800, 43200, 86400}),
 				Description:  "The maximum number of seconds an incident can remain open before being closed by the system.  Must be one of: 0, 3600, 7200, 14400, 28800, 43200, 86400",
 			},
-			"entity_guid": {
-				Type:        schema.TypeString,
-				Computed:    true,
-				Description: "The unique entity identifier of the condition in New Relic.",
-			},
 		},
 	}
 }
@@ -149,7 +144,7 @@ func resourceNewRelicSyntheticsMultiLocationAlertConditionRead(ctx context.Conte
 		return diag.FromErr(err)
 	}
 
-	return diag.FromErr(flattenMultiLocationSyntheticsCondition(condition, accountID, d))
+	return diag.FromErr(flattenMultiLocationSyntheticsCondition(condition, d))
 }
 
 func resourceNewRelicSyntheticsMultiLocationAlertConditionUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
diff --git b/newrelic/resource_newrelic_synthetics_secure_credential_test.go a/newrelic/resource_newrelic_synthetics_secure_credential_test.go
index b388a2e8..c84fdcd9 100644
--- b/newrelic/resource_newrelic_synthetics_secure_credential_test.go
+++ a/newrelic/resource_newrelic_synthetics_secure_credential_test.go
@@ -10,7 +10,6 @@ import (
 	"testing"
 	"time"
 
-	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
 	"github.com/newrelic/newrelic-client-go/v2/pkg/entities"
@@ -18,10 +17,10 @@ import (
 
 func TestAccNewRelicSyntheticsSecureCredential_Basic(t *testing.T) {
 	resourceName := "newrelic_synthetics_secure_credential.foo"
-	rName := fmt.Sprintf("TF_TEST_%s", acctest.RandString(7))
+	rName := generateNameForIntegrationTestResource()
 
 	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:     func() { testAccPreCheckEnvVars(t) },
+		PreCheck:     func() { testAccPreCheck(t) },
 		Providers:    testAccProviders,
 		CheckDestroy: testAccCheckNewRelicSyntheticsSecureCredentialDestroy,
 		Steps: []resource.TestStep{
@@ -58,7 +57,7 @@ func TestAccNewRelicSyntheticsSecureCredential_Error(t *testing.T) {
 	resourceName := "newrelic_synthetics_secure_credential.foo"
 
 	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:     func() { testAccPreCheckEnvVars(t) },
+		PreCheck:     func() { testAccPreCheck(t) },
 		Providers:    testAccProviders,
 		CheckDestroy: testAccCheckNewRelicSyntheticsSecureCredentialDestroy,
 		Steps: []resource.TestStep{
diff --git b/newrelic/resource_newrelic_workflow_test.go a/newrelic/resource_newrelic_workflow_test.go
index dae374bf..6317dcba 100644
--- b/newrelic/resource_newrelic_workflow_test.go
+++ a/newrelic/resource_newrelic_workflow_test.go
@@ -122,22 +122,6 @@ func TestNewRelicWorkflow_MinimalConfig(t *testing.T) {
 	})
 }
 
-func TestNewRelicWorkflow_InvalidIssuesFilterAttr(t *testing.T) {
-	rName := generateNameForIntegrationTestResource()
-
-	resource.ParallelTest(t, resource.TestCase{
-		PreCheck:     func() { testAccPreCheckEnvVars(t) },
-		Providers:    testAccProviders,
-		CheckDestroy: testAccNewRelicWorkflowDestroy,
-		Steps: []resource.TestStep{
-			{
-				Config:      testAccNewRelicWorkflowConfigurationInvalidIssuesFilterAttr(testAccountID, rName),
-				ExpectError: regexp.MustCompile("VALIDATION_ERROR"),
-			},
-		},
-	})
-}
-
 func TestNewRelicWorkflow_UpdateChannels(t *testing.T) {
 	resourceName := "newrelic_workflow.foo"
 	channelResourceName := "oldChannel"
@@ -403,58 +387,7 @@ resource "newrelic_workflow" "foo" {
     type = "FILTER"
 
     predicate {
-      attribute = "accumulations.sources"
-      operator  = "EQUAL"
-      values    = ["newrelic"]
-    }
-  }
-
-  destination {
-    channel_id = newrelic_notification_channel.foo.id
-  }
-}
-`, accountID, name)
-}
-
-func testAccNewRelicWorkflowConfigurationInvalidIssuesFilterAttr(accountID int, name string) string {
-	return fmt.Sprintf(`
-resource "newrelic_notification_destination" "foo" {
-  name = "tf-test-destination"
-  type = "WEBHOOK"
-
-  property {
-    key   = "url"
-    value = "https://webhook.site/"
-  }
-
-  auth_basic {
-    user     = "username"
-    password = "password"
-  }
-}
-
-resource "newrelic_notification_channel" "foo" {
-  name           = "webhook-example"
-  type           = "WEBHOOK"
-  product        = "IINT"
-  destination_id = newrelic_notification_destination.foo.id
-
-  property {
-    key   = "payload"
-    value = "{}"
-  }
-}
-
-resource "newrelic_workflow" "foo" {
-  name                  = "%[2]s"
-  muting_rules_handling = "NOTIFY_ALL_ISSUES"
-
-  issues_filter {
-    name = "filter-name"
-    type = "FILTER"
-
-    predicate {
-      attribute = "invalid.attribute"
+      attribute = "source"
       operator  = "EQUAL"
       values    = ["newrelic"]
     }
@@ -512,7 +445,7 @@ resource "newrelic_workflow" "foo" {
     type = "FILTER"
 
     predicate {
-      attribute = "priority"
+      attribute = "source"
       operator  = "EQUAL"
       values    = ["newrelic", "pagerduty"]
     }
@@ -583,7 +516,7 @@ resource "newrelic_workflow" "foo" {
     type = "FILTER"
 
     predicate {
-      attribute = "priority"
+      attribute = "source"
       operator  = "EQUAL"
       values    = ["newrelic", "pagerduty"]
     }
@@ -659,7 +592,7 @@ resource "newrelic_workflow" "foo" {
     type = "FILTER"
 
     predicate {
-      attribute = "priority"
+      attribute = "attr"
       operator  = "EQUAL"
       values    = ["test"]
     }
@@ -684,7 +617,7 @@ resource "newrelic_workflow" "foo" {
     type = "FILTER"
 
     predicate {
-      attribute = "priority"
+      attribute = "attr"
       operator  = "EQUAL"
       values    = ["test"]
     }
@@ -710,10 +643,10 @@ resource "newrelic_workflow" "foo" {
 		type = "FILTER"
 
 		predicate {
-			attribute = "priority"
-			operator  = "EQUAL"
-			values    = ["test"]
-		}
+		attribute = "attr"
+		operator  = "EQUAL"
+		values    = ["test"]
+	}
 	}
 
 	destination {
diff --git b/newrelic/structures_newrelic_alert_condition.go a/newrelic/structures_newrelic_alert_condition.go
index 1c2a18fa..9169eefa 100644
--- b/newrelic/structures_newrelic_alert_condition.go
+++ a/newrelic/structures_newrelic_alert_condition.go
@@ -72,9 +72,7 @@ func expandAlertConditionTerms(terms []interface{}) []alerts.ConditionTerm {
 	return perms
 }
 
-func flattenAlertCondition(condition *alerts.Condition, accountID int, d *schema.ResourceData) error {
-	entityGUID := getConditionEntityGUID(condition.ID, accountID)
-
+func flattenAlertCondition(condition *alerts.Condition, d *schema.ResourceData) error {
 	_ = d.Set("name", condition.Name)
 	_ = d.Set("enabled", condition.Enabled)
 	_ = d.Set("type", condition.Type)
@@ -84,7 +82,6 @@ func flattenAlertCondition(condition *alerts.Condition, accountID int, d *schema
 	_ = d.Set("gc_metric", condition.GCMetric)
 	_ = d.Set("user_defined_metric", condition.UserDefined.Metric)
 	_ = d.Set("user_defined_value_function", condition.UserDefined.ValueFunction)
-	_ = d.Set("entity_guid", entityGUID)
 
 	// The condition_scope field is not always returned by the API. This conditional
 	// handles flattening for all cases.
diff --git b/newrelic/structures_newrelic_infra_alert_condition.go a/newrelic/structures_newrelic_infra_alert_condition.go
index f09f753a..ba6143db 100644
--- b/newrelic/structures_newrelic_infra_alert_condition.go
+++ a/newrelic/structures_newrelic_infra_alert_condition.go
@@ -79,14 +79,13 @@ func expandInfraAlertThreshold(v interface{}) *alerts.InfrastructureConditionThr
 	return alertInfraThreshold
 }
 
-func flattenInfraAlertCondition(condition *alerts.InfrastructureCondition, accountID int, d *schema.ResourceData) error {
+func flattenInfraAlertCondition(condition *alerts.InfrastructureCondition, d *schema.ResourceData) error {
 	ids, err := parseIDs(d.Id(), 2)
 	if err != nil {
 		return err
 	}
 
 	policyID := ids[0]
-	entityGUID := getConditionEntityGUID(condition.ID, accountID)
 
 	_ = d.Set("policy_id", policyID)
 	_ = d.Set("name", condition.Name)
@@ -99,7 +98,6 @@ func flattenInfraAlertCondition(condition *alerts.InfrastructureCondition, accou
 	_ = d.Set("description", condition.Description)
 	_ = d.Set("created_at", time.Time(*condition.CreatedAt).Unix())
 	_ = d.Set("updated_at", time.Time(*condition.UpdatedAt).Unix())
-	_ = d.Set("entity_guid", entityGUID)
 
 	if condition.Where != "" {
 		_ = d.Set("where", condition.Where)
diff --git b/newrelic/structures_newrelic_one_dashboard.go a/newrelic/structures_newrelic_one_dashboard.go
index f2ba05e2..f97158b5 100644
--- b/newrelic/structures_newrelic_one_dashboard.go
+++ a/newrelic/structures_newrelic_one_dashboard.go
@@ -479,29 +479,6 @@ func expandDashboardWidgetInput(w map[string]interface{}, meta interface{}, visu
 		}
 	}
 
-	if q, ok := w["legend_enabled"]; ok {
-		var l dashboards.DashboardWidgetLegend
-		l.Enabled = q.(bool)
-		cfg.Legend = &l
-	}
-	if q, ok := w["facet_show_other_series"]; ok {
-		var l dashboards.DashboardWidgetFacet
-		l.ShowOtherSeries = q.(bool)
-		cfg.Facet = &l
-	}
-	if q, ok := w["y_axis_left_min"]; ok {
-		var l dashboards.DashboardWidgetYAxisLeft
-		l.Min = q.(float64)
-		if q, ok := w["y_axis_left_max"]; ok {
-			l.Max = q.(float64)
-		}
-		cfg.YAxisLeft = &l
-	}
-
-	cfg = expandDashboardWidgetNullValuesInput(w, cfg)
-	cfg = expandDashboardWidgetColorsInput(w, cfg)
-	cfg = expandDashboardWidgetUnitsInput(w, cfg)
-
 	if l, ok := w["limit"]; ok {
 		cfg.Limit = l.(float64)
 	}
@@ -523,111 +500,6 @@ func expandDashboardWidgetInput(w map[string]interface{}, meta interface{}, visu
 	return &widget, &cfg, nil
 }
 
-func expandDashboardWidgetUnitsInput(w map[string]interface{}, cfg dashboards.RawConfiguration) dashboards.RawConfiguration {
-	if q, ok := w["units"]; ok {
-		units := q.([]interface{})
-		var n dashboards.DashboardWidgetUnits
-		if len(units) > 0 {
-			for _, y := range units {
-				if y != nil {
-					z := y.(map[string]interface{})
-					if v, ok := z["unit"]; ok {
-						n.Unit = v.(string)
-					}
-					if s, ok := z["series_overrides"]; ok {
-						var seriesOverrides = s.([]interface{})
-						n.SeriesOverrides = make([]dashboards.DashboardWidgetUnitOverrides, len(seriesOverrides))
-						for i, v := range seriesOverrides {
-							var t dashboards.DashboardWidgetUnitOverrides
-							k := v.(map[string]interface{})
-							if n, ok := k["unit"]; ok {
-								t.Unit = n.(string)
-							}
-							if n, ok := k["series_name"]; ok {
-								t.SeriesName = n.(string)
-							}
-							n.SeriesOverrides[i] = t
-						}
-					}
-				}
-			}
-			cfg.Units = &n
-		}
-	}
-	return cfg
-}
-
-func expandDashboardWidgetColorsInput(w map[string]interface{}, cfg dashboards.RawConfiguration) dashboards.RawConfiguration {
-	if q, ok := w["colors"]; ok {
-		colors := q.([]interface{})
-		var n dashboards.DashboardWidgetColors
-		if len(colors) > 0 {
-			for _, y := range colors {
-				if y != nil {
-					z := y.(map[string]interface{})
-					if v, ok := z["color"]; ok {
-						n.Color = v.(string)
-					}
-					if s, ok := z["series_overrides"]; ok {
-						var seriesOverrides = s.([]interface{})
-						n.SeriesOverrides = make([]dashboards.DashboardWidgetColorOverrides, len(seriesOverrides))
-						for i, v := range seriesOverrides {
-							var t dashboards.DashboardWidgetColorOverrides
-							k := v.(map[string]interface{})
-							if n, ok := k["color"]; ok {
-								t.Color = n.(string)
-							}
-							if n, ok := k["series_name"]; ok {
-								t.SeriesName = n.(string)
-							}
-							n.SeriesOverrides[i] = t
-						}
-
-					}
-				}
-			}
-			cfg.Colors = &n
-		}
-	}
-	return cfg
-}
-
-func expandDashboardWidgetNullValuesInput(w map[string]interface{}, cfg dashboards.RawConfiguration) dashboards.RawConfiguration {
-	if q, ok := w["null_values"]; ok {
-		nullValues := q.([]interface{})
-		if len(nullValues) > 0 {
-			var n dashboards.DashboardWidgetNullValues
-			for _, y := range nullValues {
-				if y != nil {
-					z := y.(map[string]interface{})
-					if v, ok := z["null_value"]; ok {
-						n.NullValue = v.(string)
-					}
-					if s, ok := z["series_overrides"]; ok {
-						var seriesOverrides = s.([]interface{})
-						n.SeriesOverrides = make([]dashboards.DashboardWidgetNullValueOverrides, len(seriesOverrides))
-						for i, v := range seriesOverrides {
-							var t dashboards.DashboardWidgetNullValueOverrides
-							k := v.(map[string]interface{})
-							if n, ok := k["null_value"]; ok {
-								t.NullValue = n.(string)
-							}
-							if n, ok := k["series_name"]; ok {
-								t.SeriesName = n.(string)
-							}
-							n.SeriesOverrides[i] = t
-						}
-
-					}
-				}
-				cfg.NullValues = &n
-			}
-
-		}
-	}
-	return cfg
-}
-
 func expandLinkedEntityGUIDs(guids []interface{}) []common.EntityGUID {
 	out := make([]common.EntityGUID, len(guids))
 
@@ -877,26 +749,6 @@ func flattenDashboardWidget(in *entities.DashboardWidget, pageGUID string) (stri
 		out["ignore_time_range"] = rawCfg.PlatformOptions.IgnoreTimeRange
 	}
 
-	if rawCfg.Legend != nil {
-		out["legend_enabled"] = rawCfg.Legend.Enabled
-	}
-	if rawCfg.Facet != nil {
-		out["facet_show_other_series"] = rawCfg.Facet.ShowOtherSeries
-	}
-	if rawCfg.YAxisLeft != nil {
-		out["y_axis_left_min"] = rawCfg.YAxisLeft.Min
-		out["y_axis_left_max"] = rawCfg.YAxisLeft.Max
-	}
-	if rawCfg.NullValues != nil {
-		out["null_values"] = flattenDashboardWidgetNullValues(rawCfg.NullValues)
-	}
-	if rawCfg.Units != nil {
-		out["units"] = flattenDashboardWidgetUnits(rawCfg.Units)
-	}
-	if rawCfg.Colors != nil {
-		out["colors"] = flattenDashboardWidgetColors(rawCfg.Colors)
-	}
-
 	// Set widget type and arguments
 	switch in.Visualization.ID {
 	case "viz.area":
@@ -1075,56 +927,3 @@ func setDashboardWidgetFilterCurrentDashboardLinkedEntity(d *schema.ResourceData
 
 	return nil
 }
-func flattenDashboardWidgetNullValues(in *dashboards.DashboardWidgetNullValues) interface{} {
-	out := make([]interface{}, 1)
-	k := make(map[string]interface{})
-	k["null_value"] = in.NullValue
-	seriesOverrides := make([]interface{}, len(in.SeriesOverrides))
-	for i, v := range in.SeriesOverrides {
-		m := make(map[string]interface{})
-
-		m["null_value"] = v.NullValue
-		m["series_name"] = v.SeriesName
-
-		seriesOverrides[i] = m
-	}
-	k["series_overrides"] = seriesOverrides
-	out[0] = k
-	return out
-}
-
-func flattenDashboardWidgetColors(in *dashboards.DashboardWidgetColors) interface{} {
-	out := make([]interface{}, 1)
-	k := make(map[string]interface{})
-	k["color"] = in.Color
-	seriesOverrides := make([]interface{}, len(in.SeriesOverrides))
-	for i, v := range in.SeriesOverrides {
-		m := make(map[string]interface{})
-
-		m["color"] = v.Color
-		m["series_name"] = v.SeriesName
-
-		seriesOverrides[i] = m
-	}
-	k["series_overrides"] = seriesOverrides
-	out[0] = k
-	return out
-}
-
-func flattenDashboardWidgetUnits(in *dashboards.DashboardWidgetUnits) interface{} {
-	out := make([]interface{}, 1)
-	k := make(map[string]interface{})
-	k["unit"] = in.Unit
-	seriesOverrides := make([]interface{}, len(in.SeriesOverrides))
-	for i, v := range in.SeriesOverrides {
-		m := make(map[string]interface{})
-
-		m["unit"] = v.Unit
-		m["series_name"] = v.SeriesName
-
-		seriesOverrides[i] = m
-	}
-	k["series_overrides"] = seriesOverrides
-	out[0] = k
-	return out
-}
diff --git b/newrelic/structures_newrelic_service_level.go a/newrelic/structures_newrelic_service_level.go
index 76e80729..e1c2cb4c 100644
--- b/newrelic/structures_newrelic_service_level.go
+++ a/newrelic/structures_newrelic_service_level.go
@@ -63,7 +63,6 @@ func flattenServiceLevelEventsQuerySelect(selectValue servicelevel.ServiceLevelE
 
 	selectQueryMap["attribute"] = selectValue.Attribute
 	selectQueryMap["function"] = selectValue.Function
-	selectQueryMap["threshold"] = selectValue.Threshold
 
 	selectOutput[0] = selectQueryMap
 	return selectOutput
@@ -176,10 +175,6 @@ func expandServiceLevelEventsQuerySelectCreateInput(cfg map[string]interface{})
 
 	selectValue.Function = servicelevel.ServiceLevelEventsQuerySelectFunction(cfg["function"].(string))
 
-	if threshold, ok := cfg["threshold"]; ok {
-		selectValue.Threshold = threshold.(float64)
-	}
-
 	return &selectValue
 }
 
@@ -301,10 +296,6 @@ func expandServiceLevelEventsQuerySelectUpdateInput(cfg map[string]interface{})
 
 	selectValue.Function = servicelevel.ServiceLevelEventsQuerySelectFunction(cfg["function"].(string))
 
-	if threshold, ok := cfg["threshold"]; ok {
-		selectValue.Threshold = threshold.(float64)
-	}
-
 	return &selectValue
 }
 
diff --git b/newrelic/structures_newrelic_synthetics_multilocation_alert_condition.go a/newrelic/structures_newrelic_synthetics_multilocation_alert_condition.go
index c6fd82d7..cebedd1a 100644
--- b/newrelic/structures_newrelic_synthetics_multilocation_alert_condition.go
+++ a/newrelic/structures_newrelic_synthetics_multilocation_alert_condition.go
@@ -85,14 +85,13 @@ func expandMultiLocationSyntheticsConditionTerm(term map[string]interface{}, pri
 	}, nil
 }
 
-func flattenMultiLocationSyntheticsCondition(condition *alerts.MultiLocationSyntheticsCondition, accountID int, d *schema.ResourceData) error {
+func flattenMultiLocationSyntheticsCondition(condition *alerts.MultiLocationSyntheticsCondition, d *schema.ResourceData) error {
 	ids, err := parseIDs(d.Id(), 2)
 	if err != nil {
 		return err
 	}
 
 	policyID := ids[0]
-	entityGUID := getConditionEntityGUID(condition.ID, accountID)
 
 	_ = d.Set("policy_id", policyID)
 	_ = d.Set("name", condition.Name)
@@ -100,7 +99,6 @@ func flattenMultiLocationSyntheticsCondition(condition *alerts.MultiLocationSynt
 	_ = d.Set("enabled", condition.Enabled)
 	_ = d.Set("violation_time_limit_seconds", condition.ViolationTimeLimitSeconds)
 	_ = d.Set("policy_id", policyID)
-	_ = d.Set("entity_guid", entityGUID)
 
 	for _, term := range condition.Terms {
 		switch term.Priority {
diff --git b/newrelic/structures_newrelic_synthetics_multilocation_alert_condition_test.go a/newrelic/structures_newrelic_synthetics_multilocation_alert_condition_test.go
index d2dcbaa8..57115a45 100644
--- b/newrelic/structures_newrelic_synthetics_multilocation_alert_condition_test.go
+++ a/newrelic/structures_newrelic_synthetics_multilocation_alert_condition_test.go
@@ -197,10 +197,7 @@ func TestFlattenMultiLocationSyntheticsCondition(t *testing.T) {
 			id := fmt.Sprintf("%d:%d", tc.Data["policy_id"], tc.Flattened.ID)
 			d.SetId(id)
 
-			accountID := 1
-
-
-			err := flattenMultiLocationSyntheticsCondition(tc.Flattened, accountID, d)
+			err := flattenMultiLocationSyntheticsCondition(tc.Flattened, d)
 			assert.NoError(t, err)
 
 			for k, v := range tc.Data {
diff --git b/tools/go.mod a/tools/go.mod
index bd130d80..57a1ef87 100644
--- b/tools/go.mod
+++ a/tools/go.mod
@@ -1,31 +1,30 @@
 module github.com/newrelic/terraform-provider-newrelic/v2/tools
 
-go 1.19
+go 1.18
 
 require (
 	github.com/bflad/tfproviderlint v0.28.1
 	github.com/client9/misspell v0.3.4
-	github.com/git-chglog/git-chglog v0.15.4
-	github.com/golangci/golangci-lint v1.51.2
+	github.com/git-chglog/git-chglog v0.15.1
+	github.com/golangci/golangci-lint v1.50.1
 	github.com/goreleaser/goreleaser v1.7.0
 	github.com/llorllale/go-gitlint v0.0.0-20210608233938-d6303cc52cc5
-	github.com/psampaz/go-mod-outdated v0.9.0
-	github.com/stretchr/testify v1.8.2
-	golang.org/x/tools v0.7.0
+	github.com/psampaz/go-mod-outdated v0.8.0
+	github.com/stretchr/testify v1.8.1
+	golang.org/x/tools v0.5.0
 	gotest.tools/gotestsum v1.9.0
 )
 
 require (
-	4d63.com/gocheckcompilerdirectives v1.2.1 // indirect
-	4d63.com/gochecknoglobals v0.2.1 // indirect
+	4d63.com/gochecknoglobals v0.1.0 // indirect
 	cloud.google.com/go v0.103.0 // indirect
 	cloud.google.com/go/compute v1.7.0 // indirect
 	cloud.google.com/go/iam v0.3.0 // indirect
 	cloud.google.com/go/kms v1.1.0 // indirect
 	cloud.google.com/go/storage v1.24.0 // indirect
 	code.gitea.io/sdk/gitea v0.15.1 // indirect
-	github.com/Abirdcfly/dupword v0.0.9 // indirect
-	github.com/AlecAivazis/survey/v2 v2.3.6 // indirect
+	github.com/Abirdcfly/dupword v0.0.7 // indirect
+	github.com/AlecAivazis/survey/v2 v2.3.2 // indirect
 	github.com/AlekSi/pointer v1.2.0 // indirect
 	github.com/Antonboom/errname v0.1.7 // indirect
 	github.com/Antonboom/nilnil v0.1.1 // indirect
@@ -50,9 +49,9 @@ require (
 	github.com/GaijinEntertainment/go-exhaustruct/v2 v2.3.0 // indirect
 	github.com/Masterminds/goutils v1.1.1 // indirect
 	github.com/Masterminds/semver v1.5.0 // indirect
-	github.com/Masterminds/semver/v3 v3.2.0 // indirect
+	github.com/Masterminds/semver/v3 v3.1.1 // indirect
 	github.com/Masterminds/sprig v2.22.0+incompatible // indirect
-	github.com/Masterminds/sprig/v3 v3.2.3 // indirect
+	github.com/Masterminds/sprig/v3 v3.2.2 // indirect
 	github.com/Microsoft/go-winio v0.5.1 // indirect
 	github.com/OpenPeeDeeP/depguard v1.1.1 // indirect
 	github.com/ProtonMail/go-crypto v0.0.0-20210512092938-c05353c2d58c // indirect
@@ -62,9 +61,9 @@ require (
 	github.com/alecthomas/units v0.0.0-20190924025748-f65c72e2690d // indirect
 	github.com/alexkohler/prealloc v1.0.0 // indirect
 	github.com/alingse/asasalint v0.0.11 // indirect
-	github.com/andygrunwald/go-jira v1.16.0 // indirect
+	github.com/andygrunwald/go-jira v1.14.0 // indirect
 	github.com/apex/log v1.9.0 // indirect
-	github.com/ashanbrown/forbidigo v1.4.0 // indirect
+	github.com/ashanbrown/forbidigo v1.3.0 // indirect
 	github.com/ashanbrown/makezero v1.1.1 // indirect
 	github.com/atc0005/go-teams-notify/v2 v2.6.1 // indirect
 	github.com/aws/aws-sdk-go v1.42.24 // indirect
@@ -85,7 +84,7 @@ require (
 	github.com/bkielbasa/cyclop v1.2.0 // indirect
 	github.com/blakesmith/ar v0.0.0-20190502131153-809d4375e1fb // indirect
 	github.com/blizzy78/varnamelen v0.8.0 // indirect
-	github.com/bombsimon/wsl/v3 v3.4.0 // indirect
+	github.com/bombsimon/wsl/v3 v3.3.0 // indirect
 	github.com/breml/bidichk v0.2.3 // indirect
 	github.com/breml/errchkjson v0.3.0 // indirect
 	github.com/butuzov/ireturn v0.1.1 // indirect
@@ -97,11 +96,11 @@ require (
 	github.com/cenkalti/backoff/v4 v4.1.2 // indirect
 	github.com/cespare/xxhash/v2 v2.1.2 // indirect
 	github.com/charithe/durationcheck v0.0.9 // indirect
-	github.com/chavacava/garif v0.0.0-20221024190013-b3ef35877348 // indirect
-	github.com/coreos/go-semver v0.3.1 // indirect
+	github.com/chavacava/garif v0.0.0-20220630083739-93517212f375 // indirect
+	github.com/coreos/go-semver v0.3.0 // indirect
 	github.com/cpuguy83/go-md2man/v2 v2.0.2 // indirect
 	github.com/curioswitch/go-reassign v0.2.0 // indirect
-	github.com/daixiang0/gci v0.9.1 // indirect
+	github.com/daixiang0/gci v0.8.1 // indirect
 	github.com/davecgh/go-spew v1.1.1 // indirect
 	github.com/denis-tingaikin/go-header v0.4.3 // indirect
 	github.com/dghubble/go-twitter v0.0.0-20211115160449-93a8679adecb // indirect
@@ -112,28 +111,29 @@ require (
 	github.com/emirpasic/gods v1.12.0 // indirect
 	github.com/esimonov/ifshort v1.0.4 // indirect
 	github.com/ettle/strcase v0.1.1 // indirect
-	github.com/fatih/color v1.14.1 // indirect
+	github.com/fatih/color v1.13.0 // indirect
 	github.com/fatih/structs v1.1.0 // indirect
 	github.com/fatih/structtag v1.2.0 // indirect
 	github.com/firefart/nonamedreturns v1.0.4 // indirect
 	github.com/fsnotify/fsnotify v1.5.4 // indirect
 	github.com/fzipp/gocyclo v0.6.0 // indirect
-	github.com/go-critic/go-critic v0.6.7 // indirect
+	github.com/go-critic/go-critic v0.6.5 // indirect
 	github.com/go-git/gcfg v1.5.0 // indirect
 	github.com/go-git/go-billy/v5 v5.3.1 // indirect
 	github.com/go-git/go-git/v5 v5.4.2 // indirect
 	github.com/go-telegram-bot-api/telegram-bot-api v4.6.4+incompatible // indirect
-	github.com/go-toolsmith/astcast v1.1.0 // indirect
-	github.com/go-toolsmith/astcopy v1.0.3 // indirect
-	github.com/go-toolsmith/astequal v1.1.0 // indirect
-	github.com/go-toolsmith/astfmt v1.1.0 // indirect
-	github.com/go-toolsmith/astp v1.1.0 // indirect
-	github.com/go-toolsmith/strparse v1.1.0 // indirect
-	github.com/go-toolsmith/typep v1.1.0 // indirect
-	github.com/go-xmlfmt/xmlfmt v1.1.2 // indirect
+	github.com/go-toolsmith/astcast v1.0.0 // indirect
+	github.com/go-toolsmith/astcopy v1.0.2 // indirect
+	github.com/go-toolsmith/astequal v1.0.3 // indirect
+	github.com/go-toolsmith/astfmt v1.0.0 // indirect
+	github.com/go-toolsmith/astp v1.0.0 // indirect
+	github.com/go-toolsmith/strparse v1.0.0 // indirect
+	github.com/go-toolsmith/typep v1.0.2 // indirect
+	github.com/go-xmlfmt/xmlfmt v0.0.0-20191208150333-d5b6f63a941b // indirect
 	github.com/gobwas/glob v0.2.3 // indirect
 	github.com/gofrs/flock v0.8.1 // indirect
-	github.com/golang-jwt/jwt/v4 v4.4.2 // indirect
+	github.com/golang-jwt/jwt v3.2.1+incompatible // indirect
+	github.com/golang-jwt/jwt/v4 v4.2.0 // indirect
 	github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect
 	github.com/golang/protobuf v1.5.2 // indirect
 	github.com/golangci/check v0.0.0-20180506172741-cfe4005ccda2 // indirect
@@ -142,7 +142,7 @@ require (
 	github.com/golangci/gofmt v0.0.0-20220901101216-f2edd75033f2 // indirect
 	github.com/golangci/lint-1 v0.0.0-20191013205115-297bf364a8e0 // indirect
 	github.com/golangci/maligned v0.0.0-20180506175553-b1d89398deca // indirect
-	github.com/golangci/misspell v0.4.0 // indirect
+	github.com/golangci/misspell v0.3.5 // indirect
 	github.com/golangci/revgrep v0.0.0-20220804021717-745bb2f7c2e6 // indirect
 	github.com/golangci/unconvert v0.0.0-20180507085042-28b1c447d1f4 // indirect
 	github.com/google/go-cmp v0.5.9 // indirect
@@ -154,7 +154,7 @@ require (
 	github.com/google/wire v0.5.0 // indirect
 	github.com/googleapis/enterprise-certificate-proxy v0.1.0 // indirect
 	github.com/googleapis/gax-go/v2 v2.5.1 // indirect
-	github.com/gordonklaus/ineffassign v0.0.0-20230107090616-13ace0543b28 // indirect
+	github.com/gordonklaus/ineffassign v0.0.0-20210914165742-4cc7213b9bc8 // indirect
 	github.com/goreleaser/chglog v0.1.2 // indirect
 	github.com/goreleaser/fileglob v1.3.0 // indirect
 	github.com/goreleaser/nfpm/v2 v2.15.0 // indirect
@@ -170,9 +170,9 @@ require (
 	github.com/hashicorp/go-version v1.6.0 // indirect
 	github.com/hashicorp/hcl v1.0.0 // indirect
 	github.com/hexops/gotextdiff v1.0.3 // indirect
-	github.com/huandu/xstrings v1.3.3 // indirect
+	github.com/huandu/xstrings v1.3.2 // indirect
 	github.com/iancoleman/orderedmap v0.2.0 // indirect
-	github.com/imdario/mergo v0.3.13 // indirect
+	github.com/imdario/mergo v0.3.12 // indirect
 	github.com/inconshreveable/mousetrap v1.0.1 // indirect
 	github.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 // indirect
 	github.com/jgautheron/goconst v1.5.1 // indirect
@@ -180,21 +180,20 @@ require (
 	github.com/jirfag/go-printf-func-name v0.0.0-20200119135958-7558a9eaa5af // indirect
 	github.com/jmespath/go-jmespath v0.4.0 // indirect
 	github.com/julz/importas v0.1.0 // indirect
-	github.com/junk1tm/musttag v0.4.5 // indirect
 	github.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51 // indirect
 	github.com/kevinburke/ssh_config v1.1.0 // indirect
-	github.com/kisielk/errcheck v1.6.3 // indirect
+	github.com/kisielk/errcheck v1.6.2 // indirect
 	github.com/kisielk/gotool v1.0.0 // indirect
 	github.com/kkHAIKE/contextcheck v1.1.3 // indirect
 	github.com/klauspost/compress v1.13.6 // indirect
 	github.com/klauspost/pgzip v1.2.5 // indirect
 	github.com/kulti/thelper v0.6.3 // indirect
 	github.com/kunwardeep/paralleltest v1.0.6 // indirect
-	github.com/kyoh86/exportloopref v0.1.11 // indirect
-	github.com/kyokomi/emoji/v2 v2.2.11 // indirect
+	github.com/kyoh86/exportloopref v0.1.8 // indirect
+	github.com/kyokomi/emoji/v2 v2.2.8 // indirect
 	github.com/ldez/gomoddirectives v0.2.3 // indirect
-	github.com/ldez/tagliatelle v0.4.0 // indirect
-	github.com/leonklingele/grouper v1.1.1 // indirect
+	github.com/ldez/tagliatelle v0.3.1 // indirect
+	github.com/leonklingele/grouper v1.1.0 // indirect
 	github.com/lufeee/execinquery v1.2.1 // indirect
 	github.com/magiconair/properties v1.8.6 // indirect
 	github.com/maratori/testableexamples v1.0.0 // indirect
@@ -202,11 +201,11 @@ require (
 	github.com/matoous/godox v0.0.0-20210227103229-6504466cf951 // indirect
 	github.com/mattn/go-colorable v0.1.13 // indirect
 	github.com/mattn/go-ieproxy v0.0.1 // indirect
-	github.com/mattn/go-isatty v0.0.17 // indirect
-	github.com/mattn/go-runewidth v0.0.14 // indirect
+	github.com/mattn/go-isatty v0.0.16 // indirect
+	github.com/mattn/go-runewidth v0.0.10 // indirect
 	github.com/matttproud/golang_protobuf_extensions v1.0.1 // indirect
 	github.com/mbilski/exhaustivestruct v1.2.0 // indirect
-	github.com/mgechev/revive v1.2.5 // indirect
+	github.com/mgechev/revive v1.2.4 // indirect
 	github.com/mgutz/ansi v0.0.0-20170206155736-9520e82c474b // indirect
 	github.com/mitchellh/copystructure v1.2.0 // indirect
 	github.com/mitchellh/go-homedir v1.1.0 // indirect
@@ -220,44 +219,44 @@ require (
 	github.com/muesli/roff v0.1.0 // indirect
 	github.com/nakabonne/nestif v0.3.1 // indirect
 	github.com/nbutton23/zxcvbn-go v0.0.0-20210217022336-fa2cb2858354 // indirect
-	github.com/nishanths/exhaustive v0.9.5 // indirect
+	github.com/nishanths/exhaustive v0.8.3 // indirect
 	github.com/nishanths/predeclared v0.2.2 // indirect
-	github.com/nunnatsa/ginkgolinter v0.8.1 // indirect
 	github.com/olekukonko/tablewriter v0.0.5 // indirect
 	github.com/pelletier/go-toml v1.9.5 // indirect
 	github.com/pelletier/go-toml/v2 v2.0.5 // indirect
+	github.com/phayes/checkstyle v0.0.0-20170904204023-bfd46e6a821d // indirect
 	github.com/pkg/errors v0.9.1 // indirect
 	github.com/pmezard/go-difflib v1.0.0 // indirect
-	github.com/polyfloyd/go-errorlint v1.1.0 // indirect
+	github.com/polyfloyd/go-errorlint v1.0.5 // indirect
 	github.com/prometheus/client_golang v1.12.1 // indirect
 	github.com/prometheus/client_model v0.2.0 // indirect
 	github.com/prometheus/common v0.32.1 // indirect
 	github.com/prometheus/procfs v0.7.3 // indirect
-	github.com/quasilyte/go-ruleguard v0.3.19 // indirect
-	github.com/quasilyte/gogrep v0.5.0 // indirect
+	github.com/quasilyte/go-ruleguard v0.3.18 // indirect
+	github.com/quasilyte/gogrep v0.0.0-20220828223005-86e4605de09f // indirect
 	github.com/quasilyte/regex/syntax v0.0.0-20200407221936-30656e2c4a95 // indirect
 	github.com/quasilyte/stdinfo v0.0.0-20220114132959-f7386bf02567 // indirect
-	github.com/rivo/uniseg v0.4.3 // indirect
+	github.com/rivo/uniseg v0.2.0 // indirect
 	github.com/russross/blackfriday/v2 v2.1.0 // indirect
-	github.com/ryancurrah/gomodguard v1.3.0 // indirect
-	github.com/ryanrolds/sqlclosecheck v0.4.0 // indirect
-	github.com/sanposhiho/wastedassign/v2 v2.0.7 // indirect
+	github.com/ryancurrah/gomodguard v1.2.4 // indirect
+	github.com/ryanrolds/sqlclosecheck v0.3.0 // indirect
+	github.com/sanposhiho/wastedassign/v2 v2.0.6 // indirect
 	github.com/sashamelentyev/interfacebloat v1.1.0 // indirect
-	github.com/sashamelentyev/usestdlibvars v1.23.0 // indirect
-	github.com/securego/gosec/v2 v2.15.0 // indirect
+	github.com/sashamelentyev/usestdlibvars v1.20.0 // indirect
+	github.com/securego/gosec/v2 v2.13.1 // indirect
 	github.com/sergi/go-diff v1.2.0 // indirect
 	github.com/shazow/go-diff v0.0.0-20160112020656-b6b7b6733b8c // indirect
 	github.com/shopspring/decimal v1.2.0 // indirect
 	github.com/sirupsen/logrus v1.9.0 // indirect
 	github.com/sivchari/containedctx v1.0.2 // indirect
 	github.com/sivchari/nosnakecase v1.7.0 // indirect
-	github.com/sivchari/tenv v1.7.1 // indirect
+	github.com/sivchari/tenv v1.7.0 // indirect
 	github.com/slack-go/slack v0.10.2 // indirect
 	github.com/sonatard/noctx v0.0.1 // indirect
-	github.com/sourcegraph/go-diff v0.7.0 // indirect
+	github.com/sourcegraph/go-diff v0.6.1 // indirect
 	github.com/spf13/afero v1.8.2 // indirect
 	github.com/spf13/cast v1.5.0 // indirect
-	github.com/spf13/cobra v1.6.1 // indirect
+	github.com/spf13/cobra v1.6.0 // indirect
 	github.com/spf13/jwalterweatherman v1.1.0 // indirect
 	github.com/spf13/pflag v1.0.5 // indirect
 	github.com/spf13/viper v1.12.0 // indirect
@@ -266,24 +265,22 @@ require (
 	github.com/stbenjam/no-sprintf-host-port v0.1.1 // indirect
 	github.com/stretchr/objx v0.5.0 // indirect
 	github.com/subosito/gotenv v1.4.1 // indirect
-	github.com/t-yuki/gocover-cobertura v0.0.0-20180217150009-aaee18c8195c // indirect
 	github.com/tdakkota/asciicheck v0.1.1 // indirect
 	github.com/technoweenie/multipartstreamer v1.0.1 // indirect
 	github.com/tetafro/godot v1.4.11 // indirect
-	github.com/timakin/bodyclose v0.0.0-20221125081123-e39cf3fc478e // indirect
+	github.com/timakin/bodyclose v0.0.0-20210704033933-f49887972144 // indirect
 	github.com/timonwong/loggercheck v0.9.3 // indirect
-	github.com/tomarrell/wrapcheck/v2 v2.8.0 // indirect
+	github.com/tomarrell/wrapcheck/v2 v2.7.0 // indirect
 	github.com/tommy-muehle/go-mnd/v2 v2.5.1 // indirect
 	github.com/trivago/tgo v1.0.7 // indirect
 	github.com/tsuyoshiwada/go-gitcmd v0.0.0-20180205145712-5f1f5f9475df // indirect
 	github.com/ulikunitz/xz v0.5.10 // indirect
 	github.com/ultraware/funlen v0.0.3 // indirect
 	github.com/ultraware/whitespace v0.0.5 // indirect
-	github.com/urfave/cli/v2 v2.24.3 // indirect
+	github.com/urfave/cli/v2 v2.3.0 // indirect
 	github.com/uudashr/gocognit v1.0.6 // indirect
 	github.com/xanzy/go-gitlab v0.59.0 // indirect
 	github.com/xanzy/ssh-agent v0.3.1 // indirect
-	github.com/xrash/smetrics v0.0.0-20201216005158-039620a65673 // indirect
 	github.com/yagipy/maintidx v1.0.0 // indirect
 	github.com/yeya24/promlinter v0.2.0 // indirect
 	github.com/yuin/goldmark v1.4.13 // indirect
@@ -293,16 +290,16 @@ require (
 	go.uber.org/multierr v1.7.0 // indirect
 	go.uber.org/zap v1.19.0 // indirect
 	gocloud.dev v0.24.0 // indirect
-	golang.org/x/crypto v0.5.0 // indirect
+	golang.org/x/crypto v0.1.0 // indirect
 	golang.org/x/exp v0.0.0-20220722155223-a9213eeb770e // indirect
-	golang.org/x/exp/typeparams v0.0.0-20230203172020-98cc5a0785f9 // indirect
-	golang.org/x/mod v0.9.0 // indirect
-	golang.org/x/net v0.8.0 // indirect
+	golang.org/x/exp/typeparams v0.0.0-20220827204233-334a2380cb91 // indirect
+	golang.org/x/mod v0.7.0 // indirect
+	golang.org/x/net v0.5.0 // indirect
 	golang.org/x/oauth2 v0.0.0-20220722155238-128564f6959c // indirect
 	golang.org/x/sync v0.1.0 // indirect
-	golang.org/x/sys v0.6.0 // indirect
-	golang.org/x/term v0.6.0 // indirect
-	golang.org/x/text v0.8.0 // indirect
+	golang.org/x/sys v0.4.0 // indirect
+	golang.org/x/term v0.4.0 // indirect
+	golang.org/x/text v0.6.0 // indirect
 	golang.org/x/time v0.0.0-20211116232009-f0f3c7e86c11 // indirect
 	golang.org/x/xerrors v0.0.0-20220609144429-65e65417b02f // indirect
 	google.golang.org/api v0.91.0 // indirect
@@ -319,9 +316,9 @@ require (
 	gopkg.in/warnings.v0 v0.1.2 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
-	honnef.co/go/tools v0.4.2 // indirect
+	honnef.co/go/tools v0.3.3 // indirect
 	mvdan.cc/gofumpt v0.4.0 // indirect
 	mvdan.cc/interfacer v0.0.0-20180901003855-c20040233aed // indirect
 	mvdan.cc/lint v0.0.0-20170908181259-adc824a0674b // indirect
-	mvdan.cc/unparam v0.0.0-20221223090309-7455f1af531d // indirect
+	mvdan.cc/unparam v0.0.0-20220706161116-678bad134442 // indirect
 )
diff --git b/tools/go.sum a/tools/go.sum
index b097c529..3569cc30 100644
--- b/tools/go.sum
+++ a/tools/go.sum
@@ -1,7 +1,5 @@
-4d63.com/gocheckcompilerdirectives v1.2.1 h1:AHcMYuw56NPjq/2y615IGg2kYkBdTvOaojYCBcRE7MA=
-4d63.com/gocheckcompilerdirectives v1.2.1/go.mod h1:yjDJSxmDTtIHHCqX0ufRYZDL6vQtMG7tJdKVeWwsqvs=
-4d63.com/gochecknoglobals v0.2.1 h1:1eiorGsgHOFOuoOiJDy2psSrQbRdIHrlge0IJIkUgDc=
-4d63.com/gochecknoglobals v0.2.1/go.mod h1:KRE8wtJB3CXCsb1xy421JfTHIIbmT3U5ruxw2Qu8fSU=
+4d63.com/gochecknoglobals v0.1.0 h1:zeZSRqj5yCg28tCkIV/z/lWbwvNm5qnKVS15PI8nhD0=
+4d63.com/gochecknoglobals v0.1.0/go.mod h1:wfdC5ZjKSPr7CybKEcgJhUOgeAQW1+7WcyK8OvUilfo=
 bazil.org/fuse v0.0.0-20180421153158-65cc252bf669/go.mod h1:Xbm+BRKSBEpa4q4hTSxohYNQpsxXPbPry4JJWOB3LB8=
 cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
 cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
@@ -93,10 +91,10 @@ contrib.go.opencensus.io/exporter/aws v0.0.0-20200617204711-c478e41e60e9/go.mod
 contrib.go.opencensus.io/exporter/stackdriver v0.13.8/go.mod h1:huNtlWx75MwO7qMs0KrMxPZXzNNWebav1Sq/pm02JdQ=
 contrib.go.opencensus.io/integrations/ocsql v0.1.7/go.mod h1:8DsSdjz3F+APR+0z0WkU1aRorQCFfRxvqjUUPMbF3fE=
 dmitri.shuralyov.com/gpu/mtl v0.0.0-20190408044501-666a987793e9/go.mod h1:H6x//7gZCb22OMCxBHrMx7a5I7Hp++hsVxbQ4BYO7hU=
-github.com/Abirdcfly/dupword v0.0.9 h1:MxprGjKq3yDBICXDgEEsyGirIXfMYXkLNT/agPsE1tk=
-github.com/Abirdcfly/dupword v0.0.9/go.mod h1:PzmHVLLZ27MvHSzV7eFmMXSFArWXZPZmfuuziuUrf2g=
-github.com/AlecAivazis/survey/v2 v2.3.6 h1:NvTuVHISgTHEHeBFqt6BHOe4Ny/NwGZr7w+F8S9ziyw=
-github.com/AlecAivazis/survey/v2 v2.3.6/go.mod h1:4AuI9b7RjAR+G7v9+C4YSlX/YL3K3cWNXgWXOhllqvI=
+github.com/Abirdcfly/dupword v0.0.7 h1:z14n0yytA3wNO2gpCD/jVtp/acEXPGmYu0esewpBt6Q=
+github.com/Abirdcfly/dupword v0.0.7/go.mod h1:K/4M1kj+Zh39d2aotRwypvasonOyAMH1c/IZJzE0dmk=
+github.com/AlecAivazis/survey/v2 v2.3.2 h1:TqTB+aDDCLYhf9/bD2TwSO8u8jDSmMUd2SUVO4gCnU8=
+github.com/AlecAivazis/survey/v2 v2.3.2/go.mod h1:TH2kPCDU3Kqq7pLbnCWwZXDBjnhZtmsCle5EiYDJ2fg=
 github.com/AlekSi/pointer v1.2.0 h1:glcy/gc4h8HnG2Z3ZECSzZ1IX1x2JxRVuDzaJwQE0+w=
 github.com/AlekSi/pointer v1.2.0/go.mod h1:gZGfd3dpW4vEc/UlyfKKi1roIqcCgwOIvb0tSNSBle0=
 github.com/Antonboom/errname v0.1.7 h1:mBBDKvEYwPl4WFFNwec1CZO096G6vzK9vvDQzAwkako=
@@ -178,20 +176,20 @@ github.com/Masterminds/goutils v1.1.1/go.mod h1:8cTjp+g8YejhMuvIA5y2vz3BpJxksy86
 github.com/Masterminds/semver v1.5.0 h1:H65muMkzWKEuNDnfl9d70GUjFniHKHRbFPGBuZ3QEww=
 github.com/Masterminds/semver v1.5.0/go.mod h1:MB6lktGJrhw8PrUyiEoblNEGEQ+RzHPF078ddwwvV3Y=
 github.com/Masterminds/semver/v3 v3.1.0/go.mod h1:VPu/7SZ7ePZ3QOrcuXROw5FAcLl4a0cBrbBpGY/8hQs=
-github.com/Masterminds/semver/v3 v3.2.0 h1:3MEsd0SM6jqZojhjLWWeBY+Kcjy9i6MQAeY7YgDP83g=
-github.com/Masterminds/semver/v3 v3.2.0/go.mod h1:qvl/7zhW3nngYb5+80sSMF+FG2BjYrf8m9wsX0PNOMQ=
+github.com/Masterminds/semver/v3 v3.1.1 h1:hLg3sBzpNErnxhQtUy/mmLR2I9foDujNK030IGemrRc=
+github.com/Masterminds/semver/v3 v3.1.1/go.mod h1:VPu/7SZ7ePZ3QOrcuXROw5FAcLl4a0cBrbBpGY/8hQs=
 github.com/Masterminds/sprig v2.22.0+incompatible h1:z4yfnGrZ7netVz+0EDJ0Wi+5VZCSYp4Z0m2dk6cEM60=
 github.com/Masterminds/sprig v2.22.0+incompatible/go.mod h1:y6hNFY5UBTIWBxnzTeuNhlNS5hqE0NB0E6fgfo2Br3o=
-github.com/Masterminds/sprig/v3 v3.2.3 h1:eL2fZNezLomi0uOLqjQoN6BfsDD+fyLtgbJMAj9n6YA=
-github.com/Masterminds/sprig/v3 v3.2.3/go.mod h1:rXcFaZ2zZbLRJv/xSysmlgIM1u11eBaRMhvYXJNkGuM=
+github.com/Masterminds/sprig/v3 v3.2.2 h1:17jRggJu518dr3QaafizSXOjKYp94wKfABxUmyxvxX8=
+github.com/Masterminds/sprig/v3 v3.2.2/go.mod h1:UoaO7Yp8KlPnJIYWTFkMaqPUYKTfGFPhxNuwnnxkKlk=
 github.com/Microsoft/go-winio v0.4.14/go.mod h1:qXqCSQ3Xa7+6tgxaGTIe4Kpcdsi+P8jBhyzoq1bpyYA=
 github.com/Microsoft/go-winio v0.4.15/go.mod h1:tTuCMEN+UleMWgg9dVx4Hu52b1bJo+59jBh3ajtinzw=
 github.com/Microsoft/go-winio v0.4.16/go.mod h1:XB6nPKklQyQ7GC9LdcBEcBl8PF76WugXOPRXwdLnMv0=
 github.com/Microsoft/go-winio v0.5.0/go.mod h1:JPGBdM1cNvN/6ISo+n8V5iA4v8pBzdOpzfwIujj1a84=
 github.com/Microsoft/go-winio v0.5.1 h1:aPJp2QD7OOrhO5tQXqQoGSJc+DjDtWTGLOmNyAm6FgY=
 github.com/Microsoft/go-winio v0.5.1/go.mod h1:JPGBdM1cNvN/6ISo+n8V5iA4v8pBzdOpzfwIujj1a84=
-github.com/Netflix/go-expect v0.0.0-20220104043353-73e0943537d2 h1:+vx7roKuyA63nhn5WAunQHLTznkw5W8b1Xc0dNjp83s=
-github.com/Netflix/go-expect v0.0.0-20220104043353-73e0943537d2/go.mod h1:HBCaDeC1lPdgDeDbhX8XFpy1jqjK0IBG8W5K+xYqA0w=
+github.com/Netflix/go-expect v0.0.0-20180615182759-c93bf25de8e8 h1:xzYJEypr/85nBpB11F9br+3HUrpgb+fcm5iADzXXYEw=
+github.com/Netflix/go-expect v0.0.0-20180615182759-c93bf25de8e8/go.mod h1:oX5x61PbNXchhh0oikYAH+4Pcfw5LKv21+Jnpr6r6Pc=
 github.com/OneOfOne/xxhash v1.2.2/go.mod h1:HSdplMjZKSmBqAxg5vPj2TmRDmfkzw+cTzAElWljhcU=
 github.com/OpenPeeDeeP/depguard v1.1.1 h1:TSUznLjvp/4IUP+OQ0t/4jF4QUyxIcVX8YnghZdunyA=
 github.com/OpenPeeDeeP/depguard v1.1.1/go.mod h1:JtAMzWkmFEzDPyAd+W0NHl1lvpQKTvT9jnRVsohBKpc=
@@ -221,8 +219,8 @@ github.com/alexkohler/prealloc v1.0.0/go.mod h1:VetnK3dIgFBBKmg0YnD9F9x6Icjd+9cv
 github.com/alingse/asasalint v0.0.11 h1:SFwnQXJ49Kx/1GghOFz1XGqHYKp21Kq1nHad/0WQRnw=
 github.com/alingse/asasalint v0.0.11/go.mod h1:nCaoMhw7a9kSJObvQyVzNTPBDbNpdocqrSP7t/cW5+I=
 github.com/andybalholm/crlf v0.0.0-20171020200849-670099aa064f/go.mod h1:k8feO4+kXDxro6ErPXBRTJ/ro2mf0SsFG8s7doP9kJE=
-github.com/andygrunwald/go-jira v1.16.0 h1:PU7C7Fkk5L96JvPc6vDVIrd99vdPnYudHu4ju2c2ikQ=
-github.com/andygrunwald/go-jira v1.16.0/go.mod h1:UQH4IBVxIYWbgagc0LF/k9FRs9xjIiQ8hIcC6HfLwFU=
+github.com/andygrunwald/go-jira v1.14.0 h1:7GT/3qhar2dGJ0kq8w0d63liNyHOnxZsUZ9Pe4+AKBI=
+github.com/andygrunwald/go-jira v1.14.0/go.mod h1:KMo2f4DgMZA1C9FdImuLc04x4WQhn5derQpnsuBFgqE=
 github.com/anmitsu/go-shlex v0.0.0-20161002113705-648efa622239 h1:kFOfPq6dUM1hTo4JG6LR5AXSUEsOjtdm0kw0FtQtMJA=
 github.com/anmitsu/go-shlex v0.0.0-20161002113705-648efa622239/go.mod h1:2FmKhYUyUczH0OGQWaF5ceTx0UBShxjsH6f8oGKYe2c=
 github.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=
@@ -243,8 +241,8 @@ github.com/armon/go-radix v0.0.0-20180808171621-7fddfc383310/go.mod h1:ufUuZ+zHj
 github.com/armon/go-radix v1.0.0/go.mod h1:ufUuZ+zHj4x4TnLV4JWEpy2hxWSpsRywHrMgIH9cCH8=
 github.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5 h1:0CwZNZbxp69SHPdPJAN/hZIm0C4OItdklCFmMRWYpio=
 github.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5/go.mod h1:wHh0iHkYZB8zMSxRWpUBQtwG5a7fFgvEO+odwuTv2gs=
-github.com/ashanbrown/forbidigo v1.4.0 h1:spdPbupaSqtWORq1Q4eHBoPBmHtwVyLKwaedbSLc5Sw=
-github.com/ashanbrown/forbidigo v1.4.0/go.mod h1:IvgwB5Y4fzqSAj/WVXKWigoTkB0dzI2FBbpKWuh7ph8=
+github.com/ashanbrown/forbidigo v1.3.0 h1:VkYIwb/xxdireGAdJNZoo24O4lmnEWkactplBlWTShc=
+github.com/ashanbrown/forbidigo v1.3.0/go.mod h1:vVW7PEdqEFqapJe95xHkTfB1+XvZXBFg8t0sG2FIxmI=
 github.com/ashanbrown/makezero v1.1.1 h1:iCQ87C0V0vSyO+M9E/FZYbu65auqH0lnsOkf5FcB28s=
 github.com/ashanbrown/makezero v1.1.1/go.mod h1:i1bJLCRSCHOcOa9Y6MyF2FTfMZMFdHvxKHxgO5Z1axI=
 github.com/atc0005/go-teams-notify/v2 v2.6.1 h1:t22ybzQuaQs4UJe4ceF5VYGsPhs6ir3nZOId/FBy6Go=
@@ -313,8 +311,8 @@ github.com/blakesmith/ar v0.0.0-20190502131153-809d4375e1fb h1:m935MPodAbYS46DG4
 github.com/blakesmith/ar v0.0.0-20190502131153-809d4375e1fb/go.mod h1:PkYb9DJNAwrSvRx5DYA+gUcOIgTGVMNkfSCbZM8cWpI=
 github.com/blizzy78/varnamelen v0.8.0 h1:oqSblyuQvFsW1hbBHh1zfwrKe3kcSj0rnXkKzsQ089M=
 github.com/blizzy78/varnamelen v0.8.0/go.mod h1:V9TzQZ4fLJ1DSrjVDfl89H7aMnTvKkApdHeyESmyR7k=
-github.com/bombsimon/wsl/v3 v3.4.0 h1:RkSxjT3tmlptwfgEgTgU+KYKLI35p/tviNXNXiL2aNU=
-github.com/bombsimon/wsl/v3 v3.4.0/go.mod h1:KkIB+TXkqy6MvK9BDZVbZxKNYsE1/oLRJbIFtf14qqo=
+github.com/bombsimon/wsl/v3 v3.3.0 h1:Mka/+kRLoQJq7g2rggtgQsjuI/K5Efd87WX96EWFxjM=
+github.com/bombsimon/wsl/v3 v3.3.0/go.mod h1:st10JtZYLE4D5sC7b8xV4zTKZwAQjCH/Hy2Pm1FNZIc=
 github.com/breml/bidichk v0.2.3 h1:qe6ggxpTfA8E75hdjWPZ581sY3a2lnl0IRxLQFelECI=
 github.com/breml/bidichk v0.2.3/go.mod h1:8u2C6DnAy0g2cEq+k/A2+tr9O1s+vHGxWn0LTc70T2A=
 github.com/breml/errchkjson v0.3.0 h1:YdDqhfqMT+I1vIxPSas44P+9Z9HzJwCeAzjB8PxP1xw=
@@ -345,8 +343,8 @@ github.com/cespare/xxhash/v2 v2.1.2/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XL
 github.com/charithe/durationcheck v0.0.9 h1:mPP4ucLrf/rKZiIG/a9IPXHGlh8p4CzgpyTy6EEutYk=
 github.com/charithe/durationcheck v0.0.9/go.mod h1:SSbRIBVfMjCi/kEB6K65XEA83D6prSM8ap1UCpNKtgg=
 github.com/charmbracelet/keygen v0.2.1 h1:H1yYTVe6qIDz+UILYXo6q+qLQNkvyXXA5KEhzyuEfzg=
-github.com/chavacava/garif v0.0.0-20221024190013-b3ef35877348 h1:cy5GCEZLUCshCGCRRUjxHrDUqkB4l5cuUt3ShEckQEo=
-github.com/chavacava/garif v0.0.0-20221024190013-b3ef35877348/go.mod h1:f/miWtG3SSuTxKsNK3o58H1xl+XV6ZIfbC6p7lPPB8U=
+github.com/chavacava/garif v0.0.0-20220630083739-93517212f375 h1:E7LT642ysztPWE0dfz43cWOvMiF42DyTRC+eZIaO4yI=
+github.com/chavacava/garif v0.0.0-20220630083739-93517212f375/go.mod h1:4m1Rv7xfuwWPNKXlThldNuJvutYM6J95wNuuVmn55To=
 github.com/cheggaaa/pb v1.0.27/go.mod h1:pQciLPpbU0oxA0h+VJYYLxO+XeDQb5pZijXscXHm81s=
 github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=
 github.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=
@@ -364,23 +362,22 @@ github.com/cncf/xds/go v0.0.0-20211001041855-01bcc9b48dfe/go.mod h1:eXthEFrGJvWH
 github.com/cncf/xds/go v0.0.0-20211011173535-cb28da3451f1/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=
 github.com/coreos/bbolt v1.3.2/go.mod h1:iRUV2dpdMOn7Bo10OQBFzIJO9kkE559Wcmn+qkEiiKk=
 github.com/coreos/etcd v3.3.13+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=
+github.com/coreos/go-semver v0.3.0 h1:wkHLiw0WNATZnSG7epLsujiMCgPAc9xhjJ4tgnAxmfM=
 github.com/coreos/go-semver v0.3.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=
-github.com/coreos/go-semver v0.3.1 h1:yi21YpKnrx1gt5R+la8n5WgS0kCrsPp33dmEyHReZr4=
-github.com/coreos/go-semver v0.3.1/go.mod h1:irMmmIw/7yzSRPWryHsK7EYSg09caPQL03VsM8rvUec=
 github.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=
 github.com/coreos/go-systemd/v22 v22.3.2/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=
 github.com/coreos/pkg v0.0.0-20180928190104-399ea9e2e55f/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=
+github.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=
 github.com/cpuguy83/go-md2man/v2 v2.0.0/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=
 github.com/cpuguy83/go-md2man/v2 v2.0.1/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=
 github.com/cpuguy83/go-md2man/v2 v2.0.2 h1:p1EgwI/C7NhT0JmVkwCD2ZBK8j4aeHQX2pMHHBfMQ6w=
 github.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=
 github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=
-github.com/creack/pty v1.1.17 h1:QeVUsEDNrLBW4tMgZHvxy18sKtr6VI492kBhUfhDJNI=
-github.com/creack/pty v1.1.17/go.mod h1:MOBLtS5ELjhRRrroQr9kyvTxUAFNvYEK993ew/Vr4O4=
+github.com/cristalhq/acmd v0.8.1/go.mod h1:LG5oa43pE/BbxtfMoImHCQN++0Su7dzipdgBjMCBVDQ=
 github.com/curioswitch/go-reassign v0.2.0 h1:G9UZyOcpk/d7Gd6mqYgd8XYWFMw/znxwGDUstnC9DIo=
 github.com/curioswitch/go-reassign v0.2.0/go.mod h1:x6OpXuWvgfQaMGks2BZybTngWjT84hqJfKoO8Tt/Roc=
-github.com/daixiang0/gci v0.9.1 h1:jBrwBmBZTDsGsXiaCTLIe9diotp1X4X64zodFrh7l+c=
-github.com/daixiang0/gci v0.9.1/go.mod h1:EpVfrztufwVgQRXjnX4zuNinEpLj5OmMjtu/+MB0V0c=
+github.com/daixiang0/gci v0.8.1 h1:T4xpSC+hmsi4CSyuYfIJdMZAr9o7xZmHpQVygMghGZ4=
+github.com/daixiang0/gci v0.8.1/go.mod h1:EpVfrztufwVgQRXjnX4zuNinEpLj5OmMjtu/+MB0V0c=
 github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
 github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
@@ -419,9 +416,8 @@ github.com/esimonov/ifshort v1.0.4/go.mod h1:Pe8zjlRrJ80+q2CxHLfEOfTwxCZ4O+MuhcH
 github.com/ettle/strcase v0.1.1 h1:htFueZyVeE1XNnMEfbqp5r67qAN/4r6ya1ysq8Q+Zcw=
 github.com/ettle/strcase v0.1.1/go.mod h1:hzDLsPC7/lwKyBOywSHEP89nt2pDgdy+No1NBA9o9VY=
 github.com/fatih/color v1.7.0/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=
+github.com/fatih/color v1.13.0 h1:8LOYc1KYPPmyKMuN8QV2DNRWNbLo6LZ0iLs8+mlH53w=
 github.com/fatih/color v1.13.0/go.mod h1:kLAiJbzzSOZDVNGyDpeOxJ47H46qBXwg5ILebYFFOfk=
-github.com/fatih/color v1.14.1 h1:qfhVLaG5s+nCROl1zJsZRxFeYrHLqWroPOQ8BWiNb4w=
-github.com/fatih/color v1.14.1/go.mod h1:2oHN61fhTpgcxD3TSWCgKDiH1+x4OiDVVGH8WlgGZGg=
 github.com/fatih/structs v1.1.0 h1:Q7juDM0QtcnhCpeyLGQKyg4TOIghuNXrkL32pHAUMxo=
 github.com/fatih/structs v1.1.0/go.mod h1:9NiDSp5zOcgEDl+j00MP/WkGVPOlPRLejGD8Ga6PJ7M=
 github.com/fatih/structtag v1.2.0 h1:/OdNE99OxoI/PqaW/SuSK9uxxT3f/tcSZgon/ssNSx4=
@@ -442,13 +438,13 @@ github.com/fzipp/gocyclo v0.6.0/go.mod h1:rXPyn8fnlpa0R2csP/31uerbiVBugk5whMdlya
 github.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=
 github.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=
 github.com/gin-gonic/gin v1.6.3/go.mod h1:75u5sXoLsGZoRN5Sgbi1eraJ4GU3++wFwWzhwvtwp4M=
-github.com/git-chglog/git-chglog v0.15.4 h1:BwPDj7AghQTfpXO+UxG4mZM5MUTe9wfDuenF3jpyNf0=
-github.com/git-chglog/git-chglog v0.15.4/go.mod h1:BmWdTpqBVzPjKNrBTZGcQCrQV9zq6gFKurhWNnJbYDA=
+github.com/git-chglog/git-chglog v0.15.1 h1:s4FqW1jQ8ZVb3M6p9uMZDvspm4zkatVJcyG0p/Q4h7U=
+github.com/git-chglog/git-chglog v0.15.1/go.mod h1:ODSB06FDj/KND1ul+aBOqETRy5tvs+Kk4YdDmD7soeU=
 github.com/gliderlabs/ssh v0.1.1/go.mod h1:U7qILu1NlMHj9FlMhZLlkCdDnU1DBEAqr0aevW3Awn0=
 github.com/gliderlabs/ssh v0.2.2 h1:6zsha5zo/TWhRhwqCD3+EarCAgZ2yN28ipRnGPnwkI0=
 github.com/gliderlabs/ssh v0.2.2/go.mod h1:U7qILu1NlMHj9FlMhZLlkCdDnU1DBEAqr0aevW3Awn0=
-github.com/go-critic/go-critic v0.6.7 h1:1evPrElnLQ2LZtJfmNDzlieDhjnq36SLgNzisx06oPM=
-github.com/go-critic/go-critic v0.6.7/go.mod h1:fYZUijFdcnxgx6wPjQA2QEjIRaNCT0gO8bhexy6/QmE=
+github.com/go-critic/go-critic v0.6.5 h1:fDaR/5GWURljXwF8Eh31T2GZNz9X4jeboS912mWF8Uo=
+github.com/go-critic/go-critic v0.6.5/go.mod h1:ezfP/Lh7MA6dBNn4c6ab5ALv3sKnZVLx37tr00uuaOY=
 github.com/go-git/gcfg v1.5.0 h1:Q5ViNfGF8zFgyJWPqYwA7qGFoMTEiBmdlkcfRmpIMa4=
 github.com/go-git/gcfg v1.5.0/go.mod h1:5m20vg6GwYabIxaOonVkTdrILxQMpEShl1xiMF4ua+E=
 github.com/go-git/go-billy/v5 v5.0.0/go.mod h1:pmpqyWchKfYfrkb/UVH4otLvyi/5gJlGI4Hb3ZqZ3W0=
@@ -473,11 +469,11 @@ github.com/go-kit/log v0.1.0/go.mod h1:zbhenjAZHb184qTLMA9ZjW7ThYL0H2mk7Q6pNt4vb
 github.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=
 github.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=
 github.com/go-logfmt/logfmt v0.5.0/go.mod h1:wCYkCAKZfumFQihp8CzCvQ3paCTfi41vtzG1KdI/P7A=
-github.com/go-logr/logr v1.2.3 h1:2DntVwHkVopvECVRSlL5PSo9eG+cAkDCuckLubN+rq0=
 github.com/go-playground/assert/v2 v2.0.1/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=
 github.com/go-playground/locales v0.13.0/go.mod h1:taPMhCMXrRLJO55olJkUXHZBHCxTMfnGwq/HNwmWNS8=
 github.com/go-playground/universal-translator v0.17.0/go.mod h1:UkSxE5sNxxRwHyU+Scu5vgOQjsIJAF8j9muTVoKLVtA=
 github.com/go-playground/validator/v10 v10.2.0/go.mod h1:uOYAAleCW8F/7oMFd6aG0GOhaH6EGOAJShg8Id5JGkI=
+github.com/go-sql-driver/mysql v1.4.0/go.mod h1:zAC/RDZ24gD3HViQzih4MyKcchzm+sOG5ZlKdlhCg5w=
 github.com/go-sql-driver/mysql v1.6.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=
 github.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=
 github.com/go-telegram-bot-api/telegram-bot-api v4.6.4+incompatible h1:2cauKuaELYAEARXRkq2LrJ0yDDv1rW7+wrTEdVL3uaU=
@@ -485,26 +481,26 @@ github.com/go-telegram-bot-api/telegram-bot-api v4.6.4+incompatible/go.mod h1:qf
 github.com/go-test/deep v1.0.3/go.mod h1:wGDj63lr65AM2AQyKZd/NYHGb0R+1RLqB8NKt3aSFNA=
 github.com/go-test/deep v1.0.4 h1:u2CU3YKy9I2pmu9pX0eq50wCgjfGIt539SqR7FbHiho=
 github.com/go-test/deep v1.0.4/go.mod h1:wGDj63lr65AM2AQyKZd/NYHGb0R+1RLqB8NKt3aSFNA=
-github.com/go-toolsmith/astcast v1.1.0 h1:+JN9xZV1A+Re+95pgnMgDboWNVnIMMQXwfBwLRPgSC8=
-github.com/go-toolsmith/astcast v1.1.0/go.mod h1:qdcuFWeGGS2xX5bLM/c3U9lewg7+Zu4mr+xPwZIB4ZU=
-github.com/go-toolsmith/astcopy v1.0.3 h1:r0bgSRlMOAgO+BdQnVAcpMSMkrQCnV6ZJmIkrJgcJj0=
-github.com/go-toolsmith/astcopy v1.0.3/go.mod h1:4TcEdbElGc9twQEYpVo/aieIXfHhiuLh4aLAck6dO7Y=
+github.com/go-toolsmith/astcast v1.0.0 h1:JojxlmI6STnFVG9yOImLeGREv8W2ocNUM+iOhR6jE7g=
+github.com/go-toolsmith/astcast v1.0.0/go.mod h1:mt2OdQTeAQcY4DQgPSArJjHCcOwlX+Wl/kwN+LbLGQ4=
+github.com/go-toolsmith/astcopy v1.0.2 h1:YnWf5Rnh1hUudj11kei53kI57quN/VH6Hp1n+erozn0=
+github.com/go-toolsmith/astcopy v1.0.2/go.mod h1:4TcEdbElGc9twQEYpVo/aieIXfHhiuLh4aLAck6dO7Y=
+github.com/go-toolsmith/astequal v1.0.0/go.mod h1:H+xSiq0+LtiDC11+h1G32h7Of5O3CYFJ99GVbS5lDKY=
 github.com/go-toolsmith/astequal v1.0.2/go.mod h1:9Ai4UglvtR+4up+bAD4+hCj7iTo4m/OXVTSLnCyTAx4=
+github.com/go-toolsmith/astequal v1.0.3 h1:+LVdyRatFS+XO78SGV4I3TCEA0AC7fKEGma+fH+674o=
 github.com/go-toolsmith/astequal v1.0.3/go.mod h1:9Ai4UglvtR+4up+bAD4+hCj7iTo4m/OXVTSLnCyTAx4=
-github.com/go-toolsmith/astequal v1.1.0 h1:kHKm1AWqClYn15R0K1KKE4RG614D46n+nqUQ06E1dTw=
-github.com/go-toolsmith/astequal v1.1.0/go.mod h1:sedf7VIdCL22LD8qIvv7Nn9MuWJruQA/ysswh64lffQ=
-github.com/go-toolsmith/astfmt v1.1.0 h1:iJVPDPp6/7AaeLJEruMsBUlOYCmvg0MoCfJprsOmcco=
-github.com/go-toolsmith/astfmt v1.1.0/go.mod h1:OrcLlRwu0CuiIBp/8b5PYF9ktGVZUjlNMV634mhwuQ4=
-github.com/go-toolsmith/astp v1.1.0 h1:dXPuCl6u2llURjdPLLDxJeZInAeZ0/eZwFJmqZMnpQA=
-github.com/go-toolsmith/astp v1.1.0/go.mod h1:0T1xFGz9hicKs8Z5MfAqSUitoUYS30pDMsRVIDHs8CA=
+github.com/go-toolsmith/astfmt v1.0.0 h1:A0vDDXt+vsvLEdbMFJAUBI/uTbRw1ffOPnxsILnFL6k=
+github.com/go-toolsmith/astfmt v1.0.0/go.mod h1:cnWmsOAuq4jJY6Ct5YWlVLmcmLMn1JUPuQIHCY7CJDw=
+github.com/go-toolsmith/astp v1.0.0 h1:alXE75TXgcmupDsMK1fRAy0YUzLzqPVvBKoyWV+KPXg=
+github.com/go-toolsmith/astp v1.0.0/go.mod h1:RSyrtpVlfTFGDYRbrjyWP1pYu//tSFcvdYrA8meBmLI=
 github.com/go-toolsmith/pkgload v1.0.2-0.20220101231613-e814995d17c5 h1:eD9POs68PHkwrx7hAB78z1cb6PfGq/jyWn3wJywsH1o=
+github.com/go-toolsmith/pkgload v1.0.2-0.20220101231613-e814995d17c5/go.mod h1:3NAwwmD4uY/yggRxoEjk/S00MIV3A+H7rrE3i87eYxM=
+github.com/go-toolsmith/strparse v1.0.0 h1:Vcw78DnpCAKlM20kSbAyO4mPfJn/lyYA4BJUDxe2Jb4=
 github.com/go-toolsmith/strparse v1.0.0/go.mod h1:YI2nUKP9YGZnL/L1/DLFBfixrcjslWct4wyljWhSRy8=
-github.com/go-toolsmith/strparse v1.1.0 h1:GAioeZUK9TGxnLS+qfdqNbA4z0SSm5zVNtCQiyP2Bvw=
-github.com/go-toolsmith/strparse v1.1.0/go.mod h1:7ksGy58fsaQkGQlY8WVoBFNyEPMGuJin1rfoPS4lBSQ=
-github.com/go-toolsmith/typep v1.1.0 h1:fIRYDyF+JywLfqzyhdiHzRop/GQDxxNhLGQ6gFUNHus=
-github.com/go-toolsmith/typep v1.1.0/go.mod h1:fVIw+7zjdsMxDA3ITWnH1yOiw1rnTQKCsF/sk2H/qig=
-github.com/go-xmlfmt/xmlfmt v1.1.2 h1:Nea7b4icn8s57fTx1M5AI4qQT5HEM3rVUO8MuE6g80U=
-github.com/go-xmlfmt/xmlfmt v1.1.2/go.mod h1:aUCEOzzezBEjDBbFBoSiya/gduyIiWYRP6CnSFIV8AM=
+github.com/go-toolsmith/typep v1.0.2 h1:8xdsa1+FSIH/RhEkgnD1j2CJOy5mNllW1Q9tRiYwvlk=
+github.com/go-toolsmith/typep v1.0.2/go.mod h1:JSQCQMUPdRlMZFswiq3TGpNp1GMktqkR2Ns5AIQkATU=
+github.com/go-xmlfmt/xmlfmt v0.0.0-20191208150333-d5b6f63a941b h1:khEcpUM4yFcxg4/FHQWkvVRmgijNXRfzkIDHh23ggEo=
+github.com/go-xmlfmt/xmlfmt v0.0.0-20191208150333-d5b6f63a941b/go.mod h1:aUCEOzzezBEjDBbFBoSiya/gduyIiWYRP6CnSFIV8AM=
 github.com/gobwas/glob v0.2.3 h1:A4xDbljILXROh+kObIiy5kIaPYD8e96x1tgBhUI5J+Y=
 github.com/gobwas/glob v0.2.3/go.mod h1:d3Ez4x06l9bZtSvzIay5+Yzi0fmZzPgnTbPcKjJAkT8=
 github.com/gobwas/httphead v0.0.0-20180130184737-2c6c146eadee/go.mod h1:L0fX3K22YWvt/FAX9NnzrNzcI4wNYi9Yku4O0LKYflo=
@@ -515,9 +511,11 @@ github.com/gofrs/flock v0.8.1 h1:+gYjHKf32LDeiEEFhQaotPbLuUXjY5ZqxKgXy7n59aw=
 github.com/gofrs/flock v0.8.1/go.mod h1:F1TvTiK9OcQqauNUHlbJvyl9Qa1QvF/gOUDKA14jxHU=
 github.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=
 github.com/gogo/protobuf v1.2.1/go.mod h1:hp+jE20tsWTFYpLwKvXlhS1hjn+gTNwPg2I6zVXpSg4=
+github.com/golang-jwt/jwt v3.2.1+incompatible h1:73Z+4BJcrTC+KczS6WvTPvRGOp1WmfEP4Q1lOd9Z/+c=
+github.com/golang-jwt/jwt v3.2.1+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=
 github.com/golang-jwt/jwt/v4 v4.0.0/go.mod h1:/xlHOz8bRuivTWchD4jCa+NbatV+wEUSzwAxVc6locg=
-github.com/golang-jwt/jwt/v4 v4.4.2 h1:rcc4lwaZgFMCZ5jxF9ABolDcIHdBytAFgqFPbSJQAYs=
-github.com/golang-jwt/jwt/v4 v4.4.2/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
+github.com/golang-jwt/jwt/v4 v4.2.0 h1:besgBTC8w8HjP6NzQdxwKH9Z5oQMZ24ThTrHp3cZ8eU=
+github.com/golang-jwt/jwt/v4 v4.2.0/go.mod h1:/xlHOz8bRuivTWchD4jCa+NbatV+wEUSzwAxVc6locg=
 github.com/golang-sql/civil v0.0.0-20190719163853-cb61b32ac6fe/go.mod h1:8vg3r2VgvsThLBIFL93Qb5yWzgyZWhEmBwUJWevAkK0=
 github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
 github.com/golang/groupcache v0.0.0-20190129154638-5b532d6fd5ef/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
@@ -564,14 +562,14 @@ github.com/golangci/go-misc v0.0.0-20220329215616-d24fe342adfe h1:6RGUuS7EGotKx6
 github.com/golangci/go-misc v0.0.0-20220329215616-d24fe342adfe/go.mod h1:gjqyPShc/m8pEMpk0a3SeagVb0kaqvhscv+i9jI5ZhQ=
 github.com/golangci/gofmt v0.0.0-20220901101216-f2edd75033f2 h1:amWTbTGqOZ71ruzrdA+Nx5WA3tV1N0goTspwmKCQvBY=
 github.com/golangci/gofmt v0.0.0-20220901101216-f2edd75033f2/go.mod h1:9wOXstvyDRshQ9LggQuzBCGysxs3b6Uo/1MvYCR2NMs=
-github.com/golangci/golangci-lint v1.51.2 h1:yIcsT1X9ZYHdSpeWXRT1ORC/FPGSqDHbHsu9uk4FK7M=
-github.com/golangci/golangci-lint v1.51.2/go.mod h1:KH9Q7/3glwpYSknxUgUyLlAv46A8fsSKo1hH2wDvkr8=
+github.com/golangci/golangci-lint v1.50.1 h1:C829clMcZXEORakZlwpk7M4iDw2XiwxxKaG504SZ9zY=
+github.com/golangci/golangci-lint v1.50.1/go.mod h1:AQjHBopYS//oB8xs0y0M/dtxdKHkdhl0RvmjUct0/4w=
 github.com/golangci/lint-1 v0.0.0-20191013205115-297bf364a8e0 h1:MfyDlzVjl1hoaPzPD4Gpb/QgoRfSBR0jdhwGyAWwMSA=
 github.com/golangci/lint-1 v0.0.0-20191013205115-297bf364a8e0/go.mod h1:66R6K6P6VWk9I95jvqGxkqJxVWGFy9XlDwLwVz1RCFg=
 github.com/golangci/maligned v0.0.0-20180506175553-b1d89398deca h1:kNY3/svz5T29MYHubXix4aDDuE3RWHkPvopM/EDv/MA=
 github.com/golangci/maligned v0.0.0-20180506175553-b1d89398deca/go.mod h1:tvlJhZqDe4LMs4ZHD0oMUlt9G2LWuDGoisJTBzLMV9o=
-github.com/golangci/misspell v0.4.0 h1:KtVB/hTK4bbL/S6bs64rYyk8adjmh1BygbBiaAiX+a0=
-github.com/golangci/misspell v0.4.0/go.mod h1:W6O/bwV6lGDxUCChm2ykw9NQdd5bYd1Xkjo88UcWyJc=
+github.com/golangci/misspell v0.3.5 h1:pLzmVdl3VxTOncgzHcvLOKirdvcx/TydsClUQXTehjo=
+github.com/golangci/misspell v0.3.5/go.mod h1:dEbvlSfYbMQDtrpRMQU675gSDLDNa8sCPPChZ7PhiVA=
 github.com/golangci/revgrep v0.0.0-20220804021717-745bb2f7c2e6 h1:DIPQnGy2Gv2FSA4B/hh8Q7xx3B7AIDk3DAMeHclH1vQ=
 github.com/golangci/revgrep v0.0.0-20220804021717-745bb2f7c2e6/go.mod h1:0AKcRCkMoKvUvlf89F6O7H2LYdhr1zBh736mBItOdRs=
 github.com/golangci/unconvert v0.0.0-20180507085042-28b1c447d1f4 h1:zwtduBRr5SSWhqsYNgcuWO2kFlpdOZbP0+yRjmvPGys=
@@ -596,6 +594,7 @@ github.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=
 github.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
 github.com/google/go-github/v43 v43.0.0 h1:y+GL7LIsAIF2NZlJ46ZoC/D1W1ivZasT0lnWHMYPZ+U=
 github.com/google/go-github/v43 v43.0.0/go.mod h1:ZkTvvmCXBvsfPpTHXnH/d2hP9Y0cTbvN9kr5xqyXOIc=
+github.com/google/go-querystring v0.0.0-20170111101155-53e6ce116135/go.mod h1:odCYkC5MyYFN7vkCjXpyrEuKhc/BUO6wN/zVPAxq5ck=
 github.com/google/go-querystring v1.1.0 h1:AnCroh3fv4ZBgVIf1Iwtovgjaw/GiKJo8M8yD/fhyJ8=
 github.com/google/go-querystring v1.1.0/go.mod h1:Kcdr2DB4koayq7X8pmAG4sNG59So17icRSOU623lUBU=
 github.com/google/go-replayers/grpcreplay v1.1.0 h1:S5+I3zYyZ+GQz68OfbURDdt/+cSMqCK1wrvNx7WBzTE=
@@ -656,8 +655,8 @@ github.com/googleapis/gax-go/v2 v2.5.1/go.mod h1:h6B0KMMFNtI2ddbGJn3T3ZbwkeT6yqE
 github.com/googleapis/go-type-adapters v1.0.0/go.mod h1:zHW75FOG2aur7gAO2B+MLby+cLsWGBF62rFAi7WjWO4=
 github.com/googleapis/google-cloud-go-testing v0.0.0-20200911160855-bcd43fbb19e8/go.mod h1:dvDLG8qkwmyD9a/MJJN3XJcT3xFxOKAvTZGvuZmac9g=
 github.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=
-github.com/gordonklaus/ineffassign v0.0.0-20230107090616-13ace0543b28 h1:9alfqbrhuD+9fLZ4iaAVwhlp5PEhmnBt7yvK2Oy5C1U=
-github.com/gordonklaus/ineffassign v0.0.0-20230107090616-13ace0543b28/go.mod h1:Qcp2HIAYhR7mNUVSIxZww3Guk4it82ghYcEXIAk+QT0=
+github.com/gordonklaus/ineffassign v0.0.0-20210914165742-4cc7213b9bc8 h1:PVRE9d4AQKmbelZ7emNig1+NT27DUmKZn5qXxfio54U=
+github.com/gordonklaus/ineffassign v0.0.0-20210914165742-4cc7213b9bc8/go.mod h1:Qcp2HIAYhR7mNUVSIxZww3Guk4it82ghYcEXIAk+QT0=
 github.com/goreleaser/chglog v0.1.2 h1:tdzAb/ILeMnphzI9zQ7Nkq+T8R9qyXli8GydD8plFRY=
 github.com/goreleaser/chglog v0.1.2/go.mod h1:tTZsFuSZK4epDXfjMkxzcGbrIOXprf0JFp47BjIr3B8=
 github.com/goreleaser/fileglob v1.3.0 h1:/X6J7U8lbDpQtBvGcwwPS6OpzkNVlVEsFUVRx9+k+7I=
@@ -669,6 +668,7 @@ github.com/goreleaser/nfpm/v2 v2.15.0/go.mod h1:fpR40o+Wq6aeE5xoSZY3E23r06aLntuY
 github.com/gorilla/websocket v1.4.1/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
 github.com/gorilla/websocket v1.4.2 h1:+/TMaTYc4QFitKJxsQ7Yye35DkWvkdLcvGKqM+x0Ufc=
 github.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
+github.com/gostaticanalysis/analysisutil v0.0.0-20190318220348-4088753ea4d3/go.mod h1:eEOZF4jCKGi+aprrirO9e7WKB3beBRtWgqGunKl6pKE=
 github.com/gostaticanalysis/analysisutil v0.0.3/go.mod h1:eEOZF4jCKGi+aprrirO9e7WKB3beBRtWgqGunKl6pKE=
 github.com/gostaticanalysis/analysisutil v0.1.0/go.mod h1:dMhHRU9KTiDcuLGdy87/2gTR8WruwYZrKdRq9m1O6uw=
 github.com/gostaticanalysis/analysisutil v0.7.1 h1:ZMCjoue3DtDWQ5WyU16YbjbQEQ3VuzwxALrpYd+HeKk=
@@ -752,12 +752,12 @@ github.com/hashicorp/yamux v0.0.0-20180604194846-3520598351bb/go.mod h1:+NfK9FKe
 github.com/hashicorp/yamux v0.0.0-20181012175058-2f1d1f20f75d/go.mod h1:+NfK9FKeTrX5uv1uIXGdwYDTeHna2qgaIlx54MXqjAM=
 github.com/hexops/gotextdiff v1.0.3 h1:gitA9+qJrrTCsiCl7+kh75nPqQt1cx4ZkudSTLoUqJM=
 github.com/hexops/gotextdiff v1.0.3/go.mod h1:pSWU5MAI3yDq+fZBTazCSJysOMbxWL1BSow5/V2vxeg=
-github.com/hinshun/vt10x v0.0.0-20220119200601-820417d04eec h1:qv2VnGeEQHchGaZ/u7lxST/RaJw+cv273q79D81Xbog=
-github.com/hinshun/vt10x v0.0.0-20220119200601-820417d04eec/go.mod h1:Q48J4R4DvxnHolD5P8pOtXigYlRuPLGl6moFx3ulM68=
+github.com/hinshun/vt10x v0.0.0-20180616224451-1954e6464174 h1:WlZsjVhE8Af9IcZDGgJGQpNflI3+MJSBhsgT5PCtzBQ=
+github.com/hinshun/vt10x v0.0.0-20180616224451-1954e6464174/go.mod h1:DqJ97dSdRW1W22yXSB90986pcOyQ7r45iio1KN2ez1A=
 github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=
+github.com/huandu/xstrings v1.3.1/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=
+github.com/huandu/xstrings v1.3.2 h1:L18LIDzqlW6xN2rEkpdV8+oL/IXWJ1APd+vsdYy4Wdw=
 github.com/huandu/xstrings v1.3.2/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=
-github.com/huandu/xstrings v1.3.3 h1:/Gcsuc1x8JVbJ9/rlye4xZnVAbEkGauT8lbebqcQws4=
-github.com/huandu/xstrings v1.3.3/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=
 github.com/iancoleman/orderedmap v0.0.0-20190318233801-ac98e3ecb4b0/go.mod h1:N0Wam8K1arqPXNWjMo21EXnBPOPp36vB07FNRdD2geA=
 github.com/iancoleman/orderedmap v0.2.0 h1:sq1N/TFpYH++aViPcaKjys3bDClUEU7s5B+z6jq8pNA=
 github.com/iancoleman/orderedmap v0.2.0/go.mod h1:N0Wam8K1arqPXNWjMo21EXnBPOPp36vB07FNRdD2geA=
@@ -765,9 +765,8 @@ github.com/ianlancetaylor/demangle v0.0.0-20181102032728-5e5cf60278f6/go.mod h1:
 github.com/ianlancetaylor/demangle v0.0.0-20200824232613-28f6c0f3b639/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=
 github.com/imdario/mergo v0.3.9/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=
 github.com/imdario/mergo v0.3.11/go.mod h1:jmQim1M+e3UYxmgPu/WyfjB3N3VflVyUjjjwH0dnCYA=
+github.com/imdario/mergo v0.3.12 h1:b6R2BslTbIEToALKP7LxUvijTsNI9TAe80pLWN2g/HU=
 github.com/imdario/mergo v0.3.12/go.mod h1:jmQim1M+e3UYxmgPu/WyfjB3N3VflVyUjjjwH0dnCYA=
-github.com/imdario/mergo v0.3.13 h1:lFzP57bqS/wsqKssCGmtLAb8A0wKjLGrve2q3PPVcBk=
-github.com/imdario/mergo v0.3.13/go.mod h1:4lJ1jqUDcsbIECGy0RUJAXNIhg+6ocWgb1ALK2O4oXg=
 github.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=
 github.com/inconshreveable/mousetrap v1.0.1 h1:U3uMjPSQEBMNp1lFxmllqCPM6P5u/Xq7Pgzkat/bFNc=
 github.com/inconshreveable/mousetrap v1.0.1/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=
@@ -789,6 +788,7 @@ github.com/jmespath/go-jmespath v0.4.0 h1:BEgLn5cpjn8UN1mAw4NjwDrS35OdebyEtFe+9Y
 github.com/jmespath/go-jmespath v0.4.0/go.mod h1:T8mJZnbsbmF+m6zOOFylbeCJqk5+pHWvzYPziyZiYoo=
 github.com/jmespath/go-jmespath/internal/testify v1.5.1 h1:shLQSRRSCCPj3f2gpwzGwWFoC7ycTf1rcQZHOlsJ6N8=
 github.com/jmespath/go-jmespath/internal/testify v1.5.1/go.mod h1:L3OGu8Wl2/fWfCI6z80xFu9LTZmf1ZRjMHUOPmWr69U=
+github.com/jmoiron/sqlx v1.2.0/go.mod h1:1FEQNm3xlJgrMD+FBdI9+xvCksHtbpVBBw5dYhBSsks=
 github.com/joho/godotenv v1.3.0/go.mod h1:7hK45KPybAkOC6peb+G5yklZfMxEjkZhHbwpqxOKXbg=
 github.com/jonboulle/clockwork v0.1.0/go.mod h1:Ii8DK3G1RaLaWxj9trq07+26W01tbo22gdxWY5EU2bo=
 github.com/jpillora/backoff v0.0.0-20180909062703-3050d21c67d7/go.mod h1:2iMrUgbbvHEiQClaW2NsSzMyGHqN+rDFqY705q49KG0=
@@ -805,8 +805,6 @@ github.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7V
 github.com/julienschmidt/httprouter v1.3.0/go.mod h1:JR6WtHb+2LUe8TCKY3cZOxFyyO8IZAc4RVcycCCAKdM=
 github.com/julz/importas v0.1.0 h1:F78HnrsjY3cR7j0etXy5+TU1Zuy7Xt08X/1aJnH5xXY=
 github.com/julz/importas v0.1.0/go.mod h1:oSFU2R4XK/P7kNBrnL/FEQlDGN1/6WoxXEjSSXO0DV0=
-github.com/junk1tm/musttag v0.4.5 h1:d+mpJ1vn6WFEVKHwkgJiIedis1u/EawKOuUTygAUtCo=
-github.com/junk1tm/musttag v0.4.5/go.mod h1:XkcL/9O6RmD88JBXb+I15nYRl9W4ExhgQeCBEhfMC8U=
 github.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51 h1:Z9n2FFNUXsshfwJMBgNA0RU6/i7WVaAegv3PtuIHPMs=
 github.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51/go.mod h1:CzGEWj7cYgsdH8dAjBGEr58BoE7ScuLd+fwFZ44+/x8=
 github.com/kevinburke/ssh_config v0.0.0-20180830205328-81db2a75821e/go.mod h1:CT57kijsi8u/K/BOFA39wgDQJ9CxiF4nAY/ojJ6r6mM=
@@ -816,8 +814,8 @@ github.com/kevinburke/ssh_config v1.1.0 h1:pH/t1WS9NzT8go394IqZeJTMHVm6Cr6ZJ6AQ+
 github.com/kevinburke/ssh_config v1.1.0/go.mod h1:CT57kijsi8u/K/BOFA39wgDQJ9CxiF4nAY/ojJ6r6mM=
 github.com/keybase/go-crypto v0.0.0-20161004153544-93f5b35093ba/go.mod h1:ghbZscTyKdM07+Fw3KSi0hcJm+AlEUWj8QLlPtijN/M=
 github.com/kisielk/errcheck v1.1.0/go.mod h1:EZBBE59ingxPouuu3KfxchcWSUPOHkagtvWXihfKN4Q=
-github.com/kisielk/errcheck v1.6.3 h1:dEKh+GLHcWm2oN34nMvDzn1sqI0i0WxPvrgiJA5JuM8=
-github.com/kisielk/errcheck v1.6.3/go.mod h1:nXw/i/MfnvRHqXa7XXmQMUB0oNFGuBrNI8d8NLy0LPw=
+github.com/kisielk/errcheck v1.6.2 h1:uGQ9xI8/pgc9iOoCe7kWQgRE6SBTrCGmTSf0LrEtY7c=
+github.com/kisielk/errcheck v1.6.2/go.mod h1:nXw/i/MfnvRHqXa7XXmQMUB0oNFGuBrNI8d8NLy0LPw=
 github.com/kisielk/gotool v1.0.0 h1:AV2c/EiW3KqPNT9ZKl07ehoAGi4C5/01Cfbblndcapg=
 github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=
 github.com/kkHAIKE/contextcheck v1.1.3 h1:l4pNvrb8JSwRd51ojtcOxOeHJzHek+MtOyXbaR0uvmw=
@@ -838,6 +836,8 @@ github.com/kr/pretty v0.2.0/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfn
 github.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=
 github.com/kr/pretty v0.3.0 h1:WgNl7dwNpEZ6jJ9k1snq4pZsg7DOEN8hP9Xw0Tsjwk0=
 github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
+github.com/kr/pty v1.1.4 h1:5Myjjh3JY/NaAi4IsUbHADytDyl1VE1Y9PXDlL+P/VQ=
+github.com/kr/pty v1.1.4/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
 github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
 github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
 github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
@@ -847,17 +847,18 @@ github.com/kunwardeep/paralleltest v1.0.6 h1:FCKYMF1OF2+RveWlABsdnmsvJrei5aoyZoa
 github.com/kunwardeep/paralleltest v1.0.6/go.mod h1:Y0Y0XISdZM5IKm3TREQMZ6iteqn1YuwCsJO/0kL9Zes=
 github.com/kylelemons/godebug v0.0.0-20170820004349-d65d576e9348/go.mod h1:B69LEHPfb2qLo0BaaOLcbitczOKLWTsrBG9LczfCD4k=
 github.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=
-github.com/kyoh86/exportloopref v0.1.11 h1:1Z0bcmTypkL3Q4k+IDHMWTcnCliEZcaPiIe0/ymEyhQ=
-github.com/kyoh86/exportloopref v0.1.11/go.mod h1:qkV4UF1zGl6EkF1ox8L5t9SwyeBAZ3qLMd6up458uqA=
-github.com/kyokomi/emoji/v2 v2.2.11 h1:Pf/ZWVTbnAVkHOLJLWjPxM/FmgyPe+d85cv/OLP5Yus=
-github.com/kyokomi/emoji/v2 v2.2.11/go.mod h1:JUcn42DTdsXJo1SWanHh4HKDEyPaR5CqkmoirZZP9qE=
+github.com/kyoh86/exportloopref v0.1.8 h1:5Ry/at+eFdkX9Vsdw3qU4YkvGtzuVfzT4X7S77LoN/M=
+github.com/kyoh86/exportloopref v0.1.8/go.mod h1:1tUcJeiioIs7VWe5gcOObrux3lb66+sBqGZrRkMwPgg=
+github.com/kyokomi/emoji/v2 v2.2.8 h1:jcofPxjHWEkJtkIbcLHvZhxKgCPl6C7MyjTrD4KDqUE=
+github.com/kyokomi/emoji/v2 v2.2.8/go.mod h1:JUcn42DTdsXJo1SWanHh4HKDEyPaR5CqkmoirZZP9qE=
 github.com/ldez/gomoddirectives v0.2.3 h1:y7MBaisZVDYmKvt9/l1mjNCiSA1BVn34U0ObUcJwlhA=
 github.com/ldez/gomoddirectives v0.2.3/go.mod h1:cpgBogWITnCfRq2qGoDkKMEVSaarhdBr6g8G04uz6d0=
-github.com/ldez/tagliatelle v0.4.0 h1:sylp7d9kh6AdXN2DpVGHBRb5guTVAgOxqNGhbqc4b1c=
-github.com/ldez/tagliatelle v0.4.0/go.mod h1:mNtTfrHy2haaBAw+VT7IBV6VXBThS7TCreYWbBcJ87I=
+github.com/ldez/tagliatelle v0.3.1 h1:3BqVVlReVUZwafJUwQ+oxbx2BEX2vUG4Yu/NOfMiKiM=
+github.com/ldez/tagliatelle v0.3.1/go.mod h1:8s6WJQwEYHbKZDsp/LjArytKOG8qaMrKQQ3mFukHs88=
 github.com/leodido/go-urn v1.2.0/go.mod h1:+8+nEpDfqqsY+g338gtMEUOtuK+4dEMhiQEgxpxOKII=
-github.com/leonklingele/grouper v1.1.1 h1:suWXRU57D4/Enn6pXR0QVqqWWrnJ9Osrz+5rjt8ivzU=
-github.com/leonklingele/grouper v1.1.1/go.mod h1:uk3I3uDfi9B6PeUjsCKi6ndcf63Uy7snXgR4yDYQVDY=
+github.com/leonklingele/grouper v1.1.0 h1:tC2y/ygPbMFSBOs3DcyaEMKnnwH7eYKzohOtRrf0SAg=
+github.com/leonklingele/grouper v1.1.0/go.mod h1:uk3I3uDfi9B6PeUjsCKi6ndcf63Uy7snXgR4yDYQVDY=
+github.com/lib/pq v1.0.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=
 github.com/lib/pq v1.10.2/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=
 github.com/llorllale/go-gitlint v0.0.0-20210608233938-d6303cc52cc5 h1:Z0EjtKGIOdrdYcm9eS03z+U3LUt0n4W6N5y3NTevC18=
 github.com/llorllale/go-gitlint v0.0.0-20210608233938-d6303cc52cc5/go.mod h1:M9vv5VZ7nTJVRP1fWOu3A4/lRh/sJTCIoSjPA97T8wc=
@@ -881,6 +882,7 @@ github.com/mattn/go-colorable v0.1.1/go.mod h1:FuOcm+DKB9mbwrcAfNl7/TZVBZ6rcncea
 github.com/mattn/go-colorable v0.1.2/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=
 github.com/mattn/go-colorable v0.1.4/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=
 github.com/mattn/go-colorable v0.1.9/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=
+github.com/mattn/go-colorable v0.1.11/go.mod h1:u5H1YNBxpqRaxsYJYSkiCWKzEfiAb1Gb520KVy5xxl4=
 github.com/mattn/go-colorable v0.1.12/go.mod h1:u5H1YNBxpqRaxsYJYSkiCWKzEfiAb1Gb520KVy5xxl4=
 github.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=
 github.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=
@@ -894,19 +896,19 @@ github.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hd
 github.com/mattn/go-isatty v0.0.10/go.mod h1:qgIWMr58cqv1PHHyhnkY9lrL7etaEgOFcMEpPG5Rm84=
 github.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=
 github.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=
+github.com/mattn/go-isatty v0.0.16 h1:bq3VjFmv/sOjHtdEhmkEV4x1AJtvUvOJ2PFAZ5+peKQ=
 github.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=
-github.com/mattn/go-isatty v0.0.17 h1:BTarxUcIeDqL27Mc+vyvdWYSL28zpIhv3RoTdsLMPng=
-github.com/mattn/go-isatty v0.0.17/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=
 github.com/mattn/go-runewidth v0.0.4/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=
 github.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=
-github.com/mattn/go-runewidth v0.0.14 h1:+xnbZSEeDbOIg5/mE6JF0w6n9duR1l3/WmbinWVwUuU=
-github.com/mattn/go-runewidth v0.0.14/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=
+github.com/mattn/go-runewidth v0.0.10 h1:CoZ3S2P7pvtP45xOtBw+/mDL2z0RKI576gSkzRRpdGg=
+github.com/mattn/go-runewidth v0.0.10/go.mod h1:RAqKPSqVFrSLVXbA8x7dzmKdmGzieGRCM46jaSJTDAk=
+github.com/mattn/go-sqlite3 v1.9.0/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=
 github.com/matttproud/golang_protobuf_extensions v1.0.1 h1:4hp9jkHxhMHkqkrB3Ix0jegS5sx/RkqARlsWZ6pIwiU=
 github.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=
 github.com/mbilski/exhaustivestruct v1.2.0 h1:wCBmUnSYufAHO6J4AVWY6ff+oxWxsVFrwgOdMUQePUo=
 github.com/mbilski/exhaustivestruct v1.2.0/go.mod h1:OeTBVxQWoEmB2J2JCHmXWPJ0aksxSUOUy+nvtVEfzXc=
-github.com/mgechev/revive v1.2.5 h1:UF9AR8pOAuwNmhXj2odp4mxv9Nx2qUIwVz8ZsU+Mbec=
-github.com/mgechev/revive v1.2.5/go.mod h1:nFOXent79jMTISAfOAasKfy0Z2Ejq0WX7Qn/KAdYopI=
+github.com/mgechev/revive v1.2.4 h1:+2Hd/S8oO2H0Ikq2+egtNwQsVhAeELHjxjIUFX5ajLI=
+github.com/mgechev/revive v1.2.4/go.mod h1:iAWlQishqCuj4yhV24FTnKSXGpbAA+0SckXB8GQMX/Q=
 github.com/mgutz/ansi v0.0.0-20170206155736-9520e82c474b h1:j7+1HpAFS1zy5+Q4qx1fWh90gTKwiN4QCGoY9TWyyO4=
 github.com/mgutz/ansi v0.0.0-20170206155736-9520e82c474b/go.mod h1:01TrycV0kFyexm33Z7vhZRXopbI8J3TDReVlkTgMUxE=
 github.com/miekg/dns v1.0.14/go.mod h1:W1PPwlIAgtquWBMBEV9nkV9Cazfe8ScdGz/Lj7v3Nrg=
@@ -961,22 +963,20 @@ github.com/nakabonne/nestif v0.3.1/go.mod h1:9EtoZochLn5iUprVDmDjqGKPofoUEBL8U4N
 github.com/nbutton23/zxcvbn-go v0.0.0-20210217022336-fa2cb2858354 h1:4kuARK6Y6FxaNu/BnU2OAaLF86eTVhP2hjTB6iMvItA=
 github.com/nbutton23/zxcvbn-go v0.0.0-20210217022336-fa2cb2858354/go.mod h1:KSVJerMDfblTH7p5MZaTt+8zaT2iEk3AkVb9PQdZuE8=
 github.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=
-github.com/nishanths/exhaustive v0.9.5 h1:TzssWan6orBiLYVqewCG8faud9qlFntJE30ACpzmGME=
-github.com/nishanths/exhaustive v0.9.5/go.mod h1:IbwrGdVMizvDcIxPYGVdQn5BqWJaOwpCvg4RGb8r/TA=
+github.com/nishanths/exhaustive v0.8.3 h1:pw5O09vwg8ZaditDp/nQRqVnrMczSJDxRDJMowvhsrM=
+github.com/nishanths/exhaustive v0.8.3/go.mod h1:qj+zJJUgJ76tR92+25+03oYUhzF4R7/2Wk7fGTfCHmg=
 github.com/nishanths/predeclared v0.2.2 h1:V2EPdZPliZymNAn79T8RkNApBjMmVKh5XRpLm/w98Vk=
 github.com/nishanths/predeclared v0.2.2/go.mod h1:RROzoN6TnGQupbC+lqggsOlcgysk3LMK/HI84Mp280c=
 github.com/nsf/jsondiff v0.0.0-20200515183724-f29ed568f4ce/go.mod h1:uFMI8w+ref4v2r9jz+c9i1IfIttS/OkmLfrk1jne5hs=
-github.com/nunnatsa/ginkgolinter v0.8.1 h1:/y4o/0hV+ruUHj4xXh89xlFjoaitnI4LnkpuYs02q1c=
-github.com/nunnatsa/ginkgolinter v0.8.1/go.mod h1:FYYLtszIdmzCH8XMaMPyxPVXZ7VCaIm55bA+gugx+14=
 github.com/oklog/run v1.0.0/go.mod h1:dlhp/R75TPv97u0XWUtDeV/lRKWPKSdTuV0TZvrmrQA=
 github.com/oklog/ulid v1.3.1/go.mod h1:CirwcVhetQ6Lv90oh/F+FBtV6XMibvdAFo93nm5qn4U=
 github.com/olekukonko/tablewriter v0.0.5 h1:P2Ga83D34wi1o9J6Wh1mRuqd4mF/x/lgBS7N7AbDhec=
 github.com/olekukonko/tablewriter v0.0.5/go.mod h1:hPp6KlRPjbx+hW8ykQs1w3UBbZlj6HuIJcUGPhkA7kY=
 github.com/onsi/ginkgo v1.6.0 h1:Ix8l273rp3QzYgXSR+c8d1fTG7UPgYkOSELPhiY/YGw=
 github.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
-github.com/onsi/ginkgo/v2 v2.8.0 h1:pAM+oBNPrpXRs+E/8spkeGx9QgekbRVyr74EUvRVOUI=
+github.com/onsi/ginkgo/v2 v2.1.4 h1:GNapqRSid3zijZ9H77KrgVG4/8KqiyRsxcSxe+7ApXY=
 github.com/onsi/gomega v1.5.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=
-github.com/onsi/gomega v1.26.0 h1:03cDLK28U6hWvCAns6NeydX3zIm4SF3ci69ulidS32Q=
+github.com/onsi/gomega v1.20.0 h1:8W0cWlwFkflGPLltQvLRB7ZVD5HuP6ng320w2IS245Q=
 github.com/otiai10/copy v1.2.0 h1:HvG945u96iNadPoG2/Ja2+AUJeW5YuFQMixq9yirC+k=
 github.com/otiai10/copy v1.2.0/go.mod h1:rrF5dJ5F0t/EWSYODDu4j9/vEeYHMkc8jt0zJChqQWw=
 github.com/otiai10/curr v0.0.0-20150429015615-9b4961190c95/go.mod h1:9qAhocn7zKJG+0mI8eUu6xqkFDYS2kb2saOteoSB3cE=
@@ -991,6 +991,8 @@ github.com/pelletier/go-toml v1.9.5 h1:4yBQzkHv+7BHq2PQUZF3Mx0IYxG7LsP222s7Agd3v
 github.com/pelletier/go-toml v1.9.5/go.mod h1:u1nR/EPcESfeI/szUZKdtJ0xRNbUoANCkoOuaOx1Y+c=
 github.com/pelletier/go-toml/v2 v2.0.5 h1:ipoSadvV8oGUjnUbMub59IDPPwfxF694nG/jwbMiyQg=
 github.com/pelletier/go-toml/v2 v2.0.5/go.mod h1:OMHamSCAODeSsVrwwvcJOaoN0LIUIaFVNZzmWyNfXas=
+github.com/phayes/checkstyle v0.0.0-20170904204023-bfd46e6a821d h1:CdDQnGF8Nq9ocOS/xlSptM1N3BbrA6/kmaep5ggwaIA=
+github.com/phayes/checkstyle v0.0.0-20170904204023-bfd46e6a821d/go.mod h1:3OzsM7FXDQlpCiw2j81fOmAwQLnZnLGXVKUzeKQXIAw=
 github.com/pierrec/lz4 v2.0.5+incompatible/go.mod h1:pdkljMzZIN41W+lC3N2tnIh5sFi+IEE17M5jbnwPHcY=
 github.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
@@ -1000,8 +1002,8 @@ github.com/pkg/sftp v1.10.1/go.mod h1:lYOWFsE0bwd1+KfKJaKeuokY15vzFx25BLbzYYoAxZ
 github.com/pkg/sftp v1.13.1/go.mod h1:3HaPG6Dq1ILlpPZRO0HVMrsydcdLt6HRDccSgb87qRg=
 github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
-github.com/polyfloyd/go-errorlint v1.1.0 h1:VKoEFg5yxSgJ2yFPVhxW7oGz+f8/OVcuMeNvcPIi6Eg=
-github.com/polyfloyd/go-errorlint v1.1.0/go.mod h1:Uss7Bc/izYG0leCMRx3WVlrpqWedSZk7V/FUQW6VJ6U=
+github.com/polyfloyd/go-errorlint v1.0.5 h1:AHB5JRCjlmelh9RrLxT9sgzpalIwwq4hqE8EkwIwKdY=
+github.com/polyfloyd/go-errorlint v1.0.5/go.mod h1:APVvOesVSAnne5SClsPxPdfvZTVDojXh1/G3qb5wjGI=
 github.com/posener/complete v1.1.1/go.mod h1:em0nMJCgc9GFtwrmVmEMR/ZL6WyhyjMBndrE9hABlRI=
 github.com/posener/complete v1.2.1/go.mod h1:6gapUrK/U1TAN7ciCoNRIdVC5sbdBTUh1DKN0g6uH7E=
 github.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=
@@ -1031,19 +1033,24 @@ github.com/prometheus/procfs v0.6.0/go.mod h1:cz+aTbrPOrUb4q7XlbU9ygM+/jj0fzG6c1
 github.com/prometheus/procfs v0.7.3 h1:4jVXhlkAyzOScmCkXBTOLRLTz8EeU+eyjrwB/EPq0VU=
 github.com/prometheus/procfs v0.7.3/go.mod h1:cz+aTbrPOrUb4q7XlbU9ygM+/jj0fzG6c1xBZuNvfVA=
 github.com/prometheus/tsdb v0.7.1/go.mod h1:qhTCs0VvXwvX/y3TZrWD7rabWM+ijKTux40TwIPHuXU=
-github.com/psampaz/go-mod-outdated v0.9.0 h1:P3f6z6NrAgG1kq1W4xcsa/lL8SM2SEZxAlRvG1AMFBs=
-github.com/psampaz/go-mod-outdated v0.9.0/go.mod h1:FcfE/igcl0GuLxemNXSL7r+rconnPmFP8kmO/Th3/To=
-github.com/quasilyte/go-ruleguard v0.3.19 h1:tfMnabXle/HzOb5Xe9CUZYWXKfkS1KwRmZyPmD9nVcc=
-github.com/quasilyte/go-ruleguard v0.3.19/go.mod h1:lHSn69Scl48I7Gt9cX3VrbsZYvYiBYszZOZW4A+oTEw=
-github.com/quasilyte/gogrep v0.5.0 h1:eTKODPXbI8ffJMN+W2aE0+oL0z/nh8/5eNdiO34SOAo=
-github.com/quasilyte/gogrep v0.5.0/go.mod h1:Cm9lpz9NZjEoL1tgZ2OgeUKPIxL1meE7eo60Z6Sk+Ng=
+github.com/psampaz/go-mod-outdated v0.8.0 h1:mSqlqz9BDpfbuxs0IWoRxqbyz7GfWQHLsDH47n89jCw=
+github.com/psampaz/go-mod-outdated v0.8.0/go.mod h1:o/o7wRSQWiSjKw8afZ7hq58J7IucGcSMbLWMG3veaQs=
+github.com/quasilyte/go-ruleguard v0.3.1-0.20210203134552-1b5a410e1cc8/go.mod h1:KsAh3x0e7Fkpgs+Q9pNLS5XpFSvYCEVl5gP9Pp1xp30=
+github.com/quasilyte/go-ruleguard v0.3.18 h1:sd+abO1PEI9fkYennwzHn9kl3nqP6M5vE7FiOzZ+5CE=
+github.com/quasilyte/go-ruleguard v0.3.18/go.mod h1:lOIzcYlgxrQ2sGJ735EHXmf/e9MJ516j16K/Ifcttvs=
+github.com/quasilyte/go-ruleguard/dsl v0.3.0/go.mod h1:KeCP03KrjuSO0H1kTuZQCWlQPulDV6YMIXmpQss17rU=
+github.com/quasilyte/go-ruleguard/dsl v0.3.21/go.mod h1:KeCP03KrjuSO0H1kTuZQCWlQPulDV6YMIXmpQss17rU=
+github.com/quasilyte/go-ruleguard/rules v0.0.0-20201231183845-9e62ed36efe1/go.mod h1:7JTjp89EGyU1d6XfBiXihJNG37wB2VRkd125Q1u7Plc=
+github.com/quasilyte/go-ruleguard/rules v0.0.0-20211022131956-028d6511ab71/go.mod h1:4cgAphtvu7Ftv7vOT2ZOYhC6CvBxZixcasr8qIOTA50=
+github.com/quasilyte/gogrep v0.0.0-20220828223005-86e4605de09f h1:6Gtn2i04RD0gVyYf2/IUMTIs+qYleBt4zxDqkLTcu4U=
+github.com/quasilyte/gogrep v0.0.0-20220828223005-86e4605de09f/go.mod h1:Cm9lpz9NZjEoL1tgZ2OgeUKPIxL1meE7eo60Z6Sk+Ng=
 github.com/quasilyte/regex/syntax v0.0.0-20200407221936-30656e2c4a95 h1:L8QM9bvf68pVdQ3bCFZMDmnt9yqcMBro1pC7F+IPYMY=
 github.com/quasilyte/regex/syntax v0.0.0-20200407221936-30656e2c4a95/go.mod h1:rlzQ04UMyJXu/aOvhd8qT+hvDrFpiwqp8MRXDY9szc0=
 github.com/quasilyte/stdinfo v0.0.0-20220114132959-f7386bf02567 h1:M8mH9eK4OUR4lu7Gd+PU1fV2/qnDNfzT635KRSObncs=
 github.com/quasilyte/stdinfo v0.0.0-20220114132959-f7386bf02567/go.mod h1:DWNGW8A4Y+GyBgPuaQJuWiy0XYftx4Xm/y5Jqk9I6VQ=
+github.com/rivo/uniseg v0.1.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=
+github.com/rivo/uniseg v0.2.0 h1:S1pD9weZBuJdFmowNwbpi7BJ8TNftyUImj/0WQi72jY=
 github.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=
-github.com/rivo/uniseg v0.4.3 h1:utMvzDsuh3suAEnhH0RdHmoPbU648o6CvXxTx4SBMOw=
-github.com/rivo/uniseg v0.4.3/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=
 github.com/rogpeppe/fastuuid v0.0.0-20150106093220-6724a57986af/go.mod h1:XWv6SoW27p1b0cqNHllgS5HIMJraePCO15w5zCzIWYg=
 github.com/rogpeppe/fastuuid v1.1.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=
 github.com/rogpeppe/fastuuid v1.2.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=
@@ -1052,20 +1059,20 @@ github.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZV
 github.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
 github.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=
 github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
-github.com/ryancurrah/gomodguard v1.3.0 h1:q15RT/pd6UggBXVBuLps8BXRvl5GPBcwVA7BJHMLuTw=
-github.com/ryancurrah/gomodguard v1.3.0/go.mod h1:ggBxb3luypPEzqVtq33ee7YSN35V28XeGnid8dnni50=
-github.com/ryanrolds/sqlclosecheck v0.4.0 h1:i8SX60Rppc1wRuyQjMciLqIzV3xnoHB7/tXbr6RGYNI=
-github.com/ryanrolds/sqlclosecheck v0.4.0/go.mod h1:TBRRjzL31JONc9i4XMinicuo+s+E8yKZ5FN8X3G6CKQ=
+github.com/ryancurrah/gomodguard v1.2.4 h1:CpMSDKan0LtNGGhPrvupAoLeObRFjND8/tU1rEOtBp4=
+github.com/ryancurrah/gomodguard v1.2.4/go.mod h1:+Kem4VjWwvFpUJRJSwa16s1tBJe+vbv02+naTow2f6M=
+github.com/ryanrolds/sqlclosecheck v0.3.0 h1:AZx+Bixh8zdUBxUA1NxbxVAS78vTPq4rCb8OUZI9xFw=
+github.com/ryanrolds/sqlclosecheck v0.3.0/go.mod h1:1gREqxyTGR3lVtpngyFo3hZAgk0KCtEdgEkHwDbigdA=
 github.com/ryanuber/columnize v0.0.0-20160712163229-9b3edd62028f/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=
-github.com/sanposhiho/wastedassign/v2 v2.0.7 h1:J+6nrY4VW+gC9xFzUc+XjPD3g3wF3je/NsJFwFK7Uxc=
-github.com/sanposhiho/wastedassign/v2 v2.0.7/go.mod h1:KyZ0MWTwxxBmfwn33zh3k1dmsbF2ud9pAAGfoLfjhtI=
+github.com/sanposhiho/wastedassign/v2 v2.0.6 h1:+6/hQIHKNJAUixEj6EmOngGIisyeI+T3335lYTyxRoA=
+github.com/sanposhiho/wastedassign/v2 v2.0.6/go.mod h1:KyZ0MWTwxxBmfwn33zh3k1dmsbF2ud9pAAGfoLfjhtI=
 github.com/sashamelentyev/interfacebloat v1.1.0 h1:xdRdJp0irL086OyW1H/RTZTr1h/tMEOsumirXcOJqAw=
 github.com/sashamelentyev/interfacebloat v1.1.0/go.mod h1:+Y9yU5YdTkrNvoX0xHc84dxiN1iBi9+G8zZIhPVoNjQ=
-github.com/sashamelentyev/usestdlibvars v1.23.0 h1:01h+/2Kd+NblNItNeux0veSL5cBF1jbEOPrEhDzGYq0=
-github.com/sashamelentyev/usestdlibvars v1.23.0/go.mod h1:YPwr/Y1LATzHI93CqoPUN/2BzGQ/6N/cl/KwgR0B/aU=
+github.com/sashamelentyev/usestdlibvars v1.20.0 h1:K6CXjqqtSYSsuyRDDC7Sjn6vTMLiSJa4ZmDkiokoqtw=
+github.com/sashamelentyev/usestdlibvars v1.20.0/go.mod h1:0GaP+ecfZMXShS0A94CJn6aEuPRILv8h/VuWI9n1ygg=
 github.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529/go.mod h1:DxrIzT+xaE7yg65j358z/aeFdxmN0P9QXhEzd20vsDc=
-github.com/securego/gosec/v2 v2.15.0 h1:v4Ym7FF58/jlykYmmhZ7mTm7FQvN/setNm++0fgIAtw=
-github.com/securego/gosec/v2 v2.15.0/go.mod h1:VOjTrZOkUtSDt2QLSJmQBMWnvwiQPEjg0l+5juIqGk8=
+github.com/securego/gosec/v2 v2.13.1 h1:7mU32qn2dyC81MH9L2kefnQyRMUarfDER3iQyMHcjYM=
+github.com/securego/gosec/v2 v2.13.1/go.mod h1:EO1sImBMBWFjOTFzMWfTRrZW6M15gm60ljzrmy/wtHo=
 github.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=
 github.com/sergi/go-diff v1.1.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=
 github.com/sergi/go-diff v1.2.0 h1:XU+rvMAioB0UC3q1MFrIQy4Vo5/4VsRDQQXHsEya6xQ=
@@ -1088,8 +1095,8 @@ github.com/sivchari/containedctx v1.0.2 h1:0hLQKpgC53OVF1VT7CeoFHk9YKstur1XOgfYI
 github.com/sivchari/containedctx v1.0.2/go.mod h1:PwZOeqm4/DLoJOqMSIJs3aKqXRX4YO+uXww087KZ7Bw=
 github.com/sivchari/nosnakecase v1.7.0 h1:7QkpWIRMe8x25gckkFd2A5Pi6Ymo0qgr4JrhGt95do8=
 github.com/sivchari/nosnakecase v1.7.0/go.mod h1:CwDzrzPea40/GB6uynrNLiorAlgFRvRbFSgJx2Gs+QY=
-github.com/sivchari/tenv v1.7.1 h1:PSpuD4bu6fSmtWMxSGWcvqUUgIn7k3yOJhOIzVWn8Ak=
-github.com/sivchari/tenv v1.7.1/go.mod h1:64yStXKSOxDfX47NlhVwND4dHwfZDdbp2Lyl018Icvg=
+github.com/sivchari/tenv v1.7.0 h1:d4laZMBK6jpe5PWepxlV9S+LC0yXqvYHiq8E6ceoVVE=
+github.com/sivchari/tenv v1.7.0/go.mod h1:64yStXKSOxDfX47NlhVwND4dHwfZDdbp2Lyl018Icvg=
 github.com/slack-go/slack v0.10.2 h1:KMN/h2sgUninHXvQI8PrR/PHBUuWp2NPvz2Kr66tki4=
 github.com/slack-go/slack v0.10.2/go.mod h1:5FLdBRv7VW/d9EBxx/eEktOptWygbA9K2QK/KW7ds1s=
 github.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=
@@ -1100,8 +1107,8 @@ github.com/smartystreets/gunit v1.0.0/go.mod h1:qwPWnhz6pn0NnRBP++URONOVyNkPyr4S
 github.com/soheilhy/cmux v0.1.4/go.mod h1:IM3LyeVVIOuxMH7sFAkER9+bJ4dT7Ms6E4xg4kGIyLM=
 github.com/sonatard/noctx v0.0.1 h1:VC1Qhl6Oxx9vvWo3UDgrGXYCeKCe3Wbw7qAWL6FrmTY=
 github.com/sonatard/noctx v0.0.1/go.mod h1:9D2D/EoULe8Yy2joDHJj7bv3sZoq9AaSb8B4lqBjiZI=
-github.com/sourcegraph/go-diff v0.7.0 h1:9uLlrd5T46OXs5qpp8L/MTltk0zikUGi0sNNyCpA8G0=
-github.com/sourcegraph/go-diff v0.7.0/go.mod h1:iBszgVvyxdc8SFZ7gm69go2KDdt3ag071iBaWPF6cjs=
+github.com/sourcegraph/go-diff v0.6.1 h1:hmA1LzxW0n1c3Q4YbrFgg4P99GSnebYa3x8gr0HZqLQ=
+github.com/sourcegraph/go-diff v0.6.1/go.mod h1:iBszgVvyxdc8SFZ7gm69go2KDdt3ag071iBaWPF6cjs=
 github.com/spaolacci/murmur3 v0.0.0-20180118202830-f09979ecbc72/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=
 github.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=
 github.com/spf13/afero v1.2.2/go.mod h1:9ZxEEn6pIJ8Rxe320qSDBk6AsU0r9pR7Q4OcevTdifk=
@@ -1113,8 +1120,8 @@ github.com/spf13/cast v1.3.1/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkU
 github.com/spf13/cast v1.5.0 h1:rj3WzYc11XZaIZMPKmwP96zkFEnnAmV8s6XbB2aY32w=
 github.com/spf13/cast v1.5.0/go.mod h1:SpXXQ5YoyJw6s3/6cMTQuxvgRl3PCJiyaX9p6b155UU=
 github.com/spf13/cobra v1.1.1/go.mod h1:WnodtKOvamDL/PwE2M4iKs8aMDBZ5Q5klgD3qfVJQMI=
-github.com/spf13/cobra v1.6.1 h1:o94oiPyS4KD1mPy2fmcYYHHfCxLqYjJOhGsCHFZtEzA=
-github.com/spf13/cobra v1.6.1/go.mod h1:IOw/AERYS7UzyrGinqmz6HLUo219MORXGxhbaJUqzrY=
+github.com/spf13/cobra v1.6.0 h1:42a0n6jwCot1pUmomAp4T7DeMD+20LFv4Q54pxLf2LI=
+github.com/spf13/cobra v1.6.0/go.mod h1:IOw/AERYS7UzyrGinqmz6HLUo219MORXGxhbaJUqzrY=
 github.com/spf13/jwalterweatherman v1.0.0/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb68N+wFjFa4jdeBTo=
 github.com/spf13/jwalterweatherman v1.1.0 h1:ue6voC5bR5F8YxI5S67j9i582FU4Qvo2bmqnqMYADFk=
 github.com/spf13/jwalterweatherman v1.1.0/go.mod h1:aNWZUN0dPAAO/Ljvb5BEdw96iTZ0EXowPYD95IqWIGo=
@@ -1139,6 +1146,7 @@ github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSS
 github.com/stretchr/objx v0.5.0 h1:1zr/of2m5FGMsad5YfcqgdqdWrIhu+EBEJRhR1U7z/c=
 github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
 github.com/stretchr/testify v1.1.4/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
+github.com/stretchr/testify v1.2.1/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
 github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
 github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
 github.com/stretchr/testify v1.3.1-0.20190311161405-34c6fa2dc709/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
@@ -1148,14 +1156,11 @@ github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/
 github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
+github.com/stretchr/testify v1.8.1 h1:w7B6lhMri9wdJUVmEZPGGhZzrYTPvgJArz7wNPgYKsk=
 github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
-github.com/stretchr/testify v1.8.2 h1:+h33VjcLVPDHtOdpUCuF+7gSuG3yGIftsP1YvFihtJ8=
-github.com/stretchr/testify v1.8.2/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
 github.com/subosito/gotenv v1.2.0/go.mod h1:N0PQaV/YGNqwC0u51sEeR/aUtSLEXKX9iv69rRypqCw=
 github.com/subosito/gotenv v1.4.1 h1:jyEFiXpy21Wm81FBN71l9VoMMV8H8jG+qIK3GCpY6Qs=
 github.com/subosito/gotenv v1.4.1/go.mod h1:ayKnFf/c6rvx/2iiLrJUk1e6plDbT3edrFNGqEflhK0=
-github.com/t-yuki/gocover-cobertura v0.0.0-20180217150009-aaee18c8195c h1:+aPplBwWcHBo6q9xrfWdMrT9o4kltkmmvpemgIjep/8=
-github.com/t-yuki/gocover-cobertura v0.0.0-20180217150009-aaee18c8195c/go.mod h1:SbErYREK7xXdsRiigaQiQkI9McGRzYMvlKYaP3Nimdk=
 github.com/tdakkota/asciicheck v0.1.1 h1:PKzG7JUTUmVspQTDqtkX9eSiLGossXTybutHwTXuO0A=
 github.com/tdakkota/asciicheck v0.1.1/go.mod h1:yHp0ai0Z9gUljN3o0xMhYJnH/IcvkdTBOX2fmJ93JEM=
 github.com/technoweenie/multipartstreamer v1.0.1 h1:XRztA5MXiR1TIRHxH2uNxXxaIkKQDeX7m2XsSOlQEnM=
@@ -1166,8 +1171,8 @@ github.com/tenntenn/text/transform v0.0.0-20200319021203-7eef512accb3 h1:f+jULpR
 github.com/tenntenn/text/transform v0.0.0-20200319021203-7eef512accb3/go.mod h1:ON8b8w4BN/kE1EOhwT0o+d62W65a6aPw1nouo9LMgyY=
 github.com/tetafro/godot v1.4.11 h1:BVoBIqAf/2QdbFmSwAWnaIqDivZdOV0ZRwEm6jivLKw=
 github.com/tetafro/godot v1.4.11/go.mod h1:LR3CJpxDVGlYOWn3ZZg1PgNZdTUvzsZWu8xaEohUpn8=
-github.com/timakin/bodyclose v0.0.0-20221125081123-e39cf3fc478e h1:MV6KaVu/hzByHP0UvJ4HcMGE/8a6A4Rggc/0wx2AvJo=
-github.com/timakin/bodyclose v0.0.0-20221125081123-e39cf3fc478e/go.mod h1:27bSVNWSBOHm+qRp1T9qzaIpsWEP6TbUnei/43HK+PQ=
+github.com/timakin/bodyclose v0.0.0-20210704033933-f49887972144 h1:kl4KhGNsJIbDHS9/4U9yQo1UcPQM0kOMJHn29EoH/Ro=
+github.com/timakin/bodyclose v0.0.0-20210704033933-f49887972144/go.mod h1:Qimiffbc6q9tBWlVV6x0P9sat/ao1xEkREYPPj9hphk=
 github.com/timonwong/loggercheck v0.9.3 h1:ecACo9fNiHxX4/Bc02rW2+kaJIAMAes7qJ7JKxt0EZI=
 github.com/timonwong/loggercheck v0.9.3/go.mod h1:wUqnk9yAOIKtGA39l1KLE9Iz0QiTocu/YZoOf+OzFdw=
 github.com/tj/assert v0.0.0-20171129193455-018094318fb0/go.mod h1:mZ9/Rh9oLWpLLDRpvE+3b7gP/C2YyLFYxNmcLnPTMe0=
@@ -1178,8 +1183,8 @@ github.com/tj/go-elastic v0.0.0-20171221160941-36157cbbebc2/go.mod h1:WjeM0Oo1eN
 github.com/tj/go-kinesis v0.0.0-20171128231115-08b17f58cb1b/go.mod h1:/yhzCV0xPfx6jb1bBgRFjl5lytqVqZXEaeqWP8lTEao=
 github.com/tj/go-spin v1.1.0/go.mod h1:Mg1mzmePZm4dva8Qz60H2lHwmJ2loum4VIrLgVnKwh4=
 github.com/tmc/grpc-websocket-proxy v0.0.0-20190109142713-0ad062ec5ee5/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=
-github.com/tomarrell/wrapcheck/v2 v2.8.0 h1:qDzbir0xmoE+aNxGCPrn+rUSxAX+nG6vREgbbXAR81I=
-github.com/tomarrell/wrapcheck/v2 v2.8.0/go.mod h1:ao7l5p0aOlUNJKI0qVwB4Yjlqutd0IvAB9Rdwyilxvg=
+github.com/tomarrell/wrapcheck/v2 v2.7.0 h1:J/F8DbSKJC83bAvC6FoZaRjZiZ/iKoueSdrEkmGeacA=
+github.com/tomarrell/wrapcheck/v2 v2.7.0/go.mod h1:ao7l5p0aOlUNJKI0qVwB4Yjlqutd0IvAB9Rdwyilxvg=
 github.com/tommy-muehle/go-mnd/v2 v2.5.1 h1:NowYhSdyE/1zwK9QCLeRb6USWdoif80Ie+v+yU8u1Zw=
 github.com/tommy-muehle/go-mnd/v2 v2.5.1/go.mod h1:WsUAkMJMYww6l/ufffCD3m+P7LEvr8TnZn9lwVDlgzw=
 github.com/trivago/tgo v1.0.7 h1:uaWH/XIy9aWYWpjm2CU3RpcqZXmX2ysQ9/Go+d9gyrM=
@@ -1196,8 +1201,8 @@ github.com/ultraware/funlen v0.0.3 h1:5ylVWm8wsNwH5aWo9438pwvsK0QiqVuUrt9bn7S/iL
 github.com/ultraware/funlen v0.0.3/go.mod h1:Dp4UiAus7Wdb9KUZsYWZEWiRzGuM2kXM1lPbfaF6xhA=
 github.com/ultraware/whitespace v0.0.5 h1:hh+/cpIcopyMYbZNVov9iSxvJU3OYQg78Sfaqzi/CzI=
 github.com/ultraware/whitespace v0.0.5/go.mod h1:aVMh/gQve5Maj9hQ/hg+F75lr/X5A89uZnzAmWSineA=
-github.com/urfave/cli/v2 v2.24.3 h1:7Q1w8VN8yE0MJEHP06bv89PjYsN4IHWED2s1v/Zlfm0=
-github.com/urfave/cli/v2 v2.24.3/go.mod h1:GHupkWPMM0M/sj1a2b4wUrWBPzazNrIjouW6fmdJLxc=
+github.com/urfave/cli/v2 v2.3.0 h1:qph92Y649prgesehzOrQjdWyxFOp/QVM+6imKHad91M=
+github.com/urfave/cli/v2 v2.3.0/go.mod h1:LJmUH05zAU44vOAcrfzZQKsZbVcdbOG8rtL3/XcUArI=
 github.com/uudashr/gocognit v1.0.6 h1:2Cgi6MweCsdB6kpcVQp7EW4U23iBFQWfTXiWlyp842Y=
 github.com/uudashr/gocognit v1.0.6/go.mod h1:nAIUuVBnYU7pcninia3BHOvQkpQCeO76Uscky5BOwcY=
 github.com/vmihailenco/msgpack v3.3.3+incompatible/go.mod h1:fy3FlTQTDXWkZ7Bh6AcGMlsjHatGryHQYUTf1ShIgkk=
@@ -1213,8 +1218,6 @@ github.com/xanzy/ssh-agent v0.3.1 h1:AmzO1SSWxw73zxFZPRwaMN1MohDw8UyHnmuxyceTEGo
 github.com/xanzy/ssh-agent v0.3.1/go.mod h1:QIE4lCeL7nkC25x+yA3LBIYfwCc1TFziCtG7cBAac6w=
 github.com/xi2/xz v0.0.0-20171230120015-48954b6210f8 h1:nIPpBwaJSVYIxUFsDv3M8ofmx9yWTog9BfvIu0q41lo=
 github.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2/go.mod h1:UETIi67q53MR2AWcXfiuqkDkRtnGDLqkBTpCHuJHxtU=
-github.com/xrash/smetrics v0.0.0-20201216005158-039620a65673 h1:bAn7/zixMGCfxrRTfdpNzjtPYqr8smhKouy9mxVdGPU=
-github.com/xrash/smetrics v0.0.0-20201216005158-039620a65673/go.mod h1:N3UwUGtsrSj3ccvlPHLoLsHnpR27oXr4ZE984MbSER8=
 github.com/yagipy/maintidx v1.0.0 h1:h5NvIsCz+nRDapQ0exNv4aJ0yXSI0420omVANTv3GJM=
 github.com/yagipy/maintidx v1.0.0/go.mod h1:0qNf/I/CCZXSMhsRsrEPDZ+DkekpKLXAJfsTACwgXLk=
 github.com/yeya24/promlinter v0.2.0 h1:xFKDQ82orCU5jQujdaD8stOHiv8UN68BSdn2a8u8Y3o=
@@ -1271,10 +1274,12 @@ golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACk
 golang.org/x/crypto v0.0.0-20190325154230-a5d413f7728c/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20190426145343-a29dc8fdc734/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
+golang.org/x/crypto v0.0.0-20190530122614-20be4c3c3ed5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20190605123033-f99c8df09eb5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20190820162420-60c769a6c586/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200302210943-78000ba7a073/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
+golang.org/x/crypto v0.0.0-20200414173820-0848c9571904/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200728195943-123391ffb6de/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20201002170205-7f63de1d35b0/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
@@ -1286,10 +1291,8 @@ golang.org/x/crypto v0.0.0-20210711020723-a769d52b0f97/go.mod h1:GvvjBRRGRdwPK5y
 golang.org/x/crypto v0.0.0-20210817164053-32db794688a5/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
 golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
 golang.org/x/crypto v0.0.0-20211108221036-ceb1ce70b4fa/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
+golang.org/x/crypto v0.1.0 h1:MDRAIl0xIo9Io2xV565hzXHw3zVseKrJKodhohM5CjU=
 golang.org/x/crypto v0.1.0/go.mod h1:RecgLatLF4+eUMCP1PoPZQb+cVrJcOPbHkTkbkB9sbw=
-golang.org/x/crypto v0.3.0/go.mod h1:hebNnKkNXi2UzZN1eVRvBB7co0a+JxK6XbPiWVs/3J4=
-golang.org/x/crypto v0.5.0 h1:U/0M97KRkSFvyD/3FSmdP5W5swImpNgle/EHFhOsQPE=
-golang.org/x/crypto v0.5.0/go.mod h1:NK/OQwhpMQP3MwtdjgLlYHnH9ebylxKWv3e0fK+mkQU=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20190306152737-a1d7652674e8/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20190510132918-efd6b22b2522/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=
@@ -1303,8 +1306,8 @@ golang.org/x/exp v0.0.0-20200224162631-6cc2880d07d6/go.mod h1:3jZMyOhIsHpP37uCMk
 golang.org/x/exp v0.0.0-20220722155223-a9213eeb770e h1:+WEEuIdZHnUeJJmEUjyYC2gfUMj69yZXw17EnHg/otA=
 golang.org/x/exp v0.0.0-20220722155223-a9213eeb770e/go.mod h1:Kr81I6Kryrl9sr8s2FK3vxD90NdsKWRuOIl2O4CvYbA=
 golang.org/x/exp/typeparams v0.0.0-20220428152302-39d4317da171/go.mod h1:AbB0pIl9nAr9wVwH+Z2ZpaocVmF5I4GyWCDIsVjR0bk=
-golang.org/x/exp/typeparams v0.0.0-20230203172020-98cc5a0785f9 h1:6WHiuFL9FNjg8RljAaT7FNUuKDbvMqS1i5cr2OE2sLQ=
-golang.org/x/exp/typeparams v0.0.0-20230203172020-98cc5a0785f9/go.mod h1:AbB0pIl9nAr9wVwH+Z2ZpaocVmF5I4GyWCDIsVjR0bk=
+golang.org/x/exp/typeparams v0.0.0-20220827204233-334a2380cb91 h1:Ic/qN6TEifvObMGQy72k0n1LlJr7DjWWEi+MOsDOiSk=
+golang.org/x/exp/typeparams v0.0.0-20220827204233-334a2380cb91/go.mod h1:AbB0pIl9nAr9wVwH+Z2ZpaocVmF5I4GyWCDIsVjR0bk=
 golang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=
 golang.org/x/image v0.0.0-20190802002840-cff245a6509b/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=
 golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
@@ -1335,10 +1338,8 @@ golang.org/x/mod v0.5.0/go.mod h1:5OXOZSfqPIIbmVBIIKWRFfZjPR0E5r58TLhUjH0a2Ro=
 golang.org/x/mod v0.5.1/go.mod h1:5OXOZSfqPIIbmVBIIKWRFfZjPR0E5r58TLhUjH0a2Ro=
 golang.org/x/mod v0.6.0-dev.0.20220106191415-9b9b3d81d5e3/go.mod h1:3p9vT2HGsQu2K1YbXdKPJLVgG5VJdoTa1poYQBtP1AY=
 golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=
-golang.org/x/mod v0.6.0/go.mod h1:4mET923SAdbXp2ki8ey+zGs1SLqsuM2Y0uvdZR/fUNI=
+golang.org/x/mod v0.7.0 h1:LapD9S96VoQRhi/GrNTqeBJFrUjs5UHCAtTlgwA5oZA=
 golang.org/x/mod v0.7.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
-golang.org/x/mod v0.9.0 h1:KENHtAZL2y3NLMYZeHY9DW8HW8V+kQyJsY/V9JlKvCs=
-golang.org/x/mod v0.9.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
 golang.org/x/net v0.0.0-20180530234432-1e491301e022/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180811021610-c39426892332/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
@@ -1401,12 +1402,8 @@ golang.org/x/net v0.0.0-20220607020251-c690dde0001d/go.mod h1:XRhObCWvk6IyKnWLug
 golang.org/x/net v0.0.0-20220617184016-355a448f1bc9/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
 golang.org/x/net v0.0.0-20220624214902-1bab6f366d9e/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
 golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.1.0/go.mod h1:Cx3nUiGt4eDBEyega/BKRp+/AlGL8hYe7U9odMt2Cco=
-golang.org/x/net v0.2.0/go.mod h1:KqCZLdyyvdV855qA2rE3GC2aiw5xGR5TEjj8smXukLY=
-golang.org/x/net v0.3.0/go.mod h1:MBQ8lrhLObU/6UmLb4fmbmk5OcyYmqtbGd/9yIeKjEE=
+golang.org/x/net v0.5.0 h1:GyT4nK/YDHSqa1c4753ouYCDajOYKTja9Xb/OHtgvSw=
 golang.org/x/net v0.5.0/go.mod h1:DivGGAXEgPSlEBzxGzZI+ZLohi+xUj054jfeKui00ws=
-golang.org/x/net v0.8.0 h1:Zrh2ngAOFYneWTAIAPethzeaQLuHwhuBkuV6ZiRnUaQ=
-golang.org/x/net v0.8.0/go.mod h1:QVkue5JL9kW//ek3r6jTKnTFis1tRmNAW2P1shuFdJc=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
@@ -1536,9 +1533,7 @@ golang.org/x/sys v0.0.0-20220128215802-99c3d69c2c27/go.mod h1:oPkhp1MJrh7nUepCBc
 golang.org/x/sys v0.0.0-20220209214540-3681064d5158/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220227234510-4e6760a101f9/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220328115105-d36c6a25d886/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.0.0-20220330033206-e17cdc41300f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220412211240-33da011f77ad/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.0.0-20220422013727-9388b58f7150/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220502124256-b6088ccd6cba/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220503163025-988cb79eb6c6/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
@@ -1549,23 +1544,15 @@ golang.org/x/sys v0.0.0-20220702020025-31831981b65f/go.mod h1:oPkhp1MJrh7nUepCBc
 golang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.2.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.3.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.4.0 h1:Zr2JFtRQNX3BCZ8YtxRE9hNJYC8J6I1MVbMg6owUp18=
 golang.org/x/sys v0.4.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.6.0 h1:MVltZSvRTcU2ljQOhs94SXPftV6DCNnZViHeQps87pQ=
-golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210220032956-6a3ed077a48d/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210503060354-a79de5458b56/go.mod h1:tfny5GFUkzUvx4ps4ajbZsCe5lw1metzhBm9T3x7oIY=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
 golang.org/x/term v0.0.0-20220526004731-065cf7ba2467/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
-golang.org/x/term v0.1.0/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
-golang.org/x/term v0.2.0/go.mod h1:TVmDHMZPmdnySmBfhjOoOdhjzdE1h4u1VwSiw2l1Nuc=
-golang.org/x/term v0.3.0/go.mod h1:q750SLmJuPmVoN1blW3UFBPREJfb1KmY3vwxfr+nFDA=
+golang.org/x/term v0.4.0 h1:O7UWfv5+A2qiuulQk30kVinPoMtoIPeVaKLEgLpVkvg=
 golang.org/x/term v0.4.0/go.mod h1:9P2UbLfCdcvo3p/nzKvsmas4TnlujnuoV9hGgYzW1lQ=
-golang.org/x/term v0.6.0 h1:clScbb1cHjoCkyRbWwBEUZ5H/tIFu5TAXIqaZD0Gcjw=
-golang.org/x/term v0.6.0/go.mod h1:m6U89DPEgQRMq3DNkDClhWw02AUbt2daBVO4cn4Hv9U=
 golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
@@ -1575,11 +1562,8 @@ golang.org/x/text v0.3.4/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/text v0.4.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=
-golang.org/x/text v0.5.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=
+golang.org/x/text v0.6.0 h1:3XmdazWV+ubf7QgHSTWeykHOci5oeekaGJBLkrkaw4k=
 golang.org/x/text v0.6.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=
-golang.org/x/text v0.8.0 h1:57P1ETyNKtuIjB4SRd15iJxuhj8Gc416Y78H3qgMh68=
-golang.org/x/text v0.8.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=
 golang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
@@ -1597,6 +1581,7 @@ golang.org/x/tools v0.0.0-20190311215038-5c2858a9cfe5/go.mod h1:LCzVGOaR6xXOjkQ3
 golang.org/x/tools v0.0.0-20190312151545-0bb0c0a6e846/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 golang.org/x/tools v0.0.0-20190312170243-e65039ee4138/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 golang.org/x/tools v0.0.0-20190321232350-e250d351ecad/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
+golang.org/x/tools v0.0.0-20190322203728-c1a832b0ad89/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 golang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 golang.org/x/tools v0.0.0-20190422233926-fe54fb35175b/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 golang.org/x/tools v0.0.0-20190425150028-36563e24a262/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
@@ -1608,6 +1593,7 @@ golang.org/x/tools v0.0.0-20190628153133-6cdbf07be9d0/go.mod h1:/rFqwRUd4F7ZHNgw
 golang.org/x/tools v0.0.0-20190816200558-6889da9d5479/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20190910044552-dd2b5c81c578/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20190911174233-4f2ddba30aff/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20190916130336-e45ffcd953cc/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191012152004-8de300cfc20a/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191108193012-7d206e10da11/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191112195655-aa38f8e97acc/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
@@ -1639,21 +1625,26 @@ golang.org/x/tools v0.0.0-20200501065659-ab2804fb9c9d/go.mod h1:EkVYQZoAsY45+roY
 golang.org/x/tools v0.0.0-20200512131952-2bc93b1c0c88/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20200515010526-7d3b6ebf133d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20200618134242-20370b0cb4b2/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
+golang.org/x/tools v0.0.0-20200622203043-20e05c1c8ffa/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20200624225443-88f3c62a19ff/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
+golang.org/x/tools v0.0.0-20200625211823-6506e20df31f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20200713011307-fd294ab11aed/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
 golang.org/x/tools v0.0.0-20200724022722-7017fd6b1305/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
 golang.org/x/tools v0.0.0-20200729194436-6467de6f59a7/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
 golang.org/x/tools v0.0.0-20200804011535-6c149bb5ef0d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
+golang.org/x/tools v0.0.0-20200812195022-5ae4c3c160a0/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
 golang.org/x/tools v0.0.0-20200820010801-b793a1359eac/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
 golang.org/x/tools v0.0.0-20200825202427-b303f430e36d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
 golang.org/x/tools v0.0.0-20200831203904-5a2aa26beb65/go.mod h1:Cj7w3i3Rnn0Xh82ur9kSqwfTHTeVxaDqrfMjpcNT6bE=
 golang.org/x/tools v0.0.0-20200904185747-39188db58858/go.mod h1:Cj7w3i3Rnn0Xh82ur9kSqwfTHTeVxaDqrfMjpcNT6bE=
 golang.org/x/tools v0.0.0-20201001104356-43ebab892c4c/go.mod h1:z6u4i615ZeAfBE4XtMziQW1fSVJXACjjbWkB/mvPzlU=
+golang.org/x/tools v0.0.0-20201002184944-ecd9fd270d5d/go.mod h1:z6u4i615ZeAfBE4XtMziQW1fSVJXACjjbWkB/mvPzlU=
 golang.org/x/tools v0.0.0-20201023174141-c8cfbd0f21e6/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
 golang.org/x/tools v0.0.0-20201028111035-eafbe7b904eb/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
 golang.org/x/tools v0.0.0-20201110124207-079ba7bd75cd/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
 golang.org/x/tools v0.0.0-20201201161351-ac6f37ff4c2a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
 golang.org/x/tools v0.0.0-20201208233053-a543418bbed2/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
+golang.org/x/tools v0.0.0-20201230224404-63754364767c/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
 golang.org/x/tools v0.0.0-20210105154028-b0ab187a4818/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
 golang.org/x/tools v0.0.0-20210108195828-e2f9c7f1fc8e/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
 golang.org/x/tools v0.1.0/go.mod h1:xkSsbof2nBLbhDlRMhhhyNLN/zl3eTqcnHD5viDpcZ0=
@@ -1664,16 +1655,13 @@ golang.org/x/tools v0.1.2/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=
 golang.org/x/tools v0.1.3/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=
 golang.org/x/tools v0.1.4/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=
 golang.org/x/tools v0.1.5/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=
+golang.org/x/tools v0.1.9-0.20211228192929-ee1ca4ffc4da/go.mod h1:nABZi5QlRsZVlzPpHl034qft6wpY4eDcsTt5AaioBiU=
 golang.org/x/tools v0.1.9/go.mod h1:nABZi5QlRsZVlzPpHl034qft6wpY4eDcsTt5AaioBiU=
 golang.org/x/tools v0.1.10/go.mod h1:Uh6Zz+xoGYZom868N8YTex3t7RhtHDBrE8Gzo9bV56E=
 golang.org/x/tools v0.1.11/go.mod h1:SgwaegtQh8clINPpECJMqnxLv9I09HLqnW3RMqW0CA4=
 golang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=
-golang.org/x/tools v0.2.0/go.mod h1:y4OqIKeOV/fWJetJ8bXPU1sEVniLMIyDAZWeHdV+NTA=
-golang.org/x/tools v0.3.0/go.mod h1:/rWhSS2+zyEVwoJf8YAX6L2f0ntZ7Kn/mGgAWcipA5k=
-golang.org/x/tools v0.4.0/go.mod h1:UE5sM2OK9E/d67R0ANs2xJizIymRP5gJU295PvKXxjQ=
+golang.org/x/tools v0.5.0 h1:+bSpV5HIeWkuvgaMfI3UmKRThoTA5ODJTUd8T17NO+4=
 golang.org/x/tools v0.5.0/go.mod h1:N+Kgy78s5I24c24dU8OfWNEotWjutIs8SnJvn5IDq+k=
-golang.org/x/tools v0.7.0 h1:W4OVu8VVOaIO0yzWMNdepAulS7YfoS3Zabrm8DOXXU4=
-golang.org/x/tools v0.7.0/go.mod h1:4pg6aUX35JBAogB10C9AtvVL+qowtN4pT3CGSQex14s=
 golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
@@ -1927,7 +1915,6 @@ gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
 gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.0-20200605160147-a5ece683394c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
-gopkg.in/yaml.v3 v3.0.0/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
 gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gotest.tools/gotestsum v1.9.0 h1:Jbo/0k/sIOXIJu51IZxEAt27n77xspFEfL6SqKUR72A=
@@ -1941,16 +1928,16 @@ honnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWh
 honnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=
 honnef.co/go/tools v0.0.1-2020.1.3/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=
 honnef.co/go/tools v0.0.1-2020.1.4/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=
-honnef.co/go/tools v0.4.2 h1:6qXr+R5w+ktL5UkwEbPp+fEvfyoMPche6GkOpGHZcLc=
-honnef.co/go/tools v0.4.2/go.mod h1:36ZgoUOrqOk1GxwHhyryEkq8FQWkUO2xGuSMhUCcdvA=
+honnef.co/go/tools v0.3.3 h1:oDx7VAwstgpYpb3wv0oxiZlxY+foCpRAwY7Vk6XpAgA=
+honnef.co/go/tools v0.3.3/go.mod h1:jzwdWgg7Jdq75wlfblQxO4neNaFFSvgc1tD5Wv8U0Yw=
 mvdan.cc/gofumpt v0.4.0 h1:JVf4NN1mIpHogBj7ABpgOyZc65/UUOkKQFkoURsz4MM=
 mvdan.cc/gofumpt v0.4.0/go.mod h1:PljLOHDeZqgS8opHRKLzp2It2VBuSdteAgqUfzMTxlQ=
 mvdan.cc/interfacer v0.0.0-20180901003855-c20040233aed h1:WX1yoOaKQfddO/mLzdV4wptyWgoH/6hwLs7QHTixo0I=
 mvdan.cc/interfacer v0.0.0-20180901003855-c20040233aed/go.mod h1:Xkxe497xwlCKkIaQYRfC7CSLworTXY9RMqwhhCm+8Nc=
 mvdan.cc/lint v0.0.0-20170908181259-adc824a0674b h1:DxJ5nJdkhDlLok9K6qO+5290kphDJbHOQO1DFFFTeBo=
 mvdan.cc/lint v0.0.0-20170908181259-adc824a0674b/go.mod h1:2odslEg/xrtNQqCYg2/jCoyKnw3vv5biOc3JnIcYfL4=
-mvdan.cc/unparam v0.0.0-20221223090309-7455f1af531d h1:3rvTIIM22r9pvXk+q3swxUQAQOxksVMGK7sml4nG57w=
-mvdan.cc/unparam v0.0.0-20221223090309-7455f1af531d/go.mod h1:IeHQjmn6TOD+e4Z3RFiZMMsLVL+A96Nvptar8Fj71is=
+mvdan.cc/unparam v0.0.0-20220706161116-678bad134442 h1:seuXWbRB1qPrS3NQnHmFKLJLtskWyueeIzmLXghMGgk=
+mvdan.cc/unparam v0.0.0-20220706161116-678bad134442/go.mod h1:F/Cxw/6mVrNKqrR2YjFf5CaW0Bw4RL8RfbEf4GRggJk=
 nhooyr.io/websocket v1.8.6/go.mod h1:B70DZP8IakI65RVQ51MsWP/8jndNma26DVA/nFSCgW0=
 nhooyr.io/websocket v1.8.7/go.mod h1:B70DZP8IakI65RVQ51MsWP/8jndNma26DVA/nFSCgW0=
 rsc.io/binaryregexp v0.2.0/go.mod h1:qTv7/COck+e2FymRvadv62gMdZztPaShugOCi3I+8D8=
diff --git b/website/docs/d/alert_channel.html.markdown a/website/docs/d/alert_channel.html.markdown
index 0c49eb15..554051b9 100644
--- b/website/docs/d/alert_channel.html.markdown
+++ a/website/docs/d/alert_channel.html.markdown
@@ -10,9 +10,6 @@ description: |-
 
 Use this data source to get information about a specific alert channel in New Relic that already exists.
 
--> **WARNING:** The `newrelic_alert_channel` data source is deprecated and will be removed in the next major release.
-
-
 ## Example Usage
 
 ```hcl
diff --git b/website/docs/d/entity.html.markdown a/website/docs/d/entity.html.markdown
index e5ce7016..14afe635 100644
--- b/website/docs/d/entity.html.markdown
+++ a/website/docs/d/entity.html.markdown
@@ -38,6 +38,7 @@ resource "newrelic_nrql_alert_condition" "foo" {
 
   nrql {
     query             = "SELECT average(duration) FROM Transaction where appName = '${data.newrelic_entity.app.name}'"
+    evaluation_offset = 3
   }
 
   critical {
@@ -75,7 +76,7 @@ The following arguments are supported:
 
 * `name` - (Required) The name of the entity in New Relic One.  The first entity matching this name for the given search parameters will be returned.
 * `ignore_case` - (Optional) Ignore case of the `name` when searching for the entity. Defaults to false.
-* `type` - (Optional) The entity's type. Valid values are APPLICATION, DASHBOARD, HOST, MONITOR, WORKLOAD, AWSLAMBDAFUNCTION, SERVICE_LEVEL, and KEY_TRANSACTION. Note: Other entity types may also be queryable as the list of entity types may fluctuate over time.
+* `type` - (Optional) The entity's type. Valid values are APPLICATION, DASHBOARD, HOST, MONITOR, SERVICE and WORKLOAD.
 * `domain` - (Optional) The entity's domain. Valid values are APM, BROWSER, INFRA, MOBILE, SYNTH, and EXT. If not specified, all domains are searched.
 * `tag` - (Optional) A tag applied to the entity. See [Nested tag blocks](#nested-`tag`-blocks) below for details.
 
@@ -99,15 +100,12 @@ In addition to all arguments above, the following attributes are exported:
 ## Additional Examples
 
 -> If the entities are not found please try again without providing the `types` field.
-
-### Query for an OTEL entity
+### An example of querying OTEL entities
 
 ```hcl
 data "newrelic_entity" "app" {
   name = "my-otel-app"
   domain = "EXT"
-  type = "SERVICE"
-
   tag {
     key = "accountID"
     value = "12345"
@@ -115,11 +113,15 @@ data "newrelic_entity" "app" {
 }
 ```
 
-### Query for an entity by type (AWS Lambda entity in this example)
+### An example of querying AWS lambda entities
 
 ```hcl
 data "newrelic_entity" "app" {
   name = "my_lambda_trace"
-  type = "AWSLAMBDAFUNCTION"
+  domain = "INFRA"
+  tag {
+    key = "accountID"
+    value = "12345"
+  }
 }
-```
+```
\ No newline at end of file
diff --git b/website/docs/d/service_level_alert_helper.html.markdown a/website/docs/d/service_level_alert_helper.html.markdown
deleted file mode 100644
index 8ab9db57..00000000
--- b/website/docs/d/service_level_alert_helper.html.markdown
+++ /dev/null
@@ -1,111 +0,0 @@
----
-layout: "newrelic"
-page_title: "New Relic: newrelic_service_level_alert_helper"
-sidebar_current: "docs-newrelic-datasource-service-level-alert-helper"
-description: |-
-  Helper to set up alerts on Service Levels.
----
-
-# Data Source: newrelic\_service\_level\_alert\_helper
-
-Use this data source to obtain the necessary fields to set up alerts on your service levels. It can be used for a `custom` alert_type in order to set up an alert with custom tolerated budget consumption and custom evaluation period or for recommended ones like `fast_burn`. For more information check [the documentation](https://docs.newrelic.com/docs/service-level-management/alerts-slm/).
-
-## Example Usage
-
-Firstly set up your service level objective, we recommend to use local variables for the `target` and `time_window.rolling.count`, as they are also necessary for the helper.
-
-```hcl
-locals {
-  foo_target = 99.9
-  foo_period = 28
-}
-
-resource "newrelic_service_level" "foo" {
-    guid = "MXxBUE18QVBQTElDQVRJT058MQ"
-    name = "Latency"
-    description = "Proportion of requests that are served faster than a threshold."
-
-    events {
-        account_id = 12345678
-        valid_events {
-            from = "Transaction"
-            where = "appName = 'Example application' AND (transactionType='Web')"
-        }
-        good_events {
-            from = "Transaction"
-            where = "appName = 'Example application' AND (transactionType= 'Web') AND duration < 0.1"
-        }
-    }
-
-    objective {
-        target = local.foo_target
-        time_window {
-            rolling {
-                count = local.foo_period
-                unit = "DAY"
-            }
-        }
-    }
-}
-```
-Then use the helper to obtain the necessary fields to set up an alert on that Service Level.
-
-```hcl
-
-data "newrelic_service_level_alert_helper" "foo_custom" {
-    alert_type = "custom"
-    sli_guid = newrelic_service_level.foo.sli_guid
-    slo_target = local.foo_target
-    slo_period = local.foo_period
-    custom_tolerated_budget_consumption = 5
-    custom_evaluation_period = 90
-}
-
-resource "newrelic_nrql_alert_condition" "your_condition" {
-  account_id = 12345678
-  policy_id = 67890
-  type = "static"
-  name = "Successs (custom)"
-  enabled = true
-  violation_time_limit_seconds = 259200
-
-  nrql {
-    query = data.newrelic_service_level_alert_helper.foo_custom.nrql
-  }
-
-  critical {
-    operator = "above"
-    threshold = data.newrelic_service_level_alert_helper.foo_custom.threshold
-    threshold_duration = data.newrelic_service_level_alert_helper.foo_custom.evaluation_period
-    threshold_occurrences = "at_least_once"
-  }
-  fill_option = "none"
-  aggregation_window = 3600
-  aggregation_method = "event_flow"
-  aggregation_delay = 120
-  slide_by = 60
-}
-```
-
-
-## Argument Reference
-
-The following arguments are supported:
-
-  * `alert_type` - (Required) The type of alert we want to set. Valid values are:
-    * `custom` - Tolerated budget consumption and evaluation period have to be specified.
-    * `fast_burn` - Tolerated budget consumption is 2% and evaluation period is 60min.
-  * `sli_guid` - (Required) The guid of the sli we want to set the alert on.
-  * `slo_target` - (Required) The target of the Service Level Objective, valid values between `0` and `100`.
-  * `slo_period` - (Required) The time window of the Service Level Objective in days. Valid values are `1`, `7` and `28`.
-  * `custom_tolerated_budget_consumption` - (Optional) How much budget you tolerate to consume during the custom evaluation period, valid values between `0` and `100`. Mandatory if `alert_type` is `custom`.
-  * `custom_evaluation_period` - (Optional) Aggregation window taken into consideration in minutes. Mandatory if `alert_type` is `custom`.
-
-## Attributes Reference
-
-In addition to all arguments above, the following attributes are exported:
-
-  * `threshold` - (Computed) The computed threshold given the provided arguments.
-  * `tolerated_budget_consumption` - (Computed) For non `custom` alert_type, this is the recommended for that type of alert. For `custom` alert_type it has the same value as `custom_tolerated_budget_consumption`.
-  * `evaluation_period` - (Computed) For non `custom` alert_type, this is the recommended for that type of alert. For `custom` alert_type it has the same value as `custom_evaluation_period`.
-  * `nrql` - (Computed) The nrql query for the selected type of alert.
diff --git b/website/docs/guides/getting_started.html.markdown a/website/docs/guides/getting_started.html.markdown
index 50f572e3..c044714b 100644
--- b/website/docs/guides/getting_started.html.markdown
+++ a/website/docs/guides/getting_started.html.markdown
@@ -115,6 +115,7 @@ resource "newrelic_nrql_alert_condition" "foo" {
 
   nrql {
     query             = "SELECT average(duration) FROM Transaction where appName = '${data.newrelic_entity.app_name.name}'"
+    evaluation_offset = 3
   }
 
   critical {
diff --git b/website/docs/guides/migration_guide_v3.html.markdown a/website/docs/guides/migration_guide_v3.html.markdown
index 2814cd5e..9b6f97fe 100644
--- b/website/docs/guides/migration_guide_v3.html.markdown
+++ a/website/docs/guides/migration_guide_v3.html.markdown
@@ -14,7 +14,7 @@ Version 3.x of the provider uses a new underlying API for Synthetics. This resul
 
 The v2 `newrelic_synthetics_monitor_resource` has been split into two new resources: `newrelic_synthetics_monitor_resource` and `newrelic_synthetics_script_monitor_resource`. Previously a monitor script had to be defined separately from a Synthetics Monitor using the `newrelic_synthetics_monitor_script_resource`. In v3 a script is attached directly to a scripted monitor. See the below example for how to migrate to version 3:
 
-v2
+v2  
 ```hcl
 resource "newrelic_synthetics_monitor" "monitor" {
   name      = "monitor-name"
@@ -55,7 +55,7 @@ resource "newrelic_synthetics_script_monitor" "monitor" {
 1. Move the value in `text` from `newrelic_synthetics_monitor_script` to `script` in `newrelic_synthetics_script_monitor`
 2. Remove `AWS_` from the location name, e.g. `AWS_US_EAST_1` becomes `US_EAST_1`
 3. Rename `frequency` to `period` and change to one of the valid values - EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY
-4. Run `terraform state rm newrelic_synthetics_monitor.<your_monitor_name>` and then log in to New Relic to find your monitor guid.
+4. Run `terraform state rm newrelic_synthetics_monitor_script.<your_monitor_name>` and then log in to New Relic to find your monitor guid.
 5. Using the guid e.g. `MTk2MQxYjk3YWIzLWZlM05JVE9SfDQxYj...` run `terraform import newrelic_synthetics_script_monitor.<your_monitor_name> guid` to continue managing your existing monitor in Terraform. There won't be any down time, only a brief moment where your monitor is not managed by Terraform.
 
 ### Migrating script Synthetics monitor resources with VSE
diff --git b/website/docs/index.html.markdown a/website/docs/index.html.markdown
index 2e616301..4d856b30 100644
--- b/website/docs/index.html.markdown
+++ a/website/docs/index.html.markdown
@@ -58,8 +58,7 @@ resources compared to which endpoint is in use.
 ### Resources
 
 | Resource                                            | Endpoint                | Authentication        |
-|-----------------------------------------------------|-------------------------|-----------------------|
-| `newrelic_account_management`                       | NerdGraph               | `api_key`             |
+| --------------------------------------------------- | ----------------------- | --------------------- |
 | `newrelic_alert_channel`                            | RESTv2                  | `api_key`             |
 | `newrelic_alert_condition`                          | RESTv2                  | `api_key`             |
 | `newrelic_alert_muting_rule`                        | NerdGraph               | `api_key`             |
@@ -67,60 +66,38 @@ resources compared to which endpoint is in use.
 | `newrelic_alert_policy_channel`                     | RESTv2                  | `api_key`             |
 | `newrelic_api_access_key`                           | NerdGraph               | `api_key`             |
 | `newrelic_application_settings`                     | RESTv2                  | `api_key`             |
-| `newrelic_browser_application`                      | NerdGraph               | `api_key`             |
-| `newrelic_cloud_aws_govcloud_integrations`          | NerdGraph               | `api_key`             |
-| `newrelic_cloud_aws_govcloud_link_account`          | NerdGraph               | `api_key`             |
-| `newrelic_cloud_aws_integrations`                   | NerdGraph               | `api_key`             |
-| `newrelic_cloud_aws_link_account`                   | NerdGraph               | `api_key`             |
-| `newrelic_cloud_azure_integrations`                 | NerdGraph               | `api_key`             |
-| `newrelic_cloud_azure_link_account`                 | NerdGraph               | `api_key`             |
-| `newrelic_cloud_gcp_integrations`                   | NerdGraph               | `api_key`             |
-| `newrelic_cloud_gcp_link_account`                   | NerdGraph               | `api_key`             |
-| `newrelic_data_partition_rule`                      | NerdGraph               | `api_key`             |
 | `newrelic_entity_tags`                              | NerdGraph               | `api_key`             |
 | `newrelic_events_to_metrics_rule`                   | NerdGraph               | `api_key`             |
 | `newrelic_infra_alert_condition`                    | Infrastructure REST API | `api_key`             |
 | `newrelic_insights_event`                           | Insights API            | `insights_insert_key` |
-| `newrelic_log_parsing_rule`                         | NerdGraph               | `api_key`             |
 | `newrelic_notification_channel`                     | NerdGraph               | `api_key`             |
 | `newrelic_notification_destination`                 | NerdGraph               | `api_key`             |
 | `newrelic_nrql_alert_condition`                     | NerdGraph               | `api_key`             |
 | `newrelic_nrql_drop_rule`                           | NerdGraph               | `api_key`             |
-| `newrelic_obfuscation_expression`                   | NerdGraph               | `api_key`             |
-| `newrelic_obfuscation_rule`                         | NerdGraph               | `api_key`             |
 | `newrelic_one_dashboard`                            | NerdGraph               | `api_key`             |
-| `newrelic_one_dashboard_json`                       | NerdGraph               | `api_key`             |
 | `newrelic_one_dashboard_raw`                        | NerdGraph               | `api_key`             |
+| `newrelic_one_dashboard_json`                       | NerdGraph               | `api_key`             |
 | `newrelic_service_level`                            | NerdGraph               | `api_key`             |
 | `newrelic_synthetics_alert_condition`               | RESTv2                  | `api_key`             |
-| `newrelic_synthetics_broken_links_monitor`          | NerdGraph               | `api_key`             |
-| `newrelic_synthetics_cert_check_monitor`            | NerdGraph               | `api_key`             |
-| `newrelic_synthetics_monitor`                       | NerdGraph               | `api_key`             |
+| `newrelic_synthetics_monitor`                       | Synthetics REST API     | `api_key`             |
+| `newrelic_synthetics_monitor_script`                | Synthetics REST API     | `api_key`             |
 | `newrelic_synthetics_multilocation_alert_condition` | RESTv2                  | `api_key`             |
-| `newrelic_synthetics_private_location`              | NerdGraph               | `api_key`             |
-| `newrelic_synthetics_script_monitor`                | NerdGraph               | `api_key`             |
-| `newrelic_synthetics_secure_credential`             | NerdGraph               | `api_key`             |
-| `newrelic_synthetics_step_monitor`                  | NerdGraph               | `api_key`             |
+| `newrelic_synthetics_secure_credential`             | Synthetics REST API     | `api_key`             |
 | `newrelic_workflow`                                 | NerdGraph               | `api_key`             |
 | `newrelic_workload`                                 | NerdGraph               | `api_key`             |
 
 ### Data Sources
 
-| Data Source                             | Endpoint  | Authentication |
-| --------------------------------------- |-----------| -------------- |
-| `newrelic_account`                      | NerdGraph | `api_key`      |
-| `newrelic_alert_channel`                | RESTv2    | `api_key`      |
-| `newrelic_alert_policy`                 | NerdGraph | `api_key`      |
-| `newrelic_application`                  | RESTv2    | `api_key`      |
-| `newrelic_cloud_account`                | NerdGraph | `api_key`      |
-| `newrelic_entity`                       | NerdGraph | `api_key`      |
-| `newrelic_key_transaction`              | RESTv2    | `api_key`      |
-| `newrelic_notification_destination`     | NerdGraph | `api_key`      |
-| `newrelic_obfuscation_expression`       | NerdGraph | `api_key`      |
-| `newrelic_synthetics_private_location`  | NerdGraph | `api_key`      |
-| `newrelic_synthetics_secure_credential` | NerdGraph | `api_key`      |
-| `newrelic_test_grok_pattern`            | NerdGraph | `api_key`      |
-
+| Data Source                             | Endpoint            | Authentication |
+| --------------------------------------- | ------------------- | -------------- |
+| `newrelic_account`                      | NerdGraph           | `api_key`      |
+| `newrelic_alert_channel`                | RESTv2              | `api_key`      |
+| `newrelic_alert_policy`                 | NerdGraph           | `api_key`      |
+| `newrelic_application`                  | RESTv2              | `api_key`      |
+| `newrelic_entity`                       | NerdGraph           | `api_key`      |
+| `newrelic_key_transaction`              | RESTv2              | `api_key`      |
+| `newrelic_synthetics_monitor`           | Synthetics REST API | `api_key`      |
+| `newrelic_synthetics_secure_credential` | Synthetics REST API | `api_key`      |
 
 ## Example Usage
 
@@ -156,6 +133,7 @@ resource "newrelic_nrql_alert_condition" "foo" {
 
   nrql {
     query             = "SELECT average(duration) FROM Transaction where appName = '${data.newrelic_entity.foo.name}'"
+    evaluation_offset = 3
   }
 
   critical {
diff --git b/website/docs/r/account_management.html.markdown a/website/docs/r/account_management.html.markdown
deleted file mode 100644
index 3dfff29b..00000000
--- b/website/docs/r/account_management.html.markdown
+++ /dev/null
@@ -1,41 +0,0 @@
----
-layout: "newrelic"
-page_title: "New Relic: newrelic_account_management"
-sidebar_current: "docs-newrelic-resource-account-management"
-description: |-
-  Create and manage  sub accounts in New Relic.
----
-
-# Resource: newrelic\_account\_management
-
-Use this resource to create and manage New Relic sub accounts.
-
--> **WARNING:** The `newrelic_account_management` resource will only create/update but won't delete a sub account. Please visit our documentation on  [`Account Management`](https://docs.newrelic.com/docs/apis/nerdgraph/examples/manage-accounts-nerdgraph/#delete) for more information .
-
-## Example Usage
-
-##### Create Account
-```hcl
-resource "newrelic_account_management" "foo"{
-	name=  "Test Account Name"
-	region= "us01"
-}
-```
-
-## Argument Reference
-
-The following arguments are supported:
-
-  * `name` - (Required) The name of the Account.
-  * `region` - (Required) The region code of the account.  One of: `us01`, `eu01`.
-
-
-
-## Import
-
-Accounts can be imported using the `id`, e.g.
-
-```bash
-$ terraform import newrelic_account_management.foo <id>
-```
-
diff --git b/website/docs/r/alert_channel.html.markdown a/website/docs/r/alert_channel.html.markdown
index a99ddef0..21b2253f 100644
--- b/website/docs/r/alert_channel.html.markdown
+++ a/website/docs/r/alert_channel.html.markdown
@@ -10,11 +10,11 @@ description: |-
 
 Use this resource to create and manage New Relic alert channels.
 
--> **WARNING:** The `newrelic_alert_channel` resource is deprecated and will be removed in the next major release. For managing channel resources in Workflows, use [`newrelic_notification_channel`](https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/notification_channel).
+~> **NOTE:** This is a legacy resource. For managing channel resources in Workflows, use [`newrelic_notification_channel`](https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/notification_channel).
 
 ## Example Usage
 
-##### Email
+### Email
 ```hcl
 resource "newrelic_alert_channel" "foo" {
   name = "foo"
@@ -26,7 +26,6 @@ resource "newrelic_alert_channel" "foo" {
   }
 }
 ```
-See additional [examples](#additional-examples).
 
 ## Argument Reference
 
@@ -60,7 +59,7 @@ Each alert channel type supports a specific set of arguments for the `config` bl
     * `key` - (Required) The key for integrating with VictorOps.
     * `route_key` - (Required) The route key for integrating with VictorOps.
   * `slack`
-    * `url` - (Required) [Slack Webhook URL](https://api.slack.com/messaging/webhooks#create_a_webhook).
+    * `url` - (Required) [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
     * `channel` - (Optional) The Slack channel to send notifications to.
   * `opsgenie`
     * `api_key` - (Required) The API key for integrating with OpsGenie.
@@ -90,9 +89,7 @@ resource "newrelic_alert_channel" "foo" {
 }
 ```
 
--> **NOTE:** For instructions on setting up Webhooks with Slack, please visit the article linked under the argument `slack` in the aforementioned configuration, or [this article](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-notifications/notification-channels-control-where-send-alerts/#slack) in New Relic's docs for additional details on setting up the `New Relic Alerts` Slack application, and subsequently using the generated Webhook URL.
-
-##### OpsGenie
+### OpsGenie
 ```hcl
 resource "newrelic_alert_channel" "foo" {
   name = "opsgenie-example"
@@ -107,7 +104,7 @@ resource "newrelic_alert_channel" "foo" {
 }
 ```
 
-##### PagerDuty
+### PagerDuty
 ```hcl
 resource "newrelic_alert_channel" "foo" {
   name = "pagerduty-example"
@@ -119,7 +116,7 @@ resource "newrelic_alert_channel" "foo" {
 }
 ```
 
-##### VictorOps
+### VictorOps
 ```hcl
 resource "newrelic_alert_channel" "foo" {
   name = "victorops-example"
@@ -132,7 +129,7 @@ resource "newrelic_alert_channel" "foo" {
 }
 ```
 
-##### Webhook
+### Webhook
 ```hcl
 resource "newrelic_alert_channel" "foo" {
   name = "webhook-example"
@@ -154,7 +151,7 @@ resource "newrelic_alert_channel" "foo" {
 }
 ```
 
-##### Webhook with complex payload
+### Webhook with complex payload
 ```hcl
 resource "newrelic_alert_channel" "foo" {
   name = "webhook-example"
@@ -175,6 +172,52 @@ EOF
 }
 ```
 
+## Argument Reference
+
+The following arguments are supported:
+
+  * `name` - (Required) The name of the channel.
+  * `type` - (Required) The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.
+  * `config` - (Optional) A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See [Nested config blocks](#nested-config-blocks) below for details.
+
+### Nested `config` blocks
+
+Each alert channel type supports a specific set of arguments for the `config` block:
+
+  * `email`
+    * `recipients` - (Required) Comma delimited list of email addresses.
+    * `include_json_attachment` - (Optional) `true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
+  * `webhook`
+    * `base_url` - (Required) The base URL of the webhook destination.
+    * `auth_password` - (Optional) Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
+    * `auth_type` - (Optional) Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
+    * `auth_username` - (Optional) Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
+    * `headers` - (Optional) A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
+    * `headers_string` - (Optional) Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
+    * `payload` - (Optional) A map of key/value pairs that represents the webhook payload.  Must provide `payload_type` if setting this argument.
+    * `payload_string` - (Optional) Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
+    * `payload_type` - (Optional) Can either be `application/json` or `application/x-www-form-urlencoded`. The `payload_type` argument is _required_ if `payload` is set.
+  * `pagerduty`
+    * `service_key` - (Required) Specifies the service key for integrating with Pagerduty.
+  * `victorops`
+    * `key` - (Required) The key for integrating with VictorOps.
+    * `route_key` - (Required) The route key for integrating with VictorOps.
+  * `slack`
+    * `url` - (Required) [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
+    * `channel` - (Optional) The Slack channel to send notifications to.
+  * `opsgenie`
+    * `api_key` - (Required) The API key for integrating with OpsGenie.
+    * `region` - (Required) The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
+    * `teams` - (Optional) A set of teams for targeting notifications. Multiple values are comma separated.
+    * `tags` - (Optional) A set of tags for targeting notifications. Multiple values are comma separated.
+    * `recipients` - (Optional) A set of recipients for targeting notifications.  Multiple values are comma separated.
+
+## Attributes Reference
+
+In addition to all arguments above, the following attributes are exported:
+
+  * `id` - The ID of the channel.
+
 ## Import
 
 Alert channels can be imported using the `id`, e.g.
diff --git b/website/docs/r/alert_condition.html.markdown a/website/docs/r/alert_condition.html.markdown
index 623455ac..d7403511 100644
--- b/website/docs/r/alert_condition.html.markdown
+++ a/website/docs/r/alert_condition.html.markdown
@@ -10,7 +10,7 @@ description: |-
 
 Use this resource to create and manage alert conditions for APM, Browser, and Mobile in New Relic.
 
--> **NOTE:** This is a legacy resource. The [newrelic_nrql_alert_condition](nrql_alert_condition.html) resource is preferred for configuring alerts conditions. In most cases feature parity can be achieved with a NRQL query. This condition type may be deprecated in the future.
+-> **WARNING:** The  newrelic_alert_condition resource will be deprecated in the near future and will no longer receive product updates. Please use the [newrelic_nrql_alert_condition](nrql_alert_condition.html) resource to avoid being impacted by these changes.
 
 ## Example Usage
 
@@ -126,7 +126,6 @@ The `term` mapping supports the following arguments:
 In addition to all arguments above, the following attributes are exported:
 
   * `id` - The ID of the alert condition.
-  * `entity_guid` - The unique entity identifier of the condition in New Relic.
 
 ## Import
 
@@ -135,50 +134,3 @@ Alert conditions can be imported using notation `alert_policy_id:alert_condition
 ```
 $ terraform import newrelic_alert_condition.main 123456:6789012345
 ```
-
-## Tags
-
-Manage alert condition tags with `newrelic_entity_tags`. For up-to-date documentation about the tagging resource, please check [newrelic_entity_tags](entity_tags.html#example-usage)
-
-```hcl
-data "newrelic_entity" "foo" {
-  name = "foo entitiy"
-}
-
-resource "newrelic_alert_policy" "foo" {
-  name = "foo policy"
-}
-
-resource "newrelic_alert_condition" "foo" {
-  policy_id = newrelic_alert_policy.foo.id
-
-  name            = "foo condition"
-  type            = "apm_app_metric"
-  entities        = [data.newrelic_entity.foo.application_id]
-  metric          = "apdex"
-  runbook_url     = "https://www.example.com"
-  condition_scope = "application"
-
-  term {
-    duration      = 5
-    operator      = "below"
-    priority      = "critical"
-    threshold     = "0.75"
-    time_function = "all"
-  }
-}
-
-resource "newrelic_entity_tags" "my_condition_entity_tags" {
-  guid = newrelic_alert_condition.foo.entity_guid
-
-  tag {
-    key = "my-key"
-    values = ["my-value", "my-other-value"]
-  }
-
-  tag {
-    key = "my-key-2"
-    values = ["my-value-2"]
-  }
-}
-```
diff --git b/website/docs/r/alert_policy.html.markdown a/website/docs/r/alert_policy.html.markdown
index ce35f5da..48c4f0b2 100644
--- b/website/docs/r/alert_policy.html.markdown
+++ a/website/docs/r/alert_policy.html.markdown
@@ -51,7 +51,6 @@ resource "newrelic_alert_policy" "policy_with_channels" {
   name                = "example-with-channels"
   incident_preference = "PER_CONDITION"
 
-  # NOTE: The `channel_ids` argument has been deprecated. Avoid usage.
   # Add the provisioned channels to the policy.
   channel_ids = [
     newrelic_alert_channel.slack_channel.id,
@@ -77,7 +76,6 @@ resource "newrelic_alert_policy" "policy_with_channels" {
   name                = "example-with-channels"
   incident_preference = "PER_CONDITION"
 
-  # NOTE: The `channel_ids` argument has been deprecated. Avoid usage.
   # Add the referenced channels to the policy.
   channel_ids = [
     data.newrelic_alert_channel.slack_channel.id,
diff --git b/website/docs/r/alert_policy_channel.html.markdown a/website/docs/r/alert_policy_channel.html.markdown
index 946f0d02..c20c11a6 100644
--- b/website/docs/r/alert_policy_channel.html.markdown
+++ a/website/docs/r/alert_policy_channel.html.markdown
@@ -10,7 +10,7 @@ description: |-
 
 Use this resource to map alert policies to alert channels in New Relic.
 
--> **WARNING:** The `newrelic_alert_policy_channel` resource is deprecated and will be removed in the next major release. For managing channel resources in Workflows, use [`newrelic_notification_channel`](https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/notification_channel).
+~> **NOTE:** This is a legacy resource. For managing channel resources in Workflows, use [`newrelic_notification_channel`](https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/notification_channel).
 
 ## Example Usage
 
@@ -73,3 +73,4 @@ $ terraform import newrelic_alert_policy_channel.foo 123456:3462754:2938324
 ```
 
 When importing `newrelic_alert_policy_channel` resource, the attribute `channel_ids`\* will be set in your Terraform state. You can import multiple channels as long as those channel IDs are included as part of the import ID hash.
+
diff --git b/website/docs/r/api_access_key.html.markdown a/website/docs/r/api_access_key.html.markdown
index 1676d426..21c67ca3 100644
--- b/website/docs/r/api_access_key.html.markdown
+++ a/website/docs/r/api_access_key.html.markdown
@@ -33,10 +33,6 @@ resource "newrelic_api_access_key" "foobar" {
 }
 ```
 
-
--> **WARNING:** Creating 'Ingest - License' and 'Ingest - Browser' keys using this resource is restricted to 'core' or 'full platform' New Relic user accounts. If you've signed up as a 'basic' user with New Relic, or have been added as a 'basic' user to your organization on New Relic, you would not be able to use your account to create 'Ingest' keys. If you see the message `"You do not have permission to create this key"` in the response of the API called by this resource, it could be owing to the aforementioned. For more insights into user account types on New Relic and associated privileges, please check out this [page](https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/user-type/#api-access).
-
-
 ## Argument Reference
 
 The following arguments are supported:
diff --git b/website/docs/r/browser_application.html.markdown a/website/docs/r/browser_application.html.markdown
deleted file mode 100644
index 3d8ce80f..00000000
--- b/website/docs/r/browser_application.html.markdown
+++ /dev/null
@@ -1,48 +0,0 @@
----
-layout: "newrelic"
-page_title: "New Relic: newrelic_browser_application"
-sidebar_current: "docs-newrelic-browser-application"
-description: |-
-Create, update, and delete a standalone New Relic browser application.
----
-
-# Resource: newrelic\_browser\_application
-
-Use this resource to create, update, and delete a standalone New Relic browser application.
-
-## Example Usage
-
-Basic usage to create a standalone browser application.
-```hcl
-resource "newrelic_browser_application" "foo" {
-  name = "example-browser-app"
-  cookies_enabled = true
-  distributed_tracing_enabled = true
-  loader_type = "SPA"
-}
-```
-
-## Argument Reference
-
-The following arguments are supported:
-
-* `name` - (Required) The name of the browser application.
-* `cookies_enabled` - (Optional) Configure cookies. The default is enabled: true.
-* `distributed_tracing_enabled` - (Optional) Configure distributed tracing in browser apps. The default is enabled: true.
-* `loader_type` - (Optional) Determines which browser loader is configured. Valid values are `SPA`, `PRO`, and `LITE`. The default is `SPA`. See the [browser agent loader documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for a for information on the valid loader types.
-* `account_id` - (Optional) The New Relic account ID of the account you wish to create the browser application. Defaults to the account ID set in your environment variable `NEW_RELIC_ACCOUNT_ID`.
-
-
-## Attributes Reference
-
-In addition to all arguments above, the following attributes are exported:
-
-* `id` - The GUID of the browser application.
-
-## Import
-
-Browser applications can be imported using the GUID of the browser application.
-
-```bash
-$ terraform import newrelic_browser_application.foo <GUID>
-```
diff --git b/website/docs/r/cloud_aws_govcloud_integrations.html.markdown a/website/docs/r/cloud_aws_govcloud_integrations.html.markdown
index 3d0881cf..e0babb47 100644
--- b/website/docs/r/cloud_aws_govcloud_integrations.html.markdown
+++ a/website/docs/r/cloud_aws_govcloud_integrations.html.markdown
@@ -30,7 +30,7 @@ resource "newrelic_cloud_awsGovcloud_link_account" "account" {
   secret_access_key = "%[3]s"
 }
 resource "newrelic_cloud_aws_govcloud_integrations" "foo" {
-  account_id=3806526
+  account_id=2520528
   linked_account_id=newrelic_cloud_awsGovcloud_link_account.account.id
   alb{
     metrics_polling_interval=1000
diff --git b/website/docs/r/data_partition_rule.html.markdown a/website/docs/r/data_partition_rule.html.markdown
deleted file mode 100644
index 5a4cfe29..00000000
--- b/website/docs/r/data_partition_rule.html.markdown
+++ /dev/null
@@ -1,54 +0,0 @@
----
-layout: "newrelic"
-page_title: "New Relic: newrelic_data_partition_rule"
-sidebar_current: "docs-newrelic-resource-data-partition-rule"
-description: |-
-Create and manage Data partition rule.
----
-
-# Resource: newrelic\_data\_partition\_rule
-
-Use this resource to create, update and delete New Relic Data partition rule.
-
-
-## Example Usage
-
-```hcl
-resource "newrelic_data_partition_rule" "foo"{
-  description = "description"
-  enabled = true
-  nrql = "logtype='node'"
-  retention_policy = "STANDARD"
-  target_data_partition = "Log_name"
-}
-```
-
-## Argument Reference
-
-The following arguments are supported:
-
-* `account_id` - (Optional) The account id associated with the data partition rule.
-* `description` - (Optional) The description of the data partition rule.
-* `enabled` - (Required) Whether or not this data partition rule is enabled.
-* `nrql` - (Required) The NRQL to match events for this data partition rule. Logs matching this criteria will be routed to the specified data partition.
-* `retention_policy` - (Required) The retention policy of the data partition data. Valid values are `SECONDARY` and `STANDARD`.
-* `target_data_partition` - (Required) The name of the data partition where logs will be allocated once the rule is enabled.
-
-## Attributes Reference
-
-In addition to all arguments above, the following attributes are exported:
-
-* `id` - The id of the data partition rule.
-* `deleted` - Whether or not this data partition rule is deleted. Deleting a data partition rule does not delete the already persisted data. This data will be retained for a given period of time specified in the retention policy field.
-
-## Import
-
-New Relic data partition rule can be imported using the rule ID, e.g.
-
-```bash
-$ terraform import newrelic_data_partition_rule.foo <id>
-```
-
-## Additional Information
-
-More details about the data partition can be found [here](https://docs.newrelic.com/docs/logs/ui-data/data-partitions/)
\ No newline at end of file
diff --git b/website/docs/r/infra_alert_condition.html.markdown a/website/docs/r/infra_alert_condition.html.markdown
index 9bb2a03c..69d47487 100644
--- b/website/docs/r/infra_alert_condition.html.markdown
+++ a/website/docs/r/infra_alert_condition.html.markdown
@@ -10,7 +10,7 @@ description: |-
 
 Use this resource to create and manage Infrastructure alert conditions in New Relic.
 
--> **NOTE:** This is a legacy resource. The [newrelic_nrql_alert_condition](nrql_alert_condition.html) resource is preferred for configuring alerts conditions. In most cases feature parity can be achieved with a NRQL query. This condition type may be deprecated in the future.
+-> **NOTE:** The [newrelic_nrql_alert_condition](nrql_alert_condition.html) resource is preferred for configuring alerts conditions. In most cases feature parity can be achieved with a NRQL query. Other condition types may be deprecated in the future and receive fewer product updates.
 
 ## Example Usage
 
@@ -110,7 +110,7 @@ The following arguments are supported:
   * `integration_provider` - (Optional) For alerts on integrations, use this instead of `event`.  Supported by the `infra_metric` condition type.
   * `description` - (Optional) The description of the Infrastructure alert condition.
   * `runbook_url` - (Optional) Runbook URL to display in notifications.
-  * `violation_close_timer` - (Optional) Determines how much time will pass (in hours) before an incident is automatically closed. Valid values are `1 2 4 8 12 24 48 72`. Defaults to 24. If `0` is provided, default of `24` is used and will have configuration drift during the apply phase until a valid value is provided.
+  * `violation_close_timer` - (Optional) Determines how much time will pass (in hours) before an incident is automatically closed. Valid values are `1 2 4 8 12 24 48 72`. Defaults to 24. If `0` is provided, default of `24` is used and will have configuration drift during the apply phase until a valid value is provided. 
 
 ```
 Warning: This resource will use the account ID linked to your API key. At the moment it is not possible to dynamically set the account ID.
@@ -123,7 +123,6 @@ In addition to all arguments above, the following attributes are exported:
   * `id` - The ID of the Infrastructure alert condition.
   * `created_at` - The timestamp the alert condition was created.
   * `updated_at` - The timestamp the alert condition was last updated.
-  * `entity_guid` - The unique entity identifier of the condition in New Relic.
 
 ## Thresholds
 
@@ -141,52 +140,3 @@ Infrastructure alert conditions can be imported using a composite ID of `<policy
 ```
 $ terraform import newrelic_infra_alert_condition.main 12345:67890
 ```
-
-## Tags
-
-Manage infra alert condition tags with `newrelic_entity_tags`. For up-to-date documentation about the tagging resource, please check [newrelic_entity_tags](entity_tags.html#example-usage)
-
-```hcl
-resource "newrelic_alert_policy" "foo" {
-  name = "foo policy"
-}
-
-resource "newrelic_infra_alert_condition" "foo" {
-  policy_id = newrelic_alert_policy.foo.id
-
-  name        = "foo infra condition"
-  description = "Warning if disk usage goes above 80% and critical alert if goes above 90%"
-  type        = "infra_metric"
-  event       = "StorageSample"
-  select      = "diskUsedPercent"
-  comparison  = "above"
-  where       = "(hostname LIKE '%frontend%')"
-
-  critical {
-    duration      = 25
-    value         = 90
-    time_function = "all"
-  }
-
-  warning {
-    duration      = 10
-    value         = 80
-    time_function = "all"
-  }
-}
-
-resource "newrelic_entity_tags" "my_condition_entity_tags" {
-  guid = newrelic_infra_alert_condition.foo.entity_guid
-
-  tag {
-    key = "my-key"
-    values = ["my-value", "my-other-value"]
-  }
-
-  tag {
-    key = "my-key-2"
-    values = ["my-value-2"]
-  }
-}
-```
-
diff --git b/website/docs/r/one_dashboard.html.markdown a/website/docs/r/one_dashboard.html.markdown
index 8108e653..98d910a0 100644
--- b/website/docs/r/one_dashboard.html.markdown
+++ a/website/docs/r/one_dashboard.html.markdown
@@ -8,6 +8,7 @@ description: |-
 
 # Resource: newrelic\_one\_dashboard
 
+-> **NOTE:** The [newrelic_one_dashboard_json](one_dashboard_json.html) resource is preferred for configuring dashboards in New Relic. This resource does not support the latest dashboard features and will receive less investment compared to [newrelic_one_dashboard_json](one_dashboard_json.html).
 
 ## Example Usage: Create a New Relic One Dashboard
 
@@ -61,19 +62,6 @@ resource "newrelic_one_dashboard" "exampledash" {
 
       # Must be another dashboard GUID
       filter_current_dashboard = true
-      
-      # color customization
-      colors {
-        color = "#722727"
-        series_overrides {
-          color = "#722322"
-          series_name = "Node"
-        }
-        series_overrides {
-          color = "#236f70"
-          series_name = "Java"
-        }
-      }
     }
 
     widget_line {
@@ -85,26 +73,12 @@ resource "newrelic_one_dashboard" "exampledash" {
 
       nrql_query {
         account_id = 12345
-        query      = "FROM Transaction select max(duration) as 'max duration' where httpResponseCode = '504' timeseries since 5 minutes ago"
+        query      = "FROM Transaction SELECT average(duration) FACET appName"
       }
 
       nrql_query {
         query = "FROM Transaction SELECT rate(count(*), 1 minute)"
       }
-      legend_enabled = true
-      ignore_time_range = false
-      y_axis_left_min = 0
-      y_axis_left_max = 1 
-      
-      units {
-        unit = "ms"
-        series_overrides {
-          unit = "ms"
-          series_name = "max duration"
-        }
-      }
-     
-      
     }
 
     widget_markdown {
@@ -116,51 +90,6 @@ resource "newrelic_one_dashboard" "exampledash" {
 
       text = "### Helpful Links\n\n* [New Relic One](https://one.newrelic.com)\n* [Developer Portal](https://developer.newrelic.com)"
     }
-    
-    widget_line {
-      title = "Overall CPU % Statistics"
-      row = 1
-      column = 5
-      height = 3
-      width = 4
-
-      nrql_query {
-        query = <<EOT
-SELECT average(cpuSystemPercent), average(cpuUserPercent), average(cpuIdlePercent), average(cpuIOWaitPercent) FROM SystemSample  SINCE 1 hour ago TIMESERIES 
-EOT
-      }
-      facet_show_other_series = false
-      legend_enabled = true
-      ignore_time_range = false
-      y_axis_left_min = 0
-      y_axis_left_max = 0
-
-      null_values {
-        null_value = "default"
-
-        series_overrides {
-          null_value = "remove"
-          series_name = "Avg Cpu User Percent"
-        }
-
-        series_overrides {
-          null_value = "zero"
-          series_name = "Avg Cpu Idle Percent"
-        }
-
-        series_overrides {
-          null_value = "default"
-          series_name = "Avg Cpu IO Wait Percent"
-        }
-
-        series_overrides {
-          null_value = "preserve"
-          series_name = "Avg Cpu System Percent"
-        }
-      }
-
-    }
-    
   }
 
   variable {
@@ -240,12 +169,6 @@ All nested `widget` blocks support the following common arguments:
   * `width` - (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
   * `height` - (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
   * `ignore_time_range` - (Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.
-  * `facet_show_other_series` - (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`
-  * `y_axis_left_min`, `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.
-  * `legend_enabled` - (Optional) With this turned on, the legend will be displayed. Defaults to `true`.
-  * `null_values` - (Optional) A nested block that describes a Null Values. See [Nested Null Values blocks](#nested-null-values-blocks) below for details.
-  * `units` - (Optional) A nested block that describes units on your Y axis. See [Nested Units blocks](#nested-units-blocks) below for details.
-  * `colors` - (Optional) A nested block that describes colors of your charts per series. See [Nested Colors blocks](#nested-colors-blocks) below for details.
 
 Each widget type supports an additional set of arguments:
 
@@ -321,7 +244,7 @@ widget_line {
 
 The following arguments are supported:
 
-  * `default_values` - (Optional) A list of default values for this variable. To select **all** default values, the appropriate value to be used with this argument would be `["*"]`.
+  * `default_values` - (Optional) A list of default values for this variable.
   * `is_multi_selection` - (Optional) Indicates whether this variable supports multiple selection or not. Only applies to variables of type `nrql` or `enum`.
   * `item` - (Optional) List of possible values for variables of type `enum`. See [Nested item blocks](#nested-item-blocks) below for details.
   * `name` - (Required) The variable identifier.
@@ -337,27 +260,6 @@ The following arguments are supported:
   * `title` - (Optional) A human-friendly display string for this value.
   * `value` - (Required) A possible variable value
 
-### Nested `Null Values` blocks
-
-The following arguments are supported:
-
-* `null_value` -  Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.
-* `series_overrides` - (Optional) A Nested block which will take two string attributes `null_value` and `series_name`. This nested block is used to customize null values of individual.
-
-### Nested `Units` blocks
-
-The following arguments are supported:
-
-* `unit` - (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.
-* `series_overrides` - (Optional) A Nested block which will take two string attributes `unit` and `series_name`. This nested block is used to customize null values of individual.
-
-### Nested `Colors` blocks
-
-The following arguments are supported:
-
-* `color` - (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.
-* `series_overrides` - (Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.
-
 ## Additional Examples
 
 ### Create a two page dashboard
diff --git b/website/docs/r/one_dashboard_json.html.markdown a/website/docs/r/one_dashboard_json.html.markdown
index 15cbb5f4..cbeb0e2a 100644
--- b/website/docs/r/one_dashboard_json.html.markdown
+++ a/website/docs/r/one_dashboard_json.html.markdown
@@ -30,9 +30,9 @@ In addition to all arguments above, the following attributes are exported:
 - `permalink` - The URL for viewing the dashboard.
 - `updated_at` - The date and time when the dashboard was last updated.
 
-## Additional Examples
+## Additional examples
 
-### Template
+##### Template
 
 Below is an example how you can use [templatefile](https://www.terraform.io/language/functions/templatefile) to dynamically generate pages based on a list. We also replace the `account_id` which is usually hardcoded in the json with a variable.
 
@@ -107,63 +107,3 @@ resource "newrelic_one_dashboard_json" "bar" {
   "variables": []
 }
 ```
-### Setting Thresholds
-
-The following example demonstrates setting thresholds on a billboard widget.
-
-`dashboard.json`
-```json
-{
-  "name" : "Sample",
-  "permissions" : "PUBLIC_READ_WRITE",
-  "pages" : [
-    {
-      "name" : "Sample Page",
-      "description" : "A guide to the metrics of daily transactions on the website.",
-      "widgets" : [
-        {
-          "title" : "Transaction Failure Tracker",
-          "layout" : {
-            "column" : 1,
-            "row" : 1,
-            "width" : 3,
-            "height" : 5
-          },
-          "visualization" : {
-            "id" : "viz.billboard"
-          },
-          "rawConfiguration" : {
-            "nrqlQueries" : [
-              {
-                "accountIds" : [
-                  {Your-Account-ID}
-                ],
-                "query" : "SELECT count(*) from Transaction where httpResponseCode!=200 since 1 hour ago"
-              }
-            ],
-            "thresholds" : [
-              {
-                "alertSeverity" : "WARNING",
-                "value" : 15
-              },
-              {
-                "alertSeverity" : "CRITICAL",
-                "value" : 40
-              }
-            ]
-          }
-        }
-      ]
-    }
-  ]
-}
-```
-
-
-## Import
-
-New Relic dashboards can be imported using their GUID, e.g.
-
-```bash
-$ terraform import newrelic_one_dashboard_json.my_dashboard <dashboard GUID>
-```
diff --git b/website/docs/r/service_level.html.markdown a/website/docs/r/service_level.html.markdown
index c663833a..5da6af45 100644
--- b/website/docs/r/service_level.html.markdown
+++ a/website/docs/r/service_level.html.markdown
@@ -73,21 +73,21 @@ All nested `events` blocks support the following common arguments:
     * `where` - (Optional) A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).
     * `select` - (Optional) The NRQL SELECT clause to aggregate events.
       * `attribute` - (Optional) The event attribute to use in the SELECT clause.
-      * `function` - (Required) The function to use in the SELECT clause. Valid values are `COUNT` and `SUM`.
+      * `function` - (Required) The function to use in the SELECT clause. Valid values are `COUNT`and `SUM`.
   * `good_events` - (Optional) The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.
     * `from` - (Required) The event type where NRDB data will be fetched from.
     * `where` - (Optional) A filter that narrows down the NRDB events just to those that are considered good responses (e.g, those that refer to
     a particular entity and were successful).
     * `select` - (Optional) The NRQL SELECT clause to aggregate events.
         * `attribute` - (Optional) The event attribute to use in the SELECT clause.
-        * `function` - (Required) The function to use in the SELECT clause. Valid values are `COUNT` and `SUM`.
+        * `function` - (Required) The function to use in the SELECT clause. Valid values are `COUNT`and `SUM`.
   * `bad_events` - (Optional) The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.
     * `from` - (Required) The event type where NRDB data will be fetched from.
     * `where` - (Optional) A filter that narrows down the NRDB events just to those that are considered bad responses (e.g, those that refer to
     a particular entity and returned an error).
     * `select` - (Optional) The NRQL SELECT clause to aggregate events.
         * `attribute` - (Optional) The event attribute to use in the SELECT clause.
-        * `function` - (Required) The function to use in the SELECT clause. Valid values are `COUNT` and `SUM`.
+        * `function` - (Required) The function to use in the SELECT clause. Valid values are `COUNT`and `SUM`.
 
 ### Objective
 
@@ -151,6 +151,7 @@ resource "newrelic_entity_tags" "my_synthetic_monitor_service_level_tags" {
     }
 }
 ```
+
 For up-to-date documentation about the tagging resource, please check [newrelic_entity_tags](entity_tags.html#example-usage)
 
 ## Import
diff --git b/website/docs/r/synthetics_alert_condition.html.markdown a/website/docs/r/synthetics_alert_condition.html.markdown
index 0023d6ae..953aa1d3 100644
--- b/website/docs/r/synthetics_alert_condition.html.markdown
+++ a/website/docs/r/synthetics_alert_condition.html.markdown
@@ -10,7 +10,7 @@ description: |-
 
 Use this resource to create and manage synthetics alert conditions in New Relic.
 
--> **NOTE:** This is a legacy resource. The [newrelic_nrql_alert_condition](nrql_alert_condition.html) resource is preferred for configuring alerts conditions. In most cases feature parity can be achieved with a NRQL query. This condition type may be deprecated in the future.
+-> **WARNING:** The  newrelic_synthetics_alert_condition resource will be deprecated in the near future and will no longer receive product updates. Please use the [newrelic_nrql_alert_condition](nrql_alert_condition.html) resource to avoid being impacted by these changes.
 
 ## Example Usage
 
@@ -43,7 +43,6 @@ Warning: This resource will use the account ID linked to your API key. At the mo
 In addition to all arguments above, the following attributes are exported:
 
   * `id` - The ID of the Synthetics alert condition.
-  * `entity_guid` - The unique entity identifier of the condition in New Relic.
 
 
 ## Import
@@ -52,61 +51,4 @@ Synthetics alert conditions can be imported using a composite ID of `<policy_id>
 
 ```
 $ terraform import newrelic_synthetics_alert_condition.main 12345:67890
-```
-
-## Tags
-
-Manage synthetics alert condition tags with `newrelic_entity_tags`. For up-to-date documentation about the tagging resource, please check [newrelic_entity_tags](entity_tags.html#example-usage)
-
-```hcl
-resource "newrelic_alert_policy" "foo" {
-  name = "foo policy"
-}
-
-resource "newrelic_synthetics_monitor" "foo" {
-  status           = "ENABLED"
-  name             = "foo monitor"
-  period           = "EVERY_MINUTE"
-  uri              = "https://www.one.newrelic.com"
-  type             = "SIMPLE"
-  locations_public = ["AP_EAST_1"]
-
-  custom_header {
-    name  = "some_name"
-    value = "some_value"
-  }
-
-  treat_redirect_as_failure = true
-  validation_string         = "success"
-  bypass_head_request       = true
-  verify_ssl                = true
-
-  tag {
-    key    = "some_key"
-    values = ["some_value"]
-  }
-}
-
-resource "newrelic_synthetics_alert_condition" "foo" {
-  policy_id = newrelic_alert_policy.foo.id
-
-  name        = "foo synthetics condition"
-  monitor_id  = newrelic_synthetics_monitor.foo.id
-  runbook_url = "https://www.example.com"
-}
-
-resource "newrelic_entity_tags" "my_condition_entity_tags" {
-  guid = newrelic_synthetics_alert_condition.foo.entity_guid
-
-
-  tag {
-    key = "my-key"
-    values = ["my-value", "my-other-value"]
-  }
-
-  tag {
-    key = "my-key-2"
-    values = ["my-value-2"]
-  }
-}
-```
+```
\ No newline at end of file
diff --git b/website/docs/r/synthetics_cert_check_monitor.html.markdown a/website/docs/r/synthetics_cert_check_monitor.html.markdown
index d5c4b518..4c92d74c 100644
--- b/website/docs/r/synthetics_cert_check_monitor.html.markdown
+++ a/website/docs/r/synthetics_cert_check_monitor.html.markdown
@@ -66,7 +66,7 @@ resource "newrelic_synthetics_private_location" "location" {
 
 resource "newrelic_synthetics_cert_check_monitor" "monitor" {
   name              = "cert_check_monitor"
-  domain            = "https://www.one.example.com"
+  uri               = "https://www.one.example.com"
   locations_private = [newrelic_synthetics_private_location.location.id]
   period            = "EVERY_6_HOURS"
   status            = "ENABLED"
diff --git b/website/docs/r/synthetics_multilocation_alert_condition.markdown a/website/docs/r/synthetics_multilocation_alert_condition.markdown
index 27b858c2..a4f53d79 100644
--- b/website/docs/r/synthetics_multilocation_alert_condition.markdown
+++ a/website/docs/r/synthetics_multilocation_alert_condition.markdown
@@ -10,7 +10,7 @@ description: |-
 
 Use this resource to create, update, and delete a New Relic Synthetics Location Alerts.
 
--> **NOTE:** This is a legacy resource. The [newrelic_nrql_alert_condition](nrql_alert_condition.html) resource is preferred for configuring alerts conditions. In most cases feature parity can be achieved with a NRQL query. This condition type may be deprecated in the future.
+-> **NOTE:** The [newrelic_nrql_alert_condition](nrql_alert_condition.html) resource is preferred for configuring alerts conditions. In most cases feature parity can be achieved with a NRQL query. Other condition types may be deprecated in the future and receive fewer product updates.
 
 ## Example Usage
 
@@ -66,12 +66,6 @@ The following arguments are supported:
 Warning: This resource will use the account ID linked to your API key. At the moment it is not possible to dynamically set the account ID.
 ```
 
-## Attributes Reference
-
-In addition to all arguments above, the following attributes are exported:
-
-  * `entity_guid` - The unique entity identifier of the condition in New Relic.
-
 ## Import
 
 New Relic Synthetics MultiLocation Conditions can be imported using a concatenated string of the format
@@ -81,73 +75,3 @@ New Relic Synthetics MultiLocation Conditions can be imported using a concatenat
 $ terraform import newrelic_synthetics_multilocation_alert_condition.example 12345678:1456
 ```
 
-## Tags
-
-Manage synthetics multilocation alert condition tags with `newrelic_entity_tags`. For up-to-date documentation about the tagging resource, please check [newrelic_entity_tags](entity_tags.html#example-usage)
-
-```hcl
-resource "newrelic_alert_policy" "foo" {
-  name = "foo policy"
-}
-
-resource "newrelic_synthetics_monitor" "foo" {
-  status           = "ENABLED"
-  name             = "foo monitor"
-  period           = "EVERY_MINUTE"
-  uri              = "https://www.one.newrelic.com"
-  type             = "SIMPLE"
-  locations_public = ["AP_EAST_1"]
-
-  custom_header {
-    name  = "some_name"
-    value = "some_value"
-  }
-
-  treat_redirect_as_failure = true
-  validation_string         = "success"
-  bypass_head_request       = true
-  verify_ssl                = true
-
-  tag {
-    key    = "some_key"
-    values = ["some_value"]
-  }
-}
-
-resource "newrelic_synthetics_multilocation_alert_condition" "foo" {
-  policy_id = newrelic_alert_policy.foo.id
-
-  name                         = "foo condition"
-  runbook_url                  = "https://example.com"
-  enabled                      = true
-  violation_time_limit_seconds = "3600"
-
-  entities = [
-    newrelic_synthetics_monitor.foo.id
-  ]
-
-  critical {
-    threshold = 2
-  }
-
-  warning {
-    threshold = 1
-  }
-}
-
-
-resource "newrelic_entity_tags" "my_condition_entity_tags" {
-  guid = newrelic_synthetics_multilocation_alert_condition.foo.entity_guid
-
-  tag {
-    key = "my-key"
-    values = ["my-value", "my-other-value"]
-  }
-
-  tag {
-    key = "my-key-2"
-    values = ["my-value-2"]
-  }
-}
-```
-
