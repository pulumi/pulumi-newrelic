{
    "name": "newrelic",
    "description": "A Pulumi package for creating and managing New Relic resources.",
    "keywords": [
        "pulumi",
        "new relic"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`newrelic` Terraform Provider](https://github.com/newrelic/terraform-provider-newrelic).",
    "repository": "https://github.com/pulumi/pulumi-newrelic",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "accountId": {
                "type": "integer",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_ACCOUNT_ID"
                    ]
                }
            },
            "adminApiKey": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_ADMIN_API_KEY"
                    ]
                }
            },
            "apiKey": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_API_KEY"
                    ]
                }
            },
            "apiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "cacertFile": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_API_CACERT"
                    ]
                }
            },
            "infrastructureApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "insecureSkipVerify": {
                "type": "boolean",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_API_SKIP_VERIFY"
                    ]
                }
            },
            "insightsInsertKey": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_INSIGHTS_INSERT_KEY"
                    ]
                }
            },
            "insightsInsertUrl": {
                "type": "string",
                "default": "https://insights-collector.newrelic.com/v1/accounts",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_INSIGHTS_INSERT_URL"
                    ]
                }
            },
            "insightsQueryUrl": {
                "type": "string",
                "default": "https://insights-api.newrelic.com/v1/accounts",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_INSIGHTS_QUERY_URL"
                    ]
                }
            },
            "nerdgraphApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "region": {
                "type": "string",
                "description": "The data center for which your New Relic account is configured. Only one region per provider block is permitted.\n",
                "default": "US",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_REGION"
                    ]
                }
            },
            "syntheticsApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            }
        },
        "defaults": [
            "accountId",
            "region"
        ]
    },
    "types": {
        "newrelic:/AlertChannelConfig:AlertChannelConfig": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The API key for integrating with OpsGenie.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authPassword": {
                    "type": "string",
                    "description": "Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authType": {
                    "type": "string",
                    "description": "Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUsername": {
                    "type": "string",
                    "description": "Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "baseUrl": {
                    "type": "string",
                    "description": "The base URL of the webhook destination.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "channel": {
                    "type": "string",
                    "description": "The Slack channel to send notifications to.\n* `opsgenie`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headersString": {
                    "type": "string",
                    "description": "Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeJsonAttachment": {
                    "type": "string",
                    "description": "`0` or `1`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.\n* `webhook`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "The key for integrating with VictorOps.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "payload": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value pairs that represents the webhook payload.  Must provide `payload_type` if setting this argument.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "payloadString": {
                    "type": "string",
                    "description": "Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "payloadType": {
                    "type": "string",
                    "description": "Can either be `application/json` or `application/x-www-form-urlencoded`. The `payload_type` argument is _required_ if `payload` is set.\n* `pagerduty`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipients": {
                    "type": "string",
                    "description": "A set of recipients for targeting notifications.  Multiple values are comma separated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeKey": {
                    "type": "string",
                    "description": "The route key for integrating with VictorOps.\n* `slack`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceKey": {
                    "type": "string",
                    "description": "Specifies the service key for integrating with Pagerduty.\n* `victorops`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "string",
                    "description": "A set of tags for targeting notifications. Multiple values are comma separated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teams": {
                    "type": "string",
                    "description": "A set of teams for targeting notifications. Multiple values are comma separated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Your organization's Slack URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:/AlertConditionTerm:AlertConditionTerm": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFunction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration",
                "threshold",
                "timeFunction"
            ]
        },
        "newrelic:/DashboardFilter:DashboardFilter": {
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "eventTypes"
            ]
        },
        "newrelic:/DashboardWidget:DashboardWidget": {
            "properties": {
                "column": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compareWiths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:/DashboardWidgetCompareWith:DashboardWidgetCompareWith"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "drilldownDashboardId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "duration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "entityIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "facet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:/DashboardWidgetMetric:DashboardWidgetMetric"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nrql": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orderBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rawMetricName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdRed": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdYellow": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "The title of the dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "visualization": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "column",
                "row",
                "title",
                "visualization"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "rawMetricName",
                        "row",
                        "title",
                        "visualization",
                        "widgetId"
                    ]
                }
            }
        },
        "newrelic:/DashboardWidgetCompareWith:DashboardWidgetCompareWith": {
            "properties": {
                "offsetDuration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "presentation": {
                    "$ref": "#/types/newrelic:/DashboardWidgetCompareWithPresentation:DashboardWidgetCompareWithPresentation",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "offsetDuration",
                "presentation"
            ]
        },
        "newrelic:/DashboardWidgetCompareWithPresentation:DashboardWidgetCompareWithPresentation": {
            "properties": {
                "color": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "color",
                "name"
            ]
        },
        "newrelic:/DashboardWidgetMetric:DashboardWidgetMetric": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scope": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "units": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "newrelic:/EntityTagsTag:EntityTagsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The tag key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tag values.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "newrelic:/InfraAlertConditionCritical:InfraAlertConditionCritical": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFunction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration"
            ]
        },
        "newrelic:/InfraAlertConditionWarning:InfraAlertConditionWarning": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFunction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration"
            ]
        },
        "newrelic:/NrqlAlertConditionCritical:NrqlAlertConditionCritical": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "deprecationMessage": "use `threshold_duration` attribute instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdDuration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdOccurrences": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFunction": {
                    "type": "string",
                    "deprecationMessage": "use `threshold_occurrences` attribute instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "threshold"
            ]
        },
        "newrelic:/NrqlAlertConditionNrql:NrqlAlertConditionNrql": {
            "properties": {
                "evaluationOffset": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sinceValue": {
                    "type": "string",
                    "deprecationMessage": "use `evaluation_offset` attribute instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query"
            ]
        },
        "newrelic:/NrqlAlertConditionTerm:NrqlAlertConditionTerm": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "deprecationMessage": "use `threshold_duration` attribute instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdDuration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdOccurrences": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFunction": {
                    "type": "string",
                    "deprecationMessage": "use `threshold_occurrences` attribute instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "threshold"
            ]
        },
        "newrelic:/NrqlAlertConditionWarning:NrqlAlertConditionWarning": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "deprecationMessage": "use `threshold_duration` attribute instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdDuration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdOccurrences": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFunction": {
                    "type": "string",
                    "deprecationMessage": "use `threshold_occurrences` attribute instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "threshold"
            ]
        },
        "newrelic:/getAlertChannelConfig:getAlertChannelConfig": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUsername": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "baseUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "channel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeJsonAttachment": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "payload": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "payloadType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipients": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teams": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:/getEntityTag:getEntityTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "newrelic:insights/EventEvent:EventEvent": {
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:insights/EventEventAttribute:EventEventAttribute"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timestamp": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attributes",
                "type"
            ]
        },
        "newrelic:insights/EventEventAttribute:EventEventAttribute": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "newrelic:plugins/AlertConditionTerm:AlertConditionTerm": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFunction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration",
                "threshold",
                "timeFunction"
            ]
        },
        "newrelic:plugins/WorkloadEntitySearchQuery:WorkloadEntitySearchQuery": {
            "properties": {
                "query": {
                    "type": "string",
                    "description": "The query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the newrelic package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "accountId": {
                "type": "integer",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_ACCOUNT_ID"
                    ]
                }
            },
            "adminApiKey": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_ADMIN_API_KEY"
                    ]
                }
            },
            "apiKey": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_API_KEY"
                    ]
                }
            },
            "apiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "cacertFile": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_API_CACERT"
                    ]
                }
            },
            "infrastructureApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "insecureSkipVerify": {
                "type": "boolean",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_API_SKIP_VERIFY"
                    ]
                }
            },
            "insightsInsertKey": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_INSIGHTS_INSERT_KEY"
                    ]
                }
            },
            "insightsInsertUrl": {
                "type": "string",
                "default": "https://insights-collector.newrelic.com/v1/accounts",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_INSIGHTS_INSERT_URL"
                    ]
                }
            },
            "insightsQueryUrl": {
                "type": "string",
                "default": "https://insights-api.newrelic.com/v1/accounts",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_INSIGHTS_QUERY_URL"
                    ]
                }
            },
            "nerdgraphApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "region": {
                "type": "string",
                "description": "The data center for which your New Relic account is configured. Only one region per provider block is permitted.\n",
                "default": "US",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_REGION"
                    ]
                }
            },
            "syntheticsApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            }
        }
    },
    "resources": {
        "newrelic:index/alertChannel:AlertChannel": {
            "description": "Use this resource to create and manage New Relic alert policies.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n##### Email\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertChannel(\"foo\", {\n    config: {\n        includeJsonAttachment: \"1\",\n        recipients: \"foo@example.com\",\n    },\n    type: \"email\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.AlertChannel(\"foo\",\n    config={\n        \"includeJsonAttachment\": \"1\",\n        \"recipients\": \"foo@example.com\",\n    },\n    type=\"email\")\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new NewRelic.AlertChannel(\"foo\", new NewRelic.AlertChannelArgs\n        {\n            Config = new NewRelic.Inputs.AlertChannelConfigArgs\n            {\n                IncludeJsonAttachment = \"1\",\n                Recipients = \"foo@example.com\",\n            },\n            Type = \"email\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewAlertChannel(ctx, \"foo\", \u0026newrelic.AlertChannelArgs{\n\t\t\tConfig: \u0026newrelic.AlertChannelConfigArgs{\n\t\t\t\tIncludeJsonAttachment: pulumi.String(\"1\"),\n\t\t\t\tRecipients:            pulumi.String(\"foo@example.com\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"email\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\nSee additional examples.\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "config": {
                    "$ref": "#/types/newrelic:/AlertChannelConfig:AlertChannelConfig",
                    "description": "A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See Nested config blocks below for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the channel.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.\n"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/newrelic:/AlertChannelConfig:AlertChannelConfig",
                    "description": "A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See Nested config blocks below for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the channel.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertChannel resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/newrelic:/AlertChannelConfig:AlertChannelConfig",
                        "description": "A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See Nested config blocks below for details.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the channel.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/alertCondition:AlertCondition": {
            "description": "Use this resource to create and manage alert conditions for APM, Browser, and Mobile in New Relic.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst app = newrelic.getEntity({\n    name: \"my-app\",\n    type: \"APPLICATION\",\n    domain: \"APM\",\n});\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooAlertCondition = new newrelic.AlertCondition(\"fooAlertCondition\", {\n    policyId: fooAlertPolicy.id,\n    type: \"apm_app_metric\",\n    entities: [data.newrelic_application.app.application_id],\n    metric: \"apdex\",\n    runbookUrl: \"https://www.example.com\",\n    conditionScope: \"application\",\n    terms: [{\n        duration: 5,\n        operator: \"below\",\n        priority: \"critical\",\n        threshold: \"0.75\",\n        timeFunction: \"all\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\napp = newrelic.get_entity(name=\"my-app\",\n    type=\"APPLICATION\",\n    domain=\"APM\")\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_alert_condition = newrelic.AlertCondition(\"fooAlertCondition\",\n    policy_id=foo_alert_policy.id,\n    type=\"apm_app_metric\",\n    entities=[data[\"newrelic_application\"][\"app\"][\"application_id\"]],\n    metric=\"apdex\",\n    runbook_url=\"https://www.example.com\",\n    condition_scope=\"application\",\n    terms=[{\n        \"duration\": 5,\n        \"operator\": \"below\",\n        \"priority\": \"critical\",\n        \"threshold\": \"0.75\",\n        \"timeFunction\": \"all\",\n    }])\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var app = Output.Create(NewRelic.GetEntity.InvokeAsync(new NewRelic.GetEntityArgs\n        {\n            Name = \"my-app\",\n            Type = \"APPLICATION\",\n            Domain = \"APM\",\n        }));\n        var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\", new NewRelic.AlertPolicyArgs\n        {\n        });\n        var fooAlertCondition = new NewRelic.AlertCondition(\"fooAlertCondition\", new NewRelic.AlertConditionArgs\n        {\n            PolicyId = fooAlertPolicy.Id,\n            Type = \"apm_app_metric\",\n            Entities = \n            {\n                data.Newrelic_application.App.Application_id,\n            },\n            Metric = \"apdex\",\n            RunbookUrl = \"https://www.example.com\",\n            ConditionScope = \"application\",\n            Terms = \n            {\n                new NewRelic.Inputs.AlertConditionTermArgs\n                {\n                    Duration = 5,\n                    Operator = \"below\",\n                    Priority = \"critical\",\n                    Threshold = 0.75,\n                    TimeFunction = \"all\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"APPLICATION\"\n\t\topt1 := \"APM\"\n\t\t_, err := newrelic.GetEntity(ctx, \u0026newrelic.GetEntityArgs{\n\t\t\tName:   \"my-app\",\n\t\t\tType:   \u0026opt0,\n\t\t\tDomain: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewAlertCondition(ctx, \"fooAlertCondition\", \u0026newrelic.AlertConditionArgs{\n\t\t\tPolicyId: fooAlertPolicy.ID(),\n\t\t\tType:     pulumi.String(\"apm_app_metric\"),\n\t\t\tEntities: pulumi.IntArray{\n\t\t\t\tpulumi.String(data.Newrelic_application.App.Application_id),\n\t\t\t},\n\t\t\tMetric:         pulumi.String(\"apdex\"),\n\t\t\tRunbookUrl:     pulumi.String(\"https://www.example.com\"),\n\t\t\tConditionScope: pulumi.String(\"application\"),\n\t\t\tTerms: newrelic.AlertConditionTermArray{\n\t\t\t\t\u0026newrelic.AlertConditionTermArgs{\n\t\t\t\t\tDuration:     pulumi.Int(5),\n\t\t\t\t\tOperator:     pulumi.String(\"below\"),\n\t\t\t\t\tPriority:     pulumi.String(\"critical\"),\n\t\t\t\t\tThreshold:    pulumi.Float64(0.75),\n\t\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Terms\n\nThe `term` mapping supports the following arguments:\n\n  * `duration` - (Required) In minutes, must be in the range of `5` to `120`, inclusive.\n  * `operator` - (Optional) `above`, `below`, or `equal`.  Defaults to `equal`.\n  * `priority` - (Optional) `critical` or `warning`.  Defaults to `critical`. Terms must include at least one `critical` priority term\n  * `threshold` - (Required) Must be 0 or greater.\n  * `time_function` - (Required) `all` or `any`.\n",
            "properties": {
                "conditionScope": {
                    "type": "string",
                    "description": "`application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the condition is enabled or not. Defaults to true.\n"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The instance IDs associated with this condition.\n"
                },
                "gcMetric": {
                    "type": "string",
                    "description": "A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n* `apm_app_metric`\n* `apdex`\n* `error_percentage`\n* `response_time_background`\n* `response_time_web`\n* `throughput_background`\n* `throughput_web`\n* `user_defined`\n* `apm_kt_metric`\n* `apdex`\n* `error_count`\n* `error_percentage`\n* `response_time`\n* `throughput`\n* `browser_metric`\n* `ajax_response_time`\n* `ajax_throughput`\n* `dom_processing`\n* `end_user_apdex`\n* `network`\n* `page_rendering`\n* `page_view_throughput`\n* `page_views_with_js_errors`\n* `request_queuing`\n* `total_page_load`\n* `user_defined`\n* `web_application`\n* `mobile_metric`\n* `database`\n* `images`\n* `json`\n* `mobile_crash_rate`\n* `network_error_percentage`\n* `network`\n* `status_error_percentage`\n* `user_defined`\n* `view_loading`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition. Must be between 1 and 64 characters, inclusive.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:/AlertConditionTerm:AlertConditionTerm"
                    },
                    "description": "A list of terms for this condition. See Terms below for details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of condition. One of: `apm_app_metric`, `apm_kt_metric`, `browser_metric`, `mobile_metric`\n"
                },
                "userDefinedMetric": {
                    "type": "string",
                    "description": "A custom metric to be evaluated.\n"
                },
                "userDefinedValueFunction": {
                    "type": "string",
                    "description": "One of: `average`, `min`, `max`, `total`, or `sample_size`.\n"
                },
                "violationCloseTimer": {
                    "type": "integer",
                    "description": "Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n"
                }
            },
            "required": [
                "entities",
                "metric",
                "name",
                "policyId",
                "terms",
                "type"
            ],
            "inputProperties": {
                "conditionScope": {
                    "type": "string",
                    "description": "`application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the condition is enabled or not. Defaults to true.\n"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The instance IDs associated with this condition.\n"
                },
                "gcMetric": {
                    "type": "string",
                    "description": "A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n* `apm_app_metric`\n* `apdex`\n* `error_percentage`\n* `response_time_background`\n* `response_time_web`\n* `throughput_background`\n* `throughput_web`\n* `user_defined`\n* `apm_kt_metric`\n* `apdex`\n* `error_count`\n* `error_percentage`\n* `response_time`\n* `throughput`\n* `browser_metric`\n* `ajax_response_time`\n* `ajax_throughput`\n* `dom_processing`\n* `end_user_apdex`\n* `network`\n* `page_rendering`\n* `page_view_throughput`\n* `page_views_with_js_errors`\n* `request_queuing`\n* `total_page_load`\n* `user_defined`\n* `web_application`\n* `mobile_metric`\n* `database`\n* `images`\n* `json`\n* `mobile_crash_rate`\n* `network_error_percentage`\n* `network`\n* `status_error_percentage`\n* `user_defined`\n* `view_loading`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition. Must be between 1 and 64 characters, inclusive.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:/AlertConditionTerm:AlertConditionTerm"
                    },
                    "description": "A list of terms for this condition. See Terms below for details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of condition. One of: `apm_app_metric`, `apm_kt_metric`, `browser_metric`, `mobile_metric`\n"
                },
                "userDefinedMetric": {
                    "type": "string",
                    "description": "A custom metric to be evaluated.\n"
                },
                "userDefinedValueFunction": {
                    "type": "string",
                    "description": "One of: `average`, `min`, `max`, `total`, or `sample_size`.\n"
                },
                "violationCloseTimer": {
                    "type": "integer",
                    "description": "Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n"
                }
            },
            "requiredInputs": [
                "entities",
                "metric",
                "policyId",
                "terms",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertCondition resources.\n",
                "properties": {
                    "conditionScope": {
                        "type": "string",
                        "description": "`application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the condition is enabled or not. Defaults to true.\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The instance IDs associated with this condition.\n"
                    },
                    "gcMetric": {
                        "type": "string",
                        "description": "A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n"
                    },
                    "metric": {
                        "type": "string",
                        "description": "The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n* `apm_app_metric`\n* `apdex`\n* `error_percentage`\n* `response_time_background`\n* `response_time_web`\n* `throughput_background`\n* `throughput_web`\n* `user_defined`\n* `apm_kt_metric`\n* `apdex`\n* `error_count`\n* `error_percentage`\n* `response_time`\n* `throughput`\n* `browser_metric`\n* `ajax_response_time`\n* `ajax_throughput`\n* `dom_processing`\n* `end_user_apdex`\n* `network`\n* `page_rendering`\n* `page_view_throughput`\n* `page_views_with_js_errors`\n* `request_queuing`\n* `total_page_load`\n* `user_defined`\n* `web_application`\n* `mobile_metric`\n* `database`\n* `images`\n* `json`\n* `mobile_crash_rate`\n* `network_error_percentage`\n* `network`\n* `status_error_percentage`\n* `user_defined`\n* `view_loading`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the condition. Must be between 1 and 64 characters, inclusive.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the policy where this condition should be used.\n"
                    },
                    "runbookUrl": {
                        "type": "string",
                        "description": "Runbook URL to display in notifications.\n"
                    },
                    "terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:/AlertConditionTerm:AlertConditionTerm"
                        },
                        "description": "A list of terms for this condition. See Terms below for details.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of condition. One of: `apm_app_metric`, `apm_kt_metric`, `browser_metric`, `mobile_metric`\n"
                    },
                    "userDefinedMetric": {
                        "type": "string",
                        "description": "A custom metric to be evaluated.\n"
                    },
                    "userDefinedValueFunction": {
                        "type": "string",
                        "description": "One of: `average`, `min`, `max`, `total`, or `sample_size`.\n"
                    },
                    "violationCloseTimer": {
                        "type": "integer",
                        "description": "Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/alertPolicy:AlertPolicy": {
            "description": "Use this resource to create and manage New Relic alert policies.\n\n{{% examples %}}\n## Example Usage\n{{% /examples %}}",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.\n"
                },
                "channelIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result in a new alert policy resource being created and the old one being destroyed.\n"
                },
                "incidentPreference": {
                    "type": "string",
                    "description": "The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the policy.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.\n"
                },
                "channelIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result in a new alert policy resource being created and the old one being destroyed.\n"
                },
                "incidentPreference": {
                    "type": "string",
                    "description": "The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the policy.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertPolicy resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on.\n"
                    },
                    "channelIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result in a new alert policy resource being created and the old one being destroyed.\n"
                    },
                    "incidentPreference": {
                        "type": "string",
                        "description": "The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/alertPolicyChannel:AlertPolicyChannel": {
            "description": "Use this resource to map alert policies to alert channels in New Relic.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe example below will apply multiple alert channels to an existing New Relic alert policy.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst examplePolicy = newrelic.getAlertPolicy({\n    name: \"my-alert-policy\",\n});\n// Creates an email alert channel.\nconst emailChannel = new newrelic.AlertChannel(\"emailChannel\", {\n    type: \"email\",\n    config: {\n        recipients: \"foo@example.com\",\n        includeJsonAttachment: \"1\",\n    },\n});\n// Creates a Slack alert channel.\nconst slackChannel = new newrelic.AlertChannel(\"slackChannel\", {\n    type: \"slack\",\n    config: {\n        channel: \"#example-channel\",\n        url: \"http://example-org.slack.com\",\n    },\n});\n// Applies the created channels above to the alert policy\n// referenced at the top of the config.\nconst foo = new newrelic.AlertPolicyChannel(\"foo\", {\n    policyId: newrelic_alert_policy.example_policy.id,\n    channelIds: [\n        emailChannel.id,\n        slackChannel.id,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nexample_policy = newrelic.get_alert_policy(name=\"my-alert-policy\")\n# Creates an email alert channel.\nemail_channel = newrelic.AlertChannel(\"emailChannel\",\n    type=\"email\",\n    config={\n        \"recipients\": \"foo@example.com\",\n        \"includeJsonAttachment\": \"1\",\n    })\n# Creates a Slack alert channel.\nslack_channel = newrelic.AlertChannel(\"slackChannel\",\n    type=\"slack\",\n    config={\n        \"channel\": \"#example-channel\",\n        \"url\": \"http://example-org.slack.com\",\n    })\n# Applies the created channels above to the alert policy\n# referenced at the top of the config.\nfoo = newrelic.AlertPolicyChannel(\"foo\",\n    policy_id=newrelic_alert_policy[\"example_policy\"][\"id\"],\n    channel_ids=[\n        email_channel.id,\n        slack_channel.id,\n    ])\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var examplePolicy = Output.Create(NewRelic.GetAlertPolicy.InvokeAsync(new NewRelic.GetAlertPolicyArgs\n        {\n            Name = \"my-alert-policy\",\n        }));\n        // Creates an email alert channel.\n        var emailChannel = new NewRelic.AlertChannel(\"emailChannel\", new NewRelic.AlertChannelArgs\n        {\n            Type = \"email\",\n            Config = new NewRelic.Inputs.AlertChannelConfigArgs\n            {\n                Recipients = \"foo@example.com\",\n                IncludeJsonAttachment = \"1\",\n            },\n        });\n        // Creates a Slack alert channel.\n        var slackChannel = new NewRelic.AlertChannel(\"slackChannel\", new NewRelic.AlertChannelArgs\n        {\n            Type = \"slack\",\n            Config = new NewRelic.Inputs.AlertChannelConfigArgs\n            {\n                Channel = \"#example-channel\",\n                Url = \"http://example-org.slack.com\",\n            },\n        });\n        // Applies the created channels above to the alert policy\n        // referenced at the top of the config.\n        var foo = new NewRelic.AlertPolicyChannel(\"foo\", new NewRelic.AlertPolicyChannelArgs\n        {\n            PolicyId = newrelic_alert_policy.Example_policy.Id,\n            ChannelIds = \n            {\n                emailChannel.Id,\n                slackChannel.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.LookupAlertPolicy(ctx, \u0026newrelic.LookupAlertPolicyArgs{\n\t\t\tName: \"my-alert-policy\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\temailChannel, err := newrelic.NewAlertChannel(ctx, \"emailChannel\", \u0026newrelic.AlertChannelArgs{\n\t\t\tType: pulumi.String(\"email\"),\n\t\t\tConfig: \u0026newrelic.AlertChannelConfigArgs{\n\t\t\t\tRecipients:            pulumi.String(\"foo@example.com\"),\n\t\t\t\tIncludeJsonAttachment: pulumi.String(\"1\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tslackChannel, err := newrelic.NewAlertChannel(ctx, \"slackChannel\", \u0026newrelic.AlertChannelArgs{\n\t\t\tType: pulumi.String(\"slack\"),\n\t\t\tConfig: \u0026newrelic.AlertChannelConfigArgs{\n\t\t\t\tChannel: pulumi.String(\"#example-channel\"),\n\t\t\t\tUrl:     pulumi.String(\"http://example-org.slack.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewAlertPolicyChannel(ctx, \"foo\", \u0026newrelic.AlertPolicyChannelArgs{\n\t\t\tPolicyId: pulumi.String(newrelic_alert_policy.Example_policy.Id),\n\t\t\tChannelIds: pulumi.IntArray{\n\t\t\t\temailChannel.ID(),\n\t\t\t\tslackChannel.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "channelIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid\ndrift your Terraform state.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy.\n"
                }
            },
            "required": [
                "channelIds",
                "policyId"
            ],
            "inputProperties": {
                "channelIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid\ndrift your Terraform state.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy.\n"
                }
            },
            "requiredInputs": [
                "channelIds",
                "policyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertPolicyChannel resources.\n",
                "properties": {
                    "channelIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid\ndrift your Terraform state.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/dashboard:Dashboard": {
            "description": "Use this resource to create and manage New Relic dashboards.\n\n{{% examples %}}\n## Example Usage\n{{% /examples %}}\n## Attribute Refence\n\nIn addition to all arguments above, the following attributes are exported:\n\n  * `dashboard_url` - The URL for viewing the dashboard.\n\n### Nested `widget` blocks\n\nAll nested `widget` blocks support the following common arguments:\n\n  * `title` - (Required) A title for the widget.\n  * `visualization` - (Required) How the widget visualizes data.  Valid values are `billboard`, `gauge`, `billboard_comparison`, `facet_bar_chart`, `faceted_line_chart`, `facet_pie_chart`, `facet_table`, `faceted_area_chart`, `heatmap`, `attribute_sheet`, `single_event`, `histogram`, `funnel`, `raw_json`, `event_feed`, `event_table`, `uniques_list`, `line_chart`, `comparison_line_chart`, `markdown`, and `metric_line_chart`.\n  * `row` - (Required) Row position of widget from top left, starting at `1`.\n  * `column` - (Required) Column position of widget from top left, starting at `1`.\n  * `width` - (Optional) Width of the widget.  Valid values are `1` to `3` inclusive.  Defaults to `1`.\n  * `height` - (Optional) Height of the widget.  Valid values are `1` to `3` inclusive.  Defaults to `1`.\n  * `notes` - (Optional) Description of the widget.\n\nEach `visualization` type supports an additional set of arguments:\n\n  * `billboard`, `billboard_comparison`:\n    * `nrql` - (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n    * `threshold_red` - (Optional) Threshold above which the displayed value will be styled with a red color.\n    * `threshold_yellow` - (Optional) Threshold above which the displayed value will be styled with a yellow color.\n  * `gauge`:\n    * `nrql` - (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n    * `threshold_red` - (Required) Threshold above which the displayed value will be styled with a red color.\n    * `threshold_yellow` - (Optional) Threshold above which the displayed value will be styled with a yellow color.\n  * `facet_bar_chart`, `facet_pie_chart`, `facet_table`, `faceted_area_chart`, `faceted_line_chart`, or `heatmap`:\n    * `nrql` - (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n    * `drilldown_dashboard_id` - (Optional) The ID of a dashboard to link to from the widget's facets.\n  * `attribute_sheet`, `comparison_line_chart`, `event_feed`, `event_table`, `funnel`, `histogram`, `line_chart`, `raw_json`, `single_event`, or `uniques_list`:\n    * `nrql` - (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n  * `markdown`:\n    * `source` - (Required) The markdown source to be rendered in the widget.\n  * `metric_line_chart`:\n    * `entity_ids` - (Required) A collection of entity ids to display data for.  These are typically application IDs.\n    * `metric` - (Required) A nested block that describes a metric.  Nested `metric` blocks support the following arguments:\n      * `name` - (Required) The metric name to display.\n      * `values` - (Required) The metric values to display.\n    * `duration` - (Required) The duration, in ms, of the time window represented in the chart.\n    * `end_time` - (Optional) The end time of the time window represented in the chart in epoch time.  When not set, the time window will end at the current time.\n    * `facet` - (Optional) Can be set to \"host\" to facet the metric data by host.\n    * `limit` - (Optional) The limit of distinct data series to display.\n  * `application_breakdown`:\n    * `entity_ids` - (Required) A collection of entity IDs to display data. These are typically application IDs.\n\n\n### Nested `filter` block\n\nThe optional filter block supports the following arguments:\n  * `event_types` - (Optional) A list of event types to enable filtering for.\n  * `attributes` - (Optional) A list of attributes belonging to the specified event types to enable filtering for.\n",
            "properties": {
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL for viewing the dashboard.\n"
                },
                "editable": {
                    "type": "string",
                    "description": "Determines who can edit the dashboard in an account. Valid values are `all`,  `editable_by_all`, `editable_by_owner`, or `read_only`.  Defaults to `editable_by_all`.\n"
                },
                "filter": {
                    "$ref": "#/types/newrelic:/DashboardFilter:DashboardFilter",
                    "description": "A nested block that describes a dashboard filter.  Exactly one nested `filter` block is allowed. See Nested filter block below for details.\n"
                },
                "gridColumnCount": {
                    "type": "integer",
                    "description": "The number of columns to use when organizing and displaying widgets. New Relic One supports a 3 column grid and a 12 column grid. New Relic Insights supports a 3 column grid.\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon for the dashboard.  Valid values are `adjust`, `archive`, `bar-chart`, `bell`, `bolt`, `bug`, `bullhorn`, `bullseye`, `clock-o`, `cloud`, `cog`, `comments-o`, `crosshairs`, `dashboard`, `envelope`, `fire`, `flag`, `flask`, `globe`, `heart`, `leaf`, `legal`, `life-ring`, `line-chart`, `magic`, `mobile`, `money`, `none`, `paper-plane`, `pie-chart`, `puzzle-piece`, `road`, `rocket`, `shopping-cart`, `sitemap`, `sliders`, `tablet`, `thumbs-down`, `thumbs-up`, `trophy`, `usd`, `user`, and `users`.  Defaults to `bar-chart`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the dashboard.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Determines who can see the dashboard in an account. Valid values are `all` or `owner`.  Defaults to `all`.\n"
                },
                "widgets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:/DashboardWidget:DashboardWidget"
                    },
                    "description": "A nested block that describes a visualization.  Up to 300 `widget` blocks are allowed in a dashboard definition.  See Nested widget blocks below for details.\n"
                }
            },
            "required": [
                "dashboardUrl",
                "title"
            ],
            "inputProperties": {
                "editable": {
                    "type": "string",
                    "description": "Determines who can edit the dashboard in an account. Valid values are `all`,  `editable_by_all`, `editable_by_owner`, or `read_only`.  Defaults to `editable_by_all`.\n"
                },
                "filter": {
                    "$ref": "#/types/newrelic:/DashboardFilter:DashboardFilter",
                    "description": "A nested block that describes a dashboard filter.  Exactly one nested `filter` block is allowed. See Nested filter block below for details.\n"
                },
                "gridColumnCount": {
                    "type": "integer",
                    "description": "The number of columns to use when organizing and displaying widgets. New Relic One supports a 3 column grid and a 12 column grid. New Relic Insights supports a 3 column grid.\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon for the dashboard.  Valid values are `adjust`, `archive`, `bar-chart`, `bell`, `bolt`, `bug`, `bullhorn`, `bullseye`, `clock-o`, `cloud`, `cog`, `comments-o`, `crosshairs`, `dashboard`, `envelope`, `fire`, `flag`, `flask`, `globe`, `heart`, `leaf`, `legal`, `life-ring`, `line-chart`, `magic`, `mobile`, `money`, `none`, `paper-plane`, `pie-chart`, `puzzle-piece`, `road`, `rocket`, `shopping-cart`, `sitemap`, `sliders`, `tablet`, `thumbs-down`, `thumbs-up`, `trophy`, `usd`, `user`, and `users`.  Defaults to `bar-chart`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the dashboard.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Determines who can see the dashboard in an account. Valid values are `all` or `owner`.  Defaults to `all`.\n"
                },
                "widgets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:/DashboardWidget:DashboardWidget"
                    },
                    "description": "A nested block that describes a visualization.  Up to 300 `widget` blocks are allowed in a dashboard definition.  See Nested widget blocks below for details.\n"
                }
            },
            "requiredInputs": [
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "dashboardUrl": {
                        "type": "string",
                        "description": "The URL for viewing the dashboard.\n"
                    },
                    "editable": {
                        "type": "string",
                        "description": "Determines who can edit the dashboard in an account. Valid values are `all`,  `editable_by_all`, `editable_by_owner`, or `read_only`.  Defaults to `editable_by_all`.\n"
                    },
                    "filter": {
                        "$ref": "#/types/newrelic:/DashboardFilter:DashboardFilter",
                        "description": "A nested block that describes a dashboard filter.  Exactly one nested `filter` block is allowed. See Nested filter block below for details.\n"
                    },
                    "gridColumnCount": {
                        "type": "integer",
                        "description": "The number of columns to use when organizing and displaying widgets. New Relic One supports a 3 column grid and a 12 column grid. New Relic Insights supports a 3 column grid.\n"
                    },
                    "icon": {
                        "type": "string",
                        "description": "The icon for the dashboard.  Valid values are `adjust`, `archive`, `bar-chart`, `bell`, `bolt`, `bug`, `bullhorn`, `bullseye`, `clock-o`, `cloud`, `cog`, `comments-o`, `crosshairs`, `dashboard`, `envelope`, `fire`, `flag`, `flask`, `globe`, `heart`, `leaf`, `legal`, `life-ring`, `line-chart`, `magic`, `mobile`, `money`, `none`, `paper-plane`, `pie-chart`, `puzzle-piece`, `road`, `rocket`, `shopping-cart`, `sitemap`, `sliders`, `tablet`, `thumbs-down`, `thumbs-up`, `trophy`, `usd`, `user`, and `users`.  Defaults to `bar-chart`.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the dashboard.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Determines who can see the dashboard in an account. Valid values are `all` or `owner`.  Defaults to `all`.\n"
                    },
                    "widgets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:/DashboardWidget:DashboardWidget"
                        },
                        "description": "A nested block that describes a visualization.  Up to 300 `widget` blocks are allowed in a dashboard definition.  See Nested widget blocks below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/entityTags:EntityTags": {
            "description": "Use this resource to create, update, and delete tags for a New Relic One entity.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooEntity = newrelic.getEntity({\n    name: \"Example application\",\n    type: \"APPLICATION\",\n    domain: \"APM\",\n});\nconst fooEntityTags = new newrelic.EntityTags(\"fooEntityTags\", {\n    guid: fooEntity.then(fooEntity =\u003e fooEntity.guid),\n    tags: [\n        {\n            key: \"my-key\",\n            values: [\n                \"my-value\",\n                \"my-other-value\",\n            ],\n        },\n        {\n            key: \"my-key-2\",\n            values: [\"my-value-2\"],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_entity = newrelic.get_entity(name=\"Example application\",\n    type=\"APPLICATION\",\n    domain=\"APM\")\nfoo_entity_tags = newrelic.EntityTags(\"fooEntityTags\",\n    guid=foo_entity.guid,\n    tags=[\n        {\n            \"key\": \"my-key\",\n            \"values\": [\n                \"my-value\",\n                \"my-other-value\",\n            ],\n        },\n        {\n            \"key\": \"my-key-2\",\n            \"values\": [\"my-value-2\"],\n        },\n    ])\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooEntity = Output.Create(NewRelic.GetEntity.InvokeAsync(new NewRelic.GetEntityArgs\n        {\n            Name = \"Example application\",\n            Type = \"APPLICATION\",\n            Domain = \"APM\",\n        }));\n        var fooEntityTags = new NewRelic.EntityTags(\"fooEntityTags\", new NewRelic.EntityTagsArgs\n        {\n            Guid = fooEntity.Apply(fooEntity =\u003e fooEntity.Guid),\n            Tags = \n            {\n                new NewRelic.Inputs.EntityTagsTagArgs\n                {\n                    Key = \"my-key\",\n                    Values = \n                    {\n                        \"my-value\",\n                        \"my-other-value\",\n                    },\n                },\n                new NewRelic.Inputs.EntityTagsTagArgs\n                {\n                    Key = \"my-key-2\",\n                    Values = \n                    {\n                        \"my-value-2\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"APPLICATION\"\n\t\topt1 := \"APM\"\n\t\tfooEntity, err := newrelic.GetEntity(ctx, \u0026newrelic.GetEntityArgs{\n\t\t\tName:   \"Example application\",\n\t\t\tType:   \u0026opt0,\n\t\t\tDomain: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewEntityTags(ctx, \"fooEntityTags\", \u0026newrelic.EntityTagsArgs{\n\t\t\tGuid: pulumi.String(fooEntity.Guid),\n\t\t\tTags: newrelic.EntityTagsTagArray{\n\t\t\t\t\u0026newrelic.EntityTagsTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"my-key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"my-value\"),\n\t\t\t\t\t\tpulumi.String(\"my-other-value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.EntityTagsTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"my-key-2\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"my-value-2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "guid": {
                    "type": "string",
                    "description": "The guid of the entity to tag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:/EntityTagsTag:EntityTagsTag"
                    },
                    "description": "A nested block that describes an entity tag. See Nested tag blocks below for details.\n"
                }
            },
            "required": [
                "guid",
                "tags"
            ],
            "inputProperties": {
                "guid": {
                    "type": "string",
                    "description": "The guid of the entity to tag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:/EntityTagsTag:EntityTagsTag"
                    },
                    "description": "A nested block that describes an entity tag. See Nested tag blocks below for details.\n"
                }
            },
            "requiredInputs": [
                "guid",
                "tags"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EntityTags resources.\n",
                "properties": {
                    "guid": {
                        "type": "string",
                        "description": "The guid of the entity to tag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:/EntityTagsTag:EntityTagsTag"
                        },
                        "description": "A nested block that describes an entity tag. See Nested tag blocks below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/eventsToMetricsRule:EventsToMetricsRule": {
            "description": "Use this resource to create, update, and delete New Relic Events to Metrics rules.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.EventsToMetricsRule(\"foo\", {\n    accountId: 12345,\n    description: \"Example description\",\n    nrql: \"SELECT uniqueCount(account_id) AS ``Transaction.account_id`` FROM Transaction FACET appName, name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.EventsToMetricsRule(\"foo\",\n    account_id=12345,\n    description=\"Example description\",\n    nrql=\"SELECT uniqueCount(account_id) AS ``Transaction.account_id`` FROM Transaction FACET appName, name\")\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new NewRelic.EventsToMetricsRule(\"foo\", new NewRelic.EventsToMetricsRuleArgs\n        {\n            AccountId = 12345,\n            Description = \"Example description\",\n            Nrql = \"SELECT uniqueCount(account_id) AS ``Transaction.account_id`` FROM Transaction FACET appName, name\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewEventsToMetricsRule(ctx, \"foo\", \u0026newrelic.EventsToMetricsRuleArgs{\n\t\t\tAccountId:   pulumi.Int(12345),\n\t\t\tDescription: pulumi.String(\"Example description\"),\n\t\t\tNrql:        pulumi.String(\"SELECT uniqueCount(account_id) AS ``Transaction.account_id`` FROM Transaction FACET appName, name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Account with the event and where the metrics will be put.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Provides additional information about the rule.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "True means this rule is enabled. False means the rule is currently not creating metrics.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule. This must be unique within an account.\n"
                },
                "nrql": {
                    "type": "string",
                    "description": "Explains how to create metrics from events.\n"
                },
                "ruleId": {
                    "type": "string",
                    "description": "The id, uniquely identifying the rule.\n"
                }
            },
            "required": [
                "accountId",
                "name",
                "nrql",
                "ruleId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Account with the event and where the metrics will be put.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Provides additional information about the rule.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "True means this rule is enabled. False means the rule is currently not creating metrics.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule. This must be unique within an account.\n"
                },
                "nrql": {
                    "type": "string",
                    "description": "Explains how to create metrics from events.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "nrql"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventsToMetricsRule resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Account with the event and where the metrics will be put.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Provides additional information about the rule.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "True means this rule is enabled. False means the rule is currently not creating metrics.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the rule. This must be unique within an account.\n"
                    },
                    "nrql": {
                        "type": "string",
                        "description": "Explains how to create metrics from events.\n"
                    },
                    "ruleId": {
                        "type": "string",
                        "description": "The id, uniquely identifying the rule.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/infraAlertCondition:InfraAlertCondition": {
            "description": "Use this resource to create and manage Infrastructure alert conditions in New Relic.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertPolicy(\"foo\", {});\nconst highDiskUsage = new newrelic.InfraAlertCondition(\"highDiskUsage\", {\n    policyId: foo.id,\n    type: \"infra_metric\",\n    event: \"StorageSample\",\n    select: \"diskUsedPercent\",\n    comparison: \"above\",\n    where: `(`hostname` LIKE '%frontend%')`,\n    critical: {\n        duration: 25,\n        value: 90,\n        timeFunction: \"all\",\n    },\n    warning: {\n        duration: 10,\n        value: 80,\n        timeFunction: \"all\",\n    },\n});\nconst highDbConnCount = new newrelic.InfraAlertCondition(\"highDbConnCount\", {\n    policyId: foo.id,\n    type: \"infra_metric\",\n    event: \"DatastoreSample\",\n    select: \"provider.databaseConnections.Average\",\n    comparison: \"above\",\n    where: `(`hostname` LIKE '%db%')`,\n    integrationProvider: \"RdsDbInstance\",\n    critical: {\n        duration: 25,\n        value: 90,\n        timeFunction: \"all\",\n    },\n});\nconst processNotRunning = new newrelic.InfraAlertCondition(\"processNotRunning\", {\n    policyId: foo.id,\n    type: \"infra_process_running\",\n    comparison: \"equal\",\n    processWhere: \"`commandName` = '/usr/bin/ruby'\",\n    critical: {\n        duration: 5,\n        value: 0,\n    },\n});\nconst hostNotReporting = new newrelic.InfraAlertCondition(\"hostNotReporting\", {\n    policyId: foo.id,\n    type: \"infra_host_not_reporting\",\n    where: `(`hostname` LIKE '%frontend%')`,\n    critical: {\n        duration: 5,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.AlertPolicy(\"foo\")\nhigh_disk_usage = newrelic.InfraAlertCondition(\"highDiskUsage\",\n    policy_id=foo.id,\n    type=\"infra_metric\",\n    event=\"StorageSample\",\n    select=\"diskUsedPercent\",\n    comparison=\"above\",\n    where=\"(`hostname` LIKE '%frontend%')\",\n    critical={\n        \"duration\": 25,\n        \"value\": 90,\n        \"timeFunction\": \"all\",\n    },\n    warning={\n        \"duration\": 10,\n        \"value\": 80,\n        \"timeFunction\": \"all\",\n    })\nhigh_db_conn_count = newrelic.InfraAlertCondition(\"highDbConnCount\",\n    policy_id=foo.id,\n    type=\"infra_metric\",\n    event=\"DatastoreSample\",\n    select=\"provider.databaseConnections.Average\",\n    comparison=\"above\",\n    where=\"(`hostname` LIKE '%db%')\",\n    integration_provider=\"RdsDbInstance\",\n    critical={\n        \"duration\": 25,\n        \"value\": 90,\n        \"timeFunction\": \"all\",\n    })\nprocess_not_running = newrelic.InfraAlertCondition(\"processNotRunning\",\n    policy_id=foo.id,\n    type=\"infra_process_running\",\n    comparison=\"equal\",\n    process_where=\"`commandName` = '/usr/bin/ruby'\",\n    critical={\n        \"duration\": 5,\n        \"value\": 0,\n    })\nhost_not_reporting = newrelic.InfraAlertCondition(\"hostNotReporting\",\n    policy_id=foo.id,\n    type=\"infra_host_not_reporting\",\n    where=\"(`hostname` LIKE '%frontend%')\",\n    critical={\n        \"duration\": 5,\n    })\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new NewRelic.AlertPolicy(\"foo\", new NewRelic.AlertPolicyArgs\n        {\n        });\n        var highDiskUsage = new NewRelic.InfraAlertCondition(\"highDiskUsage\", new NewRelic.InfraAlertConditionArgs\n        {\n            PolicyId = foo.Id,\n            Type = \"infra_metric\",\n            Event = \"StorageSample\",\n            Select = \"diskUsedPercent\",\n            Comparison = \"above\",\n            Where = \"(`hostname` LIKE '%frontend%')\",\n            Critical = new NewRelic.Inputs.InfraAlertConditionCriticalArgs\n            {\n                Duration = 25,\n                Value = 90,\n                TimeFunction = \"all\",\n            },\n            Warning = new NewRelic.Inputs.InfraAlertConditionWarningArgs\n            {\n                Duration = 10,\n                Value = 80,\n                TimeFunction = \"all\",\n            },\n        });\n        var highDbConnCount = new NewRelic.InfraAlertCondition(\"highDbConnCount\", new NewRelic.InfraAlertConditionArgs\n        {\n            PolicyId = foo.Id,\n            Type = \"infra_metric\",\n            Event = \"DatastoreSample\",\n            Select = \"provider.databaseConnections.Average\",\n            Comparison = \"above\",\n            Where = \"(`hostname` LIKE '%db%')\",\n            IntegrationProvider = \"RdsDbInstance\",\n            Critical = new NewRelic.Inputs.InfraAlertConditionCriticalArgs\n            {\n                Duration = 25,\n                Value = 90,\n                TimeFunction = \"all\",\n            },\n        });\n        var processNotRunning = new NewRelic.InfraAlertCondition(\"processNotRunning\", new NewRelic.InfraAlertConditionArgs\n        {\n            PolicyId = foo.Id,\n            Type = \"infra_process_running\",\n            Comparison = \"equal\",\n            ProcessWhere = \"`commandName` = '/usr/bin/ruby'\",\n            Critical = new NewRelic.Inputs.InfraAlertConditionCriticalArgs\n            {\n                Duration = 5,\n                Value = 0,\n            },\n        });\n        var hostNotReporting = new NewRelic.InfraAlertCondition(\"hostNotReporting\", new NewRelic.InfraAlertConditionArgs\n        {\n            PolicyId = foo.Id,\n            Type = \"infra_host_not_reporting\",\n            Where = \"(`hostname` LIKE '%frontend%')\",\n            Critical = new NewRelic.Inputs.InfraAlertConditionCriticalArgs\n            {\n                Duration = 5,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := newrelic.NewAlertPolicy(ctx, \"foo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewInfraAlertCondition(ctx, \"highDiskUsage\", \u0026newrelic.InfraAlertConditionArgs{\n\t\t\tPolicyId:   foo.ID(),\n\t\t\tType:       pulumi.String(\"infra_metric\"),\n\t\t\tEvent:      pulumi.String(\"StorageSample\"),\n\t\t\tSelect:     pulumi.String(\"diskUsedPercent\"),\n\t\t\tComparison: pulumi.String(\"above\"),\n\t\t\tWhere:      pulumi.String(fmt.Sprintf(\"%v%v%v%v%v\", \"(`hostname` LIKE '\", \"%\", \"frontend\", \"%\", \"')\")),\n\t\t\tCritical: \u0026newrelic.InfraAlertConditionCriticalArgs{\n\t\t\t\tDuration:     pulumi.Int(25),\n\t\t\t\tValue:        pulumi.Float64(90),\n\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t},\n\t\t\tWarning: \u0026newrelic.InfraAlertConditionWarningArgs{\n\t\t\t\tDuration:     pulumi.Int(10),\n\t\t\t\tValue:        pulumi.Float64(80),\n\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewInfraAlertCondition(ctx, \"highDbConnCount\", \u0026newrelic.InfraAlertConditionArgs{\n\t\t\tPolicyId:            foo.ID(),\n\t\t\tType:                pulumi.String(\"infra_metric\"),\n\t\t\tEvent:               pulumi.String(\"DatastoreSample\"),\n\t\t\tSelect:              pulumi.String(\"provider.databaseConnections.Average\"),\n\t\t\tComparison:          pulumi.String(\"above\"),\n\t\t\tWhere:               pulumi.String(fmt.Sprintf(\"%v%v%v%v%v\", \"(`hostname` LIKE '\", \"%\", \"db\", \"%\", \"')\")),\n\t\t\tIntegrationProvider: pulumi.String(\"RdsDbInstance\"),\n\t\t\tCritical: \u0026newrelic.InfraAlertConditionCriticalArgs{\n\t\t\t\tDuration:     pulumi.Int(25),\n\t\t\t\tValue:        pulumi.Float64(90),\n\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewInfraAlertCondition(ctx, \"processNotRunning\", \u0026newrelic.InfraAlertConditionArgs{\n\t\t\tPolicyId:     foo.ID(),\n\t\t\tType:         pulumi.String(\"infra_process_running\"),\n\t\t\tComparison:   pulumi.String(\"equal\"),\n\t\t\tProcessWhere: pulumi.String(\"`commandName` = '/usr/bin/ruby'\"),\n\t\t\tCritical: \u0026newrelic.InfraAlertConditionCriticalArgs{\n\t\t\t\tDuration: pulumi.Int(5),\n\t\t\t\tValue:    pulumi.Float64(0),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewInfraAlertCondition(ctx, \"hostNotReporting\", \u0026newrelic.InfraAlertConditionArgs{\n\t\t\tPolicyId: foo.ID(),\n\t\t\tType:     pulumi.String(\"infra_host_not_reporting\"),\n\t\t\tWhere:    pulumi.String(fmt.Sprintf(\"%v%v%v%v%v\", \"(`hostname` LIKE '\", \"%\", \"frontend\", \"%\", \"')\")),\n\t\t\tCritical: \u0026newrelic.InfraAlertConditionCriticalArgs{\n\t\t\t\tDuration: pulumi.Int(5),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Thresholds\n\nThe `critical` and `warning` threshold mapping supports the following arguments:\n\n  * `duration` - (Required) Identifies the number of minutes the threshold must be passed or met for the alert to trigger. Threshold durations must be between 1 and 60 minutes (inclusive).\n  * `value` - (Optional) Threshold value, computed against the `comparison` operator. Supported by `infra_metric` and `infra_process_running` alert condition types.\n  * `time_function` - (Optional) Indicates if the condition needs to be sustained or to just break the threshold once; `all` or `any`. Supported by the `infra_metric` alert condition type.\n",
            "properties": {
                "comparison": {
                    "type": "string",
                    "description": "The operator used to evaluate the threshold value.  Valid values are `above`, `below`, and `equal`.  Supported by the `infra_metric` and `infra_process_running` condition types.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "The timestamp the alert condition was created.\n"
                },
                "critical": {
                    "$ref": "#/types/newrelic:/InfraAlertConditionCritical:InfraAlertConditionCritical",
                    "description": "Identifies the threshold parameters for opening a critical alert violation. See Thresholds below for details.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the condition is turned on or off.  Valid values are `true` and `false`.  Defaults to `true`.\n"
                },
                "event": {
                    "type": "string",
                    "description": "The metric event; for example, `SystemSample` or `StorageSample`.  Supported by the `infra_metric` condition type.\n"
                },
                "integrationProvider": {
                    "type": "string",
                    "description": "For alerts on integrations, use this instead of `event`.  Supported by the `infra_metric` condition type.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Infrastructure alert condition's name.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the alert policy where this condition should be used.\n"
                },
                "processWhere": {
                    "type": "string",
                    "description": "Any filters applied to processes; for example: `commandName = 'java'`.  Supported by the `infra_process_running` condition type.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "select": {
                    "type": "string",
                    "description": "The attribute name to identify the metric being targeted; for example, `cpuPercent`, `diskFreePercent`, or `memoryResidentSizeBytes`.  The underlying API will automatically populate this value for Infrastructure integrations (for example `diskFreePercent`), so make sure to explicitly include this value to avoid diff issues.  Supported by the `infra_metric` condition type.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Infrastructure alert condition.  Valid values are  `infra_process_running`, `infra_metric`, and `infra_host_not_reporting`.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "The timestamp the alert condition was last updated.\n"
                },
                "violationCloseTimer": {
                    "type": "integer",
                    "description": "Determines how much time will pass before a violation is automatically closed. Setting the time limit to 0 prevents a violation from being force-closed.\n"
                },
                "warning": {
                    "$ref": "#/types/newrelic:/InfraAlertConditionWarning:InfraAlertConditionWarning",
                    "description": "Identifies the threshold parameters for opening a warning alert violation. See Thresholds below for details.\n"
                },
                "where": {
                    "type": "string",
                    "description": "If applicable, this identifies any Infrastructure host filters used; for example: `hostname LIKE '%cassandra%'`.\n"
                }
            },
            "required": [
                "createdAt",
                "event",
                "name",
                "policyId",
                "type",
                "updatedAt"
            ],
            "inputProperties": {
                "comparison": {
                    "type": "string",
                    "description": "The operator used to evaluate the threshold value.  Valid values are `above`, `below`, and `equal`.  Supported by the `infra_metric` and `infra_process_running` condition types.\n"
                },
                "critical": {
                    "$ref": "#/types/newrelic:/InfraAlertConditionCritical:InfraAlertConditionCritical",
                    "description": "Identifies the threshold parameters for opening a critical alert violation. See Thresholds below for details.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the condition is turned on or off.  Valid values are `true` and `false`.  Defaults to `true`.\n"
                },
                "event": {
                    "type": "string",
                    "description": "The metric event; for example, `SystemSample` or `StorageSample`.  Supported by the `infra_metric` condition type.\n"
                },
                "integrationProvider": {
                    "type": "string",
                    "description": "For alerts on integrations, use this instead of `event`.  Supported by the `infra_metric` condition type.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Infrastructure alert condition's name.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the alert policy where this condition should be used.\n"
                },
                "processWhere": {
                    "type": "string",
                    "description": "Any filters applied to processes; for example: `commandName = 'java'`.  Supported by the `infra_process_running` condition type.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "select": {
                    "type": "string",
                    "description": "The attribute name to identify the metric being targeted; for example, `cpuPercent`, `diskFreePercent`, or `memoryResidentSizeBytes`.  The underlying API will automatically populate this value for Infrastructure integrations (for example `diskFreePercent`), so make sure to explicitly include this value to avoid diff issues.  Supported by the `infra_metric` condition type.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Infrastructure alert condition.  Valid values are  `infra_process_running`, `infra_metric`, and `infra_host_not_reporting`.\n"
                },
                "violationCloseTimer": {
                    "type": "integer",
                    "description": "Determines how much time will pass before a violation is automatically closed. Setting the time limit to 0 prevents a violation from being force-closed.\n"
                },
                "warning": {
                    "$ref": "#/types/newrelic:/InfraAlertConditionWarning:InfraAlertConditionWarning",
                    "description": "Identifies the threshold parameters for opening a warning alert violation. See Thresholds below for details.\n"
                },
                "where": {
                    "type": "string",
                    "description": "If applicable, this identifies any Infrastructure host filters used; for example: `hostname LIKE '%cassandra%'`.\n"
                }
            },
            "requiredInputs": [
                "policyId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InfraAlertCondition resources.\n",
                "properties": {
                    "comparison": {
                        "type": "string",
                        "description": "The operator used to evaluate the threshold value.  Valid values are `above`, `below`, and `equal`.  Supported by the `infra_metric` and `infra_process_running` condition types.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "The timestamp the alert condition was created.\n"
                    },
                    "critical": {
                        "$ref": "#/types/newrelic:/InfraAlertConditionCritical:InfraAlertConditionCritical",
                        "description": "Identifies the threshold parameters for opening a critical alert violation. See Thresholds below for details.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the condition is turned on or off.  Valid values are `true` and `false`.  Defaults to `true`.\n"
                    },
                    "event": {
                        "type": "string",
                        "description": "The metric event; for example, `SystemSample` or `StorageSample`.  Supported by the `infra_metric` condition type.\n"
                    },
                    "integrationProvider": {
                        "type": "string",
                        "description": "For alerts on integrations, use this instead of `event`.  Supported by the `infra_metric` condition type.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Infrastructure alert condition's name.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the alert policy where this condition should be used.\n"
                    },
                    "processWhere": {
                        "type": "string",
                        "description": "Any filters applied to processes; for example: `commandName = 'java'`.  Supported by the `infra_process_running` condition type.\n"
                    },
                    "runbookUrl": {
                        "type": "string",
                        "description": "Runbook URL to display in notifications.\n"
                    },
                    "select": {
                        "type": "string",
                        "description": "The attribute name to identify the metric being targeted; for example, `cpuPercent`, `diskFreePercent`, or `memoryResidentSizeBytes`.  The underlying API will automatically populate this value for Infrastructure integrations (for example `diskFreePercent`), so make sure to explicitly include this value to avoid diff issues.  Supported by the `infra_metric` condition type.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of Infrastructure alert condition.  Valid values are  `infra_process_running`, `infra_metric`, and `infra_host_not_reporting`.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "The timestamp the alert condition was last updated.\n"
                    },
                    "violationCloseTimer": {
                        "type": "integer",
                        "description": "Determines how much time will pass before a violation is automatically closed. Setting the time limit to 0 prevents a violation from being force-closed.\n"
                    },
                    "warning": {
                        "$ref": "#/types/newrelic:/InfraAlertConditionWarning:InfraAlertConditionWarning",
                        "description": "Identifies the threshold parameters for opening a warning alert violation. See Thresholds below for details.\n"
                    },
                    "where": {
                        "type": "string",
                        "description": "If applicable, this identifies any Infrastructure host filters used; for example: `hostname LIKE '%cassandra%'`.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/nrqlAlertCondition:NrqlAlertCondition": {
            "description": "Use this resource to create and manage NRQL alert conditions in New Relic.\n\n## NRQL\n\nThe `nrql` block supports the following arguments:\n\n- `query` - (Required) The NRQL query to execute for the condition.\n- `evaluation_offset` - (Optional) Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated in one-minute time windows. The start time depends on this value. It's recommended to set this to 3 minutes. An offset of less than 3 minutes will trigger violations sooner, but you may see more false positives and negatives due to data latency. With `evaluation_offset` set to 3 minutes, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`.\n- `since_value` - (Optional)  **DEPRECATED:** Use `evaluation_offset` instead. The value to be used in the `SINCE \u003cX\u003e minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive).\n\n## Terms\n\n\u003e **NOTE:** The direct use of the `term` has been deprecated, and users should use `critical` and `warning` instead.  What follows now applies to the named priority attributes for `critical` and `warning`, but for those attributes the priority is not allowed.\n\nNRQL alert conditions support up to two terms. At least one `term` must have `priority` set to `critical` and the second optional `term` must have `priority` set to `warning`.\n\nThe `term` block the following arguments:\n\n- `duration` - (Required) In minutes, must be in the range of `1` to `120`, inclusive.\n- `operator` - (Optional) `above`, `below`, or `equal`. Defaults to `equal`. Note that when using a `type` of `outlier`, the only valid option here is `above`.\n- `priority` - (Optional) `critical` or `warning`. Defaults to `critical`.\n- `threshold` - (Required) The value which will trigger a violation. Must be `0` or greater.\n- `threshold_duration` - (Optional) The duration of time, in seconds, that the threshold must violate for in order to create a violation. Value must be a multiple of 60.\n\u003cbr\u003eFor _baseline_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).\n\u003cbr\u003eFor _static_ NRQL alert conditions, the value must be within 120-7200 seconds (inclusive).\n\n- `threshold_occurrences` - (Optional) The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `at_least_once` (case insensitive).\n- `duration` - (Optional) **DEPRECATED:** Use `threshold_duration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).\n- `time_function` - (Optional) **DEPRECATED:** Use `threshold_occurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID for managing your NRQL alert conditions.\n"
                },
                "baselineDirection": {
                    "type": "string",
                    "description": "The baseline direction of a baseline NRQL alert condition. Valid values are: 'LOWER_ONLY', 'UPPER_AND_LOWER',\n'UPPER_ONLY' (case insensitive).\n"
                },
                "critical": {
                    "$ref": "#/types/newrelic:/NrqlAlertConditionCritical:NrqlAlertConditionCritical",
                    "description": "A condition term with priority set to critical.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the NRQL alert condition.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not to enable the alert condition.\n"
                },
                "expectedGroups": {
                    "type": "integer",
                    "description": "Number of expected groups when using outlier detection.\n"
                },
                "ignoreOverlap": {
                    "type": "boolean",
                    "description": "Whether to look for a convergence of groups when using outlier detection.\n",
                    "deprecationMessage": "use `open_violation_on_group_overlap` attribute instead, but use the inverse of your boolean - e.g. if ignore_overlap = false, use open_violation_on_group_overlap = true"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition.\n"
                },
                "nrql": {
                    "$ref": "#/types/newrelic:/NrqlAlertConditionNrql:NrqlAlertConditionNrql",
                    "description": "A NRQL query.\n"
                },
                "openViolationOnGroupOverlap": {
                    "type": "boolean",
                    "description": "Whether overlapping groups should produce a violation.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:/NrqlAlertConditionTerm:NrqlAlertConditionTerm"
                    },
                    "description": "A set of terms for this condition. Max 2 terms allowed - at least one 1 critical term and 1 optional warning term.\n",
                    "deprecationMessage": "use `critical` and `warning` attributes instead"
                },
                "type": {
                    "type": "string",
                    "description": "The type of NRQL alert condition to create. Valid values are: 'static', 'outlier', 'baseline'.\n"
                },
                "valueFunction": {
                    "type": "string",
                    "description": "Valid values are: 'single_value' or 'sum'\n"
                },
                "violationTimeLimit": {
                    "type": "string",
                    "description": "Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you\nselect. Possible values are 'ONE_HOUR', 'TWO_HOURS', 'FOUR_HOURS', 'EIGHT_HOURS', 'TWELVE_HOURS', 'TWENTY_FOUR_HOURS'\n(case insensitive).\n"
                },
                "violationTimeLimitSeconds": {
                    "type": "integer",
                    "description": "Sets a time limit, in seconds, that will automatically force-close a long-lasting violation after the time limit you\nselect. Possible values are 3600, 7200, 14400, 28800, 43200, and 86400.\n",
                    "deprecationMessage": "use `violation_time_limit` attribute instead"
                },
                "warning": {
                    "$ref": "#/types/newrelic:/NrqlAlertConditionWarning:NrqlAlertConditionWarning",
                    "description": "A condition term with priority set to warning.\n"
                }
            },
            "required": [
                "name",
                "nrql",
                "policyId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID for managing your NRQL alert conditions.\n"
                },
                "baselineDirection": {
                    "type": "string",
                    "description": "The baseline direction of a baseline NRQL alert condition. Valid values are: 'LOWER_ONLY', 'UPPER_AND_LOWER',\n'UPPER_ONLY' (case insensitive).\n"
                },
                "critical": {
                    "$ref": "#/types/newrelic:/NrqlAlertConditionCritical:NrqlAlertConditionCritical",
                    "description": "A condition term with priority set to critical.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the NRQL alert condition.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not to enable the alert condition.\n"
                },
                "expectedGroups": {
                    "type": "integer",
                    "description": "Number of expected groups when using outlier detection.\n"
                },
                "ignoreOverlap": {
                    "type": "boolean",
                    "description": "Whether to look for a convergence of groups when using outlier detection.\n",
                    "deprecationMessage": "use `open_violation_on_group_overlap` attribute instead, but use the inverse of your boolean - e.g. if ignore_overlap = false, use open_violation_on_group_overlap = true"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition.\n"
                },
                "nrql": {
                    "$ref": "#/types/newrelic:/NrqlAlertConditionNrql:NrqlAlertConditionNrql",
                    "description": "A NRQL query.\n"
                },
                "openViolationOnGroupOverlap": {
                    "type": "boolean",
                    "description": "Whether overlapping groups should produce a violation.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:/NrqlAlertConditionTerm:NrqlAlertConditionTerm"
                    },
                    "description": "A set of terms for this condition. Max 2 terms allowed - at least one 1 critical term and 1 optional warning term.\n",
                    "deprecationMessage": "use `critical` and `warning` attributes instead"
                },
                "type": {
                    "type": "string",
                    "description": "The type of NRQL alert condition to create. Valid values are: 'static', 'outlier', 'baseline'.\n"
                },
                "valueFunction": {
                    "type": "string",
                    "description": "Valid values are: 'single_value' or 'sum'\n"
                },
                "violationTimeLimit": {
                    "type": "string",
                    "description": "Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you\nselect. Possible values are 'ONE_HOUR', 'TWO_HOURS', 'FOUR_HOURS', 'EIGHT_HOURS', 'TWELVE_HOURS', 'TWENTY_FOUR_HOURS'\n(case insensitive).\n"
                },
                "violationTimeLimitSeconds": {
                    "type": "integer",
                    "description": "Sets a time limit, in seconds, that will automatically force-close a long-lasting violation after the time limit you\nselect. Possible values are 3600, 7200, 14400, 28800, 43200, and 86400.\n",
                    "deprecationMessage": "use `violation_time_limit` attribute instead"
                },
                "warning": {
                    "$ref": "#/types/newrelic:/NrqlAlertConditionWarning:NrqlAlertConditionWarning",
                    "description": "A condition term with priority set to warning.\n"
                }
            },
            "requiredInputs": [
                "nrql",
                "policyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NrqlAlertCondition resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID for managing your NRQL alert conditions.\n"
                    },
                    "baselineDirection": {
                        "type": "string",
                        "description": "The baseline direction of a baseline NRQL alert condition. Valid values are: 'LOWER_ONLY', 'UPPER_AND_LOWER',\n'UPPER_ONLY' (case insensitive).\n"
                    },
                    "critical": {
                        "$ref": "#/types/newrelic:/NrqlAlertConditionCritical:NrqlAlertConditionCritical",
                        "description": "A condition term with priority set to critical.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the NRQL alert condition.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether or not to enable the alert condition.\n"
                    },
                    "expectedGroups": {
                        "type": "integer",
                        "description": "Number of expected groups when using outlier detection.\n"
                    },
                    "ignoreOverlap": {
                        "type": "boolean",
                        "description": "Whether to look for a convergence of groups when using outlier detection.\n",
                        "deprecationMessage": "use `open_violation_on_group_overlap` attribute instead, but use the inverse of your boolean - e.g. if ignore_overlap = false, use open_violation_on_group_overlap = true"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the condition.\n"
                    },
                    "nrql": {
                        "$ref": "#/types/newrelic:/NrqlAlertConditionNrql:NrqlAlertConditionNrql",
                        "description": "A NRQL query.\n"
                    },
                    "openViolationOnGroupOverlap": {
                        "type": "boolean",
                        "description": "Whether overlapping groups should produce a violation.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the policy where this condition should be used.\n"
                    },
                    "runbookUrl": {
                        "type": "string",
                        "description": "Runbook URL to display in notifications.\n"
                    },
                    "terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:/NrqlAlertConditionTerm:NrqlAlertConditionTerm"
                        },
                        "description": "A set of terms for this condition. Max 2 terms allowed - at least one 1 critical term and 1 optional warning term.\n",
                        "deprecationMessage": "use `critical` and `warning` attributes instead"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of NRQL alert condition to create. Valid values are: 'static', 'outlier', 'baseline'.\n"
                    },
                    "valueFunction": {
                        "type": "string",
                        "description": "Valid values are: 'single_value' or 'sum'\n"
                    },
                    "violationTimeLimit": {
                        "type": "string",
                        "description": "Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you\nselect. Possible values are 'ONE_HOUR', 'TWO_HOURS', 'FOUR_HOURS', 'EIGHT_HOURS', 'TWELVE_HOURS', 'TWENTY_FOUR_HOURS'\n(case insensitive).\n"
                    },
                    "violationTimeLimitSeconds": {
                        "type": "integer",
                        "description": "Sets a time limit, in seconds, that will automatically force-close a long-lasting violation after the time limit you\nselect. Possible values are 3600, 7200, 14400, 28800, 43200, and 86400.\n",
                        "deprecationMessage": "use `violation_time_limit` attribute instead"
                    },
                    "warning": {
                        "$ref": "#/types/newrelic:/NrqlAlertConditionWarning:NrqlAlertConditionWarning",
                        "description": "A condition term with priority set to warning.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:insights/event:Event": {
            "description": "Use this resource to create one or more Insights events.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.insights.Event(\"foo\", {\n    events: [{\n        attributes: [\n            {\n                key: \"a_string_attribute\",\n                value: \"a string\",\n            },\n            {\n                key: \"an_integer_attribute\",\n                type: \"int\",\n                value: \"42\",\n            },\n            {\n                key: \"a_float_attribute\",\n                type: \"float\",\n                value: \"101.1\",\n            },\n        ],\n        timestamp: 1232471100,\n        type: \"MyEvent\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.insights.Event(\"foo\", events=[{\n    \"attributes\": [\n        {\n            \"key\": \"a_string_attribute\",\n            \"value\": \"a string\",\n        },\n        {\n            \"key\": \"an_integer_attribute\",\n            \"type\": \"int\",\n            \"value\": 42,\n        },\n        {\n            \"key\": \"a_float_attribute\",\n            \"type\": \"float\",\n            \"value\": 101.1,\n        },\n    ],\n    \"timestamp\": 1232471100,\n    \"type\": \"MyEvent\",\n}])\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new NewRelic.Insights.Event(\"foo\", new NewRelic.Insights.EventArgs\n        {\n            Events = \n            {\n                new NewRelic.Insights.Inputs.EventEventArgs\n                {\n                    Attributes = \n                    {\n                        new NewRelic.Insights.Inputs.EventEventAttributeArgs\n                        {\n                            Key = \"a_string_attribute\",\n                            Value = \"a string\",\n                        },\n                        new NewRelic.Insights.Inputs.EventEventAttributeArgs\n                        {\n                            Key = \"an_integer_attribute\",\n                            Type = \"int\",\n                            Value = \"42\",\n                        },\n                        new NewRelic.Insights.Inputs.EventEventAttributeArgs\n                        {\n                            Key = \"a_float_attribute\",\n                            Type = \"float\",\n                            Value = \"101.1\",\n                        },\n                    },\n                    Timestamp = 1232471100,\n                    Type = \"MyEvent\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/insights\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := insights.NewEvent(ctx, \"foo\", \u0026insights.EventArgs{\n\t\t\tEvents: insights.EventEventArray{\n\t\t\t\t\u0026insights.EventEventArgs{\n\t\t\t\t\tAttributes: insights.EventEventAttributeArray{\n\t\t\t\t\t\t\u0026insights.EventEventAttributeArgs{\n\t\t\t\t\t\t\tKey:   pulumi.String(\"a_string_attribute\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"a string\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026insights.EventEventAttributeArgs{\n\t\t\t\t\t\t\tKey:   pulumi.String(\"an_integer_attribute\"),\n\t\t\t\t\t\t\tType:  pulumi.String(\"int\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"42\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026insights.EventEventAttributeArgs{\n\t\t\t\t\t\t\tKey:   pulumi.String(\"a_float_attribute\"),\n\t\t\t\t\t\t\tType:  pulumi.String(\"float\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"101.1\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tTimestamp: pulumi.Int(1232471100),\n\t\t\t\t\tType:      pulumi.String(\"MyEvent\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Events\n\nThe `event` mapping supports the following arguments:\n\n  * `type` - (Required) The event's name. Can be a combination of alphanumeric characters, underscores, and colons.\n  * `timestamp` - (Optional) Must be a Unix epoch timestamp. You can define timestamps either in seconds or in milliseconds.\n  * `attribute` - (Required) An attribute to include in your event payload. Multiple attribute blocks can be defined for an event. See Attributes below for details.\n\n### Attributes\n\nThe `attribute` mapping supports the following arguments:\n\n  * `key` - (Required) The name of the attribute.\n  * `value` - (Required) The value of the attribute.\n  * `type` - (Optional) Specify the type for the attribute value. This is useful when passing integer or float values to Insights. Allowed values are `string`, `int`, or `float`. Defaults to `string`.\n",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:insights/EventEvent:EventEvent"
                    },
                    "description": "An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.\n"
                }
            },
            "required": [
                "events"
            ],
            "inputProperties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:insights/EventEvent:EventEvent"
                    },
                    "description": "An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.\n"
                }
            },
            "requiredInputs": [
                "events"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Event resources.\n",
                "properties": {
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:insights/EventEvent:EventEvent"
                        },
                        "description": "An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:plugins/alertCondition:AlertCondition": {
            "description": "Use this resource to create and manage plugins alert conditions in New Relic.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooPlugin = newrelic.plugins.getPlugin({\n    guid: \"com.example.my-plugin\",\n});\nconst fooPluginComponent = fooPlugin.then(fooPlugin =\u003e newrelic.plugins.getPluginComponent({\n    pluginId: fooPlugin.id,\n    name: \"MyPlugin\",\n}));\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooAlertCondition = new newrelic.plugins.AlertCondition(\"fooAlertCondition\", {\n    policyId: fooAlertPolicy.id,\n    entities: [fooPluginComponent.then(fooPluginComponent =\u003e fooPluginComponent.id)],\n    metric: \"Component/Summary/Consumers[consumers]\",\n    pluginId: fooPlugin.then(fooPlugin =\u003e fooPlugin.id),\n    pluginGuid: fooPlugin.then(fooPlugin =\u003e fooPlugin.guid),\n    valueFunction: \"average\",\n    metricDescription: \"Queue consumers\",\n    terms: [{\n        duration: 5,\n        operator: \"below\",\n        priority: \"critical\",\n        threshold: \"0.75\",\n        timeFunction: \"all\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_plugin = newrelic.plugins.get_plugin(guid=\"com.example.my-plugin\")\nfoo_plugin_component = newrelic.plugins.get_plugin_component(plugin_id=foo_plugin.id,\n    name=\"MyPlugin\")\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_alert_condition = newrelic.plugins.AlertCondition(\"fooAlertCondition\",\n    policy_id=foo_alert_policy.id,\n    entities=[foo_plugin_component.id],\n    metric=\"Component/Summary/Consumers[consumers]\",\n    plugin_id=foo_plugin.id,\n    plugin_guid=foo_plugin.guid,\n    value_function=\"average\",\n    metric_description=\"Queue consumers\",\n    terms=[{\n        \"duration\": 5,\n        \"operator\": \"below\",\n        \"priority\": \"critical\",\n        \"threshold\": \"0.75\",\n        \"timeFunction\": \"all\",\n    }])\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooPlugin = Output.Create(NewRelic.Plugins.GetPlugin.InvokeAsync(new NewRelic.Plugins.GetPluginArgs\n        {\n            Guid = \"com.example.my-plugin\",\n        }));\n        var fooPluginComponent = fooPlugin.Apply(fooPlugin =\u003e Output.Create(NewRelic.Plugins.GetPluginComponent.InvokeAsync(new NewRelic.Plugins.GetPluginComponentArgs\n        {\n            PluginId = fooPlugin.Id,\n            Name = \"MyPlugin\",\n        })));\n        var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\", new NewRelic.AlertPolicyArgs\n        {\n        });\n        var fooAlertCondition = new NewRelic.Plugins.AlertCondition(\"fooAlertCondition\", new NewRelic.Plugins.AlertConditionArgs\n        {\n            PolicyId = fooAlertPolicy.Id,\n            Entities = \n            {\n                fooPluginComponent.Apply(fooPluginComponent =\u003e fooPluginComponent.Id),\n            },\n            Metric = \"Component/Summary/Consumers[consumers]\",\n            PluginId = fooPlugin.Apply(fooPlugin =\u003e fooPlugin.Id),\n            PluginGuid = fooPlugin.Apply(fooPlugin =\u003e fooPlugin.Guid),\n            ValueFunction = \"average\",\n            MetricDescription = \"Queue consumers\",\n            Terms = \n            {\n                new NewRelic.Plugins.Inputs.AlertConditionTermArgs\n                {\n                    Duration = 5,\n                    Operator = \"below\",\n                    Priority = \"critical\",\n                    Threshold = 0.75,\n                    TimeFunction = \"all\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic\"\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/plugins\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooPlugin, err := plugins.GetPlugin(ctx, \u0026plugins.GetPluginArgs{\n\t\t\tGuid: \"com.example.my-plugin\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooPluginComponent, err := plugins.GetPluginComponent(ctx, \u0026plugins.GetPluginComponentArgs{\n\t\t\tPluginId: fooPlugin.Id,\n\t\t\tName:     \"MyPlugin\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = plugins.NewAlertCondition(ctx, \"fooAlertCondition\", \u0026plugins.AlertConditionArgs{\n\t\t\tPolicyId: fooAlertPolicy.ID(),\n\t\t\tEntities: pulumi.IntArray{\n\t\t\t\tpulumi.String(fooPluginComponent.Id),\n\t\t\t},\n\t\t\tMetric:            pulumi.String(\"Component/Summary/Consumers[consumers]\"),\n\t\t\tPluginId:          pulumi.String(fooPlugin.Id),\n\t\t\tPluginGuid:        pulumi.String(fooPlugin.Guid),\n\t\t\tValueFunction:     pulumi.String(\"average\"),\n\t\t\tMetricDescription: pulumi.String(\"Queue consumers\"),\n\t\t\tTerms: plugins.AlertConditionTermArray{\n\t\t\t\t\u0026plugins.AlertConditionTermArgs{\n\t\t\t\t\tDuration:     pulumi.Int(5),\n\t\t\t\t\tOperator:     pulumi.String(\"below\"),\n\t\t\t\t\tPriority:     pulumi.String(\"critical\"),\n\t\t\t\t\tThreshold:    pulumi.Float64(0.75),\n\t\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Terms\n\nThe `term` mapping supports the following arguments:\n\n  * `duration` - (Required) In minutes, must be in the range of `5` to `120`, inclusive.\n  * `operator` - (Optional) `above`, `below`, or `equal`.  Defaults to `equal`.\n  * `priority` - (Optional) `critical` or `warning`.  Defaults to `critical`.\n  * `threshold` - (Required) Must be 0 or greater.\n  * `time_function` - (Required) `all` or `any`.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not this condition is enabled.\n"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The plugin component IDs to target.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The plugin metric to evaluate.\n"
                },
                "metricDescription": {
                    "type": "string",
                    "description": "The metric description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition. Must be between 1 and 64 characters, inclusive.\n"
                },
                "pluginGuid": {
                    "type": "string",
                    "description": "The GUID of the plugin which produces the metric.\n"
                },
                "pluginId": {
                    "type": "string",
                    "description": "The ID of the installed plugin instance which produces the metric.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:plugins/AlertConditionTerm:AlertConditionTerm"
                    },
                    "description": "A list of terms for this condition. See Terms below for details.\n"
                },
                "valueFunction": {
                    "type": "string",
                    "description": "The value function to apply to the metric data.  One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.\n"
                }
            },
            "required": [
                "entities",
                "metric",
                "metricDescription",
                "name",
                "pluginGuid",
                "pluginId",
                "policyId",
                "terms",
                "valueFunction"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not this condition is enabled.\n"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The plugin component IDs to target.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The plugin metric to evaluate.\n"
                },
                "metricDescription": {
                    "type": "string",
                    "description": "The metric description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition. Must be between 1 and 64 characters, inclusive.\n"
                },
                "pluginGuid": {
                    "type": "string",
                    "description": "The GUID of the plugin which produces the metric.\n"
                },
                "pluginId": {
                    "type": "string",
                    "description": "The ID of the installed plugin instance which produces the metric.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:plugins/AlertConditionTerm:AlertConditionTerm"
                    },
                    "description": "A list of terms for this condition. See Terms below for details.\n"
                },
                "valueFunction": {
                    "type": "string",
                    "description": "The value function to apply to the metric data.  One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.\n"
                }
            },
            "requiredInputs": [
                "entities",
                "metric",
                "metricDescription",
                "pluginGuid",
                "pluginId",
                "policyId",
                "terms",
                "valueFunction"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertCondition resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether or not this condition is enabled.\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The plugin component IDs to target.\n"
                    },
                    "metric": {
                        "type": "string",
                        "description": "The plugin metric to evaluate.\n"
                    },
                    "metricDescription": {
                        "type": "string",
                        "description": "The metric description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the condition. Must be between 1 and 64 characters, inclusive.\n"
                    },
                    "pluginGuid": {
                        "type": "string",
                        "description": "The GUID of the plugin which produces the metric.\n"
                    },
                    "pluginId": {
                        "type": "string",
                        "description": "The ID of the installed plugin instance which produces the metric.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the policy where this condition should be used.\n"
                    },
                    "runbookUrl": {
                        "type": "string",
                        "description": "Runbook URL to display in notifications.\n"
                    },
                    "terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:plugins/AlertConditionTerm:AlertConditionTerm"
                        },
                        "description": "A list of terms for this condition. See Terms below for details.\n"
                    },
                    "valueFunction": {
                        "type": "string",
                        "description": "The value function to apply to the metric data.  One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:plugins/applicationSettings:ApplicationSettings": {
            "description": "\u003e **NOTE:** Applications are not created by this resource, but are created by\na reporting agent.\n\nUse this resource to manage configuration for an application that already\nexists in New Relic.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst app = new newrelic.plugins.ApplicationSettings(\"app\", {\n    appApdexThreshold: 0.7,\n    enableRealUserMonitoring: false,\n    endUserApdexThreshold: 0.8,\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\napp = newrelic.plugins.ApplicationSettings(\"app\",\n    app_apdex_threshold=\"0.7\",\n    enable_real_user_monitoring=False,\n    end_user_apdex_threshold=\"0.8\")\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var app = new NewRelic.Plugins.ApplicationSettings(\"app\", new NewRelic.Plugins.ApplicationSettingsArgs\n        {\n            AppApdexThreshold = 0.7,\n            EnableRealUserMonitoring = false,\n            EndUserApdexThreshold = 0.8,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/plugins\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := plugins.NewApplicationSettings(ctx, \"app\", \u0026plugins.ApplicationSettingsArgs{\n\t\t\tAppApdexThreshold:        pulumi.Float64(0.7),\n\t\t\tEnableRealUserMonitoring: pulumi.Bool(false),\n\t\t\tEndUserApdexThreshold:    pulumi.Float64(0.8),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Notes\n\n\u003e **NOTE:** Applications that have reported data in the last twelve hours\ncannot be deleted.\n",
            "properties": {
                "appApdexThreshold": {
                    "type": "number",
                    "description": "The appex threshold for the New Relic application.\n"
                },
                "enableRealUserMonitoring": {
                    "type": "boolean",
                    "description": "Enable or disable real user monitoring for the New Relic application.\n"
                },
                "endUserApdexThreshold": {
                    "type": "number",
                    "description": "The user's apdex threshold for the New Relic application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application in New Relic APM.\n"
                }
            },
            "required": [
                "appApdexThreshold",
                "enableRealUserMonitoring",
                "endUserApdexThreshold",
                "name"
            ],
            "inputProperties": {
                "appApdexThreshold": {
                    "type": "number",
                    "description": "The appex threshold for the New Relic application.\n"
                },
                "enableRealUserMonitoring": {
                    "type": "boolean",
                    "description": "Enable or disable real user monitoring for the New Relic application.\n"
                },
                "endUserApdexThreshold": {
                    "type": "number",
                    "description": "The user's apdex threshold for the New Relic application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application in New Relic APM.\n"
                }
            },
            "requiredInputs": [
                "appApdexThreshold",
                "enableRealUserMonitoring",
                "endUserApdexThreshold"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationSettings resources.\n",
                "properties": {
                    "appApdexThreshold": {
                        "type": "number",
                        "description": "The appex threshold for the New Relic application.\n"
                    },
                    "enableRealUserMonitoring": {
                        "type": "boolean",
                        "description": "Enable or disable real user monitoring for the New Relic application.\n"
                    },
                    "endUserApdexThreshold": {
                        "type": "number",
                        "description": "The user's apdex threshold for the New Relic application.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application in New Relic APM.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:plugins/workload:Workload": {
            "description": "Use this resource to create, update, and delete a New Relic One workload.\n\nA New Relic Personal API key is required to provision this resource.  Set the `api_key`\nattribute in the `provider` block or the `NEW_RELIC_API_KEY` environment\nvariable with your Personal API key.\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID where you want to create the workload.\n"
                },
                "compositeEntitySearchQuery": {
                    "type": "string",
                    "description": "The composite query used to compose a dynamic workload.\n"
                },
                "entityGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of entity GUIDs manually assigned to this workload.\n"
                },
                "entitySearchQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:plugins/WorkloadEntitySearchQuery:WorkloadEntitySearchQuery"
                    },
                    "description": "A list of search queries that define a dynamic workload.  See Nested entity_search_query blocks below for details.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The unique entity identifier of the workload in New Relic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The workload's name.\n"
                },
                "permalink": {
                    "type": "string",
                    "description": "The URL of the workload.\n"
                },
                "scopeAccountIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of account IDs that will be used to get entities from.\n"
                },
                "workloadId": {
                    "type": "integer",
                    "description": "The unique entity identifier of the workload.\n"
                }
            },
            "required": [
                "accountId",
                "compositeEntitySearchQuery",
                "entityGuids",
                "guid",
                "name",
                "permalink",
                "scopeAccountIds",
                "workloadId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID where you want to create the workload.\n"
                },
                "entityGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of entity GUIDs manually assigned to this workload.\n"
                },
                "entitySearchQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:plugins/WorkloadEntitySearchQuery:WorkloadEntitySearchQuery"
                    },
                    "description": "A list of search queries that define a dynamic workload.  See Nested entity_search_query blocks below for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The workload's name.\n"
                },
                "scopeAccountIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of account IDs that will be used to get entities from.\n"
                }
            },
            "requiredInputs": [
                "accountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Workload resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID where you want to create the workload.\n"
                    },
                    "compositeEntitySearchQuery": {
                        "type": "string",
                        "description": "The composite query used to compose a dynamic workload.\n"
                    },
                    "entityGuids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of entity GUIDs manually assigned to this workload.\n"
                    },
                    "entitySearchQueries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:plugins/WorkloadEntitySearchQuery:WorkloadEntitySearchQuery"
                        },
                        "description": "A list of search queries that define a dynamic workload.  See Nested entity_search_query blocks below for details.\n"
                    },
                    "guid": {
                        "type": "string",
                        "description": "The unique entity identifier of the workload in New Relic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The workload's name.\n"
                    },
                    "permalink": {
                        "type": "string",
                        "description": "The URL of the workload.\n"
                    },
                    "scopeAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of account IDs that will be used to get entities from.\n"
                    },
                    "workloadId": {
                        "type": "integer",
                        "description": "The unique entity identifier of the workload.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/alertCondition:AlertCondition": {
            "description": "Use this resource to create and manage synthetics alert conditions in New Relic.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooMonitor = newrelic.synthetics.getMonitor({\n    name: \"foo\",\n});\nconst fooAlertCondition = new newrelic.synthetics.AlertCondition(\"fooAlertCondition\", {\n    policyId: newrelic_alert_policy.foo.id,\n    monitorId: fooMonitor.then(fooMonitor =\u003e fooMonitor.id),\n    runbookUrl: \"https://www.example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_monitor = newrelic.synthetics.get_monitor(name=\"foo\")\nfoo_alert_condition = newrelic.synthetics.AlertCondition(\"fooAlertCondition\",\n    policy_id=newrelic_alert_policy[\"foo\"][\"id\"],\n    monitor_id=foo_monitor.id,\n    runbook_url=\"https://www.example.com\")\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooMonitor = Output.Create(NewRelic.Synthetics.GetMonitor.InvokeAsync(new NewRelic.Synthetics.GetMonitorArgs\n        {\n            Name = \"foo\",\n        }));\n        var fooAlertCondition = new NewRelic.Synthetics.AlertCondition(\"fooAlertCondition\", new NewRelic.Synthetics.AlertConditionArgs\n        {\n            PolicyId = newrelic_alert_policy.Foo.Id,\n            MonitorId = fooMonitor.Apply(fooMonitor =\u003e fooMonitor.Id),\n            RunbookUrl = \"https://www.example.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooMonitor, err := synthetics.LookupMonitor(ctx, \u0026synthetics.LookupMonitorArgs{\n\t\t\tName: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = synthetics.NewAlertCondition(ctx, \"fooAlertCondition\", \u0026synthetics.AlertConditionArgs{\n\t\t\tPolicyId:   pulumi.String(newrelic_alert_policy.Foo.Id),\n\t\t\tMonitorId:  pulumi.String(fooMonitor.Id),\n\t\t\tRunbookUrl: pulumi.String(\"https://www.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Set whether to enable the alert condition. Defaults to `true`.\n"
                },
                "monitorId": {
                    "type": "string",
                    "description": "The ID of the Synthetics monitor to be referenced in the alert condition.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of this condition.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                }
            },
            "required": [
                "monitorId",
                "name",
                "policyId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Set whether to enable the alert condition. Defaults to `true`.\n"
                },
                "monitorId": {
                    "type": "string",
                    "description": "The ID of the Synthetics monitor to be referenced in the alert condition.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of this condition.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                }
            },
            "requiredInputs": [
                "monitorId",
                "policyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertCondition resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Set whether to enable the alert condition. Defaults to `true`.\n"
                    },
                    "monitorId": {
                        "type": "string",
                        "description": "The ID of the Synthetics monitor to be referenced in the alert condition.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of this condition.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the policy where this condition should be used.\n"
                    },
                    "runbookUrl": {
                        "type": "string",
                        "description": "Runbook URL to display in notifications.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/label:Label": {
            "description": "Use this resource to create, update, and delete a Synthetics label in New Relic.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.Label(\"foo\", {\n    monitorId: newrelic_synthetics_monitor.foo.id,\n    type: \"MyCategory\",\n    value: \"MyValue\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.synthetics.Label(\"foo\",\n    monitor_id=newrelic_synthetics_monitor[\"foo\"][\"id\"],\n    type=\"MyCategory\",\n    value=\"MyValue\")\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new NewRelic.Synthetics.Label(\"foo\", new NewRelic.Synthetics.LabelArgs\n        {\n            MonitorId = newrelic_synthetics_monitor.Foo.Id,\n            Type = \"MyCategory\",\n            Value = \"MyValue\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.NewLabel(ctx, \"foo\", \u0026synthetics.LabelArgs{\n\t\t\tMonitorId: pulumi.String(newrelic_synthetics_monitor.Foo.Id),\n\t\t\tType:      pulumi.String(\"MyCategory\"),\n\t\t\tValue:     pulumi.String(\"MyValue\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "href": {
                    "type": "string",
                    "description": "The URL of the Synthetics label.\n"
                },
                "monitorId": {
                    "type": "string",
                    "description": "The ID of the monitor that will be assigned the label.\n"
                },
                "type": {
                    "type": "string",
                    "description": "A string representing the label key/category.\n"
                },
                "value": {
                    "type": "string",
                    "description": "A string representing the label value.\n"
                }
            },
            "required": [
                "href",
                "monitorId",
                "type",
                "value"
            ],
            "inputProperties": {
                "monitorId": {
                    "type": "string",
                    "description": "The ID of the monitor that will be assigned the label.\n"
                },
                "type": {
                    "type": "string",
                    "description": "A string representing the label key/category.\n"
                },
                "value": {
                    "type": "string",
                    "description": "A string representing the label value.\n"
                }
            },
            "requiredInputs": [
                "monitorId",
                "type",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Label resources.\n",
                "properties": {
                    "href": {
                        "type": "string",
                        "description": "The URL of the Synthetics label.\n"
                    },
                    "monitorId": {
                        "type": "string",
                        "description": "The ID of the monitor that will be assigned the label.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "A string representing the label key/category.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "A string representing the label value.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/monitor:Monitor": {
            "description": "Use this resource to create, update, and delete a synthetics monitor in New Relic.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n##### Type: `SIMPLE`\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.Monitor(\"foo\", {\n    frequency: 5,\n    locations: [\n        \"AWS_US_EAST_1\",\n        \"AWS_US_EAST_2\",\n    ],\n    status: \"ENABLED\",\n    type: \"SIMPLE\",\n    uri: \"https://example.com\", // Required for type \"SIMPLE\" and \"BROWSER\"\n    validationString: \"add example validation check here\", // Optional for type \"SIMPLE\" and \"BROWSER\"\n    verifySsl: true, // Optional for type \"SIMPLE\" and \"BROWSER\"\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.synthetics.Monitor(\"foo\",\n    frequency=5,\n    locations=[\n        \"AWS_US_EAST_1\",\n        \"AWS_US_EAST_2\",\n    ],\n    status=\"ENABLED\",\n    type=\"SIMPLE\",\n    uri=\"https://example.com\",\n    validation_string=\"add example validation check here\",\n    verify_ssl=True)\n# Optional for type \"SIMPLE\" and \"BROWSER\"\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new NewRelic.Synthetics.Monitor(\"foo\", new NewRelic.Synthetics.MonitorArgs\n        {\n            Frequency = 5,\n            Locations = \n            {\n                \"AWS_US_EAST_1\",\n                \"AWS_US_EAST_2\",\n            },\n            Status = \"ENABLED\",\n            Type = \"SIMPLE\",\n            Uri = \"https://example.com\",\n            ValidationString = \"add example validation check here\",\n            VerifySsl = true,\n        });\n        // Optional for type \"SIMPLE\" and \"BROWSER\"\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.NewMonitor(ctx, \"foo\", \u0026synthetics.MonitorArgs{\n\t\t\tFrequency: pulumi.Int(5),\n\t\t\tLocations: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"AWS_US_EAST_1\"),\n\t\t\t\tpulumi.String(\"AWS_US_EAST_2\"),\n\t\t\t},\n\t\t\tStatus:           pulumi.String(\"ENABLED\"),\n\t\t\tType:             pulumi.String(\"SIMPLE\"),\n\t\t\tUri:              pulumi.String(\"https://example.com\"),\n\t\t\tValidationString: pulumi.String(\"add example validation check here\"),\n\t\t\tVerifySsl:        pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\nSee additional examples.\n{{% /example %}}\n{{% /examples %}}\n## Additional Examples\n\nType: `BROWSER`\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.Monitor(\"foo\", {\n    bypassHeadRequest: true, // Note: optional for type \"BROWSER\" only\n    frequency: 5,\n    locations: [\"AWS_US_EAST_1\"],\n    status: \"ENABLED\",\n    treatRedirectAsFailure: true, // Note: optional for type \"BROWSER\" only\n    type: \"BROWSER\",\n    uri: \"https://example.com\", // required for type \"SIMPLE\" and \"BROWSER\"\n    validationString: \"add example validation check here\", // optional for type \"SIMPLE\" and \"BROWSER\"\n    verifySsl: true, // optional for type \"SIMPLE\" and \"BROWSER\"\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.synthetics.Monitor(\"foo\",\n    bypass_head_request=True,\n    frequency=5,\n    locations=[\"AWS_US_EAST_1\"],\n    status=\"ENABLED\",\n    treat_redirect_as_failure=True,\n    type=\"BROWSER\",\n    uri=\"https://example.com\",\n    validation_string=\"add example validation check here\",\n    verify_ssl=True)\n# optional for type \"SIMPLE\" and \"BROWSER\"\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new NewRelic.Synthetics.Monitor(\"foo\", new NewRelic.Synthetics.MonitorArgs\n        {\n            BypassHeadRequest = true,\n            Frequency = 5,\n            Locations = \n            {\n                \"AWS_US_EAST_1\",\n            },\n            Status = \"ENABLED\",\n            TreatRedirectAsFailure = true,\n            Type = \"BROWSER\",\n            Uri = \"https://example.com\",\n            ValidationString = \"add example validation check here\",\n            VerifySsl = true,\n        });\n        // optional for type \"SIMPLE\" and \"BROWSER\"\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.NewMonitor(ctx, \"foo\", \u0026synthetics.MonitorArgs{\n\t\t\tBypassHeadRequest: pulumi.Bool(true),\n\t\t\tFrequency:         pulumi.Int(5),\n\t\t\tLocations: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"AWS_US_EAST_1\"),\n\t\t\t},\n\t\t\tStatus:                 pulumi.String(\"ENABLED\"),\n\t\t\tTreatRedirectAsFailure: pulumi.Bool(true),\n\t\t\tType:                   pulumi.String(\"BROWSER\"),\n\t\t\tUri:                    pulumi.String(\"https://example.com\"),\n\t\t\tValidationString:       pulumi.String(\"add example validation check here\"),\n\t\t\tVerifySsl:              pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nType: `SCRIPT_BROWSER`\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.Monitor(\"foo\", {\n    frequency: 5,\n    locations: [\"AWS_US_EAST_1\"],\n    status: \"ENABLED\",\n    type: \"SCRIPT_BROWSER\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.synthetics.Monitor(\"foo\",\n    frequency=5,\n    locations=[\"AWS_US_EAST_1\"],\n    status=\"ENABLED\",\n    type=\"SCRIPT_BROWSER\")\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new NewRelic.Synthetics.Monitor(\"foo\", new NewRelic.Synthetics.MonitorArgs\n        {\n            Frequency = 5,\n            Locations = \n            {\n                \"AWS_US_EAST_1\",\n            },\n            Status = \"ENABLED\",\n            Type = \"SCRIPT_BROWSER\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.NewMonitor(ctx, \"foo\", \u0026synthetics.MonitorArgs{\n\t\t\tFrequency: pulumi.Int(5),\n\t\t\tLocations: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"AWS_US_EAST_1\"),\n\t\t\t},\n\t\t\tStatus: pulumi.String(\"ENABLED\"),\n\t\t\tType:   pulumi.String(\"SCRIPT_BROWSER\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nType: `SCRIPT_API`\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.Monitor(\"foo\", {\n    frequency: 5,\n    locations: [\"AWS_US_EAST_1\"],\n    status: \"ENABLED\",\n    type: \"SCRIPT_API\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.synthetics.Monitor(\"foo\",\n    frequency=5,\n    locations=[\"AWS_US_EAST_1\"],\n    status=\"ENABLED\",\n    type=\"SCRIPT_API\")\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new NewRelic.Synthetics.Monitor(\"foo\", new NewRelic.Synthetics.MonitorArgs\n        {\n            Frequency = 5,\n            Locations = \n            {\n                \"AWS_US_EAST_1\",\n            },\n            Status = \"ENABLED\",\n            Type = \"SCRIPT_API\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.NewMonitor(ctx, \"foo\", \u0026synthetics.MonitorArgs{\n\t\t\tFrequency: pulumi.Int(5),\n\t\t\tLocations: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"AWS_US_EAST_1\"),\n\t\t\t},\n\t\t\tStatus: pulumi.String(\"ENABLED\"),\n\t\t\tType:   pulumi.String(\"SCRIPT_API\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n",
            "properties": {
                "bypassHeadRequest": {
                    "type": "boolean",
                    "description": "Bypass HEAD request.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "The interval (in minutes) at which this monitor should run.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The locations in which this monitor should be run.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of this monitor.\n"
                },
                "slaThreshold": {
                    "type": "number",
                    "description": "The base threshold for the SLA report.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The monitor status (i.e. `ENABLED`, `MUTED`, `DISABLED`).\n"
                },
                "treatRedirectAsFailure": {
                    "type": "boolean",
                    "description": "Fail the monitor check if redirected.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The monitor type. Valid values are `SIMPLE`, `BROWSER`, `SCRIPT_BROWSER`, and `SCRIPT_API`.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The URI for the monitor to hit.\n"
                },
                "validationString": {
                    "type": "string",
                    "description": "The string to validate against in the response.\n"
                },
                "verifySsl": {
                    "type": "boolean",
                    "description": "Verify SSL.\n"
                }
            },
            "required": [
                "frequency",
                "locations",
                "name",
                "status",
                "type"
            ],
            "inputProperties": {
                "bypassHeadRequest": {
                    "type": "boolean",
                    "description": "Bypass HEAD request.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "The interval (in minutes) at which this monitor should run.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The locations in which this monitor should be run.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of this monitor.\n"
                },
                "slaThreshold": {
                    "type": "number",
                    "description": "The base threshold for the SLA report.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The monitor status (i.e. `ENABLED`, `MUTED`, `DISABLED`).\n"
                },
                "treatRedirectAsFailure": {
                    "type": "boolean",
                    "description": "Fail the monitor check if redirected.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The monitor type. Valid values are `SIMPLE`, `BROWSER`, `SCRIPT_BROWSER`, and `SCRIPT_API`.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The URI for the monitor to hit.\n"
                },
                "validationString": {
                    "type": "string",
                    "description": "The string to validate against in the response.\n"
                },
                "verifySsl": {
                    "type": "boolean",
                    "description": "Verify SSL.\n"
                }
            },
            "requiredInputs": [
                "frequency",
                "locations",
                "status",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Monitor resources.\n",
                "properties": {
                    "bypassHeadRequest": {
                        "type": "boolean",
                        "description": "Bypass HEAD request.\n"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "The interval (in minutes) at which this monitor should run.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The locations in which this monitor should be run.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of this monitor.\n"
                    },
                    "slaThreshold": {
                        "type": "number",
                        "description": "The base threshold for the SLA report.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The monitor status (i.e. `ENABLED`, `MUTED`, `DISABLED`).\n"
                    },
                    "treatRedirectAsFailure": {
                        "type": "boolean",
                        "description": "Fail the monitor check if redirected.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The monitor type. Valid values are `SIMPLE`, `BROWSER`, `SCRIPT_BROWSER`, and `SCRIPT_API`.\n"
                    },
                    "uri": {
                        "type": "string",
                        "description": "The URI for the monitor to hit.\n"
                    },
                    "validationString": {
                        "type": "string",
                        "description": "The string to validate against in the response.\n"
                    },
                    "verifySsl": {
                        "type": "boolean",
                        "description": "Verify SSL.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/monitorScript:MonitorScript": {
            "description": "Use this resource to update a synthetics monitor script in New Relic.\n",
            "properties": {
                "monitorId": {
                    "type": "string",
                    "description": "The ID of the monitor to attach the script to.\n"
                },
                "text": {
                    "type": "string",
                    "description": "The plaintext representing the monitor script.\n"
                }
            },
            "required": [
                "monitorId",
                "text"
            ],
            "inputProperties": {
                "monitorId": {
                    "type": "string",
                    "description": "The ID of the monitor to attach the script to.\n"
                },
                "text": {
                    "type": "string",
                    "description": "The plaintext representing the monitor script.\n"
                }
            },
            "requiredInputs": [
                "monitorId",
                "text"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitorScript resources.\n",
                "properties": {
                    "monitorId": {
                        "type": "string",
                        "description": "The ID of the monitor to attach the script to.\n"
                    },
                    "text": {
                        "type": "string",
                        "description": "The plaintext representing the monitor script.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/secureCredential:SecureCredential": {
            "description": "Use this resource to create and manage New Relic Synthetic secure credentials.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.SecureCredential(\"foo\", {\n    description: \"My description\",\n    key: \"MY_KEY\",\n    value: \"My value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.synthetics.SecureCredential(\"foo\",\n    description=\"My description\",\n    key=\"MY_KEY\",\n    value=\"My value\")\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new NewRelic.Synthetics.SecureCredential(\"foo\", new NewRelic.Synthetics.SecureCredentialArgs\n        {\n            Description = \"My description\",\n            Key = \"MY_KEY\",\n            Value = \"My value\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.NewSecureCredential(ctx, \"foo\", \u0026synthetics.SecureCredentialArgs{\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tKey:         pulumi.String(\"MY_KEY\"),\n\t\t\tValue:       pulumi.String(\"My value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The time the secure credential was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The secure credential's description.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.\n"
                },
                "lastUpdated": {
                    "type": "string",
                    "description": "The time the secure credential was last updated.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The secure credential's value.\n"
                }
            },
            "required": [
                "createdAt",
                "key",
                "lastUpdated",
                "value"
            ],
            "inputProperties": {
                "createdAt": {
                    "type": "string",
                    "description": "The time the secure credential was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The secure credential's description.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.\n"
                },
                "lastUpdated": {
                    "type": "string",
                    "description": "The time the secure credential was last updated.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The secure credential's value.\n"
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecureCredential resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The time the secure credential was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The secure credential's description.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.\n"
                    },
                    "lastUpdated": {
                        "type": "string",
                        "description": "The time the secure credential was last updated.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The secure credential's value.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "newrelic:index/getAlertChannel:getAlertChannel": {
            "description": "Use this data source to get information about a specific alert channel in New Relic that already exists. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooAlertChannel = newrelic.getAlertChannel({\n    name: \"foo@example.com\",\n});\n// Resource\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\n// Using the data source and resource together\nconst fooAlertPolicyChannel = new newrelic.AlertPolicyChannel(\"fooAlertPolicyChannel\", {\n    policyId: fooAlertPolicy.id,\n    channelId: fooAlertChannel.then(fooAlertChannel =\u003e fooAlertChannel.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_alert_channel = newrelic.get_alert_channel(name=\"foo@example.com\")\n# Resource\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\n# Using the data source and resource together\nfoo_alert_policy_channel = newrelic.AlertPolicyChannel(\"fooAlertPolicyChannel\",\n    policy_id=foo_alert_policy.id,\n    channel_id=foo_alert_channel.id)\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAlertChannel.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the alert channel in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAlertChannel.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/newrelic:/getAlertChannelConfig:getAlertChannelConfig",
                        "description": "Alert channel configuration.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "policyIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of policy IDs associated with the alert channel.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Alert channel type, either: `email`, `opsgenie`, `pagerduty`, `slack`, `victorops`, or `webhook`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "name",
                    "policyIds",
                    "type",
                    "id"
                ]
            }
        },
        "newrelic:index/getAlertPolicy:getAlertPolicy": {
            "description": "Use this data source to get information about a specific alert policy in New Relic that already exists.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooAlertChannel = newrelic.getAlertChannel({\n    name: \"foo@example.com\",\n});\nconst fooAlertPolicy = newrelic.getAlertPolicy({\n    name: \"foo policy\",\n});\nconst fooAlertPolicyChannel = new newrelic.AlertPolicyChannel(\"fooAlertPolicyChannel\", {\n    policyId: fooAlertPolicy.then(fooAlertPolicy =\u003e fooAlertPolicy.id),\n    channelId: fooAlertChannel.then(fooAlertChannel =\u003e fooAlertChannel.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_alert_channel = newrelic.get_alert_channel(name=\"foo@example.com\")\nfoo_alert_policy = newrelic.get_alert_policy(name=\"foo policy\")\nfoo_alert_policy_channel = newrelic.AlertPolicyChannel(\"fooAlertPolicyChannel\",\n    policy_id=foo_alert_policy.id,\n    channel_id=foo_alert_channel.id)\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAlertPolicy.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "incidentPreference": {
                        "type": "string",
                        "description": "The rollup strategy for the policy. Options include: PER_POLICY, PER_CONDITION, or PER_CONDITION_AND_TARGET. The default is PER_POLICY.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the alert policy in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAlertPolicy.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The time the policy was created.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "incidentPreference": {
                        "type": "string",
                        "description": "The rollup strategy for the policy. Options include: PER_POLICY, PER_CONDITION, or PER_CONDITION_AND_TARGET. The default is PER_POLICY.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The time the policy was last updated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "name",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "newrelic:index/getApplication:getApplication": {
            "description": "#### DEPRECATED! Use at your own risk. Use the `newrelic.getEntity` data source instead. This feature may be removed in the next major release.\n\nUse this data source to get information about a specific application in New Relic that already exists. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst app = newrelic.getApplication({\n    name: \"my-app\",\n});\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooAlertCondition = new newrelic.AlertCondition(\"fooAlertCondition\", {\n    policyId: fooAlertPolicy.id,\n    type: \"apm_app_metric\",\n    entities: [app.then(app =\u003e app.id)],\n    metric: \"apdex\",\n    runbookUrl: \"https://www.example.com\",\n    terms: [{\n        duration: 5,\n        operator: \"below\",\n        priority: \"critical\",\n        threshold: \"0.75\",\n        timeFunction: \"all\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\napp = newrelic.get_application(name=\"my-app\")\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_alert_condition = newrelic.AlertCondition(\"fooAlertCondition\",\n    policy_id=foo_alert_policy.id,\n    type=\"apm_app_metric\",\n    entities=[app.id],\n    metric=\"apdex\",\n    runbook_url=\"https://www.example.com\",\n    terms=[{\n        \"duration\": 5,\n        \"operator\": \"below\",\n        \"priority\": \"critical\",\n        \"threshold\": \"0.75\",\n        \"timeFunction\": \"all\",\n    }])\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var app = Output.Create(NewRelic.GetApplication.InvokeAsync(new NewRelic.GetApplicationArgs\n        {\n            Name = \"my-app\",\n        }));\n        var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\", new NewRelic.AlertPolicyArgs\n        {\n        });\n        var fooAlertCondition = new NewRelic.AlertCondition(\"fooAlertCondition\", new NewRelic.AlertConditionArgs\n        {\n            PolicyId = fooAlertPolicy.Id,\n            Type = \"apm_app_metric\",\n            Entities = \n            {\n                app.Apply(app =\u003e app.Id),\n            },\n            Metric = \"apdex\",\n            RunbookUrl = \"https://www.example.com\",\n            Terms = \n            {\n                new NewRelic.Inputs.AlertConditionTermArgs\n                {\n                    Duration = 5,\n                    Operator = \"below\",\n                    Priority = \"critical\",\n                    Threshold = 0.75,\n                    TimeFunction = \"all\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tapp, err := newrelic.GetApplication(ctx, \u0026newrelic.GetApplicationArgs{\n\t\t\tName: \"my-app\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewAlertCondition(ctx, \"fooAlertCondition\", \u0026newrelic.AlertConditionArgs{\n\t\t\tPolicyId: fooAlertPolicy.ID(),\n\t\t\tType:     pulumi.String(\"apm_app_metric\"),\n\t\t\tEntities: pulumi.IntArray{\n\t\t\t\tpulumi.String(app.Id),\n\t\t\t},\n\t\t\tMetric:     pulumi.String(\"apdex\"),\n\t\t\tRunbookUrl: pulumi.String(\"https://www.example.com\"),\n\t\t\tTerms: newrelic.AlertConditionTermArray{\n\t\t\t\t\u0026newrelic.AlertConditionTermArgs{\n\t\t\t\t\tDuration:     pulumi.Int(5),\n\t\t\t\t\tOperator:     pulumi.String(\"below\"),\n\t\t\t\t\tPriority:     pulumi.String(\"critical\"),\n\t\t\t\t\tThreshold:    pulumi.Float64(0.75),\n\t\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getApplication.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the application in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApplication.\n",
                "properties": {
                    "hostIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of host IDs associated with the application.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of instance IDs associated with the application.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "hostIds",
                    "instanceIds",
                    "name",
                    "id"
                ]
            }
        },
        "newrelic:index/getEntity:getEntity": {
            "description": "Use this data source to get information about a specific entity in New Relic One that already exists. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst app = newrelic.getEntity({\n    name: \"my-app\",\n    domain: \"APM\",\n    type: \"APPLICATION\",\n    tag: {\n        key: \"my-tag\",\n        value: \"my-tag-value\",\n    },\n});\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooAlertCondition = new newrelic.AlertCondition(\"fooAlertCondition\", {\n    policyId: fooAlertPolicy.id,\n    type: \"apm_app_metric\",\n    entities: [data.newrelic_application.app.application_id],\n    metric: \"apdex\",\n    runbookUrl: \"https://www.example.com\",\n    terms: [{\n        duration: 5,\n        operator: \"below\",\n        priority: \"critical\",\n        threshold: \"0.75\",\n        timeFunction: \"all\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\napp = newrelic.get_entity(name=\"my-app\",\n    domain=\"APM\",\n    type=\"APPLICATION\",\n    tag={\n        \"key\": \"my-tag\",\n        \"value\": \"my-tag-value\",\n    })\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_alert_condition = newrelic.AlertCondition(\"fooAlertCondition\",\n    policy_id=foo_alert_policy.id,\n    type=\"apm_app_metric\",\n    entities=[data[\"newrelic_application\"][\"app\"][\"application_id\"]],\n    metric=\"apdex\",\n    runbook_url=\"https://www.example.com\",\n    terms=[{\n        \"duration\": 5,\n        \"operator\": \"below\",\n        \"priority\": \"critical\",\n        \"threshold\": \"0.75\",\n        \"timeFunction\": \"all\",\n    }])\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var app = Output.Create(NewRelic.GetEntity.InvokeAsync(new NewRelic.GetEntityArgs\n        {\n            Name = \"my-app\",\n            Domain = \"APM\",\n            Type = \"APPLICATION\",\n            Tag = new NewRelic.Inputs.GetEntityTagArgs\n            {\n                Key = \"my-tag\",\n                Value = \"my-tag-value\",\n            },\n        }));\n        var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\", new NewRelic.AlertPolicyArgs\n        {\n        });\n        var fooAlertCondition = new NewRelic.AlertCondition(\"fooAlertCondition\", new NewRelic.AlertConditionArgs\n        {\n            PolicyId = fooAlertPolicy.Id,\n            Type = \"apm_app_metric\",\n            Entities = \n            {\n                data.Newrelic_application.App.Application_id,\n            },\n            Metric = \"apdex\",\n            RunbookUrl = \"https://www.example.com\",\n            Terms = \n            {\n                new NewRelic.Inputs.AlertConditionTermArgs\n                {\n                    Duration = 5,\n                    Operator = \"below\",\n                    Priority = \"critical\",\n                    Threshold = 0.75,\n                    TimeFunction = \"all\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"APM\"\n\t\topt1 := \"APPLICATION\"\n\t\t_, err := newrelic.GetEntity(ctx, \u0026newrelic.GetEntityArgs{\n\t\t\tName:   \"my-app\",\n\t\t\tDomain: \u0026opt0,\n\t\t\tType:   \u0026opt1,\n\t\t\tTag: newrelic.GetEntityTag{\n\t\t\t\tKey:   \"my-tag\",\n\t\t\t\tValue: \"my-tag-value\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewAlertCondition(ctx, \"fooAlertCondition\", \u0026newrelic.AlertConditionArgs{\n\t\t\tPolicyId: fooAlertPolicy.ID(),\n\t\t\tType:     pulumi.String(\"apm_app_metric\"),\n\t\t\tEntities: pulumi.IntArray{\n\t\t\t\tpulumi.String(data.Newrelic_application.App.Application_id),\n\t\t\t},\n\t\t\tMetric:     pulumi.String(\"apdex\"),\n\t\t\tRunbookUrl: pulumi.String(\"https://www.example.com\"),\n\t\t\tTerms: newrelic.AlertConditionTermArray{\n\t\t\t\t\u0026newrelic.AlertConditionTermArgs{\n\t\t\t\t\tDuration:     pulumi.Int(5),\n\t\t\t\t\tOperator:     pulumi.String(\"below\"),\n\t\t\t\t\tPriority:     pulumi.String(\"critical\"),\n\t\t\t\t\tThreshold:    pulumi.Float64(0.75),\n\t\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEntity.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The entity's domain. Valid values are APM, BROWSER, INFRA, MOBILE, and SYNTH.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the entity in New Relic One.  The first entity matching this name for the given search parameters will be returned.\n"
                    },
                    "tag": {
                        "$ref": "#/types/newrelic:/getEntityTag:getEntityTag"
                    },
                    "type": {
                        "type": "string",
                        "description": "The entity's type. Valid values are APPLICATION, DASHBOARD, HOST, MONITOR, and WORRKLOAD.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEntity.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID associated with this entity.\n"
                    },
                    "applicationId": {
                        "type": "integer",
                        "description": "The domain-specific application ID of the entity. Only returned for APM and Browser applications.\n"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "guid": {
                        "type": "string",
                        "description": "The unique GUID of the entity.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tag": {
                        "$ref": "#/types/newrelic:/getEntityTag:getEntityTag"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "applicationId",
                    "domain",
                    "guid",
                    "name",
                    "type",
                    "id"
                ]
            }
        },
        "newrelic:index/getKeyTransaction:getKeyTransaction": {
            "description": "Use this data source to get information about a specific key transaction in New Relic that already exists.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst txn = newrelic.getKeyTransaction({\n    name: \"txn\",\n});\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooAlertCondition = new newrelic.AlertCondition(\"fooAlertCondition\", {\n    policyId: fooAlertPolicy.id,\n    type: \"apm_kt_metric\",\n    entities: [txn.then(txn =\u003e txn.id)],\n    metric: \"error_percentage\",\n    runbookUrl: \"https://www.example.com\",\n    terms: [{\n        duration: 5,\n        operator: \"below\",\n        priority: \"critical\",\n        threshold: \"0.75\",\n        timeFunction: \"all\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\ntxn = newrelic.get_key_transaction(name=\"txn\")\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_alert_condition = newrelic.AlertCondition(\"fooAlertCondition\",\n    policy_id=foo_alert_policy.id,\n    type=\"apm_kt_metric\",\n    entities=[txn.id],\n    metric=\"error_percentage\",\n    runbook_url=\"https://www.example.com\",\n    terms=[{\n        \"duration\": 5,\n        \"operator\": \"below\",\n        \"priority\": \"critical\",\n        \"threshold\": \"0.75\",\n        \"timeFunction\": \"all\",\n    }])\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var txn = Output.Create(NewRelic.GetKeyTransaction.InvokeAsync(new NewRelic.GetKeyTransactionArgs\n        {\n            Name = \"txn\",\n        }));\n        var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\", new NewRelic.AlertPolicyArgs\n        {\n        });\n        var fooAlertCondition = new NewRelic.AlertCondition(\"fooAlertCondition\", new NewRelic.AlertConditionArgs\n        {\n            PolicyId = fooAlertPolicy.Id,\n            Type = \"apm_kt_metric\",\n            Entities = \n            {\n                txn.Apply(txn =\u003e txn.Id),\n            },\n            Metric = \"error_percentage\",\n            RunbookUrl = \"https://www.example.com\",\n            Terms = \n            {\n                new NewRelic.Inputs.AlertConditionTermArgs\n                {\n                    Duration = 5,\n                    Operator = \"below\",\n                    Priority = \"critical\",\n                    Threshold = 0.75,\n                    TimeFunction = \"all\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttxn, err := newrelic.GetKeyTransaction(ctx, \u0026newrelic.GetKeyTransactionArgs{\n\t\t\tName: \"txn\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewAlertCondition(ctx, \"fooAlertCondition\", \u0026newrelic.AlertConditionArgs{\n\t\t\tPolicyId: fooAlertPolicy.ID(),\n\t\t\tType:     pulumi.String(\"apm_kt_metric\"),\n\t\t\tEntities: pulumi.IntArray{\n\t\t\t\tpulumi.String(txn.Id),\n\t\t\t},\n\t\t\tMetric:     pulumi.String(\"error_percentage\"),\n\t\t\tRunbookUrl: pulumi.String(\"https://www.example.com\"),\n\t\t\tTerms: newrelic.AlertConditionTermArray{\n\t\t\t\t\u0026newrelic.AlertConditionTermArgs{\n\t\t\t\t\tDuration:     pulumi.Int(5),\n\t\t\t\t\tOperator:     pulumi.String(\"below\"),\n\t\t\t\t\tPriority:     pulumi.String(\"critical\"),\n\t\t\t\t\tThreshold:    pulumi.Float64(0.75),\n\t\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKeyTransaction.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the key transaction in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKeyTransaction.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "newrelic:plugins/getPlugin:getPlugin": {
            "description": "Use this data source to get information about a specific installed plugin in New Relic.\n\nEach plugin published to New Relic's Plugin Central is assigned a [GUID](https://docs.newrelic.com/docs/plugins/plugin-developer-resources/planning-your-plugin/parts-plugin#guid). Once you have installed a plugin into your account it is assigned an ID. This account-specific ID is required when creating Plugins alert conditions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooPlugin = newrelic.plugins.getPlugin({\n    guid: \"com.example.my-plugin\",\n});\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooAlertCondition = new newrelic.plugins.AlertCondition(\"fooAlertCondition\", {\n    policyId: fooAlertPolicy.id,\n    metric: \"Component/Summary/Consumers[consumers]\",\n    pluginId: fooPlugin.then(fooPlugin =\u003e fooPlugin.id),\n    pluginGuid: fooPlugin.then(fooPlugin =\u003e fooPlugin.guid),\n    valueFunction: \"average\",\n    metricDescription: \"Queue consumers\",\n    terms: [{\n        duration: 5,\n        operator: \"below\",\n        priority: \"critical\",\n        threshold: \"0.75\",\n        timeFunction: \"all\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_plugin = newrelic.plugins.get_plugin(guid=\"com.example.my-plugin\")\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_alert_condition = newrelic.plugins.AlertCondition(\"fooAlertCondition\",\n    policy_id=foo_alert_policy.id,\n    metric=\"Component/Summary/Consumers[consumers]\",\n    plugin_id=foo_plugin.id,\n    plugin_guid=foo_plugin.guid,\n    value_function=\"average\",\n    metric_description=\"Queue consumers\",\n    terms=[{\n        \"duration\": 5,\n        \"operator\": \"below\",\n        \"priority\": \"critical\",\n        \"threshold\": \"0.75\",\n        \"timeFunction\": \"all\",\n    }])\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooPlugin = Output.Create(NewRelic.Plugins.GetPlugin.InvokeAsync(new NewRelic.Plugins.GetPluginArgs\n        {\n            Guid = \"com.example.my-plugin\",\n        }));\n        var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\", new NewRelic.AlertPolicyArgs\n        {\n        });\n        var fooAlertCondition = new NewRelic.Plugins.AlertCondition(\"fooAlertCondition\", new NewRelic.Plugins.AlertConditionArgs\n        {\n            PolicyId = fooAlertPolicy.Id,\n            Metric = \"Component/Summary/Consumers[consumers]\",\n            PluginId = fooPlugin.Apply(fooPlugin =\u003e fooPlugin.Id),\n            PluginGuid = fooPlugin.Apply(fooPlugin =\u003e fooPlugin.Guid),\n            ValueFunction = \"average\",\n            MetricDescription = \"Queue consumers\",\n            Terms = \n            {\n                new NewRelic.Plugins.Inputs.AlertConditionTermArgs\n                {\n                    Duration = 5,\n                    Operator = \"below\",\n                    Priority = \"critical\",\n                    Threshold = 0.75,\n                    TimeFunction = \"all\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic\"\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/plugins\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooPlugin, err := plugins.GetPlugin(ctx, \u0026plugins.GetPluginArgs{\n\t\t\tGuid: \"com.example.my-plugin\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = plugins.NewAlertCondition(ctx, \"fooAlertCondition\", \u0026plugins.AlertConditionArgs{\n\t\t\tPolicyId:          fooAlertPolicy.ID(),\n\t\t\tMetric:            pulumi.String(\"Component/Summary/Consumers[consumers]\"),\n\t\t\tPluginId:          pulumi.String(fooPlugin.Id),\n\t\t\tPluginGuid:        pulumi.String(fooPlugin.Guid),\n\t\t\tValueFunction:     pulumi.String(\"average\"),\n\t\t\tMetricDescription: pulumi.String(\"Queue consumers\"),\n\t\t\tTerms: plugins.AlertConditionTermArray{\n\t\t\t\t\u0026plugins.AlertConditionTermArgs{\n\t\t\t\t\tDuration:     pulumi.Int(5),\n\t\t\t\t\tOperator:     pulumi.String(\"below\"),\n\t\t\t\t\tPriority:     pulumi.String(\"critical\"),\n\t\t\t\t\tThreshold:    pulumi.Float64(0.75),\n\t\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPlugin.\n",
                "properties": {
                    "guid": {
                        "type": "string",
                        "description": "The GUID of the plugin in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "guid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlugin.\n",
                "properties": {
                    "guid": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the installed plugin instance.\n"
                    }
                },
                "type": "object",
                "required": [
                    "guid",
                    "id"
                ]
            }
        },
        "newrelic:plugins/getPluginComponent:getPluginComponent": {
            "description": "Use this data source to get information about a single plugin component in New Relic that already exists.\n\nEach plugin component reporting into to New Relic is assigned a unique ID. Once you have a plugin component reporting data into your account, its component ID can be used to create Plugins alert conditions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooPlugin = newrelic.plugins.getPlugin({\n    guid: \"com.example.my-plugin\",\n});\nconst fooPluginComponent = fooPlugin.then(fooPlugin =\u003e newrelic.plugins.getPluginComponent({\n    pluginId: fooPlugin.id,\n    name: \"My Plugin Component\",\n}));\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooAlertCondition = new newrelic.plugins.AlertCondition(\"fooAlertCondition\", {\n    policyId: fooAlertPolicy.id,\n    metric: \"Component/Summary/Consumers[consumers]\",\n    pluginId: fooPlugin.then(fooPlugin =\u003e fooPlugin.id),\n    pluginGuid: fooPlugin.then(fooPlugin =\u003e fooPlugin.guid),\n    entities: [fooPluginComponent.then(fooPluginComponent =\u003e fooPluginComponent.id)],\n    valueFunction: \"average\",\n    metricDescription: \"Queue consumers\",\n    terms: [{\n        duration: 5,\n        operator: \"below\",\n        priority: \"critical\",\n        threshold: \"0.75\",\n        timeFunction: \"all\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_plugin = newrelic.plugins.get_plugin(guid=\"com.example.my-plugin\")\nfoo_plugin_component = newrelic.plugins.get_plugin_component(plugin_id=foo_plugin.id,\n    name=\"My Plugin Component\")\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_alert_condition = newrelic.plugins.AlertCondition(\"fooAlertCondition\",\n    policy_id=foo_alert_policy.id,\n    metric=\"Component/Summary/Consumers[consumers]\",\n    plugin_id=foo_plugin.id,\n    plugin_guid=foo_plugin.guid,\n    entities=[foo_plugin_component.id],\n    value_function=\"average\",\n    metric_description=\"Queue consumers\",\n    terms=[{\n        \"duration\": 5,\n        \"operator\": \"below\",\n        \"priority\": \"critical\",\n        \"threshold\": \"0.75\",\n        \"timeFunction\": \"all\",\n    }])\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooPlugin = Output.Create(NewRelic.Plugins.GetPlugin.InvokeAsync(new NewRelic.Plugins.GetPluginArgs\n        {\n            Guid = \"com.example.my-plugin\",\n        }));\n        var fooPluginComponent = fooPlugin.Apply(fooPlugin =\u003e Output.Create(NewRelic.Plugins.GetPluginComponent.InvokeAsync(new NewRelic.Plugins.GetPluginComponentArgs\n        {\n            PluginId = fooPlugin.Id,\n            Name = \"My Plugin Component\",\n        })));\n        var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\", new NewRelic.AlertPolicyArgs\n        {\n        });\n        var fooAlertCondition = new NewRelic.Plugins.AlertCondition(\"fooAlertCondition\", new NewRelic.Plugins.AlertConditionArgs\n        {\n            PolicyId = fooAlertPolicy.Id,\n            Metric = \"Component/Summary/Consumers[consumers]\",\n            PluginId = fooPlugin.Apply(fooPlugin =\u003e fooPlugin.Id),\n            PluginGuid = fooPlugin.Apply(fooPlugin =\u003e fooPlugin.Guid),\n            Entities = \n            {\n                fooPluginComponent.Apply(fooPluginComponent =\u003e fooPluginComponent.Id),\n            },\n            ValueFunction = \"average\",\n            MetricDescription = \"Queue consumers\",\n            Terms = \n            {\n                new NewRelic.Plugins.Inputs.AlertConditionTermArgs\n                {\n                    Duration = 5,\n                    Operator = \"below\",\n                    Priority = \"critical\",\n                    Threshold = 0.75,\n                    TimeFunction = \"all\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic\"\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/plugins\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooPlugin, err := plugins.GetPlugin(ctx, \u0026plugins.GetPluginArgs{\n\t\t\tGuid: \"com.example.my-plugin\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooPluginComponent, err := plugins.GetPluginComponent(ctx, \u0026plugins.GetPluginComponentArgs{\n\t\t\tPluginId: fooPlugin.Id,\n\t\t\tName:     \"My Plugin Component\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = plugins.NewAlertCondition(ctx, \"fooAlertCondition\", \u0026plugins.AlertConditionArgs{\n\t\t\tPolicyId:   fooAlertPolicy.ID(),\n\t\t\tMetric:     pulumi.String(\"Component/Summary/Consumers[consumers]\"),\n\t\t\tPluginId:   pulumi.String(fooPlugin.Id),\n\t\t\tPluginGuid: pulumi.String(fooPlugin.Guid),\n\t\t\tEntities: pulumi.IntArray{\n\t\t\t\tpulumi.String(fooPluginComponent.Id),\n\t\t\t},\n\t\t\tValueFunction:     pulumi.String(\"average\"),\n\t\t\tMetricDescription: pulumi.String(\"Queue consumers\"),\n\t\t\tTerms: plugins.AlertConditionTermArray{\n\t\t\t\t\u0026plugins.AlertConditionTermArgs{\n\t\t\t\t\tDuration:     pulumi.Int(5),\n\t\t\t\t\tOperator:     pulumi.String(\"below\"),\n\t\t\t\t\tPriority:     pulumi.String(\"critical\"),\n\t\t\t\t\tThreshold:    pulumi.Float64(0.75),\n\t\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPluginComponent.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the plugin component.\n"
                    },
                    "pluginId": {
                        "type": "integer",
                        "description": "The ID of the plugin instance this component belongs to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "pluginId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPluginComponent.\n",
                "properties": {
                    "healthStatus": {
                        "type": "string",
                        "description": "The health status of the plugin component.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the plugin component.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "pluginId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "healthStatus",
                    "id",
                    "name",
                    "pluginId"
                ]
            }
        },
        "newrelic:synthetics/getMonitor:getMonitor": {
            "description": "Use this data source to get information about a specific synthetics monitor in New Relic that already exists. This can be used to set up a Synthetics alert condition.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst bar = newrelic.synthetics.getMonitor({\n    name: \"bar\",\n});\nconst baz = new newrelic.synthetics.AlertCondition(\"baz\", {\n    policyId: newrelic_alert_policy.foo.id,\n    monitorId: bar.then(bar =\u003e bar.id),\n    runbookUrl: \"https://www.example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nbar = newrelic.synthetics.get_monitor(name=\"bar\")\nbaz = newrelic.synthetics.AlertCondition(\"baz\",\n    policy_id=newrelic_alert_policy[\"foo\"][\"id\"],\n    monitor_id=bar.id,\n    runbook_url=\"https://www.example.com\")\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var bar = Output.Create(NewRelic.Synthetics.GetMonitor.InvokeAsync(new NewRelic.Synthetics.GetMonitorArgs\n        {\n            Name = \"bar\",\n        }));\n        var baz = new NewRelic.Synthetics.AlertCondition(\"baz\", new NewRelic.Synthetics.AlertConditionArgs\n        {\n            PolicyId = newrelic_alert_policy.Foo.Id,\n            MonitorId = bar.Apply(bar =\u003e bar.Id),\n            RunbookUrl = \"https://www.example.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbar, err := synthetics.LookupMonitor(ctx, \u0026synthetics.LookupMonitorArgs{\n\t\t\tName: \"bar\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = synthetics.NewAlertCondition(ctx, \"baz\", \u0026synthetics.AlertConditionArgs{\n\t\t\tPolicyId:   pulumi.String(newrelic_alert_policy.Foo.Id),\n\t\t\tMonitorId:  pulumi.String(bar.Id),\n\t\t\tRunbookUrl: pulumi.String(\"https://www.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMonitor.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the synthetics monitor in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMonitor.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "monitorId": {
                        "type": "string",
                        "description": "The ID of the synthetics monitor.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "monitorId",
                    "name",
                    "id"
                ]
            }
        },
        "newrelic:synthetics/getSecureCredential:getSecureCredential": {
            "description": "Use this data source to get information about a specific Synthetics secure credential in New Relic that already exists.\n\nNote that the secure credential's value is not returned as an attribute for security reasons.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = pulumi.output(newrelic.synthetics.getSecureCredential({\n    key: \"MY_KEY\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.synthetics.get_secure_credential(key=\"MY_KEY\")\n```\n```csharp\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(NewRelic.Synthetics.GetSecureCredential.InvokeAsync(new NewRelic.Synthetics.GetSecureCredentialArgs\n        {\n            Key = \"MY_KEY\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v3/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.LookupSecureCredential(ctx, \u0026synthetics.LookupSecureCredentialArgs{\n\t\t\tKey: \"MY_KEY\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSecureCredential.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "key"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecureCredential.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The time the secure credential was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The secure credential's description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "key": {
                        "type": "string"
                    },
                    "lastUpdated": {
                        "type": "string",
                        "description": "The time the secure credential was last updated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "key",
                    "lastUpdated",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": {
                "index": "index",
                "insights": "Insights",
                "newrelic": "NewRelic",
                "plugins": "Plugins",
                "synthetics": "Synthetics"
            },
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing New Relic resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/newrelic/terraform-provider-newrelic)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-newrelic` repo](https://github.com/pulumi/pulumi-newrelic/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`newrelic/terraform-provider-newrelic` repo](https://github.com/newrelic/terraform-provider-newrelic/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/newrelic/terraform-provider-newrelic)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-newrelic` repo](https://github.com/pulumi/pulumi-newrelic/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`newrelic/terraform-provider-newrelic` repo](https://github.com/newrelic/terraform-provider-newrelic/issues).",
            "requires": {
                "pulumi": "\u003e=2.0.0,\u003c3.0.0"
            }
        }
    }
}