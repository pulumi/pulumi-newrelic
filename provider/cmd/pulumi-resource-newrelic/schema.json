{
    "name": "newrelic",
    "description": "A Pulumi package for creating and managing New Relic resources.",
    "keywords": [
        "pulumi",
        "new relic"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`newrelic` Terraform Provider](https://github.com/newrelic/terraform-provider-newrelic).",
    "repository": "https://github.com/pulumi/pulumi-newrelic",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "cloud": "Cloud",
                "index": "index",
                "insights": "Insights",
                "newrelic": "NewRelic",
                "plugins": "Plugins",
                "synthetics": "Synthetics"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing New Relic resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/newrelic/terraform-provider-newrelic)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-newrelic` repo](https://github.com/pulumi/pulumi-newrelic/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-newrelic` repo](https://github.com/newrelic/terraform-provider-newrelic/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/newrelic/terraform-provider-newrelic)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-newrelic` repo](https://github.com/pulumi/pulumi-newrelic/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-newrelic` repo](https://github.com/newrelic/terraform-provider-newrelic/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "accountId": {
                "type": "integer",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_ACCOUNT_ID"
                    ]
                },
                "secret": true
            },
            "adminApiKey": {
                "type": "string",
                "secret": true
            },
            "apiKey": {
                "type": "string",
                "secret": true
            },
            "apiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "cacertFile": {
                "type": "string"
            },
            "infrastructureApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "insecureSkipVerify": {
                "type": "boolean"
            },
            "insightsInsertKey": {
                "type": "string",
                "secret": true
            },
            "insightsInsertUrl": {
                "type": "string"
            },
            "insightsQueryUrl": {
                "type": "string"
            },
            "nerdgraphApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "region": {
                "type": "string",
                "description": "The data center for which your New Relic account is configured. Only one region per provider block is permitted.\n",
                "default": "US",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_REGION"
                    ]
                }
            },
            "syntheticsApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            }
        },
        "defaults": [
            "accountId",
            "apiKey"
        ]
    },
    "types": {
        "newrelic:cloud/AwsGovcloudIntegrationsAlb:AwsGovcloudIntegrationsAlb": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "loadBalancerPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsApiGateway:AwsGovcloudIntegrationsApiGateway": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                },
                "stagePrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each name or prefix for the Stages that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsAutoScaling:AwsGovcloudIntegrationsAutoScaling": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsAwsDirectConnect:AwsGovcloudIntegrationsAwsDirectConnect": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsAwsStates:AwsGovcloudIntegrationsAwsStates": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsCloudtrail:AwsGovcloudIntegrationsCloudtrail": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsDynamoDb:AwsGovcloudIntegrationsDynamoDb": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsEbs:AwsGovcloudIntegrationsEbs": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsEc2:AwsGovcloudIntegrationsEc2": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "fetchIpAddresses": {
                    "type": "boolean",
                    "description": "Specify if IP addresses of ec2 instance should be collected\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsElasticSearch:AwsGovcloudIntegrationsElasticSearch": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "fetchNodes": {
                    "type": "boolean",
                    "description": "Specify if metrics should be collected for nodes. Turning it on will increase the number of API calls made to CloudWatch.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsElb:AwsGovcloudIntegrationsElb": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsEmr:AwsGovcloudIntegrationsEmr": {
            "properties": {
                "awsRegions": {
                    "type": "string",
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsIam:AwsGovcloudIntegrationsIam": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsLambda:AwsGovcloudIntegrationsLambda": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsRds:AwsGovcloudIntegrationsRds": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsRedShift:AwsGovcloudIntegrationsRedShift": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsRoute53:AwsGovcloudIntegrationsRoute53": {
            "properties": {
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsS3:AwsGovcloudIntegrationsS3": {
            "properties": {
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsSns:AwsGovcloudIntegrationsSns": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsSqs:AwsGovcloudIntegrationsSqs": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n"
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nSome integration types support an additional set of arguments:\n"
                },
                "queuePrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAlb:AwsIntegrationsAlb": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\nFurthermore, below integration types supports the following common arguments.\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "loadBalancerPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsApiGateway:AwsIntegrationsApiGateway": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "stagePrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAutoScaling:AwsIntegrationsAutoScaling": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsAppSync:AwsIntegrationsAwsAppSync": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsAthena:AwsIntegrationsAwsAthena": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsCognito:AwsIntegrationsAwsCognito": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsConnect:AwsIntegrationsAwsConnect": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsDirectConnect:AwsIntegrationsAwsDirectConnect": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsFsx:AwsIntegrationsAwsFsx": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsGlue:AwsIntegrationsAwsGlue": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsKinesisAnalytics:AwsIntegrationsAwsKinesisAnalytics": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsMediaConvert:AwsIntegrationsAwsMediaConvert": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsMediaPackageVod:AwsIntegrationsAwsMediaPackageVod": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsMq:AwsIntegrationsAwsMq": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsMsk:AwsIntegrationsAwsMsk": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsNeptune:AwsIntegrationsAwsNeptune": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsQldb:AwsIntegrationsAwsQldb": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsRoute53resolver:AwsIntegrationsAwsRoute53resolver": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsStates:AwsIntegrationsAwsStates": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsTransitGateway:AwsIntegrationsAwsTransitGateway": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsWaf:AwsIntegrationsAwsWaf": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsAwsWafv2:AwsIntegrationsAwsWafv2": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsBilling:AwsIntegrationsBilling": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsCloudfront:AwsIntegrationsCloudfront": {
            "properties": {
                "fetchLambdasAtEdge": {
                    "type": "boolean",
                    "description": "Specify if Lambdas@Edge should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsCloudtrail:AwsIntegrationsCloudtrail": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsDocDb:AwsIntegrationsDocDb": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsDynamodb:AwsIntegrationsDynamodb": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\nFurthermore, below integration types supports the following common arguments.\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsEbs:AwsIntegrationsEbs": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\nFurthermore, below integration types supports the following common arguments.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsEc2:AwsIntegrationsEc2": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "duplicateEc2Tags": {
                    "type": "boolean",
                    "description": "Specify if the old legacy metadata and tag names have to be kept, it will consume more ingest data size.\n"
                },
                "fetchIpAddresses": {
                    "type": "boolean",
                    "description": "Specify if IP addresses of ec2 instance should be collected.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsEcs:AwsIntegrationsEcs": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsEfs:AwsIntegrationsEfs": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsElasticache:AwsIntegrationsElasticache": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsElasticbeanstalk:AwsIntegrationsElasticbeanstalk": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\nFurthermore, below integration types supports the following common arguments.\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsElasticsearch:AwsIntegrationsElasticsearch": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "fetchNodes": {
                    "type": "boolean",
                    "description": "Specify if metrics should be collected for nodes. Turning it on will increase the number of API calls made to CloudWatch.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsElb:AwsIntegrationsElb": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\nFurthermore, below integration types supports the following common arguments.\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsEmr:AwsIntegrationsEmr": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsHealth:AwsIntegrationsHealth": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsIam:AwsIntegrationsIam": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsIot:AwsIntegrationsIot": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsKinesis:AwsIntegrationsKinesis": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "fetchShards": {
                    "type": "boolean",
                    "description": "Specify if Shards should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsKinesisFirehose:AwsIntegrationsKinesisFirehose": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsLambda:AwsIntegrationsLambda": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsRds:AwsIntegrationsRds": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsRedshift:AwsIntegrationsRedshift": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsRoute53:AwsIntegrationsRoute53": {
            "properties": {
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\nFurthermore, below integration types supports the following common arguments.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsS3:AwsIntegrationsS3": {
            "properties": {
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\nFurthermore, below integration types supports the following common arguments.\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsSes:AwsIntegrationsSes": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsSns:AwsIntegrationsSns": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\nFurthermore, below integration types supports the following common arguments.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsSqs:AwsIntegrationsSqs": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\nFurthermore, below integration types supports the following common arguments.\n"
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "queuePrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsTrustedAdvisor:AwsIntegrationsTrustedAdvisor": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsVpc:AwsIntegrationsVpc": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "fetchNatGateway": {
                    "type": "boolean",
                    "description": "Specify if NAT gateway should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "fetchVpn": {
                    "type": "boolean",
                    "description": "Specify if VPN should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsXRay:AwsIntegrationsXRay": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.  \n\u003c/details\u003e\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\n\u003cdetails\u003e\n\u003csummary\u003e Some integration types support an additional set of arguments. Expand this section to take a look at these supported arguments. \u003c/summary\u003e\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsApiManagement:AzureIntegrationsApiManagement": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsAppGateway:AzureIntegrationsAppGateway": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsAppService:AzureIntegrationsAppService": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsContainers:AzureIntegrationsContainers": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsCosmosDb:AzureIntegrationsCosmosDb": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsCostManagement:AzureIntegrationsCostManagement": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "tagKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsDataFactory:AzureIntegrationsDataFactory": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsEventHub:AzureIntegrationsEventHub": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsExpressRoute:AzureIntegrationsExpressRoute": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsFirewalls:AzureIntegrationsFirewalls": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsFrontDoor:AzureIntegrationsFrontDoor": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsFunctions:AzureIntegrationsFunctions": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsKeyVault:AzureIntegrationsKeyVault": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsLoadBalancer:AzureIntegrationsLoadBalancer": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsLogicApps:AzureIntegrationsLogicApps": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsMachineLearning:AzureIntegrationsMachineLearning": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsMariaDb:AzureIntegrationsMariaDb": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsMonitor:AzureIntegrationsMonitor": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "A boolean value, that specifies if the integration needs to be active. Defaults to 'true' if not specified.\n\n\u003e **IMPORTANT!** Using the `monitor` integration along with other polling integrations in this resource might lead to duplication of metrics. More information about this scenario may be found in the note in [this section](https://docs.newrelic.com/docs/infrastructure/microsoft-azure-integrations/azure-integrations-list/azure-monitor/#migration-from-polling) of New Relic's documentation on the Azure Monitor integration.\n"
                },
                "excludeTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of resource tags associated with the resources that need to be excluded from monitoring.\n"
                },
                "includeTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of resource tags associated with the resources that need to be monitored, in a \"key:value\" format. If this is not specified, all resources will be monitored.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                },
                "resourceTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Azure resource types that need to be monitored.\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsMysql:AzureIntegrationsMysql": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsMysqlFlexible:AzureIntegrationsMysqlFlexible": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsPostgresql:AzureIntegrationsPostgresql": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsPostgresqlFlexible:AzureIntegrationsPostgresqlFlexible": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsPowerBiDedicated:AzureIntegrationsPowerBiDedicated": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsRedisCache:AzureIntegrationsRedisCache": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsServiceBus:AzureIntegrationsServiceBus": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsSql:AzureIntegrationsSql": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsSqlManaged:AzureIntegrationsSqlManaged": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsStorage:AzureIntegrationsStorage": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsVirtualMachine:AzureIntegrationsVirtualMachine": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsVirtualNetworks:AzureIntegrationsVirtualNetworks": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsVms:AzureIntegrationsVms": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsVpnGateway:AzureIntegrationsVpnGateway": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n"
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n\nOther integration type support an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsAlloyDb:GcpIntegrationsAlloyDb": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsAppEngine:GcpIntegrationsAppEngine": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsBigQuery:GcpIntegrationsBigQuery": {
            "properties": {
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsBigTable:GcpIntegrationsBigTable": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsComposer:GcpIntegrationsComposer": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsDataFlow:GcpIntegrationsDataFlow": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsDataProc:GcpIntegrationsDataProc": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsDataStore:GcpIntegrationsDataStore": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsFireBaseDatabase:GcpIntegrationsFireBaseDatabase": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsFireBaseHosting:GcpIntegrationsFireBaseHosting": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsFireBaseStorage:GcpIntegrationsFireBaseStorage": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsFireStore:GcpIntegrationsFireStore": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsFunctions:GcpIntegrationsFunctions": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsInterconnect:GcpIntegrationsInterconnect": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsKubernetes:GcpIntegrationsKubernetes": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsLoadBalancing:GcpIntegrationsLoadBalancing": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsMemCache:GcpIntegrationsMemCache": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsPubSub:GcpIntegrationsPubSub": {
            "properties": {
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsRedis:GcpIntegrationsRedis": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsRouter:GcpIntegrationsRouter": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsRun:GcpIntegrationsRun": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsSpanner:GcpIntegrationsSpanner": {
            "properties": {
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsSql:GcpIntegrationsSql": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsStorage:GcpIntegrationsStorage": {
            "properties": {
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n"
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsVirtualMachines:GcpIntegrationsVirtualMachines": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsVpcAccess:GcpIntegrationsVpcAccess": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n\nOther integration supports an additional argument:\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/AlertChannelConfig:AlertChannelConfig": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The API key for integrating with OpsGenie.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "authPassword": {
                    "type": "string",
                    "description": "Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "authType": {
                    "type": "string",
                    "description": "Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "authUsername": {
                    "type": "string",
                    "description": "Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.\n",
                    "willReplaceOnChanges": true
                },
                "baseUrl": {
                    "type": "string",
                    "description": "The base URL of the webhook destination.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "channel": {
                    "type": "string",
                    "description": "The Slack channel to send notifications to.\n",
                    "willReplaceOnChanges": true
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "headersString": {
                    "type": "string",
                    "description": "Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "includeJsonAttachment": {
                    "type": "string",
                    "description": "`true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.\n",
                    "willReplaceOnChanges": true
                },
                "key": {
                    "type": "string",
                    "description": "The key for integrating with VictorOps.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "payload": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value pairs that represents the webhook payload.  Must provide `payload_type` if setting this argument.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "payloadString": {
                    "type": "string",
                    "description": "Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "payloadType": {
                    "type": "string",
                    "description": "Can either be `application/json` or `application/x-www-form-urlencoded`. The `payload_type` argument is _required_ if `payload` is set.\n",
                    "willReplaceOnChanges": true
                },
                "recipients": {
                    "type": "string",
                    "description": "A set of recipients for targeting notifications.  Multiple values are comma separated.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.\n",
                    "willReplaceOnChanges": true
                },
                "routeKey": {
                    "type": "string",
                    "description": "The route key for integrating with VictorOps.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "serviceKey": {
                    "type": "string",
                    "description": "Specifies the service key for integrating with Pagerduty.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "string",
                    "description": "A set of tags for targeting notifications. Multiple values are comma separated.\n",
                    "willReplaceOnChanges": true
                },
                "teams": {
                    "type": "string",
                    "description": "A set of teams for targeting notifications. Multiple values are comma separated.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "[Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID for use with the user channel type.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "newrelic:index/AlertConditionTerm:AlertConditionTerm": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "In minutes, must be in the range of 5 to 120, inclusive.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "One of (above, below, equal). Defaults to equal.\n"
                },
                "priority": {
                    "type": "string",
                    "description": "One of (critical, warning). Defaults to critical.\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "Must be 0 or greater.\n"
                },
                "timeFunction": {
                    "type": "string",
                    "description": "One of (all, any).\n"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "threshold",
                "timeFunction"
            ]
        },
        "newrelic:index/AlertMutingRuleCondition:AlertMutingRuleCondition": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/AlertMutingRuleConditionCondition:AlertMutingRuleConditionCondition"
                    },
                    "description": "The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "The operator used to combine all the MutingRuleConditions within the group. Valid values are `AND`, `OR`.\n"
                }
            },
            "type": "object",
            "required": [
                "conditions",
                "operator"
            ]
        },
        "newrelic:index/AlertMutingRuleConditionCondition:AlertMutingRuleConditionCondition": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "The attribute on an incident. Valid values are   `accountId`, `conditionId`, `conditionName`, `conditionRunbookUrl`, `conditionType`, `entity.guid`, `nrqlEventType`, `nrqlQuery`, `policyId`, `policyName`, `product`, `tags.\u003cNAME\u003e`, `targetId`, `targetName`\n"
                },
                "operator": {
                    "type": "string",
                    "description": "The operator used to combine all the MutingRuleConditions within the group. Valid values are `AND`, `OR`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The value(s) to compare against the attribute's value.\n"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "operator",
                "values"
            ]
        },
        "newrelic:index/AlertMutingRuleSchedule:AlertMutingRuleSchedule": {
            "properties": {
                "endRepeat": {
                    "type": "string",
                    "description": "The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeat_count`\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'\n"
                },
                "repeat": {
                    "type": "string",
                    "description": "The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY\n"
                },
                "repeatCount": {
                    "type": "integer",
                    "description": "The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `end_repeat`\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The time zone that applies to the MutingRule schedule.\n"
                },
                "weeklyRepeatDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']\n"
                }
            },
            "type": "object",
            "required": [
                "timeZone"
            ]
        },
        "newrelic:index/EntityTagsTag:EntityTagsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The tag key.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tag values.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "newrelic:index/InfraAlertConditionCritical:InfraAlertConditionCritical": {
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "timeFunction": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "duration"
            ]
        },
        "newrelic:index/InfraAlertConditionWarning:InfraAlertConditionWarning": {
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "timeFunction": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "duration"
            ]
        },
        "newrelic:index/MonitorDowntimeEndRepeat:MonitorDowntimeEndRepeat": {
            "properties": {
                "onDate": {
                    "type": "string",
                    "description": "The date on which the monitor downtime's repeat cycle would need to come to an end, a string in `DDDD-MM-YY` format.\n"
                },
                "onRepeat": {
                    "type": "integer",
                    "description": "An integer that specifies the number of occurrences, after which the monitor downtime's repeat cycle would need to come to an end.\n\n\u003e **NOTE:** `end_repeat` **can only be used with the modes** `DAILY`, `MONTHLY` and `WEEKLY` and **is an optional argument** when monitor downtimes of these modes are created. Additionally, **either** `on_date` or `on_repeat` **are required to be specified with** `end_repeat`, but not both, as `on_date` and `on_repeat` are mutually exclusive.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/MonitorDowntimeFrequency:MonitorDowntimeFrequency": {
            "properties": {
                "daysOfMonths": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of integers, specifying the days of a month on which the monthly monitor downtime would function, e.g. [3, 6, 14, 23].\n"
                },
                "daysOfWeek": {
                    "$ref": "#/types/newrelic:index/MonitorDowntimeFrequencyDaysOfWeek:MonitorDowntimeFrequencyDaysOfWeek",
                    "description": "An argument that specifies a day of a week and its occurrence in a month, on which the monthly monitor downtime would function. This argument, further, comprises the following nested arguments -\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/MonitorDowntimeFrequencyDaysOfWeek:MonitorDowntimeFrequencyDaysOfWeek": {
            "properties": {
                "ordinalDayOfMonth": {
                    "type": "string",
                    "description": "The occurrence of `week_day` in a month (one of `\"FIRST\"`, `\"SECOND\"`, `\"THIRD\"`, `\"FOURTH\"`, `\"LAST\"`).\n\n\u003e **NOTE:** `frequency` **can only be used with the mode** `MONTHLY`, and **is a required argument** with monthly monitor downtimes (if the `mode` is `MONTHLY`). Additionally, **either** `days_of_month` or `days_of_week` **are required to be specified with** `frequency`, but not both, as `days_of_month` and `days_of_week` are mutually exclusive. If `days_of_week` is specified, values of **both** of its nested arguments, `week_day` and `ordinal_day_of_month` **would need to be specified** too.\n"
                },
                "weekDay": {
                    "type": "string",
                    "description": "A day of the week (one of `\"SUNDAY\"`, `\"MONDAY\"`, `\"TUESDAY\"`, `\"WEDNESDAY\"`, `\"THURSDAY\"`, `\"FRIDAY\"` or `\"SATURDAY\"`).\n"
                }
            },
            "type": "object",
            "required": [
                "ordinalDayOfMonth",
                "weekDay"
            ]
        },
        "newrelic:index/NotificationChannelProperty:NotificationChannelProperty": {
            "properties": {
                "displayValue": {
                    "type": "string",
                    "description": "The notification property display value.\n\nEach notification channel type supports a specific set of arguments for the `property` block:\n"
                },
                "key": {
                    "type": "string",
                    "description": "The notification property key.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The notification property label.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The notification property value.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "newrelic:index/NotificationDestinationAuthBasic:NotificationDestinationAuthBasic": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Specifies an authentication password for use with a destination.\n",
                    "secret": true
                },
                "user": {
                    "type": "string",
                    "description": "The username of the basic auth.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "user"
            ]
        },
        "newrelic:index/NotificationDestinationAuthToken:NotificationDestinationAuthToken": {
            "properties": {
                "prefix": {
                    "type": "string",
                    "description": "The prefix of the token auth.\n"
                },
                "token": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "token"
            ]
        },
        "newrelic:index/NotificationDestinationProperty:NotificationDestinationProperty": {
            "properties": {
                "displayValue": {
                    "type": "string",
                    "description": "The notification property display value.\n\nEach notification destination type supports a specific set of arguments for the `property` block. See Additional Examples below for details:\n"
                },
                "key": {
                    "type": "string",
                    "description": "The notification property key.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The notification property label.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The notification property value.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "newrelic:index/NrqlAlertConditionCritical:NrqlAlertConditionCritical": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "In minutes, must be in the range of 1 to 120 (inclusive).\n",
                    "deprecationMessage": "use `threshold_duration` attribute instead"
                },
                "operator": {
                    "type": "string",
                    "description": "One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "For baseline conditions must be in range [1, 1000].\n"
                },
                "thresholdDuration": {
                    "type": "integer",
                    "description": "The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions\n"
                },
                "thresholdOccurrences": {
                    "type": "string",
                    "description": "The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).\n"
                },
                "timeFunction": {
                    "type": "string",
                    "description": "Valid values are: 'all' or 'any'\n",
                    "deprecationMessage": "use `threshold_occurrences` attribute instead"
                }
            },
            "type": "object",
            "required": [
                "threshold"
            ]
        },
        "newrelic:index/NrqlAlertConditionNrql:NrqlAlertConditionNrql": {
            "properties": {
                "evaluationOffset": {
                    "type": "integer",
                    "description": "NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `evaluation_offset`.\n",
                    "deprecationMessage": "use `aggregation_method` attribute instead"
                },
                "query": {
                    "type": "string"
                },
                "sinceValue": {
                    "type": "string",
                    "description": "NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `since_value`.\n",
                    "deprecationMessage": "use `aggregation_method` attribute instead"
                }
            },
            "type": "object",
            "required": [
                "query"
            ]
        },
        "newrelic:index/NrqlAlertConditionTerm:NrqlAlertConditionTerm": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "In minutes, must be in the range of 1 to 120 (inclusive).\n",
                    "deprecationMessage": "use `threshold_duration` attribute instead"
                },
                "operator": {
                    "type": "string",
                    "description": "One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.\n"
                },
                "priority": {
                    "type": "string",
                    "description": "One of (critical, warning). Defaults to 'critical'. At least one condition term must have priority set to 'critical'.\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "For baseline conditions must be in range [1, 1000].\n"
                },
                "thresholdDuration": {
                    "type": "integer",
                    "description": "The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions\n"
                },
                "thresholdOccurrences": {
                    "type": "string",
                    "description": "The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).\n"
                },
                "timeFunction": {
                    "type": "string",
                    "description": "Valid values are: 'all' or 'any'\n",
                    "deprecationMessage": "use `threshold_occurrences` attribute instead"
                }
            },
            "type": "object",
            "required": [
                "threshold"
            ]
        },
        "newrelic:index/NrqlAlertConditionWarning:NrqlAlertConditionWarning": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "In minutes, must be in the range of 1 to 120 (inclusive).\n",
                    "deprecationMessage": "use `threshold_duration` attribute instead"
                },
                "operator": {
                    "type": "string",
                    "description": "One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "For baseline conditions must be in range [1, 1000].\n"
                },
                "thresholdDuration": {
                    "type": "integer",
                    "description": "The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions\n"
                },
                "thresholdOccurrences": {
                    "type": "string",
                    "description": "The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).\n"
                },
                "timeFunction": {
                    "type": "string",
                    "description": "Valid values are: 'all' or 'any'\n",
                    "deprecationMessage": "use `threshold_occurrences` attribute instead"
                }
            },
            "type": "object",
            "required": [
                "threshold"
            ]
        },
        "newrelic:index/ObfuscationRuleAction:ObfuscationRuleAction": {
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Attribute names for action. An empty list applies the action to all the attributes.\n"
                },
                "expressionId": {
                    "type": "string",
                    "description": "Expression Id for action.\n"
                },
                "method": {
                    "type": "string",
                    "description": "Obfuscation method to use. Methods for replacing obfuscated values are `HASH_SHA256` and `MASK`.\n"
                }
            },
            "type": "object",
            "required": [
                "attributes",
                "expressionId",
                "method"
            ]
        },
        "newrelic:index/OneDashboardPage:OneDashboardPage": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Brief text describing the dashboard.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The unique entity identifier of the dashboard page in New Relic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the dashboard.\n"
                },
                "widgetAreas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetArea:OneDashboardPageWidgetArea"
                    },
                    "description": "An area widget.\n"
                },
                "widgetBars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBar:OneDashboardPageWidgetBar"
                    },
                    "description": "A bar widget.\n"
                },
                "widgetBillboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBillboard:OneDashboardPageWidgetBillboard"
                    },
                    "description": "A billboard widget.\n"
                },
                "widgetBullets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBullet:OneDashboardPageWidgetBullet"
                    },
                    "description": "A bullet widget.\n"
                },
                "widgetFunnels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetFunnel:OneDashboardPageWidgetFunnel"
                    },
                    "description": "A funnel widget.\n"
                },
                "widgetHeatmaps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHeatmap:OneDashboardPageWidgetHeatmap"
                    },
                    "description": "A heatmap widget.\n"
                },
                "widgetHistograms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHistogram:OneDashboardPageWidgetHistogram"
                    },
                    "description": "A histogram widget.\n"
                },
                "widgetJsons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetJson:OneDashboardPageWidgetJson"
                    },
                    "description": "A JSON widget.\n"
                },
                "widgetLines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLine:OneDashboardPageWidgetLine"
                    },
                    "description": "A line widget.\n"
                },
                "widgetLogTables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLogTable:OneDashboardPageWidgetLogTable"
                    },
                    "description": "A log table widget.\n"
                },
                "widgetMarkdowns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetMarkdown:OneDashboardPageWidgetMarkdown"
                    },
                    "description": "A markdown widget.\n"
                },
                "widgetPies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetPy:OneDashboardPageWidgetPy"
                    },
                    "description": "A pie widget.\n"
                },
                "widgetStackedBars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetStackedBar:OneDashboardPageWidgetStackedBar"
                    },
                    "description": "A stacked bar widget.\n"
                },
                "widgetTables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetTable:OneDashboardPageWidgetTable"
                    },
                    "description": "A table widget.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "guid",
                        "name"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetArea:OneDashboardPageWidgetArea": {
            "properties": {
                "colors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetAreaColor:OneDashboardPageWidgetAreaColor"
                    },
                    "description": "(Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.\n"
                },
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n"
                },
                "facetShowOtherSeries": {
                    "type": "boolean",
                    "description": "(Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`\n"
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the widget.\n"
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.\n"
                },
                "legendEnabled": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the legend will be displayed. Defaults to `true`.\n"
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetAreaNrqlQuery:OneDashboardPageWidgetAreaNrqlQuery"
                    },
                    "description": "(Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.\n"
                },
                "nullValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetAreaNullValue:OneDashboardPageWidgetAreaNullValue"
                    },
                    "description": "(Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.\n"
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "(Optional) A human-friendly display string for this value.\n"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetAreaUnit:OneDashboardPageWidgetAreaUnit"
                    },
                    "description": "(Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.\n"
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n"
                },
                "yAxisLeftMax": {
                    "type": "number"
                },
                "yAxisLeftMin": {
                    "type": "number",
                    "description": ", `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.\n"
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetAreaColor:OneDashboardPageWidgetAreaColor": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetAreaColorSeriesOverride:OneDashboardPageWidgetAreaColorSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetAreaColorSeriesOverride:OneDashboardPageWidgetAreaColorSeriesOverride": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetAreaNrqlQuery:OneDashboardPageWidgetAreaNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetAreaNullValue:OneDashboardPageWidgetAreaNullValue": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetAreaNullValueSeriesOverride:OneDashboardPageWidgetAreaNullValueSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetAreaNullValueSeriesOverride:OneDashboardPageWidgetAreaNullValueSeriesOverride": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetAreaUnit:OneDashboardPageWidgetAreaUnit": {
            "properties": {
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetAreaUnitSeriesOverride:OneDashboardPageWidgetAreaUnitSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetAreaUnitSeriesOverride:OneDashboardPageWidgetAreaUnitSeriesOverride": {
            "properties": {
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBar:OneDashboardPageWidgetBar": {
            "properties": {
                "colors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBarColor:OneDashboardPageWidgetBarColor"
                    },
                    "description": "(Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.\n"
                },
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n"
                },
                "facetShowOtherSeries": {
                    "type": "boolean",
                    "description": "(Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`\n"
                },
                "filterCurrentDashboard": {
                    "type": "boolean",
                    "description": "(Optional) Use this item to filter the current dashboard.\n"
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the widget.\n"
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.\n"
                },
                "legendEnabled": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the legend will be displayed. Defaults to `true`.\n"
                },
                "linkedEntityGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.\n"
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBarNrqlQuery:OneDashboardPageWidgetBarNrqlQuery"
                    },
                    "description": "(Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.\n"
                },
                "nullValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBarNullValue:OneDashboardPageWidgetBarNullValue"
                    },
                    "description": "(Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.\n"
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "(Optional) A human-friendly display string for this value.\n"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBarUnit:OneDashboardPageWidgetBarUnit"
                    },
                    "description": "(Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.\n"
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n"
                },
                "yAxisLeftMax": {
                    "type": "number"
                },
                "yAxisLeftMin": {
                    "type": "number",
                    "description": ", `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.\n"
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "linkedEntityGuids",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetBarColor:OneDashboardPageWidgetBarColor": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBarColorSeriesOverride:OneDashboardPageWidgetBarColorSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBarColorSeriesOverride:OneDashboardPageWidgetBarColorSeriesOverride": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBarNrqlQuery:OneDashboardPageWidgetBarNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetBarNullValue:OneDashboardPageWidgetBarNullValue": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBarNullValueSeriesOverride:OneDashboardPageWidgetBarNullValueSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBarNullValueSeriesOverride:OneDashboardPageWidgetBarNullValueSeriesOverride": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBarUnit:OneDashboardPageWidgetBarUnit": {
            "properties": {
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBarUnitSeriesOverride:OneDashboardPageWidgetBarUnitSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBarUnitSeriesOverride:OneDashboardPageWidgetBarUnitSeriesOverride": {
            "properties": {
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBillboard:OneDashboardPageWidgetBillboard": {
            "properties": {
                "colors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBillboardColor:OneDashboardPageWidgetBillboardColor"
                    },
                    "description": "(Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.\n"
                },
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n"
                },
                "critical": {
                    "type": "string",
                    "description": "(Optional) Threshold above which the displayed value will be styled with a red color.\n"
                },
                "facetShowOtherSeries": {
                    "type": "boolean",
                    "description": "(Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`\n"
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the widget.\n"
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.\n"
                },
                "legendEnabled": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the legend will be displayed. Defaults to `true`.\n"
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBillboardNrqlQuery:OneDashboardPageWidgetBillboardNrqlQuery"
                    },
                    "description": "(Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.\n"
                },
                "nullValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBillboardNullValue:OneDashboardPageWidgetBillboardNullValue"
                    },
                    "description": "(Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.\n"
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "(Optional) A human-friendly display string for this value.\n"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBillboardUnit:OneDashboardPageWidgetBillboardUnit"
                    },
                    "description": "(Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.\n"
                },
                "warning": {
                    "type": "string",
                    "description": "(Optional) Threshold above which the displayed value will be styled with a yellow color.\n"
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n"
                },
                "yAxisLeftMax": {
                    "type": "number"
                },
                "yAxisLeftMin": {
                    "type": "number",
                    "description": ", `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.\n"
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetBillboardColor:OneDashboardPageWidgetBillboardColor": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBillboardColorSeriesOverride:OneDashboardPageWidgetBillboardColorSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBillboardColorSeriesOverride:OneDashboardPageWidgetBillboardColorSeriesOverride": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBillboardNrqlQuery:OneDashboardPageWidgetBillboardNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetBillboardNullValue:OneDashboardPageWidgetBillboardNullValue": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBillboardNullValueSeriesOverride:OneDashboardPageWidgetBillboardNullValueSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBillboardNullValueSeriesOverride:OneDashboardPageWidgetBillboardNullValueSeriesOverride": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBillboardUnit:OneDashboardPageWidgetBillboardUnit": {
            "properties": {
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBillboardUnitSeriesOverride:OneDashboardPageWidgetBillboardUnitSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBillboardUnitSeriesOverride:OneDashboardPageWidgetBillboardUnitSeriesOverride": {
            "properties": {
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBullet:OneDashboardPageWidgetBullet": {
            "properties": {
                "colors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBulletColor:OneDashboardPageWidgetBulletColor"
                    },
                    "description": "(Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.\n"
                },
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n"
                },
                "facetShowOtherSeries": {
                    "type": "boolean",
                    "description": "(Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`\n"
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the widget.\n"
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.\n"
                },
                "legendEnabled": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the legend will be displayed. Defaults to `true`.\n"
                },
                "limit": {
                    "type": "number",
                    "description": "(Required) Visualization limit for the widget.\n"
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBulletNrqlQuery:OneDashboardPageWidgetBulletNrqlQuery"
                    },
                    "description": "(Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.\n"
                },
                "nullValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBulletNullValue:OneDashboardPageWidgetBulletNullValue"
                    },
                    "description": "(Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.\n"
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "(Optional) A human-friendly display string for this value.\n"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBulletUnit:OneDashboardPageWidgetBulletUnit"
                    },
                    "description": "(Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.\n"
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n"
                },
                "yAxisLeftMax": {
                    "type": "number"
                },
                "yAxisLeftMin": {
                    "type": "number",
                    "description": ", `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.\n"
                }
            },
            "type": "object",
            "required": [
                "column",
                "limit",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "limit",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetBulletColor:OneDashboardPageWidgetBulletColor": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBulletColorSeriesOverride:OneDashboardPageWidgetBulletColorSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBulletColorSeriesOverride:OneDashboardPageWidgetBulletColorSeriesOverride": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBulletNrqlQuery:OneDashboardPageWidgetBulletNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetBulletNullValue:OneDashboardPageWidgetBulletNullValue": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBulletNullValueSeriesOverride:OneDashboardPageWidgetBulletNullValueSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBulletNullValueSeriesOverride:OneDashboardPageWidgetBulletNullValueSeriesOverride": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBulletUnit:OneDashboardPageWidgetBulletUnit": {
            "properties": {
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBulletUnitSeriesOverride:OneDashboardPageWidgetBulletUnitSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetBulletUnitSeriesOverride:OneDashboardPageWidgetBulletUnitSeriesOverride": {
            "properties": {
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetFunnel:OneDashboardPageWidgetFunnel": {
            "properties": {
                "colors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetFunnelColor:OneDashboardPageWidgetFunnelColor"
                    },
                    "description": "(Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.\n"
                },
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n"
                },
                "facetShowOtherSeries": {
                    "type": "boolean",
                    "description": "(Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`\n"
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the widget.\n"
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.\n"
                },
                "legendEnabled": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the legend will be displayed. Defaults to `true`.\n"
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetFunnelNrqlQuery:OneDashboardPageWidgetFunnelNrqlQuery"
                    },
                    "description": "(Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.\n"
                },
                "nullValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetFunnelNullValue:OneDashboardPageWidgetFunnelNullValue"
                    },
                    "description": "(Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.\n"
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "(Optional) A human-friendly display string for this value.\n"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetFunnelUnit:OneDashboardPageWidgetFunnelUnit"
                    },
                    "description": "(Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.\n"
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n"
                },
                "yAxisLeftMax": {
                    "type": "number"
                },
                "yAxisLeftMin": {
                    "type": "number",
                    "description": ", `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.\n"
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetFunnelColor:OneDashboardPageWidgetFunnelColor": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetFunnelColorSeriesOverride:OneDashboardPageWidgetFunnelColorSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetFunnelColorSeriesOverride:OneDashboardPageWidgetFunnelColorSeriesOverride": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetFunnelNrqlQuery:OneDashboardPageWidgetFunnelNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetFunnelNullValue:OneDashboardPageWidgetFunnelNullValue": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetFunnelNullValueSeriesOverride:OneDashboardPageWidgetFunnelNullValueSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetFunnelNullValueSeriesOverride:OneDashboardPageWidgetFunnelNullValueSeriesOverride": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetFunnelUnit:OneDashboardPageWidgetFunnelUnit": {
            "properties": {
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetFunnelUnitSeriesOverride:OneDashboardPageWidgetFunnelUnitSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetFunnelUnitSeriesOverride:OneDashboardPageWidgetFunnelUnitSeriesOverride": {
            "properties": {
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetHeatmap:OneDashboardPageWidgetHeatmap": {
            "properties": {
                "colors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHeatmapColor:OneDashboardPageWidgetHeatmapColor"
                    },
                    "description": "(Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.\n"
                },
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n"
                },
                "facetShowOtherSeries": {
                    "type": "boolean",
                    "description": "(Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`\n"
                },
                "filterCurrentDashboard": {
                    "type": "boolean",
                    "description": "(Optional) Use this item to filter the current dashboard.\n"
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the widget.\n"
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.\n"
                },
                "legendEnabled": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the legend will be displayed. Defaults to `true`.\n"
                },
                "linkedEntityGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.\n"
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHeatmapNrqlQuery:OneDashboardPageWidgetHeatmapNrqlQuery"
                    },
                    "description": "(Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.\n"
                },
                "nullValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHeatmapNullValue:OneDashboardPageWidgetHeatmapNullValue"
                    },
                    "description": "(Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.\n"
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "(Optional) A human-friendly display string for this value.\n"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHeatmapUnit:OneDashboardPageWidgetHeatmapUnit"
                    },
                    "description": "(Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.\n"
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n"
                },
                "yAxisLeftMax": {
                    "type": "number"
                },
                "yAxisLeftMin": {
                    "type": "number",
                    "description": ", `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.\n"
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "linkedEntityGuids",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetHeatmapColor:OneDashboardPageWidgetHeatmapColor": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHeatmapColorSeriesOverride:OneDashboardPageWidgetHeatmapColorSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetHeatmapColorSeriesOverride:OneDashboardPageWidgetHeatmapColorSeriesOverride": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetHeatmapNrqlQuery:OneDashboardPageWidgetHeatmapNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetHeatmapNullValue:OneDashboardPageWidgetHeatmapNullValue": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHeatmapNullValueSeriesOverride:OneDashboardPageWidgetHeatmapNullValueSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetHeatmapNullValueSeriesOverride:OneDashboardPageWidgetHeatmapNullValueSeriesOverride": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetHeatmapUnit:OneDashboardPageWidgetHeatmapUnit": {
            "properties": {
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHeatmapUnitSeriesOverride:OneDashboardPageWidgetHeatmapUnitSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetHeatmapUnitSeriesOverride:OneDashboardPageWidgetHeatmapUnitSeriesOverride": {
            "properties": {
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetHistogram:OneDashboardPageWidgetHistogram": {
            "properties": {
                "colors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHistogramColor:OneDashboardPageWidgetHistogramColor"
                    },
                    "description": "(Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.\n"
                },
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n"
                },
                "facetShowOtherSeries": {
                    "type": "boolean",
                    "description": "(Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`\n"
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the widget.\n"
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.\n"
                },
                "legendEnabled": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the legend will be displayed. Defaults to `true`.\n"
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHistogramNrqlQuery:OneDashboardPageWidgetHistogramNrqlQuery"
                    },
                    "description": "(Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.\n"
                },
                "nullValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHistogramNullValue:OneDashboardPageWidgetHistogramNullValue"
                    },
                    "description": "(Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.\n"
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "(Optional) A human-friendly display string for this value.\n"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHistogramUnit:OneDashboardPageWidgetHistogramUnit"
                    },
                    "description": "(Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.\n"
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n"
                },
                "yAxisLeftMax": {
                    "type": "number"
                },
                "yAxisLeftMin": {
                    "type": "number",
                    "description": ", `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.\n"
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetHistogramColor:OneDashboardPageWidgetHistogramColor": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHistogramColorSeriesOverride:OneDashboardPageWidgetHistogramColorSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetHistogramColorSeriesOverride:OneDashboardPageWidgetHistogramColorSeriesOverride": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetHistogramNrqlQuery:OneDashboardPageWidgetHistogramNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetHistogramNullValue:OneDashboardPageWidgetHistogramNullValue": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHistogramNullValueSeriesOverride:OneDashboardPageWidgetHistogramNullValueSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetHistogramNullValueSeriesOverride:OneDashboardPageWidgetHistogramNullValueSeriesOverride": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetHistogramUnit:OneDashboardPageWidgetHistogramUnit": {
            "properties": {
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHistogramUnitSeriesOverride:OneDashboardPageWidgetHistogramUnitSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetHistogramUnitSeriesOverride:OneDashboardPageWidgetHistogramUnitSeriesOverride": {
            "properties": {
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetJson:OneDashboardPageWidgetJson": {
            "properties": {
                "colors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetJsonColor:OneDashboardPageWidgetJsonColor"
                    },
                    "description": "(Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.\n"
                },
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n"
                },
                "facetShowOtherSeries": {
                    "type": "boolean",
                    "description": "(Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`\n"
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the widget.\n"
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.\n"
                },
                "legendEnabled": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the legend will be displayed. Defaults to `true`.\n"
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetJsonNrqlQuery:OneDashboardPageWidgetJsonNrqlQuery"
                    },
                    "description": "(Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.\n"
                },
                "nullValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetJsonNullValue:OneDashboardPageWidgetJsonNullValue"
                    },
                    "description": "(Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.\n"
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "(Optional) A human-friendly display string for this value.\n"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetJsonUnit:OneDashboardPageWidgetJsonUnit"
                    },
                    "description": "(Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.\n"
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n"
                },
                "yAxisLeftMax": {
                    "type": "number"
                },
                "yAxisLeftMin": {
                    "type": "number",
                    "description": ", `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.\n"
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetJsonColor:OneDashboardPageWidgetJsonColor": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetJsonColorSeriesOverride:OneDashboardPageWidgetJsonColorSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetJsonColorSeriesOverride:OneDashboardPageWidgetJsonColorSeriesOverride": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetJsonNrqlQuery:OneDashboardPageWidgetJsonNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetJsonNullValue:OneDashboardPageWidgetJsonNullValue": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetJsonNullValueSeriesOverride:OneDashboardPageWidgetJsonNullValueSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetJsonNullValueSeriesOverride:OneDashboardPageWidgetJsonNullValueSeriesOverride": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetJsonUnit:OneDashboardPageWidgetJsonUnit": {
            "properties": {
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetJsonUnitSeriesOverride:OneDashboardPageWidgetJsonUnitSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetJsonUnitSeriesOverride:OneDashboardPageWidgetJsonUnitSeriesOverride": {
            "properties": {
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetLine:OneDashboardPageWidgetLine": {
            "properties": {
                "colors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLineColor:OneDashboardPageWidgetLineColor"
                    },
                    "description": "(Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.\n"
                },
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n"
                },
                "facetShowOtherSeries": {
                    "type": "boolean",
                    "description": "(Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`\n"
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the widget.\n"
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.\n"
                },
                "legendEnabled": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the legend will be displayed. Defaults to `true`.\n"
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLineNrqlQuery:OneDashboardPageWidgetLineNrqlQuery"
                    },
                    "description": "(Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.\n"
                },
                "nullValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLineNullValue:OneDashboardPageWidgetLineNullValue"
                    },
                    "description": "(Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.\n"
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "(Optional) A human-friendly display string for this value.\n"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLineUnit:OneDashboardPageWidgetLineUnit"
                    },
                    "description": "(Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.\n"
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n"
                },
                "yAxisLeftMax": {
                    "type": "number"
                },
                "yAxisLeftMin": {
                    "type": "number",
                    "description": ", `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.\n"
                },
                "yAxisLeftZero": {
                    "type": "boolean",
                    "description": "(Optional) An attribute that specifies if the values on the graph to be rendered need to be fit to scale, or printed within the specified range from `y_axis_left_min` (or 0 if it is not defined) to `y_axis_left_max`. Use `y_axis_left_zero = true` with a combination of `y_axis_left_min` and `y_axis_left_max` to render values from 0 or the specified minimum to the maximum, and `y_axis_left_zero = false` to fit the graph to scale.\n"
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetLineColor:OneDashboardPageWidgetLineColor": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLineColorSeriesOverride:OneDashboardPageWidgetLineColorSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetLineColorSeriesOverride:OneDashboardPageWidgetLineColorSeriesOverride": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetLineNrqlQuery:OneDashboardPageWidgetLineNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetLineNullValue:OneDashboardPageWidgetLineNullValue": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLineNullValueSeriesOverride:OneDashboardPageWidgetLineNullValueSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetLineNullValueSeriesOverride:OneDashboardPageWidgetLineNullValueSeriesOverride": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetLineUnit:OneDashboardPageWidgetLineUnit": {
            "properties": {
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLineUnitSeriesOverride:OneDashboardPageWidgetLineUnitSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetLineUnitSeriesOverride:OneDashboardPageWidgetLineUnitSeriesOverride": {
            "properties": {
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetLogTable:OneDashboardPageWidgetLogTable": {
            "properties": {
                "colors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLogTableColor:OneDashboardPageWidgetLogTableColor"
                    },
                    "description": "(Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.\n"
                },
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n"
                },
                "facetShowOtherSeries": {
                    "type": "boolean",
                    "description": "(Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`\n"
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the widget.\n"
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.\n"
                },
                "legendEnabled": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the legend will be displayed. Defaults to `true`.\n"
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLogTableNrqlQuery:OneDashboardPageWidgetLogTableNrqlQuery"
                    },
                    "description": "(Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.\n"
                },
                "nullValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLogTableNullValue:OneDashboardPageWidgetLogTableNullValue"
                    },
                    "description": "(Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.\n"
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "(Optional) A human-friendly display string for this value.\n"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLogTableUnit:OneDashboardPageWidgetLogTableUnit"
                    },
                    "description": "(Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.\n"
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n"
                },
                "yAxisLeftMax": {
                    "type": "number"
                },
                "yAxisLeftMin": {
                    "type": "number",
                    "description": ", `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.\n"
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetLogTableColor:OneDashboardPageWidgetLogTableColor": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLogTableColorSeriesOverride:OneDashboardPageWidgetLogTableColorSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetLogTableColorSeriesOverride:OneDashboardPageWidgetLogTableColorSeriesOverride": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetLogTableNrqlQuery:OneDashboardPageWidgetLogTableNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetLogTableNullValue:OneDashboardPageWidgetLogTableNullValue": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLogTableNullValueSeriesOverride:OneDashboardPageWidgetLogTableNullValueSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetLogTableNullValueSeriesOverride:OneDashboardPageWidgetLogTableNullValueSeriesOverride": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetLogTableUnit:OneDashboardPageWidgetLogTableUnit": {
            "properties": {
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLogTableUnitSeriesOverride:OneDashboardPageWidgetLogTableUnitSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetLogTableUnitSeriesOverride:OneDashboardPageWidgetLogTableUnitSeriesOverride": {
            "properties": {
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetMarkdown:OneDashboardPageWidgetMarkdown": {
            "properties": {
                "colors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetMarkdownColor:OneDashboardPageWidgetMarkdownColor"
                    },
                    "description": "(Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.\n"
                },
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n"
                },
                "facetShowOtherSeries": {
                    "type": "boolean",
                    "description": "(Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`\n"
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the widget.\n"
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.\n"
                },
                "legendEnabled": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the legend will be displayed. Defaults to `true`.\n"
                },
                "nullValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetMarkdownNullValue:OneDashboardPageWidgetMarkdownNullValue"
                    },
                    "description": "(Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.\n"
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n"
                },
                "text": {
                    "type": "string",
                    "description": "(Required) The markdown source to be rendered in the widget.\n"
                },
                "title": {
                    "type": "string",
                    "description": "(Optional) A human-friendly display string for this value.\n"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetMarkdownUnit:OneDashboardPageWidgetMarkdownUnit"
                    },
                    "description": "(Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.\n"
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n"
                },
                "yAxisLeftMax": {
                    "type": "number"
                },
                "yAxisLeftMin": {
                    "type": "number",
                    "description": ", `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.\n"
                }
            },
            "type": "object",
            "required": [
                "column",
                "row",
                "text",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "row",
                        "text",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetMarkdownColor:OneDashboardPageWidgetMarkdownColor": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetMarkdownColorSeriesOverride:OneDashboardPageWidgetMarkdownColorSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetMarkdownColorSeriesOverride:OneDashboardPageWidgetMarkdownColorSeriesOverride": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetMarkdownNullValue:OneDashboardPageWidgetMarkdownNullValue": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetMarkdownNullValueSeriesOverride:OneDashboardPageWidgetMarkdownNullValueSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetMarkdownNullValueSeriesOverride:OneDashboardPageWidgetMarkdownNullValueSeriesOverride": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetMarkdownUnit:OneDashboardPageWidgetMarkdownUnit": {
            "properties": {
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetMarkdownUnitSeriesOverride:OneDashboardPageWidgetMarkdownUnitSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetMarkdownUnitSeriesOverride:OneDashboardPageWidgetMarkdownUnitSeriesOverride": {
            "properties": {
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetPy:OneDashboardPageWidgetPy": {
            "properties": {
                "colors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetPyColor:OneDashboardPageWidgetPyColor"
                    },
                    "description": "(Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.\n"
                },
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n"
                },
                "facetShowOtherSeries": {
                    "type": "boolean",
                    "description": "(Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`\n"
                },
                "filterCurrentDashboard": {
                    "type": "boolean",
                    "description": "(Optional) Use this item to filter the current dashboard.\n"
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the widget.\n"
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.\n"
                },
                "legendEnabled": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the legend will be displayed. Defaults to `true`.\n"
                },
                "linkedEntityGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.\n"
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetPyNrqlQuery:OneDashboardPageWidgetPyNrqlQuery"
                    },
                    "description": "(Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.\n"
                },
                "nullValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetPyNullValue:OneDashboardPageWidgetPyNullValue"
                    },
                    "description": "(Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.\n"
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "(Optional) A human-friendly display string for this value.\n"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetPyUnit:OneDashboardPageWidgetPyUnit"
                    },
                    "description": "(Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.\n"
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n"
                },
                "yAxisLeftMax": {
                    "type": "number"
                },
                "yAxisLeftMin": {
                    "type": "number",
                    "description": ", `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.\n"
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "linkedEntityGuids",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetPyColor:OneDashboardPageWidgetPyColor": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetPyColorSeriesOverride:OneDashboardPageWidgetPyColorSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetPyColorSeriesOverride:OneDashboardPageWidgetPyColorSeriesOverride": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetPyNrqlQuery:OneDashboardPageWidgetPyNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetPyNullValue:OneDashboardPageWidgetPyNullValue": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetPyNullValueSeriesOverride:OneDashboardPageWidgetPyNullValueSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetPyNullValueSeriesOverride:OneDashboardPageWidgetPyNullValueSeriesOverride": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetPyUnit:OneDashboardPageWidgetPyUnit": {
            "properties": {
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetPyUnitSeriesOverride:OneDashboardPageWidgetPyUnitSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetPyUnitSeriesOverride:OneDashboardPageWidgetPyUnitSeriesOverride": {
            "properties": {
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetStackedBar:OneDashboardPageWidgetStackedBar": {
            "properties": {
                "colors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetStackedBarColor:OneDashboardPageWidgetStackedBarColor"
                    },
                    "description": "(Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.\n"
                },
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n"
                },
                "facetShowOtherSeries": {
                    "type": "boolean",
                    "description": "(Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`\n"
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the widget.\n"
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.\n"
                },
                "legendEnabled": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the legend will be displayed. Defaults to `true`.\n"
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetStackedBarNrqlQuery:OneDashboardPageWidgetStackedBarNrqlQuery"
                    },
                    "description": "(Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.\n"
                },
                "nullValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetStackedBarNullValue:OneDashboardPageWidgetStackedBarNullValue"
                    },
                    "description": "(Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.\n"
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "(Optional) A human-friendly display string for this value.\n"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetStackedBarUnit:OneDashboardPageWidgetStackedBarUnit"
                    },
                    "description": "(Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.\n"
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n"
                },
                "yAxisLeftMax": {
                    "type": "number"
                },
                "yAxisLeftMin": {
                    "type": "number",
                    "description": ", `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.\n"
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetStackedBarColor:OneDashboardPageWidgetStackedBarColor": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetStackedBarColorSeriesOverride:OneDashboardPageWidgetStackedBarColorSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetStackedBarColorSeriesOverride:OneDashboardPageWidgetStackedBarColorSeriesOverride": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetStackedBarNrqlQuery:OneDashboardPageWidgetStackedBarNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetStackedBarNullValue:OneDashboardPageWidgetStackedBarNullValue": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetStackedBarNullValueSeriesOverride:OneDashboardPageWidgetStackedBarNullValueSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetStackedBarNullValueSeriesOverride:OneDashboardPageWidgetStackedBarNullValueSeriesOverride": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetStackedBarUnit:OneDashboardPageWidgetStackedBarUnit": {
            "properties": {
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetStackedBarUnitSeriesOverride:OneDashboardPageWidgetStackedBarUnitSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetStackedBarUnitSeriesOverride:OneDashboardPageWidgetStackedBarUnitSeriesOverride": {
            "properties": {
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetTable:OneDashboardPageWidgetTable": {
            "properties": {
                "colors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetTableColor:OneDashboardPageWidgetTableColor"
                    },
                    "description": "(Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.\n"
                },
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n"
                },
                "facetShowOtherSeries": {
                    "type": "boolean",
                    "description": "(Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to `false`\n"
                },
                "filterCurrentDashboard": {
                    "type": "boolean",
                    "description": "(Optional) Use this item to filter the current dashboard.\n"
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the widget.\n"
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to `false`.\n"
                },
                "legendEnabled": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the legend will be displayed. Defaults to `true`.\n"
                },
                "linkedEntityGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.\n"
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetTableNrqlQuery:OneDashboardPageWidgetTableNrqlQuery"
                    },
                    "description": "(Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.\n"
                },
                "nullValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetTableNullValue:OneDashboardPageWidgetTableNullValue"
                    },
                    "description": "(Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.\n"
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "(Optional) A human-friendly display string for this value.\n"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetTableUnit:OneDashboardPageWidgetTableUnit"
                    },
                    "description": "(Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.\n"
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n"
                },
                "yAxisLeftMax": {
                    "type": "number"
                },
                "yAxisLeftMin": {
                    "type": "number",
                    "description": ", `y_axis_left_max` - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.\n"
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "linkedEntityGuids",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetTableColor:OneDashboardPageWidgetTableColor": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetTableColorSeriesOverride:OneDashboardPageWidgetTableColorSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetTableColorSeriesOverride:OneDashboardPageWidgetTableColorSeriesOverride": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "(Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetTableNrqlQuery:OneDashboardPageWidgetTableNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetTableNullValue:OneDashboardPageWidgetTableNullValue": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetTableNullValueSeriesOverride:OneDashboardPageWidgetTableNullValueSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetTableNullValueSeriesOverride:OneDashboardPageWidgetTableNullValueSeriesOverride": {
            "properties": {
                "nullValue": {
                    "type": "string",
                    "description": "Choose an option in displaying null values. Accepted values are `default`, `remove`, `preserve`, or `zero`.\n"
                },
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetTableUnit:OneDashboardPageWidgetTableUnit": {
            "properties": {
                "seriesOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetTableUnitSeriesOverride:OneDashboardPageWidgetTableUnitSeriesOverride"
                    },
                    "description": "(Optional) A Nested block which will take two string attributes `color` and `series_name`. This nested block is used to customize colors of individual.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardPageWidgetTableUnitSeriesOverride:OneDashboardPageWidgetTableUnitSeriesOverride": {
            "properties": {
                "seriesName": {
                    "type": "string",
                    "description": "Series name\n"
                },
                "unit": {
                    "type": "string",
                    "description": "(Optional) Choose a unit to customize the unit on your Y axis and in each of your series.\n"
                }
            },
            "type": "object"
        },
        "newrelic:index/OneDashboardRawPage:OneDashboardRawPage": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Brief text describing the dashboard.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The unique entity identifier of the dashboard page in New Relic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the dashboard.\n"
                },
                "widgets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardRawPageWidget:OneDashboardRawPageWidget"
                    },
                    "description": "(Optional) A nested block that describes a widget. See Nested widget blocks below for details.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "guid",
                        "name"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardRawPageWidget:OneDashboardRawPageWidget": {
            "properties": {
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n"
                },
                "configuration": {
                    "type": "string",
                    "description": "(Required) The configuration of the widget.\n"
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the widget.\n"
                },
                "linkedEntityGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) Related entity GUIDs.\n"
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "(Required) A title for the widget.\n"
                },
                "visualizationId": {
                    "type": "string",
                    "description": "(Required) The visualization ID of the widget\n"
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.\n"
                }
            },
            "type": "object",
            "required": [
                "column",
                "configuration",
                "row",
                "title",
                "visualizationId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "configuration",
                        "id",
                        "row",
                        "title",
                        "visualizationId"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardVariable:OneDashboardVariable": {
            "properties": {
                "defaultValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) A list of default values for this variable. To select **all** default values, the appropriate value to be used with this argument would be `[\"*\"]`.\n"
                },
                "isMultiSelection": {
                    "type": "boolean",
                    "description": "(Optional) Indicates whether this variable supports multiple selection or not. Only applies to variables of type `nrql` or `enum`.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardVariableItem:OneDashboardVariableItem"
                    },
                    "description": "(Optional) List of possible values for variables of type `enum`. See Nested item blocks below for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the dashboard.\n"
                },
                "nrqlQuery": {
                    "$ref": "#/types/newrelic:index/OneDashboardVariableNrqlQuery:OneDashboardVariableNrqlQuery",
                    "description": "(Optional) Configuration for variables of type `nrql`. See Nested nrql\\_query blocks for details.\n"
                },
                "replacementStrategy": {
                    "type": "string",
                    "description": "(Optional) Indicates the strategy to apply when replacing a variable in a NRQL query. One of `default`, `identifier`, `number` or `string`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "(Optional) A human-friendly display string for this value.\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Required) Specifies the data type of the variable and where its possible values may come from. One of `enum`, `nrql` or `string`\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "replacementStrategy",
                "title",
                "type"
            ]
        },
        "newrelic:index/OneDashboardVariableItem:OneDashboardVariableItem": {
            "properties": {
                "title": {
                    "type": "string",
                    "description": "(Optional) A human-friendly display string for this value.\n"
                },
                "value": {
                    "type": "string",
                    "description": "(Required) A possible variable value\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "newrelic:index/OneDashboardVariableNrqlQuery:OneDashboardVariableNrqlQuery": {
            "properties": {
                "accountIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "New Relic account ID(s) to issue the query against.\n"
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ]
        },
        "newrelic:index/ServiceLevelEvents:ServiceLevelEvents": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,\nand that contains the NRDB data for the SLI/SLO calculations. Note that changing the account ID will force a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "badEvents": {
                    "$ref": "#/types/newrelic:index/ServiceLevelEventsBadEvents:ServiceLevelEventsBadEvents",
                    "description": "The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.\n"
                },
                "goodEvents": {
                    "$ref": "#/types/newrelic:index/ServiceLevelEventsGoodEvents:ServiceLevelEventsGoodEvents",
                    "description": "The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.\n"
                },
                "validEvents": {
                    "$ref": "#/types/newrelic:index/ServiceLevelEventsValidEvents:ServiceLevelEventsValidEvents",
                    "description": "The definition of valid requests.\n"
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "validEvents"
            ]
        },
        "newrelic:index/ServiceLevelEventsBadEvents:ServiceLevelEventsBadEvents": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "The event type where NRDB data will be fetched from.\n"
                },
                "select": {
                    "$ref": "#/types/newrelic:index/ServiceLevelEventsBadEventsSelect:ServiceLevelEventsBadEventsSelect",
                    "description": "The NRQL SELECT clause to aggregate events.\n"
                },
                "where": {
                    "type": "string",
                    "description": "A filter that narrows down the NRDB events just to those that are considered bad responses (e.g, those that refer to\na particular entity and returned an error).\n"
                }
            },
            "type": "object",
            "required": [
                "from"
            ]
        },
        "newrelic:index/ServiceLevelEventsBadEventsSelect:ServiceLevelEventsBadEventsSelect": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "The event attribute to use in the SELECT clause.\n"
                },
                "function": {
                    "type": "string",
                    "description": "The function to use in the SELECT clause. Valid values are `COUNT`, `SUM`, `GET_FIELD`, and `GET_CDF_COUNT`.\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "Limit for values to be counter by `GET_CDF_COUNT` function.\n"
                }
            },
            "type": "object",
            "required": [
                "function"
            ]
        },
        "newrelic:index/ServiceLevelEventsGoodEvents:ServiceLevelEventsGoodEvents": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "The event type where NRDB data will be fetched from.\n"
                },
                "select": {
                    "$ref": "#/types/newrelic:index/ServiceLevelEventsGoodEventsSelect:ServiceLevelEventsGoodEventsSelect",
                    "description": "The NRQL SELECT clause to aggregate events.\n"
                },
                "where": {
                    "type": "string",
                    "description": "A filter that narrows down the NRDB events just to those that are considered bad responses (e.g, those that refer to\na particular entity and returned an error).\n"
                }
            },
            "type": "object",
            "required": [
                "from"
            ]
        },
        "newrelic:index/ServiceLevelEventsGoodEventsSelect:ServiceLevelEventsGoodEventsSelect": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "The event attribute to use in the SELECT clause.\n"
                },
                "function": {
                    "type": "string",
                    "description": "The function to use in the SELECT clause. Valid values are `COUNT`, `SUM`, `GET_FIELD`, and `GET_CDF_COUNT`.\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "Limit for values to be counter by `GET_CDF_COUNT` function.\n"
                }
            },
            "type": "object",
            "required": [
                "function"
            ]
        },
        "newrelic:index/ServiceLevelEventsValidEvents:ServiceLevelEventsValidEvents": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "The event type where NRDB data will be fetched from.\n"
                },
                "select": {
                    "$ref": "#/types/newrelic:index/ServiceLevelEventsValidEventsSelect:ServiceLevelEventsValidEventsSelect",
                    "description": "The NRQL SELECT clause to aggregate events.\n"
                },
                "where": {
                    "type": "string",
                    "description": "A filter that narrows down the NRDB events just to those that are considered bad responses (e.g, those that refer to\na particular entity and returned an error).\n"
                }
            },
            "type": "object",
            "required": [
                "from"
            ]
        },
        "newrelic:index/ServiceLevelEventsValidEventsSelect:ServiceLevelEventsValidEventsSelect": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "The event attribute to use in the SELECT clause.\n"
                },
                "function": {
                    "type": "string",
                    "description": "The function to use in the SELECT clause. Valid values are `COUNT`, `SUM`, `GET_FIELD`, and `GET_CDF_COUNT`.\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "Limit for values to be counter by `GET_CDF_COUNT` function.\n"
                }
            },
            "type": "object",
            "required": [
                "function"
            ]
        },
        "newrelic:index/ServiceLevelObjective:ServiceLevelObjective": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the SLI.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A short name for the SLI that will help anyone understand what it is about.\n"
                },
                "target": {
                    "type": "number",
                    "description": "The target of the objective, valid values between `0` and `100`. Up to 5 decimals accepted.\n"
                },
                "timeWindow": {
                    "$ref": "#/types/newrelic:index/ServiceLevelObjectiveTimeWindow:ServiceLevelObjectiveTimeWindow",
                    "description": "Time window is the period of the objective.\n"
                }
            },
            "type": "object",
            "required": [
                "target",
                "timeWindow"
            ]
        },
        "newrelic:index/ServiceLevelObjectiveTimeWindow:ServiceLevelObjectiveTimeWindow": {
            "properties": {
                "rolling": {
                    "$ref": "#/types/newrelic:index/ServiceLevelObjectiveTimeWindowRolling:ServiceLevelObjectiveTimeWindowRolling",
                    "description": "Rolling window.\n"
                }
            },
            "type": "object",
            "required": [
                "rolling"
            ]
        },
        "newrelic:index/ServiceLevelObjectiveTimeWindowRolling:ServiceLevelObjectiveTimeWindowRolling": {
            "properties": {
                "count": {
                    "type": "integer",
                    "description": "Valid values are `1`, `7` and `28`.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "The only supported value is `DAY`.\n"
                }
            },
            "type": "object",
            "required": [
                "count",
                "unit"
            ]
        },
        "newrelic:index/WorkflowDestination:WorkflowDestination": {
            "properties": {
                "channelId": {
                    "type": "string",
                    "description": "Id of a notification_channel to use for notifications. Please note that you have to use a \n**notification** channel, not an `alert_channel`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workflow.\n"
                },
                "notificationTriggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Issue events to notify on. The value is a list of possible issue events. See Notification Triggers below for details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the filter. Please just set this field to `FILTER`. The field is likely to be deprecated/removed in the near future.\n"
                }
            },
            "type": "object",
            "required": [
                "channelId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "channelId",
                        "name",
                        "notificationTriggers",
                        "type"
                    ]
                }
            }
        },
        "newrelic:index/WorkflowEnrichments:WorkflowEnrichments": {
            "properties": {
                "nrqls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/WorkflowEnrichmentsNrql:WorkflowEnrichmentsNrql"
                    },
                    "description": "a wrapper block\n"
                }
            },
            "type": "object",
            "required": [
                "nrqls"
            ]
        },
        "newrelic:index/WorkflowEnrichmentsNrql:WorkflowEnrichmentsNrql": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.\n"
                },
                "configurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/WorkflowEnrichmentsNrqlConfiguration:WorkflowEnrichmentsNrqlConfiguration"
                    },
                    "description": "Another wrapper block\n"
                },
                "enrichmentId": {
                    "type": "string",
                    "description": "Enrichment's id.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workflow.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the filter. Please just set this field to `FILTER`. The field is likely to be deprecated/removed in the near future.\n"
                }
            },
            "type": "object",
            "required": [
                "configurations",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "configurations",
                        "enrichmentId",
                        "name",
                        "type"
                    ]
                }
            }
        },
        "newrelic:index/WorkflowEnrichmentsNrqlConfiguration:WorkflowEnrichmentsNrqlConfiguration": {
            "properties": {
                "query": {
                    "type": "string",
                    "description": "An NRQL query to run\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ]
        },
        "newrelic:index/WorkflowIssuesFilter:WorkflowIssuesFilter": {
            "properties": {
                "filterId": {
                    "type": "string",
                    "description": "filter id.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Required) Filter's name.\n"
                },
                "predicates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/WorkflowIssuesFilterPredicate:WorkflowIssuesFilterPredicate"
                    },
                    "description": "A condition an issue event should satisfy to be processed by the workflow\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the filter. Please just set this field to `FILTER`. The field is likely to be deprecated/removed in the near future.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "filterId",
                        "name",
                        "type"
                    ]
                }
            }
        },
        "newrelic:index/WorkflowIssuesFilterPredicate:WorkflowIssuesFilterPredicate": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "Issue event attribute to check\n"
                },
                "operator": {
                    "type": "string",
                    "description": "An operator to use to compare the attribute with the provided `values`, see supported operators below\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The `attribute` must match **any** of the values in this list\n"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "operator",
                "values"
            ]
        },
        "newrelic:index/getAlertChannelConfig:getAlertChannelConfig": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "secret": true
                },
                "authPassword": {
                    "type": "string",
                    "secret": true
                },
                "authType": {
                    "type": "string",
                    "secret": true
                },
                "authUsername": {
                    "type": "string"
                },
                "baseUrl": {
                    "type": "string",
                    "secret": true
                },
                "channel": {
                    "type": "string"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "secret": true
                },
                "includeJsonAttachment": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "secret": true
                },
                "payload": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "secret": true
                },
                "payloadString": {
                    "type": "string",
                    "secret": true
                },
                "payloadType": {
                    "type": "string"
                },
                "recipients": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "routeKey": {
                    "type": "string",
                    "secret": true
                },
                "serviceKey": {
                    "type": "string",
                    "secret": true
                },
                "tags": {
                    "type": "string"
                },
                "teams": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "secret": true
                },
                "userId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "newrelic:index/getEntityTag:getEntityTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The tag key.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The tag value.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "newrelic:index/getNotificationDestinationProperty:getNotificationDestinationProperty": {
            "properties": {
                "displayValue": {
                    "type": "string",
                    "description": "Notification property display key.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Notification property key.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Notification property label.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Notification property value.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "newrelic:index/getTestGrokPatternTestGrok:getTestGrokPatternTestGrok": {
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/getTestGrokPatternTestGrokAttribute:getTestGrokPatternTestGrokAttribute"
                    },
                    "description": "Nested list containing information about any attributes that were extracted.\n"
                },
                "logLine": {
                    "type": "string",
                    "description": "The log line that was tested against.\n"
                },
                "matched": {
                    "type": "boolean",
                    "description": "Whether the Grok pattern matched.\n"
                }
            },
            "type": "object",
            "required": [
                "attributes",
                "logLine",
                "matched"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "newrelic:index/getTestGrokPatternTestGrokAttribute:getTestGrokPatternTestGrokAttribute": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The attribute name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "A string representation of the extracted value (which might not be a String).\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "newrelic:insights/EventEvent:EventEvent": {
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:insights/EventEventAttribute:EventEventAttribute"
                    },
                    "description": "An attribute to include in your event payload. Multiple attribute blocks can be defined for an event.\n",
                    "willReplaceOnChanges": true
                },
                "timestamp": {
                    "type": "integer",
                    "description": "Must be a Unix epoch timestamp. You can define timestamps either in seconds or in milliseconds.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The event's name. Can be a combination of alphanumeric characters, underscores, and colons.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "attributes",
                "type"
            ]
        },
        "newrelic:insights/EventEventAttribute:EventEventAttribute": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The name of the attribute.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Specify the type for the attribute value. This is useful when passing integer or float values to Insights. Allowed values are string, int, or float. Defaults to string.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The value of the attribute.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "newrelic:plugins/WorkloadEntitySearchQuery:WorkloadEntitySearchQuery": {
            "properties": {
                "query": {
                    "type": "string",
                    "description": "The query.\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ]
        },
        "newrelic:plugins/WorkloadStatusConfigAutomatic:WorkloadStatusConfigAutomatic": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the static status configuration is enabled or not.\n"
                },
                "remainingEntitiesRule": {
                    "$ref": "#/types/newrelic:plugins/WorkloadStatusConfigAutomaticRemainingEntitiesRule:WorkloadStatusConfigAutomaticRemainingEntitiesRule",
                    "description": "An additional meta-rule that can consider all entities that haven't been evaluated by any other rule. See Nested remaining_entities_rule blocks below for details.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:plugins/WorkloadStatusConfigAutomaticRule:WorkloadStatusConfigAutomaticRule"
                    },
                    "description": "The input object used to represent a rollup strategy. See Nested rule blocks below for details.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "newrelic:plugins/WorkloadStatusConfigAutomaticRemainingEntitiesRule:WorkloadStatusConfigAutomaticRemainingEntitiesRule": {
            "properties": {
                "remainingEntitiesRuleRollup": {
                    "$ref": "#/types/newrelic:plugins/WorkloadStatusConfigAutomaticRemainingEntitiesRuleRemainingEntitiesRuleRollup:WorkloadStatusConfigAutomaticRemainingEntitiesRuleRemainingEntitiesRuleRollup",
                    "description": "The input object used to represent a rollup strategy. See Nested remaining_entities_rule_rollup blocks below for details.\n"
                }
            },
            "type": "object",
            "required": [
                "remainingEntitiesRuleRollup"
            ]
        },
        "newrelic:plugins/WorkloadStatusConfigAutomaticRemainingEntitiesRuleRemainingEntitiesRuleRollup:WorkloadStatusConfigAutomaticRemainingEntitiesRuleRemainingEntitiesRuleRollup": {
            "properties": {
                "groupBy": {
                    "type": "string",
                    "description": "The grouping to be applied to the remaining entities.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "The rollup strategy that is applied to a group of entities.\n"
                },
                "thresholdType": {
                    "type": "string",
                    "description": "Type of threshold defined for the rule. This is an optional field that only applies when strategy is WORST_STATUS_WINS. Use a threshold to roll up the worst status only after a certain amount of entities are not operational.\n"
                },
                "thresholdValue": {
                    "type": "integer",
                    "description": "Threshold value defined for the rule. This optional field is used in combination with thresholdType. If the threshold type is null, the threshold value will be ignored.\n"
                }
            },
            "type": "object",
            "required": [
                "groupBy",
                "strategy"
            ]
        },
        "newrelic:plugins/WorkloadStatusConfigAutomaticRule:WorkloadStatusConfigAutomaticRule": {
            "properties": {
                "entityGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of entity GUIDs composing the rule. At least one of `entity_guids` or `nrql_query` must be defined.\n"
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:plugins/WorkloadStatusConfigAutomaticRuleNrqlQuery:WorkloadStatusConfigAutomaticRuleNrqlQuery"
                    },
                    "description": "A list of entity search queries used to retrieve the entities that compose the rule. See Nested nrql_query blocks below for details. At least one of `entity_guids` or `nrql_query` must be defined.\n"
                },
                "rollup": {
                    "$ref": "#/types/newrelic:plugins/WorkloadStatusConfigAutomaticRuleRollup:WorkloadStatusConfigAutomaticRuleRollup",
                    "description": "The input object used to represent a rollup strategy. See Nested rollup blocks below for details.\n"
                }
            },
            "type": "object",
            "required": [
                "rollup"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityGuids",
                        "rollup"
                    ]
                }
            }
        },
        "newrelic:plugins/WorkloadStatusConfigAutomaticRuleNrqlQuery:WorkloadStatusConfigAutomaticRuleNrqlQuery": {
            "properties": {
                "query": {
                    "type": "string",
                    "description": "The entity search query that is used to perform the search of a group of entities.\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ]
        },
        "newrelic:plugins/WorkloadStatusConfigAutomaticRuleRollup:WorkloadStatusConfigAutomaticRuleRollup": {
            "properties": {
                "strategy": {
                    "type": "string",
                    "description": "The rollup strategy that is applied to a group of entities.\n"
                },
                "thresholdType": {
                    "type": "string",
                    "description": "Type of threshold defined for the rule. This is an optional field that only applies when strategy is WORST_STATUS_WINS. Use a threshold to roll up the worst status only after a certain amount of entities are not operational.\n"
                },
                "thresholdValue": {
                    "type": "integer",
                    "description": "Threshold value defined for the rule. This optional field is used in combination with thresholdType. If the threshold type is null, the threshold value will be ignored.\n"
                }
            },
            "type": "object",
            "required": [
                "strategy"
            ]
        },
        "newrelic:plugins/WorkloadStatusConfigStatic:WorkloadStatusConfigStatic": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Relevant information about the workload.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the static status configuration is enabled or not.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the workload.\n"
                },
                "summary": {
                    "type": "string",
                    "description": "A short description of the status of the workload.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "status"
            ]
        },
        "newrelic:synthetics/BrokenLinksMonitorTag:BrokenLinksMonitorTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of the tag key.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Values associated with the tag key.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "newrelic:synthetics/CertCheckMonitorTag:CertCheckMonitorTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of the tag key.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Values associated with the tag key.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "newrelic:synthetics/MonitorCustomHeader:MonitorCustomHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Header name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Header Value.\n"
                }
            },
            "type": "object"
        },
        "newrelic:synthetics/MonitorTag:MonitorTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of the tag key.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Values associated with the tag key.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "newrelic:synthetics/MultiLocationAlertConditionCritical:MultiLocationAlertConditionCritical": {
            "properties": {
                "threshold": {
                    "type": "integer",
                    "description": "The minimum number of monitor locations that must be concurrently failing before an incident is opened.\n"
                }
            },
            "type": "object",
            "required": [
                "threshold"
            ]
        },
        "newrelic:synthetics/MultiLocationAlertConditionWarning:MultiLocationAlertConditionWarning": {
            "properties": {
                "threshold": {
                    "type": "integer",
                    "description": "The minimum number of monitor locations that must be concurrently failing before an incident is opened.\n"
                }
            },
            "type": "object",
            "required": [
                "threshold"
            ]
        },
        "newrelic:synthetics/ScriptMonitorLocationPrivate:ScriptMonitorLocationPrivate": {
            "properties": {
                "guid": {
                    "type": "string",
                    "description": "The unique identifier for the Synthetics private location in New Relic.\n"
                },
                "vsePassword": {
                    "type": "string",
                    "description": "The location's Verified Script Execution password, Only necessary if Verified Script Execution is enabled for the location.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "guid"
            ]
        },
        "newrelic:synthetics/ScriptMonitorTag:ScriptMonitorTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of the tag key.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Values associated with the tag key.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "newrelic:synthetics/StepMonitorLocationPrivate:StepMonitorLocationPrivate": {
            "properties": {
                "guid": {
                    "type": "string",
                    "description": "The unique identifier for the Synthetics private location in New Relic.\n"
                },
                "vsePassword": {
                    "type": "string",
                    "description": "The location's Verified Script Execution password, only necessary if Verified Script Execution is enabled for the location.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "guid"
            ]
        },
        "newrelic:synthetics/StepMonitorStep:StepMonitorStep": {
            "properties": {
                "ordinal": {
                    "type": "integer",
                    "description": "The position of the step within the script ranging from 0-100.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Name of the tag key. Valid values are ASSERT_ELEMENT, ASSERT_MODAL, ASSERT_TEXT, ASSERT_TITLE, CLICK_ELEMENT, DISMISS_MODAL, DOUBLE_CLICK_ELEMENT, HOVER_ELEMENT, NAVIGATE, SECURE_TEXT_ENTRY, SELECT_ELEMENT, TEXT_ENTRY.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The metadata values related to the step.\n"
                }
            },
            "type": "object",
            "required": [
                "ordinal",
                "type"
            ]
        },
        "newrelic:synthetics/StepMonitorTag:StepMonitorTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of the tag key.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Values associated with the tag key.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the newrelic package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accountId": {
                "type": "integer",
                "secret": true
            },
            "adminApiKey": {
                "type": "string",
                "secret": true
            },
            "apiKey": {
                "type": "string",
                "secret": true
            },
            "apiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "cacertFile": {
                "type": "string"
            },
            "infrastructureApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "insecureSkipVerify": {
                "type": "boolean"
            },
            "insightsInsertKey": {
                "type": "string",
                "secret": true
            },
            "insightsInsertUrl": {
                "type": "string"
            },
            "insightsQueryUrl": {
                "type": "string"
            },
            "nerdgraphApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "region": {
                "type": "string",
                "description": "The data center for which your New Relic account is configured. Only one region per provider block is permitted.\n"
            },
            "syntheticsApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            }
        },
        "required": [
            "apiKey"
        ],
        "inputProperties": {
            "accountId": {
                "type": "integer",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_ACCOUNT_ID"
                    ]
                },
                "secret": true
            },
            "adminApiKey": {
                "type": "string",
                "secret": true
            },
            "apiKey": {
                "type": "string",
                "secret": true
            },
            "apiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "cacertFile": {
                "type": "string"
            },
            "infrastructureApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "insecureSkipVerify": {
                "type": "boolean"
            },
            "insightsInsertKey": {
                "type": "string",
                "secret": true
            },
            "insightsInsertUrl": {
                "type": "string"
            },
            "insightsQueryUrl": {
                "type": "string"
            },
            "nerdgraphApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "region": {
                "type": "string",
                "description": "The data center for which your New Relic account is configured. Only one region per provider block is permitted.\n",
                "default": "US",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_REGION"
                    ]
                }
            },
            "syntheticsApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            }
        },
        "requiredInputs": [
            "apiKey"
        ]
    },
    "resources": {
        "newrelic:cloud/awsGovcloudIntegrations:AwsGovcloudIntegrations": {
            "description": "\u003e **IMPORTANT!** This resource is in alpha state, and could still contain issues and missing functionality. If you encounter any issue please create a ticket on Github with all the required information.\n\nUse this resource to integrate an AWSGovCloud account to New Relic.\n\n## Prerequisite\n\nObtain the AwsGovCloud account designed to address the specific regulatory needs of United States (federal, state, and local agencies), education institutions, and the supporting ecosystem.\n\nIt is an isolated AWS region designed to host sensitive data and regulated workloads in the cloud, helping customers support their US government compliance requirements.\n\nTo pull data from AWSGovCloud, complete the [steps outlined here](https://docs.newrelic.com/docs/infrastructure/amazon-integrations/connect/connect-aws-govcloud-new-relic).\n\n## Import\n\nIntegrate AWSGovCloud accounts can be imported using the `id`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:cloud/awsGovcloudIntegrations:AwsGovcloudIntegrations foo \u003cid\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on. This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "alb": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAlb:AwsGovcloudIntegrationsAlb",
                    "description": "Application load balancer AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "apiGateway": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsApiGateway:AwsGovcloudIntegrationsApiGateway",
                    "description": "Api Gateway AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "autoScaling": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAutoScaling:AwsGovcloudIntegrationsAutoScaling",
                    "description": "Autoscaling AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "awsDirectConnect": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAwsDirectConnect:AwsGovcloudIntegrationsAwsDirectConnect",
                    "description": "Aws Direct Connect AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "awsStates": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAwsStates:AwsGovcloudIntegrationsAwsStates",
                    "description": "Aws States AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "cloudtrail": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsCloudtrail:AwsGovcloudIntegrationsCloudtrail",
                    "description": "Cloudtrail AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "dynamoDb": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsDynamoDb:AwsGovcloudIntegrationsDynamoDb",
                    "description": "Dynamo DB AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "ebs": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEbs:AwsGovcloudIntegrationsEbs",
                    "description": "Elastic Beanstalk AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "ec2": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEc2:AwsGovcloudIntegrationsEc2",
                    "description": "EC2 AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "elasticSearch": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsElasticSearch:AwsGovcloudIntegrationsElasticSearch",
                    "description": "Elastic search AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "elb": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsElb:AwsGovcloudIntegrationsElb",
                    "description": "Elb AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "emr": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEmr:AwsGovcloudIntegrationsEmr",
                    "description": "Emr AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "iam": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsIam:AwsGovcloudIntegrationsIam",
                    "description": "IAM AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "lambda": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsLambda:AwsGovcloudIntegrationsLambda",
                    "description": "Lambda AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "linkedAccountId": {
                    "type": "integer",
                    "description": "The access key of the AwsGovCloud.\n"
                },
                "rds": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRds:AwsGovcloudIntegrationsRds",
                    "description": "RDS AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "redShift": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRedShift:AwsGovcloudIntegrationsRedShift",
                    "description": "Redshift AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "route53": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRoute53:AwsGovcloudIntegrationsRoute53",
                    "description": "Route53 AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "s3": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsS3:AwsGovcloudIntegrationsS3",
                    "description": "The s3 integration\n"
                },
                "sns": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsSns:AwsGovcloudIntegrationsSns",
                    "description": "SNS AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "sqs": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsSqs:AwsGovcloudIntegrationsSqs",
                    "description": "SQS AwsGovCloud integration.See Integration blocks below for details.\n"
                }
            },
            "required": [
                "accountId",
                "linkedAccountId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on. This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "alb": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAlb:AwsGovcloudIntegrationsAlb",
                    "description": "Application load balancer AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "apiGateway": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsApiGateway:AwsGovcloudIntegrationsApiGateway",
                    "description": "Api Gateway AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "autoScaling": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAutoScaling:AwsGovcloudIntegrationsAutoScaling",
                    "description": "Autoscaling AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "awsDirectConnect": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAwsDirectConnect:AwsGovcloudIntegrationsAwsDirectConnect",
                    "description": "Aws Direct Connect AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "awsStates": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAwsStates:AwsGovcloudIntegrationsAwsStates",
                    "description": "Aws States AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "cloudtrail": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsCloudtrail:AwsGovcloudIntegrationsCloudtrail",
                    "description": "Cloudtrail AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "dynamoDb": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsDynamoDb:AwsGovcloudIntegrationsDynamoDb",
                    "description": "Dynamo DB AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "ebs": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEbs:AwsGovcloudIntegrationsEbs",
                    "description": "Elastic Beanstalk AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "ec2": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEc2:AwsGovcloudIntegrationsEc2",
                    "description": "EC2 AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "elasticSearch": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsElasticSearch:AwsGovcloudIntegrationsElasticSearch",
                    "description": "Elastic search AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "elb": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsElb:AwsGovcloudIntegrationsElb",
                    "description": "Elb AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "emr": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEmr:AwsGovcloudIntegrationsEmr",
                    "description": "Emr AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "iam": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsIam:AwsGovcloudIntegrationsIam",
                    "description": "IAM AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "lambda": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsLambda:AwsGovcloudIntegrationsLambda",
                    "description": "Lambda AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "linkedAccountId": {
                    "type": "integer",
                    "description": "The access key of the AwsGovCloud.\n"
                },
                "rds": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRds:AwsGovcloudIntegrationsRds",
                    "description": "RDS AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "redShift": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRedShift:AwsGovcloudIntegrationsRedShift",
                    "description": "Redshift AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "route53": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRoute53:AwsGovcloudIntegrationsRoute53",
                    "description": "Route53 AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "s3": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsS3:AwsGovcloudIntegrationsS3",
                    "description": "The s3 integration\n"
                },
                "sns": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsSns:AwsGovcloudIntegrationsSns",
                    "description": "SNS AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "sqs": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsSqs:AwsGovcloudIntegrationsSqs",
                    "description": "SQS AwsGovCloud integration.See Integration blocks below for details.\n"
                }
            },
            "requiredInputs": [
                "linkedAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsGovcloudIntegrations resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on. This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "alb": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAlb:AwsGovcloudIntegrationsAlb",
                        "description": "Application load balancer AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "apiGateway": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsApiGateway:AwsGovcloudIntegrationsApiGateway",
                        "description": "Api Gateway AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "autoScaling": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAutoScaling:AwsGovcloudIntegrationsAutoScaling",
                        "description": "Autoscaling AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "awsDirectConnect": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAwsDirectConnect:AwsGovcloudIntegrationsAwsDirectConnect",
                        "description": "Aws Direct Connect AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "awsStates": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAwsStates:AwsGovcloudIntegrationsAwsStates",
                        "description": "Aws States AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "cloudtrail": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsCloudtrail:AwsGovcloudIntegrationsCloudtrail",
                        "description": "Cloudtrail AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "dynamoDb": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsDynamoDb:AwsGovcloudIntegrationsDynamoDb",
                        "description": "Dynamo DB AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "ebs": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEbs:AwsGovcloudIntegrationsEbs",
                        "description": "Elastic Beanstalk AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "ec2": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEc2:AwsGovcloudIntegrationsEc2",
                        "description": "EC2 AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "elasticSearch": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsElasticSearch:AwsGovcloudIntegrationsElasticSearch",
                        "description": "Elastic search AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "elb": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsElb:AwsGovcloudIntegrationsElb",
                        "description": "Elb AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "emr": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEmr:AwsGovcloudIntegrationsEmr",
                        "description": "Emr AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "iam": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsIam:AwsGovcloudIntegrationsIam",
                        "description": "IAM AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "lambda": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsLambda:AwsGovcloudIntegrationsLambda",
                        "description": "Lambda AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "linkedAccountId": {
                        "type": "integer",
                        "description": "The access key of the AwsGovCloud.\n"
                    },
                    "rds": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRds:AwsGovcloudIntegrationsRds",
                        "description": "RDS AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "redShift": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRedShift:AwsGovcloudIntegrationsRedShift",
                        "description": "Redshift AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "route53": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRoute53:AwsGovcloudIntegrationsRoute53",
                        "description": "Route53 AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "s3": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsS3:AwsGovcloudIntegrationsS3",
                        "description": "The s3 integration\n"
                    },
                    "sns": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsSns:AwsGovcloudIntegrationsSns",
                        "description": "SNS AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "sqs": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsSqs:AwsGovcloudIntegrationsSqs",
                        "description": "SQS AwsGovCloud integration.See Integration blocks below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:cloud/awsGovcloudLinkAccount:AwsGovcloudLinkAccount": {
            "description": "\u003e **IMPORTANT!** This resource is in alpha state, and could still contain issues and missing functionality. If you encounter any issue please create a ticket on Github with all the required information.\n\nUse this resource to link an AWSGovCloud account to New Relic.\n\n## Prerequisite\n\nObtain the AwsGovCloud account designed to address the specific regulatory needs of United States (federal, state, and local agencies), education institutions, and the supporting ecosystem.\n\nIt is an isolated AWS region designed to host sensitive data and regulated workloads in the cloud, helping customers support their US government compliance requirements.\n\nTo pull data from AWSGovCloud, complete the [steps outlined here](https://docs.newrelic.com/docs/infrastructure/amazon-integrations/get-started/connect-aws-govcloud-new-relic).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.cloud.AwsGovcloudLinkAccount(\"foo\", {\n    accessKeyId: \"access-key-id of aws govcloud account\",\n    accountId: \"The New Relic account ID where you want to link the AWS GovCloud account\",\n    awsAccountId: \"aws govcloud account id\",\n    metricCollectionMode: \"PULL\",\n    secretAccessKey: \"secret access key of the aws govcloud account\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.cloud.AwsGovcloudLinkAccount(\"foo\",\n    access_key_id=\"access-key-id of aws govcloud account\",\n    account_id=\"The New Relic account ID where you want to link the AWS GovCloud account\",\n    aws_account_id=\"aws govcloud account id\",\n    metric_collection_mode=\"PULL\",\n    secret_access_key=\"secret access key of the aws govcloud account\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.Cloud.AwsGovcloudLinkAccount(\"foo\", new()\n    {\n        AccessKeyId = \"access-key-id of aws govcloud account\",\n        AccountId = \"The New Relic account ID where you want to link the AWS GovCloud account\",\n        AwsAccountId = \"aws govcloud account id\",\n        MetricCollectionMode = \"PULL\",\n        SecretAccessKey = \"secret access key of the aws govcloud account\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/cloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloud.NewAwsGovcloudLinkAccount(ctx, \"foo\", \u0026cloud.AwsGovcloudLinkAccountArgs{\n\t\t\tAccessKeyId:          pulumi.String(\"access-key-id of aws govcloud account\"),\n\t\t\tAccountId:            pulumi.Int(\"The New Relic account ID where you want to link the AWS GovCloud account\"),\n\t\t\tAwsAccountId:         pulumi.String(\"aws govcloud account id\"),\n\t\t\tMetricCollectionMode: pulumi.String(\"PULL\"),\n\t\t\tSecretAccessKey:      pulumi.String(\"secret access key of the aws govcloud account\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.cloud.AwsGovcloudLinkAccount;\nimport com.pulumi.newrelic.cloud.AwsGovcloudLinkAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AwsGovcloudLinkAccount(\"foo\", AwsGovcloudLinkAccountArgs.builder()        \n            .accessKeyId(\"access-key-id of aws govcloud account\")\n            .accountId(\"The New Relic account ID where you want to link the AWS GovCloud account\")\n            .awsAccountId(\"aws govcloud account id\")\n            .metricCollectionMode(\"PULL\")\n            .secretAccessKey(\"secret access key of the aws govcloud account\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:cloud:AwsGovcloudLinkAccount\n    properties:\n      accessKeyId: access-key-id of aws govcloud account\n      accountId: The New Relic account ID where you want to link the AWS GovCloud account\n      awsAccountId: aws govcloud account id\n      metricCollectionMode: PULL\n      secretAccessKey: secret access key of the aws govcloud account\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinked AWSGovCloud accounts can be imported using the `id`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:cloud/awsGovcloudLinkAccount:AwsGovcloudLinkAccount foo \u003cid\u003e\n```\n\n",
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The access key of the AwsGovCloud.\n",
                    "secret": true
                },
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on. This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "awsAccountId": {
                    "type": "string",
                    "description": "The AwsGovCloud account ID.\n"
                },
                "metricCollectionMode": {
                    "type": "string",
                    "description": "How metrics will be collected. Use `PUSH` for a metric stream or `PULL` to integrate with individual services.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The linked account name\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The secret key of the AwsGovCloud.\n",
                    "secret": true
                }
            },
            "required": [
                "accessKeyId",
                "accountId",
                "awsAccountId",
                "name",
                "secretAccessKey"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The access key of the AwsGovCloud.\n",
                    "secret": true
                },
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on. This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "awsAccountId": {
                    "type": "string",
                    "description": "The AwsGovCloud account ID.\n"
                },
                "metricCollectionMode": {
                    "type": "string",
                    "description": "How metrics will be collected. Use `PUSH` for a metric stream or `PULL` to integrate with individual services.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The linked account name\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The secret key of the AwsGovCloud.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "accessKeyId",
                "awsAccountId",
                "secretAccessKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsGovcloudLinkAccount resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "The access key of the AwsGovCloud.\n",
                        "secret": true
                    },
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on. This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "awsAccountId": {
                        "type": "string",
                        "description": "The AwsGovCloud account ID.\n"
                    },
                    "metricCollectionMode": {
                        "type": "string",
                        "description": "How metrics will be collected. Use `PUSH` for a metric stream or `PULL` to integrate with individual services.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The linked account name\n"
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "description": "The secret key of the AwsGovCloud.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "newrelic:cloud/awsIntegrations:AwsIntegrations": {
            "description": "Use this resource to integrate AWS services with New Relic.\n\n## Prerequisite\n\nSetup is required for this resource to work properly. This resource assumes you have linked an AWS account to New Relic and configured it to push metrics using CloudWatch Metric Streams.\n\nNew Relic doesn't automatically receive metrics from AWS for some services so this resource can be used to configure integrations to those services.\n\nUsing a metric stream to New Relic is the preferred way to integrate with AWS. Follow the [steps outlined here](https://docs.newrelic.com/docs/infrastructure/amazon-integrations/aws-integrations-list/aws-metric-stream/#set-up-metric-stream) to set up a metric stream. This resource supports any integration that's not available through AWS metric stream.\n\n## Example Usage\n\nLeave an integration block empty to use its default configuration. You can also use the full example, including the AWS set up, found in our guides.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.cloud.AwsLinkAccount(\"foo\", {\n    arn: aws_iam_role.newrelic_aws_role.arn,\n    metricCollectionMode: \"PULL\",\n});\nconst bar = new newrelic.cloud.AwsIntegrations(\"bar\", {\n    linkedAccountId: foo.id,\n    billing: {},\n    cloudtrail: {\n        metricsPollingInterval: 6000,\n        awsRegions: [\n            \"us-east-1\",\n            \"us-east-2\",\n        ],\n    },\n    health: {\n        metricsPollingInterval: 6000,\n    },\n    trustedAdvisor: {\n        metricsPollingInterval: 6000,\n    },\n    vpc: {\n        metricsPollingInterval: 6000,\n        awsRegions: [\n            \"us-east-1\",\n            \"us-east-2\",\n        ],\n        fetchNatGateway: true,\n        fetchVpn: false,\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    xRay: {\n        metricsPollingInterval: 6000,\n        awsRegions: [\n            \"us-east-1\",\n            \"us-east-2\",\n        ],\n    },\n    s3: {\n        metricsPollingInterval: 6000,\n    },\n    docDb: {\n        metricsPollingInterval: 6000,\n    },\n    sqs: {\n        fetchExtendedInventory: true,\n        fetchTags: true,\n        queuePrefixes: [\"queue prefix\"],\n        metricsPollingInterval: 6000,\n        awsRegions: [\"us-east-1\"],\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    ebs: {\n        metricsPollingInterval: 6000,\n        fetchExtendedInventory: true,\n        awsRegions: [\"us-east-1\"],\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    alb: {\n        fetchExtendedInventory: true,\n        fetchTags: true,\n        loadBalancerPrefixes: [\"load balancer prefix\"],\n        metricsPollingInterval: 6000,\n        awsRegions: [\"us-east-1\"],\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    elasticache: {\n        awsRegions: [\"us-east-1\"],\n        fetchTags: true,\n        metricsPollingInterval: 6000,\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    apiGateway: {\n        metricsPollingInterval: 6000,\n        awsRegions: [\"us-east-1\"],\n        stagePrefixes: [\"stage prefix\"],\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    autoScaling: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsAppSync: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsAthena: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsCognito: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsConnect: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsDirectConnect: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsFsx: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsGlue: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsKinesisAnalytics: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsMediaConvert: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsMediaPackageVod: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsMq: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsMsk: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsNeptune: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsQldb: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsRoute53resolver: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsStates: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsTransitGateway: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsWaf: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    awsWafv2: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    cloudfront: {\n        fetchLambdasAtEdge: true,\n        fetchTags: true,\n        metricsPollingInterval: 6000,\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    dynamodb: {\n        awsRegions: [\"us-east-1\"],\n        fetchExtendedInventory: true,\n        fetchTags: true,\n        metricsPollingInterval: 6000,\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    ec2: {\n        awsRegions: [\"us-east-1\"],\n        duplicateEc2Tags: true,\n        fetchIpAddresses: true,\n        metricsPollingInterval: 6000,\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    ecs: {\n        awsRegions: [\"us-east-1\"],\n        fetchTags: true,\n        metricsPollingInterval: 6000,\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    efs: {\n        awsRegions: [\"us-east-1\"],\n        fetchTags: true,\n        metricsPollingInterval: 6000,\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    elasticbeanstalk: {\n        awsRegions: [\"us-east-1\"],\n        fetchExtendedInventory: true,\n        fetchTags: true,\n        metricsPollingInterval: 6000,\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    elasticsearch: {\n        awsRegions: [\"us-east-1\"],\n        fetchNodes: true,\n        metricsPollingInterval: 6000,\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    elb: {\n        awsRegions: [\"us-east-1\"],\n        fetchExtendedInventory: true,\n        fetchTags: true,\n        metricsPollingInterval: 6000,\n    },\n    emr: {\n        awsRegions: [\"us-east-1\"],\n        fetchTags: true,\n        metricsPollingInterval: 6000,\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    iam: {\n        metricsPollingInterval: 6000,\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    iot: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    kinesis: {\n        awsRegions: [\"us-east-1\"],\n        fetchShards: true,\n        fetchTags: true,\n        metricsPollingInterval: 6000,\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    kinesisFirehose: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    lambda: {\n        awsRegions: [\"us-east-1\"],\n        fetchTags: true,\n        metricsPollingInterval: 6000,\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    rds: {\n        awsRegions: [\"us-east-1\"],\n        fetchTags: true,\n        metricsPollingInterval: 6000,\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    redshift: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n        tagKey: \"tag key\",\n        tagValue: \"tag value\",\n    },\n    route53: {\n        fetchExtendedInventory: true,\n        metricsPollingInterval: 6000,\n    },\n    ses: {\n        awsRegions: [\"us-east-1\"],\n        metricsPollingInterval: 6000,\n    },\n    sns: {\n        awsRegions: [\"us-east-1\"],\n        fetchExtendedInventory: true,\n        metricsPollingInterval: 6000,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.cloud.AwsLinkAccount(\"foo\",\n    arn=aws_iam_role[\"newrelic_aws_role\"][\"arn\"],\n    metric_collection_mode=\"PULL\")\nbar = newrelic.cloud.AwsIntegrations(\"bar\",\n    linked_account_id=foo.id,\n    billing=newrelic.cloud.AwsIntegrationsBillingArgs(),\n    cloudtrail=newrelic.cloud.AwsIntegrationsCloudtrailArgs(\n        metrics_polling_interval=6000,\n        aws_regions=[\n            \"us-east-1\",\n            \"us-east-2\",\n        ],\n    ),\n    health=newrelic.cloud.AwsIntegrationsHealthArgs(\n        metrics_polling_interval=6000,\n    ),\n    trusted_advisor=newrelic.cloud.AwsIntegrationsTrustedAdvisorArgs(\n        metrics_polling_interval=6000,\n    ),\n    vpc=newrelic.cloud.AwsIntegrationsVpcArgs(\n        metrics_polling_interval=6000,\n        aws_regions=[\n            \"us-east-1\",\n            \"us-east-2\",\n        ],\n        fetch_nat_gateway=True,\n        fetch_vpn=False,\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    x_ray=newrelic.cloud.AwsIntegrationsXRayArgs(\n        metrics_polling_interval=6000,\n        aws_regions=[\n            \"us-east-1\",\n            \"us-east-2\",\n        ],\n    ),\n    s3=newrelic.cloud.AwsIntegrationsS3Args(\n        metrics_polling_interval=6000,\n    ),\n    doc_db=newrelic.cloud.AwsIntegrationsDocDbArgs(\n        metrics_polling_interval=6000,\n    ),\n    sqs=newrelic.cloud.AwsIntegrationsSqsArgs(\n        fetch_extended_inventory=True,\n        fetch_tags=True,\n        queue_prefixes=[\"queue prefix\"],\n        metrics_polling_interval=6000,\n        aws_regions=[\"us-east-1\"],\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    ebs=newrelic.cloud.AwsIntegrationsEbsArgs(\n        metrics_polling_interval=6000,\n        fetch_extended_inventory=True,\n        aws_regions=[\"us-east-1\"],\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    alb=newrelic.cloud.AwsIntegrationsAlbArgs(\n        fetch_extended_inventory=True,\n        fetch_tags=True,\n        load_balancer_prefixes=[\"load balancer prefix\"],\n        metrics_polling_interval=6000,\n        aws_regions=[\"us-east-1\"],\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    elasticache=newrelic.cloud.AwsIntegrationsElasticacheArgs(\n        aws_regions=[\"us-east-1\"],\n        fetch_tags=True,\n        metrics_polling_interval=6000,\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    api_gateway=newrelic.cloud.AwsIntegrationsApiGatewayArgs(\n        metrics_polling_interval=6000,\n        aws_regions=[\"us-east-1\"],\n        stage_prefixes=[\"stage prefix\"],\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    auto_scaling=newrelic.cloud.AwsIntegrationsAutoScalingArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_app_sync=newrelic.cloud.AwsIntegrationsAwsAppSyncArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_athena=newrelic.cloud.AwsIntegrationsAwsAthenaArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_cognito=newrelic.cloud.AwsIntegrationsAwsCognitoArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_connect=newrelic.cloud.AwsIntegrationsAwsConnectArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_direct_connect=newrelic.cloud.AwsIntegrationsAwsDirectConnectArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_fsx=newrelic.cloud.AwsIntegrationsAwsFsxArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_glue=newrelic.cloud.AwsIntegrationsAwsGlueArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_kinesis_analytics=newrelic.cloud.AwsIntegrationsAwsKinesisAnalyticsArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_media_convert=newrelic.cloud.AwsIntegrationsAwsMediaConvertArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_media_package_vod=newrelic.cloud.AwsIntegrationsAwsMediaPackageVodArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_mq=newrelic.cloud.AwsIntegrationsAwsMqArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_msk=newrelic.cloud.AwsIntegrationsAwsMskArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_neptune=newrelic.cloud.AwsIntegrationsAwsNeptuneArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_qldb=newrelic.cloud.AwsIntegrationsAwsQldbArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_route53resolver=newrelic.cloud.AwsIntegrationsAwsRoute53resolverArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_states=newrelic.cloud.AwsIntegrationsAwsStatesArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_transit_gateway=newrelic.cloud.AwsIntegrationsAwsTransitGatewayArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_waf=newrelic.cloud.AwsIntegrationsAwsWafArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    aws_wafv2=newrelic.cloud.AwsIntegrationsAwsWafv2Args(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    cloudfront=newrelic.cloud.AwsIntegrationsCloudfrontArgs(\n        fetch_lambdas_at_edge=True,\n        fetch_tags=True,\n        metrics_polling_interval=6000,\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    dynamodb=newrelic.cloud.AwsIntegrationsDynamodbArgs(\n        aws_regions=[\"us-east-1\"],\n        fetch_extended_inventory=True,\n        fetch_tags=True,\n        metrics_polling_interval=6000,\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    ec2=newrelic.cloud.AwsIntegrationsEc2Args(\n        aws_regions=[\"us-east-1\"],\n        duplicate_ec2_tags=True,\n        fetch_ip_addresses=True,\n        metrics_polling_interval=6000,\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    ecs=newrelic.cloud.AwsIntegrationsEcsArgs(\n        aws_regions=[\"us-east-1\"],\n        fetch_tags=True,\n        metrics_polling_interval=6000,\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    efs=newrelic.cloud.AwsIntegrationsEfsArgs(\n        aws_regions=[\"us-east-1\"],\n        fetch_tags=True,\n        metrics_polling_interval=6000,\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    elasticbeanstalk=newrelic.cloud.AwsIntegrationsElasticbeanstalkArgs(\n        aws_regions=[\"us-east-1\"],\n        fetch_extended_inventory=True,\n        fetch_tags=True,\n        metrics_polling_interval=6000,\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    elasticsearch=newrelic.cloud.AwsIntegrationsElasticsearchArgs(\n        aws_regions=[\"us-east-1\"],\n        fetch_nodes=True,\n        metrics_polling_interval=6000,\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    elb=newrelic.cloud.AwsIntegrationsElbArgs(\n        aws_regions=[\"us-east-1\"],\n        fetch_extended_inventory=True,\n        fetch_tags=True,\n        metrics_polling_interval=6000,\n    ),\n    emr=newrelic.cloud.AwsIntegrationsEmrArgs(\n        aws_regions=[\"us-east-1\"],\n        fetch_tags=True,\n        metrics_polling_interval=6000,\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    iam=newrelic.cloud.AwsIntegrationsIamArgs(\n        metrics_polling_interval=6000,\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    iot=newrelic.cloud.AwsIntegrationsIotArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    kinesis=newrelic.cloud.AwsIntegrationsKinesisArgs(\n        aws_regions=[\"us-east-1\"],\n        fetch_shards=True,\n        fetch_tags=True,\n        metrics_polling_interval=6000,\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    kinesis_firehose=newrelic.cloud.AwsIntegrationsKinesisFirehoseArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    lambda_=newrelic.cloud.AwsIntegrationsLambdaArgs(\n        aws_regions=[\"us-east-1\"],\n        fetch_tags=True,\n        metrics_polling_interval=6000,\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    rds=newrelic.cloud.AwsIntegrationsRdsArgs(\n        aws_regions=[\"us-east-1\"],\n        fetch_tags=True,\n        metrics_polling_interval=6000,\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    redshift=newrelic.cloud.AwsIntegrationsRedshiftArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n        tag_key=\"tag key\",\n        tag_value=\"tag value\",\n    ),\n    route53=newrelic.cloud.AwsIntegrationsRoute53Args(\n        fetch_extended_inventory=True,\n        metrics_polling_interval=6000,\n    ),\n    ses=newrelic.cloud.AwsIntegrationsSesArgs(\n        aws_regions=[\"us-east-1\"],\n        metrics_polling_interval=6000,\n    ),\n    sns=newrelic.cloud.AwsIntegrationsSnsArgs(\n        aws_regions=[\"us-east-1\"],\n        fetch_extended_inventory=True,\n        metrics_polling_interval=6000,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.Cloud.AwsLinkAccount(\"foo\", new()\n    {\n        Arn = aws_iam_role.Newrelic_aws_role.Arn,\n        MetricCollectionMode = \"PULL\",\n    });\n\n    var bar = new NewRelic.Cloud.AwsIntegrations(\"bar\", new()\n    {\n        LinkedAccountId = foo.Id,\n        Billing = null,\n        Cloudtrail = new NewRelic.Cloud.Inputs.AwsIntegrationsCloudtrailArgs\n        {\n            MetricsPollingInterval = 6000,\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n                \"us-east-2\",\n            },\n        },\n        Health = new NewRelic.Cloud.Inputs.AwsIntegrationsHealthArgs\n        {\n            MetricsPollingInterval = 6000,\n        },\n        TrustedAdvisor = new NewRelic.Cloud.Inputs.AwsIntegrationsTrustedAdvisorArgs\n        {\n            MetricsPollingInterval = 6000,\n        },\n        Vpc = new NewRelic.Cloud.Inputs.AwsIntegrationsVpcArgs\n        {\n            MetricsPollingInterval = 6000,\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n                \"us-east-2\",\n            },\n            FetchNatGateway = true,\n            FetchVpn = false,\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        XRay = new NewRelic.Cloud.Inputs.AwsIntegrationsXRayArgs\n        {\n            MetricsPollingInterval = 6000,\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n                \"us-east-2\",\n            },\n        },\n        S3 = new NewRelic.Cloud.Inputs.AwsIntegrationsS3Args\n        {\n            MetricsPollingInterval = 6000,\n        },\n        DocDb = new NewRelic.Cloud.Inputs.AwsIntegrationsDocDbArgs\n        {\n            MetricsPollingInterval = 6000,\n        },\n        Sqs = new NewRelic.Cloud.Inputs.AwsIntegrationsSqsArgs\n        {\n            FetchExtendedInventory = true,\n            FetchTags = true,\n            QueuePrefixes = new[]\n            {\n                \"queue prefix\",\n            },\n            MetricsPollingInterval = 6000,\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        Ebs = new NewRelic.Cloud.Inputs.AwsIntegrationsEbsArgs\n        {\n            MetricsPollingInterval = 6000,\n            FetchExtendedInventory = true,\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        Alb = new NewRelic.Cloud.Inputs.AwsIntegrationsAlbArgs\n        {\n            FetchExtendedInventory = true,\n            FetchTags = true,\n            LoadBalancerPrefixes = new[]\n            {\n                \"load balancer prefix\",\n            },\n            MetricsPollingInterval = 6000,\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        Elasticache = new NewRelic.Cloud.Inputs.AwsIntegrationsElasticacheArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            FetchTags = true,\n            MetricsPollingInterval = 6000,\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        ApiGateway = new NewRelic.Cloud.Inputs.AwsIntegrationsApiGatewayArgs\n        {\n            MetricsPollingInterval = 6000,\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            StagePrefixes = new[]\n            {\n                \"stage prefix\",\n            },\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        AutoScaling = new NewRelic.Cloud.Inputs.AwsIntegrationsAutoScalingArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsAppSync = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsAppSyncArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsAthena = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsAthenaArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsCognito = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsCognitoArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsConnect = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsConnectArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsDirectConnect = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsDirectConnectArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsFsx = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsFsxArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsGlue = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsGlueArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsKinesisAnalytics = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsKinesisAnalyticsArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsMediaConvert = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsMediaConvertArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsMediaPackageVod = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsMediaPackageVodArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsMq = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsMqArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsMsk = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsMskArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsNeptune = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsNeptuneArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsQldb = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsQldbArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsRoute53resolver = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsRoute53resolverArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsStates = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsStatesArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsTransitGateway = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsTransitGatewayArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsWaf = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsWafArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        AwsWafv2 = new NewRelic.Cloud.Inputs.AwsIntegrationsAwsWafv2Args\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        Cloudfront = new NewRelic.Cloud.Inputs.AwsIntegrationsCloudfrontArgs\n        {\n            FetchLambdasAtEdge = true,\n            FetchTags = true,\n            MetricsPollingInterval = 6000,\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        Dynamodb = new NewRelic.Cloud.Inputs.AwsIntegrationsDynamodbArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            FetchExtendedInventory = true,\n            FetchTags = true,\n            MetricsPollingInterval = 6000,\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        Ec2 = new NewRelic.Cloud.Inputs.AwsIntegrationsEc2Args\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            DuplicateEc2Tags = true,\n            FetchIpAddresses = true,\n            MetricsPollingInterval = 6000,\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        Ecs = new NewRelic.Cloud.Inputs.AwsIntegrationsEcsArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            FetchTags = true,\n            MetricsPollingInterval = 6000,\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        Efs = new NewRelic.Cloud.Inputs.AwsIntegrationsEfsArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            FetchTags = true,\n            MetricsPollingInterval = 6000,\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        Elasticbeanstalk = new NewRelic.Cloud.Inputs.AwsIntegrationsElasticbeanstalkArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            FetchExtendedInventory = true,\n            FetchTags = true,\n            MetricsPollingInterval = 6000,\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        Elasticsearch = new NewRelic.Cloud.Inputs.AwsIntegrationsElasticsearchArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            FetchNodes = true,\n            MetricsPollingInterval = 6000,\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        Elb = new NewRelic.Cloud.Inputs.AwsIntegrationsElbArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            FetchExtendedInventory = true,\n            FetchTags = true,\n            MetricsPollingInterval = 6000,\n        },\n        Emr = new NewRelic.Cloud.Inputs.AwsIntegrationsEmrArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            FetchTags = true,\n            MetricsPollingInterval = 6000,\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        Iam = new NewRelic.Cloud.Inputs.AwsIntegrationsIamArgs\n        {\n            MetricsPollingInterval = 6000,\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        Iot = new NewRelic.Cloud.Inputs.AwsIntegrationsIotArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        Kinesis = new NewRelic.Cloud.Inputs.AwsIntegrationsKinesisArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            FetchShards = true,\n            FetchTags = true,\n            MetricsPollingInterval = 6000,\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        KinesisFirehose = new NewRelic.Cloud.Inputs.AwsIntegrationsKinesisFirehoseArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        Lambda = new NewRelic.Cloud.Inputs.AwsIntegrationsLambdaArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            FetchTags = true,\n            MetricsPollingInterval = 6000,\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        Rds = new NewRelic.Cloud.Inputs.AwsIntegrationsRdsArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            FetchTags = true,\n            MetricsPollingInterval = 6000,\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        Redshift = new NewRelic.Cloud.Inputs.AwsIntegrationsRedshiftArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n            TagKey = \"tag key\",\n            TagValue = \"tag value\",\n        },\n        Route53 = new NewRelic.Cloud.Inputs.AwsIntegrationsRoute53Args\n        {\n            FetchExtendedInventory = true,\n            MetricsPollingInterval = 6000,\n        },\n        Ses = new NewRelic.Cloud.Inputs.AwsIntegrationsSesArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            MetricsPollingInterval = 6000,\n        },\n        Sns = new NewRelic.Cloud.Inputs.AwsIntegrationsSnsArgs\n        {\n            AwsRegions = new[]\n            {\n                \"us-east-1\",\n            },\n            FetchExtendedInventory = true,\n            MetricsPollingInterval = 6000,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/cloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := cloud.NewAwsLinkAccount(ctx, \"foo\", \u0026cloud.AwsLinkAccountArgs{\n\t\t\tArn:                  pulumi.Any(aws_iam_role.Newrelic_aws_role.Arn),\n\t\t\tMetricCollectionMode: pulumi.String(\"PULL\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloud.NewAwsIntegrations(ctx, \"bar\", \u0026cloud.AwsIntegrationsArgs{\n\t\t\tLinkedAccountId: foo.ID(),\n\t\t\tBilling:         nil,\n\t\t\tCloudtrail: \u0026cloud.AwsIntegrationsCloudtrailArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t\tpulumi.String(\"us-east-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tHealth: \u0026cloud.AwsIntegrationsHealthArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tTrustedAdvisor: \u0026cloud.AwsIntegrationsTrustedAdvisorArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tVpc: \u0026cloud.AwsIntegrationsVpcArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t\tpulumi.String(\"us-east-2\"),\n\t\t\t\t},\n\t\t\t\tFetchNatGateway: pulumi.Bool(true),\n\t\t\t\tFetchVpn:        pulumi.Bool(false),\n\t\t\t\tTagKey:          pulumi.String(\"tag key\"),\n\t\t\t\tTagValue:        pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tXRay: \u0026cloud.AwsIntegrationsXRayArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t\tpulumi.String(\"us-east-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tS3: \u0026cloud.AwsIntegrationsS3Args{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tDocDb: \u0026cloud.AwsIntegrationsDocDbArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tSqs: \u0026cloud.AwsIntegrationsSqsArgs{\n\t\t\t\tFetchExtendedInventory: pulumi.Bool(true),\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t\tQueuePrefixes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"queue prefix\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tTagKey:   pulumi.String(\"tag key\"),\n\t\t\t\tTagValue: pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tEbs: \u0026cloud.AwsIntegrationsEbsArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tFetchExtendedInventory: pulumi.Bool(true),\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tTagKey:   pulumi.String(\"tag key\"),\n\t\t\t\tTagValue: pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tAlb: \u0026cloud.AwsIntegrationsAlbArgs{\n\t\t\t\tFetchExtendedInventory: pulumi.Bool(true),\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t\tLoadBalancerPrefixes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"load balancer prefix\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tTagKey:   pulumi.String(\"tag key\"),\n\t\t\t\tTagValue: pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tElasticache: \u0026cloud.AwsIntegrationsElasticacheArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tTagKey:                 pulumi.String(\"tag key\"),\n\t\t\t\tTagValue:               pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tApiGateway: \u0026cloud.AwsIntegrationsApiGatewayArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tStagePrefixes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"stage prefix\"),\n\t\t\t\t},\n\t\t\t\tTagKey:   pulumi.String(\"tag key\"),\n\t\t\t\tTagValue: pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tAutoScaling: \u0026cloud.AwsIntegrationsAutoScalingArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsAppSync: \u0026cloud.AwsIntegrationsAwsAppSyncArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsAthena: \u0026cloud.AwsIntegrationsAwsAthenaArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsCognito: \u0026cloud.AwsIntegrationsAwsCognitoArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsConnect: \u0026cloud.AwsIntegrationsAwsConnectArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsDirectConnect: \u0026cloud.AwsIntegrationsAwsDirectConnectArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsFsx: \u0026cloud.AwsIntegrationsAwsFsxArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsGlue: \u0026cloud.AwsIntegrationsAwsGlueArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsKinesisAnalytics: \u0026cloud.AwsIntegrationsAwsKinesisAnalyticsArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsMediaConvert: \u0026cloud.AwsIntegrationsAwsMediaConvertArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsMediaPackageVod: \u0026cloud.AwsIntegrationsAwsMediaPackageVodArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsMq: \u0026cloud.AwsIntegrationsAwsMqArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsMsk: \u0026cloud.AwsIntegrationsAwsMskArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsNeptune: \u0026cloud.AwsIntegrationsAwsNeptuneArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsQldb: \u0026cloud.AwsIntegrationsAwsQldbArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsRoute53resolver: \u0026cloud.AwsIntegrationsAwsRoute53resolverArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsStates: \u0026cloud.AwsIntegrationsAwsStatesArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsTransitGateway: \u0026cloud.AwsIntegrationsAwsTransitGatewayArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsWaf: \u0026cloud.AwsIntegrationsAwsWafArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tAwsWafv2: \u0026cloud.AwsIntegrationsAwsWafv2Args{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tCloudfront: \u0026cloud.AwsIntegrationsCloudfrontArgs{\n\t\t\t\tFetchLambdasAtEdge:     pulumi.Bool(true),\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tTagKey:                 pulumi.String(\"tag key\"),\n\t\t\t\tTagValue:               pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tDynamodb: \u0026cloud.AwsIntegrationsDynamodbArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tFetchExtendedInventory: pulumi.Bool(true),\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tTagKey:                 pulumi.String(\"tag key\"),\n\t\t\t\tTagValue:               pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tEc2: \u0026cloud.AwsIntegrationsEc2Args{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tDuplicateEc2Tags:       pulumi.Bool(true),\n\t\t\t\tFetchIpAddresses:       pulumi.Bool(true),\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tTagKey:                 pulumi.String(\"tag key\"),\n\t\t\t\tTagValue:               pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tEcs: \u0026cloud.AwsIntegrationsEcsArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tTagKey:                 pulumi.String(\"tag key\"),\n\t\t\t\tTagValue:               pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tEfs: \u0026cloud.AwsIntegrationsEfsArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tTagKey:                 pulumi.String(\"tag key\"),\n\t\t\t\tTagValue:               pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tElasticbeanstalk: \u0026cloud.AwsIntegrationsElasticbeanstalkArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tFetchExtendedInventory: pulumi.Bool(true),\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tTagKey:                 pulumi.String(\"tag key\"),\n\t\t\t\tTagValue:               pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tElasticsearch: \u0026cloud.AwsIntegrationsElasticsearchArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tFetchNodes:             pulumi.Bool(true),\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tTagKey:                 pulumi.String(\"tag key\"),\n\t\t\t\tTagValue:               pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tElb: \u0026cloud.AwsIntegrationsElbArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tFetchExtendedInventory: pulumi.Bool(true),\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tEmr: \u0026cloud.AwsIntegrationsEmrArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tTagKey:                 pulumi.String(\"tag key\"),\n\t\t\t\tTagValue:               pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tIam: \u0026cloud.AwsIntegrationsIamArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tTagKey:                 pulumi.String(\"tag key\"),\n\t\t\t\tTagValue:               pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tIot: \u0026cloud.AwsIntegrationsIotArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tKinesis: \u0026cloud.AwsIntegrationsKinesisArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tFetchShards:            pulumi.Bool(true),\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tTagKey:                 pulumi.String(\"tag key\"),\n\t\t\t\tTagValue:               pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tKinesisFirehose: \u0026cloud.AwsIntegrationsKinesisFirehoseArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tLambda: \u0026cloud.AwsIntegrationsLambdaArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tTagKey:                 pulumi.String(\"tag key\"),\n\t\t\t\tTagValue:               pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tRds: \u0026cloud.AwsIntegrationsRdsArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tTagKey:                 pulumi.String(\"tag key\"),\n\t\t\t\tTagValue:               pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tRedshift: \u0026cloud.AwsIntegrationsRedshiftArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t\tTagKey:                 pulumi.String(\"tag key\"),\n\t\t\t\tTagValue:               pulumi.String(\"tag value\"),\n\t\t\t},\n\t\t\tRoute53: \u0026cloud.AwsIntegrationsRoute53Args{\n\t\t\t\tFetchExtendedInventory: pulumi.Bool(true),\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tSes: \u0026cloud.AwsIntegrationsSesArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t\tSns: \u0026cloud.AwsIntegrationsSnsArgs{\n\t\t\t\tAwsRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\t},\n\t\t\t\tFetchExtendedInventory: pulumi.Bool(true),\n\t\t\t\tMetricsPollingInterval: pulumi.Int(6000),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.cloud.AwsLinkAccount;\nimport com.pulumi.newrelic.cloud.AwsLinkAccountArgs;\nimport com.pulumi.newrelic.cloud.AwsIntegrations;\nimport com.pulumi.newrelic.cloud.AwsIntegrationsArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsBillingArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsCloudtrailArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsHealthArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsTrustedAdvisorArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsVpcArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsXRayArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsS3Args;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsDocDbArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsSqsArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsEbsArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAlbArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsElasticacheArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsApiGatewayArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAutoScalingArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsAppSyncArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsAthenaArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsCognitoArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsConnectArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsDirectConnectArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsFsxArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsGlueArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsKinesisAnalyticsArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsMediaConvertArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsMediaPackageVodArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsMqArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsMskArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsNeptuneArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsQldbArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsRoute53resolverArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsStatesArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsTransitGatewayArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsWafArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsAwsWafv2Args;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsCloudfrontArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsDynamodbArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsEc2Args;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsEcsArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsEfsArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsElasticbeanstalkArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsElasticsearchArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsElbArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsEmrArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsIamArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsIotArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsKinesisArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsKinesisFirehoseArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsLambdaArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsRdsArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsRedshiftArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsRoute53Args;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsSesArgs;\nimport com.pulumi.newrelic.cloud.inputs.AwsIntegrationsSnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AwsLinkAccount(\"foo\", AwsLinkAccountArgs.builder()        \n            .arn(aws_iam_role.newrelic_aws_role().arn())\n            .metricCollectionMode(\"PULL\")\n            .build());\n\n        var bar = new AwsIntegrations(\"bar\", AwsIntegrationsArgs.builder()        \n            .linkedAccountId(foo.id())\n            .billing()\n            .cloudtrail(AwsIntegrationsCloudtrailArgs.builder()\n                .metricsPollingInterval(6000)\n                .awsRegions(                \n                    \"us-east-1\",\n                    \"us-east-2\")\n                .build())\n            .health(AwsIntegrationsHealthArgs.builder()\n                .metricsPollingInterval(6000)\n                .build())\n            .trustedAdvisor(AwsIntegrationsTrustedAdvisorArgs.builder()\n                .metricsPollingInterval(6000)\n                .build())\n            .vpc(AwsIntegrationsVpcArgs.builder()\n                .metricsPollingInterval(6000)\n                .awsRegions(                \n                    \"us-east-1\",\n                    \"us-east-2\")\n                .fetchNatGateway(true)\n                .fetchVpn(false)\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .xRay(AwsIntegrationsXRayArgs.builder()\n                .metricsPollingInterval(6000)\n                .awsRegions(                \n                    \"us-east-1\",\n                    \"us-east-2\")\n                .build())\n            .s3(AwsIntegrationsS3Args.builder()\n                .metricsPollingInterval(6000)\n                .build())\n            .docDb(AwsIntegrationsDocDbArgs.builder()\n                .metricsPollingInterval(6000)\n                .build())\n            .sqs(AwsIntegrationsSqsArgs.builder()\n                .fetchExtendedInventory(true)\n                .fetchTags(true)\n                .queuePrefixes(\"queue prefix\")\n                .metricsPollingInterval(6000)\n                .awsRegions(\"us-east-1\")\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .ebs(AwsIntegrationsEbsArgs.builder()\n                .metricsPollingInterval(6000)\n                .fetchExtendedInventory(true)\n                .awsRegions(\"us-east-1\")\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .alb(AwsIntegrationsAlbArgs.builder()\n                .fetchExtendedInventory(true)\n                .fetchTags(true)\n                .loadBalancerPrefixes(\"load balancer prefix\")\n                .metricsPollingInterval(6000)\n                .awsRegions(\"us-east-1\")\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .elasticache(AwsIntegrationsElasticacheArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .fetchTags(true)\n                .metricsPollingInterval(6000)\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .apiGateway(AwsIntegrationsApiGatewayArgs.builder()\n                .metricsPollingInterval(6000)\n                .awsRegions(\"us-east-1\")\n                .stagePrefixes(\"stage prefix\")\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .autoScaling(AwsIntegrationsAutoScalingArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsAppSync(AwsIntegrationsAwsAppSyncArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsAthena(AwsIntegrationsAwsAthenaArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsCognito(AwsIntegrationsAwsCognitoArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsConnect(AwsIntegrationsAwsConnectArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsDirectConnect(AwsIntegrationsAwsDirectConnectArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsFsx(AwsIntegrationsAwsFsxArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsGlue(AwsIntegrationsAwsGlueArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsKinesisAnalytics(AwsIntegrationsAwsKinesisAnalyticsArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsMediaConvert(AwsIntegrationsAwsMediaConvertArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsMediaPackageVod(AwsIntegrationsAwsMediaPackageVodArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsMq(AwsIntegrationsAwsMqArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsMsk(AwsIntegrationsAwsMskArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsNeptune(AwsIntegrationsAwsNeptuneArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsQldb(AwsIntegrationsAwsQldbArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsRoute53resolver(AwsIntegrationsAwsRoute53resolverArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsStates(AwsIntegrationsAwsStatesArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsTransitGateway(AwsIntegrationsAwsTransitGatewayArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsWaf(AwsIntegrationsAwsWafArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .awsWafv2(AwsIntegrationsAwsWafv2Args.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .cloudfront(AwsIntegrationsCloudfrontArgs.builder()\n                .fetchLambdasAtEdge(true)\n                .fetchTags(true)\n                .metricsPollingInterval(6000)\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .dynamodb(AwsIntegrationsDynamodbArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .fetchExtendedInventory(true)\n                .fetchTags(true)\n                .metricsPollingInterval(6000)\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .ec2(AwsIntegrationsEc2Args.builder()\n                .awsRegions(\"us-east-1\")\n                .duplicateEc2Tags(true)\n                .fetchIpAddresses(true)\n                .metricsPollingInterval(6000)\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .ecs(AwsIntegrationsEcsArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .fetchTags(true)\n                .metricsPollingInterval(6000)\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .efs(AwsIntegrationsEfsArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .fetchTags(true)\n                .metricsPollingInterval(6000)\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .elasticbeanstalk(AwsIntegrationsElasticbeanstalkArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .fetchExtendedInventory(true)\n                .fetchTags(true)\n                .metricsPollingInterval(6000)\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .elasticsearch(AwsIntegrationsElasticsearchArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .fetchNodes(true)\n                .metricsPollingInterval(6000)\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .elb(AwsIntegrationsElbArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .fetchExtendedInventory(true)\n                .fetchTags(true)\n                .metricsPollingInterval(6000)\n                .build())\n            .emr(AwsIntegrationsEmrArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .fetchTags(true)\n                .metricsPollingInterval(6000)\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .iam(AwsIntegrationsIamArgs.builder()\n                .metricsPollingInterval(6000)\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .iot(AwsIntegrationsIotArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .kinesis(AwsIntegrationsKinesisArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .fetchShards(true)\n                .fetchTags(true)\n                .metricsPollingInterval(6000)\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .kinesisFirehose(AwsIntegrationsKinesisFirehoseArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .lambda(AwsIntegrationsLambdaArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .fetchTags(true)\n                .metricsPollingInterval(6000)\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .rds(AwsIntegrationsRdsArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .fetchTags(true)\n                .metricsPollingInterval(6000)\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .redshift(AwsIntegrationsRedshiftArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .tagKey(\"tag key\")\n                .tagValue(\"tag value\")\n                .build())\n            .route53(AwsIntegrationsRoute53Args.builder()\n                .fetchExtendedInventory(true)\n                .metricsPollingInterval(6000)\n                .build())\n            .ses(AwsIntegrationsSesArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .metricsPollingInterval(6000)\n                .build())\n            .sns(AwsIntegrationsSnsArgs.builder()\n                .awsRegions(\"us-east-1\")\n                .fetchExtendedInventory(true)\n                .metricsPollingInterval(6000)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:cloud:AwsLinkAccount\n    properties:\n      arn: ${aws_iam_role.newrelic_aws_role.arn}\n      metricCollectionMode: PULL\n  bar:\n    type: newrelic:cloud:AwsIntegrations\n    properties:\n      linkedAccountId: ${foo.id}\n      billing: {}\n      cloudtrail:\n        metricsPollingInterval: 6000\n        awsRegions:\n          - us-east-1\n          - us-east-2\n      health:\n        metricsPollingInterval: 6000\n      trustedAdvisor:\n        metricsPollingInterval: 6000\n      vpc:\n        metricsPollingInterval: 6000\n        awsRegions:\n          - us-east-1\n          - us-east-2\n        fetchNatGateway: true\n        fetchVpn: false\n        tagKey: tag key\n        tagValue: tag value\n      xRay:\n        metricsPollingInterval: 6000\n        awsRegions:\n          - us-east-1\n          - us-east-2\n      s3:\n        metricsPollingInterval: 6000\n      docDb:\n        metricsPollingInterval: 6000\n      sqs:\n        fetchExtendedInventory: true\n        fetchTags: true\n        queuePrefixes:\n          - queue prefix\n        metricsPollingInterval: 6000\n        awsRegions:\n          - us-east-1\n        tagKey: tag key\n        tagValue: tag value\n      ebs:\n        metricsPollingInterval: 6000\n        fetchExtendedInventory: true\n        awsRegions:\n          - us-east-1\n        tagKey: tag key\n        tagValue: tag value\n      alb:\n        fetchExtendedInventory: true\n        fetchTags: true\n        loadBalancerPrefixes:\n          - load balancer prefix\n        metricsPollingInterval: 6000\n        awsRegions:\n          - us-east-1\n        tagKey: tag key\n        tagValue: tag value\n      elasticache:\n        awsRegions:\n          - us-east-1\n        fetchTags: true\n        metricsPollingInterval: 6000\n        tagKey: tag key\n        tagValue: tag value\n      apiGateway:\n        metricsPollingInterval: 6000\n        awsRegions:\n          - us-east-1\n        stagePrefixes:\n          - stage prefix\n        tagKey: tag key\n        tagValue: tag value\n      autoScaling:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsAppSync:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsAthena:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsCognito:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsConnect:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsDirectConnect:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsFsx:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsGlue:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsKinesisAnalytics:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsMediaConvert:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsMediaPackageVod:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsMq:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsMsk:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsNeptune:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsQldb:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsRoute53resolver:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsStates:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsTransitGateway:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsWaf:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      awsWafv2:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      cloudfront:\n        fetchLambdasAtEdge: true\n        fetchTags: true\n        metricsPollingInterval: 6000\n        tagKey: tag key\n        tagValue: tag value\n      dynamodb:\n        awsRegions:\n          - us-east-1\n        fetchExtendedInventory: true\n        fetchTags: true\n        metricsPollingInterval: 6000\n        tagKey: tag key\n        tagValue: tag value\n      ec2:\n        awsRegions:\n          - us-east-1\n        duplicateEc2Tags: true\n        fetchIpAddresses: true\n        metricsPollingInterval: 6000\n        tagKey: tag key\n        tagValue: tag value\n      ecs:\n        awsRegions:\n          - us-east-1\n        fetchTags: true\n        metricsPollingInterval: 6000\n        tagKey: tag key\n        tagValue: tag value\n      efs:\n        awsRegions:\n          - us-east-1\n        fetchTags: true\n        metricsPollingInterval: 6000\n        tagKey: tag key\n        tagValue: tag value\n      elasticbeanstalk:\n        awsRegions:\n          - us-east-1\n        fetchExtendedInventory: true\n        fetchTags: true\n        metricsPollingInterval: 6000\n        tagKey: tag key\n        tagValue: tag value\n      elasticsearch:\n        awsRegions:\n          - us-east-1\n        fetchNodes: true\n        metricsPollingInterval: 6000\n        tagKey: tag key\n        tagValue: tag value\n      elb:\n        awsRegions:\n          - us-east-1\n        fetchExtendedInventory: true\n        fetchTags: true\n        metricsPollingInterval: 6000\n      emr:\n        awsRegions:\n          - us-east-1\n        fetchTags: true\n        metricsPollingInterval: 6000\n        tagKey: tag key\n        tagValue: tag value\n      iam:\n        metricsPollingInterval: 6000\n        tagKey: tag key\n        tagValue: tag value\n      iot:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      kinesis:\n        awsRegions:\n          - us-east-1\n        fetchShards: true\n        fetchTags: true\n        metricsPollingInterval: 6000\n        tagKey: tag key\n        tagValue: tag value\n      kinesisFirehose:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      lambda:\n        awsRegions:\n          - us-east-1\n        fetchTags: true\n        metricsPollingInterval: 6000\n        tagKey: tag key\n        tagValue: tag value\n      rds:\n        awsRegions:\n          - us-east-1\n        fetchTags: true\n        metricsPollingInterval: 6000\n        tagKey: tag key\n        tagValue: tag value\n      redshift:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n        tagKey: tag key\n        tagValue: tag value\n      route53:\n        fetchExtendedInventory: true\n        metricsPollingInterval: 6000\n      ses:\n        awsRegions:\n          - us-east-1\n        metricsPollingInterval: 6000\n      sns:\n        awsRegions:\n          - us-east-1\n        fetchExtendedInventory: true\n        metricsPollingInterval: 6000\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinked AWS account integrations can be imported using the `id`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:cloud/awsIntegrations:AwsIntegrations foo \u003cid\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "alb": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAlb:AwsIntegrationsAlb",
                    "description": "ALB integration\n"
                },
                "apiGateway": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsApiGateway:AwsIntegrationsApiGateway",
                    "description": "API Gateway integration\n"
                },
                "autoScaling": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAutoScaling:AwsIntegrationsAutoScaling",
                    "description": ",`aws_app_sync`,`aws_athena`,`aws_cognito`,`aws_connect`,`aws_direct_connect`,`aws_fsx`,`aws_glue`,`aws_kinesis_analytics`,`aws_media_convert`,`aws_media_package_vod`,`aws_mq`,`aws_msk`,`aws_neptune`,`aws_qldb`,`aws_route53resolver`,`aws_states`,`aws_transit_gateway`,`aws_waf`,`aws_wafv2`,`iot`,`kinesis_firehose` and `ses`.\n"
                },
                "awsAppSync": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsAppSync:AwsIntegrationsAwsAppSync",
                    "description": "Aws Appsync integration\n"
                },
                "awsAthena": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsAthena:AwsIntegrationsAwsAthena",
                    "description": "Aws Athena integration\n"
                },
                "awsCognito": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsCognito:AwsIntegrationsAwsCognito",
                    "description": "Aws Cognito integration\n"
                },
                "awsConnect": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsConnect:AwsIntegrationsAwsConnect",
                    "description": "Aws Connect integration\n"
                },
                "awsDirectConnect": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsDirectConnect:AwsIntegrationsAwsDirectConnect",
                    "description": "Aws Direct Connect integration\n"
                },
                "awsFsx": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsFsx:AwsIntegrationsAwsFsx",
                    "description": "Aws Fsx integration\n"
                },
                "awsGlue": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsGlue:AwsIntegrationsAwsGlue",
                    "description": "Aws Glue integration\n"
                },
                "awsKinesisAnalytics": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsKinesisAnalytics:AwsIntegrationsAwsKinesisAnalytics",
                    "description": "Aws Kinesis Analytics integration\n"
                },
                "awsMediaConvert": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsMediaConvert:AwsIntegrationsAwsMediaConvert",
                    "description": "Aws Media Convert integration\n"
                },
                "awsMediaPackageVod": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsMediaPackageVod:AwsIntegrationsAwsMediaPackageVod",
                    "description": "Aws Media PackageVod integration\n"
                },
                "awsMq": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsMq:AwsIntegrationsAwsMq",
                    "description": "Aws Mq integration\n"
                },
                "awsMsk": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsMsk:AwsIntegrationsAwsMsk",
                    "description": "Aws Msk integration\n"
                },
                "awsNeptune": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsNeptune:AwsIntegrationsAwsNeptune",
                    "description": "Aws Neptune integration\n"
                },
                "awsQldb": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsQldb:AwsIntegrationsAwsQldb",
                    "description": "Aws Qldb integration\n"
                },
                "awsRoute53resolver": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsRoute53resolver:AwsIntegrationsAwsRoute53resolver",
                    "description": "Aws Route53resolver integration\n"
                },
                "awsStates": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsStates:AwsIntegrationsAwsStates",
                    "description": "Aws states integration\n"
                },
                "awsTransitGateway": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsTransitGateway:AwsIntegrationsAwsTransitGateway",
                    "description": "Aws Transit Gateway integration\n"
                },
                "awsWaf": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsWaf:AwsIntegrationsAwsWaf",
                    "description": "Aws Waf integration\n"
                },
                "awsWafv2": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsWafv2:AwsIntegrationsAwsWafv2",
                    "description": "Aws Wafv2 integration\n"
                },
                "billing": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsBilling:AwsIntegrationsBilling",
                    "description": "Billing integration\n"
                },
                "cloudfront": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsCloudfront:AwsIntegrationsCloudfront",
                    "description": "Cloudfront integration\n"
                },
                "cloudtrail": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsCloudtrail:AwsIntegrationsCloudtrail",
                    "description": "CloudTrail integration\n"
                },
                "docDb": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsDocDb:AwsIntegrationsDocDb",
                    "description": "Doc DB integration\n"
                },
                "dynamodb": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsDynamodb:AwsIntegrationsDynamodb",
                    "description": "Dynamo DB integration\n"
                },
                "ebs": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsEbs:AwsIntegrationsEbs",
                    "description": "EBS integration\n"
                },
                "ec2": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsEc2:AwsIntegrationsEc2",
                    "description": "Ec2 integration\n"
                },
                "ecs": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsEcs:AwsIntegrationsEcs",
                    "description": "Ecs integration\n"
                },
                "efs": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsEfs:AwsIntegrationsEfs",
                    "description": "Efs integration\n"
                },
                "elasticache": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsElasticache:AwsIntegrationsElasticache",
                    "description": "Elasticache integration\n"
                },
                "elasticbeanstalk": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsElasticbeanstalk:AwsIntegrationsElasticbeanstalk",
                    "description": "Elastic Bean Stalk integration\n"
                },
                "elasticsearch": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsElasticsearch:AwsIntegrationsElasticsearch",
                    "description": "Elastic Search integration\n"
                },
                "elb": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsElb:AwsIntegrationsElb",
                    "description": "Elb integration\n"
                },
                "emr": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsEmr:AwsIntegrationsEmr",
                    "description": "Emr integration\n"
                },
                "health": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsHealth:AwsIntegrationsHealth",
                    "description": "Health integration\n"
                },
                "iam": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsIam:AwsIntegrationsIam",
                    "description": "Iam integration\n"
                },
                "iot": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsIot:AwsIntegrationsIot",
                    "description": "Iot integration\n"
                },
                "kinesis": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsKinesis:AwsIntegrationsKinesis",
                    "description": "Kinesis integration\n"
                },
                "kinesisFirehose": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsKinesisFirehose:AwsIntegrationsKinesisFirehose",
                    "description": "Kinesis Firehose integration\n"
                },
                "lambda": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsLambda:AwsIntegrationsLambda",
                    "description": "Lambda integration\n"
                },
                "linkedAccountId": {
                    "type": "integer",
                    "description": "The ID of the linked AWS account in New Relic.\n\nAll other arguments are dependent on the services to be integrated, which have been listed in the collapsible section below. All of these are **optional** blocks that can be added in any required combination. **For details on arguments that can be used with each service, check out the `Integration` blocks section below.**\n\u003cdetails\u003e\n\u003csummary\u003eExpand this section to view all supported AWS services supported, that may be integrated via this resource.\u003c/summary\u003e\n\n| Block                   | Description                   |\n|-------------------------|-------------------------------|\n| `alb`                   | ALB Integration               |\n| `api_gateway`           | API Gateway Integration       |\n| `auto_scaling`          | Auto Scaling Integration      |\n| `aws_app_sync`          | AppSync Integration           |\n| `aws_athena`            | Athena Integration            |\n| `aws_cognito`           | Cognito Integration           |\n| `aws_connect`           | Connect Integration           |\n| `aws_direct_connect`    | Direct Connect Integration    |\n| `aws_fsx`               | FSx Integration               |\n| `aws_glue`              | Glue Integration              |\n| `aws_kinesis_analytics` | Kinesis Analytics Integration |\n| `aws_media_convert`     | MediaConvert Integration      |\n| `aws_media_package_vod` | Media Package VOD Integration |\n| `aws_mq`                | MQ Integration                |\n| `aws_msk`               | MSK Integration               |\n| `aws_neptune`           | Neptune Integration           |\n| `aws_qldb`              | QLDB Integration              |\n| `aws_route53resolver`   | Route53 Resolver Integration  |\n| `aws_states`            | States Integration            |\n| `aws_transit_gateway`   | Transit Gateway Integration   |\n| `aws_waf`               | WAF Integration               |\n| `aws_wafv2`             | WAFv2 Integration             |\n| `billing`               | Billing Integration           |\n| `cloudfront`            | CloudFront Integration        |\n| `cloudtrail`            | CloudTrail Integration        |\n| `doc_db`                | DocumentDB Integration        |\n| `dynamodb`              | DynamoDB Integration          |\n| `ebs`                   | EBS Integration               |\n| `ec2`                   | EC2 Integration               |\n| `ecs`                   | ECS Integration               |\n| `efs`                   | EFS Integration               |\n| `elasticache`           | ElastiCache Integration       |\n| `elasticbeanstalk`      | Elastic Beanstalk Integration |\n| `elasticsearch`         | Elasticsearch Integration     |\n| `elb`                   | ELB Integration               |\n| `emr`                   | EMR Integration               |\n| `health`                | Health Integration            |\n| `iam`                   | IAM Integration               |\n| `iot`                   | IoT Integration               |\n| `kinesis`               | Kinesis Integration           |\n| `kinesis_firehose`      | Kinesis Firehose Integration  |\n| `lambda`                | Lambda Integration            |\n| `rds`                   | RDS Integration               |\n| `redshift`              | Redshift Integration          |\n| `route53`               | Route53 Integration           |\n| `s3`                    | S3 Integration                |\n| `ses`                   | SES Integration               |\n| `sns`                   | SNS Integration               |\n| `sqs`                   | SQS Integration               |\n| `trusted_advisor`       | Trusted Advisor Integration   |\n| `vpc`                   | VPC Integration               |\n| `x_ray`                 | X-Ray Integration             |\n\n\u003c/details\u003e\n"
                },
                "rds": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsRds:AwsIntegrationsRds",
                    "description": "Rds integration\n"
                },
                "redshift": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsRedshift:AwsIntegrationsRedshift",
                    "description": "Redshift integration\n"
                },
                "route53": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsRoute53:AwsIntegrationsRoute53",
                    "description": "Route53 integration\n"
                },
                "s3": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsS3:AwsIntegrationsS3",
                    "description": "S3 integration\n"
                },
                "ses": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsSes:AwsIntegrationsSes",
                    "description": "Ses integration\n"
                },
                "sns": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsSns:AwsIntegrationsSns",
                    "description": "Sns integration\n"
                },
                "sqs": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsSqs:AwsIntegrationsSqs",
                    "description": "SQS integration\n"
                },
                "trustedAdvisor": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsTrustedAdvisor:AwsIntegrationsTrustedAdvisor",
                    "description": "Trusted Advisor integration\n"
                },
                "vpc": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsVpc:AwsIntegrationsVpc",
                    "description": "VPC integration\n"
                },
                "xRay": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsXRay:AwsIntegrationsXRay",
                    "description": "X-Ray integration\n"
                }
            },
            "required": [
                "accountId",
                "linkedAccountId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "alb": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAlb:AwsIntegrationsAlb",
                    "description": "ALB integration\n"
                },
                "apiGateway": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsApiGateway:AwsIntegrationsApiGateway",
                    "description": "API Gateway integration\n"
                },
                "autoScaling": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAutoScaling:AwsIntegrationsAutoScaling",
                    "description": ",`aws_app_sync`,`aws_athena`,`aws_cognito`,`aws_connect`,`aws_direct_connect`,`aws_fsx`,`aws_glue`,`aws_kinesis_analytics`,`aws_media_convert`,`aws_media_package_vod`,`aws_mq`,`aws_msk`,`aws_neptune`,`aws_qldb`,`aws_route53resolver`,`aws_states`,`aws_transit_gateway`,`aws_waf`,`aws_wafv2`,`iot`,`kinesis_firehose` and `ses`.\n"
                },
                "awsAppSync": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsAppSync:AwsIntegrationsAwsAppSync",
                    "description": "Aws Appsync integration\n"
                },
                "awsAthena": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsAthena:AwsIntegrationsAwsAthena",
                    "description": "Aws Athena integration\n"
                },
                "awsCognito": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsCognito:AwsIntegrationsAwsCognito",
                    "description": "Aws Cognito integration\n"
                },
                "awsConnect": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsConnect:AwsIntegrationsAwsConnect",
                    "description": "Aws Connect integration\n"
                },
                "awsDirectConnect": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsDirectConnect:AwsIntegrationsAwsDirectConnect",
                    "description": "Aws Direct Connect integration\n"
                },
                "awsFsx": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsFsx:AwsIntegrationsAwsFsx",
                    "description": "Aws Fsx integration\n"
                },
                "awsGlue": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsGlue:AwsIntegrationsAwsGlue",
                    "description": "Aws Glue integration\n"
                },
                "awsKinesisAnalytics": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsKinesisAnalytics:AwsIntegrationsAwsKinesisAnalytics",
                    "description": "Aws Kinesis Analytics integration\n"
                },
                "awsMediaConvert": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsMediaConvert:AwsIntegrationsAwsMediaConvert",
                    "description": "Aws Media Convert integration\n"
                },
                "awsMediaPackageVod": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsMediaPackageVod:AwsIntegrationsAwsMediaPackageVod",
                    "description": "Aws Media PackageVod integration\n"
                },
                "awsMq": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsMq:AwsIntegrationsAwsMq",
                    "description": "Aws Mq integration\n"
                },
                "awsMsk": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsMsk:AwsIntegrationsAwsMsk",
                    "description": "Aws Msk integration\n"
                },
                "awsNeptune": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsNeptune:AwsIntegrationsAwsNeptune",
                    "description": "Aws Neptune integration\n"
                },
                "awsQldb": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsQldb:AwsIntegrationsAwsQldb",
                    "description": "Aws Qldb integration\n"
                },
                "awsRoute53resolver": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsRoute53resolver:AwsIntegrationsAwsRoute53resolver",
                    "description": "Aws Route53resolver integration\n"
                },
                "awsStates": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsStates:AwsIntegrationsAwsStates",
                    "description": "Aws states integration\n"
                },
                "awsTransitGateway": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsTransitGateway:AwsIntegrationsAwsTransitGateway",
                    "description": "Aws Transit Gateway integration\n"
                },
                "awsWaf": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsWaf:AwsIntegrationsAwsWaf",
                    "description": "Aws Waf integration\n"
                },
                "awsWafv2": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsWafv2:AwsIntegrationsAwsWafv2",
                    "description": "Aws Wafv2 integration\n"
                },
                "billing": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsBilling:AwsIntegrationsBilling",
                    "description": "Billing integration\n"
                },
                "cloudfront": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsCloudfront:AwsIntegrationsCloudfront",
                    "description": "Cloudfront integration\n"
                },
                "cloudtrail": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsCloudtrail:AwsIntegrationsCloudtrail",
                    "description": "CloudTrail integration\n"
                },
                "docDb": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsDocDb:AwsIntegrationsDocDb",
                    "description": "Doc DB integration\n"
                },
                "dynamodb": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsDynamodb:AwsIntegrationsDynamodb",
                    "description": "Dynamo DB integration\n"
                },
                "ebs": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsEbs:AwsIntegrationsEbs",
                    "description": "EBS integration\n"
                },
                "ec2": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsEc2:AwsIntegrationsEc2",
                    "description": "Ec2 integration\n"
                },
                "ecs": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsEcs:AwsIntegrationsEcs",
                    "description": "Ecs integration\n"
                },
                "efs": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsEfs:AwsIntegrationsEfs",
                    "description": "Efs integration\n"
                },
                "elasticache": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsElasticache:AwsIntegrationsElasticache",
                    "description": "Elasticache integration\n"
                },
                "elasticbeanstalk": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsElasticbeanstalk:AwsIntegrationsElasticbeanstalk",
                    "description": "Elastic Bean Stalk integration\n"
                },
                "elasticsearch": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsElasticsearch:AwsIntegrationsElasticsearch",
                    "description": "Elastic Search integration\n"
                },
                "elb": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsElb:AwsIntegrationsElb",
                    "description": "Elb integration\n"
                },
                "emr": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsEmr:AwsIntegrationsEmr",
                    "description": "Emr integration\n"
                },
                "health": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsHealth:AwsIntegrationsHealth",
                    "description": "Health integration\n"
                },
                "iam": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsIam:AwsIntegrationsIam",
                    "description": "Iam integration\n"
                },
                "iot": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsIot:AwsIntegrationsIot",
                    "description": "Iot integration\n"
                },
                "kinesis": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsKinesis:AwsIntegrationsKinesis",
                    "description": "Kinesis integration\n"
                },
                "kinesisFirehose": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsKinesisFirehose:AwsIntegrationsKinesisFirehose",
                    "description": "Kinesis Firehose integration\n"
                },
                "lambda": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsLambda:AwsIntegrationsLambda",
                    "description": "Lambda integration\n"
                },
                "linkedAccountId": {
                    "type": "integer",
                    "description": "The ID of the linked AWS account in New Relic.\n\nAll other arguments are dependent on the services to be integrated, which have been listed in the collapsible section below. All of these are **optional** blocks that can be added in any required combination. **For details on arguments that can be used with each service, check out the `Integration` blocks section below.**\n\u003cdetails\u003e\n\u003csummary\u003eExpand this section to view all supported AWS services supported, that may be integrated via this resource.\u003c/summary\u003e\n\n| Block                   | Description                   |\n|-------------------------|-------------------------------|\n| `alb`                   | ALB Integration               |\n| `api_gateway`           | API Gateway Integration       |\n| `auto_scaling`          | Auto Scaling Integration      |\n| `aws_app_sync`          | AppSync Integration           |\n| `aws_athena`            | Athena Integration            |\n| `aws_cognito`           | Cognito Integration           |\n| `aws_connect`           | Connect Integration           |\n| `aws_direct_connect`    | Direct Connect Integration    |\n| `aws_fsx`               | FSx Integration               |\n| `aws_glue`              | Glue Integration              |\n| `aws_kinesis_analytics` | Kinesis Analytics Integration |\n| `aws_media_convert`     | MediaConvert Integration      |\n| `aws_media_package_vod` | Media Package VOD Integration |\n| `aws_mq`                | MQ Integration                |\n| `aws_msk`               | MSK Integration               |\n| `aws_neptune`           | Neptune Integration           |\n| `aws_qldb`              | QLDB Integration              |\n| `aws_route53resolver`   | Route53 Resolver Integration  |\n| `aws_states`            | States Integration            |\n| `aws_transit_gateway`   | Transit Gateway Integration   |\n| `aws_waf`               | WAF Integration               |\n| `aws_wafv2`             | WAFv2 Integration             |\n| `billing`               | Billing Integration           |\n| `cloudfront`            | CloudFront Integration        |\n| `cloudtrail`            | CloudTrail Integration        |\n| `doc_db`                | DocumentDB Integration        |\n| `dynamodb`              | DynamoDB Integration          |\n| `ebs`                   | EBS Integration               |\n| `ec2`                   | EC2 Integration               |\n| `ecs`                   | ECS Integration               |\n| `efs`                   | EFS Integration               |\n| `elasticache`           | ElastiCache Integration       |\n| `elasticbeanstalk`      | Elastic Beanstalk Integration |\n| `elasticsearch`         | Elasticsearch Integration     |\n| `elb`                   | ELB Integration               |\n| `emr`                   | EMR Integration               |\n| `health`                | Health Integration            |\n| `iam`                   | IAM Integration               |\n| `iot`                   | IoT Integration               |\n| `kinesis`               | Kinesis Integration           |\n| `kinesis_firehose`      | Kinesis Firehose Integration  |\n| `lambda`                | Lambda Integration            |\n| `rds`                   | RDS Integration               |\n| `redshift`              | Redshift Integration          |\n| `route53`               | Route53 Integration           |\n| `s3`                    | S3 Integration                |\n| `ses`                   | SES Integration               |\n| `sns`                   | SNS Integration               |\n| `sqs`                   | SQS Integration               |\n| `trusted_advisor`       | Trusted Advisor Integration   |\n| `vpc`                   | VPC Integration               |\n| `x_ray`                 | X-Ray Integration             |\n\n\u003c/details\u003e\n",
                    "willReplaceOnChanges": true
                },
                "rds": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsRds:AwsIntegrationsRds",
                    "description": "Rds integration\n"
                },
                "redshift": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsRedshift:AwsIntegrationsRedshift",
                    "description": "Redshift integration\n"
                },
                "route53": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsRoute53:AwsIntegrationsRoute53",
                    "description": "Route53 integration\n"
                },
                "s3": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsS3:AwsIntegrationsS3",
                    "description": "S3 integration\n"
                },
                "ses": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsSes:AwsIntegrationsSes",
                    "description": "Ses integration\n"
                },
                "sns": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsSns:AwsIntegrationsSns",
                    "description": "Sns integration\n"
                },
                "sqs": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsSqs:AwsIntegrationsSqs",
                    "description": "SQS integration\n"
                },
                "trustedAdvisor": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsTrustedAdvisor:AwsIntegrationsTrustedAdvisor",
                    "description": "Trusted Advisor integration\n"
                },
                "vpc": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsVpc:AwsIntegrationsVpc",
                    "description": "VPC integration\n"
                },
                "xRay": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsXRay:AwsIntegrationsXRay",
                    "description": "X-Ray integration\n"
                }
            },
            "requiredInputs": [
                "linkedAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsIntegrations resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "alb": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAlb:AwsIntegrationsAlb",
                        "description": "ALB integration\n"
                    },
                    "apiGateway": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsApiGateway:AwsIntegrationsApiGateway",
                        "description": "API Gateway integration\n"
                    },
                    "autoScaling": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAutoScaling:AwsIntegrationsAutoScaling",
                        "description": ",`aws_app_sync`,`aws_athena`,`aws_cognito`,`aws_connect`,`aws_direct_connect`,`aws_fsx`,`aws_glue`,`aws_kinesis_analytics`,`aws_media_convert`,`aws_media_package_vod`,`aws_mq`,`aws_msk`,`aws_neptune`,`aws_qldb`,`aws_route53resolver`,`aws_states`,`aws_transit_gateway`,`aws_waf`,`aws_wafv2`,`iot`,`kinesis_firehose` and `ses`.\n"
                    },
                    "awsAppSync": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsAppSync:AwsIntegrationsAwsAppSync",
                        "description": "Aws Appsync integration\n"
                    },
                    "awsAthena": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsAthena:AwsIntegrationsAwsAthena",
                        "description": "Aws Athena integration\n"
                    },
                    "awsCognito": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsCognito:AwsIntegrationsAwsCognito",
                        "description": "Aws Cognito integration\n"
                    },
                    "awsConnect": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsConnect:AwsIntegrationsAwsConnect",
                        "description": "Aws Connect integration\n"
                    },
                    "awsDirectConnect": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsDirectConnect:AwsIntegrationsAwsDirectConnect",
                        "description": "Aws Direct Connect integration\n"
                    },
                    "awsFsx": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsFsx:AwsIntegrationsAwsFsx",
                        "description": "Aws Fsx integration\n"
                    },
                    "awsGlue": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsGlue:AwsIntegrationsAwsGlue",
                        "description": "Aws Glue integration\n"
                    },
                    "awsKinesisAnalytics": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsKinesisAnalytics:AwsIntegrationsAwsKinesisAnalytics",
                        "description": "Aws Kinesis Analytics integration\n"
                    },
                    "awsMediaConvert": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsMediaConvert:AwsIntegrationsAwsMediaConvert",
                        "description": "Aws Media Convert integration\n"
                    },
                    "awsMediaPackageVod": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsMediaPackageVod:AwsIntegrationsAwsMediaPackageVod",
                        "description": "Aws Media PackageVod integration\n"
                    },
                    "awsMq": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsMq:AwsIntegrationsAwsMq",
                        "description": "Aws Mq integration\n"
                    },
                    "awsMsk": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsMsk:AwsIntegrationsAwsMsk",
                        "description": "Aws Msk integration\n"
                    },
                    "awsNeptune": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsNeptune:AwsIntegrationsAwsNeptune",
                        "description": "Aws Neptune integration\n"
                    },
                    "awsQldb": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsQldb:AwsIntegrationsAwsQldb",
                        "description": "Aws Qldb integration\n"
                    },
                    "awsRoute53resolver": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsRoute53resolver:AwsIntegrationsAwsRoute53resolver",
                        "description": "Aws Route53resolver integration\n"
                    },
                    "awsStates": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsStates:AwsIntegrationsAwsStates",
                        "description": "Aws states integration\n"
                    },
                    "awsTransitGateway": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsTransitGateway:AwsIntegrationsAwsTransitGateway",
                        "description": "Aws Transit Gateway integration\n"
                    },
                    "awsWaf": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsWaf:AwsIntegrationsAwsWaf",
                        "description": "Aws Waf integration\n"
                    },
                    "awsWafv2": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsAwsWafv2:AwsIntegrationsAwsWafv2",
                        "description": "Aws Wafv2 integration\n"
                    },
                    "billing": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsBilling:AwsIntegrationsBilling",
                        "description": "Billing integration\n"
                    },
                    "cloudfront": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsCloudfront:AwsIntegrationsCloudfront",
                        "description": "Cloudfront integration\n"
                    },
                    "cloudtrail": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsCloudtrail:AwsIntegrationsCloudtrail",
                        "description": "CloudTrail integration\n"
                    },
                    "docDb": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsDocDb:AwsIntegrationsDocDb",
                        "description": "Doc DB integration\n"
                    },
                    "dynamodb": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsDynamodb:AwsIntegrationsDynamodb",
                        "description": "Dynamo DB integration\n"
                    },
                    "ebs": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsEbs:AwsIntegrationsEbs",
                        "description": "EBS integration\n"
                    },
                    "ec2": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsEc2:AwsIntegrationsEc2",
                        "description": "Ec2 integration\n"
                    },
                    "ecs": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsEcs:AwsIntegrationsEcs",
                        "description": "Ecs integration\n"
                    },
                    "efs": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsEfs:AwsIntegrationsEfs",
                        "description": "Efs integration\n"
                    },
                    "elasticache": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsElasticache:AwsIntegrationsElasticache",
                        "description": "Elasticache integration\n"
                    },
                    "elasticbeanstalk": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsElasticbeanstalk:AwsIntegrationsElasticbeanstalk",
                        "description": "Elastic Bean Stalk integration\n"
                    },
                    "elasticsearch": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsElasticsearch:AwsIntegrationsElasticsearch",
                        "description": "Elastic Search integration\n"
                    },
                    "elb": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsElb:AwsIntegrationsElb",
                        "description": "Elb integration\n"
                    },
                    "emr": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsEmr:AwsIntegrationsEmr",
                        "description": "Emr integration\n"
                    },
                    "health": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsHealth:AwsIntegrationsHealth",
                        "description": "Health integration\n"
                    },
                    "iam": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsIam:AwsIntegrationsIam",
                        "description": "Iam integration\n"
                    },
                    "iot": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsIot:AwsIntegrationsIot",
                        "description": "Iot integration\n"
                    },
                    "kinesis": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsKinesis:AwsIntegrationsKinesis",
                        "description": "Kinesis integration\n"
                    },
                    "kinesisFirehose": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsKinesisFirehose:AwsIntegrationsKinesisFirehose",
                        "description": "Kinesis Firehose integration\n"
                    },
                    "lambda": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsLambda:AwsIntegrationsLambda",
                        "description": "Lambda integration\n"
                    },
                    "linkedAccountId": {
                        "type": "integer",
                        "description": "The ID of the linked AWS account in New Relic.\n\nAll other arguments are dependent on the services to be integrated, which have been listed in the collapsible section below. All of these are **optional** blocks that can be added in any required combination. **For details on arguments that can be used with each service, check out the `Integration` blocks section below.**\n\u003cdetails\u003e\n\u003csummary\u003eExpand this section to view all supported AWS services supported, that may be integrated via this resource.\u003c/summary\u003e\n\n| Block                   | Description                   |\n|-------------------------|-------------------------------|\n| `alb`                   | ALB Integration               |\n| `api_gateway`           | API Gateway Integration       |\n| `auto_scaling`          | Auto Scaling Integration      |\n| `aws_app_sync`          | AppSync Integration           |\n| `aws_athena`            | Athena Integration            |\n| `aws_cognito`           | Cognito Integration           |\n| `aws_connect`           | Connect Integration           |\n| `aws_direct_connect`    | Direct Connect Integration    |\n| `aws_fsx`               | FSx Integration               |\n| `aws_glue`              | Glue Integration              |\n| `aws_kinesis_analytics` | Kinesis Analytics Integration |\n| `aws_media_convert`     | MediaConvert Integration      |\n| `aws_media_package_vod` | Media Package VOD Integration |\n| `aws_mq`                | MQ Integration                |\n| `aws_msk`               | MSK Integration               |\n| `aws_neptune`           | Neptune Integration           |\n| `aws_qldb`              | QLDB Integration              |\n| `aws_route53resolver`   | Route53 Resolver Integration  |\n| `aws_states`            | States Integration            |\n| `aws_transit_gateway`   | Transit Gateway Integration   |\n| `aws_waf`               | WAF Integration               |\n| `aws_wafv2`             | WAFv2 Integration             |\n| `billing`               | Billing Integration           |\n| `cloudfront`            | CloudFront Integration        |\n| `cloudtrail`            | CloudTrail Integration        |\n| `doc_db`                | DocumentDB Integration        |\n| `dynamodb`              | DynamoDB Integration          |\n| `ebs`                   | EBS Integration               |\n| `ec2`                   | EC2 Integration               |\n| `ecs`                   | ECS Integration               |\n| `efs`                   | EFS Integration               |\n| `elasticache`           | ElastiCache Integration       |\n| `elasticbeanstalk`      | Elastic Beanstalk Integration |\n| `elasticsearch`         | Elasticsearch Integration     |\n| `elb`                   | ELB Integration               |\n| `emr`                   | EMR Integration               |\n| `health`                | Health Integration            |\n| `iam`                   | IAM Integration               |\n| `iot`                   | IoT Integration               |\n| `kinesis`               | Kinesis Integration           |\n| `kinesis_firehose`      | Kinesis Firehose Integration  |\n| `lambda`                | Lambda Integration            |\n| `rds`                   | RDS Integration               |\n| `redshift`              | Redshift Integration          |\n| `route53`               | Route53 Integration           |\n| `s3`                    | S3 Integration                |\n| `ses`                   | SES Integration               |\n| `sns`                   | SNS Integration               |\n| `sqs`                   | SQS Integration               |\n| `trusted_advisor`       | Trusted Advisor Integration   |\n| `vpc`                   | VPC Integration               |\n| `x_ray`                 | X-Ray Integration             |\n\n\u003c/details\u003e\n",
                        "willReplaceOnChanges": true
                    },
                    "rds": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsRds:AwsIntegrationsRds",
                        "description": "Rds integration\n"
                    },
                    "redshift": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsRedshift:AwsIntegrationsRedshift",
                        "description": "Redshift integration\n"
                    },
                    "route53": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsRoute53:AwsIntegrationsRoute53",
                        "description": "Route53 integration\n"
                    },
                    "s3": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsS3:AwsIntegrationsS3",
                        "description": "S3 integration\n"
                    },
                    "ses": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsSes:AwsIntegrationsSes",
                        "description": "Ses integration\n"
                    },
                    "sns": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsSns:AwsIntegrationsSns",
                        "description": "Sns integration\n"
                    },
                    "sqs": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsSqs:AwsIntegrationsSqs",
                        "description": "SQS integration\n"
                    },
                    "trustedAdvisor": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsTrustedAdvisor:AwsIntegrationsTrustedAdvisor",
                        "description": "Trusted Advisor integration\n"
                    },
                    "vpc": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsVpc:AwsIntegrationsVpc",
                        "description": "VPC integration\n"
                    },
                    "xRay": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsXRay:AwsIntegrationsXRay",
                        "description": "X-Ray integration\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:cloud/awsLinkAccount:AwsLinkAccount": {
            "description": "Use this resource to link an AWS account to New Relic.\n\n## Prerequisite\n\nSetup is required in AWS for this resource to work properly. The New Relic AWS integration can be set up to pull metrics from AWS services or AWS can push metrics to New Relic using CloudWatch Metric Streams.\n\nUsing a metric stream to New Relic is the preferred way to integrate with AWS. Follow the [steps outlined here](https://docs.newrelic.com/docs/infrastructure/amazon-integrations/aws-integrations-list/aws-metric-stream/#set-up-metric-stream) to set up a metric stream.\n\nTo pull data from AWS instead, complete the [steps outlined here](https://docs.newrelic.com/docs/infrastructure/amazon-integrations/get-started/connect-aws-new-relic-infrastructure-monitoring#connect).\n\n## Example Usage\n\nYou can also use the full example, including the AWS set up, found in our guides.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.cloud.AwsLinkAccount(\"foo\", {\n    arn: \"arn:aws:service:region:account-id:resource-id\",\n    metricCollectionMode: \"PUSH\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.cloud.AwsLinkAccount(\"foo\",\n    arn=\"arn:aws:service:region:account-id:resource-id\",\n    metric_collection_mode=\"PUSH\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.Cloud.AwsLinkAccount(\"foo\", new()\n    {\n        Arn = \"arn:aws:service:region:account-id:resource-id\",\n        MetricCollectionMode = \"PUSH\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/cloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloud.NewAwsLinkAccount(ctx, \"foo\", \u0026cloud.AwsLinkAccountArgs{\n\t\t\tArn:                  pulumi.String(\"arn:aws:service:region:account-id:resource-id\"),\n\t\t\tMetricCollectionMode: pulumi.String(\"PUSH\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.cloud.AwsLinkAccount;\nimport com.pulumi.newrelic.cloud.AwsLinkAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AwsLinkAccount(\"foo\", AwsLinkAccountArgs.builder()        \n            .arn(\"arn:aws:service:region:account-id:resource-id\")\n            .metricCollectionMode(\"PUSH\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:cloud:AwsLinkAccount\n    properties:\n      arn: arn:aws:service:region:account-id:resource-id\n      metricCollectionMode: PUSH\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinked AWS accounts can be imported using the `id`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:cloud/awsLinkAccount:AwsLinkAccount foo \u003cid\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "arn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the IAM role.\n"
                },
                "metricCollectionMode": {
                    "type": "string",
                    "description": "How metrics will be collected. Use `PUSH` for a metric stream or `PULL` to integrate with individual services.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the linked account.\n"
                }
            },
            "required": [
                "accountId",
                "arn",
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n",
                    "willReplaceOnChanges": true
                },
                "arn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the IAM role.\n",
                    "willReplaceOnChanges": true
                },
                "metricCollectionMode": {
                    "type": "string",
                    "description": "How metrics will be collected. Use `PUSH` for a metric stream or `PULL` to integrate with individual services.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the linked account.\n"
                }
            },
            "requiredInputs": [
                "arn"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsLinkAccount resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n",
                        "willReplaceOnChanges": true
                    },
                    "arn": {
                        "type": "string",
                        "description": "The Amazon Resource Name (ARN) of the IAM role.\n",
                        "willReplaceOnChanges": true
                    },
                    "metricCollectionMode": {
                        "type": "string",
                        "description": "How metrics will be collected. Use `PUSH` for a metric stream or `PULL` to integrate with individual services.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the linked account.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:cloud/azureIntegrations:AzureIntegrations": {
            "description": "Use this resource to integrate Azure services with New Relic.\n\n## Prerequisite\n\nTo start receiving Azure data with New Relic Azure integrations, connect your Azure account to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever.\n\nSetup is required for this resource to work properly. This resource assumes you have linked an Azure account to New Relic.\n\nYou can find instructions on how to set up Azure on [our documentation](https://docs.newrelic.com/docs/infrastructure/microsoft-azure-integrations/get-started/activate-azure-integrations/).\n\n## Example Usage\n\nLeave an integration block empty to use its default configuration. You can also use the full example, including the Azure set up, found in our guides.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooAzureLinkAccount = new newrelic.cloud.AzureLinkAccount(\"fooAzureLinkAccount\", {\n    accountId: \"The New Relic account ID where you want to link the Azure account\",\n    applicationId: \"ID of the application\",\n    clientSecret: \"Secret value of client's Azure account\",\n    subscriptionId: \"Subscription ID of Azure\",\n    tenantId: \"Tenant ID of the Azure\",\n});\nconst fooAzureIntegrations = new newrelic.cloud.AzureIntegrations(\"fooAzureIntegrations\", {\n    linkedAccountId: fooAzureLinkAccount.id,\n    accountId: \"The New Relic account ID\",\n    apiManagement: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    appGateway: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    appService: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    containers: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    cosmosDb: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    costManagement: {\n        metricsPollingInterval: 3600,\n        tagKeys: [\"tag_keys\"],\n    },\n    dataFactory: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    eventHub: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    expressRoute: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    firewalls: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    frontDoor: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    functions: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    keyVault: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    loadBalancer: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    logicApps: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    machineLearning: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    mariaDb: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    monitor: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n        includeTags: [\"env:production\"],\n        excludeTags: [\n            \"env:staging\",\n            \"env:testing\",\n        ],\n        enabled: true,\n        resourceTypes: [\"microsoft.datashare/accounts\"],\n    },\n    mysql: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    mysqlFlexible: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    postgresql: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    postgresqlFlexible: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    powerBiDedicated: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    redisCache: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    serviceBus: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    sql: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    sqlManaged: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    storage: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    virtualMachine: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    virtualNetworks: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    vms: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n    vpnGateway: {\n        metricsPollingInterval: 1200,\n        resourceGroups: [\"resource_groups\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_azure_link_account = newrelic.cloud.AzureLinkAccount(\"fooAzureLinkAccount\",\n    account_id=\"The New Relic account ID where you want to link the Azure account\",\n    application_id=\"ID of the application\",\n    client_secret=\"Secret value of client's Azure account\",\n    subscription_id=\"Subscription ID of Azure\",\n    tenant_id=\"Tenant ID of the Azure\")\nfoo_azure_integrations = newrelic.cloud.AzureIntegrations(\"fooAzureIntegrations\",\n    linked_account_id=foo_azure_link_account.id,\n    account_id=\"The New Relic account ID\",\n    api_management=newrelic.cloud.AzureIntegrationsApiManagementArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    app_gateway=newrelic.cloud.AzureIntegrationsAppGatewayArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    app_service=newrelic.cloud.AzureIntegrationsAppServiceArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    containers=newrelic.cloud.AzureIntegrationsContainersArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    cosmos_db=newrelic.cloud.AzureIntegrationsCosmosDbArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    cost_management=newrelic.cloud.AzureIntegrationsCostManagementArgs(\n        metrics_polling_interval=3600,\n        tag_keys=[\"tag_keys\"],\n    ),\n    data_factory=newrelic.cloud.AzureIntegrationsDataFactoryArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    event_hub=newrelic.cloud.AzureIntegrationsEventHubArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    express_route=newrelic.cloud.AzureIntegrationsExpressRouteArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    firewalls=newrelic.cloud.AzureIntegrationsFirewallsArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    front_door=newrelic.cloud.AzureIntegrationsFrontDoorArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    functions=newrelic.cloud.AzureIntegrationsFunctionsArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    key_vault=newrelic.cloud.AzureIntegrationsKeyVaultArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    load_balancer=newrelic.cloud.AzureIntegrationsLoadBalancerArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    logic_apps=newrelic.cloud.AzureIntegrationsLogicAppsArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    machine_learning=newrelic.cloud.AzureIntegrationsMachineLearningArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    maria_db=newrelic.cloud.AzureIntegrationsMariaDbArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    monitor=newrelic.cloud.AzureIntegrationsMonitorArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n        include_tags=[\"env:production\"],\n        exclude_tags=[\n            \"env:staging\",\n            \"env:testing\",\n        ],\n        enabled=True,\n        resource_types=[\"microsoft.datashare/accounts\"],\n    ),\n    mysql=newrelic.cloud.AzureIntegrationsMysqlArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    mysql_flexible=newrelic.cloud.AzureIntegrationsMysqlFlexibleArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    postgresql=newrelic.cloud.AzureIntegrationsPostgresqlArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    postgresql_flexible=newrelic.cloud.AzureIntegrationsPostgresqlFlexibleArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    power_bi_dedicated=newrelic.cloud.AzureIntegrationsPowerBiDedicatedArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    redis_cache=newrelic.cloud.AzureIntegrationsRedisCacheArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    service_bus=newrelic.cloud.AzureIntegrationsServiceBusArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    sql=newrelic.cloud.AzureIntegrationsSqlArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    sql_managed=newrelic.cloud.AzureIntegrationsSqlManagedArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    storage=newrelic.cloud.AzureIntegrationsStorageArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    virtual_machine=newrelic.cloud.AzureIntegrationsVirtualMachineArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    virtual_networks=newrelic.cloud.AzureIntegrationsVirtualNetworksArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    vms=newrelic.cloud.AzureIntegrationsVmsArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ),\n    vpn_gateway=newrelic.cloud.AzureIntegrationsVpnGatewayArgs(\n        metrics_polling_interval=1200,\n        resource_groups=[\"resource_groups\"],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooAzureLinkAccount = new NewRelic.Cloud.AzureLinkAccount(\"fooAzureLinkAccount\", new()\n    {\n        AccountId = \"The New Relic account ID where you want to link the Azure account\",\n        ApplicationId = \"ID of the application\",\n        ClientSecret = \"Secret value of client's Azure account\",\n        SubscriptionId = \"Subscription ID of Azure\",\n        TenantId = \"Tenant ID of the Azure\",\n    });\n\n    var fooAzureIntegrations = new NewRelic.Cloud.AzureIntegrations(\"fooAzureIntegrations\", new()\n    {\n        LinkedAccountId = fooAzureLinkAccount.Id,\n        AccountId = \"The New Relic account ID\",\n        ApiManagement = new NewRelic.Cloud.Inputs.AzureIntegrationsApiManagementArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        AppGateway = new NewRelic.Cloud.Inputs.AzureIntegrationsAppGatewayArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        AppService = new NewRelic.Cloud.Inputs.AzureIntegrationsAppServiceArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        Containers = new NewRelic.Cloud.Inputs.AzureIntegrationsContainersArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        CosmosDb = new NewRelic.Cloud.Inputs.AzureIntegrationsCosmosDbArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        CostManagement = new NewRelic.Cloud.Inputs.AzureIntegrationsCostManagementArgs\n        {\n            MetricsPollingInterval = 3600,\n            TagKeys = new[]\n            {\n                \"tag_keys\",\n            },\n        },\n        DataFactory = new NewRelic.Cloud.Inputs.AzureIntegrationsDataFactoryArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        EventHub = new NewRelic.Cloud.Inputs.AzureIntegrationsEventHubArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        ExpressRoute = new NewRelic.Cloud.Inputs.AzureIntegrationsExpressRouteArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        Firewalls = new NewRelic.Cloud.Inputs.AzureIntegrationsFirewallsArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        FrontDoor = new NewRelic.Cloud.Inputs.AzureIntegrationsFrontDoorArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        Functions = new NewRelic.Cloud.Inputs.AzureIntegrationsFunctionsArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        KeyVault = new NewRelic.Cloud.Inputs.AzureIntegrationsKeyVaultArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        LoadBalancer = new NewRelic.Cloud.Inputs.AzureIntegrationsLoadBalancerArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        LogicApps = new NewRelic.Cloud.Inputs.AzureIntegrationsLogicAppsArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        MachineLearning = new NewRelic.Cloud.Inputs.AzureIntegrationsMachineLearningArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        MariaDb = new NewRelic.Cloud.Inputs.AzureIntegrationsMariaDbArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        Monitor = new NewRelic.Cloud.Inputs.AzureIntegrationsMonitorArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n            IncludeTags = new[]\n            {\n                \"env:production\",\n            },\n            ExcludeTags = new[]\n            {\n                \"env:staging\",\n                \"env:testing\",\n            },\n            Enabled = true,\n            ResourceTypes = new[]\n            {\n                \"microsoft.datashare/accounts\",\n            },\n        },\n        Mysql = new NewRelic.Cloud.Inputs.AzureIntegrationsMysqlArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        MysqlFlexible = new NewRelic.Cloud.Inputs.AzureIntegrationsMysqlFlexibleArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        Postgresql = new NewRelic.Cloud.Inputs.AzureIntegrationsPostgresqlArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        PostgresqlFlexible = new NewRelic.Cloud.Inputs.AzureIntegrationsPostgresqlFlexibleArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        PowerBiDedicated = new NewRelic.Cloud.Inputs.AzureIntegrationsPowerBiDedicatedArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        RedisCache = new NewRelic.Cloud.Inputs.AzureIntegrationsRedisCacheArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        ServiceBus = new NewRelic.Cloud.Inputs.AzureIntegrationsServiceBusArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        Sql = new NewRelic.Cloud.Inputs.AzureIntegrationsSqlArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        SqlManaged = new NewRelic.Cloud.Inputs.AzureIntegrationsSqlManagedArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        Storage = new NewRelic.Cloud.Inputs.AzureIntegrationsStorageArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        VirtualMachine = new NewRelic.Cloud.Inputs.AzureIntegrationsVirtualMachineArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        VirtualNetworks = new NewRelic.Cloud.Inputs.AzureIntegrationsVirtualNetworksArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        Vms = new NewRelic.Cloud.Inputs.AzureIntegrationsVmsArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n        VpnGateway = new NewRelic.Cloud.Inputs.AzureIntegrationsVpnGatewayArgs\n        {\n            MetricsPollingInterval = 1200,\n            ResourceGroups = new[]\n            {\n                \"resource_groups\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/cloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooAzureLinkAccount, err := cloud.NewAzureLinkAccount(ctx, \"fooAzureLinkAccount\", \u0026cloud.AzureLinkAccountArgs{\n\t\t\tAccountId:      pulumi.Int(\"The New Relic account ID where you want to link the Azure account\"),\n\t\t\tApplicationId:  pulumi.String(\"ID of the application\"),\n\t\t\tClientSecret:   pulumi.String(\"Secret value of client's Azure account\"),\n\t\t\tSubscriptionId: pulumi.String(\"Subscription ID of Azure\"),\n\t\t\tTenantId:       pulumi.String(\"Tenant ID of the Azure\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloud.NewAzureIntegrations(ctx, \"fooAzureIntegrations\", \u0026cloud.AzureIntegrationsArgs{\n\t\t\tLinkedAccountId: fooAzureLinkAccount.ID(),\n\t\t\tAccountId:       pulumi.Int(\"The New Relic account ID\"),\n\t\t\tApiManagement: \u0026cloud.AzureIntegrationsApiManagementArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAppGateway: \u0026cloud.AzureIntegrationsAppGatewayArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAppService: \u0026cloud.AzureIntegrationsAppServiceArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tContainers: \u0026cloud.AzureIntegrationsContainersArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tCosmosDb: \u0026cloud.AzureIntegrationsCosmosDbArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tCostManagement: \u0026cloud.AzureIntegrationsCostManagementArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(3600),\n\t\t\t\tTagKeys: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"tag_keys\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDataFactory: \u0026cloud.AzureIntegrationsDataFactoryArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEventHub: \u0026cloud.AzureIntegrationsEventHubArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tExpressRoute: \u0026cloud.AzureIntegrationsExpressRouteArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFirewalls: \u0026cloud.AzureIntegrationsFirewallsArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFrontDoor: \u0026cloud.AzureIntegrationsFrontDoorArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFunctions: \u0026cloud.AzureIntegrationsFunctionsArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tKeyVault: \u0026cloud.AzureIntegrationsKeyVaultArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tLoadBalancer: \u0026cloud.AzureIntegrationsLoadBalancerArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tLogicApps: \u0026cloud.AzureIntegrationsLogicAppsArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tMachineLearning: \u0026cloud.AzureIntegrationsMachineLearningArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tMariaDb: \u0026cloud.AzureIntegrationsMariaDbArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tMonitor: \u0026cloud.AzureIntegrationsMonitorArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t\tIncludeTags: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"env:production\"),\n\t\t\t\t},\n\t\t\t\tExcludeTags: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"env:staging\"),\n\t\t\t\t\tpulumi.String(\"env:testing\"),\n\t\t\t\t},\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tResourceTypes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"microsoft.datashare/accounts\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tMysql: \u0026cloud.AzureIntegrationsMysqlArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tMysqlFlexible: \u0026cloud.AzureIntegrationsMysqlFlexibleArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPostgresql: \u0026cloud.AzureIntegrationsPostgresqlArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPostgresqlFlexible: \u0026cloud.AzureIntegrationsPostgresqlFlexibleArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPowerBiDedicated: \u0026cloud.AzureIntegrationsPowerBiDedicatedArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRedisCache: \u0026cloud.AzureIntegrationsRedisCacheArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tServiceBus: \u0026cloud.AzureIntegrationsServiceBusArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSql: \u0026cloud.AzureIntegrationsSqlArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSqlManaged: \u0026cloud.AzureIntegrationsSqlManagedArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tStorage: \u0026cloud.AzureIntegrationsStorageArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tVirtualMachine: \u0026cloud.AzureIntegrationsVirtualMachineArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tVirtualNetworks: \u0026cloud.AzureIntegrationsVirtualNetworksArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tVms: \u0026cloud.AzureIntegrationsVmsArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tVpnGateway: \u0026cloud.AzureIntegrationsVpnGatewayArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(1200),\n\t\t\t\tResourceGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resource_groups\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.cloud.AzureLinkAccount;\nimport com.pulumi.newrelic.cloud.AzureLinkAccountArgs;\nimport com.pulumi.newrelic.cloud.AzureIntegrations;\nimport com.pulumi.newrelic.cloud.AzureIntegrationsArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsApiManagementArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsAppGatewayArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsAppServiceArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsContainersArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsCosmosDbArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsCostManagementArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsDataFactoryArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsEventHubArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsExpressRouteArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsFirewallsArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsFrontDoorArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsFunctionsArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsKeyVaultArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsLoadBalancerArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsLogicAppsArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsMachineLearningArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsMariaDbArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsMonitorArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsMysqlArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsMysqlFlexibleArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsPostgresqlArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsPostgresqlFlexibleArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsPowerBiDedicatedArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsRedisCacheArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsServiceBusArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsSqlArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsSqlManagedArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsStorageArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsVirtualMachineArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsVirtualNetworksArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsVmsArgs;\nimport com.pulumi.newrelic.cloud.inputs.AzureIntegrationsVpnGatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooAzureLinkAccount = new AzureLinkAccount(\"fooAzureLinkAccount\", AzureLinkAccountArgs.builder()        \n            .accountId(\"The New Relic account ID where you want to link the Azure account\")\n            .applicationId(\"ID of the application\")\n            .clientSecret(\"Secret value of client's Azure account\")\n            .subscriptionId(\"Subscription ID of Azure\")\n            .tenantId(\"Tenant ID of the Azure\")\n            .build());\n\n        var fooAzureIntegrations = new AzureIntegrations(\"fooAzureIntegrations\", AzureIntegrationsArgs.builder()        \n            .linkedAccountId(fooAzureLinkAccount.id())\n            .accountId(\"The New Relic account ID\")\n            .apiManagement(AzureIntegrationsApiManagementArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .appGateway(AzureIntegrationsAppGatewayArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .appService(AzureIntegrationsAppServiceArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .containers(AzureIntegrationsContainersArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .cosmosDb(AzureIntegrationsCosmosDbArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .costManagement(AzureIntegrationsCostManagementArgs.builder()\n                .metricsPollingInterval(3600)\n                .tagKeys(\"tag_keys\")\n                .build())\n            .dataFactory(AzureIntegrationsDataFactoryArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .eventHub(AzureIntegrationsEventHubArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .expressRoute(AzureIntegrationsExpressRouteArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .firewalls(AzureIntegrationsFirewallsArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .frontDoor(AzureIntegrationsFrontDoorArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .functions(AzureIntegrationsFunctionsArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .keyVault(AzureIntegrationsKeyVaultArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .loadBalancer(AzureIntegrationsLoadBalancerArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .logicApps(AzureIntegrationsLogicAppsArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .machineLearning(AzureIntegrationsMachineLearningArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .mariaDb(AzureIntegrationsMariaDbArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .monitor(AzureIntegrationsMonitorArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .includeTags(\"env:production\")\n                .excludeTags(                \n                    \"env:staging\",\n                    \"env:testing\")\n                .enabled(true)\n                .resourceTypes(\"microsoft.datashare/accounts\")\n                .build())\n            .mysql(AzureIntegrationsMysqlArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .mysqlFlexible(AzureIntegrationsMysqlFlexibleArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .postgresql(AzureIntegrationsPostgresqlArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .postgresqlFlexible(AzureIntegrationsPostgresqlFlexibleArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .powerBiDedicated(AzureIntegrationsPowerBiDedicatedArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .redisCache(AzureIntegrationsRedisCacheArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .serviceBus(AzureIntegrationsServiceBusArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .sql(AzureIntegrationsSqlArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .sqlManaged(AzureIntegrationsSqlManagedArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .storage(AzureIntegrationsStorageArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .virtualMachine(AzureIntegrationsVirtualMachineArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .virtualNetworks(AzureIntegrationsVirtualNetworksArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .vms(AzureIntegrationsVmsArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .vpnGateway(AzureIntegrationsVpnGatewayArgs.builder()\n                .metricsPollingInterval(1200)\n                .resourceGroups(\"resource_groups\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooAzureLinkAccount:\n    type: newrelic:cloud:AzureLinkAccount\n    properties:\n      accountId: The New Relic account ID where you want to link the Azure account\n      applicationId: ID of the application\n      clientSecret: Secret value of client's Azure account\n      subscriptionId: Subscription ID of Azure\n      tenantId: Tenant ID of the Azure\n  fooAzureIntegrations:\n    type: newrelic:cloud:AzureIntegrations\n    properties:\n      linkedAccountId: ${fooAzureLinkAccount.id}\n      accountId: The New Relic account ID\n      apiManagement:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      appGateway:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      appService:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      containers:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      cosmosDb:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      costManagement:\n        metricsPollingInterval: 3600\n        tagKeys:\n          - tag_keys\n      dataFactory:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      eventHub:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      expressRoute:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      firewalls:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      frontDoor:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      functions:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      keyVault:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      loadBalancer:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      logicApps:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      machineLearning:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      mariaDb:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      monitor:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n        includeTags:\n          - env:production\n        excludeTags:\n          - env:staging\n          - env:testing\n        enabled: true\n        resourceTypes:\n          - microsoft.datashare/accounts\n      mysql:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      mysqlFlexible:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      postgresql:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      postgresqlFlexible:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      powerBiDedicated:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      redisCache:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      serviceBus:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      sql:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      sqlManaged:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      storage:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      virtualMachine:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      virtualNetworks:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      vms:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n      vpnGateway:\n        metricsPollingInterval: 1200\n        resourceGroups:\n          - resource_groups\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinked Azure accounts can be imported using `id`, you can find the `id` of existing Azure linked accounts in Azure dashboard under Infrastructure in NewRelic.\n\nbash\n\n```sh\n$ pulumi import newrelic:cloud/azureIntegrations:AzureIntegrations foo \u003cid\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "apiManagement": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsApiManagement:AzureIntegrationsApiManagement",
                    "description": "Azure API Management. See Integration blocks below for details.\n"
                },
                "appGateway": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsAppGateway:AzureIntegrationsAppGateway",
                    "description": "Azure App Gateway. See Integration blocks below for details.\n"
                },
                "appService": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsAppService:AzureIntegrationsAppService",
                    "description": "Azure App Service. See Integration blocks below for details.\n"
                },
                "containers": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsContainers:AzureIntegrationsContainers",
                    "description": "Azure Containers. See Integration blocks below for details.\n"
                },
                "cosmosDb": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsCosmosDb:AzureIntegrationsCosmosDb",
                    "description": "Azure CosmosDB. See Integration blocks below for details.\n"
                },
                "costManagement": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsCostManagement:AzureIntegrationsCostManagement",
                    "description": "Azure Cost Management. See Integration blocks below for details.\n"
                },
                "dataFactory": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsDataFactory:AzureIntegrationsDataFactory",
                    "description": "Azure Data Factory. See Integration blocks below for details.\n"
                },
                "eventHub": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsEventHub:AzureIntegrationsEventHub",
                    "description": "Azure Event Hub. See Integration blocks below for details.\n"
                },
                "expressRoute": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsExpressRoute:AzureIntegrationsExpressRoute",
                    "description": "Azure Express Route. See Integration blocks below for details.\n"
                },
                "firewalls": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsFirewalls:AzureIntegrationsFirewalls",
                    "description": "Azure Firewalls. See Integration blocks below for details.\n"
                },
                "frontDoor": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsFrontDoor:AzureIntegrationsFrontDoor",
                    "description": "Azure Front Door. See Integration blocks below for details.\n"
                },
                "functions": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsFunctions:AzureIntegrationsFunctions",
                    "description": "Azure Functions. See Integration blocks below for details.\n"
                },
                "keyVault": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsKeyVault:AzureIntegrationsKeyVault",
                    "description": "Azure Key Vault. See Integration blocks below for details.\n"
                },
                "linkedAccountId": {
                    "type": "integer",
                    "description": "The ID of the linked Azure account in New Relic.\n"
                },
                "loadBalancer": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsLoadBalancer:AzureIntegrationsLoadBalancer",
                    "description": "Azure Load Balancer. See Integration blocks below for details.\n"
                },
                "logicApps": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsLogicApps:AzureIntegrationsLogicApps",
                    "description": "Azure Logic Apps. See Integration blocks below for details.\n"
                },
                "machineLearning": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsMachineLearning:AzureIntegrationsMachineLearning",
                    "description": "Azure Machine Learning. See Integration blocks below for details.\n"
                },
                "mariaDb": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsMariaDb:AzureIntegrationsMariaDb",
                    "description": "Azure MariaDB. See Integration blocks below for details.\n"
                },
                "monitor": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsMonitor:AzureIntegrationsMonitor",
                    "description": "Azure Monitor. See Integration blocks below for details.\n"
                },
                "mysql": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsMysql:AzureIntegrationsMysql",
                    "description": "Azure MySQL. See Integration blocks below for details.\n"
                },
                "mysqlFlexible": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsMysqlFlexible:AzureIntegrationsMysqlFlexible",
                    "description": "Azure MySQL Flexible Server. See Integration blocks below for details.\n"
                },
                "postgresql": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsPostgresql:AzureIntegrationsPostgresql",
                    "description": "Azure PostgreSQL. See Integration blocks below for details.\n"
                },
                "postgresqlFlexible": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsPostgresqlFlexible:AzureIntegrationsPostgresqlFlexible",
                    "description": "Azure PostgreSQL Flexible Server. See Integration blocks below for details.\n"
                },
                "powerBiDedicated": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsPowerBiDedicated:AzureIntegrationsPowerBiDedicated",
                    "description": "Azure Power BI Dedicated. See Integration blocks below for details.\n"
                },
                "redisCache": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsRedisCache:AzureIntegrationsRedisCache",
                    "description": "Azure Redis Cache. See Integration blocks below for details.\n"
                },
                "serviceBus": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsServiceBus:AzureIntegrationsServiceBus",
                    "description": "Azure Service Bus. See Integration blocks below for details.\n"
                },
                "sql": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsSql:AzureIntegrationsSql",
                    "description": "Azure SQL. See Integration blocks below for details.\n"
                },
                "sqlManaged": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsSqlManaged:AzureIntegrationsSqlManaged",
                    "description": "Azure SQL Managed. See Integration blocks below for details.\n"
                },
                "storage": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsStorage:AzureIntegrationsStorage",
                    "description": "for Azure Storage. See Integration blocks below for details.\n"
                },
                "virtualMachine": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsVirtualMachine:AzureIntegrationsVirtualMachine",
                    "description": "Azure Virtual machine. See Integration blocks below for details.\n"
                },
                "virtualNetworks": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsVirtualNetworks:AzureIntegrationsVirtualNetworks",
                    "description": "for Azure Virtual networks. See Integration blocks below for details.\n\nBelow argument supports the minimum metric polling interval of 3600 seconds\n"
                },
                "vms": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsVms:AzureIntegrationsVms",
                    "description": "Azure VMs. See Integration blocks below for details.\n"
                },
                "vpnGateway": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsVpnGateway:AzureIntegrationsVpnGateway",
                    "description": "Azure VPN Gateway. See Integration blocks below for details.\n\nBelow arguments supports the minimum metric polling interval of 900 seconds\n"
                }
            },
            "required": [
                "accountId",
                "linkedAccountId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "apiManagement": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsApiManagement:AzureIntegrationsApiManagement",
                    "description": "Azure API Management. See Integration blocks below for details.\n"
                },
                "appGateway": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsAppGateway:AzureIntegrationsAppGateway",
                    "description": "Azure App Gateway. See Integration blocks below for details.\n"
                },
                "appService": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsAppService:AzureIntegrationsAppService",
                    "description": "Azure App Service. See Integration blocks below for details.\n"
                },
                "containers": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsContainers:AzureIntegrationsContainers",
                    "description": "Azure Containers. See Integration blocks below for details.\n"
                },
                "cosmosDb": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsCosmosDb:AzureIntegrationsCosmosDb",
                    "description": "Azure CosmosDB. See Integration blocks below for details.\n"
                },
                "costManagement": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsCostManagement:AzureIntegrationsCostManagement",
                    "description": "Azure Cost Management. See Integration blocks below for details.\n"
                },
                "dataFactory": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsDataFactory:AzureIntegrationsDataFactory",
                    "description": "Azure Data Factory. See Integration blocks below for details.\n"
                },
                "eventHub": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsEventHub:AzureIntegrationsEventHub",
                    "description": "Azure Event Hub. See Integration blocks below for details.\n"
                },
                "expressRoute": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsExpressRoute:AzureIntegrationsExpressRoute",
                    "description": "Azure Express Route. See Integration blocks below for details.\n"
                },
                "firewalls": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsFirewalls:AzureIntegrationsFirewalls",
                    "description": "Azure Firewalls. See Integration blocks below for details.\n"
                },
                "frontDoor": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsFrontDoor:AzureIntegrationsFrontDoor",
                    "description": "Azure Front Door. See Integration blocks below for details.\n"
                },
                "functions": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsFunctions:AzureIntegrationsFunctions",
                    "description": "Azure Functions. See Integration blocks below for details.\n"
                },
                "keyVault": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsKeyVault:AzureIntegrationsKeyVault",
                    "description": "Azure Key Vault. See Integration blocks below for details.\n"
                },
                "linkedAccountId": {
                    "type": "integer",
                    "description": "The ID of the linked Azure account in New Relic.\n",
                    "willReplaceOnChanges": true
                },
                "loadBalancer": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsLoadBalancer:AzureIntegrationsLoadBalancer",
                    "description": "Azure Load Balancer. See Integration blocks below for details.\n"
                },
                "logicApps": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsLogicApps:AzureIntegrationsLogicApps",
                    "description": "Azure Logic Apps. See Integration blocks below for details.\n"
                },
                "machineLearning": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsMachineLearning:AzureIntegrationsMachineLearning",
                    "description": "Azure Machine Learning. See Integration blocks below for details.\n"
                },
                "mariaDb": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsMariaDb:AzureIntegrationsMariaDb",
                    "description": "Azure MariaDB. See Integration blocks below for details.\n"
                },
                "monitor": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsMonitor:AzureIntegrationsMonitor",
                    "description": "Azure Monitor. See Integration blocks below for details.\n"
                },
                "mysql": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsMysql:AzureIntegrationsMysql",
                    "description": "Azure MySQL. See Integration blocks below for details.\n"
                },
                "mysqlFlexible": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsMysqlFlexible:AzureIntegrationsMysqlFlexible",
                    "description": "Azure MySQL Flexible Server. See Integration blocks below for details.\n"
                },
                "postgresql": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsPostgresql:AzureIntegrationsPostgresql",
                    "description": "Azure PostgreSQL. See Integration blocks below for details.\n"
                },
                "postgresqlFlexible": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsPostgresqlFlexible:AzureIntegrationsPostgresqlFlexible",
                    "description": "Azure PostgreSQL Flexible Server. See Integration blocks below for details.\n"
                },
                "powerBiDedicated": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsPowerBiDedicated:AzureIntegrationsPowerBiDedicated",
                    "description": "Azure Power BI Dedicated. See Integration blocks below for details.\n"
                },
                "redisCache": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsRedisCache:AzureIntegrationsRedisCache",
                    "description": "Azure Redis Cache. See Integration blocks below for details.\n"
                },
                "serviceBus": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsServiceBus:AzureIntegrationsServiceBus",
                    "description": "Azure Service Bus. See Integration blocks below for details.\n"
                },
                "sql": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsSql:AzureIntegrationsSql",
                    "description": "Azure SQL. See Integration blocks below for details.\n"
                },
                "sqlManaged": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsSqlManaged:AzureIntegrationsSqlManaged",
                    "description": "Azure SQL Managed. See Integration blocks below for details.\n"
                },
                "storage": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsStorage:AzureIntegrationsStorage",
                    "description": "for Azure Storage. See Integration blocks below for details.\n"
                },
                "virtualMachine": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsVirtualMachine:AzureIntegrationsVirtualMachine",
                    "description": "Azure Virtual machine. See Integration blocks below for details.\n"
                },
                "virtualNetworks": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsVirtualNetworks:AzureIntegrationsVirtualNetworks",
                    "description": "for Azure Virtual networks. See Integration blocks below for details.\n\nBelow argument supports the minimum metric polling interval of 3600 seconds\n"
                },
                "vms": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsVms:AzureIntegrationsVms",
                    "description": "Azure VMs. See Integration blocks below for details.\n"
                },
                "vpnGateway": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsVpnGateway:AzureIntegrationsVpnGateway",
                    "description": "Azure VPN Gateway. See Integration blocks below for details.\n\nBelow arguments supports the minimum metric polling interval of 900 seconds\n"
                }
            },
            "requiredInputs": [
                "linkedAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureIntegrations resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "apiManagement": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsApiManagement:AzureIntegrationsApiManagement",
                        "description": "Azure API Management. See Integration blocks below for details.\n"
                    },
                    "appGateway": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsAppGateway:AzureIntegrationsAppGateway",
                        "description": "Azure App Gateway. See Integration blocks below for details.\n"
                    },
                    "appService": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsAppService:AzureIntegrationsAppService",
                        "description": "Azure App Service. See Integration blocks below for details.\n"
                    },
                    "containers": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsContainers:AzureIntegrationsContainers",
                        "description": "Azure Containers. See Integration blocks below for details.\n"
                    },
                    "cosmosDb": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsCosmosDb:AzureIntegrationsCosmosDb",
                        "description": "Azure CosmosDB. See Integration blocks below for details.\n"
                    },
                    "costManagement": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsCostManagement:AzureIntegrationsCostManagement",
                        "description": "Azure Cost Management. See Integration blocks below for details.\n"
                    },
                    "dataFactory": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsDataFactory:AzureIntegrationsDataFactory",
                        "description": "Azure Data Factory. See Integration blocks below for details.\n"
                    },
                    "eventHub": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsEventHub:AzureIntegrationsEventHub",
                        "description": "Azure Event Hub. See Integration blocks below for details.\n"
                    },
                    "expressRoute": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsExpressRoute:AzureIntegrationsExpressRoute",
                        "description": "Azure Express Route. See Integration blocks below for details.\n"
                    },
                    "firewalls": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsFirewalls:AzureIntegrationsFirewalls",
                        "description": "Azure Firewalls. See Integration blocks below for details.\n"
                    },
                    "frontDoor": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsFrontDoor:AzureIntegrationsFrontDoor",
                        "description": "Azure Front Door. See Integration blocks below for details.\n"
                    },
                    "functions": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsFunctions:AzureIntegrationsFunctions",
                        "description": "Azure Functions. See Integration blocks below for details.\n"
                    },
                    "keyVault": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsKeyVault:AzureIntegrationsKeyVault",
                        "description": "Azure Key Vault. See Integration blocks below for details.\n"
                    },
                    "linkedAccountId": {
                        "type": "integer",
                        "description": "The ID of the linked Azure account in New Relic.\n",
                        "willReplaceOnChanges": true
                    },
                    "loadBalancer": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsLoadBalancer:AzureIntegrationsLoadBalancer",
                        "description": "Azure Load Balancer. See Integration blocks below for details.\n"
                    },
                    "logicApps": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsLogicApps:AzureIntegrationsLogicApps",
                        "description": "Azure Logic Apps. See Integration blocks below for details.\n"
                    },
                    "machineLearning": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsMachineLearning:AzureIntegrationsMachineLearning",
                        "description": "Azure Machine Learning. See Integration blocks below for details.\n"
                    },
                    "mariaDb": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsMariaDb:AzureIntegrationsMariaDb",
                        "description": "Azure MariaDB. See Integration blocks below for details.\n"
                    },
                    "monitor": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsMonitor:AzureIntegrationsMonitor",
                        "description": "Azure Monitor. See Integration blocks below for details.\n"
                    },
                    "mysql": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsMysql:AzureIntegrationsMysql",
                        "description": "Azure MySQL. See Integration blocks below for details.\n"
                    },
                    "mysqlFlexible": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsMysqlFlexible:AzureIntegrationsMysqlFlexible",
                        "description": "Azure MySQL Flexible Server. See Integration blocks below for details.\n"
                    },
                    "postgresql": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsPostgresql:AzureIntegrationsPostgresql",
                        "description": "Azure PostgreSQL. See Integration blocks below for details.\n"
                    },
                    "postgresqlFlexible": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsPostgresqlFlexible:AzureIntegrationsPostgresqlFlexible",
                        "description": "Azure PostgreSQL Flexible Server. See Integration blocks below for details.\n"
                    },
                    "powerBiDedicated": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsPowerBiDedicated:AzureIntegrationsPowerBiDedicated",
                        "description": "Azure Power BI Dedicated. See Integration blocks below for details.\n"
                    },
                    "redisCache": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsRedisCache:AzureIntegrationsRedisCache",
                        "description": "Azure Redis Cache. See Integration blocks below for details.\n"
                    },
                    "serviceBus": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsServiceBus:AzureIntegrationsServiceBus",
                        "description": "Azure Service Bus. See Integration blocks below for details.\n"
                    },
                    "sql": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsSql:AzureIntegrationsSql",
                        "description": "Azure SQL. See Integration blocks below for details.\n"
                    },
                    "sqlManaged": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsSqlManaged:AzureIntegrationsSqlManaged",
                        "description": "Azure SQL Managed. See Integration blocks below for details.\n"
                    },
                    "storage": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsStorage:AzureIntegrationsStorage",
                        "description": "for Azure Storage. See Integration blocks below for details.\n"
                    },
                    "virtualMachine": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsVirtualMachine:AzureIntegrationsVirtualMachine",
                        "description": "Azure Virtual machine. See Integration blocks below for details.\n"
                    },
                    "virtualNetworks": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsVirtualNetworks:AzureIntegrationsVirtualNetworks",
                        "description": "for Azure Virtual networks. See Integration blocks below for details.\n\nBelow argument supports the minimum metric polling interval of 3600 seconds\n"
                    },
                    "vms": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsVms:AzureIntegrationsVms",
                        "description": "Azure VMs. See Integration blocks below for details.\n"
                    },
                    "vpnGateway": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsVpnGateway:AzureIntegrationsVpnGateway",
                        "description": "Azure VPN Gateway. See Integration blocks below for details.\n\nBelow arguments supports the minimum metric polling interval of 900 seconds\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:cloud/azureLinkAccount:AzureLinkAccount": {
            "description": "Use this resource to link an Azure account to New Relic.\n\n## Prerequisite\n\nSome configuration is required in Azure for the New Relic Azure cloud integrations to be able to pull data.\n\nTo start receiving Azure data with New Relic Azure integrations, connect your Azure account to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever.\n\nSetup is required in Azure for this resource to work properly. You can find instructions on how to set up Azure on [our documentation](https://docs.newrelic.com/docs/infrastructure/microsoft-azure-integrations/get-started/activate-azure-integrations/).\n\n## Example Usage\n\nYou can also use the full example, including the Azure set up, found in our guides.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.cloud.AzureLinkAccount(\"foo\", {\n    accountId: \"The New Relic account ID where you want to link the Azure account\",\n    applicationId: \"ID of the application\",\n    clientSecret: \"Secret value of client's Azure account\",\n    subscriptionId: \"Subscription ID of Azure\",\n    tenantId: \"Tenant ID of the Azure\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.cloud.AzureLinkAccount(\"foo\",\n    account_id=\"The New Relic account ID where you want to link the Azure account\",\n    application_id=\"ID of the application\",\n    client_secret=\"Secret value of client's Azure account\",\n    subscription_id=\"Subscription ID of Azure\",\n    tenant_id=\"Tenant ID of the Azure\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.Cloud.AzureLinkAccount(\"foo\", new()\n    {\n        AccountId = \"The New Relic account ID where you want to link the Azure account\",\n        ApplicationId = \"ID of the application\",\n        ClientSecret = \"Secret value of client's Azure account\",\n        SubscriptionId = \"Subscription ID of Azure\",\n        TenantId = \"Tenant ID of the Azure\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/cloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloud.NewAzureLinkAccount(ctx, \"foo\", \u0026cloud.AzureLinkAccountArgs{\n\t\t\tAccountId:      pulumi.Int(\"The New Relic account ID where you want to link the Azure account\"),\n\t\t\tApplicationId:  pulumi.String(\"ID of the application\"),\n\t\t\tClientSecret:   pulumi.String(\"Secret value of client's Azure account\"),\n\t\t\tSubscriptionId: pulumi.String(\"Subscription ID of Azure\"),\n\t\t\tTenantId:       pulumi.String(\"Tenant ID of the Azure\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.cloud.AzureLinkAccount;\nimport com.pulumi.newrelic.cloud.AzureLinkAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AzureLinkAccount(\"foo\", AzureLinkAccountArgs.builder()        \n            .accountId(\"The New Relic account ID where you want to link the Azure account\")\n            .applicationId(\"ID of the application\")\n            .clientSecret(\"Secret value of client's Azure account\")\n            .subscriptionId(\"Subscription ID of Azure\")\n            .tenantId(\"Tenant ID of the Azure\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:cloud:AzureLinkAccount\n    properties:\n      accountId: The New Relic account ID where you want to link the Azure account\n      applicationId: ID of the application\n      clientSecret: Secret value of client's Azure account\n      subscriptionId: Subscription ID of Azure\n      tenantId: Tenant ID of the Azure\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinked Azure accounts can be imported using `id`, you can find the `id` of existing Azure linked accounts in Azure dashboard under Infrastructure in NewRelic\n\nbash\n\n```sh\n$ pulumi import newrelic:cloud/azureLinkAccount:AzureLinkAccount foo \u003cid\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Account ID of the New Relic.\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "Application ID of the App.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Secret Value of the client.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the linked account\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Subscription ID of the Azure cloud account.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Tenant ID of the Azure cloud account.\n"
                }
            },
            "required": [
                "accountId",
                "applicationId",
                "clientSecret",
                "name",
                "subscriptionId",
                "tenantId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Account ID of the New Relic.\n",
                    "willReplaceOnChanges": true
                },
                "applicationId": {
                    "type": "string",
                    "description": "Application ID of the App.\n",
                    "willReplaceOnChanges": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Secret Value of the client.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the linked account\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Subscription ID of the Azure cloud account.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "Tenant ID of the Azure cloud account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "applicationId",
                "clientSecret",
                "subscriptionId",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureLinkAccount resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Account ID of the New Relic.\n",
                        "willReplaceOnChanges": true
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "Application ID of the App.\n",
                        "willReplaceOnChanges": true
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "Secret Value of the client.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the linked account\n"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Subscription ID of the Azure cloud account.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "Tenant ID of the Azure cloud account.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "newrelic:cloud/gcpIntegrations:GcpIntegrations": {
            "description": "Use this resource to integrate GCP services with New Relic.\n\n## Prerequisite\n\nSetup is required for this resource to work properly. This resource assumes you have linked a GCP account to New Relic and configured it to pull metrics from GCP.\n\nNew Relic doesn't automatically receive metrics from GCP services, so this resource can be used to configure integrations to those services.\n\n## Example Usage\n\nLeave an integration block empty to use its default configuration. You can also use the full example, including the GCP set up, found in our guides.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.cloud.GcpLinkAccount(\"foo\", {projectId: \"\u003cYour GCP project ID\u003e\"});\nconst foo1 = new newrelic.cloud.GcpIntegrations(\"foo1\", {\n    linkedAccountId: foo.id,\n    appEngine: {\n        metricsPollingInterval: 400,\n    },\n    bigQuery: {\n        metricsPollingInterval: 400,\n        fetchTags: true,\n    },\n    bigTable: {\n        metricsPollingInterval: 400,\n    },\n    composer: {\n        metricsPollingInterval: 400,\n    },\n    dataFlow: {\n        metricsPollingInterval: 400,\n    },\n    dataProc: {\n        metricsPollingInterval: 400,\n    },\n    dataStore: {\n        metricsPollingInterval: 400,\n    },\n    fireBaseDatabase: {\n        metricsPollingInterval: 400,\n    },\n    fireBaseHosting: {\n        metricsPollingInterval: 400,\n    },\n    fireBaseStorage: {\n        metricsPollingInterval: 400,\n    },\n    fireStore: {\n        metricsPollingInterval: 400,\n    },\n    functions: {\n        metricsPollingInterval: 400,\n    },\n    interconnect: {\n        metricsPollingInterval: 400,\n    },\n    kubernetes: {\n        metricsPollingInterval: 400,\n    },\n    loadBalancing: {\n        metricsPollingInterval: 400,\n    },\n    memCache: {\n        metricsPollingInterval: 400,\n    },\n    pubSub: {\n        metricsPollingInterval: 400,\n        fetchTags: true,\n    },\n    redis: {\n        metricsPollingInterval: 400,\n    },\n    router: {\n        metricsPollingInterval: 400,\n    },\n    run: {\n        metricsPollingInterval: 400,\n    },\n    spanner: {\n        metricsPollingInterval: 400,\n        fetchTags: true,\n    },\n    sql: {\n        metricsPollingInterval: 400,\n    },\n    storage: {\n        metricsPollingInterval: 400,\n        fetchTags: true,\n    },\n    virtualMachines: {\n        metricsPollingInterval: 400,\n    },\n    vpcAccess: {\n        metricsPollingInterval: 400,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.cloud.GcpLinkAccount(\"foo\", project_id=\"\u003cYour GCP project ID\u003e\")\nfoo1 = newrelic.cloud.GcpIntegrations(\"foo1\",\n    linked_account_id=foo.id,\n    app_engine=newrelic.cloud.GcpIntegrationsAppEngineArgs(\n        metrics_polling_interval=400,\n    ),\n    big_query=newrelic.cloud.GcpIntegrationsBigQueryArgs(\n        metrics_polling_interval=400,\n        fetch_tags=True,\n    ),\n    big_table=newrelic.cloud.GcpIntegrationsBigTableArgs(\n        metrics_polling_interval=400,\n    ),\n    composer=newrelic.cloud.GcpIntegrationsComposerArgs(\n        metrics_polling_interval=400,\n    ),\n    data_flow=newrelic.cloud.GcpIntegrationsDataFlowArgs(\n        metrics_polling_interval=400,\n    ),\n    data_proc=newrelic.cloud.GcpIntegrationsDataProcArgs(\n        metrics_polling_interval=400,\n    ),\n    data_store=newrelic.cloud.GcpIntegrationsDataStoreArgs(\n        metrics_polling_interval=400,\n    ),\n    fire_base_database=newrelic.cloud.GcpIntegrationsFireBaseDatabaseArgs(\n        metrics_polling_interval=400,\n    ),\n    fire_base_hosting=newrelic.cloud.GcpIntegrationsFireBaseHostingArgs(\n        metrics_polling_interval=400,\n    ),\n    fire_base_storage=newrelic.cloud.GcpIntegrationsFireBaseStorageArgs(\n        metrics_polling_interval=400,\n    ),\n    fire_store=newrelic.cloud.GcpIntegrationsFireStoreArgs(\n        metrics_polling_interval=400,\n    ),\n    functions=newrelic.cloud.GcpIntegrationsFunctionsArgs(\n        metrics_polling_interval=400,\n    ),\n    interconnect=newrelic.cloud.GcpIntegrationsInterconnectArgs(\n        metrics_polling_interval=400,\n    ),\n    kubernetes=newrelic.cloud.GcpIntegrationsKubernetesArgs(\n        metrics_polling_interval=400,\n    ),\n    load_balancing=newrelic.cloud.GcpIntegrationsLoadBalancingArgs(\n        metrics_polling_interval=400,\n    ),\n    mem_cache=newrelic.cloud.GcpIntegrationsMemCacheArgs(\n        metrics_polling_interval=400,\n    ),\n    pub_sub=newrelic.cloud.GcpIntegrationsPubSubArgs(\n        metrics_polling_interval=400,\n        fetch_tags=True,\n    ),\n    redis=newrelic.cloud.GcpIntegrationsRedisArgs(\n        metrics_polling_interval=400,\n    ),\n    router=newrelic.cloud.GcpIntegrationsRouterArgs(\n        metrics_polling_interval=400,\n    ),\n    run=newrelic.cloud.GcpIntegrationsRunArgs(\n        metrics_polling_interval=400,\n    ),\n    spanner=newrelic.cloud.GcpIntegrationsSpannerArgs(\n        metrics_polling_interval=400,\n        fetch_tags=True,\n    ),\n    sql=newrelic.cloud.GcpIntegrationsSqlArgs(\n        metrics_polling_interval=400,\n    ),\n    storage=newrelic.cloud.GcpIntegrationsStorageArgs(\n        metrics_polling_interval=400,\n        fetch_tags=True,\n    ),\n    virtual_machines=newrelic.cloud.GcpIntegrationsVirtualMachinesArgs(\n        metrics_polling_interval=400,\n    ),\n    vpc_access=newrelic.cloud.GcpIntegrationsVpcAccessArgs(\n        metrics_polling_interval=400,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.Cloud.GcpLinkAccount(\"foo\", new()\n    {\n        ProjectId = \"\u003cYour GCP project ID\u003e\",\n    });\n\n    var foo1 = new NewRelic.Cloud.GcpIntegrations(\"foo1\", new()\n    {\n        LinkedAccountId = foo.Id,\n        AppEngine = new NewRelic.Cloud.Inputs.GcpIntegrationsAppEngineArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        BigQuery = new NewRelic.Cloud.Inputs.GcpIntegrationsBigQueryArgs\n        {\n            MetricsPollingInterval = 400,\n            FetchTags = true,\n        },\n        BigTable = new NewRelic.Cloud.Inputs.GcpIntegrationsBigTableArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        Composer = new NewRelic.Cloud.Inputs.GcpIntegrationsComposerArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        DataFlow = new NewRelic.Cloud.Inputs.GcpIntegrationsDataFlowArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        DataProc = new NewRelic.Cloud.Inputs.GcpIntegrationsDataProcArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        DataStore = new NewRelic.Cloud.Inputs.GcpIntegrationsDataStoreArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        FireBaseDatabase = new NewRelic.Cloud.Inputs.GcpIntegrationsFireBaseDatabaseArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        FireBaseHosting = new NewRelic.Cloud.Inputs.GcpIntegrationsFireBaseHostingArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        FireBaseStorage = new NewRelic.Cloud.Inputs.GcpIntegrationsFireBaseStorageArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        FireStore = new NewRelic.Cloud.Inputs.GcpIntegrationsFireStoreArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        Functions = new NewRelic.Cloud.Inputs.GcpIntegrationsFunctionsArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        Interconnect = new NewRelic.Cloud.Inputs.GcpIntegrationsInterconnectArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        Kubernetes = new NewRelic.Cloud.Inputs.GcpIntegrationsKubernetesArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        LoadBalancing = new NewRelic.Cloud.Inputs.GcpIntegrationsLoadBalancingArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        MemCache = new NewRelic.Cloud.Inputs.GcpIntegrationsMemCacheArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        PubSub = new NewRelic.Cloud.Inputs.GcpIntegrationsPubSubArgs\n        {\n            MetricsPollingInterval = 400,\n            FetchTags = true,\n        },\n        Redis = new NewRelic.Cloud.Inputs.GcpIntegrationsRedisArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        Router = new NewRelic.Cloud.Inputs.GcpIntegrationsRouterArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        Run = new NewRelic.Cloud.Inputs.GcpIntegrationsRunArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        Spanner = new NewRelic.Cloud.Inputs.GcpIntegrationsSpannerArgs\n        {\n            MetricsPollingInterval = 400,\n            FetchTags = true,\n        },\n        Sql = new NewRelic.Cloud.Inputs.GcpIntegrationsSqlArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        Storage = new NewRelic.Cloud.Inputs.GcpIntegrationsStorageArgs\n        {\n            MetricsPollingInterval = 400,\n            FetchTags = true,\n        },\n        VirtualMachines = new NewRelic.Cloud.Inputs.GcpIntegrationsVirtualMachinesArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n        VpcAccess = new NewRelic.Cloud.Inputs.GcpIntegrationsVpcAccessArgs\n        {\n            MetricsPollingInterval = 400,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/cloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := cloud.NewGcpLinkAccount(ctx, \"foo\", \u0026cloud.GcpLinkAccountArgs{\n\t\t\tProjectId: pulumi.String(\"\u003cYour GCP project ID\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloud.NewGcpIntegrations(ctx, \"foo1\", \u0026cloud.GcpIntegrationsArgs{\n\t\t\tLinkedAccountId: foo.ID(),\n\t\t\tAppEngine: \u0026cloud.GcpIntegrationsAppEngineArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tBigQuery: \u0026cloud.GcpIntegrationsBigQueryArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t},\n\t\t\tBigTable: \u0026cloud.GcpIntegrationsBigTableArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tComposer: \u0026cloud.GcpIntegrationsComposerArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tDataFlow: \u0026cloud.GcpIntegrationsDataFlowArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tDataProc: \u0026cloud.GcpIntegrationsDataProcArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tDataStore: \u0026cloud.GcpIntegrationsDataStoreArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tFireBaseDatabase: \u0026cloud.GcpIntegrationsFireBaseDatabaseArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tFireBaseHosting: \u0026cloud.GcpIntegrationsFireBaseHostingArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tFireBaseStorage: \u0026cloud.GcpIntegrationsFireBaseStorageArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tFireStore: \u0026cloud.GcpIntegrationsFireStoreArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tFunctions: \u0026cloud.GcpIntegrationsFunctionsArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tInterconnect: \u0026cloud.GcpIntegrationsInterconnectArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tKubernetes: \u0026cloud.GcpIntegrationsKubernetesArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tLoadBalancing: \u0026cloud.GcpIntegrationsLoadBalancingArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tMemCache: \u0026cloud.GcpIntegrationsMemCacheArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tPubSub: \u0026cloud.GcpIntegrationsPubSubArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t},\n\t\t\tRedis: \u0026cloud.GcpIntegrationsRedisArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tRouter: \u0026cloud.GcpIntegrationsRouterArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tRun: \u0026cloud.GcpIntegrationsRunArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tSpanner: \u0026cloud.GcpIntegrationsSpannerArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t},\n\t\t\tSql: \u0026cloud.GcpIntegrationsSqlArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tStorage: \u0026cloud.GcpIntegrationsStorageArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t\tFetchTags:              pulumi.Bool(true),\n\t\t\t},\n\t\t\tVirtualMachines: \u0026cloud.GcpIntegrationsVirtualMachinesArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t\tVpcAccess: \u0026cloud.GcpIntegrationsVpcAccessArgs{\n\t\t\t\tMetricsPollingInterval: pulumi.Int(400),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.cloud.GcpLinkAccount;\nimport com.pulumi.newrelic.cloud.GcpLinkAccountArgs;\nimport com.pulumi.newrelic.cloud.GcpIntegrations;\nimport com.pulumi.newrelic.cloud.GcpIntegrationsArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsAppEngineArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsBigQueryArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsBigTableArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsComposerArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsDataFlowArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsDataProcArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsDataStoreArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsFireBaseDatabaseArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsFireBaseHostingArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsFireBaseStorageArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsFireStoreArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsFunctionsArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsInterconnectArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsKubernetesArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsLoadBalancingArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsMemCacheArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsPubSubArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsRedisArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsRouterArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsRunArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsSpannerArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsSqlArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsStorageArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsVirtualMachinesArgs;\nimport com.pulumi.newrelic.cloud.inputs.GcpIntegrationsVpcAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new GcpLinkAccount(\"foo\", GcpLinkAccountArgs.builder()        \n            .projectId(\"\u003cYour GCP project ID\u003e\")\n            .build());\n\n        var foo1 = new GcpIntegrations(\"foo1\", GcpIntegrationsArgs.builder()        \n            .linkedAccountId(foo.id())\n            .appEngine(GcpIntegrationsAppEngineArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .bigQuery(GcpIntegrationsBigQueryArgs.builder()\n                .metricsPollingInterval(400)\n                .fetchTags(true)\n                .build())\n            .bigTable(GcpIntegrationsBigTableArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .composer(GcpIntegrationsComposerArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .dataFlow(GcpIntegrationsDataFlowArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .dataProc(GcpIntegrationsDataProcArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .dataStore(GcpIntegrationsDataStoreArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .fireBaseDatabase(GcpIntegrationsFireBaseDatabaseArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .fireBaseHosting(GcpIntegrationsFireBaseHostingArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .fireBaseStorage(GcpIntegrationsFireBaseStorageArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .fireStore(GcpIntegrationsFireStoreArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .functions(GcpIntegrationsFunctionsArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .interconnect(GcpIntegrationsInterconnectArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .kubernetes(GcpIntegrationsKubernetesArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .loadBalancing(GcpIntegrationsLoadBalancingArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .memCache(GcpIntegrationsMemCacheArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .pubSub(GcpIntegrationsPubSubArgs.builder()\n                .metricsPollingInterval(400)\n                .fetchTags(true)\n                .build())\n            .redis(GcpIntegrationsRedisArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .router(GcpIntegrationsRouterArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .run(GcpIntegrationsRunArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .spanner(GcpIntegrationsSpannerArgs.builder()\n                .metricsPollingInterval(400)\n                .fetchTags(true)\n                .build())\n            .sql(GcpIntegrationsSqlArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .storage(GcpIntegrationsStorageArgs.builder()\n                .metricsPollingInterval(400)\n                .fetchTags(true)\n                .build())\n            .virtualMachines(GcpIntegrationsVirtualMachinesArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .vpcAccess(GcpIntegrationsVpcAccessArgs.builder()\n                .metricsPollingInterval(400)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:cloud:GcpLinkAccount\n    properties:\n      projectId: \u003cYour GCP project ID\u003e\n  foo1:\n    type: newrelic:cloud:GcpIntegrations\n    properties:\n      linkedAccountId: ${foo.id}\n      appEngine:\n        metricsPollingInterval: 400\n      bigQuery:\n        metricsPollingInterval: 400\n        fetchTags: true\n      bigTable:\n        metricsPollingInterval: 400\n      composer:\n        metricsPollingInterval: 400\n      dataFlow:\n        metricsPollingInterval: 400\n      dataProc:\n        metricsPollingInterval: 400\n      dataStore:\n        metricsPollingInterval: 400\n      fireBaseDatabase:\n        metricsPollingInterval: 400\n      fireBaseHosting:\n        metricsPollingInterval: 400\n      fireBaseStorage:\n        metricsPollingInterval: 400\n      fireStore:\n        metricsPollingInterval: 400\n      functions:\n        metricsPollingInterval: 400\n      interconnect:\n        metricsPollingInterval: 400\n      kubernetes:\n        metricsPollingInterval: 400\n      loadBalancing:\n        metricsPollingInterval: 400\n      memCache:\n        metricsPollingInterval: 400\n      pubSub:\n        metricsPollingInterval: 400\n        fetchTags: true\n      redis:\n        metricsPollingInterval: 400\n      router:\n        metricsPollingInterval: 400\n      run:\n        metricsPollingInterval: 400\n      spanner:\n        metricsPollingInterval: 400\n        fetchTags: true\n      sql:\n        metricsPollingInterval: 400\n      storage:\n        metricsPollingInterval: 400\n        fetchTags: true\n      virtualMachines:\n        metricsPollingInterval: 400\n      vpcAccess:\n        metricsPollingInterval: 400\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinked GCP account integrations can be imported using the `id`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:cloud/gcpIntegrations:GcpIntegrations foo \u003cid\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "alloyDb": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsAlloyDb:GcpIntegrationsAlloyDb",
                    "description": "Alloy DB integration. See Integration blocks below for details.\n"
                },
                "appEngine": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsAppEngine:GcpIntegrationsAppEngine",
                    "description": "App Engine integration. See Integration blocks below for details.\n"
                },
                "bigQuery": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsBigQuery:GcpIntegrationsBigQuery",
                    "description": "Biq Query integration. See Integration blocks below for details.\n"
                },
                "bigTable": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsBigTable:GcpIntegrationsBigTable",
                    "description": "Big Table. See Integration blocks below for details.\n"
                },
                "composer": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsComposer:GcpIntegrationsComposer",
                    "description": "Composer integration. See Integration blocks below for details.\n"
                },
                "dataFlow": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataFlow:GcpIntegrationsDataFlow",
                    "description": "Data Flow integration. See Integration blocks below for details.\n"
                },
                "dataProc": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataProc:GcpIntegrationsDataProc",
                    "description": "Data Proc integration. See Integration blocks below for details.\n"
                },
                "dataStore": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataStore:GcpIntegrationsDataStore",
                    "description": "Data Store integration. See Integration blocks below for details.\n"
                },
                "fireBaseDatabase": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseDatabase:GcpIntegrationsFireBaseDatabase",
                    "description": "Fire Base Database integration. See Integration blocks below for details.\n"
                },
                "fireBaseHosting": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseHosting:GcpIntegrationsFireBaseHosting",
                    "description": "Fire Base Hosting integration. See Integration blocks below for details.\n"
                },
                "fireBaseStorage": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseStorage:GcpIntegrationsFireBaseStorage",
                    "description": "Fire Base Storage integration. See Integration blocks below for details.\n"
                },
                "fireStore": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireStore:GcpIntegrationsFireStore",
                    "description": "Fire Store integration. See Integration blocks below for details.\n"
                },
                "functions": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFunctions:GcpIntegrationsFunctions",
                    "description": "Functions integration. See Integration blocks below for details.\n"
                },
                "interconnect": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsInterconnect:GcpIntegrationsInterconnect",
                    "description": "Interconnect integration. See Integration blocks below for details.\n"
                },
                "kubernetes": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsKubernetes:GcpIntegrationsKubernetes",
                    "description": "Kubernetes integration. See Integration blocks below for details.\n"
                },
                "linkedAccountId": {
                    "type": "integer",
                    "description": "The ID of the linked GCP account in New Relic.\n"
                },
                "loadBalancing": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsLoadBalancing:GcpIntegrationsLoadBalancing",
                    "description": "Load Balancing integration. See Integration blocks below for details.\n"
                },
                "memCache": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsMemCache:GcpIntegrationsMemCache",
                    "description": "Mem cache integration. See Integration blocks below for details.\n"
                },
                "pubSub": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsPubSub:GcpIntegrationsPubSub",
                    "description": "Pub/Sub integration. See Integration blocks below for details.\n"
                },
                "redis": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsRedis:GcpIntegrationsRedis",
                    "description": "Redis integration. See Integration blocks below for details.\n"
                },
                "router": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsRouter:GcpIntegrationsRouter",
                    "description": "Router integration. See Integration blocks below for details.\n"
                },
                "run": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsRun:GcpIntegrationsRun",
                    "description": "Run integration. See Integration blocks below for details.\n"
                },
                "spanner": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsSpanner:GcpIntegrationsSpanner",
                    "description": "Spanner integration. See Integration blocks below for details.\n"
                },
                "sql": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsSql:GcpIntegrationsSql",
                    "description": "SQL integration. See Integration blocks below for details.\n"
                },
                "storage": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsStorage:GcpIntegrationsStorage",
                    "description": "Storage integration. See Integration blocks below for details.\n"
                },
                "virtualMachines": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsVirtualMachines:GcpIntegrationsVirtualMachines",
                    "description": "Virtual machines integration. See Integration blocks below for details.\n"
                },
                "vpcAccess": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsVpcAccess:GcpIntegrationsVpcAccess",
                    "description": "VPC Access integration. See Integration blocks below for details.\n"
                }
            },
            "required": [
                "accountId",
                "linkedAccountId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "alloyDb": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsAlloyDb:GcpIntegrationsAlloyDb",
                    "description": "Alloy DB integration. See Integration blocks below for details.\n"
                },
                "appEngine": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsAppEngine:GcpIntegrationsAppEngine",
                    "description": "App Engine integration. See Integration blocks below for details.\n"
                },
                "bigQuery": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsBigQuery:GcpIntegrationsBigQuery",
                    "description": "Biq Query integration. See Integration blocks below for details.\n"
                },
                "bigTable": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsBigTable:GcpIntegrationsBigTable",
                    "description": "Big Table. See Integration blocks below for details.\n"
                },
                "composer": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsComposer:GcpIntegrationsComposer",
                    "description": "Composer integration. See Integration blocks below for details.\n"
                },
                "dataFlow": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataFlow:GcpIntegrationsDataFlow",
                    "description": "Data Flow integration. See Integration blocks below for details.\n"
                },
                "dataProc": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataProc:GcpIntegrationsDataProc",
                    "description": "Data Proc integration. See Integration blocks below for details.\n"
                },
                "dataStore": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataStore:GcpIntegrationsDataStore",
                    "description": "Data Store integration. See Integration blocks below for details.\n"
                },
                "fireBaseDatabase": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseDatabase:GcpIntegrationsFireBaseDatabase",
                    "description": "Fire Base Database integration. See Integration blocks below for details.\n"
                },
                "fireBaseHosting": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseHosting:GcpIntegrationsFireBaseHosting",
                    "description": "Fire Base Hosting integration. See Integration blocks below for details.\n"
                },
                "fireBaseStorage": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseStorage:GcpIntegrationsFireBaseStorage",
                    "description": "Fire Base Storage integration. See Integration blocks below for details.\n"
                },
                "fireStore": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireStore:GcpIntegrationsFireStore",
                    "description": "Fire Store integration. See Integration blocks below for details.\n"
                },
                "functions": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFunctions:GcpIntegrationsFunctions",
                    "description": "Functions integration. See Integration blocks below for details.\n"
                },
                "interconnect": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsInterconnect:GcpIntegrationsInterconnect",
                    "description": "Interconnect integration. See Integration blocks below for details.\n"
                },
                "kubernetes": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsKubernetes:GcpIntegrationsKubernetes",
                    "description": "Kubernetes integration. See Integration blocks below for details.\n"
                },
                "linkedAccountId": {
                    "type": "integer",
                    "description": "The ID of the linked GCP account in New Relic.\n",
                    "willReplaceOnChanges": true
                },
                "loadBalancing": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsLoadBalancing:GcpIntegrationsLoadBalancing",
                    "description": "Load Balancing integration. See Integration blocks below for details.\n"
                },
                "memCache": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsMemCache:GcpIntegrationsMemCache",
                    "description": "Mem cache integration. See Integration blocks below for details.\n"
                },
                "pubSub": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsPubSub:GcpIntegrationsPubSub",
                    "description": "Pub/Sub integration. See Integration blocks below for details.\n"
                },
                "redis": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsRedis:GcpIntegrationsRedis",
                    "description": "Redis integration. See Integration blocks below for details.\n"
                },
                "router": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsRouter:GcpIntegrationsRouter",
                    "description": "Router integration. See Integration blocks below for details.\n"
                },
                "run": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsRun:GcpIntegrationsRun",
                    "description": "Run integration. See Integration blocks below for details.\n"
                },
                "spanner": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsSpanner:GcpIntegrationsSpanner",
                    "description": "Spanner integration. See Integration blocks below for details.\n"
                },
                "sql": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsSql:GcpIntegrationsSql",
                    "description": "SQL integration. See Integration blocks below for details.\n"
                },
                "storage": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsStorage:GcpIntegrationsStorage",
                    "description": "Storage integration. See Integration blocks below for details.\n"
                },
                "virtualMachines": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsVirtualMachines:GcpIntegrationsVirtualMachines",
                    "description": "Virtual machines integration. See Integration blocks below for details.\n"
                },
                "vpcAccess": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsVpcAccess:GcpIntegrationsVpcAccess",
                    "description": "VPC Access integration. See Integration blocks below for details.\n"
                }
            },
            "requiredInputs": [
                "linkedAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpIntegrations resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "alloyDb": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsAlloyDb:GcpIntegrationsAlloyDb",
                        "description": "Alloy DB integration. See Integration blocks below for details.\n"
                    },
                    "appEngine": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsAppEngine:GcpIntegrationsAppEngine",
                        "description": "App Engine integration. See Integration blocks below for details.\n"
                    },
                    "bigQuery": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsBigQuery:GcpIntegrationsBigQuery",
                        "description": "Biq Query integration. See Integration blocks below for details.\n"
                    },
                    "bigTable": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsBigTable:GcpIntegrationsBigTable",
                        "description": "Big Table. See Integration blocks below for details.\n"
                    },
                    "composer": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsComposer:GcpIntegrationsComposer",
                        "description": "Composer integration. See Integration blocks below for details.\n"
                    },
                    "dataFlow": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataFlow:GcpIntegrationsDataFlow",
                        "description": "Data Flow integration. See Integration blocks below for details.\n"
                    },
                    "dataProc": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataProc:GcpIntegrationsDataProc",
                        "description": "Data Proc integration. See Integration blocks below for details.\n"
                    },
                    "dataStore": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataStore:GcpIntegrationsDataStore",
                        "description": "Data Store integration. See Integration blocks below for details.\n"
                    },
                    "fireBaseDatabase": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseDatabase:GcpIntegrationsFireBaseDatabase",
                        "description": "Fire Base Database integration. See Integration blocks below for details.\n"
                    },
                    "fireBaseHosting": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseHosting:GcpIntegrationsFireBaseHosting",
                        "description": "Fire Base Hosting integration. See Integration blocks below for details.\n"
                    },
                    "fireBaseStorage": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseStorage:GcpIntegrationsFireBaseStorage",
                        "description": "Fire Base Storage integration. See Integration blocks below for details.\n"
                    },
                    "fireStore": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireStore:GcpIntegrationsFireStore",
                        "description": "Fire Store integration. See Integration blocks below for details.\n"
                    },
                    "functions": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsFunctions:GcpIntegrationsFunctions",
                        "description": "Functions integration. See Integration blocks below for details.\n"
                    },
                    "interconnect": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsInterconnect:GcpIntegrationsInterconnect",
                        "description": "Interconnect integration. See Integration blocks below for details.\n"
                    },
                    "kubernetes": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsKubernetes:GcpIntegrationsKubernetes",
                        "description": "Kubernetes integration. See Integration blocks below for details.\n"
                    },
                    "linkedAccountId": {
                        "type": "integer",
                        "description": "The ID of the linked GCP account in New Relic.\n",
                        "willReplaceOnChanges": true
                    },
                    "loadBalancing": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsLoadBalancing:GcpIntegrationsLoadBalancing",
                        "description": "Load Balancing integration. See Integration blocks below for details.\n"
                    },
                    "memCache": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsMemCache:GcpIntegrationsMemCache",
                        "description": "Mem cache integration. See Integration blocks below for details.\n"
                    },
                    "pubSub": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsPubSub:GcpIntegrationsPubSub",
                        "description": "Pub/Sub integration. See Integration blocks below for details.\n"
                    },
                    "redis": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsRedis:GcpIntegrationsRedis",
                        "description": "Redis integration. See Integration blocks below for details.\n"
                    },
                    "router": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsRouter:GcpIntegrationsRouter",
                        "description": "Router integration. See Integration blocks below for details.\n"
                    },
                    "run": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsRun:GcpIntegrationsRun",
                        "description": "Run integration. See Integration blocks below for details.\n"
                    },
                    "spanner": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsSpanner:GcpIntegrationsSpanner",
                        "description": "Spanner integration. See Integration blocks below for details.\n"
                    },
                    "sql": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsSql:GcpIntegrationsSql",
                        "description": "SQL integration. See Integration blocks below for details.\n"
                    },
                    "storage": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsStorage:GcpIntegrationsStorage",
                        "description": "Storage integration. See Integration blocks below for details.\n"
                    },
                    "virtualMachines": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsVirtualMachines:GcpIntegrationsVirtualMachines",
                        "description": "Virtual machines integration. See Integration blocks below for details.\n"
                    },
                    "vpcAccess": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsVpcAccess:GcpIntegrationsVpcAccess",
                        "description": "VPC Access integration. See Integration blocks below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:cloud/gcpLinkAccount:GcpLinkAccount": {
            "description": "Use this resource to link a GCP account to New Relic.\n\n## Prerequisite\n\nTo start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. If you don't have one already, create a New Relic account. It's free, forever.\n\nSetup is required in GCP for this resource to work properly. The New Relic GCP integration can be done by creating a user account or a service account.\n\nA user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project.\n\nIn the GCP project IAM \u0026 admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role.\n\nFollow the [steps outlined here](https://docs.newrelic.com/docs/infrastructure/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic) to set up the integration.\n\n## Example Usage\n\nYou can also use the full example, including the GCP set up, found in our guides.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.cloud.GcpLinkAccount(\"foo\", {\n    accountId: \"account id of newrelic account\",\n    projectId: \"id of the Project\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.cloud.GcpLinkAccount(\"foo\",\n    account_id=\"account id of newrelic account\",\n    project_id=\"id of the Project\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.Cloud.GcpLinkAccount(\"foo\", new()\n    {\n        AccountId = \"account id of newrelic account\",\n        ProjectId = \"id of the Project\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/cloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloud.NewGcpLinkAccount(ctx, \"foo\", \u0026cloud.GcpLinkAccountArgs{\n\t\t\tAccountId: pulumi.Int(\"account id of newrelic account\"),\n\t\t\tProjectId: pulumi.String(\"id of the Project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.cloud.GcpLinkAccount;\nimport com.pulumi.newrelic.cloud.GcpLinkAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new GcpLinkAccount(\"foo\", GcpLinkAccountArgs.builder()        \n            .accountId(\"account id of newrelic account\")\n            .projectId(\"id of the Project\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:cloud:GcpLinkAccount\n    properties:\n      accountId: account id of newrelic account\n      projectId: id of the Project\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinked GCP accounts can be imported using `id`, you can find the `id` of an existing GCP linked accounts in GCP dashboard under Infrastructure in Newrelic Console.\n\nbash\n\n```sh\n$ pulumi import newrelic:cloud/gcpLinkAccount:GcpLinkAccount newrelic_cloud_gcp_link_account.foo \u003cid\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Account ID of the New Relic account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the linked account\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID of the GCP account.\n"
                }
            },
            "required": [
                "accountId",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Account ID of the New Relic account.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "name of the linked account\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID of the GCP account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpLinkAccount resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Account ID of the New Relic account.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the linked account\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project ID of the GCP account.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/accountManagement:AccountManagement": {
            "description": "Use this resource to create and manage New Relic sub accounts.\n\n\u003e **WARNING:** The `newrelic.AccountManagement` resource will only create/update but won't delete a sub account. Please visit our documentation on  [`Account Management`](https://docs.newrelic.com/docs/apis/nerdgraph/examples/manage-accounts-nerdgraph/#delete) for more information .\n\n## Example Usage\n\n##### Create Account\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AccountManagement(\"foo\", {region: \"us01\"});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.AccountManagement(\"foo\", region=\"us01\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.AccountManagement(\"foo\", new()\n    {\n        Region = \"us01\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewAccountManagement(ctx, \"foo\", \u0026newrelic.AccountManagementArgs{\n\t\t\tRegion: pulumi.String(\"us01\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AccountManagement;\nimport com.pulumi.newrelic.AccountManagementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AccountManagement(\"foo\", AccountManagementArgs.builder()        \n            .region(\"us01\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:AccountManagement\n    properties:\n      region: us01\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nAccounts can be imported using the `id`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:index/accountManagement:AccountManagement foo \u003cid\u003e\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Account.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region code of the account.  One of: `us01`, `eu01`.\n"
                }
            },
            "required": [
                "name",
                "region"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Account.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region code of the account.  One of: `us01`, `eu01`.\n"
                }
            },
            "requiredInputs": [
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountManagement resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Account.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region code of the account.  One of: `us01`, `eu01`.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/alertChannel:AlertChannel": {
            "description": "Use this resource to create and manage New Relic alert channels.\n\n\u003e **WARNING:** The `newrelic.AlertChannel` resource is deprecated and will be removed in the next major release. For managing channel resources in Workflows, use `newrelic.NotificationChannel`.\n\n## Example Usage\n\n### Email\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertChannel(\"foo\", {\n    config: {\n        includeJsonAttachment: \"true\",\n        recipients: \"foo@example.com\",\n    },\n    type: \"email\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.AlertChannel(\"foo\",\n    config=newrelic.AlertChannelConfigArgs(\n        include_json_attachment=\"true\",\n        recipients=\"foo@example.com\",\n    ),\n    type=\"email\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.AlertChannel(\"foo\", new()\n    {\n        Config = new NewRelic.Inputs.AlertChannelConfigArgs\n        {\n            IncludeJsonAttachment = \"true\",\n            Recipients = \"foo@example.com\",\n        },\n        Type = \"email\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewAlertChannel(ctx, \"foo\", \u0026newrelic.AlertChannelArgs{\n\t\t\tConfig: \u0026newrelic.AlertChannelConfigArgs{\n\t\t\t\tIncludeJsonAttachment: pulumi.String(\"true\"),\n\t\t\t\tRecipients:            pulumi.String(\"foo@example.com\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"email\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertChannel;\nimport com.pulumi.newrelic.AlertChannelArgs;\nimport com.pulumi.newrelic.inputs.AlertChannelConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AlertChannel(\"foo\", AlertChannelArgs.builder()        \n            .config(AlertChannelConfigArgs.builder()\n                .includeJsonAttachment(\"true\")\n                .recipients(\"foo@example.com\")\n                .build())\n            .type(\"email\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:AlertChannel\n    properties:\n      config:\n        includeJsonAttachment: 'true'\n        recipients: foo@example.com\n      type: email\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Additional Examples\n\n##### Slack\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertChannel(\"foo\", {\n    config: {\n        channel: \"example-alerts-channel\",\n        url: \"https://hooks.slack.com/services/XXXXXXX/XXXXXXX/XXXXXXXXXX\",\n    },\n    type: \"slack\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.AlertChannel(\"foo\",\n    config=newrelic.AlertChannelConfigArgs(\n        channel=\"example-alerts-channel\",\n        url=\"https://hooks.slack.com/services/XXXXXXX/XXXXXXX/XXXXXXXXXX\",\n    ),\n    type=\"slack\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.AlertChannel(\"foo\", new()\n    {\n        Config = new NewRelic.Inputs.AlertChannelConfigArgs\n        {\n            Channel = \"example-alerts-channel\",\n            Url = \"https://hooks.slack.com/services/XXXXXXX/XXXXXXX/XXXXXXXXXX\",\n        },\n        Type = \"slack\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewAlertChannel(ctx, \"foo\", \u0026newrelic.AlertChannelArgs{\n\t\t\tConfig: \u0026newrelic.AlertChannelConfigArgs{\n\t\t\t\tChannel: pulumi.String(\"example-alerts-channel\"),\n\t\t\t\tUrl:     pulumi.String(\"https://hooks.slack.com/services/XXXXXXX/XXXXXXX/XXXXXXXXXX\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"slack\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertChannel;\nimport com.pulumi.newrelic.AlertChannelArgs;\nimport com.pulumi.newrelic.inputs.AlertChannelConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AlertChannel(\"foo\", AlertChannelArgs.builder()        \n            .config(AlertChannelConfigArgs.builder()\n                .channel(\"example-alerts-channel\")\n                .url(\"https://hooks.slack.com/services/XXXXXXX/XXXXXXX/XXXXXXXXXX\")\n                .build())\n            .type(\"slack\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:AlertChannel\n    properties:\n      config:\n        channel: example-alerts-channel\n        url: https://hooks.slack.com/services/XXXXXXX/XXXXXXX/XXXXXXXXXX\n      type: slack\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **NOTE:** For instructions on setting up Webhooks with Slack, please visit the article linked under the argument `slack` in the aforementioned configuration, or [this article](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-notifications/notification-channels-control-where-send-alerts/#slack) in New Relic's docs for additional details on setting up the `New Relic Alerts` Slack application, and subsequently using the generated Webhook URL.\n\n### OpsGenie\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertChannel(\"foo\", {\n    config: {\n        apiKey: \"abc123\",\n        recipients: \"user1@domain.com, user2@domain.com\",\n        tags: \"tag1, tag2\",\n        teams: \"team1, team2\",\n    },\n    type: \"opsgenie\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.AlertChannel(\"foo\",\n    config=newrelic.AlertChannelConfigArgs(\n        api_key=\"abc123\",\n        recipients=\"user1@domain.com, user2@domain.com\",\n        tags=\"tag1, tag2\",\n        teams=\"team1, team2\",\n    ),\n    type=\"opsgenie\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.AlertChannel(\"foo\", new()\n    {\n        Config = new NewRelic.Inputs.AlertChannelConfigArgs\n        {\n            ApiKey = \"abc123\",\n            Recipients = \"user1@domain.com, user2@domain.com\",\n            Tags = \"tag1, tag2\",\n            Teams = \"team1, team2\",\n        },\n        Type = \"opsgenie\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewAlertChannel(ctx, \"foo\", \u0026newrelic.AlertChannelArgs{\n\t\t\tConfig: \u0026newrelic.AlertChannelConfigArgs{\n\t\t\t\tApiKey:     pulumi.String(\"abc123\"),\n\t\t\t\tRecipients: pulumi.String(\"user1@domain.com, user2@domain.com\"),\n\t\t\t\tTags:       pulumi.String(\"tag1, tag2\"),\n\t\t\t\tTeams:      pulumi.String(\"team1, team2\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"opsgenie\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertChannel;\nimport com.pulumi.newrelic.AlertChannelArgs;\nimport com.pulumi.newrelic.inputs.AlertChannelConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AlertChannel(\"foo\", AlertChannelArgs.builder()        \n            .config(AlertChannelConfigArgs.builder()\n                .apiKey(\"abc123\")\n                .recipients(\"user1@domain.com, user2@domain.com\")\n                .tags(\"tag1, tag2\")\n                .teams(\"team1, team2\")\n                .build())\n            .type(\"opsgenie\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:AlertChannel\n    properties:\n      config:\n        apiKey: abc123\n        recipients: user1@domain.com, user2@domain.com\n        tags: tag1, tag2\n        teams: team1, team2\n      type: opsgenie\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### PagerDuty\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertChannel(\"foo\", {\n    config: {\n        serviceKey: \"abc123\",\n    },\n    type: \"pagerduty\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.AlertChannel(\"foo\",\n    config=newrelic.AlertChannelConfigArgs(\n        service_key=\"abc123\",\n    ),\n    type=\"pagerduty\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.AlertChannel(\"foo\", new()\n    {\n        Config = new NewRelic.Inputs.AlertChannelConfigArgs\n        {\n            ServiceKey = \"abc123\",\n        },\n        Type = \"pagerduty\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewAlertChannel(ctx, \"foo\", \u0026newrelic.AlertChannelArgs{\n\t\t\tConfig: \u0026newrelic.AlertChannelConfigArgs{\n\t\t\t\tServiceKey: pulumi.String(\"abc123\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"pagerduty\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertChannel;\nimport com.pulumi.newrelic.AlertChannelArgs;\nimport com.pulumi.newrelic.inputs.AlertChannelConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AlertChannel(\"foo\", AlertChannelArgs.builder()        \n            .config(AlertChannelConfigArgs.builder()\n                .serviceKey(\"abc123\")\n                .build())\n            .type(\"pagerduty\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:AlertChannel\n    properties:\n      config:\n        serviceKey: abc123\n      type: pagerduty\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### VictorOps\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertChannel(\"foo\", {\n    config: {\n        key: \"abc123\",\n        routeKey: \"/example\",\n    },\n    type: \"victorops\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.AlertChannel(\"foo\",\n    config=newrelic.AlertChannelConfigArgs(\n        key=\"abc123\",\n        route_key=\"/example\",\n    ),\n    type=\"victorops\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.AlertChannel(\"foo\", new()\n    {\n        Config = new NewRelic.Inputs.AlertChannelConfigArgs\n        {\n            Key = \"abc123\",\n            RouteKey = \"/example\",\n        },\n        Type = \"victorops\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewAlertChannel(ctx, \"foo\", \u0026newrelic.AlertChannelArgs{\n\t\t\tConfig: \u0026newrelic.AlertChannelConfigArgs{\n\t\t\t\tKey:      pulumi.String(\"abc123\"),\n\t\t\t\tRouteKey: pulumi.String(\"/example\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"victorops\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertChannel;\nimport com.pulumi.newrelic.AlertChannelArgs;\nimport com.pulumi.newrelic.inputs.AlertChannelConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AlertChannel(\"foo\", AlertChannelArgs.builder()        \n            .config(AlertChannelConfigArgs.builder()\n                .key(\"abc123\")\n                .routeKey(\"/example\")\n                .build())\n            .type(\"victorops\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:AlertChannel\n    properties:\n      config:\n        key: abc123\n        routeKey: /example\n      type: victorops\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Webhook\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertChannel(\"foo\", {\n    type: \"webhook\",\n    config: {\n        baseUrl: \"http://www.test.com\",\n        payloadType: \"application/json\",\n        payload: {\n            condition_name: \"$CONDITION_NAME\",\n            policy_name: \"$POLICY_NAME\",\n        },\n        headers: {\n            header1: value1,\n            header2: value2,\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.AlertChannel(\"foo\",\n    type=\"webhook\",\n    config=newrelic.AlertChannelConfigArgs(\n        base_url=\"http://www.test.com\",\n        payload_type=\"application/json\",\n        payload={\n            \"condition_name\": \"$CONDITION_NAME\",\n            \"policy_name\": \"$POLICY_NAME\",\n        },\n        headers={\n            \"header1\": value1,\n            \"header2\": value2,\n        },\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.AlertChannel(\"foo\", new()\n    {\n        Type = \"webhook\",\n        Config = new NewRelic.Inputs.AlertChannelConfigArgs\n        {\n            BaseUrl = \"http://www.test.com\",\n            PayloadType = \"application/json\",\n            Payload = \n            {\n                { \"condition_name\", \"$CONDITION_NAME\" },\n                { \"policy_name\", \"$POLICY_NAME\" },\n            },\n            Headers = \n            {\n                { \"header1\", value1 },\n                { \"header2\", value2 },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewAlertChannel(ctx, \"foo\", \u0026newrelic.AlertChannelArgs{\n\t\t\tType: pulumi.String(\"webhook\"),\n\t\t\tConfig: \u0026newrelic.AlertChannelConfigArgs{\n\t\t\t\tBaseUrl:     pulumi.String(\"http://www.test.com\"),\n\t\t\t\tPayloadType: pulumi.String(\"application/json\"),\n\t\t\t\tPayload: pulumi.StringMap{\n\t\t\t\t\t\"condition_name\": pulumi.String(\"$CONDITION_NAME\"),\n\t\t\t\t\t\"policy_name\":    pulumi.String(\"$POLICY_NAME\"),\n\t\t\t\t},\n\t\t\t\tHeaders: pulumi.StringMap{\n\t\t\t\t\t\"header1\": pulumi.Any(value1),\n\t\t\t\t\t\"header2\": pulumi.Any(value2),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertChannel;\nimport com.pulumi.newrelic.AlertChannelArgs;\nimport com.pulumi.newrelic.inputs.AlertChannelConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AlertChannel(\"foo\", AlertChannelArgs.builder()        \n            .type(\"webhook\")\n            .config(AlertChannelConfigArgs.builder()\n                .baseUrl(\"http://www.test.com\")\n                .payloadType(\"application/json\")\n                .payload(Map.ofEntries(\n                    Map.entry(\"condition_name\", \"$CONDITION_NAME\"),\n                    Map.entry(\"policy_name\", \"$POLICY_NAME\")\n                ))\n                .headers(Map.ofEntries(\n                    Map.entry(\"header1\", value1),\n                    Map.entry(\"header2\", value2)\n                ))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:AlertChannel\n    properties:\n      type: webhook\n      config:\n        baseUrl: http://www.test.com\n        payloadType: application/json\n        payload:\n          condition_name: $CONDITION_NAME\n          policy_name: $POLICY_NAME\n        headers:\n          header1: ${value1}\n          header2: ${value2}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Webhook with complex payload\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertChannel(\"foo\", {\n    config: {\n        baseUrl: \"http://www.test.com\",\n        payloadString: `{\n  \"my_custom_values\": {\n    \"condition_name\": \"$CONDITION_NAME\",\n    \"policy_name\": \"$POLICY_NAME\"\n  }\n}\n\n`,\n        payloadType: \"application/json\",\n    },\n    type: \"webhook\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.AlertChannel(\"foo\",\n    config=newrelic.AlertChannelConfigArgs(\n        base_url=\"http://www.test.com\",\n        payload_string=\"\"\"{\n  \"my_custom_values\": {\n    \"condition_name\": \"$CONDITION_NAME\",\n    \"policy_name\": \"$POLICY_NAME\"\n  }\n}\n\n\"\"\",\n        payload_type=\"application/json\",\n    ),\n    type=\"webhook\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.AlertChannel(\"foo\", new()\n    {\n        Config = new NewRelic.Inputs.AlertChannelConfigArgs\n        {\n            BaseUrl = \"http://www.test.com\",\n            PayloadString = @\"{\n  \"\"my_custom_values\"\": {\n    \"\"condition_name\"\": \"\"$CONDITION_NAME\"\",\n    \"\"policy_name\"\": \"\"$POLICY_NAME\"\"\n  }\n}\n\n\",\n            PayloadType = \"application/json\",\n        },\n        Type = \"webhook\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewAlertChannel(ctx, \"foo\", \u0026newrelic.AlertChannelArgs{\n\t\t\tConfig: \u0026newrelic.AlertChannelConfigArgs{\n\t\t\t\tBaseUrl: pulumi.String(\"http://www.test.com\"),\n\t\t\t\tPayloadString: pulumi.String(`{\n  \"my_custom_values\": {\n    \"condition_name\": \"$CONDITION_NAME\",\n    \"policy_name\": \"$POLICY_NAME\"\n  }\n}\n\n`),\n\t\t\t\tPayloadType: pulumi.String(\"application/json\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"webhook\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertChannel;\nimport com.pulumi.newrelic.AlertChannelArgs;\nimport com.pulumi.newrelic.inputs.AlertChannelConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AlertChannel(\"foo\", AlertChannelArgs.builder()        \n            .config(AlertChannelConfigArgs.builder()\n                .baseUrl(\"http://www.test.com\")\n                .payloadString(\"\"\"\n{\n  \"my_custom_values\": {\n    \"condition_name\": \"$CONDITION_NAME\",\n    \"policy_name\": \"$POLICY_NAME\"\n  }\n}\n\n                \"\"\")\n                .payloadType(\"application/json\")\n                .build())\n            .type(\"webhook\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:AlertChannel\n    properties:\n      config:\n        baseUrl: http://www.test.com\n        payloadString: |+\n          {\n            \"my_custom_values\": {\n              \"condition_name\": \"$CONDITION_NAME\",\n              \"policy_name\": \"$POLICY_NAME\"\n            }\n          }\n\n        payloadType: application/json\n      type: webhook\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nAlert channels can be imported using the `id`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:index/alertChannel:AlertChannel main \u003cid\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the alert channel will be created. Defaults to the account associated with the API key used.\n"
                },
                "config": {
                    "$ref": "#/types/newrelic:index/AlertChannelConfig:AlertChannelConfig",
                    "description": "A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See Nested config blocks below for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the channel.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.\n"
                }
            },
            "required": [
                "accountId",
                "name",
                "type"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the alert channel will be created. Defaults to the account associated with the API key used.\n"
                },
                "config": {
                    "$ref": "#/types/newrelic:index/AlertChannelConfig:AlertChannelConfig",
                    "description": "A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See Nested config blocks below for details.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the channel.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertChannel resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Determines the New Relic account where the alert channel will be created. Defaults to the account associated with the API key used.\n"
                    },
                    "config": {
                        "$ref": "#/types/newrelic:index/AlertChannelConfig:AlertChannelConfig",
                        "description": "A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See Nested config blocks below for details.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the channel.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/alertCondition:AlertCondition": {
            "description": "Use this resource to create and manage alert conditions for APM, Browser, and Mobile in New Relic.\n\n\u003e **WARNING:** The `newrelic.AlertCondition` resource is deprecated and will be removed in the next major release. The resource newrelic.NrqlAlertCondition would be a preferred alternative to configure alert conditions - in most cases, feature parity can be achieved with a NRQL query.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst app = newrelic.getEntity({\n    name: \"my-app\",\n    type: \"APPLICATION\",\n    domain: \"APM\",\n});\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooAlertCondition = new newrelic.AlertCondition(\"fooAlertCondition\", {\n    policyId: fooAlertPolicy.id,\n    type: \"apm_app_metric\",\n    entities: [app.then(app =\u003e app.applicationId)],\n    metric: \"apdex\",\n    runbookUrl: \"https://www.example.com\",\n    conditionScope: \"application\",\n    terms: [{\n        duration: 5,\n        operator: \"below\",\n        priority: \"critical\",\n        threshold: 0.75,\n        timeFunction: \"all\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\napp = newrelic.get_entity(name=\"my-app\",\n    type=\"APPLICATION\",\n    domain=\"APM\")\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_alert_condition = newrelic.AlertCondition(\"fooAlertCondition\",\n    policy_id=foo_alert_policy.id,\n    type=\"apm_app_metric\",\n    entities=[app.application_id],\n    metric=\"apdex\",\n    runbook_url=\"https://www.example.com\",\n    condition_scope=\"application\",\n    terms=[newrelic.AlertConditionTermArgs(\n        duration=5,\n        operator=\"below\",\n        priority=\"critical\",\n        threshold=0.75,\n        time_function=\"all\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = NewRelic.GetEntity.Invoke(new()\n    {\n        Name = \"my-app\",\n        Type = \"APPLICATION\",\n        Domain = \"APM\",\n    });\n\n    var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\");\n\n    var fooAlertCondition = new NewRelic.AlertCondition(\"fooAlertCondition\", new()\n    {\n        PolicyId = fooAlertPolicy.Id,\n        Type = \"apm_app_metric\",\n        Entities = new[]\n        {\n            app.Apply(getEntityResult =\u003e getEntityResult.ApplicationId),\n        },\n        Metric = \"apdex\",\n        RunbookUrl = \"https://www.example.com\",\n        ConditionScope = \"application\",\n        Terms = new[]\n        {\n            new NewRelic.Inputs.AlertConditionTermArgs\n            {\n                Duration = 5,\n                Operator = \"below\",\n                Priority = \"critical\",\n                Threshold = 0.75,\n                TimeFunction = \"all\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tapp, err := newrelic.GetEntity(ctx, \u0026newrelic.GetEntityArgs{\n\t\t\tName:   \"my-app\",\n\t\t\tType:   pulumi.StringRef(\"APPLICATION\"),\n\t\t\tDomain: pulumi.StringRef(\"APM\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewAlertCondition(ctx, \"fooAlertCondition\", \u0026newrelic.AlertConditionArgs{\n\t\t\tPolicyId: fooAlertPolicy.ID(),\n\t\t\tType:     pulumi.String(\"apm_app_metric\"),\n\t\t\tEntities: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(app.ApplicationId),\n\t\t\t},\n\t\t\tMetric:         pulumi.String(\"apdex\"),\n\t\t\tRunbookUrl:     pulumi.String(\"https://www.example.com\"),\n\t\t\tConditionScope: pulumi.String(\"application\"),\n\t\t\tTerms: newrelic.AlertConditionTermArray{\n\t\t\t\t\u0026newrelic.AlertConditionTermArgs{\n\t\t\t\t\tDuration:     pulumi.Int(5),\n\t\t\t\t\tOperator:     pulumi.String(\"below\"),\n\t\t\t\t\tPriority:     pulumi.String(\"critical\"),\n\t\t\t\t\tThreshold:    pulumi.Float64(0.75),\n\t\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetEntityArgs;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.AlertCondition;\nimport com.pulumi.newrelic.AlertConditionArgs;\nimport com.pulumi.newrelic.inputs.AlertConditionTermArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var app = NewrelicFunctions.getEntity(GetEntityArgs.builder()\n            .name(\"my-app\")\n            .type(\"APPLICATION\")\n            .domain(\"APM\")\n            .build());\n\n        var fooAlertPolicy = new AlertPolicy(\"fooAlertPolicy\");\n\n        var fooAlertCondition = new AlertCondition(\"fooAlertCondition\", AlertConditionArgs.builder()        \n            .policyId(fooAlertPolicy.id())\n            .type(\"apm_app_metric\")\n            .entities(app.applyValue(getEntityResult -\u003e getEntityResult.applicationId()))\n            .metric(\"apdex\")\n            .runbookUrl(\"https://www.example.com\")\n            .conditionScope(\"application\")\n            .terms(AlertConditionTermArgs.builder()\n                .duration(5)\n                .operator(\"below\")\n                .priority(\"critical\")\n                .threshold(\"0.75\")\n                .timeFunction(\"all\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooAlertPolicy:\n    type: newrelic:AlertPolicy\n  fooAlertCondition:\n    type: newrelic:AlertCondition\n    properties:\n      policyId: ${fooAlertPolicy.id}\n      type: apm_app_metric\n      entities:\n        - ${app.applicationId}\n      metric: apdex\n      runbookUrl: https://www.example.com\n      conditionScope: application\n      terms:\n        - duration: 5\n          operator: below\n          priority: critical\n          threshold: '0.75'\n          timeFunction: all\nvariables:\n  app:\n    fn::invoke:\n      Function: newrelic:getEntity\n      Arguments:\n        name: my-app\n        type: APPLICATION\n        domain: APM\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Terms\n\nThe `term` mapping supports the following arguments:\n\n  * `duration` - (Required) In minutes, must be in the range of `5` to `120`, inclusive.\n  * `operator` - (Optional) `above`, `below`, or `equal`.  Defaults to `equal`.\n  * `priority` - (Optional) `critical` or `warning`.  Defaults to `critical`. Terms must include at least one `critical` priority term\n  * `threshold` - (Required) Must be 0 or greater.\n  * `time_function` - (Required) `all` or `any`.\n\n## Tags\n\nManage alert condition tags with `newrelic.EntityTags`. For up-to-date documentation about the tagging resource, please check newrelic.EntityTags\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooEntity = newrelic.getEntity({\n    name: \"foo entitiy\",\n});\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooAlertCondition = new newrelic.AlertCondition(\"fooAlertCondition\", {\n    policyId: fooAlertPolicy.id,\n    type: \"apm_app_metric\",\n    entities: [fooEntity.then(fooEntity =\u003e fooEntity.applicationId)],\n    metric: \"apdex\",\n    runbookUrl: \"https://www.example.com\",\n    conditionScope: \"application\",\n    terms: [{\n        duration: 5,\n        operator: \"below\",\n        priority: \"critical\",\n        threshold: 0.75,\n        timeFunction: \"all\",\n    }],\n});\nconst myConditionEntityTags = new newrelic.EntityTags(\"myConditionEntityTags\", {\n    guid: fooAlertCondition.entityGuid,\n    tags: [\n        {\n            key: \"my-key\",\n            values: [\n                \"my-value\",\n                \"my-other-value\",\n            ],\n        },\n        {\n            key: \"my-key-2\",\n            values: [\"my-value-2\"],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_entity = newrelic.get_entity(name=\"foo entitiy\")\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_alert_condition = newrelic.AlertCondition(\"fooAlertCondition\",\n    policy_id=foo_alert_policy.id,\n    type=\"apm_app_metric\",\n    entities=[foo_entity.application_id],\n    metric=\"apdex\",\n    runbook_url=\"https://www.example.com\",\n    condition_scope=\"application\",\n    terms=[newrelic.AlertConditionTermArgs(\n        duration=5,\n        operator=\"below\",\n        priority=\"critical\",\n        threshold=0.75,\n        time_function=\"all\",\n    )])\nmy_condition_entity_tags = newrelic.EntityTags(\"myConditionEntityTags\",\n    guid=foo_alert_condition.entity_guid,\n    tags=[\n        newrelic.EntityTagsTagArgs(\n            key=\"my-key\",\n            values=[\n                \"my-value\",\n                \"my-other-value\",\n            ],\n        ),\n        newrelic.EntityTagsTagArgs(\n            key=\"my-key-2\",\n            values=[\"my-value-2\"],\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooEntity = NewRelic.GetEntity.Invoke(new()\n    {\n        Name = \"foo entitiy\",\n    });\n\n    var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\");\n\n    var fooAlertCondition = new NewRelic.AlertCondition(\"fooAlertCondition\", new()\n    {\n        PolicyId = fooAlertPolicy.Id,\n        Type = \"apm_app_metric\",\n        Entities = new[]\n        {\n            fooEntity.Apply(getEntityResult =\u003e getEntityResult.ApplicationId),\n        },\n        Metric = \"apdex\",\n        RunbookUrl = \"https://www.example.com\",\n        ConditionScope = \"application\",\n        Terms = new[]\n        {\n            new NewRelic.Inputs.AlertConditionTermArgs\n            {\n                Duration = 5,\n                Operator = \"below\",\n                Priority = \"critical\",\n                Threshold = 0.75,\n                TimeFunction = \"all\",\n            },\n        },\n    });\n\n    var myConditionEntityTags = new NewRelic.EntityTags(\"myConditionEntityTags\", new()\n    {\n        Guid = fooAlertCondition.EntityGuid,\n        Tags = new[]\n        {\n            new NewRelic.Inputs.EntityTagsTagArgs\n            {\n                Key = \"my-key\",\n                Values = new[]\n                {\n                    \"my-value\",\n                    \"my-other-value\",\n                },\n            },\n            new NewRelic.Inputs.EntityTagsTagArgs\n            {\n                Key = \"my-key-2\",\n                Values = new[]\n                {\n                    \"my-value-2\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooEntity, err := newrelic.GetEntity(ctx, \u0026newrelic.GetEntityArgs{\n\t\t\tName: \"foo entitiy\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooAlertCondition, err := newrelic.NewAlertCondition(ctx, \"fooAlertCondition\", \u0026newrelic.AlertConditionArgs{\n\t\t\tPolicyId: fooAlertPolicy.ID(),\n\t\t\tType:     pulumi.String(\"apm_app_metric\"),\n\t\t\tEntities: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(fooEntity.ApplicationId),\n\t\t\t},\n\t\t\tMetric:         pulumi.String(\"apdex\"),\n\t\t\tRunbookUrl:     pulumi.String(\"https://www.example.com\"),\n\t\t\tConditionScope: pulumi.String(\"application\"),\n\t\t\tTerms: newrelic.AlertConditionTermArray{\n\t\t\t\t\u0026newrelic.AlertConditionTermArgs{\n\t\t\t\t\tDuration:     pulumi.Int(5),\n\t\t\t\t\tOperator:     pulumi.String(\"below\"),\n\t\t\t\t\tPriority:     pulumi.String(\"critical\"),\n\t\t\t\t\tThreshold:    pulumi.Float64(0.75),\n\t\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewEntityTags(ctx, \"myConditionEntityTags\", \u0026newrelic.EntityTagsArgs{\n\t\t\tGuid: fooAlertCondition.EntityGuid,\n\t\t\tTags: newrelic.EntityTagsTagArray{\n\t\t\t\t\u0026newrelic.EntityTagsTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"my-key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"my-value\"),\n\t\t\t\t\t\tpulumi.String(\"my-other-value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.EntityTagsTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"my-key-2\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"my-value-2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetEntityArgs;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.AlertCondition;\nimport com.pulumi.newrelic.AlertConditionArgs;\nimport com.pulumi.newrelic.inputs.AlertConditionTermArgs;\nimport com.pulumi.newrelic.EntityTags;\nimport com.pulumi.newrelic.EntityTagsArgs;\nimport com.pulumi.newrelic.inputs.EntityTagsTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooEntity = NewrelicFunctions.getEntity(GetEntityArgs.builder()\n            .name(\"foo entitiy\")\n            .build());\n\n        var fooAlertPolicy = new AlertPolicy(\"fooAlertPolicy\");\n\n        var fooAlertCondition = new AlertCondition(\"fooAlertCondition\", AlertConditionArgs.builder()        \n            .policyId(fooAlertPolicy.id())\n            .type(\"apm_app_metric\")\n            .entities(fooEntity.applyValue(getEntityResult -\u003e getEntityResult.applicationId()))\n            .metric(\"apdex\")\n            .runbookUrl(\"https://www.example.com\")\n            .conditionScope(\"application\")\n            .terms(AlertConditionTermArgs.builder()\n                .duration(5)\n                .operator(\"below\")\n                .priority(\"critical\")\n                .threshold(\"0.75\")\n                .timeFunction(\"all\")\n                .build())\n            .build());\n\n        var myConditionEntityTags = new EntityTags(\"myConditionEntityTags\", EntityTagsArgs.builder()        \n            .guid(fooAlertCondition.entityGuid())\n            .tags(            \n                EntityTagsTagArgs.builder()\n                    .key(\"my-key\")\n                    .values(                    \n                        \"my-value\",\n                        \"my-other-value\")\n                    .build(),\n                EntityTagsTagArgs.builder()\n                    .key(\"my-key-2\")\n                    .values(\"my-value-2\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooAlertPolicy:\n    type: newrelic:AlertPolicy\n  fooAlertCondition:\n    type: newrelic:AlertCondition\n    properties:\n      policyId: ${fooAlertPolicy.id}\n      type: apm_app_metric\n      entities:\n        - ${fooEntity.applicationId}\n      metric: apdex\n      runbookUrl: https://www.example.com\n      conditionScope: application\n      terms:\n        - duration: 5\n          operator: below\n          priority: critical\n          threshold: '0.75'\n          timeFunction: all\n  myConditionEntityTags:\n    type: newrelic:EntityTags\n    properties:\n      guid: ${fooAlertCondition.entityGuid}\n      tags:\n        - key: my-key\n          values:\n            - my-value\n            - my-other-value\n        - key: my-key-2\n          values:\n            - my-value-2\nvariables:\n  fooEntity:\n    fn::invoke:\n      Function: newrelic:getEntity\n      Arguments:\n        name: foo entitiy\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nAlert conditions can be imported using notation `alert_policy_id:alert_condition_id`, e.g.\n\n```sh\n$ pulumi import newrelic:index/alertCondition:AlertCondition main 123456:6789012345\n```\n",
            "properties": {
                "conditionScope": {
                    "type": "string",
                    "description": "`application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the condition is enabled or not. Defaults to true.\n"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The instance IDs associated with this condition.\n"
                },
                "entityGuid": {
                    "type": "string",
                    "description": "The unique entity identifier of the condition in New Relic.\n"
                },
                "gcMetric": {
                    "type": "string",
                    "description": "A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition. Must be between 1 and 64 characters, inclusive.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/AlertConditionTerm:AlertConditionTerm"
                    },
                    "description": "A list of terms for this condition. See Terms below for details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `browser_metric`, `mobile_metric`\n"
                },
                "userDefinedMetric": {
                    "type": "string",
                    "description": "A custom metric to be evaluated.\n"
                },
                "userDefinedValueFunction": {
                    "type": "string",
                    "description": "One of: `average`, `min`, `max`, `total`, `sample_size`, `rate` or `percent`.\n\n\u003e **NOTE:** The `user_defined_value_function` can have `rate` or `percent` only when the `type` is `mobile_metric`.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n"
                },
                "violationCloseTimer": {
                    "type": "integer",
                    "description": "Automatically close instance-based incidents, including JVM health metric incidents, after the number of hours specified. Must be between 1 and 720 hours. Must be specified in the following two cases, to prevent drift:\n* when `type` = `apm_app_metric` and `condition_scope` = `instance`\n* when `type` = `apm_jvm_metric`\n"
                }
            },
            "required": [
                "entities",
                "entityGuid",
                "metric",
                "name",
                "policyId",
                "terms",
                "type"
            ],
            "inputProperties": {
                "conditionScope": {
                    "type": "string",
                    "description": "`application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the condition is enabled or not. Defaults to true.\n"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The instance IDs associated with this condition.\n"
                },
                "gcMetric": {
                    "type": "string",
                    "description": "A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition. Must be between 1 and 64 characters, inclusive.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n",
                    "willReplaceOnChanges": true
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/AlertConditionTerm:AlertConditionTerm"
                    },
                    "description": "A list of terms for this condition. See Terms below for details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `browser_metric`, `mobile_metric`\n"
                },
                "userDefinedMetric": {
                    "type": "string",
                    "description": "A custom metric to be evaluated.\n"
                },
                "userDefinedValueFunction": {
                    "type": "string",
                    "description": "One of: `average`, `min`, `max`, `total`, `sample_size`, `rate` or `percent`.\n\n\u003e **NOTE:** The `user_defined_value_function` can have `rate` or `percent` only when the `type` is `mobile_metric`.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n"
                },
                "violationCloseTimer": {
                    "type": "integer",
                    "description": "Automatically close instance-based incidents, including JVM health metric incidents, after the number of hours specified. Must be between 1 and 720 hours. Must be specified in the following two cases, to prevent drift:\n* when `type` = `apm_app_metric` and `condition_scope` = `instance`\n* when `type` = `apm_jvm_metric`\n"
                }
            },
            "requiredInputs": [
                "entities",
                "metric",
                "policyId",
                "terms",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertCondition resources.\n",
                "properties": {
                    "conditionScope": {
                        "type": "string",
                        "description": "`application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the condition is enabled or not. Defaults to true.\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The instance IDs associated with this condition.\n"
                    },
                    "entityGuid": {
                        "type": "string",
                        "description": "The unique entity identifier of the condition in New Relic.\n"
                    },
                    "gcMetric": {
                        "type": "string",
                        "description": "A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n"
                    },
                    "metric": {
                        "type": "string",
                        "description": "The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the condition. Must be between 1 and 64 characters, inclusive.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the policy where this condition should be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "runbookUrl": {
                        "type": "string",
                        "description": "Runbook URL to display in notifications.\n"
                    },
                    "terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/AlertConditionTerm:AlertConditionTerm"
                        },
                        "description": "A list of terms for this condition. See Terms below for details.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `browser_metric`, `mobile_metric`\n"
                    },
                    "userDefinedMetric": {
                        "type": "string",
                        "description": "A custom metric to be evaluated.\n"
                    },
                    "userDefinedValueFunction": {
                        "type": "string",
                        "description": "One of: `average`, `min`, `max`, `total`, `sample_size`, `rate` or `percent`.\n\n\u003e **NOTE:** The `user_defined_value_function` can have `rate` or `percent` only when the `type` is `mobile_metric`.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n"
                    },
                    "violationCloseTimer": {
                        "type": "integer",
                        "description": "Automatically close instance-based incidents, including JVM health metric incidents, after the number of hours specified. Must be between 1 and 720 hours. Must be specified in the following two cases, to prevent drift:\n* when `type` = `apm_app_metric` and `condition_scope` = `instance`\n* when `type` = `apm_jvm_metric`\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/alertMutingRule:AlertMutingRule": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertMutingRule(\"foo\", {\n    condition: {\n        conditions: [\n            {\n                attribute: \"product\",\n                operator: \"EQUALS\",\n                values: [\"APM\"],\n            },\n            {\n                attribute: \"targetId\",\n                operator: \"EQUALS\",\n                values: [\"Muted\"],\n            },\n        ],\n        operator: \"AND\",\n    },\n    description: \"muting rule test.\",\n    enabled: true,\n    schedule: {\n        endTime: \"2021-01-28T16:30:00\",\n        repeat: \"WEEKLY\",\n        repeatCount: 42,\n        startTime: \"2021-01-28T15:30:00\",\n        timeZone: \"America/Los_Angeles\",\n        weeklyRepeatDays: [\n            \"MONDAY\",\n            \"WEDNESDAY\",\n            \"FRIDAY\",\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.AlertMutingRule(\"foo\",\n    condition=newrelic.AlertMutingRuleConditionArgs(\n        conditions=[\n            newrelic.AlertMutingRuleConditionConditionArgs(\n                attribute=\"product\",\n                operator=\"EQUALS\",\n                values=[\"APM\"],\n            ),\n            newrelic.AlertMutingRuleConditionConditionArgs(\n                attribute=\"targetId\",\n                operator=\"EQUALS\",\n                values=[\"Muted\"],\n            ),\n        ],\n        operator=\"AND\",\n    ),\n    description=\"muting rule test.\",\n    enabled=True,\n    schedule=newrelic.AlertMutingRuleScheduleArgs(\n        end_time=\"2021-01-28T16:30:00\",\n        repeat=\"WEEKLY\",\n        repeat_count=42,\n        start_time=\"2021-01-28T15:30:00\",\n        time_zone=\"America/Los_Angeles\",\n        weekly_repeat_days=[\n            \"MONDAY\",\n            \"WEDNESDAY\",\n            \"FRIDAY\",\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.AlertMutingRule(\"foo\", new()\n    {\n        Condition = new NewRelic.Inputs.AlertMutingRuleConditionArgs\n        {\n            Conditions = new[]\n            {\n                new NewRelic.Inputs.AlertMutingRuleConditionConditionArgs\n                {\n                    Attribute = \"product\",\n                    Operator = \"EQUALS\",\n                    Values = new[]\n                    {\n                        \"APM\",\n                    },\n                },\n                new NewRelic.Inputs.AlertMutingRuleConditionConditionArgs\n                {\n                    Attribute = \"targetId\",\n                    Operator = \"EQUALS\",\n                    Values = new[]\n                    {\n                        \"Muted\",\n                    },\n                },\n            },\n            Operator = \"AND\",\n        },\n        Description = \"muting rule test.\",\n        Enabled = true,\n        Schedule = new NewRelic.Inputs.AlertMutingRuleScheduleArgs\n        {\n            EndTime = \"2021-01-28T16:30:00\",\n            Repeat = \"WEEKLY\",\n            RepeatCount = 42,\n            StartTime = \"2021-01-28T15:30:00\",\n            TimeZone = \"America/Los_Angeles\",\n            WeeklyRepeatDays = new[]\n            {\n                \"MONDAY\",\n                \"WEDNESDAY\",\n                \"FRIDAY\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewAlertMutingRule(ctx, \"foo\", \u0026newrelic.AlertMutingRuleArgs{\n\t\t\tCondition: \u0026newrelic.AlertMutingRuleConditionArgs{\n\t\t\t\tConditions: newrelic.AlertMutingRuleConditionConditionArray{\n\t\t\t\t\t\u0026newrelic.AlertMutingRuleConditionConditionArgs{\n\t\t\t\t\t\tAttribute: pulumi.String(\"product\"),\n\t\t\t\t\t\tOperator:  pulumi.String(\"EQUALS\"),\n\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"APM\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\u0026newrelic.AlertMutingRuleConditionConditionArgs{\n\t\t\t\t\t\tAttribute: pulumi.String(\"targetId\"),\n\t\t\t\t\t\tOperator:  pulumi.String(\"EQUALS\"),\n\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"Muted\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tOperator: pulumi.String(\"AND\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"muting rule test.\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tSchedule: \u0026newrelic.AlertMutingRuleScheduleArgs{\n\t\t\t\tEndTime:     pulumi.String(\"2021-01-28T16:30:00\"),\n\t\t\t\tRepeat:      pulumi.String(\"WEEKLY\"),\n\t\t\t\tRepeatCount: pulumi.Int(42),\n\t\t\t\tStartTime:   pulumi.String(\"2021-01-28T15:30:00\"),\n\t\t\t\tTimeZone:    pulumi.String(\"America/Los_Angeles\"),\n\t\t\t\tWeeklyRepeatDays: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"MONDAY\"),\n\t\t\t\t\tpulumi.String(\"WEDNESDAY\"),\n\t\t\t\t\tpulumi.String(\"FRIDAY\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertMutingRule;\nimport com.pulumi.newrelic.AlertMutingRuleArgs;\nimport com.pulumi.newrelic.inputs.AlertMutingRuleConditionArgs;\nimport com.pulumi.newrelic.inputs.AlertMutingRuleScheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AlertMutingRule(\"foo\", AlertMutingRuleArgs.builder()        \n            .condition(AlertMutingRuleConditionArgs.builder()\n                .conditions(                \n                    AlertMutingRuleConditionConditionArgs.builder()\n                        .attribute(\"product\")\n                        .operator(\"EQUALS\")\n                        .values(\"APM\")\n                        .build(),\n                    AlertMutingRuleConditionConditionArgs.builder()\n                        .attribute(\"targetId\")\n                        .operator(\"EQUALS\")\n                        .values(\"Muted\")\n                        .build())\n                .operator(\"AND\")\n                .build())\n            .description(\"muting rule test.\")\n            .enabled(true)\n            .schedule(AlertMutingRuleScheduleArgs.builder()\n                .endTime(\"2021-01-28T16:30:00\")\n                .repeat(\"WEEKLY\")\n                .repeatCount(42)\n                .startTime(\"2021-01-28T15:30:00\")\n                .timeZone(\"America/Los_Angeles\")\n                .weeklyRepeatDays(                \n                    \"MONDAY\",\n                    \"WEDNESDAY\",\n                    \"FRIDAY\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:AlertMutingRule\n    properties:\n      condition:\n        conditions:\n          - attribute: product\n            operator: EQUALS\n            values:\n              - APM\n          - attribute: targetId\n            operator: EQUALS\n            values:\n              - Muted\n        operator: AND\n      description: muting rule test.\n      enabled: true\n      schedule:\n        endTime: 2021-01-28T16:30:00\n        repeat: WEEKLY\n        repeatCount: 42\n        startTime: 2021-01-28T15:30:00\n        timeZone: America/Los_Angeles\n        weeklyRepeatDays:\n          - MONDAY\n          - WEDNESDAY\n          - FRIDAY\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nAlert conditions can be imported using a composite ID of `\u003caccount_id\u003e:\u003cmuting_rule_id\u003e`, e.g.\n\n```sh\n$ pulumi import newrelic:index/alertMutingRule:AlertMutingRule foo 538291:6789035\n```\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account id of the MutingRule.\n"
                },
                "condition": {
                    "$ref": "#/types/newrelic:index/AlertMutingRuleCondition:AlertMutingRuleCondition",
                    "description": "The condition that defines which incidents to target. See Nested condition blocks below for details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the MutingRule.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the MutingRule is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the MutingRule.\n"
                },
                "schedule": {
                    "$ref": "#/types/newrelic:index/AlertMutingRuleSchedule:AlertMutingRuleSchedule",
                    "description": "Specify a schedule for enabling the MutingRule. See Schedule below for details\n"
                }
            },
            "required": [
                "accountId",
                "condition",
                "enabled",
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account id of the MutingRule.\n"
                },
                "condition": {
                    "$ref": "#/types/newrelic:index/AlertMutingRuleCondition:AlertMutingRuleCondition",
                    "description": "The condition that defines which incidents to target. See Nested condition blocks below for details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the MutingRule.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the MutingRule is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the MutingRule.\n"
                },
                "schedule": {
                    "$ref": "#/types/newrelic:index/AlertMutingRuleSchedule:AlertMutingRuleSchedule",
                    "description": "Specify a schedule for enabling the MutingRule. See Schedule below for details\n"
                }
            },
            "requiredInputs": [
                "condition",
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertMutingRule resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account id of the MutingRule.\n"
                    },
                    "condition": {
                        "$ref": "#/types/newrelic:index/AlertMutingRuleCondition:AlertMutingRuleCondition",
                        "description": "The condition that defines which incidents to target. See Nested condition blocks below for details.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the MutingRule.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the MutingRule is enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the MutingRule.\n"
                    },
                    "schedule": {
                        "$ref": "#/types/newrelic:index/AlertMutingRuleSchedule:AlertMutingRuleSchedule",
                        "description": "Specify a schedule for enabling the MutingRule. See Schedule below for details\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/alertPolicy:AlertPolicy": {
            "description": "Use this resource to create and manage New Relic alert policies.\n\n## Example Usage\n\n### Basic Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertPolicy(\"foo\", {incidentPreference: \"PER_POLICY\"});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.AlertPolicy(\"foo\", incident_preference=\"PER_POLICY\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.AlertPolicy(\"foo\", new()\n    {\n        IncidentPreference = \"PER_POLICY\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewAlertPolicy(ctx, \"foo\", \u0026newrelic.AlertPolicyArgs{\n\t\t\tIncidentPreference: pulumi.String(\"PER_POLICY\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.AlertPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AlertPolicy(\"foo\", AlertPolicyArgs.builder()        \n            .incidentPreference(\"PER_POLICY\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:AlertPolicy\n    properties:\n      incidentPreference: PER_POLICY\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Provision multiple notification channels and add those channels to a policy\n\nThe following arguments are supported:\n\n  * `name` - (Required) The name of the policy.\n  * `incident_preference` - (Optional) The rollup strategy for the policy, which can have one of the following values (the default value is `PER_POLICY`):\n    * `PER_POLICY` - This sets the incident grouping preference of the policy to **One issue per policy**. Refer to [this page](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/specify-when-alerts-create-incidents/#preference-policy) for more details on this incident grouping preference.\n    * `PER_CONDITION` - This sets the incident grouping preference of the policy to **One issue per condition**. Refer to [this page](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/specify-when-alerts-create-incidents/#preference-condition) for more details on this incident grouping preference.\n    * `PER_CONDITION_AND_TARGET` - This sets the incident grouping preference of the policy to **One issue per condition and signal**. Refer to [this page](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/specify-when-alerts-create-incidents/#preference-signal) for more details on this incident grouping preference.\n  * `channel_ids` - (Optional) **DEPRECATED** The `channel_ids` argument is deprecated and will be removed in the next major release of the provider. An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result in a new alert policy resource being created and the old one being destroyed. Also note that channel IDs _cannot_ be imported via `pulumi import` (see Import for info).\n  * `account_id` - (Optional) The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n\n## Additional Examples\n\n##### Provision multiple notification channels and add those channels to a policy\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\n// Provision a Slack notification channel.\nconst slackChannel = new newrelic.AlertChannel(\"slackChannel\", {\n    type: \"slack\",\n    config: {\n        url: \"https://hooks.slack.com/services/xxxxxxx/yyyyyyyy\",\n        channel: \"example-alerts-channel\",\n    },\n});\n// Provision an email notification channel.\nconst emailChannel = new newrelic.AlertChannel(\"emailChannel\", {\n    type: \"email\",\n    config: {\n        recipients: \"example@testing.com\",\n        includeJsonAttachment: \"1\",\n    },\n});\n// Provision the alert policy.\nconst policyWithChannels = new newrelic.AlertPolicy(\"policyWithChannels\", {\n    incidentPreference: \"PER_CONDITION\",\n    channelIds: [\n        slackChannel.id,\n        emailChannel.id,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\n# Provision a Slack notification channel.\nslack_channel = newrelic.AlertChannel(\"slackChannel\",\n    type=\"slack\",\n    config=newrelic.AlertChannelConfigArgs(\n        url=\"https://hooks.slack.com/services/xxxxxxx/yyyyyyyy\",\n        channel=\"example-alerts-channel\",\n    ))\n# Provision an email notification channel.\nemail_channel = newrelic.AlertChannel(\"emailChannel\",\n    type=\"email\",\n    config=newrelic.AlertChannelConfigArgs(\n        recipients=\"example@testing.com\",\n        include_json_attachment=\"1\",\n    ))\n# Provision the alert policy.\npolicy_with_channels = newrelic.AlertPolicy(\"policyWithChannels\",\n    incident_preference=\"PER_CONDITION\",\n    channel_ids=[\n        slack_channel.id,\n        email_channel.id,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Provision a Slack notification channel.\n    var slackChannel = new NewRelic.AlertChannel(\"slackChannel\", new()\n    {\n        Type = \"slack\",\n        Config = new NewRelic.Inputs.AlertChannelConfigArgs\n        {\n            Url = \"https://hooks.slack.com/services/xxxxxxx/yyyyyyyy\",\n            Channel = \"example-alerts-channel\",\n        },\n    });\n\n    // Provision an email notification channel.\n    var emailChannel = new NewRelic.AlertChannel(\"emailChannel\", new()\n    {\n        Type = \"email\",\n        Config = new NewRelic.Inputs.AlertChannelConfigArgs\n        {\n            Recipients = \"example@testing.com\",\n            IncludeJsonAttachment = \"1\",\n        },\n    });\n\n    // Provision the alert policy.\n    var policyWithChannels = new NewRelic.AlertPolicy(\"policyWithChannels\", new()\n    {\n        IncidentPreference = \"PER_CONDITION\",\n        ChannelIds = new[]\n        {\n            slackChannel.Id,\n            emailChannel.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Provision a Slack notification channel.\n\t\tslackChannel, err := newrelic.NewAlertChannel(ctx, \"slackChannel\", \u0026newrelic.AlertChannelArgs{\n\t\t\tType: pulumi.String(\"slack\"),\n\t\t\tConfig: \u0026newrelic.AlertChannelConfigArgs{\n\t\t\t\tUrl:     pulumi.String(\"https://hooks.slack.com/services/xxxxxxx/yyyyyyyy\"),\n\t\t\t\tChannel: pulumi.String(\"example-alerts-channel\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Provision an email notification channel.\n\t\temailChannel, err := newrelic.NewAlertChannel(ctx, \"emailChannel\", \u0026newrelic.AlertChannelArgs{\n\t\t\tType: pulumi.String(\"email\"),\n\t\t\tConfig: \u0026newrelic.AlertChannelConfigArgs{\n\t\t\t\tRecipients:            pulumi.String(\"example@testing.com\"),\n\t\t\t\tIncludeJsonAttachment: pulumi.String(\"1\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Provision the alert policy.\n\t\t_, err = newrelic.NewAlertPolicy(ctx, \"policyWithChannels\", \u0026newrelic.AlertPolicyArgs{\n\t\t\tIncidentPreference: pulumi.String(\"PER_CONDITION\"),\n\t\t\tChannelIds: pulumi.IntArray{\n\t\t\t\tslackChannel.ID(),\n\t\t\t\temailChannel.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertChannel;\nimport com.pulumi.newrelic.AlertChannelArgs;\nimport com.pulumi.newrelic.inputs.AlertChannelConfigArgs;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.AlertPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var slackChannel = new AlertChannel(\"slackChannel\", AlertChannelArgs.builder()        \n            .type(\"slack\")\n            .config(AlertChannelConfigArgs.builder()\n                .url(\"https://hooks.slack.com/services/xxxxxxx/yyyyyyyy\")\n                .channel(\"example-alerts-channel\")\n                .build())\n            .build());\n\n        var emailChannel = new AlertChannel(\"emailChannel\", AlertChannelArgs.builder()        \n            .type(\"email\")\n            .config(AlertChannelConfigArgs.builder()\n                .recipients(\"example@testing.com\")\n                .includeJsonAttachment(\"1\")\n                .build())\n            .build());\n\n        var policyWithChannels = new AlertPolicy(\"policyWithChannels\", AlertPolicyArgs.builder()        \n            .incidentPreference(\"PER_CONDITION\")\n            .channelIds(            \n                slackChannel.id(),\n                emailChannel.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Provision a Slack notification channel.\n  slackChannel:\n    type: newrelic:AlertChannel\n    properties:\n      type: slack\n      config:\n        url: https://hooks.slack.com/services/xxxxxxx/yyyyyyyy\n        channel: example-alerts-channel\n  # Provision an email notification channel.\n  emailChannel:\n    type: newrelic:AlertChannel\n    properties:\n      type: email\n      config:\n        recipients: example@testing.com\n        includeJsonAttachment: '1'\n  # Provision the alert policy.\n  policyWithChannels:\n    type: newrelic:AlertPolicy\n    properties:\n      incidentPreference: PER_CONDITION\n      # NOTE: The `channel_ids` argument has been deprecated. Avoid usage.\n      #   # Add the provisioned channels to the policy.\n      channelIds:\n        - ${slackChannel.id}\n        - ${emailChannel.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Reference existing notification channels and add those channel to a policy\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst slackChannel = newrelic.getAlertChannel({\n    name: \"slack-channel-notification\",\n});\nconst emailChannel = newrelic.getAlertChannel({\n    name: \"test@example.com\",\n});\n// Provision the alert policy.\nconst policyWithChannels = new newrelic.AlertPolicy(\"policyWithChannels\", {\n    incidentPreference: \"PER_CONDITION\",\n    channelIds: [\n        slackChannel.then(slackChannel =\u003e slackChannel.id),\n        emailChannel.then(emailChannel =\u003e emailChannel.id),\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nslack_channel = newrelic.get_alert_channel(name=\"slack-channel-notification\")\nemail_channel = newrelic.get_alert_channel(name=\"test@example.com\")\n# Provision the alert policy.\npolicy_with_channels = newrelic.AlertPolicy(\"policyWithChannels\",\n    incident_preference=\"PER_CONDITION\",\n    channel_ids=[\n        slack_channel.id,\n        email_channel.id,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var slackChannel = NewRelic.GetAlertChannel.Invoke(new()\n    {\n        Name = \"slack-channel-notification\",\n    });\n\n    var emailChannel = NewRelic.GetAlertChannel.Invoke(new()\n    {\n        Name = \"test@example.com\",\n    });\n\n    // Provision the alert policy.\n    var policyWithChannels = new NewRelic.AlertPolicy(\"policyWithChannels\", new()\n    {\n        IncidentPreference = \"PER_CONDITION\",\n        ChannelIds = new[]\n        {\n            slackChannel.Apply(getAlertChannelResult =\u003e getAlertChannelResult.Id),\n            emailChannel.Apply(getAlertChannelResult =\u003e getAlertChannelResult.Id),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tslackChannel, err := newrelic.LookupAlertChannel(ctx, \u0026newrelic.LookupAlertChannelArgs{\n\t\t\tName: \"slack-channel-notification\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\temailChannel, err := newrelic.LookupAlertChannel(ctx, \u0026newrelic.LookupAlertChannelArgs{\n\t\t\tName: \"test@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Provision the alert policy.\n\t\t_, err = newrelic.NewAlertPolicy(ctx, \"policyWithChannels\", \u0026newrelic.AlertPolicyArgs{\n\t\t\tIncidentPreference: pulumi.String(\"PER_CONDITION\"),\n\t\t\tChannelIds: pulumi.IntArray{\n\t\t\t\t*pulumi.String(slackChannel.Id),\n\t\t\t\t*pulumi.String(emailChannel.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetAlertChannelArgs;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.AlertPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var slackChannel = NewrelicFunctions.getAlertChannel(GetAlertChannelArgs.builder()\n            .name(\"slack-channel-notification\")\n            .build());\n\n        final var emailChannel = NewrelicFunctions.getAlertChannel(GetAlertChannelArgs.builder()\n            .name(\"test@example.com\")\n            .build());\n\n        var policyWithChannels = new AlertPolicy(\"policyWithChannels\", AlertPolicyArgs.builder()        \n            .incidentPreference(\"PER_CONDITION\")\n            .channelIds(            \n                slackChannel.applyValue(getAlertChannelResult -\u003e getAlertChannelResult.id()),\n                emailChannel.applyValue(getAlertChannelResult -\u003e getAlertChannelResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Provision the alert policy.\n  policyWithChannels:\n    type: newrelic:AlertPolicy\n    properties:\n      incidentPreference: PER_CONDITION\n      # NOTE: The `channel_ids` argument has been deprecated. Avoid usage.\n      #   # Add the referenced channels to the policy.\n      channelIds:\n        - ${slackChannel.id}\n        - ${emailChannel.id}\nvariables:\n  slackChannel:\n    fn::invoke:\n      Function: newrelic:getAlertChannel\n      Arguments:\n        name: slack-channel-notification\n  emailChannel:\n    fn::invoke:\n      Function: newrelic:getAlertChannel\n      Arguments:\n        name: test@example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nAlert policies can be imported using a composite ID of `\u003cid\u003e:\u003caccount_id\u003e`, where `account_id` is the account number scoped to the alert policy resource.\n\nExample import:\n\n```sh\n$ pulumi import newrelic:index/alertPolicy:AlertPolicy foo 23423556:4593020\n```\nPlease note that channel IDs (`channel_ids`) _cannot_ be imported due channels being a separate resource. However, to add channels to an imported alert policy, you can import the policy, add the `channel_ids` attribute with the associated channel IDs, then run `pulumi up`. This will result in the original alert policy being destroyed and a new alert policy being created along with the channels being added to the policy.\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "channelIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result in a new alert policy resource being created and the old one being destroyed. Also note that channel IDs _cannot_ be imported.\n",
                    "deprecationMessage": "The `channel_ids` attribute is deprecated and will be removed in the next major release of the provider."
                },
                "incidentPreference": {
                    "type": "string",
                    "description": "The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the policy.\n"
                }
            },
            "required": [
                "accountId",
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n",
                    "willReplaceOnChanges": true
                },
                "channelIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result in a new alert policy resource being created and the old one being destroyed. Also note that channel IDs _cannot_ be imported.\n",
                    "deprecationMessage": "The `channel_ids` attribute is deprecated and will be removed in the next major release of the provider.",
                    "willReplaceOnChanges": true
                },
                "incidentPreference": {
                    "type": "string",
                    "description": "The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the policy.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertPolicy resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n",
                        "willReplaceOnChanges": true
                    },
                    "channelIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result in a new alert policy resource being created and the old one being destroyed. Also note that channel IDs _cannot_ be imported.\n",
                        "deprecationMessage": "The `channel_ids` attribute is deprecated and will be removed in the next major release of the provider.",
                        "willReplaceOnChanges": true
                    },
                    "incidentPreference": {
                        "type": "string",
                        "description": "The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/alertPolicyChannel:AlertPolicyChannel": {
            "description": "Use this resource to map alert policies to alert channels in New Relic.\n\n\u003e **WARNING:** The `newrelic.AlertPolicyChannel` resource is deprecated and will be removed in the next major release. For managing channel resources in Workflows, use `newrelic.NotificationChannel`.\n\n## Example Usage\n\nThe example below will apply multiple alert channels to an existing New Relic alert policy.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst examplePolicy = newrelic.getAlertPolicy({\n    name: \"my-alert-policy\",\n});\n// Creates an email alert channel.\nconst emailChannel = new newrelic.AlertChannel(\"emailChannel\", {\n    type: \"email\",\n    config: {\n        recipients: \"foo@example.com\",\n        includeJsonAttachment: \"1\",\n    },\n});\n// Creates a Slack alert channel.\nconst slackChannel = new newrelic.AlertChannel(\"slackChannel\", {\n    type: \"slack\",\n    config: {\n        channel: \"#example-channel\",\n        url: \"http://example-org.slack.com\",\n    },\n});\n// Applies the created channels above to the alert policy\n// referenced at the top of the config.\nconst foo = new newrelic.AlertPolicyChannel(\"foo\", {\n    policyId: examplePolicy.then(examplePolicy =\u003e examplePolicy.id),\n    channelIds: [\n        emailChannel.id,\n        slackChannel.id,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nexample_policy = newrelic.get_alert_policy(name=\"my-alert-policy\")\n# Creates an email alert channel.\nemail_channel = newrelic.AlertChannel(\"emailChannel\",\n    type=\"email\",\n    config=newrelic.AlertChannelConfigArgs(\n        recipients=\"foo@example.com\",\n        include_json_attachment=\"1\",\n    ))\n# Creates a Slack alert channel.\nslack_channel = newrelic.AlertChannel(\"slackChannel\",\n    type=\"slack\",\n    config=newrelic.AlertChannelConfigArgs(\n        channel=\"#example-channel\",\n        url=\"http://example-org.slack.com\",\n    ))\n# Applies the created channels above to the alert policy\n# referenced at the top of the config.\nfoo = newrelic.AlertPolicyChannel(\"foo\",\n    policy_id=example_policy.id,\n    channel_ids=[\n        email_channel.id,\n        slack_channel.id,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var examplePolicy = NewRelic.GetAlertPolicy.Invoke(new()\n    {\n        Name = \"my-alert-policy\",\n    });\n\n    // Creates an email alert channel.\n    var emailChannel = new NewRelic.AlertChannel(\"emailChannel\", new()\n    {\n        Type = \"email\",\n        Config = new NewRelic.Inputs.AlertChannelConfigArgs\n        {\n            Recipients = \"foo@example.com\",\n            IncludeJsonAttachment = \"1\",\n        },\n    });\n\n    // Creates a Slack alert channel.\n    var slackChannel = new NewRelic.AlertChannel(\"slackChannel\", new()\n    {\n        Type = \"slack\",\n        Config = new NewRelic.Inputs.AlertChannelConfigArgs\n        {\n            Channel = \"#example-channel\",\n            Url = \"http://example-org.slack.com\",\n        },\n    });\n\n    // Applies the created channels above to the alert policy\n    // referenced at the top of the config.\n    var foo = new NewRelic.AlertPolicyChannel(\"foo\", new()\n    {\n        PolicyId = examplePolicy.Apply(getAlertPolicyResult =\u003e getAlertPolicyResult.Id),\n        ChannelIds = new[]\n        {\n            emailChannel.Id,\n            slackChannel.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texamplePolicy, err := newrelic.LookupAlertPolicy(ctx, \u0026newrelic.LookupAlertPolicyArgs{\n\t\t\tName: \"my-alert-policy\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Creates an email alert channel.\n\t\temailChannel, err := newrelic.NewAlertChannel(ctx, \"emailChannel\", \u0026newrelic.AlertChannelArgs{\n\t\t\tType: pulumi.String(\"email\"),\n\t\t\tConfig: \u0026newrelic.AlertChannelConfigArgs{\n\t\t\t\tRecipients:            pulumi.String(\"foo@example.com\"),\n\t\t\t\tIncludeJsonAttachment: pulumi.String(\"1\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Creates a Slack alert channel.\n\t\tslackChannel, err := newrelic.NewAlertChannel(ctx, \"slackChannel\", \u0026newrelic.AlertChannelArgs{\n\t\t\tType: pulumi.String(\"slack\"),\n\t\t\tConfig: \u0026newrelic.AlertChannelConfigArgs{\n\t\t\t\tChannel: pulumi.String(\"#example-channel\"),\n\t\t\t\tUrl:     pulumi.String(\"http://example-org.slack.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Applies the created channels above to the alert policy\n\t\t// referenced at the top of the config.\n\t\t_, err = newrelic.NewAlertPolicyChannel(ctx, \"foo\", \u0026newrelic.AlertPolicyChannelArgs{\n\t\t\tPolicyId: *pulumi.String(examplePolicy.Id),\n\t\t\tChannelIds: pulumi.IntArray{\n\t\t\t\temailChannel.ID(),\n\t\t\t\tslackChannel.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetAlertPolicyArgs;\nimport com.pulumi.newrelic.AlertChannel;\nimport com.pulumi.newrelic.AlertChannelArgs;\nimport com.pulumi.newrelic.inputs.AlertChannelConfigArgs;\nimport com.pulumi.newrelic.AlertPolicyChannel;\nimport com.pulumi.newrelic.AlertPolicyChannelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var examplePolicy = NewrelicFunctions.getAlertPolicy(GetAlertPolicyArgs.builder()\n            .name(\"my-alert-policy\")\n            .build());\n\n        var emailChannel = new AlertChannel(\"emailChannel\", AlertChannelArgs.builder()        \n            .type(\"email\")\n            .config(AlertChannelConfigArgs.builder()\n                .recipients(\"foo@example.com\")\n                .includeJsonAttachment(\"1\")\n                .build())\n            .build());\n\n        var slackChannel = new AlertChannel(\"slackChannel\", AlertChannelArgs.builder()        \n            .type(\"slack\")\n            .config(AlertChannelConfigArgs.builder()\n                .channel(\"#example-channel\")\n                .url(\"http://example-org.slack.com\")\n                .build())\n            .build());\n\n        var foo = new AlertPolicyChannel(\"foo\", AlertPolicyChannelArgs.builder()        \n            .policyId(examplePolicy.applyValue(getAlertPolicyResult -\u003e getAlertPolicyResult.id()))\n            .channelIds(            \n                emailChannel.id(),\n                slackChannel.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Creates an email alert channel.\n  emailChannel:\n    type: newrelic:AlertChannel\n    properties:\n      type: email\n      config:\n        recipients: foo@example.com\n        includeJsonAttachment: '1'\n  # Creates a Slack alert channel.\n  slackChannel:\n    type: newrelic:AlertChannel\n    properties:\n      type: slack\n      config:\n        channel: '#example-channel'\n        url: http://example-org.slack.com\n  # Applies the created channels above to the alert policy\n  # referenced at the top of the config.\n  foo:\n    type: newrelic:AlertPolicyChannel\n    properties:\n      policyId: ${examplePolicy.id}\n      channelIds:\n        - ${emailChannel.id}\n        - ${slackChannel.id}\nvariables:\n  examplePolicy:\n    fn::invoke:\n      Function: newrelic:getAlertPolicy\n      Arguments:\n        name: my-alert-policy\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nAlert policy channels can be imported using the following notation: `\u003cpolicyID\u003e:\u003cchannelID\u003e:\u003cchannelID\u003e`, e.g.\n\n```sh\n$ pulumi import newrelic:index/alertPolicyChannel:AlertPolicyChannel foo 123456:3462754:2938324\n```\nWhen importing `newrelic_alert_policy_channel` resource, the attribute `channel_ids`* will be set in your Terraform state. You can import multiple channels as long as those channel IDs are included as part of the import ID hash.\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the alert policy channel will be created. Defaults to the account associated with the API key used.\n"
                },
                "channelIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid drift in your state.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy.\n"
                }
            },
            "required": [
                "accountId",
                "channelIds",
                "policyId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the alert policy channel will be created. Defaults to the account associated with the API key used.\n"
                },
                "channelIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid drift in your state.\n",
                    "willReplaceOnChanges": true
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "channelIds",
                "policyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertPolicyChannel resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Determines the New Relic account where the alert policy channel will be created. Defaults to the account associated with the API key used.\n"
                    },
                    "channelIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid drift in your state.\n",
                        "willReplaceOnChanges": true
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the policy.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/apiAccessKey:ApiAccessKey": {
            "description": "Use this resource to programmatically create and manage the following types of keys:\n- [User API keys](https://docs.newrelic.com/docs/apis/get-started/intro-apis/types-new-relic-api-keys#user-api-key)\n- License (or ingest) keys, including:\n    - General [license key](https://docs.newrelic.com/docs/accounts/install-new-relic/account-setup/license-key) used for APM\n    - [Browser license key](https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/copy-browser-monitoring-license-key-app-id)\n\nPlease visit the New Relic article ['Use NerdGraph to manage license keys and User API keys'](https://docs.newrelic.com/docs/apis/nerdgraph/examples/use-nerdgraph-manage-license-keys-user-keys)\nfor more information.\n\n\u003e **IMPORTANT!**\nPlease be very careful when updating existing `newrelic.ApiAccessKey` resources as only `newrelic_api_access_key.name`\nand `newrelic_api_access_key.notes` are updatable. All other resource attributes will force a resource recreation which will\ninvalidate the previous API key(s).\n\n## Example Usage\n\n```hcl-terraform\nresource \"newrelic_api_access_key\" \"foobar\" {\n  account_id  = 1234567\n  key_type    = \"INGEST\"\n  ingest_type = \"LICENSE\"\n  name        = \"APM Ingest License Key\"\n  notes       = \"To be used with service X\"\n}\n```\n\n\n\u003e **WARNING:** Creating 'Ingest - License' and 'Ingest - Browser' keys using this resource is restricted to 'core' or 'full platform' New Relic user accounts. If you've signed up as a 'basic' user with New Relic, or have been added as a 'basic' user to your organization on New Relic, you would not be able to use your account to create 'Ingest' keys. If you see the message `\"You do not have permission to create this key\"` in the response of the API called by this resource, it could be owing to the aforementioned. For more insights into user account types on New Relic and associated privileges, please check out this [page](https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/user-type/#api-access).\n\n## Import\n\nExisting API access keys can be imported using a composite ID of `\u003capi_access_key_id\u003e:\u003ckey_type\u003e`. `\u003ckey_type\u003e`\nwill be either `INGEST` or `USER`.\n\nFor example:\n\n```sh\n$ pulumi import newrelic:index/apiAccessKey:ApiAccessKey foobar \"1234567:INGEST\"\n```\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID of the account you wish to create the API access key.\n"
                },
                "ingestType": {
                    "type": "string",
                    "description": "Required if `key_type = INGEST`. Valid options are `BROWSER` or `LICENSE`, case-sensitive.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The actual API key. This attribute is masked and not be visible in your terminal, CI, etc.\n",
                    "secret": true
                },
                "keyType": {
                    "type": "string",
                    "description": "What type of API key to create. Valid options are `INGEST` or `USER`, case-sensitive.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the key.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Any notes about this ingest key.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "Required if `key_type = USER`. The New Relic user ID yous wish to create the API access key for in an account.\n"
                }
            },
            "required": [
                "accountId",
                "ingestType",
                "key",
                "keyType",
                "name",
                "notes",
                "userId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID of the account you wish to create the API access key.\n",
                    "willReplaceOnChanges": true
                },
                "ingestType": {
                    "type": "string",
                    "description": "Required if `key_type = INGEST`. Valid options are `BROWSER` or `LICENSE`, case-sensitive.\n",
                    "willReplaceOnChanges": true
                },
                "keyType": {
                    "type": "string",
                    "description": "What type of API key to create. Valid options are `INGEST` or `USER`, case-sensitive.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the key.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Any notes about this ingest key.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "Required if `key_type = USER`. The New Relic user ID yous wish to create the API access key for in an account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountId",
                "keyType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiAccessKey resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID of the account you wish to create the API access key.\n",
                        "willReplaceOnChanges": true
                    },
                    "ingestType": {
                        "type": "string",
                        "description": "Required if `key_type = INGEST`. Valid options are `BROWSER` or `LICENSE`, case-sensitive.\n",
                        "willReplaceOnChanges": true
                    },
                    "key": {
                        "type": "string",
                        "description": "The actual API key. This attribute is masked and not be visible in your terminal, CI, etc.\n",
                        "secret": true
                    },
                    "keyType": {
                        "type": "string",
                        "description": "What type of API key to create. Valid options are `INGEST` or `USER`, case-sensitive.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the key.\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "Any notes about this ingest key.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "Required if `key_type = USER`. The New Relic user ID yous wish to create the API access key for in an account.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/browserApplication:BrowserApplication": {
            "description": "Use this resource to create, update, and delete a standalone New Relic browser application.\n\n## Example Usage\n\nBasic usage to create a standalone browser application.\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.BrowserApplication(\"foo\", {\n    cookiesEnabled: true,\n    distributedTracingEnabled: true,\n    loaderType: \"SPA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.BrowserApplication(\"foo\",\n    cookies_enabled=True,\n    distributed_tracing_enabled=True,\n    loader_type=\"SPA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.BrowserApplication(\"foo\", new()\n    {\n        CookiesEnabled = true,\n        DistributedTracingEnabled = true,\n        LoaderType = \"SPA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewBrowserApplication(ctx, \"foo\", \u0026newrelic.BrowserApplicationArgs{\n\t\t\tCookiesEnabled:            pulumi.Bool(true),\n\t\t\tDistributedTracingEnabled: pulumi.Bool(true),\n\t\t\tLoaderType:                pulumi.String(\"SPA\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.BrowserApplication;\nimport com.pulumi.newrelic.BrowserApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new BrowserApplication(\"foo\", BrowserApplicationArgs.builder()        \n            .cookiesEnabled(true)\n            .distributedTracingEnabled(true)\n            .loaderType(\"SPA\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:BrowserApplication\n    properties:\n      cookiesEnabled: true\n      distributedTracingEnabled: true\n      loaderType: SPA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nBrowser applications can be imported using the GUID of the browser application.\n\nbash\n\n```sh\n$ pulumi import newrelic:index/browserApplication:BrowserApplication foo \u003cGUID\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID of the account you wish to create the browser application. Defaults to the account ID set in your environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "cookiesEnabled": {
                    "type": "boolean",
                    "description": "Configure cookies. The default is enabled: true.\n"
                },
                "distributedTracingEnabled": {
                    "type": "boolean",
                    "description": "Configure distributed tracing in browser apps. The default is enabled: true.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The GUID of the browser application.\n"
                },
                "jsConfig": {
                    "type": "string",
                    "description": "JavaScript configuration of the browser application encoded into a string.\n"
                },
                "loaderType": {
                    "type": "string",
                    "description": "Determines which browser loader is configured. Valid values are `SPA`, `PRO`, and `LITE`. The default is `SPA`. See the [browser agent loader documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for a for information on the valid loader types.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the browser application.\n"
                }
            },
            "required": [
                "accountId",
                "guid",
                "jsConfig",
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID of the account you wish to create the browser application. Defaults to the account ID set in your environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "cookiesEnabled": {
                    "type": "boolean",
                    "description": "Configure cookies. The default is enabled: true.\n"
                },
                "distributedTracingEnabled": {
                    "type": "boolean",
                    "description": "Configure distributed tracing in browser apps. The default is enabled: true.\n"
                },
                "loaderType": {
                    "type": "string",
                    "description": "Determines which browser loader is configured. Valid values are `SPA`, `PRO`, and `LITE`. The default is `SPA`. See the [browser agent loader documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for a for information on the valid loader types.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the browser application.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BrowserApplication resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID of the account you wish to create the browser application. Defaults to the account ID set in your environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "cookiesEnabled": {
                        "type": "boolean",
                        "description": "Configure cookies. The default is enabled: true.\n"
                    },
                    "distributedTracingEnabled": {
                        "type": "boolean",
                        "description": "Configure distributed tracing in browser apps. The default is enabled: true.\n"
                    },
                    "guid": {
                        "type": "string",
                        "description": "The GUID of the browser application.\n"
                    },
                    "jsConfig": {
                        "type": "string",
                        "description": "JavaScript configuration of the browser application encoded into a string.\n"
                    },
                    "loaderType": {
                        "type": "string",
                        "description": "Determines which browser loader is configured. Valid values are `SPA`, `PRO`, and `LITE`. The default is `SPA`. See the [browser agent loader documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for a for information on the valid loader types.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the browser application.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/dataPartitionRule:DataPartitionRule": {
            "description": "Use this resource to create, update and delete New Relic Data partition rule.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.DataPartitionRule(\"foo\", {\n    description: \"description\",\n    enabled: true,\n    nrql: \"logtype='node'\",\n    retentionPolicy: \"STANDARD\",\n    targetDataPartition: \"Log_name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.DataPartitionRule(\"foo\",\n    description=\"description\",\n    enabled=True,\n    nrql=\"logtype='node'\",\n    retention_policy=\"STANDARD\",\n    target_data_partition=\"Log_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.DataPartitionRule(\"foo\", new()\n    {\n        Description = \"description\",\n        Enabled = true,\n        Nrql = \"logtype='node'\",\n        RetentionPolicy = \"STANDARD\",\n        TargetDataPartition = \"Log_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewDataPartitionRule(ctx, \"foo\", \u0026newrelic.DataPartitionRuleArgs{\n\t\t\tDescription:         pulumi.String(\"description\"),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tNrql:                pulumi.String(\"logtype='node'\"),\n\t\t\tRetentionPolicy:     pulumi.String(\"STANDARD\"),\n\t\t\tTargetDataPartition: pulumi.String(\"Log_name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.DataPartitionRule;\nimport com.pulumi.newrelic.DataPartitionRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new DataPartitionRule(\"foo\", DataPartitionRuleArgs.builder()        \n            .description(\"description\")\n            .enabled(true)\n            .nrql(\"logtype='node'\")\n            .retentionPolicy(\"STANDARD\")\n            .targetDataPartition(\"Log_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:DataPartitionRule\n    properties:\n      description: description\n      enabled: true\n      nrql: logtype='node'\n      retentionPolicy: STANDARD\n      targetDataPartition: Log_name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Additional Information\n\nMore details about the data partition can be found [here](https://docs.newrelic.com/docs/logs/ui-data/data-partitions/)\n\n## Import\n\nNew Relic data partition rule can be imported using the rule ID, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:index/dataPartitionRule:DataPartitionRule foo \u003cid\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account id associated with the data partition rule.\n"
                },
                "deleted": {
                    "type": "boolean",
                    "description": "Whether or not this data partition rule is deleted. Deleting a data partition rule does not delete the already persisted data. This data will be retained for a given period of time specified in the retention policy field.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the data partition rule.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not this data partition rule is enabled.\n"
                },
                "nrql": {
                    "type": "string",
                    "description": "The NRQL to match events for this data partition rule. Logs matching this criteria will be routed to the specified data partition.\n"
                },
                "retentionPolicy": {
                    "type": "string",
                    "description": "The retention policy of the data partition data. Valid values are `SECONDARY` and `STANDARD`.\n"
                },
                "targetDataPartition": {
                    "type": "string",
                    "description": "The name of the data partition where logs will be allocated once the rule is enabled.\n"
                }
            },
            "required": [
                "accountId",
                "deleted",
                "enabled",
                "nrql",
                "retentionPolicy",
                "targetDataPartition"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account id associated with the data partition rule.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the data partition rule.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not this data partition rule is enabled.\n"
                },
                "nrql": {
                    "type": "string",
                    "description": "The NRQL to match events for this data partition rule. Logs matching this criteria will be routed to the specified data partition.\n"
                },
                "retentionPolicy": {
                    "type": "string",
                    "description": "The retention policy of the data partition data. Valid values are `SECONDARY` and `STANDARD`.\n",
                    "willReplaceOnChanges": true
                },
                "targetDataPartition": {
                    "type": "string",
                    "description": "The name of the data partition where logs will be allocated once the rule is enabled.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled",
                "nrql",
                "retentionPolicy",
                "targetDataPartition"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DataPartitionRule resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account id associated with the data partition rule.\n"
                    },
                    "deleted": {
                        "type": "boolean",
                        "description": "Whether or not this data partition rule is deleted. Deleting a data partition rule does not delete the already persisted data. This data will be retained for a given period of time specified in the retention policy field.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the data partition rule.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether or not this data partition rule is enabled.\n"
                    },
                    "nrql": {
                        "type": "string",
                        "description": "The NRQL to match events for this data partition rule. Logs matching this criteria will be routed to the specified data partition.\n"
                    },
                    "retentionPolicy": {
                        "type": "string",
                        "description": "The retention policy of the data partition data. Valid values are `SECONDARY` and `STANDARD`.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetDataPartition": {
                        "type": "string",
                        "description": "The name of the data partition where logs will be allocated once the rule is enabled.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/entityTags:EntityTags": {
            "description": "Use this resource to create, update, and delete tags for a New Relic One entity.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooEntity = newrelic.getEntity({\n    name: \"Example application\",\n    type: \"APPLICATION\",\n    domain: \"APM\",\n});\nconst fooEntityTags = new newrelic.EntityTags(\"fooEntityTags\", {\n    guid: fooEntity.then(fooEntity =\u003e fooEntity.guid),\n    tags: [\n        {\n            key: \"my-key\",\n            values: [\n                \"my-value\",\n                \"my-other-value\",\n            ],\n        },\n        {\n            key: \"my-key-2\",\n            values: [\"my-value-2\"],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_entity = newrelic.get_entity(name=\"Example application\",\n    type=\"APPLICATION\",\n    domain=\"APM\")\nfoo_entity_tags = newrelic.EntityTags(\"fooEntityTags\",\n    guid=foo_entity.guid,\n    tags=[\n        newrelic.EntityTagsTagArgs(\n            key=\"my-key\",\n            values=[\n                \"my-value\",\n                \"my-other-value\",\n            ],\n        ),\n        newrelic.EntityTagsTagArgs(\n            key=\"my-key-2\",\n            values=[\"my-value-2\"],\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooEntity = NewRelic.GetEntity.Invoke(new()\n    {\n        Name = \"Example application\",\n        Type = \"APPLICATION\",\n        Domain = \"APM\",\n    });\n\n    var fooEntityTags = new NewRelic.EntityTags(\"fooEntityTags\", new()\n    {\n        Guid = fooEntity.Apply(getEntityResult =\u003e getEntityResult.Guid),\n        Tags = new[]\n        {\n            new NewRelic.Inputs.EntityTagsTagArgs\n            {\n                Key = \"my-key\",\n                Values = new[]\n                {\n                    \"my-value\",\n                    \"my-other-value\",\n                },\n            },\n            new NewRelic.Inputs.EntityTagsTagArgs\n            {\n                Key = \"my-key-2\",\n                Values = new[]\n                {\n                    \"my-value-2\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooEntity, err := newrelic.GetEntity(ctx, \u0026newrelic.GetEntityArgs{\n\t\t\tName:   \"Example application\",\n\t\t\tType:   pulumi.StringRef(\"APPLICATION\"),\n\t\t\tDomain: pulumi.StringRef(\"APM\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewEntityTags(ctx, \"fooEntityTags\", \u0026newrelic.EntityTagsArgs{\n\t\t\tGuid: *pulumi.String(fooEntity.Guid),\n\t\t\tTags: newrelic.EntityTagsTagArray{\n\t\t\t\t\u0026newrelic.EntityTagsTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"my-key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"my-value\"),\n\t\t\t\t\t\tpulumi.String(\"my-other-value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.EntityTagsTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"my-key-2\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"my-value-2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetEntityArgs;\nimport com.pulumi.newrelic.EntityTags;\nimport com.pulumi.newrelic.EntityTagsArgs;\nimport com.pulumi.newrelic.inputs.EntityTagsTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooEntity = NewrelicFunctions.getEntity(GetEntityArgs.builder()\n            .name(\"Example application\")\n            .type(\"APPLICATION\")\n            .domain(\"APM\")\n            .build());\n\n        var fooEntityTags = new EntityTags(\"fooEntityTags\", EntityTagsArgs.builder()        \n            .guid(fooEntity.applyValue(getEntityResult -\u003e getEntityResult.guid()))\n            .tags(            \n                EntityTagsTagArgs.builder()\n                    .key(\"my-key\")\n                    .values(                    \n                        \"my-value\",\n                        \"my-other-value\")\n                    .build(),\n                EntityTagsTagArgs.builder()\n                    .key(\"my-key-2\")\n                    .values(\"my-value-2\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooEntityTags:\n    type: newrelic:EntityTags\n    properties:\n      guid: ${fooEntity.guid}\n      tags:\n        - key: my-key\n          values:\n            - my-value\n            - my-other-value\n        - key: my-key-2\n          values:\n            - my-value-2\nvariables:\n  fooEntity:\n    fn::invoke:\n      Function: newrelic:getEntity\n      Arguments:\n        name: Example application\n        type: APPLICATION\n        domain: APM\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNew Relic One entity tags can be imported using a concatenated string of the format\n\n `\u003cguid\u003e`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:index/entityTags:EntityTags foo MjUyMDUyOHxBUE18QVBRTElDQVRJT058MjE1MDM3Nzk1\n```\n\n",
            "properties": {
                "guid": {
                    "type": "string",
                    "description": "The guid of the entity to tag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/EntityTagsTag:EntityTagsTag"
                    },
                    "description": "A nested block that describes an entity tag. See Nested tag blocks below for details.\n"
                }
            },
            "required": [
                "guid",
                "tags"
            ],
            "inputProperties": {
                "guid": {
                    "type": "string",
                    "description": "The guid of the entity to tag.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/EntityTagsTag:EntityTagsTag"
                    },
                    "description": "A nested block that describes an entity tag. See Nested tag blocks below for details.\n"
                }
            },
            "requiredInputs": [
                "guid",
                "tags"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EntityTags resources.\n",
                "properties": {
                    "guid": {
                        "type": "string",
                        "description": "The guid of the entity to tag.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/EntityTagsTag:EntityTagsTag"
                        },
                        "description": "A nested block that describes an entity tag. See Nested tag blocks below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/eventsToMetricsRule:EventsToMetricsRule": {
            "description": "Use this resource to create, update, and delete New Relic Events to Metrics rules.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.EventsToMetricsRule(\"foo\", {\n    accountId: 12345,\n    description: \"Example description\",\n    nrql: \"SELECT uniqueCount(account_id) AS ``Transaction.account_id`` FROM Transaction FACET appName, name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.EventsToMetricsRule(\"foo\",\n    account_id=12345,\n    description=\"Example description\",\n    nrql=\"SELECT uniqueCount(account_id) AS ``Transaction.account_id`` FROM Transaction FACET appName, name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.EventsToMetricsRule(\"foo\", new()\n    {\n        AccountId = 12345,\n        Description = \"Example description\",\n        Nrql = \"SELECT uniqueCount(account_id) AS ``Transaction.account_id`` FROM Transaction FACET appName, name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewEventsToMetricsRule(ctx, \"foo\", \u0026newrelic.EventsToMetricsRuleArgs{\n\t\t\tAccountId:   pulumi.Int(12345),\n\t\t\tDescription: pulumi.String(\"Example description\"),\n\t\t\tNrql:        pulumi.String(\"SELECT uniqueCount(account_id) AS ``Transaction.account_id`` FROM Transaction FACET appName, name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.EventsToMetricsRule;\nimport com.pulumi.newrelic.EventsToMetricsRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new EventsToMetricsRule(\"foo\", EventsToMetricsRuleArgs.builder()        \n            .accountId(12345)\n            .description(\"Example description\")\n            .nrql(\"SELECT uniqueCount(account_id) AS ``Transaction.account_id`` FROM Transaction FACET appName, name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:EventsToMetricsRule\n    properties:\n      accountId: 12345\n      description: Example description\n      nrql: SELECT uniqueCount(account_id) AS ``Transaction.account_id`` FROM Transaction FACET appName, name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNew Relic Events to Metrics rules can be imported using a concatenated string of the format\n\n `\u003caccount_id\u003e:\u003crule_id\u003e`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:index/eventsToMetricsRule:EventsToMetricsRule foo 12345:34567\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Account with the event and where the metrics will be put.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Provides additional information about the rule.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "True means this rule is enabled. False means the rule is currently not creating metrics.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule. This must be unique within an account.\n"
                },
                "nrql": {
                    "type": "string",
                    "description": "Explains how to create metrics from events.\n"
                },
                "ruleId": {
                    "type": "string",
                    "description": "The id, uniquely identifying the rule.\n"
                }
            },
            "required": [
                "accountId",
                "name",
                "nrql",
                "ruleId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Account with the event and where the metrics will be put.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Provides additional information about the rule.\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "True means this rule is enabled. False means the rule is currently not creating metrics.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule. This must be unique within an account.\n",
                    "willReplaceOnChanges": true
                },
                "nrql": {
                    "type": "string",
                    "description": "Explains how to create metrics from events.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "nrql"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventsToMetricsRule resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Account with the event and where the metrics will be put.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Provides additional information about the rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "True means this rule is enabled. False means the rule is currently not creating metrics.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the rule. This must be unique within an account.\n",
                        "willReplaceOnChanges": true
                    },
                    "nrql": {
                        "type": "string",
                        "description": "Explains how to create metrics from events.\n",
                        "willReplaceOnChanges": true
                    },
                    "ruleId": {
                        "type": "string",
                        "description": "The id, uniquely identifying the rule.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/group:Group": {
            "description": "The `newrelic.Group` resource facilitates creating, updating, and deleting groups in New Relic, while also enabling the addition and removal of users from these groups.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooAuthenticationDomain = newrelic.getAuthenticationDomain({\n    name: \"Test Authentication Domain\",\n});\nconst fooGroup = new newrelic.Group(\"fooGroup\", {\n    authenticationDomainId: fooAuthenticationDomain.then(fooAuthenticationDomain =\u003e fooAuthenticationDomain.id),\n    userIds: [\n        \"0001112222\",\n        \"2221110000\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_authentication_domain = newrelic.get_authentication_domain(name=\"Test Authentication Domain\")\nfoo_group = newrelic.Group(\"fooGroup\",\n    authentication_domain_id=foo_authentication_domain.id,\n    user_ids=[\n        \"0001112222\",\n        \"2221110000\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooAuthenticationDomain = NewRelic.GetAuthenticationDomain.Invoke(new()\n    {\n        Name = \"Test Authentication Domain\",\n    });\n\n    var fooGroup = new NewRelic.Group(\"fooGroup\", new()\n    {\n        AuthenticationDomainId = fooAuthenticationDomain.Apply(getAuthenticationDomainResult =\u003e getAuthenticationDomainResult.Id),\n        UserIds = new[]\n        {\n            \"0001112222\",\n            \"2221110000\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooAuthenticationDomain, err := newrelic.GetAuthenticationDomain(ctx, \u0026newrelic.GetAuthenticationDomainArgs{\n\t\t\tName: \"Test Authentication Domain\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewGroup(ctx, \"fooGroup\", \u0026newrelic.GroupArgs{\n\t\t\tAuthenticationDomainId: *pulumi.String(fooAuthenticationDomain.Id),\n\t\t\tUserIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"0001112222\"),\n\t\t\t\tpulumi.String(\"2221110000\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetAuthenticationDomainArgs;\nimport com.pulumi.newrelic.Group;\nimport com.pulumi.newrelic.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooAuthenticationDomain = NewrelicFunctions.getAuthenticationDomain(GetAuthenticationDomainArgs.builder()\n            .name(\"Test Authentication Domain\")\n            .build());\n\n        var fooGroup = new Group(\"fooGroup\", GroupArgs.builder()        \n            .authenticationDomainId(fooAuthenticationDomain.applyValue(getAuthenticationDomainResult -\u003e getAuthenticationDomainResult.id()))\n            .userIds(            \n                \"0001112222\",\n                \"2221110000\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooGroup:\n    type: newrelic:Group\n    properties:\n      authenticationDomainId: ${fooAuthenticationDomain.id}\n      userIds:\n        - '0001112222'\n        - '2221110000'\nvariables:\n  fooAuthenticationDomain:\n    fn::invoke:\n      Function: newrelic:getAuthenticationDomain\n      Arguments:\n        name: Test Authentication Domain\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Additional Examples\n\n### Addition of New Users to a New Group\n\nThe following example illustrates the creation of a group using the `newrelic.Group` resource, to which users created using the `newrelic.User` resource are added.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooAuthenticationDomain = newrelic.getAuthenticationDomain({\n    name: \"Test Authentication Domain\",\n});\nconst fooUser = new newrelic.User(\"fooUser\", {\n    emailId: \"test_user_one@test.com\",\n    authenticationDomainId: fooAuthenticationDomain.then(fooAuthenticationDomain =\u003e fooAuthenticationDomain.id),\n    userType: \"CORE_USER_TIER\",\n});\nconst bar = new newrelic.User(\"bar\", {\n    emailId: \"test_user_two@test.com\",\n    authenticationDomainId: fooAuthenticationDomain.then(fooAuthenticationDomain =\u003e fooAuthenticationDomain.id),\n    userType: \"BASIC_USER_TIER\",\n});\nconst fooGroup = new newrelic.Group(\"fooGroup\", {\n    authenticationDomainId: fooAuthenticationDomain.then(fooAuthenticationDomain =\u003e fooAuthenticationDomain.id),\n    userIds: [\n        fooUser.id,\n        bar.id,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_authentication_domain = newrelic.get_authentication_domain(name=\"Test Authentication Domain\")\nfoo_user = newrelic.User(\"fooUser\",\n    email_id=\"test_user_one@test.com\",\n    authentication_domain_id=foo_authentication_domain.id,\n    user_type=\"CORE_USER_TIER\")\nbar = newrelic.User(\"bar\",\n    email_id=\"test_user_two@test.com\",\n    authentication_domain_id=foo_authentication_domain.id,\n    user_type=\"BASIC_USER_TIER\")\nfoo_group = newrelic.Group(\"fooGroup\",\n    authentication_domain_id=foo_authentication_domain.id,\n    user_ids=[\n        foo_user.id,\n        bar.id,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooAuthenticationDomain = NewRelic.GetAuthenticationDomain.Invoke(new()\n    {\n        Name = \"Test Authentication Domain\",\n    });\n\n    var fooUser = new NewRelic.User(\"fooUser\", new()\n    {\n        EmailId = \"test_user_one@test.com\",\n        AuthenticationDomainId = fooAuthenticationDomain.Apply(getAuthenticationDomainResult =\u003e getAuthenticationDomainResult.Id),\n        UserType = \"CORE_USER_TIER\",\n    });\n\n    var bar = new NewRelic.User(\"bar\", new()\n    {\n        EmailId = \"test_user_two@test.com\",\n        AuthenticationDomainId = fooAuthenticationDomain.Apply(getAuthenticationDomainResult =\u003e getAuthenticationDomainResult.Id),\n        UserType = \"BASIC_USER_TIER\",\n    });\n\n    var fooGroup = new NewRelic.Group(\"fooGroup\", new()\n    {\n        AuthenticationDomainId = fooAuthenticationDomain.Apply(getAuthenticationDomainResult =\u003e getAuthenticationDomainResult.Id),\n        UserIds = new[]\n        {\n            fooUser.Id,\n            bar.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooAuthenticationDomain, err := newrelic.GetAuthenticationDomain(ctx, \u0026newrelic.GetAuthenticationDomainArgs{\n\t\t\tName: \"Test Authentication Domain\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooUser, err := newrelic.NewUser(ctx, \"fooUser\", \u0026newrelic.UserArgs{\n\t\t\tEmailId:                pulumi.String(\"test_user_one@test.com\"),\n\t\t\tAuthenticationDomainId: *pulumi.String(fooAuthenticationDomain.Id),\n\t\t\tUserType:               pulumi.String(\"CORE_USER_TIER\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbar, err := newrelic.NewUser(ctx, \"bar\", \u0026newrelic.UserArgs{\n\t\t\tEmailId:                pulumi.String(\"test_user_two@test.com\"),\n\t\t\tAuthenticationDomainId: *pulumi.String(fooAuthenticationDomain.Id),\n\t\t\tUserType:               pulumi.String(\"BASIC_USER_TIER\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewGroup(ctx, \"fooGroup\", \u0026newrelic.GroupArgs{\n\t\t\tAuthenticationDomainId: *pulumi.String(fooAuthenticationDomain.Id),\n\t\t\tUserIds: pulumi.StringArray{\n\t\t\t\tfooUser.ID(),\n\t\t\t\tbar.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetAuthenticationDomainArgs;\nimport com.pulumi.newrelic.User;\nimport com.pulumi.newrelic.UserArgs;\nimport com.pulumi.newrelic.Group;\nimport com.pulumi.newrelic.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooAuthenticationDomain = NewrelicFunctions.getAuthenticationDomain(GetAuthenticationDomainArgs.builder()\n            .name(\"Test Authentication Domain\")\n            .build());\n\n        var fooUser = new User(\"fooUser\", UserArgs.builder()        \n            .emailId(\"test_user_one@test.com\")\n            .authenticationDomainId(fooAuthenticationDomain.applyValue(getAuthenticationDomainResult -\u003e getAuthenticationDomainResult.id()))\n            .userType(\"CORE_USER_TIER\")\n            .build());\n\n        var bar = new User(\"bar\", UserArgs.builder()        \n            .emailId(\"test_user_two@test.com\")\n            .authenticationDomainId(fooAuthenticationDomain.applyValue(getAuthenticationDomainResult -\u003e getAuthenticationDomainResult.id()))\n            .userType(\"BASIC_USER_TIER\")\n            .build());\n\n        var fooGroup = new Group(\"fooGroup\", GroupArgs.builder()        \n            .authenticationDomainId(fooAuthenticationDomain.applyValue(getAuthenticationDomainResult -\u003e getAuthenticationDomainResult.id()))\n            .userIds(            \n                fooUser.id(),\n                bar.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooUser:\n    type: newrelic:User\n    properties:\n      emailId: test_user_one@test.com\n      authenticationDomainId: ${fooAuthenticationDomain.id}\n      userType: CORE_USER_TIER\n  bar:\n    type: newrelic:User\n    properties:\n      emailId: test_user_two@test.com\n      authenticationDomainId: ${fooAuthenticationDomain.id}\n      userType: BASIC_USER_TIER\n  fooGroup:\n    type: newrelic:Group\n    properties:\n      authenticationDomainId: ${fooAuthenticationDomain.id}\n      userIds:\n        - ${fooUser.id}\n        - ${bar.id}\nvariables:\n  fooAuthenticationDomain:\n    fn::invoke:\n      Function: newrelic:getAuthenticationDomain\n      Arguments:\n        name: Test Authentication Domain\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Addition of Existing Users to a New Group\n\nThe following example demonstrates the usage of the `newrelic.Group` resource to create a group, wherein the `newrelic.User` data source is employed to associate existing users with the newly formed group.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooAuthenticationDomain = newrelic.getAuthenticationDomain({\n    name: \"Test Authentication Domain\",\n});\nconst fooUser = fooAuthenticationDomain.then(fooAuthenticationDomain =\u003e newrelic.getUser({\n    authenticationDomainId: fooAuthenticationDomain.id,\n    emailId: \"test_user_one@test.com\",\n}));\nconst bar = fooAuthenticationDomain.then(fooAuthenticationDomain =\u003e newrelic.getUser({\n    authenticationDomainId: fooAuthenticationDomain.id,\n    name: \"Test User Two\",\n}));\nconst fooGroup = new newrelic.Group(\"fooGroup\", {\n    authenticationDomainId: fooAuthenticationDomain.then(fooAuthenticationDomain =\u003e fooAuthenticationDomain.id),\n    userIds: [\n        fooUser.then(fooUser =\u003e fooUser.id),\n        bar.then(bar =\u003e bar.id),\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_authentication_domain = newrelic.get_authentication_domain(name=\"Test Authentication Domain\")\nfoo_user = newrelic.get_user(authentication_domain_id=foo_authentication_domain.id,\n    email_id=\"test_user_one@test.com\")\nbar = newrelic.get_user(authentication_domain_id=foo_authentication_domain.id,\n    name=\"Test User Two\")\nfoo_group = newrelic.Group(\"fooGroup\",\n    authentication_domain_id=foo_authentication_domain.id,\n    user_ids=[\n        foo_user.id,\n        bar.id,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooAuthenticationDomain = NewRelic.GetAuthenticationDomain.Invoke(new()\n    {\n        Name = \"Test Authentication Domain\",\n    });\n\n    var fooUser = NewRelic.GetUser.Invoke(new()\n    {\n        AuthenticationDomainId = fooAuthenticationDomain.Apply(getAuthenticationDomainResult =\u003e getAuthenticationDomainResult.Id),\n        EmailId = \"test_user_one@test.com\",\n    });\n\n    var bar = NewRelic.GetUser.Invoke(new()\n    {\n        AuthenticationDomainId = fooAuthenticationDomain.Apply(getAuthenticationDomainResult =\u003e getAuthenticationDomainResult.Id),\n        Name = \"Test User Two\",\n    });\n\n    var fooGroup = new NewRelic.Group(\"fooGroup\", new()\n    {\n        AuthenticationDomainId = fooAuthenticationDomain.Apply(getAuthenticationDomainResult =\u003e getAuthenticationDomainResult.Id),\n        UserIds = new[]\n        {\n            fooUser.Apply(getUserResult =\u003e getUserResult.Id),\n            bar.Apply(getUserResult =\u003e getUserResult.Id),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooAuthenticationDomain, err := newrelic.GetAuthenticationDomain(ctx, \u0026newrelic.GetAuthenticationDomainArgs{\n\t\t\tName: \"Test Authentication Domain\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooUser, err := newrelic.LookupUser(ctx, \u0026newrelic.LookupUserArgs{\n\t\t\tAuthenticationDomainId: fooAuthenticationDomain.Id,\n\t\t\tEmailId:                pulumi.StringRef(\"test_user_one@test.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbar, err := newrelic.LookupUser(ctx, \u0026newrelic.LookupUserArgs{\n\t\t\tAuthenticationDomainId: fooAuthenticationDomain.Id,\n\t\t\tName:                   pulumi.StringRef(\"Test User Two\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewGroup(ctx, \"fooGroup\", \u0026newrelic.GroupArgs{\n\t\t\tAuthenticationDomainId: *pulumi.String(fooAuthenticationDomain.Id),\n\t\t\tUserIds: pulumi.StringArray{\n\t\t\t\t*pulumi.String(fooUser.Id),\n\t\t\t\t*pulumi.String(bar.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetAuthenticationDomainArgs;\nimport com.pulumi.newrelic.inputs.GetUserArgs;\nimport com.pulumi.newrelic.Group;\nimport com.pulumi.newrelic.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooAuthenticationDomain = NewrelicFunctions.getAuthenticationDomain(GetAuthenticationDomainArgs.builder()\n            .name(\"Test Authentication Domain\")\n            .build());\n\n        final var fooUser = NewrelicFunctions.getUser(GetUserArgs.builder()\n            .authenticationDomainId(fooAuthenticationDomain.applyValue(getAuthenticationDomainResult -\u003e getAuthenticationDomainResult.id()))\n            .emailId(\"test_user_one@test.com\")\n            .build());\n\n        final var bar = NewrelicFunctions.getUser(GetUserArgs.builder()\n            .authenticationDomainId(fooAuthenticationDomain.applyValue(getAuthenticationDomainResult -\u003e getAuthenticationDomainResult.id()))\n            .name(\"Test User Two\")\n            .build());\n\n        var fooGroup = new Group(\"fooGroup\", GroupArgs.builder()        \n            .authenticationDomainId(fooAuthenticationDomain.applyValue(getAuthenticationDomainResult -\u003e getAuthenticationDomainResult.id()))\n            .userIds(            \n                fooUser.applyValue(getUserResult -\u003e getUserResult.id()),\n                bar.applyValue(getUserResult -\u003e getUserResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooGroup:\n    type: newrelic:Group\n    properties:\n      authenticationDomainId: ${fooAuthenticationDomain.id}\n      userIds:\n        - ${fooUser.id}\n        - ${bar.id}\nvariables:\n  fooAuthenticationDomain:\n    fn::invoke:\n      Function: newrelic:getAuthenticationDomain\n      Arguments:\n        name: Test Authentication Domain\n  fooUser:\n    fn::invoke:\n      Function: newrelic:getUser\n      Arguments:\n        authenticationDomainId: ${fooAuthenticationDomain.id}\n        emailId: test_user_one@test.com\n  bar:\n    fn::invoke:\n      Function: newrelic:getUser\n      Arguments:\n        authenticationDomainId: ${fooAuthenticationDomain.id}\n        name: Test User Two\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **NOTE** Please note that the addition of users to groups is only possible when both the group and the users to be added to it belong to the _same authentication domain_. If the group being created and the users being added to it belong to different authentication domains, an error indicating `user not found` or an equivalent error will be thrown.\n\n## Import\n\nA group can be imported using its ID. Example:\n\n```sh\n$ pulumi import newrelic:index/group:Group foo \u003cgroup_id\u003e\n```\n\n",
            "properties": {
                "authenticationDomainId": {
                    "type": "string",
                    "description": "The ID of the authentication domain to which the group to be created would belong.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group to be created.\n"
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IDs of users to be included in the group to be created.\n\n\u003e **NOTE** The ID of an authentication domain can be retrieved using its name, via the data source `newrelic.getAuthenticationDomain`, as shown in the example above. Head over to the documentation of this data source for more details and examples.\n\n\u003e **WARNING:** Changing the `authentication_domain_id` of a `newrelic.Group` resource that has already been applied would result in a **replacement** of the resource – destruction of the existing resource, followed by the addition of a new resource with the specified configuration. This is due to the fact that updating the `authentication_domain_id` of an existing group is not supported.\n"
                }
            },
            "required": [
                "authenticationDomainId",
                "name"
            ],
            "inputProperties": {
                "authenticationDomainId": {
                    "type": "string",
                    "description": "The ID of the authentication domain to which the group to be created would belong.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group to be created.\n"
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IDs of users to be included in the group to be created.\n\n\u003e **NOTE** The ID of an authentication domain can be retrieved using its name, via the data source `newrelic.getAuthenticationDomain`, as shown in the example above. Head over to the documentation of this data source for more details and examples.\n\n\u003e **WARNING:** Changing the `authentication_domain_id` of a `newrelic.Group` resource that has already been applied would result in a **replacement** of the resource – destruction of the existing resource, followed by the addition of a new resource with the specified configuration. This is due to the fact that updating the `authentication_domain_id` of an existing group is not supported.\n"
                }
            },
            "requiredInputs": [
                "authenticationDomainId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "authenticationDomainId": {
                        "type": "string",
                        "description": "The ID of the authentication domain to which the group to be created would belong.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the group to be created.\n"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IDs of users to be included in the group to be created.\n\n\u003e **NOTE** The ID of an authentication domain can be retrieved using its name, via the data source `newrelic.getAuthenticationDomain`, as shown in the example above. Head over to the documentation of this data source for more details and examples.\n\n\u003e **WARNING:** Changing the `authentication_domain_id` of a `newrelic.Group` resource that has already been applied would result in a **replacement** of the resource – destruction of the existing resource, followed by the addition of a new resource with the specified configuration. This is due to the fact that updating the `authentication_domain_id` of an existing group is not supported.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/infraAlertCondition:InfraAlertCondition": {
            "description": "Use this resource to create and manage Infrastructure alert conditions in New Relic.\n\n\u003e **WARNING:** The `newrelic.InfraAlertCondition` resource is deprecated and will be removed in the next major release. The resource newrelic.NrqlAlertCondition would be a preferred alternative to configure alert conditions - in most cases, feature parity can be achieved with a NRQL query.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertPolicy(\"foo\", {});\nconst highDiskUsage = new newrelic.InfraAlertCondition(\"highDiskUsage\", {\n    policyId: foo.id,\n    description: \"Warning if disk usage goes above 80% and critical alert if goes above 90%\",\n    type: \"infra_metric\",\n    event: \"StorageSample\",\n    select: \"diskUsedPercent\",\n    comparison: \"above\",\n    where: \"(hostname LIKE '%frontend%')\",\n    critical: {\n        duration: 25,\n        value: 90,\n        timeFunction: \"all\",\n    },\n    warning: {\n        duration: 10,\n        value: 80,\n        timeFunction: \"all\",\n    },\n});\nconst highDbConnCount = new newrelic.InfraAlertCondition(\"highDbConnCount\", {\n    policyId: foo.id,\n    description: \"Critical alert when the number of database connections goes above 90\",\n    type: \"infra_metric\",\n    event: \"DatastoreSample\",\n    select: \"provider.databaseConnections.Average\",\n    comparison: \"above\",\n    where: \"(hostname LIKE '%db%')\",\n    integrationProvider: \"RdsDbInstance\",\n    critical: {\n        duration: 25,\n        value: 90,\n        timeFunction: \"all\",\n    },\n});\nconst processNotRunning = new newrelic.InfraAlertCondition(\"processNotRunning\", {\n    policyId: foo.id,\n    description: \"Critical alert when ruby isn't running\",\n    type: \"infra_process_running\",\n    comparison: \"equal\",\n    where: \"hostname = 'web01'\",\n    processWhere: \"commandName = '/usr/bin/ruby'\",\n    critical: {\n        duration: 5,\n        value: 0,\n    },\n});\nconst hostNotReporting = new newrelic.InfraAlertCondition(\"hostNotReporting\", {\n    policyId: foo.id,\n    description: \"Critical alert when the host is not reporting\",\n    type: \"infra_host_not_reporting\",\n    where: \"(hostname LIKE '%frontend%')\",\n    critical: {\n        duration: 5,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.AlertPolicy(\"foo\")\nhigh_disk_usage = newrelic.InfraAlertCondition(\"highDiskUsage\",\n    policy_id=foo.id,\n    description=\"Warning if disk usage goes above 80% and critical alert if goes above 90%\",\n    type=\"infra_metric\",\n    event=\"StorageSample\",\n    select=\"diskUsedPercent\",\n    comparison=\"above\",\n    where=\"(hostname LIKE '%frontend%')\",\n    critical=newrelic.InfraAlertConditionCriticalArgs(\n        duration=25,\n        value=90,\n        time_function=\"all\",\n    ),\n    warning=newrelic.InfraAlertConditionWarningArgs(\n        duration=10,\n        value=80,\n        time_function=\"all\",\n    ))\nhigh_db_conn_count = newrelic.InfraAlertCondition(\"highDbConnCount\",\n    policy_id=foo.id,\n    description=\"Critical alert when the number of database connections goes above 90\",\n    type=\"infra_metric\",\n    event=\"DatastoreSample\",\n    select=\"provider.databaseConnections.Average\",\n    comparison=\"above\",\n    where=\"(hostname LIKE '%db%')\",\n    integration_provider=\"RdsDbInstance\",\n    critical=newrelic.InfraAlertConditionCriticalArgs(\n        duration=25,\n        value=90,\n        time_function=\"all\",\n    ))\nprocess_not_running = newrelic.InfraAlertCondition(\"processNotRunning\",\n    policy_id=foo.id,\n    description=\"Critical alert when ruby isn't running\",\n    type=\"infra_process_running\",\n    comparison=\"equal\",\n    where=\"hostname = 'web01'\",\n    process_where=\"commandName = '/usr/bin/ruby'\",\n    critical=newrelic.InfraAlertConditionCriticalArgs(\n        duration=5,\n        value=0,\n    ))\nhost_not_reporting = newrelic.InfraAlertCondition(\"hostNotReporting\",\n    policy_id=foo.id,\n    description=\"Critical alert when the host is not reporting\",\n    type=\"infra_host_not_reporting\",\n    where=\"(hostname LIKE '%frontend%')\",\n    critical=newrelic.InfraAlertConditionCriticalArgs(\n        duration=5,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.AlertPolicy(\"foo\");\n\n    var highDiskUsage = new NewRelic.InfraAlertCondition(\"highDiskUsage\", new()\n    {\n        PolicyId = foo.Id,\n        Description = \"Warning if disk usage goes above 80% and critical alert if goes above 90%\",\n        Type = \"infra_metric\",\n        Event = \"StorageSample\",\n        Select = \"diskUsedPercent\",\n        Comparison = \"above\",\n        Where = \"(hostname LIKE '%frontend%')\",\n        Critical = new NewRelic.Inputs.InfraAlertConditionCriticalArgs\n        {\n            Duration = 25,\n            Value = 90,\n            TimeFunction = \"all\",\n        },\n        Warning = new NewRelic.Inputs.InfraAlertConditionWarningArgs\n        {\n            Duration = 10,\n            Value = 80,\n            TimeFunction = \"all\",\n        },\n    });\n\n    var highDbConnCount = new NewRelic.InfraAlertCondition(\"highDbConnCount\", new()\n    {\n        PolicyId = foo.Id,\n        Description = \"Critical alert when the number of database connections goes above 90\",\n        Type = \"infra_metric\",\n        Event = \"DatastoreSample\",\n        Select = \"provider.databaseConnections.Average\",\n        Comparison = \"above\",\n        Where = \"(hostname LIKE '%db%')\",\n        IntegrationProvider = \"RdsDbInstance\",\n        Critical = new NewRelic.Inputs.InfraAlertConditionCriticalArgs\n        {\n            Duration = 25,\n            Value = 90,\n            TimeFunction = \"all\",\n        },\n    });\n\n    var processNotRunning = new NewRelic.InfraAlertCondition(\"processNotRunning\", new()\n    {\n        PolicyId = foo.Id,\n        Description = \"Critical alert when ruby isn't running\",\n        Type = \"infra_process_running\",\n        Comparison = \"equal\",\n        Where = \"hostname = 'web01'\",\n        ProcessWhere = \"commandName = '/usr/bin/ruby'\",\n        Critical = new NewRelic.Inputs.InfraAlertConditionCriticalArgs\n        {\n            Duration = 5,\n            Value = 0,\n        },\n    });\n\n    var hostNotReporting = new NewRelic.InfraAlertCondition(\"hostNotReporting\", new()\n    {\n        PolicyId = foo.Id,\n        Description = \"Critical alert when the host is not reporting\",\n        Type = \"infra_host_not_reporting\",\n        Where = \"(hostname LIKE '%frontend%')\",\n        Critical = new NewRelic.Inputs.InfraAlertConditionCriticalArgs\n        {\n            Duration = 5,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := newrelic.NewAlertPolicy(ctx, \"foo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewInfraAlertCondition(ctx, \"highDiskUsage\", \u0026newrelic.InfraAlertConditionArgs{\n\t\t\tPolicyId:    foo.ID(),\n\t\t\tDescription: pulumi.String(\"Warning if disk usage goes above 80% and critical alert if goes above 90%\"),\n\t\t\tType:        pulumi.String(\"infra_metric\"),\n\t\t\tEvent:       pulumi.String(\"StorageSample\"),\n\t\t\tSelect:      pulumi.String(\"diskUsedPercent\"),\n\t\t\tComparison:  pulumi.String(\"above\"),\n\t\t\tWhere:       pulumi.String(\"(hostname LIKE '%frontend%')\"),\n\t\t\tCritical: \u0026newrelic.InfraAlertConditionCriticalArgs{\n\t\t\t\tDuration:     pulumi.Int(25),\n\t\t\t\tValue:        pulumi.Float64(90),\n\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t},\n\t\t\tWarning: \u0026newrelic.InfraAlertConditionWarningArgs{\n\t\t\t\tDuration:     pulumi.Int(10),\n\t\t\t\tValue:        pulumi.Float64(80),\n\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewInfraAlertCondition(ctx, \"highDbConnCount\", \u0026newrelic.InfraAlertConditionArgs{\n\t\t\tPolicyId:            foo.ID(),\n\t\t\tDescription:         pulumi.String(\"Critical alert when the number of database connections goes above 90\"),\n\t\t\tType:                pulumi.String(\"infra_metric\"),\n\t\t\tEvent:               pulumi.String(\"DatastoreSample\"),\n\t\t\tSelect:              pulumi.String(\"provider.databaseConnections.Average\"),\n\t\t\tComparison:          pulumi.String(\"above\"),\n\t\t\tWhere:               pulumi.String(\"(hostname LIKE '%db%')\"),\n\t\t\tIntegrationProvider: pulumi.String(\"RdsDbInstance\"),\n\t\t\tCritical: \u0026newrelic.InfraAlertConditionCriticalArgs{\n\t\t\t\tDuration:     pulumi.Int(25),\n\t\t\t\tValue:        pulumi.Float64(90),\n\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewInfraAlertCondition(ctx, \"processNotRunning\", \u0026newrelic.InfraAlertConditionArgs{\n\t\t\tPolicyId:     foo.ID(),\n\t\t\tDescription:  pulumi.String(\"Critical alert when ruby isn't running\"),\n\t\t\tType:         pulumi.String(\"infra_process_running\"),\n\t\t\tComparison:   pulumi.String(\"equal\"),\n\t\t\tWhere:        pulumi.String(\"hostname = 'web01'\"),\n\t\t\tProcessWhere: pulumi.String(\"commandName = '/usr/bin/ruby'\"),\n\t\t\tCritical: \u0026newrelic.InfraAlertConditionCriticalArgs{\n\t\t\t\tDuration: pulumi.Int(5),\n\t\t\t\tValue:    pulumi.Float64(0),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewInfraAlertCondition(ctx, \"hostNotReporting\", \u0026newrelic.InfraAlertConditionArgs{\n\t\t\tPolicyId:    foo.ID(),\n\t\t\tDescription: pulumi.String(\"Critical alert when the host is not reporting\"),\n\t\t\tType:        pulumi.String(\"infra_host_not_reporting\"),\n\t\t\tWhere:       pulumi.String(\"(hostname LIKE '%frontend%')\"),\n\t\t\tCritical: \u0026newrelic.InfraAlertConditionCriticalArgs{\n\t\t\t\tDuration: pulumi.Int(5),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.InfraAlertCondition;\nimport com.pulumi.newrelic.InfraAlertConditionArgs;\nimport com.pulumi.newrelic.inputs.InfraAlertConditionCriticalArgs;\nimport com.pulumi.newrelic.inputs.InfraAlertConditionWarningArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AlertPolicy(\"foo\");\n\n        var highDiskUsage = new InfraAlertCondition(\"highDiskUsage\", InfraAlertConditionArgs.builder()        \n            .policyId(foo.id())\n            .description(\"Warning if disk usage goes above 80% and critical alert if goes above 90%\")\n            .type(\"infra_metric\")\n            .event(\"StorageSample\")\n            .select(\"diskUsedPercent\")\n            .comparison(\"above\")\n            .where(\"(hostname LIKE '%frontend%')\")\n            .critical(InfraAlertConditionCriticalArgs.builder()\n                .duration(25)\n                .value(90)\n                .timeFunction(\"all\")\n                .build())\n            .warning(InfraAlertConditionWarningArgs.builder()\n                .duration(10)\n                .value(80)\n                .timeFunction(\"all\")\n                .build())\n            .build());\n\n        var highDbConnCount = new InfraAlertCondition(\"highDbConnCount\", InfraAlertConditionArgs.builder()        \n            .policyId(foo.id())\n            .description(\"Critical alert when the number of database connections goes above 90\")\n            .type(\"infra_metric\")\n            .event(\"DatastoreSample\")\n            .select(\"provider.databaseConnections.Average\")\n            .comparison(\"above\")\n            .where(\"(hostname LIKE '%db%')\")\n            .integrationProvider(\"RdsDbInstance\")\n            .critical(InfraAlertConditionCriticalArgs.builder()\n                .duration(25)\n                .value(90)\n                .timeFunction(\"all\")\n                .build())\n            .build());\n\n        var processNotRunning = new InfraAlertCondition(\"processNotRunning\", InfraAlertConditionArgs.builder()        \n            .policyId(foo.id())\n            .description(\"Critical alert when ruby isn't running\")\n            .type(\"infra_process_running\")\n            .comparison(\"equal\")\n            .where(\"hostname = 'web01'\")\n            .processWhere(\"commandName = '/usr/bin/ruby'\")\n            .critical(InfraAlertConditionCriticalArgs.builder()\n                .duration(5)\n                .value(0)\n                .build())\n            .build());\n\n        var hostNotReporting = new InfraAlertCondition(\"hostNotReporting\", InfraAlertConditionArgs.builder()        \n            .policyId(foo.id())\n            .description(\"Critical alert when the host is not reporting\")\n            .type(\"infra_host_not_reporting\")\n            .where(\"(hostname LIKE '%frontend%')\")\n            .critical(InfraAlertConditionCriticalArgs.builder()\n                .duration(5)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:AlertPolicy\n  highDiskUsage:\n    type: newrelic:InfraAlertCondition\n    properties:\n      policyId: ${foo.id}\n      description: Warning if disk usage goes above 80% and critical alert if goes above 90%\n      type: infra_metric\n      event: StorageSample\n      select: diskUsedPercent\n      comparison: above\n      where: (hostname LIKE '%frontend%')\n      critical:\n        duration: 25\n        value: 90\n        timeFunction: all\n      warning:\n        duration: 10\n        value: 80\n        timeFunction: all\n  highDbConnCount:\n    type: newrelic:InfraAlertCondition\n    properties:\n      policyId: ${foo.id}\n      description: Critical alert when the number of database connections goes above 90\n      type: infra_metric\n      event: DatastoreSample\n      select: provider.databaseConnections.Average\n      comparison: above\n      where: (hostname LIKE '%db%')\n      integrationProvider: RdsDbInstance\n      critical:\n        duration: 25\n        value: 90\n        timeFunction: all\n  processNotRunning:\n    type: newrelic:InfraAlertCondition\n    properties:\n      policyId: ${foo.id}\n      description: Critical alert when ruby isn't running\n      type: infra_process_running\n      comparison: equal\n      where: hostname = 'web01'\n      processWhere: commandName = '/usr/bin/ruby'\n      critical:\n        duration: 5\n        value: 0\n  hostNotReporting:\n    type: newrelic:InfraAlertCondition\n    properties:\n      policyId: ${foo.id}\n      description: Critical alert when the host is not reporting\n      type: infra_host_not_reporting\n      where: (hostname LIKE '%frontend%')\n      critical:\n        duration: 5\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Thresholds\n\nThe `critical` and `warning` threshold mapping supports the following arguments:\n\n  * `duration` - (Required) Identifies the number of minutes the threshold must be passed or met for the alert to trigger. Threshold durations must be between 1 and 60 minutes (inclusive).\n  * `value` - (Optional) Threshold value, computed against the `comparison` operator. Supported by `infra_metric` and `infra_process_running` alert condition types.\n  * `time_function` - (Optional) Indicates if the condition needs to be sustained or to just break the threshold once; `all` or `any`. Supported by the `infra_metric` alert condition type.\n\n\n## Tags\n\nManage infra alert condition tags with `newrelic.EntityTags`. For up-to-date documentation about the tagging resource, please check newrelic.EntityTags\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooInfraAlertCondition = new newrelic.InfraAlertCondition(\"fooInfraAlertCondition\", {\n    policyId: fooAlertPolicy.id,\n    description: \"Warning if disk usage goes above 80% and critical alert if goes above 90%\",\n    type: \"infra_metric\",\n    event: \"StorageSample\",\n    select: \"diskUsedPercent\",\n    comparison: \"above\",\n    where: \"(hostname LIKE '%frontend%')\",\n    critical: {\n        duration: 25,\n        value: 90,\n        timeFunction: \"all\",\n    },\n    warning: {\n        duration: 10,\n        value: 80,\n        timeFunction: \"all\",\n    },\n});\nconst myConditionEntityTags = new newrelic.EntityTags(\"myConditionEntityTags\", {\n    guid: fooInfraAlertCondition.entityGuid,\n    tags: [\n        {\n            key: \"my-key\",\n            values: [\n                \"my-value\",\n                \"my-other-value\",\n            ],\n        },\n        {\n            key: \"my-key-2\",\n            values: [\"my-value-2\"],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_infra_alert_condition = newrelic.InfraAlertCondition(\"fooInfraAlertCondition\",\n    policy_id=foo_alert_policy.id,\n    description=\"Warning if disk usage goes above 80% and critical alert if goes above 90%\",\n    type=\"infra_metric\",\n    event=\"StorageSample\",\n    select=\"diskUsedPercent\",\n    comparison=\"above\",\n    where=\"(hostname LIKE '%frontend%')\",\n    critical=newrelic.InfraAlertConditionCriticalArgs(\n        duration=25,\n        value=90,\n        time_function=\"all\",\n    ),\n    warning=newrelic.InfraAlertConditionWarningArgs(\n        duration=10,\n        value=80,\n        time_function=\"all\",\n    ))\nmy_condition_entity_tags = newrelic.EntityTags(\"myConditionEntityTags\",\n    guid=foo_infra_alert_condition.entity_guid,\n    tags=[\n        newrelic.EntityTagsTagArgs(\n            key=\"my-key\",\n            values=[\n                \"my-value\",\n                \"my-other-value\",\n            ],\n        ),\n        newrelic.EntityTagsTagArgs(\n            key=\"my-key-2\",\n            values=[\"my-value-2\"],\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\");\n\n    var fooInfraAlertCondition = new NewRelic.InfraAlertCondition(\"fooInfraAlertCondition\", new()\n    {\n        PolicyId = fooAlertPolicy.Id,\n        Description = \"Warning if disk usage goes above 80% and critical alert if goes above 90%\",\n        Type = \"infra_metric\",\n        Event = \"StorageSample\",\n        Select = \"diskUsedPercent\",\n        Comparison = \"above\",\n        Where = \"(hostname LIKE '%frontend%')\",\n        Critical = new NewRelic.Inputs.InfraAlertConditionCriticalArgs\n        {\n            Duration = 25,\n            Value = 90,\n            TimeFunction = \"all\",\n        },\n        Warning = new NewRelic.Inputs.InfraAlertConditionWarningArgs\n        {\n            Duration = 10,\n            Value = 80,\n            TimeFunction = \"all\",\n        },\n    });\n\n    var myConditionEntityTags = new NewRelic.EntityTags(\"myConditionEntityTags\", new()\n    {\n        Guid = fooInfraAlertCondition.EntityGuid,\n        Tags = new[]\n        {\n            new NewRelic.Inputs.EntityTagsTagArgs\n            {\n                Key = \"my-key\",\n                Values = new[]\n                {\n                    \"my-value\",\n                    \"my-other-value\",\n                },\n            },\n            new NewRelic.Inputs.EntityTagsTagArgs\n            {\n                Key = \"my-key-2\",\n                Values = new[]\n                {\n                    \"my-value-2\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooInfraAlertCondition, err := newrelic.NewInfraAlertCondition(ctx, \"fooInfraAlertCondition\", \u0026newrelic.InfraAlertConditionArgs{\n\t\t\tPolicyId:    fooAlertPolicy.ID(),\n\t\t\tDescription: pulumi.String(\"Warning if disk usage goes above 80% and critical alert if goes above 90%\"),\n\t\t\tType:        pulumi.String(\"infra_metric\"),\n\t\t\tEvent:       pulumi.String(\"StorageSample\"),\n\t\t\tSelect:      pulumi.String(\"diskUsedPercent\"),\n\t\t\tComparison:  pulumi.String(\"above\"),\n\t\t\tWhere:       pulumi.String(\"(hostname LIKE '%frontend%')\"),\n\t\t\tCritical: \u0026newrelic.InfraAlertConditionCriticalArgs{\n\t\t\t\tDuration:     pulumi.Int(25),\n\t\t\t\tValue:        pulumi.Float64(90),\n\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t},\n\t\t\tWarning: \u0026newrelic.InfraAlertConditionWarningArgs{\n\t\t\t\tDuration:     pulumi.Int(10),\n\t\t\t\tValue:        pulumi.Float64(80),\n\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewEntityTags(ctx, \"myConditionEntityTags\", \u0026newrelic.EntityTagsArgs{\n\t\t\tGuid: fooInfraAlertCondition.EntityGuid,\n\t\t\tTags: newrelic.EntityTagsTagArray{\n\t\t\t\t\u0026newrelic.EntityTagsTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"my-key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"my-value\"),\n\t\t\t\t\t\tpulumi.String(\"my-other-value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.EntityTagsTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"my-key-2\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"my-value-2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.InfraAlertCondition;\nimport com.pulumi.newrelic.InfraAlertConditionArgs;\nimport com.pulumi.newrelic.inputs.InfraAlertConditionCriticalArgs;\nimport com.pulumi.newrelic.inputs.InfraAlertConditionWarningArgs;\nimport com.pulumi.newrelic.EntityTags;\nimport com.pulumi.newrelic.EntityTagsArgs;\nimport com.pulumi.newrelic.inputs.EntityTagsTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooAlertPolicy = new AlertPolicy(\"fooAlertPolicy\");\n\n        var fooInfraAlertCondition = new InfraAlertCondition(\"fooInfraAlertCondition\", InfraAlertConditionArgs.builder()        \n            .policyId(fooAlertPolicy.id())\n            .description(\"Warning if disk usage goes above 80% and critical alert if goes above 90%\")\n            .type(\"infra_metric\")\n            .event(\"StorageSample\")\n            .select(\"diskUsedPercent\")\n            .comparison(\"above\")\n            .where(\"(hostname LIKE '%frontend%')\")\n            .critical(InfraAlertConditionCriticalArgs.builder()\n                .duration(25)\n                .value(90)\n                .timeFunction(\"all\")\n                .build())\n            .warning(InfraAlertConditionWarningArgs.builder()\n                .duration(10)\n                .value(80)\n                .timeFunction(\"all\")\n                .build())\n            .build());\n\n        var myConditionEntityTags = new EntityTags(\"myConditionEntityTags\", EntityTagsArgs.builder()        \n            .guid(fooInfraAlertCondition.entityGuid())\n            .tags(            \n                EntityTagsTagArgs.builder()\n                    .key(\"my-key\")\n                    .values(                    \n                        \"my-value\",\n                        \"my-other-value\")\n                    .build(),\n                EntityTagsTagArgs.builder()\n                    .key(\"my-key-2\")\n                    .values(\"my-value-2\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooAlertPolicy:\n    type: newrelic:AlertPolicy\n  fooInfraAlertCondition:\n    type: newrelic:InfraAlertCondition\n    properties:\n      policyId: ${fooAlertPolicy.id}\n      description: Warning if disk usage goes above 80% and critical alert if goes above 90%\n      type: infra_metric\n      event: StorageSample\n      select: diskUsedPercent\n      comparison: above\n      where: (hostname LIKE '%frontend%')\n      critical:\n        duration: 25\n        value: 90\n        timeFunction: all\n      warning:\n        duration: 10\n        value: 80\n        timeFunction: all\n  myConditionEntityTags:\n    type: newrelic:EntityTags\n    properties:\n      guid: ${fooInfraAlertCondition.entityGuid}\n      tags:\n        - key: my-key\n          values:\n            - my-value\n            - my-other-value\n        - key: my-key-2\n          values:\n            - my-value-2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nInfrastructure alert conditions can be imported using a composite ID of `\u003cpolicy_id\u003e:\u003ccondition_id\u003e`, e.g.\n\n```sh\n$ pulumi import newrelic:index/infraAlertCondition:InfraAlertCondition main 12345:67890\n```\n",
            "properties": {
                "comparison": {
                    "type": "string",
                    "description": "The operator used to evaluate the threshold value.  Valid values are `above`, `below`, and `equal`.  Supported by the `infra_metric` and `infra_process_running` condition types.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "The timestamp the alert condition was created.\n"
                },
                "critical": {
                    "$ref": "#/types/newrelic:index/InfraAlertConditionCritical:InfraAlertConditionCritical",
                    "description": "Identifies the threshold parameters for opening a critical alert incident. See Thresholds below for details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Infrastructure alert condition.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the condition is turned on or off.  Valid values are `true` and `false`.  Defaults to `true`.\n"
                },
                "entityGuid": {
                    "type": "string",
                    "description": "The unique entity identifier of the condition in New Relic.\n"
                },
                "event": {
                    "type": "string",
                    "description": "The metric event; for example, `SystemSample` or `StorageSample`.  Supported by the `infra_metric` condition type.\n"
                },
                "integrationProvider": {
                    "type": "string",
                    "description": "For alerts on integrations, use this instead of `event`.  Supported by the `infra_metric` condition type.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Infrastructure alert condition's name.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the alert policy where this condition should be used.\n"
                },
                "processWhere": {
                    "type": "string",
                    "description": "Any filters applied to processes; for example: `commandName = 'java'`.  Required by the `infra_process_running` condition type.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "select": {
                    "type": "string",
                    "description": "The attribute name to identify the metric being targeted; for example, `cpuPercent`, `diskFreePercent`, or `memoryResidentSizeBytes`.  The underlying API will automatically populate this value for Infrastructure integrations (for example `diskFreePercent`), so make sure to explicitly include this value to avoid diff issues.  Supported by the `infra_metric` condition type.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Infrastructure alert condition.  Valid values are  `infra_process_running`, `infra_metric`, and `infra_host_not_reporting`.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "The timestamp the alert condition was last updated.\n"
                },
                "violationCloseTimer": {
                    "type": "integer",
                    "description": "Determines how much time will pass (in hours) before an incident is automatically closed. Valid values are `1 2 4 8 12 24 48 72`. Defaults to 24. If `0` is provided, default of `24` is used and will have configuration drift during the apply phase until a valid value is provided.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n"
                },
                "warning": {
                    "$ref": "#/types/newrelic:index/InfraAlertConditionWarning:InfraAlertConditionWarning",
                    "description": "Identifies the threshold parameters for opening a warning alert incident. See Thresholds below for details.\n"
                },
                "where": {
                    "type": "string",
                    "description": "If applicable, this identifies any Infrastructure host filters used; for example: `hostname LIKE '%!c(MISSING)assandra%!'(MISSING)`.\n"
                }
            },
            "required": [
                "createdAt",
                "entityGuid",
                "event",
                "name",
                "policyId",
                "type",
                "updatedAt"
            ],
            "inputProperties": {
                "comparison": {
                    "type": "string",
                    "description": "The operator used to evaluate the threshold value.  Valid values are `above`, `below`, and `equal`.  Supported by the `infra_metric` and `infra_process_running` condition types.\n"
                },
                "critical": {
                    "$ref": "#/types/newrelic:index/InfraAlertConditionCritical:InfraAlertConditionCritical",
                    "description": "Identifies the threshold parameters for opening a critical alert incident. See Thresholds below for details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Infrastructure alert condition.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the condition is turned on or off.  Valid values are `true` and `false`.  Defaults to `true`.\n"
                },
                "event": {
                    "type": "string",
                    "description": "The metric event; for example, `SystemSample` or `StorageSample`.  Supported by the `infra_metric` condition type.\n"
                },
                "integrationProvider": {
                    "type": "string",
                    "description": "For alerts on integrations, use this instead of `event`.  Supported by the `infra_metric` condition type.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Infrastructure alert condition's name.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the alert policy where this condition should be used.\n",
                    "willReplaceOnChanges": true
                },
                "processWhere": {
                    "type": "string",
                    "description": "Any filters applied to processes; for example: `commandName = 'java'`.  Required by the `infra_process_running` condition type.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "select": {
                    "type": "string",
                    "description": "The attribute name to identify the metric being targeted; for example, `cpuPercent`, `diskFreePercent`, or `memoryResidentSizeBytes`.  The underlying API will automatically populate this value for Infrastructure integrations (for example `diskFreePercent`), so make sure to explicitly include this value to avoid diff issues.  Supported by the `infra_metric` condition type.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Infrastructure alert condition.  Valid values are  `infra_process_running`, `infra_metric`, and `infra_host_not_reporting`.\n",
                    "willReplaceOnChanges": true
                },
                "violationCloseTimer": {
                    "type": "integer",
                    "description": "Determines how much time will pass (in hours) before an incident is automatically closed. Valid values are `1 2 4 8 12 24 48 72`. Defaults to 24. If `0` is provided, default of `24` is used and will have configuration drift during the apply phase until a valid value is provided.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n"
                },
                "warning": {
                    "$ref": "#/types/newrelic:index/InfraAlertConditionWarning:InfraAlertConditionWarning",
                    "description": "Identifies the threshold parameters for opening a warning alert incident. See Thresholds below for details.\n",
                    "willReplaceOnChanges": true
                },
                "where": {
                    "type": "string",
                    "description": "If applicable, this identifies any Infrastructure host filters used; for example: `hostname LIKE '%!c(MISSING)assandra%!'(MISSING)`.\n"
                }
            },
            "requiredInputs": [
                "policyId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InfraAlertCondition resources.\n",
                "properties": {
                    "comparison": {
                        "type": "string",
                        "description": "The operator used to evaluate the threshold value.  Valid values are `above`, `below`, and `equal`.  Supported by the `infra_metric` and `infra_process_running` condition types.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "The timestamp the alert condition was created.\n"
                    },
                    "critical": {
                        "$ref": "#/types/newrelic:index/InfraAlertConditionCritical:InfraAlertConditionCritical",
                        "description": "Identifies the threshold parameters for opening a critical alert incident. See Thresholds below for details.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Infrastructure alert condition.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the condition is turned on or off.  Valid values are `true` and `false`.  Defaults to `true`.\n"
                    },
                    "entityGuid": {
                        "type": "string",
                        "description": "The unique entity identifier of the condition in New Relic.\n"
                    },
                    "event": {
                        "type": "string",
                        "description": "The metric event; for example, `SystemSample` or `StorageSample`.  Supported by the `infra_metric` condition type.\n"
                    },
                    "integrationProvider": {
                        "type": "string",
                        "description": "For alerts on integrations, use this instead of `event`.  Supported by the `infra_metric` condition type.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Infrastructure alert condition's name.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the alert policy where this condition should be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "processWhere": {
                        "type": "string",
                        "description": "Any filters applied to processes; for example: `commandName = 'java'`.  Required by the `infra_process_running` condition type.\n"
                    },
                    "runbookUrl": {
                        "type": "string",
                        "description": "Runbook URL to display in notifications.\n"
                    },
                    "select": {
                        "type": "string",
                        "description": "The attribute name to identify the metric being targeted; for example, `cpuPercent`, `diskFreePercent`, or `memoryResidentSizeBytes`.  The underlying API will automatically populate this value for Infrastructure integrations (for example `diskFreePercent`), so make sure to explicitly include this value to avoid diff issues.  Supported by the `infra_metric` condition type.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of Infrastructure alert condition.  Valid values are  `infra_process_running`, `infra_metric`, and `infra_host_not_reporting`.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "The timestamp the alert condition was last updated.\n"
                    },
                    "violationCloseTimer": {
                        "type": "integer",
                        "description": "Determines how much time will pass (in hours) before an incident is automatically closed. Valid values are `1 2 4 8 12 24 48 72`. Defaults to 24. If `0` is provided, default of `24` is used and will have configuration drift during the apply phase until a valid value is provided.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n"
                    },
                    "warning": {
                        "$ref": "#/types/newrelic:index/InfraAlertConditionWarning:InfraAlertConditionWarning",
                        "description": "Identifies the threshold parameters for opening a warning alert incident. See Thresholds below for details.\n",
                        "willReplaceOnChanges": true
                    },
                    "where": {
                        "type": "string",
                        "description": "If applicable, this identifies any Infrastructure host filters used; for example: `hostname LIKE '%!c(MISSING)assandra%!'(MISSING)`.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/logParsingRule:LogParsingRule": {
            "description": "Use this resource to create, update and delete New Relic Log Parsing Rule.\n\n## Example Usage\n\nUse this example to create the log parse rule.\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.LogParsingRule(\"foo\", {\n    attribute: \"message\",\n    enabled: true,\n    grok: \"sampleattribute='%%{NUMBER:test:int}'\",\n    lucene: \"logtype:linux_messages\",\n    nrql: \"SELECT * FROM Log WHERE logtype = 'linux_messages'\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.LogParsingRule(\"foo\",\n    attribute=\"message\",\n    enabled=True,\n    grok=\"sampleattribute='%%{NUMBER:test:int}'\",\n    lucene=\"logtype:linux_messages\",\n    nrql=\"SELECT * FROM Log WHERE logtype = 'linux_messages'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.LogParsingRule(\"foo\", new()\n    {\n        Attribute = \"message\",\n        Enabled = true,\n        Grok = \"sampleattribute='%%{NUMBER:test:int}'\",\n        Lucene = \"logtype:linux_messages\",\n        Nrql = \"SELECT * FROM Log WHERE logtype = 'linux_messages'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewLogParsingRule(ctx, \"foo\", \u0026newrelic.LogParsingRuleArgs{\n\t\t\tAttribute: pulumi.String(\"message\"),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tGrok:      pulumi.String(\"sampleattribute='%%{NUMBER:test:int}'\"),\n\t\t\tLucene:    pulumi.String(\"logtype:linux_messages\"),\n\t\t\tNrql:      pulumi.String(\"SELECT * FROM Log WHERE logtype = 'linux_messages'\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.LogParsingRule;\nimport com.pulumi.newrelic.LogParsingRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new LogParsingRule(\"foo\", LogParsingRuleArgs.builder()        \n            .attribute(\"message\")\n            .enabled(true)\n            .grok(\"sampleattribute='%%{NUMBER:test:int}'\")\n            .lucene(\"logtype:linux_messages\")\n            .nrql(\"SELECT * FROM Log WHERE logtype = 'linux_messages'\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:LogParsingRule\n    properties:\n      attribute: message\n      enabled: true\n      grok: sampleattribute='%%{NUMBER:test:int}'\n      lucene: logtype:linux_messages\n      nrql: SELECT * FROM Log WHERE logtype = 'linux_messages'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Additional Example\n\nUse this example to validate a grok pattern and create the log parse rule.  More\ninformation on grok pattern can be found [here](https://docs.newrelic.com/docs/logs/ui-data/parsing/#grok)\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst grok = newrelic.getTestGrokPattern({\n    grok: \"%{IP:host_ip}\",\n    logLines: [\"host_ip: 43.3.120.2\"],\n});\nconst foo = new newrelic.LogParsingRule(\"foo\", {\n    attribute: \"message\",\n    enabled: true,\n    grok: grok.then(grok =\u003e grok.grok),\n    lucene: \"logtype:linux_messages\",\n    nrql: \"SELECT * FROM Log WHERE logtype = 'linux_messages'\",\n    matched: grok.then(grok =\u003e grok.testGroks?.[0]?.matched),\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\ngrok = newrelic.get_test_grok_pattern(grok=\"%{IP:host_ip}\",\n    log_lines=[\"host_ip: 43.3.120.2\"])\nfoo = newrelic.LogParsingRule(\"foo\",\n    attribute=\"message\",\n    enabled=True,\n    grok=grok.grok,\n    lucene=\"logtype:linux_messages\",\n    nrql=\"SELECT * FROM Log WHERE logtype = 'linux_messages'\",\n    matched=grok.test_groks[0].matched)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var grok = NewRelic.GetTestGrokPattern.Invoke(new()\n    {\n        Grok = \"%{IP:host_ip}\",\n        LogLines = new[]\n        {\n            \"host_ip: 43.3.120.2\",\n        },\n    });\n\n    var foo = new NewRelic.LogParsingRule(\"foo\", new()\n    {\n        Attribute = \"message\",\n        Enabled = true,\n        Grok = grok.Apply(getTestGrokPatternResult =\u003e getTestGrokPatternResult.Grok),\n        Lucene = \"logtype:linux_messages\",\n        Nrql = \"SELECT * FROM Log WHERE logtype = 'linux_messages'\",\n        Matched = grok.Apply(getTestGrokPatternResult =\u003e getTestGrokPatternResult.TestGroks[0]?.Matched),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgrok, err := newrelic.GetTestGrokPattern(ctx, \u0026newrelic.GetTestGrokPatternArgs{\n\t\t\tGrok: \"%{IP:host_ip}\",\n\t\t\tLogLines: []string{\n\t\t\t\t\"host_ip: 43.3.120.2\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewLogParsingRule(ctx, \"foo\", \u0026newrelic.LogParsingRuleArgs{\n\t\t\tAttribute: pulumi.String(\"message\"),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tGrok:      *pulumi.String(grok.Grok),\n\t\t\tLucene:    pulumi.String(\"logtype:linux_messages\"),\n\t\t\tNrql:      pulumi.String(\"SELECT * FROM Log WHERE logtype = 'linux_messages'\"),\n\t\t\tMatched:   *pulumi.Bool(grok.TestGroks[0].Matched),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetTestGrokPatternArgs;\nimport com.pulumi.newrelic.LogParsingRule;\nimport com.pulumi.newrelic.LogParsingRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var grok = NewrelicFunctions.getTestGrokPattern(GetTestGrokPatternArgs.builder()\n            .grok(\"%{IP:host_ip}\")\n            .logLines(\"host_ip: 43.3.120.2\")\n            .build());\n\n        var foo = new LogParsingRule(\"foo\", LogParsingRuleArgs.builder()        \n            .attribute(\"message\")\n            .enabled(true)\n            .grok(grok.applyValue(getTestGrokPatternResult -\u003e getTestGrokPatternResult.grok()))\n            .lucene(\"logtype:linux_messages\")\n            .nrql(\"SELECT * FROM Log WHERE logtype = 'linux_messages'\")\n            .matched(grok.applyValue(getTestGrokPatternResult -\u003e getTestGrokPatternResult.testGroks()[0].matched()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:LogParsingRule\n    properties:\n      attribute: message\n      enabled: true\n      grok: ${grok.grok}\n      lucene: logtype:linux_messages\n      nrql: SELECT * FROM Log WHERE logtype = 'linux_messages'\n      matched: ${grok.testGroks[0].matched}\nvariables:\n  grok:\n    fn::invoke:\n      Function: newrelic:getTestGrokPattern\n      Arguments:\n        grok: '%{IP:host_ip}'\n        logLines:\n          - 'host_ip: 43.3.120.2'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNew Relic log parsing rule can be imported using the rule ID, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:index/logParsingRule:LogParsingRule foo 3456789\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account id associated with the obfuscation rule.\n"
                },
                "attribute": {
                    "type": "string",
                    "description": "The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.\n"
                },
                "deleted": {
                    "type": "boolean",
                    "description": "Whether or not this rule is deleted.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should be applied or not to incoming data.\n"
                },
                "grok": {
                    "type": "string",
                    "description": "The Grok of what to parse.\n"
                },
                "lucene": {
                    "type": "string",
                    "description": "The Lucene to match events to the parsing rule.\n"
                },
                "matched": {
                    "type": "boolean",
                    "description": "Whether the Grok pattern matched.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of rule.\n"
                },
                "nrql": {
                    "type": "string",
                    "description": "The NRQL to match events to the parsing rule.\n"
                }
            },
            "required": [
                "accountId",
                "deleted",
                "enabled",
                "grok",
                "lucene",
                "matched",
                "name",
                "nrql"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account id associated with the obfuscation rule.\n"
                },
                "attribute": {
                    "type": "string",
                    "description": "The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should be applied or not to incoming data.\n"
                },
                "grok": {
                    "type": "string",
                    "description": "The Grok of what to parse.\n"
                },
                "lucene": {
                    "type": "string",
                    "description": "The Lucene to match events to the parsing rule.\n"
                },
                "matched": {
                    "type": "boolean",
                    "description": "Whether the Grok pattern matched.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of rule.\n"
                },
                "nrql": {
                    "type": "string",
                    "description": "The NRQL to match events to the parsing rule.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "grok",
                "lucene",
                "nrql"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogParsingRule resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account id associated with the obfuscation rule.\n"
                    },
                    "attribute": {
                        "type": "string",
                        "description": "The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.\n"
                    },
                    "deleted": {
                        "type": "boolean",
                        "description": "Whether or not this rule is deleted.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the rule should be applied or not to incoming data.\n"
                    },
                    "grok": {
                        "type": "string",
                        "description": "The Grok of what to parse.\n"
                    },
                    "lucene": {
                        "type": "string",
                        "description": "The Lucene to match events to the parsing rule.\n"
                    },
                    "matched": {
                        "type": "boolean",
                        "description": "Whether the Grok pattern matched.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of rule.\n"
                    },
                    "nrql": {
                        "type": "string",
                        "description": "The NRQL to match events to the parsing rule.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/monitorDowntime:MonitorDowntime": {
            "description": "Use this resource to create, update, and delete [Monitor Downtimes](https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/using-monitors/monitor-downtimes-disable-monitoring-during-scheduled-maintenance-times/) in New Relic.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.MonitorDowntime(\"foo\", {\n    endRepeat: {\n        onDate: \"2023-12-20\",\n    },\n    endTime: \"2023-12-10T02:45:30\",\n    maintenanceDays: [\n        \"FRIDAY\",\n        \"SATURDAY\",\n    ],\n    mode: \"WEEKLY\",\n    monitorGuids: [\n        \"\u003cGUID-1\u003e\",\n        \"\u003cGUID-2\u003e\",\n    ],\n    startTime: \"2023-11-30T10:30:00\",\n    timeZone: \"Asia/Kolkata\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.MonitorDowntime(\"foo\",\n    end_repeat=newrelic.MonitorDowntimeEndRepeatArgs(\n        on_date=\"2023-12-20\",\n    ),\n    end_time=\"2023-12-10T02:45:30\",\n    maintenance_days=[\n        \"FRIDAY\",\n        \"SATURDAY\",\n    ],\n    mode=\"WEEKLY\",\n    monitor_guids=[\n        \"\u003cGUID-1\u003e\",\n        \"\u003cGUID-2\u003e\",\n    ],\n    start_time=\"2023-11-30T10:30:00\",\n    time_zone=\"Asia/Kolkata\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.MonitorDowntime(\"foo\", new()\n    {\n        EndRepeat = new NewRelic.Inputs.MonitorDowntimeEndRepeatArgs\n        {\n            OnDate = \"2023-12-20\",\n        },\n        EndTime = \"2023-12-10T02:45:30\",\n        MaintenanceDays = new[]\n        {\n            \"FRIDAY\",\n            \"SATURDAY\",\n        },\n        Mode = \"WEEKLY\",\n        MonitorGuids = new[]\n        {\n            \"\u003cGUID-1\u003e\",\n            \"\u003cGUID-2\u003e\",\n        },\n        StartTime = \"2023-11-30T10:30:00\",\n        TimeZone = \"Asia/Kolkata\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewMonitorDowntime(ctx, \"foo\", \u0026newrelic.MonitorDowntimeArgs{\n\t\t\tEndRepeat: \u0026newrelic.MonitorDowntimeEndRepeatArgs{\n\t\t\t\tOnDate: pulumi.String(\"2023-12-20\"),\n\t\t\t},\n\t\t\tEndTime: pulumi.String(\"2023-12-10T02:45:30\"),\n\t\t\tMaintenanceDays: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"FRIDAY\"),\n\t\t\t\tpulumi.String(\"SATURDAY\"),\n\t\t\t},\n\t\t\tMode: pulumi.String(\"WEEKLY\"),\n\t\t\tMonitorGuids: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"\u003cGUID-1\u003e\"),\n\t\t\t\tpulumi.String(\"\u003cGUID-2\u003e\"),\n\t\t\t},\n\t\t\tStartTime: pulumi.String(\"2023-11-30T10:30:00\"),\n\t\t\tTimeZone:  pulumi.String(\"Asia/Kolkata\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.MonitorDowntime;\nimport com.pulumi.newrelic.MonitorDowntimeArgs;\nimport com.pulumi.newrelic.inputs.MonitorDowntimeEndRepeatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new MonitorDowntime(\"foo\", MonitorDowntimeArgs.builder()        \n            .endRepeat(MonitorDowntimeEndRepeatArgs.builder()\n                .onDate(\"2023-12-20\")\n                .build())\n            .endTime(\"2023-12-10T02:45:30\")\n            .maintenanceDays(            \n                \"FRIDAY\",\n                \"SATURDAY\")\n            .mode(\"WEEKLY\")\n            .monitorGuids(            \n                \"\u003cGUID-1\u003e\",\n                \"\u003cGUID-2\u003e\")\n            .startTime(\"2023-11-30T10:30:00\")\n            .timeZone(\"Asia/Kolkata\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:MonitorDowntime\n    properties:\n      endRepeat:\n        onDate: 2023-12-20\n      endTime: 2023-12-10T02:45:30\n      maintenanceDays:\n        - FRIDAY\n        - SATURDAY\n      mode: WEEKLY\n      monitorGuids:\n        - \u003cGUID-1\u003e\n        - \u003cGUID-2\u003e\n      startTime: 2023-11-30T10:30:00\n      timeZone: Asia/Kolkata\n```\n\u003c!--End PulumiCodeChooser --\u003e\nMonitor Downtimes are of four types; **one-time**, **daily**, **weekly** and **monthly**. For more details on each type and the right arguments that go with them, check out the argument reference and examples sections below.\n\n## Examples\n\n### One-Time Monitor Downtime\n\nThe below example illustrates creating a **one-time** monitor downtime. \n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst sampleOneTimeNewrelicMonitorDowntime = new newrelic.MonitorDowntime(\"sampleOneTimeNewrelicMonitorDowntime\", {\n    endTime: \"2024-01-04T16:24:30\",\n    mode: \"ONE_TIME\",\n    monitorGuids: [\n        \"\u003cGUID-1\u003e\",\n        \"\u003cGUID-2\u003e\",\n    ],\n    startTime: \"2023-12-04T10:15:00\",\n    timeZone: \"America/Los_Angeles\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nsample_one_time_newrelic_monitor_downtime = newrelic.MonitorDowntime(\"sampleOneTimeNewrelicMonitorDowntime\",\n    end_time=\"2024-01-04T16:24:30\",\n    mode=\"ONE_TIME\",\n    monitor_guids=[\n        \"\u003cGUID-1\u003e\",\n        \"\u003cGUID-2\u003e\",\n    ],\n    start_time=\"2023-12-04T10:15:00\",\n    time_zone=\"America/Los_Angeles\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleOneTimeNewrelicMonitorDowntime = new NewRelic.MonitorDowntime(\"sampleOneTimeNewrelicMonitorDowntime\", new()\n    {\n        EndTime = \"2024-01-04T16:24:30\",\n        Mode = \"ONE_TIME\",\n        MonitorGuids = new[]\n        {\n            \"\u003cGUID-1\u003e\",\n            \"\u003cGUID-2\u003e\",\n        },\n        StartTime = \"2023-12-04T10:15:00\",\n        TimeZone = \"America/Los_Angeles\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewMonitorDowntime(ctx, \"sampleOneTimeNewrelicMonitorDowntime\", \u0026newrelic.MonitorDowntimeArgs{\n\t\t\tEndTime: pulumi.String(\"2024-01-04T16:24:30\"),\n\t\t\tMode:    pulumi.String(\"ONE_TIME\"),\n\t\t\tMonitorGuids: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"\u003cGUID-1\u003e\"),\n\t\t\t\tpulumi.String(\"\u003cGUID-2\u003e\"),\n\t\t\t},\n\t\t\tStartTime: pulumi.String(\"2023-12-04T10:15:00\"),\n\t\t\tTimeZone:  pulumi.String(\"America/Los_Angeles\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.MonitorDowntime;\nimport com.pulumi.newrelic.MonitorDowntimeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sampleOneTimeNewrelicMonitorDowntime = new MonitorDowntime(\"sampleOneTimeNewrelicMonitorDowntime\", MonitorDowntimeArgs.builder()        \n            .endTime(\"2024-01-04T16:24:30\")\n            .mode(\"ONE_TIME\")\n            .monitorGuids(            \n                \"\u003cGUID-1\u003e\",\n                \"\u003cGUID-2\u003e\")\n            .startTime(\"2023-12-04T10:15:00\")\n            .timeZone(\"America/Los_Angeles\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sampleOneTimeNewrelicMonitorDowntime:\n    type: newrelic:MonitorDowntime\n    properties:\n      endTime: 2024-01-04T16:24:30\n      mode: ONE_TIME\n      monitorGuids:\n        - \u003cGUID-1\u003e\n        - \u003cGUID-2\u003e\n      startTime: 2023-12-04T10:15:00\n      timeZone: America/Los_Angeles\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Daily Monitor Downtime\n\nThe below example illustrates creating a **daily** monitor downtime. \n\nNote that `end_repeat` has been specified in the configuration; however, this is optional, in accordance with the rules of `end_repeat` specified in the argument reference section above. This example uses the `on_date` nested argument of `end_repeat`, however, the other nested argument, `on_repeat` may also be used _instead_, as you may see in some of the other examples below; though both `on_date` and `on_repeat` cannot be specified together, as they are mutually exclusive.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst sampleDailyNewrelicMonitorDowntime = new newrelic.MonitorDowntime(\"sampleDailyNewrelicMonitorDowntime\", {\n    endRepeat: {\n        onDate: \"2023-12-25\",\n    },\n    endTime: \"2024-01-04T07:15:00\",\n    mode: \"DAILY\",\n    monitorGuids: [\n        \"\u003cGUID-1\u003e\",\n        \"\u003cGUID-2\u003e\",\n    ],\n    startTime: \"2023-12-04T18:15:00\",\n    timeZone: \"Asia/Kolkata\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nsample_daily_newrelic_monitor_downtime = newrelic.MonitorDowntime(\"sampleDailyNewrelicMonitorDowntime\",\n    end_repeat=newrelic.MonitorDowntimeEndRepeatArgs(\n        on_date=\"2023-12-25\",\n    ),\n    end_time=\"2024-01-04T07:15:00\",\n    mode=\"DAILY\",\n    monitor_guids=[\n        \"\u003cGUID-1\u003e\",\n        \"\u003cGUID-2\u003e\",\n    ],\n    start_time=\"2023-12-04T18:15:00\",\n    time_zone=\"Asia/Kolkata\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleDailyNewrelicMonitorDowntime = new NewRelic.MonitorDowntime(\"sampleDailyNewrelicMonitorDowntime\", new()\n    {\n        EndRepeat = new NewRelic.Inputs.MonitorDowntimeEndRepeatArgs\n        {\n            OnDate = \"2023-12-25\",\n        },\n        EndTime = \"2024-01-04T07:15:00\",\n        Mode = \"DAILY\",\n        MonitorGuids = new[]\n        {\n            \"\u003cGUID-1\u003e\",\n            \"\u003cGUID-2\u003e\",\n        },\n        StartTime = \"2023-12-04T18:15:00\",\n        TimeZone = \"Asia/Kolkata\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewMonitorDowntime(ctx, \"sampleDailyNewrelicMonitorDowntime\", \u0026newrelic.MonitorDowntimeArgs{\n\t\t\tEndRepeat: \u0026newrelic.MonitorDowntimeEndRepeatArgs{\n\t\t\t\tOnDate: pulumi.String(\"2023-12-25\"),\n\t\t\t},\n\t\t\tEndTime: pulumi.String(\"2024-01-04T07:15:00\"),\n\t\t\tMode:    pulumi.String(\"DAILY\"),\n\t\t\tMonitorGuids: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"\u003cGUID-1\u003e\"),\n\t\t\t\tpulumi.String(\"\u003cGUID-2\u003e\"),\n\t\t\t},\n\t\t\tStartTime: pulumi.String(\"2023-12-04T18:15:00\"),\n\t\t\tTimeZone:  pulumi.String(\"Asia/Kolkata\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.MonitorDowntime;\nimport com.pulumi.newrelic.MonitorDowntimeArgs;\nimport com.pulumi.newrelic.inputs.MonitorDowntimeEndRepeatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sampleDailyNewrelicMonitorDowntime = new MonitorDowntime(\"sampleDailyNewrelicMonitorDowntime\", MonitorDowntimeArgs.builder()        \n            .endRepeat(MonitorDowntimeEndRepeatArgs.builder()\n                .onDate(\"2023-12-25\")\n                .build())\n            .endTime(\"2024-01-04T07:15:00\")\n            .mode(\"DAILY\")\n            .monitorGuids(            \n                \"\u003cGUID-1\u003e\",\n                \"\u003cGUID-2\u003e\")\n            .startTime(\"2023-12-04T18:15:00\")\n            .timeZone(\"Asia/Kolkata\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sampleDailyNewrelicMonitorDowntime:\n    type: newrelic:MonitorDowntime\n    properties:\n      endRepeat:\n        onDate: 2023-12-25\n      endTime: 2024-01-04T07:15:00\n      mode: DAILY\n      monitorGuids:\n        - \u003cGUID-1\u003e\n        - \u003cGUID-2\u003e\n      startTime: 2023-12-04T18:15:00\n      timeZone: Asia/Kolkata\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Weekly Monitor Downtime\n\nThe below example illustrates creating a **weekly** monitor downtime. \n\nNote that `maintenance_days` has been specified in the configuration as it is required with weekly monitor downtimes; and `end_repeat` has not been specified as it is optional, all in accordance with the rules of these arguments specified in the argument reference section above.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst sampleWeeklyNewrelicMonitorDowntime = new newrelic.MonitorDowntime(\"sampleWeeklyNewrelicMonitorDowntime\", {\n    endTime: \"2024-01-04T23:55:00\",\n    maintenanceDays: [\n        \"SATURDAY\",\n        \"SUNDAY\",\n    ],\n    mode: \"WEEKLY\",\n    monitorGuids: [\n        \"\u003cGUID-1\u003e\",\n        \"\u003cGUID-2\u003e\",\n    ],\n    startTime: \"2023-12-04T14:15:00\",\n    timeZone: \"US/Hawaii\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nsample_weekly_newrelic_monitor_downtime = newrelic.MonitorDowntime(\"sampleWeeklyNewrelicMonitorDowntime\",\n    end_time=\"2024-01-04T23:55:00\",\n    maintenance_days=[\n        \"SATURDAY\",\n        \"SUNDAY\",\n    ],\n    mode=\"WEEKLY\",\n    monitor_guids=[\n        \"\u003cGUID-1\u003e\",\n        \"\u003cGUID-2\u003e\",\n    ],\n    start_time=\"2023-12-04T14:15:00\",\n    time_zone=\"US/Hawaii\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleWeeklyNewrelicMonitorDowntime = new NewRelic.MonitorDowntime(\"sampleWeeklyNewrelicMonitorDowntime\", new()\n    {\n        EndTime = \"2024-01-04T23:55:00\",\n        MaintenanceDays = new[]\n        {\n            \"SATURDAY\",\n            \"SUNDAY\",\n        },\n        Mode = \"WEEKLY\",\n        MonitorGuids = new[]\n        {\n            \"\u003cGUID-1\u003e\",\n            \"\u003cGUID-2\u003e\",\n        },\n        StartTime = \"2023-12-04T14:15:00\",\n        TimeZone = \"US/Hawaii\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewMonitorDowntime(ctx, \"sampleWeeklyNewrelicMonitorDowntime\", \u0026newrelic.MonitorDowntimeArgs{\n\t\t\tEndTime: pulumi.String(\"2024-01-04T23:55:00\"),\n\t\t\tMaintenanceDays: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"SATURDAY\"),\n\t\t\t\tpulumi.String(\"SUNDAY\"),\n\t\t\t},\n\t\t\tMode: pulumi.String(\"WEEKLY\"),\n\t\t\tMonitorGuids: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"\u003cGUID-1\u003e\"),\n\t\t\t\tpulumi.String(\"\u003cGUID-2\u003e\"),\n\t\t\t},\n\t\t\tStartTime: pulumi.String(\"2023-12-04T14:15:00\"),\n\t\t\tTimeZone:  pulumi.String(\"US/Hawaii\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.MonitorDowntime;\nimport com.pulumi.newrelic.MonitorDowntimeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sampleWeeklyNewrelicMonitorDowntime = new MonitorDowntime(\"sampleWeeklyNewrelicMonitorDowntime\", MonitorDowntimeArgs.builder()        \n            .endTime(\"2024-01-04T23:55:00\")\n            .maintenanceDays(            \n                \"SATURDAY\",\n                \"SUNDAY\")\n            .mode(\"WEEKLY\")\n            .monitorGuids(            \n                \"\u003cGUID-1\u003e\",\n                \"\u003cGUID-2\u003e\")\n            .startTime(\"2023-12-04T14:15:00\")\n            .timeZone(\"US/Hawaii\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sampleWeeklyNewrelicMonitorDowntime:\n    type: newrelic:MonitorDowntime\n    properties:\n      endTime: 2024-01-04T23:55:00\n      maintenanceDays:\n        - SATURDAY\n        - SUNDAY\n      mode: WEEKLY\n      monitorGuids:\n        - \u003cGUID-1\u003e\n        - \u003cGUID-2\u003e\n      startTime: 2023-12-04T14:15:00\n      timeZone: US/Hawaii\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Monthly Monitor Downtime\n\nThe below example illustrates creating a **monthly** monitor downtime.\n\nNote that `frequency` has been specified in the configuration as it is required with monthly monitor downtimes, and `end_repeat` has been specified too, though it is optional. `frequency` has been specified with `days_of_week` comprising both of its nested arguments, `ordinal_day_of_month` and `week_day`; all in accordance with the rules of these arguments specified in the argument reference section above. \n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst sampleMonthlyNewrelicMonitorDowntime = new newrelic.MonitorDowntime(\"sampleMonthlyNewrelicMonitorDowntime\", {\n    endRepeat: {\n        onRepeat: 6,\n    },\n    endTime: \"2024-01-04T19:15:00\",\n    frequency: {\n        daysOfWeek: {\n            ordinalDayOfMonth: \"SECOND\",\n            weekDay: \"SATURDAY\",\n        },\n    },\n    mode: \"MONTHLY\",\n    monitorGuids: [\n        \"\u003cGUID-1\u003e\",\n        \"\u003cGUID-2\u003e\",\n    ],\n    startTime: \"2023-12-04T07:15:00\",\n    timeZone: \"Europe/Dublin\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nsample_monthly_newrelic_monitor_downtime = newrelic.MonitorDowntime(\"sampleMonthlyNewrelicMonitorDowntime\",\n    end_repeat=newrelic.MonitorDowntimeEndRepeatArgs(\n        on_repeat=6,\n    ),\n    end_time=\"2024-01-04T19:15:00\",\n    frequency=newrelic.MonitorDowntimeFrequencyArgs(\n        days_of_week=newrelic.MonitorDowntimeFrequencyDaysOfWeekArgs(\n            ordinal_day_of_month=\"SECOND\",\n            week_day=\"SATURDAY\",\n        ),\n    ),\n    mode=\"MONTHLY\",\n    monitor_guids=[\n        \"\u003cGUID-1\u003e\",\n        \"\u003cGUID-2\u003e\",\n    ],\n    start_time=\"2023-12-04T07:15:00\",\n    time_zone=\"Europe/Dublin\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleMonthlyNewrelicMonitorDowntime = new NewRelic.MonitorDowntime(\"sampleMonthlyNewrelicMonitorDowntime\", new()\n    {\n        EndRepeat = new NewRelic.Inputs.MonitorDowntimeEndRepeatArgs\n        {\n            OnRepeat = 6,\n        },\n        EndTime = \"2024-01-04T19:15:00\",\n        Frequency = new NewRelic.Inputs.MonitorDowntimeFrequencyArgs\n        {\n            DaysOfWeek = new NewRelic.Inputs.MonitorDowntimeFrequencyDaysOfWeekArgs\n            {\n                OrdinalDayOfMonth = \"SECOND\",\n                WeekDay = \"SATURDAY\",\n            },\n        },\n        Mode = \"MONTHLY\",\n        MonitorGuids = new[]\n        {\n            \"\u003cGUID-1\u003e\",\n            \"\u003cGUID-2\u003e\",\n        },\n        StartTime = \"2023-12-04T07:15:00\",\n        TimeZone = \"Europe/Dublin\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewMonitorDowntime(ctx, \"sampleMonthlyNewrelicMonitorDowntime\", \u0026newrelic.MonitorDowntimeArgs{\n\t\t\tEndRepeat: \u0026newrelic.MonitorDowntimeEndRepeatArgs{\n\t\t\t\tOnRepeat: pulumi.Int(6),\n\t\t\t},\n\t\t\tEndTime: pulumi.String(\"2024-01-04T19:15:00\"),\n\t\t\tFrequency: \u0026newrelic.MonitorDowntimeFrequencyArgs{\n\t\t\t\tDaysOfWeek: \u0026newrelic.MonitorDowntimeFrequencyDaysOfWeekArgs{\n\t\t\t\t\tOrdinalDayOfMonth: pulumi.String(\"SECOND\"),\n\t\t\t\t\tWeekDay:           pulumi.String(\"SATURDAY\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tMode: pulumi.String(\"MONTHLY\"),\n\t\t\tMonitorGuids: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"\u003cGUID-1\u003e\"),\n\t\t\t\tpulumi.String(\"\u003cGUID-2\u003e\"),\n\t\t\t},\n\t\t\tStartTime: pulumi.String(\"2023-12-04T07:15:00\"),\n\t\t\tTimeZone:  pulumi.String(\"Europe/Dublin\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.MonitorDowntime;\nimport com.pulumi.newrelic.MonitorDowntimeArgs;\nimport com.pulumi.newrelic.inputs.MonitorDowntimeEndRepeatArgs;\nimport com.pulumi.newrelic.inputs.MonitorDowntimeFrequencyArgs;\nimport com.pulumi.newrelic.inputs.MonitorDowntimeFrequencyDaysOfWeekArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sampleMonthlyNewrelicMonitorDowntime = new MonitorDowntime(\"sampleMonthlyNewrelicMonitorDowntime\", MonitorDowntimeArgs.builder()        \n            .endRepeat(MonitorDowntimeEndRepeatArgs.builder()\n                .onRepeat(6)\n                .build())\n            .endTime(\"2024-01-04T19:15:00\")\n            .frequency(MonitorDowntimeFrequencyArgs.builder()\n                .daysOfWeek(MonitorDowntimeFrequencyDaysOfWeekArgs.builder()\n                    .ordinalDayOfMonth(\"SECOND\")\n                    .weekDay(\"SATURDAY\")\n                    .build())\n                .build())\n            .mode(\"MONTHLY\")\n            .monitorGuids(            \n                \"\u003cGUID-1\u003e\",\n                \"\u003cGUID-2\u003e\")\n            .startTime(\"2023-12-04T07:15:00\")\n            .timeZone(\"Europe/Dublin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sampleMonthlyNewrelicMonitorDowntime:\n    type: newrelic:MonitorDowntime\n    properties:\n      endRepeat:\n        onRepeat: 6\n      endTime: 2024-01-04T19:15:00\n      frequency:\n        daysOfWeek:\n          ordinalDayOfMonth: SECOND\n          weekDay: SATURDAY\n      mode: MONTHLY\n      monitorGuids:\n        - \u003cGUID-1\u003e\n        - \u003cGUID-2\u003e\n      startTime: 2023-12-04T07:15:00\n      timeZone: Europe/Dublin\n```\n\u003c!--End PulumiCodeChooser --\u003e\nHowever, the `frequency` block in monthly monitor downtimes may also be specified with its other nested argument, `days_of_month`, as shown in the example below - though both `days_of_month` and `days_of_week` cannot be specified together, as they are mutually exclusive.\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst sampleMonthlyNewrelicMonitorDowntime = new newrelic.MonitorDowntime(\"sampleMonthlyNewrelicMonitorDowntime\", {\n    endRepeat: {\n        onRepeat: 6,\n    },\n    endTime: \"2024-01-04T19:15:00\",\n    frequency: {\n        daysOfMonths: [\n            3,\n            6,\n            14,\n            23,\n        ],\n    },\n    mode: \"MONTHLY\",\n    monitorGuids: [\n        \"\u003cGUID-1\u003e\",\n        \"\u003cGUID-2\u003e\",\n    ],\n    startTime: \"2023-12-04T07:15:00\",\n    timeZone: \"Europe/Dublin\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nsample_monthly_newrelic_monitor_downtime = newrelic.MonitorDowntime(\"sampleMonthlyNewrelicMonitorDowntime\",\n    end_repeat=newrelic.MonitorDowntimeEndRepeatArgs(\n        on_repeat=6,\n    ),\n    end_time=\"2024-01-04T19:15:00\",\n    frequency=newrelic.MonitorDowntimeFrequencyArgs(\n        days_of_months=[\n            3,\n            6,\n            14,\n            23,\n        ],\n    ),\n    mode=\"MONTHLY\",\n    monitor_guids=[\n        \"\u003cGUID-1\u003e\",\n        \"\u003cGUID-2\u003e\",\n    ],\n    start_time=\"2023-12-04T07:15:00\",\n    time_zone=\"Europe/Dublin\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleMonthlyNewrelicMonitorDowntime = new NewRelic.MonitorDowntime(\"sampleMonthlyNewrelicMonitorDowntime\", new()\n    {\n        EndRepeat = new NewRelic.Inputs.MonitorDowntimeEndRepeatArgs\n        {\n            OnRepeat = 6,\n        },\n        EndTime = \"2024-01-04T19:15:00\",\n        Frequency = new NewRelic.Inputs.MonitorDowntimeFrequencyArgs\n        {\n            DaysOfMonths = new[]\n            {\n                3,\n                6,\n                14,\n                23,\n            },\n        },\n        Mode = \"MONTHLY\",\n        MonitorGuids = new[]\n        {\n            \"\u003cGUID-1\u003e\",\n            \"\u003cGUID-2\u003e\",\n        },\n        StartTime = \"2023-12-04T07:15:00\",\n        TimeZone = \"Europe/Dublin\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewMonitorDowntime(ctx, \"sampleMonthlyNewrelicMonitorDowntime\", \u0026newrelic.MonitorDowntimeArgs{\n\t\t\tEndRepeat: \u0026newrelic.MonitorDowntimeEndRepeatArgs{\n\t\t\t\tOnRepeat: pulumi.Int(6),\n\t\t\t},\n\t\t\tEndTime: pulumi.String(\"2024-01-04T19:15:00\"),\n\t\t\tFrequency: \u0026newrelic.MonitorDowntimeFrequencyArgs{\n\t\t\t\tDaysOfMonths: pulumi.IntArray{\n\t\t\t\t\tpulumi.Int(3),\n\t\t\t\t\tpulumi.Int(6),\n\t\t\t\t\tpulumi.Int(14),\n\t\t\t\t\tpulumi.Int(23),\n\t\t\t\t},\n\t\t\t},\n\t\t\tMode: pulumi.String(\"MONTHLY\"),\n\t\t\tMonitorGuids: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"\u003cGUID-1\u003e\"),\n\t\t\t\tpulumi.String(\"\u003cGUID-2\u003e\"),\n\t\t\t},\n\t\t\tStartTime: pulumi.String(\"2023-12-04T07:15:00\"),\n\t\t\tTimeZone:  pulumi.String(\"Europe/Dublin\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.MonitorDowntime;\nimport com.pulumi.newrelic.MonitorDowntimeArgs;\nimport com.pulumi.newrelic.inputs.MonitorDowntimeEndRepeatArgs;\nimport com.pulumi.newrelic.inputs.MonitorDowntimeFrequencyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sampleMonthlyNewrelicMonitorDowntime = new MonitorDowntime(\"sampleMonthlyNewrelicMonitorDowntime\", MonitorDowntimeArgs.builder()        \n            .endRepeat(MonitorDowntimeEndRepeatArgs.builder()\n                .onRepeat(6)\n                .build())\n            .endTime(\"2024-01-04T19:15:00\")\n            .frequency(MonitorDowntimeFrequencyArgs.builder()\n                .daysOfMonths(                \n                    3,\n                    6,\n                    14,\n                    23)\n                .build())\n            .mode(\"MONTHLY\")\n            .monitorGuids(            \n                \"\u003cGUID-1\u003e\",\n                \"\u003cGUID-2\u003e\")\n            .startTime(\"2023-12-04T07:15:00\")\n            .timeZone(\"Europe/Dublin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sampleMonthlyNewrelicMonitorDowntime:\n    type: newrelic:MonitorDowntime\n    properties:\n      endRepeat:\n        onRepeat: 6\n      endTime: 2024-01-04T19:15:00\n      frequency:\n        daysOfMonths:\n          - 3\n          - 6\n          - 14\n          - 23\n      mode: MONTHLY\n      monitorGuids:\n        - \u003cGUID-1\u003e\n        - \u003cGUID-2\u003e\n      startTime: 2023-12-04T07:15:00\n      timeZone: Europe/Dublin\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nA monitor downtime can be imported into Terraform configuration using its `guid`, i.e.\n\nbash\n\n```sh\n$ pulumi import newrelic:index/monitorDowntime:MonitorDowntime monitor \u003cguid\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account in which the monitor downtime would be created. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` (or the `account_id` specified in the `provider{}`), if not specified.\n"
                },
                "endRepeat": {
                    "$ref": "#/types/newrelic:index/MonitorDowntimeEndRepeat:MonitorDowntimeEndRepeat",
                    "description": "Options which may be used to specify when the repeat cycle of the monitor should end. This argument comprises the following nested arguments -\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "The time at which the monitor downtime would end operating, a timestamp specified in the ISO 8601 format without the offset/timezone - for instance, `2024-01-05T14:27:07`.\n"
                },
                "frequency": {
                    "$ref": "#/types/newrelic:index/MonitorDowntimeFrequency:MonitorDowntimeFrequency",
                    "description": "Options which may be used to specify the configuration of a monthly monitor downtime. This argument comprises the following nested arguments -\n"
                },
                "maintenanceDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of days on which weekly monitor downtimes would function. Valid values which go into this list would be `\"SUNDAY\"`, `\"MONDAY\"`, `\"TUESDAY\"`, `\"WEDNESDAY\"`, `\"THURSDAY\"`, `\"FRIDAY\"` and/or `\"SATURDAY\"`.\n\n\u003e **NOTE:** `maintenance_days` **can only be used with the mode** `WEEKLY`, and **is a required argument** with weekly monitor downtimes (i.e. if the `mode` is `WEEKLY`).\n"
                },
                "mode": {
                    "type": "string",
                    "description": "One of the four modes of operation of monitor downtimes - `ONE_TIME`, `DAILY`, `MONTHLY` or `WEEKLY`.\n"
                },
                "monitorGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of GUIDs of synthetic monitors the monitor downtime would need to be applied to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the monitor downtime to be created.\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "The time at which the monitor downtime would begin to operate, a timestamp specified in the ISO 8601 format without the offset/timezone - for instance, `2023-12-20T10:48:53`.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The timezone that applies to the Monitor Downtime schedule.\n"
                }
            },
            "required": [
                "accountId",
                "endTime",
                "mode",
                "name",
                "startTime",
                "timeZone"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account in which the monitor downtime would be created. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` (or the `account_id` specified in the `provider{}`), if not specified.\n"
                },
                "endRepeat": {
                    "$ref": "#/types/newrelic:index/MonitorDowntimeEndRepeat:MonitorDowntimeEndRepeat",
                    "description": "Options which may be used to specify when the repeat cycle of the monitor should end. This argument comprises the following nested arguments -\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "The time at which the monitor downtime would end operating, a timestamp specified in the ISO 8601 format without the offset/timezone - for instance, `2024-01-05T14:27:07`.\n"
                },
                "frequency": {
                    "$ref": "#/types/newrelic:index/MonitorDowntimeFrequency:MonitorDowntimeFrequency",
                    "description": "Options which may be used to specify the configuration of a monthly monitor downtime. This argument comprises the following nested arguments -\n"
                },
                "maintenanceDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of days on which weekly monitor downtimes would function. Valid values which go into this list would be `\"SUNDAY\"`, `\"MONDAY\"`, `\"TUESDAY\"`, `\"WEDNESDAY\"`, `\"THURSDAY\"`, `\"FRIDAY\"` and/or `\"SATURDAY\"`.\n\n\u003e **NOTE:** `maintenance_days` **can only be used with the mode** `WEEKLY`, and **is a required argument** with weekly monitor downtimes (i.e. if the `mode` is `WEEKLY`).\n"
                },
                "mode": {
                    "type": "string",
                    "description": "One of the four modes of operation of monitor downtimes - `ONE_TIME`, `DAILY`, `MONTHLY` or `WEEKLY`.\n",
                    "willReplaceOnChanges": true
                },
                "monitorGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of GUIDs of synthetic monitors the monitor downtime would need to be applied to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the monitor downtime to be created.\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "The time at which the monitor downtime would begin to operate, a timestamp specified in the ISO 8601 format without the offset/timezone - for instance, `2023-12-20T10:48:53`.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The timezone that applies to the Monitor Downtime schedule.\n"
                }
            },
            "requiredInputs": [
                "endTime",
                "mode",
                "startTime",
                "timeZone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitorDowntime resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account in which the monitor downtime would be created. Defaults to the value of the environment variable `NEW_RELIC_ACCOUNT_ID` (or the `account_id` specified in the `provider{}`), if not specified.\n"
                    },
                    "endRepeat": {
                        "$ref": "#/types/newrelic:index/MonitorDowntimeEndRepeat:MonitorDowntimeEndRepeat",
                        "description": "Options which may be used to specify when the repeat cycle of the monitor should end. This argument comprises the following nested arguments -\n"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "The time at which the monitor downtime would end operating, a timestamp specified in the ISO 8601 format without the offset/timezone - for instance, `2024-01-05T14:27:07`.\n"
                    },
                    "frequency": {
                        "$ref": "#/types/newrelic:index/MonitorDowntimeFrequency:MonitorDowntimeFrequency",
                        "description": "Options which may be used to specify the configuration of a monthly monitor downtime. This argument comprises the following nested arguments -\n"
                    },
                    "maintenanceDays": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of days on which weekly monitor downtimes would function. Valid values which go into this list would be `\"SUNDAY\"`, `\"MONDAY\"`, `\"TUESDAY\"`, `\"WEDNESDAY\"`, `\"THURSDAY\"`, `\"FRIDAY\"` and/or `\"SATURDAY\"`.\n\n\u003e **NOTE:** `maintenance_days` **can only be used with the mode** `WEEKLY`, and **is a required argument** with weekly monitor downtimes (i.e. if the `mode` is `WEEKLY`).\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "One of the four modes of operation of monitor downtimes - `ONE_TIME`, `DAILY`, `MONTHLY` or `WEEKLY`.\n",
                        "willReplaceOnChanges": true
                    },
                    "monitorGuids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of GUIDs of synthetic monitors the monitor downtime would need to be applied to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the monitor downtime to be created.\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "The time at which the monitor downtime would begin to operate, a timestamp specified in the ISO 8601 format without the offset/timezone - for instance, `2023-12-20T10:48:53`.\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "The timezone that applies to the Monitor Downtime schedule.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/notificationChannel:NotificationChannel": {
            "description": "Use this resource to create and manage New Relic notification channels. Details regarding supported products and permissions can be found [here](https://docs.newrelic.com/docs/alerts-applied-intelligence/notifications/destinations).\n\nA channel is an entity that is used to configure notifications. It is also called a message template. It is a separate entity from workflows, but a channel is required in order to create a workflow.\n\n## Example Usage\n\n##### [Webhook](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-channels/#webhook)\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.NotificationChannel(\"foo\", {\n    accountId: 12345678,\n    destinationId: \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product: \"IINT\",\n    properties: [{\n        key: \"payload\",\n        label: \"Payload Template\",\n        value: \"name: {{ foo }}\",\n    }],\n    type: \"WEBHOOK\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.NotificationChannel(\"foo\",\n    account_id=12345678,\n    destination_id=\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product=\"IINT\",\n    properties=[newrelic.NotificationChannelPropertyArgs(\n        key=\"payload\",\n        label=\"Payload Template\",\n        value=\"name: {{ foo }}\",\n    )],\n    type=\"WEBHOOK\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.NotificationChannel(\"foo\", new()\n    {\n        AccountId = 12345678,\n        DestinationId = \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n        Product = \"IINT\",\n        Properties = new[]\n        {\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"payload\",\n                Label = \"Payload Template\",\n                Value = \"name: {{ foo }}\",\n            },\n        },\n        Type = \"WEBHOOK\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewNotificationChannel(ctx, \"foo\", \u0026newrelic.NotificationChannelArgs{\n\t\t\tAccountId:     pulumi.Int(12345678),\n\t\t\tDestinationId: pulumi.String(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\"),\n\t\t\tProduct:       pulumi.String(\"IINT\"),\n\t\t\tProperties: newrelic.NotificationChannelPropertyArray{\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"payload\"),\n\t\t\t\t\tLabel: pulumi.String(\"Payload Template\"),\n\t\t\t\t\tValue: pulumi.String(\"name: {{ foo }}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"WEBHOOK\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NotificationChannel;\nimport com.pulumi.newrelic.NotificationChannelArgs;\nimport com.pulumi.newrelic.inputs.NotificationChannelPropertyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new NotificationChannel(\"foo\", NotificationChannelArgs.builder()        \n            .accountId(12345678)\n            .destinationId(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\")\n            .product(\"IINT\")\n            .properties(NotificationChannelPropertyArgs.builder()\n                .key(\"payload\")\n                .label(\"Payload Template\")\n                .value(\"name: {{ foo }}\")\n                .build())\n            .type(\"WEBHOOK\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:NotificationChannel\n    properties:\n      accountId: 1.2345678e+07\n      destinationId: 00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\n      product: IINT\n      # (Workflows)\n      #     // must be valid json\n      properties:\n        - key: payload\n          label: Payload Template\n          value: 'name: {{ foo }}'\n      type: WEBHOOK\n```\n\u003c!--End PulumiCodeChooser --\u003e\nSee additional examples.\n\n## Additional Examples\n\n\u003e **NOTE:** We support all properties. The mentioned properties are just an example.\n\n##### [ServiceNow](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-channels/#servicenow)\nTo see the properties’ keys for your account, check ServiceNow incidents table.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.NotificationChannel(\"foo\", {\n    accountId: 12345678,\n    destinationId: \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product: \"IINT\",\n    properties: [\n        {\n            key: \"description\",\n            value: \"General description\",\n        },\n        {\n            key: \"short_description\",\n            value: \"Short description\",\n        },\n    ],\n    type: \"SERVICENOW_INCIDENTS\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.NotificationChannel(\"foo\",\n    account_id=12345678,\n    destination_id=\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product=\"IINT\",\n    properties=[\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"description\",\n            value=\"General description\",\n        ),\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"short_description\",\n            value=\"Short description\",\n        ),\n    ],\n    type=\"SERVICENOW_INCIDENTS\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.NotificationChannel(\"foo\", new()\n    {\n        AccountId = 12345678,\n        DestinationId = \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n        Product = \"IINT\",\n        Properties = new[]\n        {\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"description\",\n                Value = \"General description\",\n            },\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"short_description\",\n                Value = \"Short description\",\n            },\n        },\n        Type = \"SERVICENOW_INCIDENTS\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewNotificationChannel(ctx, \"foo\", \u0026newrelic.NotificationChannelArgs{\n\t\t\tAccountId:     pulumi.Int(12345678),\n\t\t\tDestinationId: pulumi.String(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\"),\n\t\t\tProduct:       pulumi.String(\"IINT\"),\n\t\t\tProperties: newrelic.NotificationChannelPropertyArray{\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"description\"),\n\t\t\t\t\tValue: pulumi.String(\"General description\"),\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"short_description\"),\n\t\t\t\t\tValue: pulumi.String(\"Short description\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"SERVICENOW_INCIDENTS\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NotificationChannel;\nimport com.pulumi.newrelic.NotificationChannelArgs;\nimport com.pulumi.newrelic.inputs.NotificationChannelPropertyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new NotificationChannel(\"foo\", NotificationChannelArgs.builder()        \n            .accountId(12345678)\n            .destinationId(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\")\n            .product(\"IINT\")\n            .properties(            \n                NotificationChannelPropertyArgs.builder()\n                    .key(\"description\")\n                    .value(\"General description\")\n                    .build(),\n                NotificationChannelPropertyArgs.builder()\n                    .key(\"short_description\")\n                    .value(\"Short description\")\n                    .build())\n            .type(\"SERVICENOW_INCIDENTS\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:NotificationChannel\n    properties:\n      accountId: 1.2345678e+07\n      destinationId: 00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\n      product: IINT\n      properties:\n        - key: description\n          value: General description\n        - key: short_description\n          value: Short description\n      type: SERVICENOW_INCIDENTS\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n##### [Email](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-channels/#email)\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.NotificationChannel(\"foo\", {\n    accountId: 12345678,\n    destinationId: \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product: \"IINT\",\n    properties: [\n        {\n            key: \"subject\",\n            value: \"New Subject Title\",\n        },\n        {\n            key: \"customDetailsEmail\",\n            value: \"issue id - {{issueId}}\",\n        },\n    ],\n    type: \"EMAIL\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.NotificationChannel(\"foo\",\n    account_id=12345678,\n    destination_id=\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product=\"IINT\",\n    properties=[\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"subject\",\n            value=\"New Subject Title\",\n        ),\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"customDetailsEmail\",\n            value=\"issue id - {{issueId}}\",\n        ),\n    ],\n    type=\"EMAIL\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.NotificationChannel(\"foo\", new()\n    {\n        AccountId = 12345678,\n        DestinationId = \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n        Product = \"IINT\",\n        Properties = new[]\n        {\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"subject\",\n                Value = \"New Subject Title\",\n            },\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"customDetailsEmail\",\n                Value = \"issue id - {{issueId}}\",\n            },\n        },\n        Type = \"EMAIL\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewNotificationChannel(ctx, \"foo\", \u0026newrelic.NotificationChannelArgs{\n\t\t\tAccountId:     pulumi.Int(12345678),\n\t\t\tDestinationId: pulumi.String(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\"),\n\t\t\tProduct:       pulumi.String(\"IINT\"),\n\t\t\tProperties: newrelic.NotificationChannelPropertyArray{\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"subject\"),\n\t\t\t\t\tValue: pulumi.String(\"New Subject Title\"),\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"customDetailsEmail\"),\n\t\t\t\t\tValue: pulumi.String(\"issue id - {{issueId}}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"EMAIL\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NotificationChannel;\nimport com.pulumi.newrelic.NotificationChannelArgs;\nimport com.pulumi.newrelic.inputs.NotificationChannelPropertyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new NotificationChannel(\"foo\", NotificationChannelArgs.builder()        \n            .accountId(12345678)\n            .destinationId(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\")\n            .product(\"IINT\")\n            .properties(            \n                NotificationChannelPropertyArgs.builder()\n                    .key(\"subject\")\n                    .value(\"New Subject Title\")\n                    .build(),\n                NotificationChannelPropertyArgs.builder()\n                    .key(\"customDetailsEmail\")\n                    .value(\"issue id - {{issueId}}\")\n                    .build())\n            .type(\"EMAIL\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:NotificationChannel\n    properties:\n      accountId: 1.2345678e+07\n      destinationId: 00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\n      product: IINT\n      properties:\n        - key: subject\n          value: New Subject Title\n        - key: customDetailsEmail\n          value: issue id - {{issueId}}\n      type: EMAIL\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n##### [Jira Classic](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-channels/#jira)\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.NotificationChannel(\"foo\", {\n    accountId: 12345678,\n    destinationId: \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product: \"ERROR_TRACKING\",\n    properties: [\n        {\n            key: \"project\",\n            value: \"10000\",\n        },\n        {\n            key: \"issuetype\",\n            value: \"10004\",\n        },\n        {\n            key: \"description\",\n            value: \"Issue ID: {{ issueId }}\",\n        },\n        {\n            key: \"summary\",\n            value: \"{{ annotations.title.[0] }}\",\n        },\n    ],\n    type: \"JIRA_CLASSIC\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.NotificationChannel(\"foo\",\n    account_id=12345678,\n    destination_id=\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product=\"ERROR_TRACKING\",\n    properties=[\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"project\",\n            value=\"10000\",\n        ),\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"issuetype\",\n            value=\"10004\",\n        ),\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"description\",\n            value=\"Issue ID: {{ issueId }}\",\n        ),\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"summary\",\n            value=\"{{ annotations.title.[0] }}\",\n        ),\n    ],\n    type=\"JIRA_CLASSIC\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.NotificationChannel(\"foo\", new()\n    {\n        AccountId = 12345678,\n        DestinationId = \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n        Product = \"ERROR_TRACKING\",\n        Properties = new[]\n        {\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"project\",\n                Value = \"10000\",\n            },\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"issuetype\",\n                Value = \"10004\",\n            },\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"description\",\n                Value = \"Issue ID: {{ issueId }}\",\n            },\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"summary\",\n                Value = \"{{ annotations.title.[0] }}\",\n            },\n        },\n        Type = \"JIRA_CLASSIC\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewNotificationChannel(ctx, \"foo\", \u0026newrelic.NotificationChannelArgs{\n\t\t\tAccountId:     pulumi.Int(12345678),\n\t\t\tDestinationId: pulumi.String(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\"),\n\t\t\tProduct:       pulumi.String(\"ERROR_TRACKING\"),\n\t\t\tProperties: newrelic.NotificationChannelPropertyArray{\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"project\"),\n\t\t\t\t\tValue: pulumi.String(\"10000\"),\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"issuetype\"),\n\t\t\t\t\tValue: pulumi.String(\"10004\"),\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"description\"),\n\t\t\t\t\tValue: pulumi.String(\"Issue ID: {{ issueId }}\"),\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"summary\"),\n\t\t\t\t\tValue: pulumi.String(\"{{ annotations.title.[0] }}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"JIRA_CLASSIC\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NotificationChannel;\nimport com.pulumi.newrelic.NotificationChannelArgs;\nimport com.pulumi.newrelic.inputs.NotificationChannelPropertyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new NotificationChannel(\"foo\", NotificationChannelArgs.builder()        \n            .accountId(12345678)\n            .destinationId(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\")\n            .product(\"ERROR_TRACKING\")\n            .properties(            \n                NotificationChannelPropertyArgs.builder()\n                    .key(\"project\")\n                    .value(\"10000\")\n                    .build(),\n                NotificationChannelPropertyArgs.builder()\n                    .key(\"issuetype\")\n                    .value(\"10004\")\n                    .build(),\n                NotificationChannelPropertyArgs.builder()\n                    .key(\"description\")\n                    .value(\"Issue ID: {{ issueId }}\")\n                    .build(),\n                NotificationChannelPropertyArgs.builder()\n                    .key(\"summary\")\n                    .value(\"{{ annotations.title.[0] }}\")\n                    .build())\n            .type(\"JIRA_CLASSIC\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:NotificationChannel\n    properties:\n      accountId: 1.2345678e+07\n      destinationId: 00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\n      product: ERROR_TRACKING\n      properties:\n        - key: project\n          value: '10000'\n        - key: issuetype\n          value: '10004'\n        - key: description\n          value: 'Issue ID: {{ issueId }}'\n        - key: summary\n          value: '{{ annotations.title.[0] }}'\n      type: JIRA_CLASSIC\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n##### [PagerDuty with account integration](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-channels/#pagerduty)\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.NotificationChannel(\"foo\", {\n    accountId: 12345678,\n    destinationId: \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product: \"IINT\",\n    properties: [\n        {\n            key: \"summary\",\n            value: \"General summary\",\n        },\n        {\n            key: \"service\",\n            label: \"Service Name\",\n            value: \"PTQK3FM\",\n        },\n        {\n            key: \"email\",\n            value: \"example@email.com\",\n        },\n        {\n            key: \"customDetails\",\n            value: `    {\n    \"id\":{{json issueId}},\n    \"IssueURL\":{{json issuePageUrl}},\n    \"NewRelic priority\":{{json priority}},\n    \"Total Incidents\":{{json totalIncidents}},\n    \"Impacted Entities\":\"{{#each entitiesData.names}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Runbook\":\"{{#each accumulations.runbookUrl}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Description\":\"{{#each annotations.description}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"isCorrelated\":{{json isCorrelated}},\n    \"Alert Policy Names\":\"{{#each accumulations.policyName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Alert Condition Names\":\"{{#each accumulations.conditionName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Workflow Name\":{{json workflowName}}\n    }\n\n`,\n        },\n    ],\n    type: \"PAGERDUTY_ACCOUNT_INTEGRATION\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.NotificationChannel(\"foo\",\n    account_id=12345678,\n    destination_id=\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product=\"IINT\",\n    properties=[\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"summary\",\n            value=\"General summary\",\n        ),\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"service\",\n            label=\"Service Name\",\n            value=\"PTQK3FM\",\n        ),\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"email\",\n            value=\"example@email.com\",\n        ),\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"customDetails\",\n            value=\"\"\"    {\n    \"id\":{{json issueId}},\n    \"IssueURL\":{{json issuePageUrl}},\n    \"NewRelic priority\":{{json priority}},\n    \"Total Incidents\":{{json totalIncidents}},\n    \"Impacted Entities\":\"{{#each entitiesData.names}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Runbook\":\"{{#each accumulations.runbookUrl}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Description\":\"{{#each annotations.description}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"isCorrelated\":{{json isCorrelated}},\n    \"Alert Policy Names\":\"{{#each accumulations.policyName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Alert Condition Names\":\"{{#each accumulations.conditionName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Workflow Name\":{{json workflowName}}\n    }\n\n\"\"\",\n        ),\n    ],\n    type=\"PAGERDUTY_ACCOUNT_INTEGRATION\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.NotificationChannel(\"foo\", new()\n    {\n        AccountId = 12345678,\n        DestinationId = \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n        Product = \"IINT\",\n        Properties = new[]\n        {\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"summary\",\n                Value = \"General summary\",\n            },\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"service\",\n                Label = \"Service Name\",\n                Value = \"PTQK3FM\",\n            },\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"email\",\n                Value = \"example@email.com\",\n            },\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"customDetails\",\n                Value = @\"    {\n    \"\"id\"\":{{json issueId}},\n    \"\"IssueURL\"\":{{json issuePageUrl}},\n    \"\"NewRelic priority\"\":{{json priority}},\n    \"\"Total Incidents\"\":{{json totalIncidents}},\n    \"\"Impacted Entities\"\":\"\"{{#each entitiesData.names}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\"\",\n    \"\"Runbook\"\":\"\"{{#each accumulations.runbookUrl}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\"\",\n    \"\"Description\"\":\"\"{{#each annotations.description}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\"\",\n    \"\"isCorrelated\"\":{{json isCorrelated}},\n    \"\"Alert Policy Names\"\":\"\"{{#each accumulations.policyName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\"\",\n    \"\"Alert Condition Names\"\":\"\"{{#each accumulations.conditionName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\"\",\n    \"\"Workflow Name\"\":{{json workflowName}}\n    }\n\n\",\n            },\n        },\n        Type = \"PAGERDUTY_ACCOUNT_INTEGRATION\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewNotificationChannel(ctx, \"foo\", \u0026newrelic.NotificationChannelArgs{\n\t\t\tAccountId:     pulumi.Int(12345678),\n\t\t\tDestinationId: pulumi.String(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\"),\n\t\t\tProduct:       pulumi.String(\"IINT\"),\n\t\t\tProperties: newrelic.NotificationChannelPropertyArray{\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"summary\"),\n\t\t\t\t\tValue: pulumi.String(\"General summary\"),\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"service\"),\n\t\t\t\t\tLabel: pulumi.String(\"Service Name\"),\n\t\t\t\t\tValue: pulumi.String(\"PTQK3FM\"),\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"email\"),\n\t\t\t\t\tValue: pulumi.String(\"example@email.com\"),\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey: pulumi.String(\"customDetails\"),\n\t\t\t\t\tValue: pulumi.String(`    {\n    \"id\":{{json issueId}},\n    \"IssueURL\":{{json issuePageUrl}},\n    \"NewRelic priority\":{{json priority}},\n    \"Total Incidents\":{{json totalIncidents}},\n    \"Impacted Entities\":\"{{#each entitiesData.names}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Runbook\":\"{{#each accumulations.runbookUrl}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Description\":\"{{#each annotations.description}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"isCorrelated\":{{json isCorrelated}},\n    \"Alert Policy Names\":\"{{#each accumulations.policyName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Alert Condition Names\":\"{{#each accumulations.conditionName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Workflow Name\":{{json workflowName}}\n    }\n\n`),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"PAGERDUTY_ACCOUNT_INTEGRATION\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NotificationChannel;\nimport com.pulumi.newrelic.NotificationChannelArgs;\nimport com.pulumi.newrelic.inputs.NotificationChannelPropertyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new NotificationChannel(\"foo\", NotificationChannelArgs.builder()        \n            .accountId(12345678)\n            .destinationId(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\")\n            .product(\"IINT\")\n            .properties(            \n                NotificationChannelPropertyArgs.builder()\n                    .key(\"summary\")\n                    .value(\"General summary\")\n                    .build(),\n                NotificationChannelPropertyArgs.builder()\n                    .key(\"service\")\n                    .label(\"Service Name\")\n                    .value(\"PTQK3FM\")\n                    .build(),\n                NotificationChannelPropertyArgs.builder()\n                    .key(\"email\")\n                    .value(\"example@email.com\")\n                    .build(),\n                NotificationChannelPropertyArgs.builder()\n                    .key(\"customDetails\")\n                    .value(\"\"\"\n    {\n    \"id\":{{json issueId}},\n    \"IssueURL\":{{json issuePageUrl}},\n    \"NewRelic priority\":{{json priority}},\n    \"Total Incidents\":{{json totalIncidents}},\n    \"Impacted Entities\":\"{{#each entitiesData.names}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Runbook\":\"{{#each accumulations.runbookUrl}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Description\":\"{{#each annotations.description}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"isCorrelated\":{{json isCorrelated}},\n    \"Alert Policy Names\":\"{{#each accumulations.policyName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Alert Condition Names\":\"{{#each accumulations.conditionName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Workflow Name\":{{json workflowName}}\n    }\n\n                    \"\"\")\n                    .build())\n            .type(\"PAGERDUTY_ACCOUNT_INTEGRATION\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:NotificationChannel\n    properties:\n      accountId: 1.2345678e+07\n      destinationId: 00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\n      product: IINT\n      properties:\n        - key: summary\n          value: General summary\n        - key: service\n          label: Service Name\n          value: PTQK3FM\n        - key: email\n          value: example@email.com\n        - key: customDetails\n          value: |2+\n                {\n                \"id\":{{json issueId}},\n                \"IssueURL\":{{json issuePageUrl}},\n                \"NewRelic priority\":{{json priority}},\n                \"Total Incidents\":{{json totalIncidents}},\n                \"Impacted Entities\":\"{{#each entitiesData.names}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n                \"Runbook\":\"{{#each accumulations.runbookUrl}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n                \"Description\":\"{{#each annotations.description}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n                \"isCorrelated\":{{json isCorrelated}},\n                \"Alert Policy Names\":\"{{#each accumulations.policyName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n                \"Alert Condition Names\":\"{{#each accumulations.conditionName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n                \"Workflow Name\":{{json workflowName}}\n                }\n\n      type: PAGERDUTY_ACCOUNT_INTEGRATION\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n##### [PagerDuty with service integration](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-channels/#pagerduty)\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.NotificationChannel(\"foo\", {\n    accountId: 12345678,\n    destinationId: \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product: \"IINT\",\n    properties: [\n        {\n            key: \"summary\",\n            value: \"General summary\",\n        },\n        {\n            key: \"customDetails\",\n            value: `    {\n    \"id\":{{json issueId}},\n    \"IssueURL\":{{json issuePageUrl}},\n    \"NewRelic priority\":{{json priority}},\n    \"Total Incidents\":{{json totalIncidents}},\n    \"Impacted Entities\":\"{{#each entitiesData.names}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Runbook\":\"{{#each accumulations.runbookUrl}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Description\":\"{{#each annotations.description}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"isCorrelated\":{{json isCorrelated}},\n    \"Alert Policy Names\":\"{{#each accumulations.policyName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Alert Condition Names\":\"{{#each accumulations.conditionName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Workflow Name\":{{json workflowName}}\n    }\n\n`,\n        },\n    ],\n    type: \"PAGERDUTY_SERVICE_INTEGRATION\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.NotificationChannel(\"foo\",\n    account_id=12345678,\n    destination_id=\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product=\"IINT\",\n    properties=[\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"summary\",\n            value=\"General summary\",\n        ),\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"customDetails\",\n            value=\"\"\"    {\n    \"id\":{{json issueId}},\n    \"IssueURL\":{{json issuePageUrl}},\n    \"NewRelic priority\":{{json priority}},\n    \"Total Incidents\":{{json totalIncidents}},\n    \"Impacted Entities\":\"{{#each entitiesData.names}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Runbook\":\"{{#each accumulations.runbookUrl}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Description\":\"{{#each annotations.description}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"isCorrelated\":{{json isCorrelated}},\n    \"Alert Policy Names\":\"{{#each accumulations.policyName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Alert Condition Names\":\"{{#each accumulations.conditionName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Workflow Name\":{{json workflowName}}\n    }\n\n\"\"\",\n        ),\n    ],\n    type=\"PAGERDUTY_SERVICE_INTEGRATION\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.NotificationChannel(\"foo\", new()\n    {\n        AccountId = 12345678,\n        DestinationId = \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n        Product = \"IINT\",\n        Properties = new[]\n        {\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"summary\",\n                Value = \"General summary\",\n            },\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"customDetails\",\n                Value = @\"    {\n    \"\"id\"\":{{json issueId}},\n    \"\"IssueURL\"\":{{json issuePageUrl}},\n    \"\"NewRelic priority\"\":{{json priority}},\n    \"\"Total Incidents\"\":{{json totalIncidents}},\n    \"\"Impacted Entities\"\":\"\"{{#each entitiesData.names}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\"\",\n    \"\"Runbook\"\":\"\"{{#each accumulations.runbookUrl}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\"\",\n    \"\"Description\"\":\"\"{{#each annotations.description}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\"\",\n    \"\"isCorrelated\"\":{{json isCorrelated}},\n    \"\"Alert Policy Names\"\":\"\"{{#each accumulations.policyName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\"\",\n    \"\"Alert Condition Names\"\":\"\"{{#each accumulations.conditionName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\"\",\n    \"\"Workflow Name\"\":{{json workflowName}}\n    }\n\n\",\n            },\n        },\n        Type = \"PAGERDUTY_SERVICE_INTEGRATION\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewNotificationChannel(ctx, \"foo\", \u0026newrelic.NotificationChannelArgs{\n\t\t\tAccountId:     pulumi.Int(12345678),\n\t\t\tDestinationId: pulumi.String(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\"),\n\t\t\tProduct:       pulumi.String(\"IINT\"),\n\t\t\tProperties: newrelic.NotificationChannelPropertyArray{\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"summary\"),\n\t\t\t\t\tValue: pulumi.String(\"General summary\"),\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey: pulumi.String(\"customDetails\"),\n\t\t\t\t\tValue: pulumi.String(`    {\n    \"id\":{{json issueId}},\n    \"IssueURL\":{{json issuePageUrl}},\n    \"NewRelic priority\":{{json priority}},\n    \"Total Incidents\":{{json totalIncidents}},\n    \"Impacted Entities\":\"{{#each entitiesData.names}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Runbook\":\"{{#each accumulations.runbookUrl}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Description\":\"{{#each annotations.description}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"isCorrelated\":{{json isCorrelated}},\n    \"Alert Policy Names\":\"{{#each accumulations.policyName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Alert Condition Names\":\"{{#each accumulations.conditionName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Workflow Name\":{{json workflowName}}\n    }\n\n`),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"PAGERDUTY_SERVICE_INTEGRATION\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NotificationChannel;\nimport com.pulumi.newrelic.NotificationChannelArgs;\nimport com.pulumi.newrelic.inputs.NotificationChannelPropertyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new NotificationChannel(\"foo\", NotificationChannelArgs.builder()        \n            .accountId(12345678)\n            .destinationId(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\")\n            .product(\"IINT\")\n            .properties(            \n                NotificationChannelPropertyArgs.builder()\n                    .key(\"summary\")\n                    .value(\"General summary\")\n                    .build(),\n                NotificationChannelPropertyArgs.builder()\n                    .key(\"customDetails\")\n                    .value(\"\"\"\n    {\n    \"id\":{{json issueId}},\n    \"IssueURL\":{{json issuePageUrl}},\n    \"NewRelic priority\":{{json priority}},\n    \"Total Incidents\":{{json totalIncidents}},\n    \"Impacted Entities\":\"{{#each entitiesData.names}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Runbook\":\"{{#each accumulations.runbookUrl}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Description\":\"{{#each annotations.description}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"isCorrelated\":{{json isCorrelated}},\n    \"Alert Policy Names\":\"{{#each accumulations.policyName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Alert Condition Names\":\"{{#each accumulations.conditionName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n    \"Workflow Name\":{{json workflowName}}\n    }\n\n                    \"\"\")\n                    .build())\n            .type(\"PAGERDUTY_SERVICE_INTEGRATION\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:NotificationChannel\n    properties:\n      accountId: 1.2345678e+07\n      destinationId: 00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\n      product: IINT\n      properties:\n        - key: summary\n          value: General summary\n        - key: customDetails\n          value: |2+\n                {\n                \"id\":{{json issueId}},\n                \"IssueURL\":{{json issuePageUrl}},\n                \"NewRelic priority\":{{json priority}},\n                \"Total Incidents\":{{json totalIncidents}},\n                \"Impacted Entities\":\"{{#each entitiesData.names}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n                \"Runbook\":\"{{#each accumulations.runbookUrl}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n                \"Description\":\"{{#each annotations.description}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n                \"isCorrelated\":{{json isCorrelated}},\n                \"Alert Policy Names\":\"{{#each accumulations.policyName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n                \"Alert Condition Names\":\"{{#each accumulations.conditionName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n                \"Workflow Name\":{{json workflowName}}\n                }\n\n      type: PAGERDUTY_SERVICE_INTEGRATION\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n#### Mobile Push\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.NotificationChannel(\"foo\", {\n    accountId: 12345678,\n    destinationId: \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product: \"IINT\",\n    type: \"MOBILE_PUSH\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.NotificationChannel(\"foo\",\n    account_id=12345678,\n    destination_id=\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product=\"IINT\",\n    type=\"MOBILE_PUSH\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.NotificationChannel(\"foo\", new()\n    {\n        AccountId = 12345678,\n        DestinationId = \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n        Product = \"IINT\",\n        Type = \"MOBILE_PUSH\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewNotificationChannel(ctx, \"foo\", \u0026newrelic.NotificationChannelArgs{\n\t\t\tAccountId:     pulumi.Int(12345678),\n\t\t\tDestinationId: pulumi.String(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\"),\n\t\t\tProduct:       pulumi.String(\"IINT\"),\n\t\t\tType:          pulumi.String(\"MOBILE_PUSH\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NotificationChannel;\nimport com.pulumi.newrelic.NotificationChannelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new NotificationChannel(\"foo\", NotificationChannelArgs.builder()        \n            .accountId(12345678)\n            .destinationId(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\")\n            .product(\"IINT\")\n            .type(\"MOBILE_PUSH\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:NotificationChannel\n    properties:\n      accountId: 1.2345678e+07\n      destinationId: 00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\n      product: IINT\n      type: MOBILE_PUSH\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n#### [AWS Event Bridge](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-channels/#eventBridge)\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.NotificationChannel(\"foo\", {\n    accountId: 12345678,\n    destinationId: \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product: \"IINT\",\n    properties: [\n        {\n            key: \"eventSource\",\n            value: \"aws.partner/mydomain/myaccountid/name\",\n        },\n        {\n            key: \"eventContent\",\n            value: \"{ id: {{ json issueId }} }\",\n        },\n    ],\n    type: \"EVENT_BRIDGE\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.NotificationChannel(\"foo\",\n    account_id=12345678,\n    destination_id=\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product=\"IINT\",\n    properties=[\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"eventSource\",\n            value=\"aws.partner/mydomain/myaccountid/name\",\n        ),\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"eventContent\",\n            value=\"{ id: {{ json issueId }} }\",\n        ),\n    ],\n    type=\"EVENT_BRIDGE\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.NotificationChannel(\"foo\", new()\n    {\n        AccountId = 12345678,\n        DestinationId = \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n        Product = \"IINT\",\n        Properties = new[]\n        {\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"eventSource\",\n                Value = \"aws.partner/mydomain/myaccountid/name\",\n            },\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"eventContent\",\n                Value = \"{ id: {{ json issueId }} }\",\n            },\n        },\n        Type = \"EVENT_BRIDGE\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewNotificationChannel(ctx, \"foo\", \u0026newrelic.NotificationChannelArgs{\n\t\t\tAccountId:     pulumi.Int(12345678),\n\t\t\tDestinationId: pulumi.String(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\"),\n\t\t\tProduct:       pulumi.String(\"IINT\"),\n\t\t\tProperties: newrelic.NotificationChannelPropertyArray{\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"eventSource\"),\n\t\t\t\t\tValue: pulumi.String(\"aws.partner/mydomain/myaccountid/name\"),\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"eventContent\"),\n\t\t\t\t\tValue: pulumi.String(\"{ id: {{ json issueId }} }\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"EVENT_BRIDGE\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NotificationChannel;\nimport com.pulumi.newrelic.NotificationChannelArgs;\nimport com.pulumi.newrelic.inputs.NotificationChannelPropertyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new NotificationChannel(\"foo\", NotificationChannelArgs.builder()        \n            .accountId(12345678)\n            .destinationId(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\")\n            .product(\"IINT\")\n            .properties(            \n                NotificationChannelPropertyArgs.builder()\n                    .key(\"eventSource\")\n                    .value(\"aws.partner/mydomain/myaccountid/name\")\n                    .build(),\n                NotificationChannelPropertyArgs.builder()\n                    .key(\"eventContent\")\n                    .value(\"{ id: {{ json issueId }} }\")\n                    .build())\n            .type(\"EVENT_BRIDGE\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:NotificationChannel\n    properties:\n      accountId: 1.2345678e+07\n      destinationId: 00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\n      product: IINT\n      properties:\n        - key: eventSource\n          value: aws.partner/mydomain/myaccountid/name\n        - key: eventContent\n          value: '{ id: {{ json issueId }} }'\n      type: EVENT_BRIDGE\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n#### [SLACK](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-channels/#slack)\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.NotificationChannel(\"foo\", {\n    accountId: 12345678,\n    destinationId: \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product: \"IINT\",\n    properties: [\n        {\n            key: \"channelId\",\n            value: \"123456\",\n        },\n        {\n            key: \"customDetailsSlack\",\n            value: \"issue id - {{issueId}}\",\n        },\n    ],\n    type: \"SLACK\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.NotificationChannel(\"foo\",\n    account_id=12345678,\n    destination_id=\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n    product=\"IINT\",\n    properties=[\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"channelId\",\n            value=\"123456\",\n        ),\n        newrelic.NotificationChannelPropertyArgs(\n            key=\"customDetailsSlack\",\n            value=\"issue id - {{issueId}}\",\n        ),\n    ],\n    type=\"SLACK\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.NotificationChannel(\"foo\", new()\n    {\n        AccountId = 12345678,\n        DestinationId = \"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\",\n        Product = \"IINT\",\n        Properties = new[]\n        {\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"channelId\",\n                Value = \"123456\",\n            },\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"customDetailsSlack\",\n                Value = \"issue id - {{issueId}}\",\n            },\n        },\n        Type = \"SLACK\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewNotificationChannel(ctx, \"foo\", \u0026newrelic.NotificationChannelArgs{\n\t\t\tAccountId:     pulumi.Int(12345678),\n\t\t\tDestinationId: pulumi.String(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\"),\n\t\t\tProduct:       pulumi.String(\"IINT\"),\n\t\t\tProperties: newrelic.NotificationChannelPropertyArray{\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"channelId\"),\n\t\t\t\t\tValue: pulumi.String(\"123456\"),\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"customDetailsSlack\"),\n\t\t\t\t\tValue: pulumi.String(\"issue id - {{issueId}}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"SLACK\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NotificationChannel;\nimport com.pulumi.newrelic.NotificationChannelArgs;\nimport com.pulumi.newrelic.inputs.NotificationChannelPropertyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new NotificationChannel(\"foo\", NotificationChannelArgs.builder()        \n            .accountId(12345678)\n            .destinationId(\"00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\")\n            .product(\"IINT\")\n            .properties(            \n                NotificationChannelPropertyArgs.builder()\n                    .key(\"channelId\")\n                    .value(\"123456\")\n                    .build(),\n                NotificationChannelPropertyArgs.builder()\n                    .key(\"customDetailsSlack\")\n                    .value(\"issue id - {{issueId}}\")\n                    .build())\n            .type(\"SLACK\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:NotificationChannel\n    properties:\n      accountId: 1.2345678e+07\n      destinationId: 00b6bd1d-ac06-4d3d-bd72-49551e70f7a8\n      product: IINT\n      properties:\n        - key: channelId\n          value: '123456'\n        - key: customDetailsSlack\n          value: issue id - {{issueId}}\n      type: SLACK\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **NOTE:** Sensitive data such as channel API keys, service keys, etc are not returned from the underlying API for security reasons and may not be set in state when importing.\n\n## Full Scenario Example\n\nCreate a destination resource and reference that destination to the channel resource:\n\n### Create a destination\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst webhook_destination = new newrelic.NotificationDestination(\"webhook-destination\", {\n    accountId: 12345678,\n    authBasic: {\n        password: \"password\",\n        user: \"username\",\n    },\n    properties: [{\n        key: \"url\",\n        value: \"https://webhook.mywebhook.com\",\n    }],\n    type: \"WEBHOOK\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nwebhook_destination = newrelic.NotificationDestination(\"webhook-destination\",\n    account_id=12345678,\n    auth_basic=newrelic.NotificationDestinationAuthBasicArgs(\n        password=\"password\",\n        user=\"username\",\n    ),\n    properties=[newrelic.NotificationDestinationPropertyArgs(\n        key=\"url\",\n        value=\"https://webhook.mywebhook.com\",\n    )],\n    type=\"WEBHOOK\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var webhook_destination = new NewRelic.NotificationDestination(\"webhook-destination\", new()\n    {\n        AccountId = 12345678,\n        AuthBasic = new NewRelic.Inputs.NotificationDestinationAuthBasicArgs\n        {\n            Password = \"password\",\n            User = \"username\",\n        },\n        Properties = new[]\n        {\n            new NewRelic.Inputs.NotificationDestinationPropertyArgs\n            {\n                Key = \"url\",\n                Value = \"https://webhook.mywebhook.com\",\n            },\n        },\n        Type = \"WEBHOOK\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewNotificationDestination(ctx, \"webhook-destination\", \u0026newrelic.NotificationDestinationArgs{\n\t\t\tAccountId: pulumi.Int(12345678),\n\t\t\tAuthBasic: \u0026newrelic.NotificationDestinationAuthBasicArgs{\n\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t\tUser:     pulumi.String(\"username\"),\n\t\t\t},\n\t\t\tProperties: newrelic.NotificationDestinationPropertyArray{\n\t\t\t\t\u0026newrelic.NotificationDestinationPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"url\"),\n\t\t\t\t\tValue: pulumi.String(\"https://webhook.mywebhook.com\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"WEBHOOK\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NotificationDestination;\nimport com.pulumi.newrelic.NotificationDestinationArgs;\nimport com.pulumi.newrelic.inputs.NotificationDestinationAuthBasicArgs;\nimport com.pulumi.newrelic.inputs.NotificationDestinationPropertyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var webhook_destination = new NotificationDestination(\"webhook-destination\", NotificationDestinationArgs.builder()        \n            .accountId(12345678)\n            .authBasic(NotificationDestinationAuthBasicArgs.builder()\n                .password(\"password\")\n                .user(\"username\")\n                .build())\n            .properties(NotificationDestinationPropertyArgs.builder()\n                .key(\"url\")\n                .value(\"https://webhook.mywebhook.com\")\n                .build())\n            .type(\"WEBHOOK\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  webhook-destination:\n    type: newrelic:NotificationDestination\n    properties:\n      accountId: 1.2345678e+07\n      authBasic:\n        password: password\n        user: username\n      properties:\n        - key: url\n          value: https://webhook.mywebhook.com\n      type: WEBHOOK\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a channel\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst webhook_channel = new newrelic.NotificationChannel(\"webhook-channel\", {\n    accountId: 12345678,\n    type: \"WEBHOOK\",\n    destinationId: newrelic_notification_destination[\"webhook-destination\"].id,\n    product: \"IINT\",\n    properties: [{\n        key: \"payload\",\n        value: \"{name: foo}\",\n        label: \"Payload Template\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nwebhook_channel = newrelic.NotificationChannel(\"webhook-channel\",\n    account_id=12345678,\n    type=\"WEBHOOK\",\n    destination_id=newrelic_notification_destination[\"webhook-destination\"][\"id\"],\n    product=\"IINT\",\n    properties=[newrelic.NotificationChannelPropertyArgs(\n        key=\"payload\",\n        value=\"{name: foo}\",\n        label=\"Payload Template\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var webhook_channel = new NewRelic.NotificationChannel(\"webhook-channel\", new()\n    {\n        AccountId = 12345678,\n        Type = \"WEBHOOK\",\n        DestinationId = newrelic_notification_destination.Webhook_destination.Id,\n        Product = \"IINT\",\n        Properties = new[]\n        {\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"payload\",\n                Value = \"{name: foo}\",\n                Label = \"Payload Template\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewNotificationChannel(ctx, \"webhook-channel\", \u0026newrelic.NotificationChannelArgs{\n\t\t\tAccountId:     pulumi.Int(12345678),\n\t\t\tType:          pulumi.String(\"WEBHOOK\"),\n\t\t\tDestinationId: pulumi.Any(newrelic_notification_destination.WebhookDestination.Id),\n\t\t\tProduct:       pulumi.String(\"IINT\"),\n\t\t\tProperties: newrelic.NotificationChannelPropertyArray{\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"payload\"),\n\t\t\t\t\tValue: pulumi.String(\"{name: foo}\"),\n\t\t\t\t\tLabel: pulumi.String(\"Payload Template\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NotificationChannel;\nimport com.pulumi.newrelic.NotificationChannelArgs;\nimport com.pulumi.newrelic.inputs.NotificationChannelPropertyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var webhook_channel = new NotificationChannel(\"webhook-channel\", NotificationChannelArgs.builder()        \n            .accountId(12345678)\n            .type(\"WEBHOOK\")\n            .destinationId(newrelic_notification_destination.webhook-destination().id())\n            .product(\"IINT\")\n            .properties(NotificationChannelPropertyArgs.builder()\n                .key(\"payload\")\n                .value(\"{name: foo}\")\n                .label(\"Payload Template\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  webhook-channel:\n    type: newrelic:NotificationChannel\n    properties:\n      accountId: 1.2345678e+07\n      type: WEBHOOK\n      destinationId: ${newrelic_notification_destination\"webhook-destination\"[%!s(MISSING)].id}\n      product: IINT\n      properties:\n        - key: payload\n          value: '{name: foo}'\n          label: Payload Template\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Additional Information\n\nMore details about the channels API can be found [here](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-channels).\n\n\u003e **NOTE:** `newrelic.AlertChannel` are legacy resources.\n\n## Import\n\nChannels can only be used by a single workflow, therefore importing them is not particularly useful, because in the UI channels are created upon workflow creation. \n\nAdditionally, the channel id isn't available via the UI, and you'd need to look it up with the `channels` query in the NerdGraph API.\n\nThat being said, importing is possible using -\n\n```sh\n$ pulumi import newrelic:index/notificationChannel:NotificationChannel foo \u003cdestination_id\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the notification channel will be created. Defaults to the account associated with the API key used.\n"
                },
                "active": {
                    "type": "boolean",
                    "description": "Indicates whether the channel is active.\n"
                },
                "destinationId": {
                    "type": "string",
                    "description": "The id of the destination.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the channel.\n"
                },
                "product": {
                    "type": "string",
                    "description": "The type of product.  One of: `DISCUSSIONS`, `ERROR_TRACKING` or `IINT` (workflows).\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/NotificationChannelProperty:NotificationChannelProperty"
                    },
                    "description": "A nested block that describes a notification channel property. See Nested property blocks below for details.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the channel.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of channel.  One of: `EMAIL`, `SERVICENOW_INCIDENTS`, `WEBHOOK`, `JIRA_CLASSIC`, `MOBILE_PUSH`, `EVENT_BRIDGE`, `SLACK` and `SLACK_COLLABORATION`, `PAGERDUTY_ACCOUNT_INTEGRATION` or `PAGERDUTY_SERVICE_INTEGRATION`.\n"
                }
            },
            "required": [
                "accountId",
                "destinationId",
                "name",
                "product",
                "properties",
                "status",
                "type"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the notification channel will be created. Defaults to the account associated with the API key used.\n",
                    "willReplaceOnChanges": true
                },
                "active": {
                    "type": "boolean",
                    "description": "Indicates whether the channel is active.\n"
                },
                "destinationId": {
                    "type": "string",
                    "description": "The id of the destination.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the channel.\n"
                },
                "product": {
                    "type": "string",
                    "description": "The type of product.  One of: `DISCUSSIONS`, `ERROR_TRACKING` or `IINT` (workflows).\n",
                    "willReplaceOnChanges": true
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/NotificationChannelProperty:NotificationChannelProperty"
                    },
                    "description": "A nested block that describes a notification channel property. See Nested property blocks below for details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of channel.  One of: `EMAIL`, `SERVICENOW_INCIDENTS`, `WEBHOOK`, `JIRA_CLASSIC`, `MOBILE_PUSH`, `EVENT_BRIDGE`, `SLACK` and `SLACK_COLLABORATION`, `PAGERDUTY_ACCOUNT_INTEGRATION` or `PAGERDUTY_SERVICE_INTEGRATION`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "destinationId",
                "product",
                "properties",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationChannel resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Determines the New Relic account where the notification channel will be created. Defaults to the account associated with the API key used.\n",
                        "willReplaceOnChanges": true
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Indicates whether the channel is active.\n"
                    },
                    "destinationId": {
                        "type": "string",
                        "description": "The id of the destination.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the channel.\n"
                    },
                    "product": {
                        "type": "string",
                        "description": "The type of product.  One of: `DISCUSSIONS`, `ERROR_TRACKING` or `IINT` (workflows).\n",
                        "willReplaceOnChanges": true
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/NotificationChannelProperty:NotificationChannelProperty"
                        },
                        "description": "A nested block that describes a notification channel property. See Nested property blocks below for details.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the channel.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of channel.  One of: `EMAIL`, `SERVICENOW_INCIDENTS`, `WEBHOOK`, `JIRA_CLASSIC`, `MOBILE_PUSH`, `EVENT_BRIDGE`, `SLACK` and `SLACK_COLLABORATION`, `PAGERDUTY_ACCOUNT_INTEGRATION` or `PAGERDUTY_SERVICE_INTEGRATION`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/notificationDestination:NotificationDestination": {
            "description": "\n\n## Import\n\nDestination id can be found in the Destinations page -\u003e three dots at the right of the chosen destination -\u003e copy destination id to clipboard.\n\nThis example is especially useful for slack destinations which *must* be imported.\n\n1. Add an empty resource to your terraform file: \n\nterraform\n\nresource \"newrelic_notification_destination\" \"foo\" {\n\n}\n\n```sh\n$ pulumi import newrelic:index/notificationDestination:NotificationDestination  Run import command: `newrelic_notification_destination.foo \u003cdestination_id\u003e`\n```\n\n3. Run the following command after the import successfully done and copy the information to your resource:\n\n`terraform state show newrelic_notification_destination.foo`\n\n4. Add `ignore_changes` attribute on `auth_token` in your imported resource:\n\nterraform\n\nlifecycle {\n\n    ignore_changes = [auth_token]\n\n  }\n\nYour imported destination should look like that:\n\nterraform\n\nresource \"newrelic_notification_destination\" \"foo\" {\n\n  lifecycle {\n\n    ignore_changes = [auth_token]\n\n  }\n\n  name = \"*********\"\n\n  type = \"SLACK\"\n\n  auth_token {\n\n    prefix = \"Bearer\"\n\n  }\n\n  property {\n\n      key   = \"teamName\"\n\n      label = \"Team Name\"\n\n      value = \"******\"\n\n  }\n\n}\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.\n"
                },
                "active": {
                    "type": "boolean",
                    "description": "Indicates whether the destination is active.\n"
                },
                "authBasic": {
                    "$ref": "#/types/newrelic:index/NotificationDestinationAuthBasic:NotificationDestinationAuthBasic",
                    "description": "A nested block that describes a basic username and password authentication credentials. Only one auth_basic block is permitted per notification destination definition.  See Nested auth_basic blocks below for details.\n"
                },
                "authToken": {
                    "$ref": "#/types/newrelic:index/NotificationDestinationAuthToken:NotificationDestinationAuthToken",
                    "description": "A nested block that describes a token authentication credentials. Only one auth_token block is permitted per notification destination definition.  See Nested auth_token blocks below for details.\n"
                },
                "lastSent": {
                    "type": "string",
                    "description": "The last time a notification was sent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the destination.\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/NotificationDestinationProperty:NotificationDestinationProperty"
                    },
                    "description": "A nested block that describes a notification destination property. See Nested property blocks below for details.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the destination.\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,\nPAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY, MOBILE_PUSH, EVENT_BRIDGE).\n"
                }
            },
            "required": [
                "accountId",
                "lastSent",
                "name",
                "properties",
                "status",
                "type"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.\n",
                    "willReplaceOnChanges": true
                },
                "active": {
                    "type": "boolean",
                    "description": "Indicates whether the destination is active.\n"
                },
                "authBasic": {
                    "$ref": "#/types/newrelic:index/NotificationDestinationAuthBasic:NotificationDestinationAuthBasic",
                    "description": "A nested block that describes a basic username and password authentication credentials. Only one auth_basic block is permitted per notification destination definition.  See Nested auth_basic blocks below for details.\n"
                },
                "authToken": {
                    "$ref": "#/types/newrelic:index/NotificationDestinationAuthToken:NotificationDestinationAuthToken",
                    "description": "A nested block that describes a token authentication credentials. Only one auth_token block is permitted per notification destination definition.  See Nested auth_token blocks below for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the destination.\n"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/NotificationDestinationProperty:NotificationDestinationProperty"
                    },
                    "description": "A nested block that describes a notification destination property. See Nested property blocks below for details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,\nPAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY, MOBILE_PUSH, EVENT_BRIDGE).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "properties",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationDestination resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.\n",
                        "willReplaceOnChanges": true
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Indicates whether the destination is active.\n"
                    },
                    "authBasic": {
                        "$ref": "#/types/newrelic:index/NotificationDestinationAuthBasic:NotificationDestinationAuthBasic",
                        "description": "A nested block that describes a basic username and password authentication credentials. Only one auth_basic block is permitted per notification destination definition.  See Nested auth_basic blocks below for details.\n"
                    },
                    "authToken": {
                        "$ref": "#/types/newrelic:index/NotificationDestinationAuthToken:NotificationDestinationAuthToken",
                        "description": "A nested block that describes a token authentication credentials. Only one auth_token block is permitted per notification destination definition.  See Nested auth_token blocks below for details.\n"
                    },
                    "lastSent": {
                        "type": "string",
                        "description": "The last time a notification was sent.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the destination.\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/NotificationDestinationProperty:NotificationDestinationProperty"
                        },
                        "description": "A nested block that describes a notification destination property. See Nested property blocks below for details.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the destination.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,\nPAGERDUTY_SERVICE_INTEGRATION, JIRA, SLACK, SLACK_COLLABORATION, SLACK_LEGACY, MOBILE_PUSH, EVENT_BRIDGE).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/nrqlAlertCondition:NrqlAlertCondition": {
            "description": "Use this resource to create and manage NRQL alert conditions in New Relic.\n\n## Example Usage\n\n### Type: `static` (default)\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooNrqlAlertCondition = new newrelic.NrqlAlertCondition(\"fooNrqlAlertCondition\", {\n    accountId: 12345678,\n    policyId: fooAlertPolicy.id,\n    type: \"static\",\n    description: \"Alert when transactions are taking too long\",\n    runbookUrl: \"https://www.example.com\",\n    enabled: true,\n    violationTimeLimitSeconds: 3600,\n    fillOption: \"static\",\n    fillValue: 1,\n    aggregationWindow: 60,\n    aggregationMethod: \"event_flow\",\n    aggregationDelay: \"120\",\n    expirationDuration: 120,\n    openViolationOnExpiration: true,\n    closeViolationsOnExpiration: true,\n    slideBy: 30,\n    nrql: {\n        query: \"SELECT average(duration) FROM Transaction where appName = 'Your App'\",\n    },\n    critical: {\n        operator: \"above\",\n        threshold: 5.5,\n        thresholdDuration: 300,\n        thresholdOccurrences: \"ALL\",\n    },\n    warning: {\n        operator: \"above\",\n        threshold: 3.5,\n        thresholdDuration: 600,\n        thresholdOccurrences: \"ALL\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_nrql_alert_condition = newrelic.NrqlAlertCondition(\"fooNrqlAlertCondition\",\n    account_id=12345678,\n    policy_id=foo_alert_policy.id,\n    type=\"static\",\n    description=\"Alert when transactions are taking too long\",\n    runbook_url=\"https://www.example.com\",\n    enabled=True,\n    violation_time_limit_seconds=3600,\n    fill_option=\"static\",\n    fill_value=1,\n    aggregation_window=60,\n    aggregation_method=\"event_flow\",\n    aggregation_delay=\"120\",\n    expiration_duration=120,\n    open_violation_on_expiration=True,\n    close_violations_on_expiration=True,\n    slide_by=30,\n    nrql=newrelic.NrqlAlertConditionNrqlArgs(\n        query=\"SELECT average(duration) FROM Transaction where appName = 'Your App'\",\n    ),\n    critical=newrelic.NrqlAlertConditionCriticalArgs(\n        operator=\"above\",\n        threshold=5.5,\n        threshold_duration=300,\n        threshold_occurrences=\"ALL\",\n    ),\n    warning=newrelic.NrqlAlertConditionWarningArgs(\n        operator=\"above\",\n        threshold=3.5,\n        threshold_duration=600,\n        threshold_occurrences=\"ALL\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\");\n\n    var fooNrqlAlertCondition = new NewRelic.NrqlAlertCondition(\"fooNrqlAlertCondition\", new()\n    {\n        AccountId = 12345678,\n        PolicyId = fooAlertPolicy.Id,\n        Type = \"static\",\n        Description = \"Alert when transactions are taking too long\",\n        RunbookUrl = \"https://www.example.com\",\n        Enabled = true,\n        ViolationTimeLimitSeconds = 3600,\n        FillOption = \"static\",\n        FillValue = 1,\n        AggregationWindow = 60,\n        AggregationMethod = \"event_flow\",\n        AggregationDelay = \"120\",\n        ExpirationDuration = 120,\n        OpenViolationOnExpiration = true,\n        CloseViolationsOnExpiration = true,\n        SlideBy = 30,\n        Nrql = new NewRelic.Inputs.NrqlAlertConditionNrqlArgs\n        {\n            Query = \"SELECT average(duration) FROM Transaction where appName = 'Your App'\",\n        },\n        Critical = new NewRelic.Inputs.NrqlAlertConditionCriticalArgs\n        {\n            Operator = \"above\",\n            Threshold = 5.5,\n            ThresholdDuration = 300,\n            ThresholdOccurrences = \"ALL\",\n        },\n        Warning = new NewRelic.Inputs.NrqlAlertConditionWarningArgs\n        {\n            Operator = \"above\",\n            Threshold = 3.5,\n            ThresholdDuration = 600,\n            ThresholdOccurrences = \"ALL\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewNrqlAlertCondition(ctx, \"fooNrqlAlertCondition\", \u0026newrelic.NrqlAlertConditionArgs{\n\t\t\tAccountId:                   pulumi.Int(12345678),\n\t\t\tPolicyId:                    fooAlertPolicy.ID(),\n\t\t\tType:                        pulumi.String(\"static\"),\n\t\t\tDescription:                 pulumi.String(\"Alert when transactions are taking too long\"),\n\t\t\tRunbookUrl:                  pulumi.String(\"https://www.example.com\"),\n\t\t\tEnabled:                     pulumi.Bool(true),\n\t\t\tViolationTimeLimitSeconds:   pulumi.Int(3600),\n\t\t\tFillOption:                  pulumi.String(\"static\"),\n\t\t\tFillValue:                   pulumi.Float64(1),\n\t\t\tAggregationWindow:           pulumi.Int(60),\n\t\t\tAggregationMethod:           pulumi.String(\"event_flow\"),\n\t\t\tAggregationDelay:            pulumi.String(\"120\"),\n\t\t\tExpirationDuration:          pulumi.Int(120),\n\t\t\tOpenViolationOnExpiration:   pulumi.Bool(true),\n\t\t\tCloseViolationsOnExpiration: pulumi.Bool(true),\n\t\t\tSlideBy:                     pulumi.Int(30),\n\t\t\tNrql: \u0026newrelic.NrqlAlertConditionNrqlArgs{\n\t\t\t\tQuery: pulumi.String(\"SELECT average(duration) FROM Transaction where appName = 'Your App'\"),\n\t\t\t},\n\t\t\tCritical: \u0026newrelic.NrqlAlertConditionCriticalArgs{\n\t\t\t\tOperator:             pulumi.String(\"above\"),\n\t\t\t\tThreshold:            pulumi.Float64(5.5),\n\t\t\t\tThresholdDuration:    pulumi.Int(300),\n\t\t\t\tThresholdOccurrences: pulumi.String(\"ALL\"),\n\t\t\t},\n\t\t\tWarning: \u0026newrelic.NrqlAlertConditionWarningArgs{\n\t\t\t\tOperator:             pulumi.String(\"above\"),\n\t\t\t\tThreshold:            pulumi.Float64(3.5),\n\t\t\t\tThresholdDuration:    pulumi.Int(600),\n\t\t\t\tThresholdOccurrences: pulumi.String(\"ALL\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.NrqlAlertCondition;\nimport com.pulumi.newrelic.NrqlAlertConditionArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionNrqlArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionCriticalArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionWarningArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooAlertPolicy = new AlertPolicy(\"fooAlertPolicy\");\n\n        var fooNrqlAlertCondition = new NrqlAlertCondition(\"fooNrqlAlertCondition\", NrqlAlertConditionArgs.builder()        \n            .accountId(12345678)\n            .policyId(fooAlertPolicy.id())\n            .type(\"static\")\n            .description(\"Alert when transactions are taking too long\")\n            .runbookUrl(\"https://www.example.com\")\n            .enabled(true)\n            .violationTimeLimitSeconds(3600)\n            .fillOption(\"static\")\n            .fillValue(1)\n            .aggregationWindow(60)\n            .aggregationMethod(\"event_flow\")\n            .aggregationDelay(120)\n            .expirationDuration(120)\n            .openViolationOnExpiration(true)\n            .closeViolationsOnExpiration(true)\n            .slideBy(30)\n            .nrql(NrqlAlertConditionNrqlArgs.builder()\n                .query(\"SELECT average(duration) FROM Transaction where appName = 'Your App'\")\n                .build())\n            .critical(NrqlAlertConditionCriticalArgs.builder()\n                .operator(\"above\")\n                .threshold(5.5)\n                .thresholdDuration(300)\n                .thresholdOccurrences(\"ALL\")\n                .build())\n            .warning(NrqlAlertConditionWarningArgs.builder()\n                .operator(\"above\")\n                .threshold(3.5)\n                .thresholdDuration(600)\n                .thresholdOccurrences(\"ALL\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooAlertPolicy:\n    type: newrelic:AlertPolicy\n  fooNrqlAlertCondition:\n    type: newrelic:NrqlAlertCondition\n    properties:\n      accountId: 1.2345678e+07\n      policyId: ${fooAlertPolicy.id}\n      type: static\n      description: Alert when transactions are taking too long\n      runbookUrl: https://www.example.com\n      enabled: true\n      violationTimeLimitSeconds: 3600\n      fillOption: static\n      fillValue: 1\n      aggregationWindow: 60\n      aggregationMethod: event_flow\n      aggregationDelay: 120\n      expirationDuration: 120\n      openViolationOnExpiration: true\n      closeViolationsOnExpiration: true\n      slideBy: 30\n      nrql:\n        query: SELECT average(duration) FROM Transaction where appName = 'Your App'\n      critical:\n        operator: above\n        threshold: 5.5\n        thresholdDuration: 300\n        thresholdOccurrences: ALL\n      warning:\n        operator: above\n        threshold: 3.5\n        thresholdDuration: 600\n        thresholdOccurrences: ALL\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## NRQL\n\nThe `nrql` block supports the following arguments:\n\n- `query` - (Required) The NRQL query to execute for the condition.\n- `evaluation_offset` - (Optional) **DEPRECATED:** Use `aggregation_method` instead. Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated based on their `aggregation_window` size. The start time depends on this value. It's recommended to set this to 3 windows. An offset of less than 3 windows will trigger incidents sooner, but you may see more false positives and negatives due to data latency. With `evaluation_offset` set to 3 windows and an `aggregation_window` of 60 seconds, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`. `evaluation_offset` cannot be set with `aggregation_method`, `aggregation_delay`, or `aggregation_timer`.\u003cbr\u003e\n- `since_value` - (Optional)  **DEPRECATED:** Use `aggregation_method` instead. The value to be used in the `SINCE \u003cX\u003e minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive). \u003cbr\u003e\n\n## Terms\n\n\u003e **NOTE:** The direct use of the `term` has been deprecated, and users should use `critical` and `warning` instead.  What follows now applies to the named priority attributes for `critical` and `warning`, but for those attributes the priority is not allowed. At least one `critical` or `warning` term must be defined.\n\nNRQL alert conditions support up to two terms. At least one `term` must have `priority` set to `critical` and the second optional `term` must have `priority` set to `warning`.\n\nThe `term` block supports the following arguments:\n\n- `operator` - (Optional) Valid values are `above`, `above_or_equals`, `below`, `below_or_equals`, `equals`, or `not_equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `baseline`, the only valid option here is `above`.\n- `priority` - (Optional) `critical` or `warning`. Defaults to `critical`.\n- `threshold` - (Required) The value which will trigger an incident.\n\u003cbr\u003eFor _baseline_ NRQL alert conditions, the value must be in the range [1, 1000]. The value is the number of standard deviations from the baseline that the metric must exceed in order to create an incident.\n- `threshold_duration` - (Optional) The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the `aggregation_window` (which has a default of 60 seconds).\n\u003cbr\u003eFor _baseline_ NRQL alert conditions, the value must be within 120-86400 seconds (inclusive).\n\u003cbr\u003eFor _static_ NRQL alert conditions, the value must be within 60-86400 seconds (inclusive).\n\n- `threshold_occurrences` - (Optional) The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `at_least_once` (case insensitive).\n- `duration` - (Optional) **DEPRECATED:** Use `threshold_duration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create an incident. Must be within 1-120 (inclusive).\n- `time_function` - (Optional) **DEPRECATED:** Use `threshold_occurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.\n\n\u003e **NOTE:** When a `critical` or `warning` block is added to this resource, using either `duration` or `threshold_duration` (one of the two) is mandatory. Both of these should not be specified.\n\n\u003e **NOTE:** When a `critical` or `warning` block is added to this resource, using either `time_function` or `threshold_occurrences` (one of the two) is mandatory. Both of these should not be specified.\n\n## Additional Examples\n\n##### Type: `baseline`\n\n[Baseline NRQL alert conditions](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/create-baseline-alert-conditions) are dynamic in nature and adjust to the behavior of your data. The example below demonstrates a baseline NRQL alert condition for alerting when transaction durations are above a specified threshold and dynamically adjusts based on data trends.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooNrqlAlertCondition = new newrelic.NrqlAlertCondition(\"fooNrqlAlertCondition\", {\n    accountId: \"your_account_id\",\n    policyId: fooAlertPolicy.id,\n    type: \"static\",\n    description: \"Alert when transactions are taking too long\",\n    runbookUrl: \"https://www.example.com\",\n    enabled: true,\n    violationTimeLimitSeconds: 3600,\n    fillOption: \"static\",\n    fillValue: 1,\n    aggregationWindow: 60,\n    aggregationMethod: \"event_flow\",\n    aggregationDelay: \"120\",\n    expirationDuration: 120,\n    openViolationOnExpiration: true,\n    closeViolationsOnExpiration: true,\n    slideBy: 30,\n    nrql: {\n        query: \"SELECT average(duration) FROM Transaction where appName = 'Your App'\",\n    },\n    critical: {\n        operator: \"above\",\n        threshold: 5.5,\n        thresholdDuration: 300,\n        thresholdOccurrences: \"ALL\",\n    },\n    warning: {\n        operator: \"above\",\n        threshold: 3.5,\n        thresholdDuration: 600,\n        thresholdOccurrences: \"ALL\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_nrql_alert_condition = newrelic.NrqlAlertCondition(\"fooNrqlAlertCondition\",\n    account_id=\"your_account_id\",\n    policy_id=foo_alert_policy.id,\n    type=\"static\",\n    description=\"Alert when transactions are taking too long\",\n    runbook_url=\"https://www.example.com\",\n    enabled=True,\n    violation_time_limit_seconds=3600,\n    fill_option=\"static\",\n    fill_value=1,\n    aggregation_window=60,\n    aggregation_method=\"event_flow\",\n    aggregation_delay=\"120\",\n    expiration_duration=120,\n    open_violation_on_expiration=True,\n    close_violations_on_expiration=True,\n    slide_by=30,\n    nrql=newrelic.NrqlAlertConditionNrqlArgs(\n        query=\"SELECT average(duration) FROM Transaction where appName = 'Your App'\",\n    ),\n    critical=newrelic.NrqlAlertConditionCriticalArgs(\n        operator=\"above\",\n        threshold=5.5,\n        threshold_duration=300,\n        threshold_occurrences=\"ALL\",\n    ),\n    warning=newrelic.NrqlAlertConditionWarningArgs(\n        operator=\"above\",\n        threshold=3.5,\n        threshold_duration=600,\n        threshold_occurrences=\"ALL\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\");\n\n    var fooNrqlAlertCondition = new NewRelic.NrqlAlertCondition(\"fooNrqlAlertCondition\", new()\n    {\n        AccountId = \"your_account_id\",\n        PolicyId = fooAlertPolicy.Id,\n        Type = \"static\",\n        Description = \"Alert when transactions are taking too long\",\n        RunbookUrl = \"https://www.example.com\",\n        Enabled = true,\n        ViolationTimeLimitSeconds = 3600,\n        FillOption = \"static\",\n        FillValue = 1,\n        AggregationWindow = 60,\n        AggregationMethod = \"event_flow\",\n        AggregationDelay = \"120\",\n        ExpirationDuration = 120,\n        OpenViolationOnExpiration = true,\n        CloseViolationsOnExpiration = true,\n        SlideBy = 30,\n        Nrql = new NewRelic.Inputs.NrqlAlertConditionNrqlArgs\n        {\n            Query = \"SELECT average(duration) FROM Transaction where appName = 'Your App'\",\n        },\n        Critical = new NewRelic.Inputs.NrqlAlertConditionCriticalArgs\n        {\n            Operator = \"above\",\n            Threshold = 5.5,\n            ThresholdDuration = 300,\n            ThresholdOccurrences = \"ALL\",\n        },\n        Warning = new NewRelic.Inputs.NrqlAlertConditionWarningArgs\n        {\n            Operator = \"above\",\n            Threshold = 3.5,\n            ThresholdDuration = 600,\n            ThresholdOccurrences = \"ALL\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewNrqlAlertCondition(ctx, \"fooNrqlAlertCondition\", \u0026newrelic.NrqlAlertConditionArgs{\n\t\t\tAccountId:                   pulumi.Int(\"your_account_id\"),\n\t\t\tPolicyId:                    fooAlertPolicy.ID(),\n\t\t\tType:                        pulumi.String(\"static\"),\n\t\t\tDescription:                 pulumi.String(\"Alert when transactions are taking too long\"),\n\t\t\tRunbookUrl:                  pulumi.String(\"https://www.example.com\"),\n\t\t\tEnabled:                     pulumi.Bool(true),\n\t\t\tViolationTimeLimitSeconds:   pulumi.Int(3600),\n\t\t\tFillOption:                  pulumi.String(\"static\"),\n\t\t\tFillValue:                   pulumi.Float64(1),\n\t\t\tAggregationWindow:           pulumi.Int(60),\n\t\t\tAggregationMethod:           pulumi.String(\"event_flow\"),\n\t\t\tAggregationDelay:            pulumi.String(\"120\"),\n\t\t\tExpirationDuration:          pulumi.Int(120),\n\t\t\tOpenViolationOnExpiration:   pulumi.Bool(true),\n\t\t\tCloseViolationsOnExpiration: pulumi.Bool(true),\n\t\t\tSlideBy:                     pulumi.Int(30),\n\t\t\tNrql: \u0026newrelic.NrqlAlertConditionNrqlArgs{\n\t\t\t\tQuery: pulumi.String(\"SELECT average(duration) FROM Transaction where appName = 'Your App'\"),\n\t\t\t},\n\t\t\tCritical: \u0026newrelic.NrqlAlertConditionCriticalArgs{\n\t\t\t\tOperator:             pulumi.String(\"above\"),\n\t\t\t\tThreshold:            pulumi.Float64(5.5),\n\t\t\t\tThresholdDuration:    pulumi.Int(300),\n\t\t\t\tThresholdOccurrences: pulumi.String(\"ALL\"),\n\t\t\t},\n\t\t\tWarning: \u0026newrelic.NrqlAlertConditionWarningArgs{\n\t\t\t\tOperator:             pulumi.String(\"above\"),\n\t\t\t\tThreshold:            pulumi.Float64(3.5),\n\t\t\t\tThresholdDuration:    pulumi.Int(600),\n\t\t\t\tThresholdOccurrences: pulumi.String(\"ALL\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.NrqlAlertCondition;\nimport com.pulumi.newrelic.NrqlAlertConditionArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionNrqlArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionCriticalArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionWarningArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooAlertPolicy = new AlertPolicy(\"fooAlertPolicy\");\n\n        var fooNrqlAlertCondition = new NrqlAlertCondition(\"fooNrqlAlertCondition\", NrqlAlertConditionArgs.builder()        \n            .accountId(\"your_account_id\")\n            .policyId(fooAlertPolicy.id())\n            .type(\"static\")\n            .description(\"Alert when transactions are taking too long\")\n            .runbookUrl(\"https://www.example.com\")\n            .enabled(true)\n            .violationTimeLimitSeconds(3600)\n            .fillOption(\"static\")\n            .fillValue(1)\n            .aggregationWindow(60)\n            .aggregationMethod(\"event_flow\")\n            .aggregationDelay(120)\n            .expirationDuration(120)\n            .openViolationOnExpiration(true)\n            .closeViolationsOnExpiration(true)\n            .slideBy(30)\n            .nrql(NrqlAlertConditionNrqlArgs.builder()\n                .query(\"SELECT average(duration) FROM Transaction where appName = 'Your App'\")\n                .build())\n            .critical(NrqlAlertConditionCriticalArgs.builder()\n                .operator(\"above\")\n                .threshold(5.5)\n                .thresholdDuration(300)\n                .thresholdOccurrences(\"ALL\")\n                .build())\n            .warning(NrqlAlertConditionWarningArgs.builder()\n                .operator(\"above\")\n                .threshold(3.5)\n                .thresholdDuration(600)\n                .thresholdOccurrences(\"ALL\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooAlertPolicy:\n    type: newrelic:AlertPolicy\n  fooNrqlAlertCondition:\n    type: newrelic:NrqlAlertCondition\n    properties:\n      accountId: your_account_id\n      policyId: ${fooAlertPolicy.id}\n      type: static\n      description: Alert when transactions are taking too long\n      runbookUrl: https://www.example.com\n      enabled: true\n      violationTimeLimitSeconds: 3600\n      fillOption: static\n      fillValue: 1\n      aggregationWindow: 60\n      aggregationMethod: event_flow\n      aggregationDelay: 120\n      expirationDuration: 120\n      openViolationOnExpiration: true\n      closeViolationsOnExpiration: true\n      slideBy: 30\n      nrql:\n        query: SELECT average(duration) FROM Transaction where appName = 'Your App'\n      critical:\n        operator: above\n        threshold: 5.5\n        thresholdDuration: 300\n        thresholdOccurrences: ALL\n      warning:\n        operator: above\n        threshold: 3.5\n        thresholdDuration: 600\n        thresholdOccurrences: ALL\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Tags\n\nManage NRQL alert condition tags with `newrelic.EntityTags`. For up-to-date documentation about the tagging resource, please check `newrelic.EntityTags`.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooNrqlAlertCondition = new newrelic.NrqlAlertCondition(\"fooNrqlAlertCondition\", {\n    accountId: 12345678,\n    policyId: fooAlertPolicy.id,\n    type: \"static\",\n    description: \"Alert when transactions are taking too long\",\n    runbookUrl: \"https://www.example.com\",\n    enabled: true,\n    violationTimeLimitSeconds: 3600,\n    fillOption: \"static\",\n    fillValue: 1,\n    aggregationWindow: 60,\n    aggregationMethod: \"event_flow\",\n    aggregationDelay: \"120\",\n    expirationDuration: 120,\n    openViolationOnExpiration: true,\n    closeViolationsOnExpiration: true,\n    slideBy: 30,\n    nrql: {\n        query: \"SELECT average(duration) FROM Transaction where appName = 'Your App'\",\n    },\n    critical: {\n        operator: \"above\",\n        threshold: 5.5,\n        thresholdDuration: 300,\n        thresholdOccurrences: \"ALL\",\n    },\n    warning: {\n        operator: \"above\",\n        threshold: 3.5,\n        thresholdDuration: 600,\n        thresholdOccurrences: \"ALL\",\n    },\n});\nconst myConditionEntityTags = new newrelic.EntityTags(\"myConditionEntityTags\", {\n    guid: fooNrqlAlertCondition.entityGuid,\n    tags: [\n        {\n            key: \"my-key\",\n            values: [\n                \"my-value\",\n                \"my-other-value\",\n            ],\n        },\n        {\n            key: \"my-key-2\",\n            values: [\"my-value-2\"],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_nrql_alert_condition = newrelic.NrqlAlertCondition(\"fooNrqlAlertCondition\",\n    account_id=12345678,\n    policy_id=foo_alert_policy.id,\n    type=\"static\",\n    description=\"Alert when transactions are taking too long\",\n    runbook_url=\"https://www.example.com\",\n    enabled=True,\n    violation_time_limit_seconds=3600,\n    fill_option=\"static\",\n    fill_value=1,\n    aggregation_window=60,\n    aggregation_method=\"event_flow\",\n    aggregation_delay=\"120\",\n    expiration_duration=120,\n    open_violation_on_expiration=True,\n    close_violations_on_expiration=True,\n    slide_by=30,\n    nrql=newrelic.NrqlAlertConditionNrqlArgs(\n        query=\"SELECT average(duration) FROM Transaction where appName = 'Your App'\",\n    ),\n    critical=newrelic.NrqlAlertConditionCriticalArgs(\n        operator=\"above\",\n        threshold=5.5,\n        threshold_duration=300,\n        threshold_occurrences=\"ALL\",\n    ),\n    warning=newrelic.NrqlAlertConditionWarningArgs(\n        operator=\"above\",\n        threshold=3.5,\n        threshold_duration=600,\n        threshold_occurrences=\"ALL\",\n    ))\nmy_condition_entity_tags = newrelic.EntityTags(\"myConditionEntityTags\",\n    guid=foo_nrql_alert_condition.entity_guid,\n    tags=[\n        newrelic.EntityTagsTagArgs(\n            key=\"my-key\",\n            values=[\n                \"my-value\",\n                \"my-other-value\",\n            ],\n        ),\n        newrelic.EntityTagsTagArgs(\n            key=\"my-key-2\",\n            values=[\"my-value-2\"],\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\");\n\n    var fooNrqlAlertCondition = new NewRelic.NrqlAlertCondition(\"fooNrqlAlertCondition\", new()\n    {\n        AccountId = 12345678,\n        PolicyId = fooAlertPolicy.Id,\n        Type = \"static\",\n        Description = \"Alert when transactions are taking too long\",\n        RunbookUrl = \"https://www.example.com\",\n        Enabled = true,\n        ViolationTimeLimitSeconds = 3600,\n        FillOption = \"static\",\n        FillValue = 1,\n        AggregationWindow = 60,\n        AggregationMethod = \"event_flow\",\n        AggregationDelay = \"120\",\n        ExpirationDuration = 120,\n        OpenViolationOnExpiration = true,\n        CloseViolationsOnExpiration = true,\n        SlideBy = 30,\n        Nrql = new NewRelic.Inputs.NrqlAlertConditionNrqlArgs\n        {\n            Query = \"SELECT average(duration) FROM Transaction where appName = 'Your App'\",\n        },\n        Critical = new NewRelic.Inputs.NrqlAlertConditionCriticalArgs\n        {\n            Operator = \"above\",\n            Threshold = 5.5,\n            ThresholdDuration = 300,\n            ThresholdOccurrences = \"ALL\",\n        },\n        Warning = new NewRelic.Inputs.NrqlAlertConditionWarningArgs\n        {\n            Operator = \"above\",\n            Threshold = 3.5,\n            ThresholdDuration = 600,\n            ThresholdOccurrences = \"ALL\",\n        },\n    });\n\n    var myConditionEntityTags = new NewRelic.EntityTags(\"myConditionEntityTags\", new()\n    {\n        Guid = fooNrqlAlertCondition.EntityGuid,\n        Tags = new[]\n        {\n            new NewRelic.Inputs.EntityTagsTagArgs\n            {\n                Key = \"my-key\",\n                Values = new[]\n                {\n                    \"my-value\",\n                    \"my-other-value\",\n                },\n            },\n            new NewRelic.Inputs.EntityTagsTagArgs\n            {\n                Key = \"my-key-2\",\n                Values = new[]\n                {\n                    \"my-value-2\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooNrqlAlertCondition, err := newrelic.NewNrqlAlertCondition(ctx, \"fooNrqlAlertCondition\", \u0026newrelic.NrqlAlertConditionArgs{\n\t\t\tAccountId:                   pulumi.Int(12345678),\n\t\t\tPolicyId:                    fooAlertPolicy.ID(),\n\t\t\tType:                        pulumi.String(\"static\"),\n\t\t\tDescription:                 pulumi.String(\"Alert when transactions are taking too long\"),\n\t\t\tRunbookUrl:                  pulumi.String(\"https://www.example.com\"),\n\t\t\tEnabled:                     pulumi.Bool(true),\n\t\t\tViolationTimeLimitSeconds:   pulumi.Int(3600),\n\t\t\tFillOption:                  pulumi.String(\"static\"),\n\t\t\tFillValue:                   pulumi.Float64(1),\n\t\t\tAggregationWindow:           pulumi.Int(60),\n\t\t\tAggregationMethod:           pulumi.String(\"event_flow\"),\n\t\t\tAggregationDelay:            pulumi.String(\"120\"),\n\t\t\tExpirationDuration:          pulumi.Int(120),\n\t\t\tOpenViolationOnExpiration:   pulumi.Bool(true),\n\t\t\tCloseViolationsOnExpiration: pulumi.Bool(true),\n\t\t\tSlideBy:                     pulumi.Int(30),\n\t\t\tNrql: \u0026newrelic.NrqlAlertConditionNrqlArgs{\n\t\t\t\tQuery: pulumi.String(\"SELECT average(duration) FROM Transaction where appName = 'Your App'\"),\n\t\t\t},\n\t\t\tCritical: \u0026newrelic.NrqlAlertConditionCriticalArgs{\n\t\t\t\tOperator:             pulumi.String(\"above\"),\n\t\t\t\tThreshold:            pulumi.Float64(5.5),\n\t\t\t\tThresholdDuration:    pulumi.Int(300),\n\t\t\t\tThresholdOccurrences: pulumi.String(\"ALL\"),\n\t\t\t},\n\t\t\tWarning: \u0026newrelic.NrqlAlertConditionWarningArgs{\n\t\t\t\tOperator:             pulumi.String(\"above\"),\n\t\t\t\tThreshold:            pulumi.Float64(3.5),\n\t\t\t\tThresholdDuration:    pulumi.Int(600),\n\t\t\t\tThresholdOccurrences: pulumi.String(\"ALL\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewEntityTags(ctx, \"myConditionEntityTags\", \u0026newrelic.EntityTagsArgs{\n\t\t\tGuid: fooNrqlAlertCondition.EntityGuid,\n\t\t\tTags: newrelic.EntityTagsTagArray{\n\t\t\t\t\u0026newrelic.EntityTagsTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"my-key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"my-value\"),\n\t\t\t\t\t\tpulumi.String(\"my-other-value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.EntityTagsTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"my-key-2\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"my-value-2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.NrqlAlertCondition;\nimport com.pulumi.newrelic.NrqlAlertConditionArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionNrqlArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionCriticalArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionWarningArgs;\nimport com.pulumi.newrelic.EntityTags;\nimport com.pulumi.newrelic.EntityTagsArgs;\nimport com.pulumi.newrelic.inputs.EntityTagsTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooAlertPolicy = new AlertPolicy(\"fooAlertPolicy\");\n\n        var fooNrqlAlertCondition = new NrqlAlertCondition(\"fooNrqlAlertCondition\", NrqlAlertConditionArgs.builder()        \n            .accountId(12345678)\n            .policyId(fooAlertPolicy.id())\n            .type(\"static\")\n            .description(\"Alert when transactions are taking too long\")\n            .runbookUrl(\"https://www.example.com\")\n            .enabled(true)\n            .violationTimeLimitSeconds(3600)\n            .fillOption(\"static\")\n            .fillValue(1)\n            .aggregationWindow(60)\n            .aggregationMethod(\"event_flow\")\n            .aggregationDelay(120)\n            .expirationDuration(120)\n            .openViolationOnExpiration(true)\n            .closeViolationsOnExpiration(true)\n            .slideBy(30)\n            .nrql(NrqlAlertConditionNrqlArgs.builder()\n                .query(\"SELECT average(duration) FROM Transaction where appName = 'Your App'\")\n                .build())\n            .critical(NrqlAlertConditionCriticalArgs.builder()\n                .operator(\"above\")\n                .threshold(5.5)\n                .thresholdDuration(300)\n                .thresholdOccurrences(\"ALL\")\n                .build())\n            .warning(NrqlAlertConditionWarningArgs.builder()\n                .operator(\"above\")\n                .threshold(3.5)\n                .thresholdDuration(600)\n                .thresholdOccurrences(\"ALL\")\n                .build())\n            .build());\n\n        var myConditionEntityTags = new EntityTags(\"myConditionEntityTags\", EntityTagsArgs.builder()        \n            .guid(fooNrqlAlertCondition.entityGuid())\n            .tags(            \n                EntityTagsTagArgs.builder()\n                    .key(\"my-key\")\n                    .values(                    \n                        \"my-value\",\n                        \"my-other-value\")\n                    .build(),\n                EntityTagsTagArgs.builder()\n                    .key(\"my-key-2\")\n                    .values(\"my-value-2\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooAlertPolicy:\n    type: newrelic:AlertPolicy\n  fooNrqlAlertCondition:\n    type: newrelic:NrqlAlertCondition\n    properties:\n      accountId: 1.2345678e+07\n      policyId: ${fooAlertPolicy.id}\n      type: static\n      description: Alert when transactions are taking too long\n      runbookUrl: https://www.example.com\n      enabled: true\n      violationTimeLimitSeconds: 3600\n      fillOption: static\n      fillValue: 1\n      aggregationWindow: 60\n      aggregationMethod: event_flow\n      aggregationDelay: 120\n      expirationDuration: 120\n      openViolationOnExpiration: true\n      closeViolationsOnExpiration: true\n      slideBy: 30\n      nrql:\n        query: SELECT average(duration) FROM Transaction where appName = 'Your App'\n      critical:\n        operator: above\n        threshold: 5.5\n        thresholdDuration: 300\n        thresholdOccurrences: ALL\n      warning:\n        operator: above\n        threshold: 3.5\n        thresholdDuration: 600\n        thresholdOccurrences: ALL\n  myConditionEntityTags:\n    type: newrelic:EntityTags\n    properties:\n      guid: ${fooNrqlAlertCondition.entityGuid}\n      tags:\n        - key: my-key\n          values:\n            - my-value\n            - my-other-value\n        - key: my-key-2\n          values:\n            - my-value-2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003csmall\u003ealerts.newrelic.com/accounts/**\\\u003caccount_id\\\u003e**/policies/**\\\u003cpolicy_id\\\u003e**/conditions/**\\\u003ccondition_id\\\u003e**/edit\u003c/small\u003e\n\n## Upgrade from 1.x to 2.x\n\nThere have been several deprecations in the `newrelic.NrqlAlertCondition`\nresource. Users will need to make some updates in order to have a smooth\nupgrade.\n\nAn example resource from 1.x might look like the following.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst nrqlAlertCondition = new newrelic.NrqlAlertCondition(\"nrqlAlertCondition\", {\n    policyId: newrelic_alert_policy.z.id,\n    type: \"static\",\n    runbookUrl: \"https://localhost\",\n    enabled: true,\n    violationTimeLimit: \"TWENTY_FOUR_HOURS\",\n    critical: {\n        operator: \"above\",\n        thresholdDuration: 120,\n        threshold: 3,\n        thresholdOccurrences: \"AT_LEAST_ONCE\",\n    },\n    nrql: {\n        query: \"SELECT count(*) FROM TransactionError WHERE appName like '%Dummy App%' FACET appName\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nnrql_alert_condition = newrelic.NrqlAlertCondition(\"nrqlAlertCondition\",\n    policy_id=newrelic_alert_policy[\"z\"][\"id\"],\n    type=\"static\",\n    runbook_url=\"https://localhost\",\n    enabled=True,\n    violation_time_limit=\"TWENTY_FOUR_HOURS\",\n    critical=newrelic.NrqlAlertConditionCriticalArgs(\n        operator=\"above\",\n        threshold_duration=120,\n        threshold=3,\n        threshold_occurrences=\"AT_LEAST_ONCE\",\n    ),\n    nrql=newrelic.NrqlAlertConditionNrqlArgs(\n        query=\"SELECT count(*) FROM TransactionError WHERE appName like '%Dummy App%' FACET appName\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nrqlAlertCondition = new NewRelic.NrqlAlertCondition(\"nrqlAlertCondition\", new()\n    {\n        PolicyId = newrelic_alert_policy.Z.Id,\n        Type = \"static\",\n        RunbookUrl = \"https://localhost\",\n        Enabled = true,\n        ViolationTimeLimit = \"TWENTY_FOUR_HOURS\",\n        Critical = new NewRelic.Inputs.NrqlAlertConditionCriticalArgs\n        {\n            Operator = \"above\",\n            ThresholdDuration = 120,\n            Threshold = 3,\n            ThresholdOccurrences = \"AT_LEAST_ONCE\",\n        },\n        Nrql = new NewRelic.Inputs.NrqlAlertConditionNrqlArgs\n        {\n            Query = \"SELECT count(*) FROM TransactionError WHERE appName like '%Dummy App%' FACET appName\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewNrqlAlertCondition(ctx, \"nrqlAlertCondition\", \u0026newrelic.NrqlAlertConditionArgs{\n\t\t\tPolicyId:           pulumi.Any(newrelic_alert_policy.Z.Id),\n\t\t\tType:               pulumi.String(\"static\"),\n\t\t\tRunbookUrl:         pulumi.String(\"https://localhost\"),\n\t\t\tEnabled:            pulumi.Bool(true),\n\t\t\tViolationTimeLimit: pulumi.String(\"TWENTY_FOUR_HOURS\"),\n\t\t\tCritical: \u0026newrelic.NrqlAlertConditionCriticalArgs{\n\t\t\t\tOperator:             pulumi.String(\"above\"),\n\t\t\t\tThresholdDuration:    pulumi.Int(120),\n\t\t\t\tThreshold:            pulumi.Float64(3),\n\t\t\t\tThresholdOccurrences: pulumi.String(\"AT_LEAST_ONCE\"),\n\t\t\t},\n\t\t\tNrql: \u0026newrelic.NrqlAlertConditionNrqlArgs{\n\t\t\t\tQuery: pulumi.String(\"SELECT count(*) FROM TransactionError WHERE appName like '%Dummy App%' FACET appName\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NrqlAlertCondition;\nimport com.pulumi.newrelic.NrqlAlertConditionArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionCriticalArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionNrqlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var nrqlAlertCondition = new NrqlAlertCondition(\"nrqlAlertCondition\", NrqlAlertConditionArgs.builder()        \n            .policyId(newrelic_alert_policy.z().id())\n            .type(\"static\")\n            .runbookUrl(\"https://localhost\")\n            .enabled(true)\n            .violationTimeLimit(\"TWENTY_FOUR_HOURS\")\n            .critical(NrqlAlertConditionCriticalArgs.builder()\n                .operator(\"above\")\n                .thresholdDuration(120)\n                .threshold(3)\n                .thresholdOccurrences(\"AT_LEAST_ONCE\")\n                .build())\n            .nrql(NrqlAlertConditionNrqlArgs.builder()\n                .query(\"SELECT count(*) FROM TransactionError WHERE appName like '%Dummy App%' FACET appName\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  nrqlAlertCondition:\n    type: newrelic:NrqlAlertCondition\n    properties:\n      policyId: ${newrelic_alert_policy.z.id}\n      type: static\n      runbookUrl: https://localhost\n      enabled: true\n      violationTimeLimit: TWENTY_FOUR_HOURS\n      critical:\n        operator: above\n        thresholdDuration: 120\n        threshold: 3\n        thresholdOccurrences: AT_LEAST_ONCE\n      nrql:\n        query: SELECT count(*) FROM TransactionError WHERE appName like '%Dummy App%' FACET appName\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nAfter making the appropriate adjustments mentioned in the deprecation warnings,\nthe resource now looks like the following.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst nrqlAlertCondition = new newrelic.NrqlAlertCondition(\"nrqlAlertCondition\", {\n    policyId: newrelic_alert_policy.z.id,\n    type: \"static\",\n    runbookUrl: \"https://localhost\",\n    enabled: true,\n    violationTimeLimitSeconds: 86400,\n    terms: [{\n        priority: \"critical\",\n        operator: \"above\",\n        threshold: 3,\n        duration: 5,\n        timeFunction: \"any\",\n    }],\n    nrql: {\n        query: \"SELECT count(*) FROM TransactionError WHERE appName like '%Dummy App%' FACET appName\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nnrql_alert_condition = newrelic.NrqlAlertCondition(\"nrqlAlertCondition\",\n    policy_id=newrelic_alert_policy[\"z\"][\"id\"],\n    type=\"static\",\n    runbook_url=\"https://localhost\",\n    enabled=True,\n    violation_time_limit_seconds=86400,\n    terms=[newrelic.NrqlAlertConditionTermArgs(\n        priority=\"critical\",\n        operator=\"above\",\n        threshold=3,\n        duration=5,\n        time_function=\"any\",\n    )],\n    nrql=newrelic.NrqlAlertConditionNrqlArgs(\n        query=\"SELECT count(*) FROM TransactionError WHERE appName like '%Dummy App%' FACET appName\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nrqlAlertCondition = new NewRelic.NrqlAlertCondition(\"nrqlAlertCondition\", new()\n    {\n        PolicyId = newrelic_alert_policy.Z.Id,\n        Type = \"static\",\n        RunbookUrl = \"https://localhost\",\n        Enabled = true,\n        ViolationTimeLimitSeconds = 86400,\n        Terms = new[]\n        {\n            new NewRelic.Inputs.NrqlAlertConditionTermArgs\n            {\n                Priority = \"critical\",\n                Operator = \"above\",\n                Threshold = 3,\n                Duration = 5,\n                TimeFunction = \"any\",\n            },\n        },\n        Nrql = new NewRelic.Inputs.NrqlAlertConditionNrqlArgs\n        {\n            Query = \"SELECT count(*) FROM TransactionError WHERE appName like '%Dummy App%' FACET appName\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewNrqlAlertCondition(ctx, \"nrqlAlertCondition\", \u0026newrelic.NrqlAlertConditionArgs{\n\t\t\tPolicyId:                  pulumi.Any(newrelic_alert_policy.Z.Id),\n\t\t\tType:                      pulumi.String(\"static\"),\n\t\t\tRunbookUrl:                pulumi.String(\"https://localhost\"),\n\t\t\tEnabled:                   pulumi.Bool(true),\n\t\t\tViolationTimeLimitSeconds: pulumi.Int(86400),\n\t\t\tTerms: newrelic.NrqlAlertConditionTermArray{\n\t\t\t\t\u0026newrelic.NrqlAlertConditionTermArgs{\n\t\t\t\t\tPriority:     pulumi.String(\"critical\"),\n\t\t\t\t\tOperator:     pulumi.String(\"above\"),\n\t\t\t\t\tThreshold:    pulumi.Float64(3),\n\t\t\t\t\tDuration:     pulumi.Int(5),\n\t\t\t\t\tTimeFunction: pulumi.String(\"any\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNrql: \u0026newrelic.NrqlAlertConditionNrqlArgs{\n\t\t\t\tQuery: pulumi.String(\"SELECT count(*) FROM TransactionError WHERE appName like '%Dummy App%' FACET appName\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NrqlAlertCondition;\nimport com.pulumi.newrelic.NrqlAlertConditionArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionTermArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionNrqlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var nrqlAlertCondition = new NrqlAlertCondition(\"nrqlAlertCondition\", NrqlAlertConditionArgs.builder()        \n            .policyId(newrelic_alert_policy.z().id())\n            .type(\"static\")\n            .runbookUrl(\"https://localhost\")\n            .enabled(true)\n            .violationTimeLimitSeconds(86400)\n            .terms(NrqlAlertConditionTermArgs.builder()\n                .priority(\"critical\")\n                .operator(\"above\")\n                .threshold(3)\n                .duration(5)\n                .timeFunction(\"any\")\n                .build())\n            .nrql(NrqlAlertConditionNrqlArgs.builder()\n                .query(\"SELECT count(*) FROM TransactionError WHERE appName like '%Dummy App%' FACET appName\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  nrqlAlertCondition:\n    type: newrelic:NrqlAlertCondition\n    properties:\n      policyId: ${newrelic_alert_policy.z.id}\n      type: static\n      runbookUrl: https://localhost\n      enabled: true\n      violationTimeLimitSeconds: 86400\n      terms:\n        - priority: critical\n          operator: above\n          threshold: 3\n          duration: 5\n          timeFunction: any\n      nrql:\n        query: SELECT count(*) FROM TransactionError WHERE appName like '%Dummy App%' FACET appName\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNRQL alert conditions can be imported using a composite ID of `\u003cpolicy_id\u003e:\u003ccondition_id\u003e:\u003cconditionType\u003e`, e.g.\n\n// For `baseline` conditions\n\n```sh\n$ pulumi import newrelic:index/nrqlAlertCondition:NrqlAlertCondition foo 538291:6789035:baseline\n```\n\n// For `static` conditions\n\n```sh\n$ pulumi import newrelic:index/nrqlAlertCondition:NrqlAlertCondition foo 538291:6789035:static\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID of the account you wish to create the condition. Defaults to the account ID set in your environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "aggregationDelay": {
                    "type": "string",
                    "description": "How long we wait for data that belongs in each aggregation window. Depending on your data, a longer delay may increase accuracy but delay notifications. Use `aggregation_delay` with the `event_flow` and `cadence` methods. The maximum delay is 1200 seconds (20 minutes) when using `event_flow` and 3600 seconds (60 minutes) when using `cadence`. In both cases, the minimum delay is 0 seconds and the default is 120 seconds. `aggregation_delay` cannot be set with `nrql.evaluation_offset`.\n"
                },
                "aggregationMethod": {
                    "type": "string",
                    "description": "Determines when we consider an aggregation window to be complete so that we can evaluate the signal for incidents. Possible values are `cadence`, `event_flow` or `event_timer`. Default is `event_flow`. `aggregation_method` cannot be set with `nrql.evaluation_offset`.\n"
                },
                "aggregationTimer": {
                    "type": "string",
                    "description": "How long we wait after each data point arrives to make sure we've processed the whole batch. Use `aggregation_timer` with the `event_timer` method. The timer value can range from 0 seconds to 1200 seconds (20 minutes); the default is 60 seconds. `aggregation_timer` cannot be set with `nrql.evaluation_offset`.\n"
                },
                "aggregationWindow": {
                    "type": "integer",
                    "description": "The duration of the time window used to evaluate the NRQL query, in seconds. The value must be at least 30 seconds, and no more than 21600 seconds (6 hours). Default is 60 seconds.\n"
                },
                "baselineDirection": {
                    "type": "string",
                    "description": "The baseline direction of a _baseline_ NRQL alert condition. Valid values are: `lower_only`, `upper_and_lower`, `upper_only` (case insensitive).\n"
                },
                "closeViolationsOnExpiration": {
                    "type": "boolean",
                    "description": "Whether to close all open incidents when the signal expires.\n"
                },
                "critical": {
                    "$ref": "#/types/newrelic:index/NrqlAlertConditionCritical:NrqlAlertConditionCritical",
                    "description": "A list containing the `critical` threshold values. At least one `critical` or `warning` threshold must be defined. See Terms below for details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the NRQL alert condition.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the alert condition. Valid values are `true` and `false`. Defaults to `true`.\n"
                },
                "entityGuid": {
                    "type": "string",
                    "description": "The unique entity identifier of the NRQL Condition in New Relic.\n"
                },
                "evaluationDelay": {
                    "type": "integer",
                    "description": "How long we wait until the signal starts evaluating. The maximum delay is 7200 seconds (120 minutes).\n"
                },
                "expirationDuration": {
                    "type": "integer",
                    "description": "The amount of time (in seconds) to wait before considering the signal expired. The value must be at least 30 seconds, and no more than 172800 seconds (48 hours).\n"
                },
                "fillOption": {
                    "type": "string",
                    "description": "Which strategy to use when filling gaps in the signal. Possible values are `none`, `last_value` or `static`. If `static`, the `fill_value` field will be used for filling gaps in the signal.\n"
                },
                "fillValue": {
                    "type": "number",
                    "description": "This value will be used for filling gaps in the signal.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition.\n"
                },
                "nrql": {
                    "$ref": "#/types/newrelic:index/NrqlAlertConditionNrql:NrqlAlertConditionNrql",
                    "description": "A NRQL query. See NRQL below for details.\n"
                },
                "openViolationOnExpiration": {
                    "type": "boolean",
                    "description": "Whether to create a new incident to capture that the signal expired.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "slideBy": {
                    "type": "integer",
                    "description": "Gathers data in overlapping time windows to smooth the chart line, making it easier to spot trends. The `slide_by` value is specified in seconds and must be smaller than and a factor of the `aggregation_window`.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/NrqlAlertConditionTerm:NrqlAlertConditionTerm"
                    },
                    "description": "**DEPRECATED** Use `critical`, and `warning` instead. A list of terms for this condition. See Terms below for details.\n",
                    "deprecationMessage": "use `critical` and `warning` attributes instead"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the condition. Valid values are `static` or `baseline`. Defaults to `static`.\n"
                },
                "violationTimeLimit": {
                    "type": "string",
                    "description": "**DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting incident after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).\u003cbr\u003e\n\u003csmall\u003e\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.\u003c/small\u003e\n",
                    "deprecationMessage": "use `violation_time_limit_seconds` attribute instead"
                },
                "violationTimeLimitSeconds": {
                    "type": "integer",
                    "description": "Sets a time limit, in seconds, that will automatically force-close a long-lasting incident after the time limit you select. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days) (inclusive). \u003cbr\u003e\n\u003csmall\u003e\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.\u003c/small\u003e\n"
                },
                "warning": {
                    "$ref": "#/types/newrelic:index/NrqlAlertConditionWarning:NrqlAlertConditionWarning",
                    "description": "A list containing the `warning` threshold values. At least one `critical` or `warning` threshold must be defined. See Terms below for details.\n"
                }
            },
            "required": [
                "accountId",
                "aggregationWindow",
                "entityGuid",
                "name",
                "nrql",
                "policyId",
                "violationTimeLimit"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID of the account you wish to create the condition. Defaults to the account ID set in your environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "aggregationDelay": {
                    "type": "string",
                    "description": "How long we wait for data that belongs in each aggregation window. Depending on your data, a longer delay may increase accuracy but delay notifications. Use `aggregation_delay` with the `event_flow` and `cadence` methods. The maximum delay is 1200 seconds (20 minutes) when using `event_flow` and 3600 seconds (60 minutes) when using `cadence`. In both cases, the minimum delay is 0 seconds and the default is 120 seconds. `aggregation_delay` cannot be set with `nrql.evaluation_offset`.\n"
                },
                "aggregationMethod": {
                    "type": "string",
                    "description": "Determines when we consider an aggregation window to be complete so that we can evaluate the signal for incidents. Possible values are `cadence`, `event_flow` or `event_timer`. Default is `event_flow`. `aggregation_method` cannot be set with `nrql.evaluation_offset`.\n"
                },
                "aggregationTimer": {
                    "type": "string",
                    "description": "How long we wait after each data point arrives to make sure we've processed the whole batch. Use `aggregation_timer` with the `event_timer` method. The timer value can range from 0 seconds to 1200 seconds (20 minutes); the default is 60 seconds. `aggregation_timer` cannot be set with `nrql.evaluation_offset`.\n"
                },
                "aggregationWindow": {
                    "type": "integer",
                    "description": "The duration of the time window used to evaluate the NRQL query, in seconds. The value must be at least 30 seconds, and no more than 21600 seconds (6 hours). Default is 60 seconds.\n"
                },
                "baselineDirection": {
                    "type": "string",
                    "description": "The baseline direction of a _baseline_ NRQL alert condition. Valid values are: `lower_only`, `upper_and_lower`, `upper_only` (case insensitive).\n"
                },
                "closeViolationsOnExpiration": {
                    "type": "boolean",
                    "description": "Whether to close all open incidents when the signal expires.\n"
                },
                "critical": {
                    "$ref": "#/types/newrelic:index/NrqlAlertConditionCritical:NrqlAlertConditionCritical",
                    "description": "A list containing the `critical` threshold values. At least one `critical` or `warning` threshold must be defined. See Terms below for details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the NRQL alert condition.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the alert condition. Valid values are `true` and `false`. Defaults to `true`.\n"
                },
                "evaluationDelay": {
                    "type": "integer",
                    "description": "How long we wait until the signal starts evaluating. The maximum delay is 7200 seconds (120 minutes).\n"
                },
                "expirationDuration": {
                    "type": "integer",
                    "description": "The amount of time (in seconds) to wait before considering the signal expired. The value must be at least 30 seconds, and no more than 172800 seconds (48 hours).\n"
                },
                "fillOption": {
                    "type": "string",
                    "description": "Which strategy to use when filling gaps in the signal. Possible values are `none`, `last_value` or `static`. If `static`, the `fill_value` field will be used for filling gaps in the signal.\n"
                },
                "fillValue": {
                    "type": "number",
                    "description": "This value will be used for filling gaps in the signal.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition.\n"
                },
                "nrql": {
                    "$ref": "#/types/newrelic:index/NrqlAlertConditionNrql:NrqlAlertConditionNrql",
                    "description": "A NRQL query. See NRQL below for details.\n"
                },
                "openViolationOnExpiration": {
                    "type": "boolean",
                    "description": "Whether to create a new incident to capture that the signal expired.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n",
                    "willReplaceOnChanges": true
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "slideBy": {
                    "type": "integer",
                    "description": "Gathers data in overlapping time windows to smooth the chart line, making it easier to spot trends. The `slide_by` value is specified in seconds and must be smaller than and a factor of the `aggregation_window`.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/NrqlAlertConditionTerm:NrqlAlertConditionTerm"
                    },
                    "description": "**DEPRECATED** Use `critical`, and `warning` instead. A list of terms for this condition. See Terms below for details.\n",
                    "deprecationMessage": "use `critical` and `warning` attributes instead"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the condition. Valid values are `static` or `baseline`. Defaults to `static`.\n",
                    "willReplaceOnChanges": true
                },
                "violationTimeLimit": {
                    "type": "string",
                    "description": "**DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting incident after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).\u003cbr\u003e\n\u003csmall\u003e\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.\u003c/small\u003e\n",
                    "deprecationMessage": "use `violation_time_limit_seconds` attribute instead"
                },
                "violationTimeLimitSeconds": {
                    "type": "integer",
                    "description": "Sets a time limit, in seconds, that will automatically force-close a long-lasting incident after the time limit you select. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days) (inclusive). \u003cbr\u003e\n\u003csmall\u003e\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.\u003c/small\u003e\n"
                },
                "warning": {
                    "$ref": "#/types/newrelic:index/NrqlAlertConditionWarning:NrqlAlertConditionWarning",
                    "description": "A list containing the `warning` threshold values. At least one `critical` or `warning` threshold must be defined. See Terms below for details.\n"
                }
            },
            "requiredInputs": [
                "nrql",
                "policyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NrqlAlertCondition resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID of the account you wish to create the condition. Defaults to the account ID set in your environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "aggregationDelay": {
                        "type": "string",
                        "description": "How long we wait for data that belongs in each aggregation window. Depending on your data, a longer delay may increase accuracy but delay notifications. Use `aggregation_delay` with the `event_flow` and `cadence` methods. The maximum delay is 1200 seconds (20 minutes) when using `event_flow` and 3600 seconds (60 minutes) when using `cadence`. In both cases, the minimum delay is 0 seconds and the default is 120 seconds. `aggregation_delay` cannot be set with `nrql.evaluation_offset`.\n"
                    },
                    "aggregationMethod": {
                        "type": "string",
                        "description": "Determines when we consider an aggregation window to be complete so that we can evaluate the signal for incidents. Possible values are `cadence`, `event_flow` or `event_timer`. Default is `event_flow`. `aggregation_method` cannot be set with `nrql.evaluation_offset`.\n"
                    },
                    "aggregationTimer": {
                        "type": "string",
                        "description": "How long we wait after each data point arrives to make sure we've processed the whole batch. Use `aggregation_timer` with the `event_timer` method. The timer value can range from 0 seconds to 1200 seconds (20 minutes); the default is 60 seconds. `aggregation_timer` cannot be set with `nrql.evaluation_offset`.\n"
                    },
                    "aggregationWindow": {
                        "type": "integer",
                        "description": "The duration of the time window used to evaluate the NRQL query, in seconds. The value must be at least 30 seconds, and no more than 21600 seconds (6 hours). Default is 60 seconds.\n"
                    },
                    "baselineDirection": {
                        "type": "string",
                        "description": "The baseline direction of a _baseline_ NRQL alert condition. Valid values are: `lower_only`, `upper_and_lower`, `upper_only` (case insensitive).\n"
                    },
                    "closeViolationsOnExpiration": {
                        "type": "boolean",
                        "description": "Whether to close all open incidents when the signal expires.\n"
                    },
                    "critical": {
                        "$ref": "#/types/newrelic:index/NrqlAlertConditionCritical:NrqlAlertConditionCritical",
                        "description": "A list containing the `critical` threshold values. At least one `critical` or `warning` threshold must be defined. See Terms below for details.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the NRQL alert condition.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether to enable the alert condition. Valid values are `true` and `false`. Defaults to `true`.\n"
                    },
                    "entityGuid": {
                        "type": "string",
                        "description": "The unique entity identifier of the NRQL Condition in New Relic.\n"
                    },
                    "evaluationDelay": {
                        "type": "integer",
                        "description": "How long we wait until the signal starts evaluating. The maximum delay is 7200 seconds (120 minutes).\n"
                    },
                    "expirationDuration": {
                        "type": "integer",
                        "description": "The amount of time (in seconds) to wait before considering the signal expired. The value must be at least 30 seconds, and no more than 172800 seconds (48 hours).\n"
                    },
                    "fillOption": {
                        "type": "string",
                        "description": "Which strategy to use when filling gaps in the signal. Possible values are `none`, `last_value` or `static`. If `static`, the `fill_value` field will be used for filling gaps in the signal.\n"
                    },
                    "fillValue": {
                        "type": "number",
                        "description": "This value will be used for filling gaps in the signal.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the condition.\n"
                    },
                    "nrql": {
                        "$ref": "#/types/newrelic:index/NrqlAlertConditionNrql:NrqlAlertConditionNrql",
                        "description": "A NRQL query. See NRQL below for details.\n"
                    },
                    "openViolationOnExpiration": {
                        "type": "boolean",
                        "description": "Whether to create a new incident to capture that the signal expired.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the policy where this condition should be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "runbookUrl": {
                        "type": "string",
                        "description": "Runbook URL to display in notifications.\n"
                    },
                    "slideBy": {
                        "type": "integer",
                        "description": "Gathers data in overlapping time windows to smooth the chart line, making it easier to spot trends. The `slide_by` value is specified in seconds and must be smaller than and a factor of the `aggregation_window`.\n"
                    },
                    "terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/NrqlAlertConditionTerm:NrqlAlertConditionTerm"
                        },
                        "description": "**DEPRECATED** Use `critical`, and `warning` instead. A list of terms for this condition. See Terms below for details.\n",
                        "deprecationMessage": "use `critical` and `warning` attributes instead"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the condition. Valid values are `static` or `baseline`. Defaults to `static`.\n",
                        "willReplaceOnChanges": true
                    },
                    "violationTimeLimit": {
                        "type": "string",
                        "description": "**DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting incident after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).\u003cbr\u003e\n\u003csmall\u003e\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.\u003c/small\u003e\n",
                        "deprecationMessage": "use `violation_time_limit_seconds` attribute instead"
                    },
                    "violationTimeLimitSeconds": {
                        "type": "integer",
                        "description": "Sets a time limit, in seconds, that will automatically force-close a long-lasting incident after the time limit you select. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days) (inclusive). \u003cbr\u003e\n\u003csmall\u003e\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.\u003c/small\u003e\n"
                    },
                    "warning": {
                        "$ref": "#/types/newrelic:index/NrqlAlertConditionWarning:NrqlAlertConditionWarning",
                        "description": "A list containing the `warning` threshold values. At least one `critical` or `warning` threshold must be defined. See Terms below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/nrqlDropRule:NrqlDropRule": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.NrqlDropRule(\"foo\", {\n    accountId: 12345,\n    action: \"drop_data\",\n    description: \"Drops all data for MyCustomEvent that comes from the LoadGeneratingApp in the dev environment, because there is too much and we don’t look at it.\",\n    nrql: \"SELECT * FROM MyCustomEvent WHERE appName='LoadGeneratingApp' AND environment='development'\",\n});\nconst bar = new newrelic.NrqlDropRule(\"bar\", {\n    accountId: 12345,\n    action: \"drop_attributes\",\n    description: \"Removes the user name and email fields from MyCustomEvent\",\n    nrql: \"SELECT userEmail, userName FROM MyCustomEvent\",\n});\nconst baz = new newrelic.NrqlDropRule(\"baz\", {\n    accountId: 12345,\n    action: \"drop_attributes_from_metric_aggregates\",\n    description: \"Removes containerId from metric aggregates to reduce metric cardinality.\",\n    nrql: \"SELECT containerId FROM Metric\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.NrqlDropRule(\"foo\",\n    account_id=12345,\n    action=\"drop_data\",\n    description=\"Drops all data for MyCustomEvent that comes from the LoadGeneratingApp in the dev environment, because there is too much and we don’t look at it.\",\n    nrql=\"SELECT * FROM MyCustomEvent WHERE appName='LoadGeneratingApp' AND environment='development'\")\nbar = newrelic.NrqlDropRule(\"bar\",\n    account_id=12345,\n    action=\"drop_attributes\",\n    description=\"Removes the user name and email fields from MyCustomEvent\",\n    nrql=\"SELECT userEmail, userName FROM MyCustomEvent\")\nbaz = newrelic.NrqlDropRule(\"baz\",\n    account_id=12345,\n    action=\"drop_attributes_from_metric_aggregates\",\n    description=\"Removes containerId from metric aggregates to reduce metric cardinality.\",\n    nrql=\"SELECT containerId FROM Metric\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.NrqlDropRule(\"foo\", new()\n    {\n        AccountId = 12345,\n        Action = \"drop_data\",\n        Description = \"Drops all data for MyCustomEvent that comes from the LoadGeneratingApp in the dev environment, because there is too much and we don’t look at it.\",\n        Nrql = \"SELECT * FROM MyCustomEvent WHERE appName='LoadGeneratingApp' AND environment='development'\",\n    });\n\n    var bar = new NewRelic.NrqlDropRule(\"bar\", new()\n    {\n        AccountId = 12345,\n        Action = \"drop_attributes\",\n        Description = \"Removes the user name and email fields from MyCustomEvent\",\n        Nrql = \"SELECT userEmail, userName FROM MyCustomEvent\",\n    });\n\n    var baz = new NewRelic.NrqlDropRule(\"baz\", new()\n    {\n        AccountId = 12345,\n        Action = \"drop_attributes_from_metric_aggregates\",\n        Description = \"Removes containerId from metric aggregates to reduce metric cardinality.\",\n        Nrql = \"SELECT containerId FROM Metric\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewNrqlDropRule(ctx, \"foo\", \u0026newrelic.NrqlDropRuleArgs{\n\t\t\tAccountId:   pulumi.Int(12345),\n\t\t\tAction:      pulumi.String(\"drop_data\"),\n\t\t\tDescription: pulumi.String(\"Drops all data for MyCustomEvent that comes from the LoadGeneratingApp in the dev environment, because there is too much and we don’t look at it.\"),\n\t\t\tNrql:        pulumi.String(\"SELECT * FROM MyCustomEvent WHERE appName='LoadGeneratingApp' AND environment='development'\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewNrqlDropRule(ctx, \"bar\", \u0026newrelic.NrqlDropRuleArgs{\n\t\t\tAccountId:   pulumi.Int(12345),\n\t\t\tAction:      pulumi.String(\"drop_attributes\"),\n\t\t\tDescription: pulumi.String(\"Removes the user name and email fields from MyCustomEvent\"),\n\t\t\tNrql:        pulumi.String(\"SELECT userEmail, userName FROM MyCustomEvent\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewNrqlDropRule(ctx, \"baz\", \u0026newrelic.NrqlDropRuleArgs{\n\t\t\tAccountId:   pulumi.Int(12345),\n\t\t\tAction:      pulumi.String(\"drop_attributes_from_metric_aggregates\"),\n\t\t\tDescription: pulumi.String(\"Removes containerId from metric aggregates to reduce metric cardinality.\"),\n\t\t\tNrql:        pulumi.String(\"SELECT containerId FROM Metric\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NrqlDropRule;\nimport com.pulumi.newrelic.NrqlDropRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new NrqlDropRule(\"foo\", NrqlDropRuleArgs.builder()        \n            .accountId(12345)\n            .action(\"drop_data\")\n            .description(\"Drops all data for MyCustomEvent that comes from the LoadGeneratingApp in the dev environment, because there is too much and we don’t look at it.\")\n            .nrql(\"SELECT * FROM MyCustomEvent WHERE appName='LoadGeneratingApp' AND environment='development'\")\n            .build());\n\n        var bar = new NrqlDropRule(\"bar\", NrqlDropRuleArgs.builder()        \n            .accountId(12345)\n            .action(\"drop_attributes\")\n            .description(\"Removes the user name and email fields from MyCustomEvent\")\n            .nrql(\"SELECT userEmail, userName FROM MyCustomEvent\")\n            .build());\n\n        var baz = new NrqlDropRule(\"baz\", NrqlDropRuleArgs.builder()        \n            .accountId(12345)\n            .action(\"drop_attributes_from_metric_aggregates\")\n            .description(\"Removes containerId from metric aggregates to reduce metric cardinality.\")\n            .nrql(\"SELECT containerId FROM Metric\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:NrqlDropRule\n    properties:\n      accountId: 12345\n      action: drop_data\n      description: Drops all data for MyCustomEvent that comes from the LoadGeneratingApp in the dev environment, because there is too much and we don’t look at it.\n      nrql: SELECT * FROM MyCustomEvent WHERE appName='LoadGeneratingApp' AND environment='development'\n  bar:\n    type: newrelic:NrqlDropRule\n    properties:\n      accountId: 12345\n      action: drop_attributes\n      description: Removes the user name and email fields from MyCustomEvent\n      nrql: SELECT userEmail, userName FROM MyCustomEvent\n  baz:\n    type: newrelic:NrqlDropRule\n    properties:\n      accountId: 12345\n      action: drop_attributes_from_metric_aggregates\n      description: Removes containerId from metric aggregates to reduce metric cardinality.\n      nrql: SELECT containerId FROM Metric\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Using `newrelic-cli` to List Out Drop Rules\n\nAll NRQL Drop Rules associated with a New Relic account may be listed out using the following newrelic-cli command:\n```bash\nnewrelic nrql droprules\n```\nThis would print all drop rules associated with your New Relic account to the terminal.\nThe number of rules to be printed can be customized using the `limit` argument of this command.\nFor instance, the following command limits the number of drop rules printed to two.\n```bash\nnewrelic nrql droprules --limit 2\n```\nMore details on the command and its arguments (for instance, the format in which the droprules are to be listed in the terminal, which is JSON by default) can be found in the output of the `newrelic nrql droprules --help` command.\nIf you do not have **newrelic-cli** installed on your device already, head over to [this page](https://github.com/newrelic/newrelic-cli#installation--upgrades) for instructions.\n\n## Import\n\nNew Relic NRQL drop rules can be imported using a concatenated string of the format\n\n `\u003caccount_id\u003e:\u003crule_id\u003e`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:index/nrqlDropRule:NrqlDropRule foo 12345:34567\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Account where the drop rule will be put. Defaults to the account associated with the API key used.\n"
                },
                "action": {
                    "type": "string",
                    "description": "An action type specifying how to apply the NRQL string (either `drop_data`, `drop_attributes`, or ` drop_attributes_from_metric_aggregates`).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the drop rule.\n"
                },
                "nrql": {
                    "type": "string",
                    "description": "A NRQL string that specifies what data types to drop.\n"
                },
                "ruleId": {
                    "type": "string",
                    "description": "The id, uniquely identifying the rule.\n"
                }
            },
            "required": [
                "accountId",
                "action",
                "nrql",
                "ruleId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Account where the drop rule will be put. Defaults to the account associated with the API key used.\n"
                },
                "action": {
                    "type": "string",
                    "description": "An action type specifying how to apply the NRQL string (either `drop_data`, `drop_attributes`, or ` drop_attributes_from_metric_aggregates`).\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the drop rule.\n",
                    "willReplaceOnChanges": true
                },
                "nrql": {
                    "type": "string",
                    "description": "A NRQL string that specifies what data types to drop.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "action",
                "nrql"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NrqlDropRule resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Account where the drop rule will be put. Defaults to the account associated with the API key used.\n"
                    },
                    "action": {
                        "type": "string",
                        "description": "An action type specifying how to apply the NRQL string (either `drop_data`, `drop_attributes`, or ` drop_attributes_from_metric_aggregates`).\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the drop rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "nrql": {
                        "type": "string",
                        "description": "A NRQL string that specifies what data types to drop.\n",
                        "willReplaceOnChanges": true
                    },
                    "ruleId": {
                        "type": "string",
                        "description": "The id, uniquely identifying the rule.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/obfuscationExpression:ObfuscationExpression": {
            "description": "Use this resource to create, update and delete New Relic Obfuscation Expressions.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.ObfuscationExpression(\"foo\", {\n    accountId: 12345,\n    description: \"The description\",\n    regex: \"(regex.*)\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.ObfuscationExpression(\"foo\",\n    account_id=12345,\n    description=\"The description\",\n    regex=\"(regex.*)\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.ObfuscationExpression(\"foo\", new()\n    {\n        AccountId = 12345,\n        Description = \"The description\",\n        Regex = \"(regex.*)\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewObfuscationExpression(ctx, \"foo\", \u0026newrelic.ObfuscationExpressionArgs{\n\t\t\tAccountId:   pulumi.Int(12345),\n\t\t\tDescription: pulumi.String(\"The description\"),\n\t\t\tRegex:       pulumi.String(\"(regex.*)\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.ObfuscationExpression;\nimport com.pulumi.newrelic.ObfuscationExpressionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ObfuscationExpression(\"foo\", ObfuscationExpressionArgs.builder()        \n            .accountId(12345)\n            .description(\"The description\")\n            .regex(\"(regex.*)\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:ObfuscationExpression\n    properties:\n      accountId: 12345\n      description: The description\n      regex: (regex.*)\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNew Relic obfuscation expression can be imported using the expression ID, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:index/obfuscationExpression:ObfuscationExpression foo 34567\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account id associated with the obfuscation expression.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of expression.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of expression.\n"
                },
                "regex": {
                    "type": "string",
                    "description": "Regex of expression. Must be wrapped in parentheses, e.g. (regex.*).\n"
                }
            },
            "required": [
                "accountId",
                "name",
                "regex"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account id associated with the obfuscation expression.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of expression.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of expression.\n"
                },
                "regex": {
                    "type": "string",
                    "description": "Regex of expression. Must be wrapped in parentheses, e.g. (regex.*).\n"
                }
            },
            "requiredInputs": [
                "regex"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObfuscationExpression resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account id associated with the obfuscation expression.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of expression.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of expression.\n"
                    },
                    "regex": {
                        "type": "string",
                        "description": "Regex of expression. Must be wrapped in parentheses, e.g. (regex.*).\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/obfuscationRule:ObfuscationRule": {
            "description": "Use this resource to create, update and delete New Relic Obfuscation Rule.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst bar = new newrelic.ObfuscationExpression(\"bar\", {\n    description: \"description of the expression\",\n    regex: \"(^http)\",\n});\nconst foo = new newrelic.ObfuscationRule(\"foo\", {\n    description: \"description of the rule\",\n    filter: \"hostStatus=running\",\n    enabled: true,\n    actions: [{\n        attributes: [\"message\"],\n        expressionId: bar.id,\n        method: \"MASK\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nbar = newrelic.ObfuscationExpression(\"bar\",\n    description=\"description of the expression\",\n    regex=\"(^http)\")\nfoo = newrelic.ObfuscationRule(\"foo\",\n    description=\"description of the rule\",\n    filter=\"hostStatus=running\",\n    enabled=True,\n    actions=[newrelic.ObfuscationRuleActionArgs(\n        attributes=[\"message\"],\n        expression_id=bar.id,\n        method=\"MASK\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var bar = new NewRelic.ObfuscationExpression(\"bar\", new()\n    {\n        Description = \"description of the expression\",\n        Regex = \"(^http)\",\n    });\n\n    var foo = new NewRelic.ObfuscationRule(\"foo\", new()\n    {\n        Description = \"description of the rule\",\n        Filter = \"hostStatus=running\",\n        Enabled = true,\n        Actions = new[]\n        {\n            new NewRelic.Inputs.ObfuscationRuleActionArgs\n            {\n                Attributes = new[]\n                {\n                    \"message\",\n                },\n                ExpressionId = bar.Id,\n                Method = \"MASK\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbar, err := newrelic.NewObfuscationExpression(ctx, \"bar\", \u0026newrelic.ObfuscationExpressionArgs{\n\t\t\tDescription: pulumi.String(\"description of the expression\"),\n\t\t\tRegex:       pulumi.String(\"(^http)\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewObfuscationRule(ctx, \"foo\", \u0026newrelic.ObfuscationRuleArgs{\n\t\t\tDescription: pulumi.String(\"description of the rule\"),\n\t\t\tFilter:      pulumi.String(\"hostStatus=running\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tActions: newrelic.ObfuscationRuleActionArray{\n\t\t\t\t\u0026newrelic.ObfuscationRuleActionArgs{\n\t\t\t\t\tAttributes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"message\"),\n\t\t\t\t\t},\n\t\t\t\t\tExpressionId: bar.ID(),\n\t\t\t\t\tMethod:       pulumi.String(\"MASK\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.ObfuscationExpression;\nimport com.pulumi.newrelic.ObfuscationExpressionArgs;\nimport com.pulumi.newrelic.ObfuscationRule;\nimport com.pulumi.newrelic.ObfuscationRuleArgs;\nimport com.pulumi.newrelic.inputs.ObfuscationRuleActionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var bar = new ObfuscationExpression(\"bar\", ObfuscationExpressionArgs.builder()        \n            .description(\"description of the expression\")\n            .regex(\"(^http)\")\n            .build());\n\n        var foo = new ObfuscationRule(\"foo\", ObfuscationRuleArgs.builder()        \n            .description(\"description of the rule\")\n            .filter(\"hostStatus=running\")\n            .enabled(true)\n            .actions(ObfuscationRuleActionArgs.builder()\n                .attributes(\"message\")\n                .expressionId(bar.id())\n                .method(\"MASK\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bar:\n    type: newrelic:ObfuscationExpression\n    properties:\n      description: description of the expression\n      regex: (^http)\n  foo:\n    type: newrelic:ObfuscationRule\n    properties:\n      description: description of the rule\n      filter: hostStatus=running\n      enabled: true\n      actions:\n        - attributes:\n            - message\n          expressionId: ${bar.id}\n          method: MASK\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNew Relic obfuscation rule can be imported using the rule ID, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:index/obfuscationRule:ObfuscationRule foo 34567\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account id associated with the obfuscation rule.\n"
                },
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/ObfuscationRuleAction:ObfuscationRuleAction"
                    },
                    "description": "Actions for the rule. The actions will be applied in the order specified by this list.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of rule.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should be applied or not to incoming data.\n"
                },
                "filter": {
                    "type": "string",
                    "description": "NRQL for determining whether a given log record should have obfuscation actions applied.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of rule.\n"
                }
            },
            "required": [
                "accountId",
                "actions",
                "enabled",
                "filter",
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account id associated with the obfuscation rule.\n"
                },
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/ObfuscationRuleAction:ObfuscationRuleAction"
                    },
                    "description": "Actions for the rule. The actions will be applied in the order specified by this list.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of rule.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should be applied or not to incoming data.\n"
                },
                "filter": {
                    "type": "string",
                    "description": "NRQL for determining whether a given log record should have obfuscation actions applied.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of rule.\n"
                }
            },
            "requiredInputs": [
                "actions",
                "enabled",
                "filter"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObfuscationRule resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account id associated with the obfuscation rule.\n"
                    },
                    "actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/ObfuscationRuleAction:ObfuscationRuleAction"
                        },
                        "description": "Actions for the rule. The actions will be applied in the order specified by this list.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of rule.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the rule should be applied or not to incoming data.\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "NRQL for determining whether a given log record should have obfuscation actions applied.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of rule.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/oneDashboard:OneDashboard": {
            "description": "\n\n## Import\n\nNew Relic dashboards can be imported using their GUID, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:index/oneDashboard:OneDashboard my_dashboard \u003cdashboard GUID\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Brief text describing the dashboard.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The unique entity identifier of the dashboard page in New Relic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the dashboard.\n"
                },
                "pages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPage:OneDashboardPage"
                    },
                    "description": "A nested block that describes a page. See Nested page blocks below for details.\n"
                },
                "permalink": {
                    "type": "string",
                    "description": "The URL for viewing the dashboard.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`.  Defaults to `public_read_only`.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardVariable:OneDashboardVariable"
                    },
                    "description": "A nested block that describes a dashboard-local variable. See Nested variable blocks below for details.\n"
                }
            },
            "required": [
                "accountId",
                "guid",
                "name",
                "pages",
                "permalink"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Brief text describing the dashboard.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the dashboard.\n"
                },
                "pages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPage:OneDashboardPage"
                    },
                    "description": "A nested block that describes a page. See Nested page blocks below for details.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`.  Defaults to `public_read_only`.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardVariable:OneDashboardVariable"
                    },
                    "description": "A nested block that describes a dashboard-local variable. See Nested variable blocks below for details.\n"
                }
            },
            "requiredInputs": [
                "pages"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OneDashboard resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Brief text describing the dashboard.\n"
                    },
                    "guid": {
                        "type": "string",
                        "description": "The unique entity identifier of the dashboard page in New Relic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the dashboard.\n"
                    },
                    "pages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/OneDashboardPage:OneDashboardPage"
                        },
                        "description": "A nested block that describes a page. See Nested page blocks below for details.\n"
                    },
                    "permalink": {
                        "type": "string",
                        "description": "The URL for viewing the dashboard.\n"
                    },
                    "permissions": {
                        "type": "string",
                        "description": "Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`.  Defaults to `public_read_only`.\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/OneDashboardVariable:OneDashboardVariable"
                        },
                        "description": "A nested block that describes a dashboard-local variable. See Nested variable blocks below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/oneDashboardJson:OneDashboardJson": {
            "description": "\n\n## Import\n\nNew Relic dashboards can be imported using their GUID, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:index/oneDashboardJson:OneDashboardJson my_dashboard \u003cdashboard GUID\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The unique entity identifier of the dashboard in New Relic.\n"
                },
                "json": {
                    "type": "string",
                    "description": "The JSON export of a dashboard. [The JSON can be exported from the UI](https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/dashboards-charts-import-export-data/#dashboards)\n"
                },
                "permalink": {
                    "type": "string",
                    "description": "The URL for viewing the dashboard.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time when the dashboard was last updated.\n"
                }
            },
            "required": [
                "accountId",
                "guid",
                "json",
                "permalink",
                "updatedAt"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "json": {
                    "type": "string",
                    "description": "The JSON export of a dashboard. [The JSON can be exported from the UI](https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/dashboards-charts-import-export-data/#dashboards)\n"
                }
            },
            "requiredInputs": [
                "json"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OneDashboardJson resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                    },
                    "guid": {
                        "type": "string",
                        "description": "The unique entity identifier of the dashboard in New Relic.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "The JSON export of a dashboard. [The JSON can be exported from the UI](https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/dashboards-charts-import-export-data/#dashboards)\n"
                    },
                    "permalink": {
                        "type": "string",
                        "description": "The URL for viewing the dashboard.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time when the dashboard was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/oneDashboardRaw:OneDashboardRaw": {
            "description": "\u003e **NOTE:** The newrelic.OneDashboardJson resource is preferred for configuring dashboards in New Relic. This resource does not support the latest dashboard features and will receive less investment compared to newrelic_one_dashboard_json.\n\n## Example Usage\n\n### Create A New Relic One Dashboard With RawConfiguration\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst exampledash = new newrelic.OneDashboardRaw(\"exampledash\", {pages: [{\n    name: \"Page Name\",\n    widgets: [\n        {\n            title: \"Custom widget\",\n            row: 1,\n            column: 1,\n            width: 1,\n            height: 1,\n            visualizationId: \"viz.custom\",\n            configuration: `      {\n        \"legend\": {\n          \"enabled\": false\n        },\n        \"nrqlQueries\": [\n          {\n            \"accountId\": \\` + accountID + \\`,\n            \"query\": \"SELECT average(loadAverageOneMinute), average(loadAverageFiveMinute), average(loadAverageFifteenMinute) from SystemSample SINCE 60 minutes ago    TIMESERIES\"\n          }\n        ],\n        \"yAxisLeft\": {\n          \"max\": 100,\n          \"min\": 50,\n          \"zero\": false\n        }\n      }\n`,\n        },\n        {\n            title: \"Server CPU\",\n            row: 1,\n            column: 2,\n            width: 1,\n            height: 1,\n            visualizationId: \"viz.testing\",\n            configuration: `      {\n        \"nrqlQueries\": [\n          {\n            \"accountId\": \\` + accountID + \\`,\n            \"query\": \"SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400\"\n          }\n        ]\n      }\n`,\n        },\n        {\n            title: \"Docker Server CPU\",\n            row: 1,\n            column: 3,\n            height: 1,\n            width: 1,\n            visualizationId: \"viz.bar\",\n            configuration: JSON.stringify({\n                facet: {\n                    showOtherSeries: false,\n                },\n                nrqlQueries: [{\n                    accountId: local.accountID,\n                    query: \"SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400\",\n                }],\n            }),\n            linkedEntityGuids: [\"MzI5ODAxNnxWSVp8REFTSEJPQVJEfDI2MTcxNDc\"],\n        },\n    ],\n}]});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_newrelic as newrelic\n\nexampledash = newrelic.OneDashboardRaw(\"exampledash\", pages=[newrelic.OneDashboardRawPageArgs(\n    name=\"Page Name\",\n    widgets=[\n        newrelic.OneDashboardRawPageWidgetArgs(\n            title=\"Custom widget\",\n            row=1,\n            column=1,\n            width=1,\n            height=1,\n            visualization_id=\"viz.custom\",\n            configuration=\"\"\"      {\n        \"legend\": {\n          \"enabled\": false\n        },\n        \"nrqlQueries\": [\n          {\n            \"accountId\": ` + accountID + `,\n            \"query\": \"SELECT average(loadAverageOneMinute), average(loadAverageFiveMinute), average(loadAverageFifteenMinute) from SystemSample SINCE 60 minutes ago    TIMESERIES\"\n          }\n        ],\n        \"yAxisLeft\": {\n          \"max\": 100,\n          \"min\": 50,\n          \"zero\": false\n        }\n      }\n\"\"\",\n        ),\n        newrelic.OneDashboardRawPageWidgetArgs(\n            title=\"Server CPU\",\n            row=1,\n            column=2,\n            width=1,\n            height=1,\n            visualization_id=\"viz.testing\",\n            configuration=\"\"\"      {\n        \"nrqlQueries\": [\n          {\n            \"accountId\": ` + accountID + `,\n            \"query\": \"SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400\"\n          }\n        ]\n      }\n\"\"\",\n        ),\n        newrelic.OneDashboardRawPageWidgetArgs(\n            title=\"Docker Server CPU\",\n            row=1,\n            column=3,\n            height=1,\n            width=1,\n            visualization_id=\"viz.bar\",\n            configuration=json.dumps({\n                \"facet\": {\n                    \"showOtherSeries\": False,\n                },\n                \"nrqlQueries\": [{\n                    \"accountId\": local[\"accountID\"],\n                    \"query\": \"SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400\",\n                }],\n            }),\n            linked_entity_guids=[\"MzI5ODAxNnxWSVp8REFTSEJPQVJEfDI2MTcxNDc\"],\n        ),\n    ],\n)])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampledash = new NewRelic.OneDashboardRaw(\"exampledash\", new()\n    {\n        Pages = new[]\n        {\n            new NewRelic.Inputs.OneDashboardRawPageArgs\n            {\n                Name = \"Page Name\",\n                Widgets = new[]\n                {\n                    new NewRelic.Inputs.OneDashboardRawPageWidgetArgs\n                    {\n                        Title = \"Custom widget\",\n                        Row = 1,\n                        Column = 1,\n                        Width = 1,\n                        Height = 1,\n                        VisualizationId = \"viz.custom\",\n                        Configuration = @\"      {\n        \"\"legend\"\": {\n          \"\"enabled\"\": false\n        },\n        \"\"nrqlQueries\"\": [\n          {\n            \"\"accountId\"\": ` + accountID + `,\n            \"\"query\"\": \"\"SELECT average(loadAverageOneMinute), average(loadAverageFiveMinute), average(loadAverageFifteenMinute) from SystemSample SINCE 60 minutes ago    TIMESERIES\"\"\n          }\n        ],\n        \"\"yAxisLeft\"\": {\n          \"\"max\"\": 100,\n          \"\"min\"\": 50,\n          \"\"zero\"\": false\n        }\n      }\n\",\n                    },\n                    new NewRelic.Inputs.OneDashboardRawPageWidgetArgs\n                    {\n                        Title = \"Server CPU\",\n                        Row = 1,\n                        Column = 2,\n                        Width = 1,\n                        Height = 1,\n                        VisualizationId = \"viz.testing\",\n                        Configuration = @\"      {\n        \"\"nrqlQueries\"\": [\n          {\n            \"\"accountId\"\": ` + accountID + `,\n            \"\"query\"\": \"\"SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400\"\"\n          }\n        ]\n      }\n\",\n                    },\n                    new NewRelic.Inputs.OneDashboardRawPageWidgetArgs\n                    {\n                        Title = \"Docker Server CPU\",\n                        Row = 1,\n                        Column = 3,\n                        Height = 1,\n                        Width = 1,\n                        VisualizationId = \"viz.bar\",\n                        Configuration = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"facet\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"showOtherSeries\"] = false,\n                            },\n                            [\"nrqlQueries\"] = new[]\n                            {\n                                new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"accountId\"] = local.AccountID,\n                                    [\"query\"] = \"SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400\",\n                                },\n                            },\n                        }),\n                        LinkedEntityGuids = new[]\n                        {\n                            \"MzI5ODAxNnxWSVp8REFTSEJPQVJEfDI2MTcxNDc\",\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"facet\": map[string]interface{}{\n\t\t\t\t\"showOtherSeries\": false,\n\t\t\t},\n\t\t\t\"nrqlQueries\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"accountId\": local.AccountID,\n\t\t\t\t\t\"query\":     \"SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = newrelic.NewOneDashboardRaw(ctx, \"exampledash\", \u0026newrelic.OneDashboardRawArgs{\n\t\t\tPages: newrelic.OneDashboardRawPageArray{\n\t\t\t\t\u0026newrelic.OneDashboardRawPageArgs{\n\t\t\t\t\tName: pulumi.String(\"Page Name\"),\n\t\t\t\t\tWidgets: newrelic.OneDashboardRawPageWidgetArray{\n\t\t\t\t\t\t\u0026newrelic.OneDashboardRawPageWidgetArgs{\n\t\t\t\t\t\t\tTitle:           pulumi.String(\"Custom widget\"),\n\t\t\t\t\t\t\tRow:             pulumi.Int(1),\n\t\t\t\t\t\t\tColumn:          pulumi.Int(1),\n\t\t\t\t\t\t\tWidth:           pulumi.Int(1),\n\t\t\t\t\t\t\tHeight:          pulumi.Int(1),\n\t\t\t\t\t\t\tVisualizationId: pulumi.String(\"viz.custom\"),\n\t\t\t\t\t\t\tConfiguration:   pulumi.String(\"      {\\n        \\\"legend\\\": {\\n          \\\"enabled\\\": false\\n        },\\n        \\\"nrqlQueries\\\": [\\n          {\\n            \\\"accountId\\\": ` + accountID + `,\\n            \\\"query\\\": \\\"SELECT average(loadAverageOneMinute), average(loadAverageFiveMinute), average(loadAverageFifteenMinute) from SystemSample SINCE 60 minutes ago    TIMESERIES\\\"\\n          }\\n        ],\\n        \\\"yAxisLeft\\\": {\\n          \\\"max\\\": 100,\\n          \\\"min\\\": 50,\\n          \\\"zero\\\": false\\n        }\\n      }\\n\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026newrelic.OneDashboardRawPageWidgetArgs{\n\t\t\t\t\t\t\tTitle:           pulumi.String(\"Server CPU\"),\n\t\t\t\t\t\t\tRow:             pulumi.Int(1),\n\t\t\t\t\t\t\tColumn:          pulumi.Int(2),\n\t\t\t\t\t\t\tWidth:           pulumi.Int(1),\n\t\t\t\t\t\t\tHeight:          pulumi.Int(1),\n\t\t\t\t\t\t\tVisualizationId: pulumi.String(\"viz.testing\"),\n\t\t\t\t\t\t\tConfiguration:   pulumi.String(\"      {\\n        \\\"nrqlQueries\\\": [\\n          {\\n            \\\"accountId\\\": ` + accountID + `,\\n            \\\"query\\\": \\\"SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400\\\"\\n          }\\n        ]\\n      }\\n\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026newrelic.OneDashboardRawPageWidgetArgs{\n\t\t\t\t\t\t\tTitle:           pulumi.String(\"Docker Server CPU\"),\n\t\t\t\t\t\t\tRow:             pulumi.Int(1),\n\t\t\t\t\t\t\tColumn:          pulumi.Int(3),\n\t\t\t\t\t\t\tHeight:          pulumi.Int(1),\n\t\t\t\t\t\t\tWidth:           pulumi.Int(1),\n\t\t\t\t\t\t\tVisualizationId: pulumi.String(\"viz.bar\"),\n\t\t\t\t\t\t\tConfiguration:   pulumi.String(json0),\n\t\t\t\t\t\t\tLinkedEntityGuids: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"MzI5ODAxNnxWSVp8REFTSEJPQVJEfDI2MTcxNDc\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.OneDashboardRaw;\nimport com.pulumi.newrelic.OneDashboardRawArgs;\nimport com.pulumi.newrelic.inputs.OneDashboardRawPageArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampledash = new OneDashboardRaw(\"exampledash\", OneDashboardRawArgs.builder()        \n            .pages(OneDashboardRawPageArgs.builder()\n                .name(\"Page Name\")\n                .widgets(                \n                    OneDashboardRawPageWidgetArgs.builder()\n                        .title(\"Custom widget\")\n                        .row(1)\n                        .column(1)\n                        .width(1)\n                        .height(1)\n                        .visualizationId(\"viz.custom\")\n                        .configuration(\"\"\"\n      {\n        \"legend\": {\n          \"enabled\": false\n        },\n        \"nrqlQueries\": [\n          {\n            \"accountId\": ` + accountID + `,\n            \"query\": \"SELECT average(loadAverageOneMinute), average(loadAverageFiveMinute), average(loadAverageFifteenMinute) from SystemSample SINCE 60 minutes ago    TIMESERIES\"\n          }\n        ],\n        \"yAxisLeft\": {\n          \"max\": 100,\n          \"min\": 50,\n          \"zero\": false\n        }\n      }\n                        \"\"\")\n                        .build(),\n                    OneDashboardRawPageWidgetArgs.builder()\n                        .title(\"Server CPU\")\n                        .row(1)\n                        .column(2)\n                        .width(1)\n                        .height(1)\n                        .visualizationId(\"viz.testing\")\n                        .configuration(\"\"\"\n      {\n        \"nrqlQueries\": [\n          {\n            \"accountId\": ` + accountID + `,\n            \"query\": \"SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400\"\n          }\n        ]\n      }\n                        \"\"\")\n                        .build(),\n                    OneDashboardRawPageWidgetArgs.builder()\n                        .title(\"Docker Server CPU\")\n                        .row(1)\n                        .column(3)\n                        .height(1)\n                        .width(1)\n                        .visualizationId(\"viz.bar\")\n                        .configuration(serializeJson(\n                            jsonObject(\n                                jsonProperty(\"facet\", jsonObject(\n                                    jsonProperty(\"showOtherSeries\", false)\n                                )),\n                                jsonProperty(\"nrqlQueries\", jsonArray(jsonObject(\n                                    jsonProperty(\"accountId\", local.accountID()),\n                                    jsonProperty(\"query\", \"SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400\")\n                                )))\n                            )))\n                        .linkedEntityGuids(\"MzI5ODAxNnxWSVp8REFTSEJPQVJEfDI2MTcxNDc\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampledash:\n    type: newrelic:OneDashboardRaw\n    properties:\n      pages:\n        - name: Page Name\n          widgets:\n            - title: Custom widget\n              row: 1\n              column: 1\n              width: 1\n              height: 1\n              visualizationId: viz.custom\n              configuration: |2\n                      {\n                        \"legend\": {\n                          \"enabled\": false\n                        },\n                        \"nrqlQueries\": [\n                          {\n                            \"accountId\": ` + accountID + `,\n                            \"query\": \"SELECT average(loadAverageOneMinute), average(loadAverageFiveMinute), average(loadAverageFifteenMinute) from SystemSample SINCE 60 minutes ago    TIMESERIES\"\n                          }\n                        ],\n                        \"yAxisLeft\": {\n                          \"max\": 100,\n                          \"min\": 50,\n                          \"zero\": false\n                        }\n                      }\n            - title: Server CPU\n              row: 1\n              column: 2\n              width: 1\n              height: 1\n              visualizationId: viz.testing\n              configuration: |2\n                      {\n                        \"nrqlQueries\": [\n                          {\n                            \"accountId\": ` + accountID + `,\n                            \"query\": \"SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400\"\n                          }\n                        ]\n                      }\n            - title: Docker Server CPU\n              row: 1\n              column: 3\n              height: 1\n              width: 1\n              visualizationId: viz.bar\n              configuration:\n                fn::toJSON:\n                  facet:\n                    showOtherSeries: false\n                  nrqlQueries:\n                    - accountId: ${local.accountID}\n                      query: SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400\n              linkedEntityGuids:\n                - MzI5ODAxNnxWSVp8REFTSEJPQVJEfDI2MTcxNDc\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Brief text describing the dashboard.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The unique entity identifier of the dashboard page in New Relic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the dashboard.\n"
                },
                "pages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardRawPage:OneDashboardRawPage"
                    },
                    "description": "A nested block that describes a page. See Nested page blocks below for details.\n"
                },
                "permalink": {
                    "type": "string",
                    "description": "The URL for viewing the dashboard.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`. Defaults to `public_read_only`.\n"
                }
            },
            "required": [
                "accountId",
                "guid",
                "name",
                "pages",
                "permalink"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Brief text describing the dashboard.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the dashboard.\n"
                },
                "pages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardRawPage:OneDashboardRawPage"
                    },
                    "description": "A nested block that describes a page. See Nested page blocks below for details.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`. Defaults to `public_read_only`.\n"
                }
            },
            "requiredInputs": [
                "pages"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OneDashboardRaw resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Brief text describing the dashboard.\n"
                    },
                    "guid": {
                        "type": "string",
                        "description": "The unique entity identifier of the dashboard page in New Relic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the dashboard.\n"
                    },
                    "pages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/OneDashboardRawPage:OneDashboardRawPage"
                        },
                        "description": "A nested block that describes a page. See Nested page blocks below for details.\n"
                    },
                    "permalink": {
                        "type": "string",
                        "description": "The URL for viewing the dashboard.\n"
                    },
                    "permissions": {
                        "type": "string",
                        "description": "Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`. Defaults to `public_read_only`.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/serviceLevel:ServiceLevel": {
            "description": "Use this resource to create, update, and delete New Relic Service Level Indicators and Objectives.\n\nA New Relic User API key is required to provision this resource.  Set the `api_key`\nattribute in the `provider` block or the `NEW_RELIC_API_KEY` environment\nvariable with your User API key.\n\nImportant:\n- Only roles that provide [permissions](https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/new-relic-one-user-model-understand-user-structure/) to create events to metric rules can create SLI/SLOs.\n- Only [Full users](https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/new-relic-one-user-model-understand-user-structure/#user-type) can view SLI/SLOs.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.ServiceLevel(\"foo\", {\n    description: \"Proportion of requests that are served faster than a threshold.\",\n    events: {\n        accountId: 12345678,\n        goodEvents: {\n            from: \"Transaction\",\n            where: \"appName = 'Example application' AND (transactionType= 'Web') AND duration \u003c 0.1\",\n        },\n        validEvents: {\n            from: \"Transaction\",\n            where: \"appName = 'Example application' AND (transactionType='Web')\",\n        },\n    },\n    guid: \"MXxBUE18QVBQTElDQVRJT058MQ\",\n    objective: {\n        target: 99,\n        timeWindow: {\n            rolling: {\n                count: 7,\n                unit: \"DAY\",\n            },\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.ServiceLevel(\"foo\",\n    description=\"Proportion of requests that are served faster than a threshold.\",\n    events=newrelic.ServiceLevelEventsArgs(\n        account_id=12345678,\n        good_events=newrelic.ServiceLevelEventsGoodEventsArgs(\n            from_=\"Transaction\",\n            where=\"appName = 'Example application' AND (transactionType= 'Web') AND duration \u003c 0.1\",\n        ),\n        valid_events=newrelic.ServiceLevelEventsValidEventsArgs(\n            from_=\"Transaction\",\n            where=\"appName = 'Example application' AND (transactionType='Web')\",\n        ),\n    ),\n    guid=\"MXxBUE18QVBQTElDQVRJT058MQ\",\n    objective=newrelic.ServiceLevelObjectiveArgs(\n        target=99,\n        time_window=newrelic.ServiceLevelObjectiveTimeWindowArgs(\n            rolling=newrelic.ServiceLevelObjectiveTimeWindowRollingArgs(\n                count=7,\n                unit=\"DAY\",\n            ),\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.ServiceLevel(\"foo\", new()\n    {\n        Description = \"Proportion of requests that are served faster than a threshold.\",\n        Events = new NewRelic.Inputs.ServiceLevelEventsArgs\n        {\n            AccountId = 12345678,\n            GoodEvents = new NewRelic.Inputs.ServiceLevelEventsGoodEventsArgs\n            {\n                From = \"Transaction\",\n                Where = \"appName = 'Example application' AND (transactionType= 'Web') AND duration \u003c 0.1\",\n            },\n            ValidEvents = new NewRelic.Inputs.ServiceLevelEventsValidEventsArgs\n            {\n                From = \"Transaction\",\n                Where = \"appName = 'Example application' AND (transactionType='Web')\",\n            },\n        },\n        Guid = \"MXxBUE18QVBQTElDQVRJT058MQ\",\n        Objective = new NewRelic.Inputs.ServiceLevelObjectiveArgs\n        {\n            Target = 99,\n            TimeWindow = new NewRelic.Inputs.ServiceLevelObjectiveTimeWindowArgs\n            {\n                Rolling = new NewRelic.Inputs.ServiceLevelObjectiveTimeWindowRollingArgs\n                {\n                    Count = 7,\n                    Unit = \"DAY\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewServiceLevel(ctx, \"foo\", \u0026newrelic.ServiceLevelArgs{\n\t\t\tDescription: pulumi.String(\"Proportion of requests that are served faster than a threshold.\"),\n\t\t\tEvents: \u0026newrelic.ServiceLevelEventsArgs{\n\t\t\t\tAccountId: pulumi.Int(12345678),\n\t\t\t\tGoodEvents: \u0026newrelic.ServiceLevelEventsGoodEventsArgs{\n\t\t\t\t\tFrom:  pulumi.String(\"Transaction\"),\n\t\t\t\t\tWhere: pulumi.String(\"appName = 'Example application' AND (transactionType= 'Web') AND duration \u003c 0.1\"),\n\t\t\t\t},\n\t\t\t\tValidEvents: \u0026newrelic.ServiceLevelEventsValidEventsArgs{\n\t\t\t\t\tFrom:  pulumi.String(\"Transaction\"),\n\t\t\t\t\tWhere: pulumi.String(\"appName = 'Example application' AND (transactionType='Web')\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tGuid: pulumi.String(\"MXxBUE18QVBQTElDQVRJT058MQ\"),\n\t\t\tObjective: \u0026newrelic.ServiceLevelObjectiveArgs{\n\t\t\t\tTarget: pulumi.Float64(99),\n\t\t\t\tTimeWindow: \u0026newrelic.ServiceLevelObjectiveTimeWindowArgs{\n\t\t\t\t\tRolling: \u0026newrelic.ServiceLevelObjectiveTimeWindowRollingArgs{\n\t\t\t\t\t\tCount: pulumi.Int(7),\n\t\t\t\t\t\tUnit:  pulumi.String(\"DAY\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.ServiceLevel;\nimport com.pulumi.newrelic.ServiceLevelArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelEventsArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelEventsGoodEventsArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelEventsValidEventsArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelObjectiveArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelObjectiveTimeWindowArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelObjectiveTimeWindowRollingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ServiceLevel(\"foo\", ServiceLevelArgs.builder()        \n            .description(\"Proportion of requests that are served faster than a threshold.\")\n            .events(ServiceLevelEventsArgs.builder()\n                .accountId(12345678)\n                .goodEvents(ServiceLevelEventsGoodEventsArgs.builder()\n                    .from(\"Transaction\")\n                    .where(\"appName = 'Example application' AND (transactionType= 'Web') AND duration \u003c 0.1\")\n                    .build())\n                .validEvents(ServiceLevelEventsValidEventsArgs.builder()\n                    .from(\"Transaction\")\n                    .where(\"appName = 'Example application' AND (transactionType='Web')\")\n                    .build())\n                .build())\n            .guid(\"MXxBUE18QVBQTElDQVRJT058MQ\")\n            .objective(ServiceLevelObjectiveArgs.builder()\n                .target(99)\n                .timeWindow(ServiceLevelObjectiveTimeWindowArgs.builder()\n                    .rolling(ServiceLevelObjectiveTimeWindowRollingArgs.builder()\n                        .count(7)\n                        .unit(\"DAY\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:ServiceLevel\n    properties:\n      description: Proportion of requests that are served faster than a threshold.\n      events:\n        accountId: 1.2345678e+07\n        goodEvents:\n          from: Transaction\n          where: appName = 'Example application' AND (transactionType= 'Web') AND duration \u003c 0.1\n        validEvents:\n          from: Transaction\n          where: appName = 'Example application' AND (transactionType='Web')\n      guid: MXxBUE18QVBQTElDQVRJT058MQ\n      objective:\n        target: 99\n        timeWindow:\n          rolling:\n            count: 7\n            unit: DAY\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Additional Example\n\nService level with tags:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst mySyntheticMonitorServiceLevel = new newrelic.ServiceLevel(\"mySyntheticMonitorServiceLevel\", {\n    guid: \"MXxBUE18QVBQTElDQVRJT058MQ\",\n    description: \"Proportion of successful synthetic checks.\",\n    events: {\n        accountId: 12345678,\n        validEvents: {\n            from: \"SyntheticCheck\",\n            where: \"entityGuid = 'MXxBUE18QVBQTElDQVRJT058MQ'\",\n        },\n        goodEvents: {\n            from: \"SyntheticCheck\",\n            where: \"entityGuid = 'MXxBUE18QVBQTElDQVRJT058MQ' AND result='SUCCESS'\",\n        },\n    },\n    objective: {\n        target: 99,\n        timeWindow: {\n            rolling: {\n                count: 7,\n                unit: \"DAY\",\n            },\n        },\n    },\n});\nconst mySyntheticMonitorServiceLevelTags = new newrelic.EntityTags(\"mySyntheticMonitorServiceLevelTags\", {\n    guid: mySyntheticMonitorServiceLevel.sliGuid,\n    tags: [\n        {\n            key: \"user_journey\",\n            values: [\n                \"authentication\",\n                \"sso\",\n            ],\n        },\n        {\n            key: \"owner\",\n            values: [\"identityTeam\"],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nmy_synthetic_monitor_service_level = newrelic.ServiceLevel(\"mySyntheticMonitorServiceLevel\",\n    guid=\"MXxBUE18QVBQTElDQVRJT058MQ\",\n    description=\"Proportion of successful synthetic checks.\",\n    events=newrelic.ServiceLevelEventsArgs(\n        account_id=12345678,\n        valid_events=newrelic.ServiceLevelEventsValidEventsArgs(\n            from_=\"SyntheticCheck\",\n            where=\"entityGuid = 'MXxBUE18QVBQTElDQVRJT058MQ'\",\n        ),\n        good_events=newrelic.ServiceLevelEventsGoodEventsArgs(\n            from_=\"SyntheticCheck\",\n            where=\"entityGuid = 'MXxBUE18QVBQTElDQVRJT058MQ' AND result='SUCCESS'\",\n        ),\n    ),\n    objective=newrelic.ServiceLevelObjectiveArgs(\n        target=99,\n        time_window=newrelic.ServiceLevelObjectiveTimeWindowArgs(\n            rolling=newrelic.ServiceLevelObjectiveTimeWindowRollingArgs(\n                count=7,\n                unit=\"DAY\",\n            ),\n        ),\n    ))\nmy_synthetic_monitor_service_level_tags = newrelic.EntityTags(\"mySyntheticMonitorServiceLevelTags\",\n    guid=my_synthetic_monitor_service_level.sli_guid,\n    tags=[\n        newrelic.EntityTagsTagArgs(\n            key=\"user_journey\",\n            values=[\n                \"authentication\",\n                \"sso\",\n            ],\n        ),\n        newrelic.EntityTagsTagArgs(\n            key=\"owner\",\n            values=[\"identityTeam\"],\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySyntheticMonitorServiceLevel = new NewRelic.ServiceLevel(\"mySyntheticMonitorServiceLevel\", new()\n    {\n        Guid = \"MXxBUE18QVBQTElDQVRJT058MQ\",\n        Description = \"Proportion of successful synthetic checks.\",\n        Events = new NewRelic.Inputs.ServiceLevelEventsArgs\n        {\n            AccountId = 12345678,\n            ValidEvents = new NewRelic.Inputs.ServiceLevelEventsValidEventsArgs\n            {\n                From = \"SyntheticCheck\",\n                Where = \"entityGuid = 'MXxBUE18QVBQTElDQVRJT058MQ'\",\n            },\n            GoodEvents = new NewRelic.Inputs.ServiceLevelEventsGoodEventsArgs\n            {\n                From = \"SyntheticCheck\",\n                Where = \"entityGuid = 'MXxBUE18QVBQTElDQVRJT058MQ' AND result='SUCCESS'\",\n            },\n        },\n        Objective = new NewRelic.Inputs.ServiceLevelObjectiveArgs\n        {\n            Target = 99,\n            TimeWindow = new NewRelic.Inputs.ServiceLevelObjectiveTimeWindowArgs\n            {\n                Rolling = new NewRelic.Inputs.ServiceLevelObjectiveTimeWindowRollingArgs\n                {\n                    Count = 7,\n                    Unit = \"DAY\",\n                },\n            },\n        },\n    });\n\n    var mySyntheticMonitorServiceLevelTags = new NewRelic.EntityTags(\"mySyntheticMonitorServiceLevelTags\", new()\n    {\n        Guid = mySyntheticMonitorServiceLevel.SliGuid,\n        Tags = new[]\n        {\n            new NewRelic.Inputs.EntityTagsTagArgs\n            {\n                Key = \"user_journey\",\n                Values = new[]\n                {\n                    \"authentication\",\n                    \"sso\",\n                },\n            },\n            new NewRelic.Inputs.EntityTagsTagArgs\n            {\n                Key = \"owner\",\n                Values = new[]\n                {\n                    \"identityTeam\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmySyntheticMonitorServiceLevel, err := newrelic.NewServiceLevel(ctx, \"mySyntheticMonitorServiceLevel\", \u0026newrelic.ServiceLevelArgs{\n\t\t\tGuid:        pulumi.String(\"MXxBUE18QVBQTElDQVRJT058MQ\"),\n\t\t\tDescription: pulumi.String(\"Proportion of successful synthetic checks.\"),\n\t\t\tEvents: \u0026newrelic.ServiceLevelEventsArgs{\n\t\t\t\tAccountId: pulumi.Int(12345678),\n\t\t\t\tValidEvents: \u0026newrelic.ServiceLevelEventsValidEventsArgs{\n\t\t\t\t\tFrom:  pulumi.String(\"SyntheticCheck\"),\n\t\t\t\t\tWhere: pulumi.String(\"entityGuid = 'MXxBUE18QVBQTElDQVRJT058MQ'\"),\n\t\t\t\t},\n\t\t\t\tGoodEvents: \u0026newrelic.ServiceLevelEventsGoodEventsArgs{\n\t\t\t\t\tFrom:  pulumi.String(\"SyntheticCheck\"),\n\t\t\t\t\tWhere: pulumi.String(\"entityGuid = 'MXxBUE18QVBQTElDQVRJT058MQ' AND result='SUCCESS'\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tObjective: \u0026newrelic.ServiceLevelObjectiveArgs{\n\t\t\t\tTarget: pulumi.Float64(99),\n\t\t\t\tTimeWindow: \u0026newrelic.ServiceLevelObjectiveTimeWindowArgs{\n\t\t\t\t\tRolling: \u0026newrelic.ServiceLevelObjectiveTimeWindowRollingArgs{\n\t\t\t\t\t\tCount: pulumi.Int(7),\n\t\t\t\t\t\tUnit:  pulumi.String(\"DAY\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewEntityTags(ctx, \"mySyntheticMonitorServiceLevelTags\", \u0026newrelic.EntityTagsArgs{\n\t\t\tGuid: mySyntheticMonitorServiceLevel.SliGuid,\n\t\t\tTags: newrelic.EntityTagsTagArray{\n\t\t\t\t\u0026newrelic.EntityTagsTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"user_journey\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"authentication\"),\n\t\t\t\t\t\tpulumi.String(\"sso\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.EntityTagsTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"owner\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"identityTeam\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.ServiceLevel;\nimport com.pulumi.newrelic.ServiceLevelArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelEventsArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelEventsValidEventsArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelEventsGoodEventsArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelObjectiveArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelObjectiveTimeWindowArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelObjectiveTimeWindowRollingArgs;\nimport com.pulumi.newrelic.EntityTags;\nimport com.pulumi.newrelic.EntityTagsArgs;\nimport com.pulumi.newrelic.inputs.EntityTagsTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySyntheticMonitorServiceLevel = new ServiceLevel(\"mySyntheticMonitorServiceLevel\", ServiceLevelArgs.builder()        \n            .guid(\"MXxBUE18QVBQTElDQVRJT058MQ\")\n            .description(\"Proportion of successful synthetic checks.\")\n            .events(ServiceLevelEventsArgs.builder()\n                .accountId(12345678)\n                .validEvents(ServiceLevelEventsValidEventsArgs.builder()\n                    .from(\"SyntheticCheck\")\n                    .where(\"entityGuid = 'MXxBUE18QVBQTElDQVRJT058MQ'\")\n                    .build())\n                .goodEvents(ServiceLevelEventsGoodEventsArgs.builder()\n                    .from(\"SyntheticCheck\")\n                    .where(\"entityGuid = 'MXxBUE18QVBQTElDQVRJT058MQ' AND result='SUCCESS'\")\n                    .build())\n                .build())\n            .objective(ServiceLevelObjectiveArgs.builder()\n                .target(99)\n                .timeWindow(ServiceLevelObjectiveTimeWindowArgs.builder()\n                    .rolling(ServiceLevelObjectiveTimeWindowRollingArgs.builder()\n                        .count(7)\n                        .unit(\"DAY\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        var mySyntheticMonitorServiceLevelTags = new EntityTags(\"mySyntheticMonitorServiceLevelTags\", EntityTagsArgs.builder()        \n            .guid(mySyntheticMonitorServiceLevel.sliGuid())\n            .tags(            \n                EntityTagsTagArgs.builder()\n                    .key(\"user_journey\")\n                    .values(                    \n                        \"authentication\",\n                        \"sso\")\n                    .build(),\n                EntityTagsTagArgs.builder()\n                    .key(\"owner\")\n                    .values(\"identityTeam\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySyntheticMonitorServiceLevel:\n    type: newrelic:ServiceLevel\n    properties:\n      guid: MXxBUE18QVBQTElDQVRJT058MQ\n      description: Proportion of successful synthetic checks.\n      events:\n        accountId: 1.2345678e+07\n        validEvents:\n          from: SyntheticCheck\n          where: entityGuid = 'MXxBUE18QVBQTElDQVRJT058MQ'\n        goodEvents:\n          from: SyntheticCheck\n          where: entityGuid = 'MXxBUE18QVBQTElDQVRJT058MQ' AND result='SUCCESS'\n      objective:\n        target: 99\n        timeWindow:\n          rolling:\n            count: 7\n            unit: DAY\n  mySyntheticMonitorServiceLevelTags:\n    type: newrelic:EntityTags\n    properties:\n      guid: ${mySyntheticMonitorServiceLevel.sliGuid}\n      tags:\n        - key: user_journey\n          values:\n            - authentication\n            - sso\n        - key: owner\n          values:\n            - identityTeam\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\nUsing `select` for events\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst mySyntheticMonitorDurationServiceLevel = new newrelic.ServiceLevel(\"mySyntheticMonitorDurationServiceLevel\", {\n    description: \"Monitor created to test concurrent request from terraform\",\n    events: {\n        accountId: 313870,\n        goodEvents: {\n            from: \"Metric\",\n            select: {\n                attribute: \"`query.wallClockTime.negative.distribution`\",\n                \"function\": \"GET_CDF_COUNT\",\n                threshold: 7,\n            },\n            where: \"metricName = 'query.wallClockTime.negative.distribution'\",\n        },\n        validEvents: {\n            from: \"Metric\",\n            select: {\n                attribute: \"`query.wallClockTime.negative.distribution`\",\n                \"function\": \"GET_FIELD\",\n            },\n            where: \"metricName = 'query.wallClockTime.negative.distribution'\",\n        },\n    },\n    guid: \"MXxBUE18QVBQTElDQVRJT058MQ\",\n    objective: {\n        target: 49,\n        timeWindow: {\n            rolling: {\n                count: 7,\n                unit: \"DAY\",\n            },\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nmy_synthetic_monitor_duration_service_level = newrelic.ServiceLevel(\"mySyntheticMonitorDurationServiceLevel\",\n    description=\"Monitor created to test concurrent request from terraform\",\n    events=newrelic.ServiceLevelEventsArgs(\n        account_id=313870,\n        good_events=newrelic.ServiceLevelEventsGoodEventsArgs(\n            from_=\"Metric\",\n            select=newrelic.ServiceLevelEventsGoodEventsSelectArgs(\n                attribute=\"`query.wallClockTime.negative.distribution`\",\n                function=\"GET_CDF_COUNT\",\n                threshold=7,\n            ),\n            where=\"metricName = 'query.wallClockTime.negative.distribution'\",\n        ),\n        valid_events=newrelic.ServiceLevelEventsValidEventsArgs(\n            from_=\"Metric\",\n            select=newrelic.ServiceLevelEventsValidEventsSelectArgs(\n                attribute=\"`query.wallClockTime.negative.distribution`\",\n                function=\"GET_FIELD\",\n            ),\n            where=\"metricName = 'query.wallClockTime.negative.distribution'\",\n        ),\n    ),\n    guid=\"MXxBUE18QVBQTElDQVRJT058MQ\",\n    objective=newrelic.ServiceLevelObjectiveArgs(\n        target=49,\n        time_window=newrelic.ServiceLevelObjectiveTimeWindowArgs(\n            rolling=newrelic.ServiceLevelObjectiveTimeWindowRollingArgs(\n                count=7,\n                unit=\"DAY\",\n            ),\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySyntheticMonitorDurationServiceLevel = new NewRelic.ServiceLevel(\"mySyntheticMonitorDurationServiceLevel\", new()\n    {\n        Description = \"Monitor created to test concurrent request from terraform\",\n        Events = new NewRelic.Inputs.ServiceLevelEventsArgs\n        {\n            AccountId = 313870,\n            GoodEvents = new NewRelic.Inputs.ServiceLevelEventsGoodEventsArgs\n            {\n                From = \"Metric\",\n                Select = new NewRelic.Inputs.ServiceLevelEventsGoodEventsSelectArgs\n                {\n                    Attribute = \"`query.wallClockTime.negative.distribution`\",\n                    Function = \"GET_CDF_COUNT\",\n                    Threshold = 7,\n                },\n                Where = \"metricName = 'query.wallClockTime.negative.distribution'\",\n            },\n            ValidEvents = new NewRelic.Inputs.ServiceLevelEventsValidEventsArgs\n            {\n                From = \"Metric\",\n                Select = new NewRelic.Inputs.ServiceLevelEventsValidEventsSelectArgs\n                {\n                    Attribute = \"`query.wallClockTime.negative.distribution`\",\n                    Function = \"GET_FIELD\",\n                },\n                Where = \"metricName = 'query.wallClockTime.negative.distribution'\",\n            },\n        },\n        Guid = \"MXxBUE18QVBQTElDQVRJT058MQ\",\n        Objective = new NewRelic.Inputs.ServiceLevelObjectiveArgs\n        {\n            Target = 49,\n            TimeWindow = new NewRelic.Inputs.ServiceLevelObjectiveTimeWindowArgs\n            {\n                Rolling = new NewRelic.Inputs.ServiceLevelObjectiveTimeWindowRollingArgs\n                {\n                    Count = 7,\n                    Unit = \"DAY\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewServiceLevel(ctx, \"mySyntheticMonitorDurationServiceLevel\", \u0026newrelic.ServiceLevelArgs{\n\t\t\tDescription: pulumi.String(\"Monitor created to test concurrent request from terraform\"),\n\t\t\tEvents: \u0026newrelic.ServiceLevelEventsArgs{\n\t\t\t\tAccountId: pulumi.Int(313870),\n\t\t\t\tGoodEvents: \u0026newrelic.ServiceLevelEventsGoodEventsArgs{\n\t\t\t\t\tFrom: pulumi.String(\"Metric\"),\n\t\t\t\t\tSelect: \u0026newrelic.ServiceLevelEventsGoodEventsSelectArgs{\n\t\t\t\t\t\tAttribute: pulumi.String(\"`query.wallClockTime.negative.distribution`\"),\n\t\t\t\t\t\tFunction:  pulumi.String(\"GET_CDF_COUNT\"),\n\t\t\t\t\t\tThreshold: pulumi.Float64(7),\n\t\t\t\t\t},\n\t\t\t\t\tWhere: pulumi.String(\"metricName = 'query.wallClockTime.negative.distribution'\"),\n\t\t\t\t},\n\t\t\t\tValidEvents: \u0026newrelic.ServiceLevelEventsValidEventsArgs{\n\t\t\t\t\tFrom: pulumi.String(\"Metric\"),\n\t\t\t\t\tSelect: \u0026newrelic.ServiceLevelEventsValidEventsSelectArgs{\n\t\t\t\t\t\tAttribute: pulumi.String(\"`query.wallClockTime.negative.distribution`\"),\n\t\t\t\t\t\tFunction:  pulumi.String(\"GET_FIELD\"),\n\t\t\t\t\t},\n\t\t\t\t\tWhere: pulumi.String(\"metricName = 'query.wallClockTime.negative.distribution'\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tGuid: pulumi.String(\"MXxBUE18QVBQTElDQVRJT058MQ\"),\n\t\t\tObjective: \u0026newrelic.ServiceLevelObjectiveArgs{\n\t\t\t\tTarget: pulumi.Float64(49),\n\t\t\t\tTimeWindow: \u0026newrelic.ServiceLevelObjectiveTimeWindowArgs{\n\t\t\t\t\tRolling: \u0026newrelic.ServiceLevelObjectiveTimeWindowRollingArgs{\n\t\t\t\t\t\tCount: pulumi.Int(7),\n\t\t\t\t\t\tUnit:  pulumi.String(\"DAY\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.ServiceLevel;\nimport com.pulumi.newrelic.ServiceLevelArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelEventsArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelEventsGoodEventsArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelEventsGoodEventsSelectArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelEventsValidEventsArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelEventsValidEventsSelectArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelObjectiveArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelObjectiveTimeWindowArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelObjectiveTimeWindowRollingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySyntheticMonitorDurationServiceLevel = new ServiceLevel(\"mySyntheticMonitorDurationServiceLevel\", ServiceLevelArgs.builder()        \n            .description(\"Monitor created to test concurrent request from terraform\")\n            .events(ServiceLevelEventsArgs.builder()\n                .accountId(313870)\n                .goodEvents(ServiceLevelEventsGoodEventsArgs.builder()\n                    .from(\"Metric\")\n                    .select(ServiceLevelEventsGoodEventsSelectArgs.builder()\n                        .attribute(\"`query.wallClockTime.negative.distribution`\")\n                        .function(\"GET_CDF_COUNT\")\n                        .threshold(7)\n                        .build())\n                    .where(\"metricName = 'query.wallClockTime.negative.distribution'\")\n                    .build())\n                .validEvents(ServiceLevelEventsValidEventsArgs.builder()\n                    .from(\"Metric\")\n                    .select(ServiceLevelEventsValidEventsSelectArgs.builder()\n                        .attribute(\"`query.wallClockTime.negative.distribution`\")\n                        .function(\"GET_FIELD\")\n                        .build())\n                    .where(\"metricName = 'query.wallClockTime.negative.distribution'\")\n                    .build())\n                .build())\n            .guid(\"MXxBUE18QVBQTElDQVRJT058MQ\")\n            .objective(ServiceLevelObjectiveArgs.builder()\n                .target(49)\n                .timeWindow(ServiceLevelObjectiveTimeWindowArgs.builder()\n                    .rolling(ServiceLevelObjectiveTimeWindowRollingArgs.builder()\n                        .count(7)\n                        .unit(\"DAY\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySyntheticMonitorDurationServiceLevel:\n    type: newrelic:ServiceLevel\n    properties:\n      description: Monitor created to test concurrent request from terraform\n      events:\n        accountId: 313870\n        goodEvents:\n          from: Metric\n          select:\n            attribute: '`query.wallClockTime.negative.distribution`'\n            function: GET_CDF_COUNT\n            threshold: 7\n          where: metricName = 'query.wallClockTime.negative.distribution'\n        validEvents:\n          from: Metric\n          select:\n            attribute: '`query.wallClockTime.negative.distribution`'\n            function: GET_FIELD\n          where: metricName = 'query.wallClockTime.negative.distribution'\n      guid: MXxBUE18QVBQTElDQVRJT058MQ\n      objective:\n        target: 49\n        timeWindow:\n          rolling:\n            count: 7\n            unit: DAY\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\nFor up-to-date documentation about the tagging resource, please check newrelic.EntityTags\n\n## Import\n\nNew Relic Service Levels can be imported using a concatenated string of the format\n\n `\u003caccount_id\u003e:\u003csli_id\u003e:\u003cguid\u003e`, where the `guid` is the entity the SLI relates to.\n\nExample:\n\nbash\n\n```sh\n$ pulumi import newrelic:index/serviceLevel:ServiceLevel foo 12345678:4321:MXxBUE18QVBQTElDQVRJT058MQ\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the SLI.\n"
                },
                "events": {
                    "$ref": "#/types/newrelic:index/ServiceLevelEvents:ServiceLevelEvents",
                    "description": "The events that define the NRDB data for the SLI/SLO calculations.\nSee Events below for details.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The GUID of the entity (e.g, APM Service, Browser application, Workload, etc.) that you want to relate this SLI to. Note that changing the GUID will force a new resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A short name for the SLI that will help anyone understand what it is about.\n"
                },
                "objective": {
                    "$ref": "#/types/newrelic:index/ServiceLevelObjective:ServiceLevelObjective",
                    "description": "The objective of the SLI, only one can be defined.\nSee Objective below for details.\n"
                },
                "sliGuid": {
                    "type": "string",
                    "description": "The unique entity identifier of the Service Level Indicator in New Relic.\n"
                },
                "sliId": {
                    "type": "string",
                    "description": "The unique entity identifier of the Service Level Indicator.\n"
                }
            },
            "required": [
                "events",
                "guid",
                "name",
                "objective",
                "sliGuid",
                "sliId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the SLI.\n"
                },
                "events": {
                    "$ref": "#/types/newrelic:index/ServiceLevelEvents:ServiceLevelEvents",
                    "description": "The events that define the NRDB data for the SLI/SLO calculations.\nSee Events below for details.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The GUID of the entity (e.g, APM Service, Browser application, Workload, etc.) that you want to relate this SLI to. Note that changing the GUID will force a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "A short name for the SLI that will help anyone understand what it is about.\n"
                },
                "objective": {
                    "$ref": "#/types/newrelic:index/ServiceLevelObjective:ServiceLevelObjective",
                    "description": "The objective of the SLI, only one can be defined.\nSee Objective below for details.\n"
                }
            },
            "requiredInputs": [
                "events",
                "guid",
                "objective"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceLevel resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the SLI.\n"
                    },
                    "events": {
                        "$ref": "#/types/newrelic:index/ServiceLevelEvents:ServiceLevelEvents",
                        "description": "The events that define the NRDB data for the SLI/SLO calculations.\nSee Events below for details.\n"
                    },
                    "guid": {
                        "type": "string",
                        "description": "The GUID of the entity (e.g, APM Service, Browser application, Workload, etc.) that you want to relate this SLI to. Note that changing the GUID will force a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "A short name for the SLI that will help anyone understand what it is about.\n"
                    },
                    "objective": {
                        "$ref": "#/types/newrelic:index/ServiceLevelObjective:ServiceLevelObjective",
                        "description": "The objective of the SLI, only one can be defined.\nSee Objective below for details.\n"
                    },
                    "sliGuid": {
                        "type": "string",
                        "description": "The unique entity identifier of the Service Level Indicator in New Relic.\n"
                    },
                    "sliId": {
                        "type": "string",
                        "description": "The unique entity identifier of the Service Level Indicator.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/user:User": {
            "description": "The `newrelic.User` resource may be used to create, update and delete users in New Relic.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooAuthenticationDomain = newrelic.getAuthenticationDomain({\n    name: \"Test Authentication Domain\",\n});\nconst fooUser = new newrelic.User(\"fooUser\", {\n    emailId: \"test_user@test.com\",\n    authenticationDomainId: fooAuthenticationDomain.then(fooAuthenticationDomain =\u003e fooAuthenticationDomain.id),\n    userType: \"CORE_USER_TIER\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_authentication_domain = newrelic.get_authentication_domain(name=\"Test Authentication Domain\")\nfoo_user = newrelic.User(\"fooUser\",\n    email_id=\"test_user@test.com\",\n    authentication_domain_id=foo_authentication_domain.id,\n    user_type=\"CORE_USER_TIER\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooAuthenticationDomain = NewRelic.GetAuthenticationDomain.Invoke(new()\n    {\n        Name = \"Test Authentication Domain\",\n    });\n\n    var fooUser = new NewRelic.User(\"fooUser\", new()\n    {\n        EmailId = \"test_user@test.com\",\n        AuthenticationDomainId = fooAuthenticationDomain.Apply(getAuthenticationDomainResult =\u003e getAuthenticationDomainResult.Id),\n        UserType = \"CORE_USER_TIER\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooAuthenticationDomain, err := newrelic.GetAuthenticationDomain(ctx, \u0026newrelic.GetAuthenticationDomainArgs{\n\t\t\tName: \"Test Authentication Domain\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewUser(ctx, \"fooUser\", \u0026newrelic.UserArgs{\n\t\t\tEmailId:                pulumi.String(\"test_user@test.com\"),\n\t\t\tAuthenticationDomainId: *pulumi.String(fooAuthenticationDomain.Id),\n\t\t\tUserType:               pulumi.String(\"CORE_USER_TIER\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetAuthenticationDomainArgs;\nimport com.pulumi.newrelic.User;\nimport com.pulumi.newrelic.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooAuthenticationDomain = NewrelicFunctions.getAuthenticationDomain(GetAuthenticationDomainArgs.builder()\n            .name(\"Test Authentication Domain\")\n            .build());\n\n        var fooUser = new User(\"fooUser\", UserArgs.builder()        \n            .emailId(\"test_user@test.com\")\n            .authenticationDomainId(fooAuthenticationDomain.applyValue(getAuthenticationDomainResult -\u003e getAuthenticationDomainResult.id()))\n            .userType(\"CORE_USER_TIER\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooUser:\n    type: newrelic:User\n    properties:\n      emailId: test_user@test.com\n      authenticationDomainId: ${fooAuthenticationDomain.id}\n      userType: CORE_USER_TIER\nvariables:\n  fooAuthenticationDomain:\n    fn::invoke:\n      Function: newrelic:getAuthenticationDomain\n      Arguments:\n        name: Test Authentication Domain\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nA user can be imported using its ID. Example:\n\n```sh\n$ pulumi import newrelic:index/user:User foo 1999999999\n```\n\n",
            "properties": {
                "authenticationDomainId": {
                    "type": "string",
                    "description": "The ID of the authentication domain to which the user to be created would belong.\n"
                },
                "emailId": {
                    "type": "string",
                    "description": "The email ID of the user to be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user to be created.\n"
                },
                "userType": {
                    "type": "string",
                    "description": "The tier to which the user to be created would belong. Accepted values for this argument are `BASIC_USER_TIER`, `CORE_USER_TIER`, or `FULL_USER_TIER`. If not specified in the configuration, the argument would default to `BASIC_USER_TIER`.\n\n\u003e **NOTE** The ID of an authentication domain can be retrieved using its name, via the data source `newrelic.getAuthenticationDomain`, as shown in the example above. Head over to the documentation of this data source for more details and examples.\n\n\u003e **WARNING:** Changing the `authentication_domain_id` of a `newrelic.User` resource that has already been applied would result in a **replacement** of the resource – destruction of the existing resource, followed by the addition of a new resource with the specified configuration. This is due to the fact that updating the `authentication_domain_id` of an existing user is not supported.\n"
                }
            },
            "required": [
                "authenticationDomainId",
                "emailId",
                "name"
            ],
            "inputProperties": {
                "authenticationDomainId": {
                    "type": "string",
                    "description": "The ID of the authentication domain to which the user to be created would belong.\n",
                    "willReplaceOnChanges": true
                },
                "emailId": {
                    "type": "string",
                    "description": "The email ID of the user to be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user to be created.\n"
                },
                "userType": {
                    "type": "string",
                    "description": "The tier to which the user to be created would belong. Accepted values for this argument are `BASIC_USER_TIER`, `CORE_USER_TIER`, or `FULL_USER_TIER`. If not specified in the configuration, the argument would default to `BASIC_USER_TIER`.\n\n\u003e **NOTE** The ID of an authentication domain can be retrieved using its name, via the data source `newrelic.getAuthenticationDomain`, as shown in the example above. Head over to the documentation of this data source for more details and examples.\n\n\u003e **WARNING:** Changing the `authentication_domain_id` of a `newrelic.User` resource that has already been applied would result in a **replacement** of the resource – destruction of the existing resource, followed by the addition of a new resource with the specified configuration. This is due to the fact that updating the `authentication_domain_id` of an existing user is not supported.\n"
                }
            },
            "requiredInputs": [
                "authenticationDomainId",
                "emailId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "authenticationDomainId": {
                        "type": "string",
                        "description": "The ID of the authentication domain to which the user to be created would belong.\n",
                        "willReplaceOnChanges": true
                    },
                    "emailId": {
                        "type": "string",
                        "description": "The email ID of the user to be created.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user to be created.\n"
                    },
                    "userType": {
                        "type": "string",
                        "description": "The tier to which the user to be created would belong. Accepted values for this argument are `BASIC_USER_TIER`, `CORE_USER_TIER`, or `FULL_USER_TIER`. If not specified in the configuration, the argument would default to `BASIC_USER_TIER`.\n\n\u003e **NOTE** The ID of an authentication domain can be retrieved using its name, via the data source `newrelic.getAuthenticationDomain`, as shown in the example above. Head over to the documentation of this data source for more details and examples.\n\n\u003e **WARNING:** Changing the `authentication_domain_id` of a `newrelic.User` resource that has already been applied would result in a **replacement** of the resource – destruction of the existing resource, followed by the addition of a new resource with the specified configuration. This is due to the fact that updating the `authentication_domain_id` of an existing user is not supported.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/workflow:Workflow": {
            "description": "Use this resource to create and manage New Relic workflows.\n\n## Example Usage\n\n##### Workflow\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.Workflow(\"foo\", {\n    mutingRulesHandling: \"NOTIFY_ALL_ISSUES\",\n    issuesFilter: {\n        name: \"filter-name\",\n        type: \"FILTER\",\n        predicates: [{\n            attribute: \"accumulations.tag.team\",\n            operator: \"EXACTLY_MATCHES\",\n            values: [\"growth\"],\n        }],\n    },\n    destinations: [{\n        channelId: newrelic_notification_channel.some_channel.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.Workflow(\"foo\",\n    muting_rules_handling=\"NOTIFY_ALL_ISSUES\",\n    issues_filter=newrelic.WorkflowIssuesFilterArgs(\n        name=\"filter-name\",\n        type=\"FILTER\",\n        predicates=[newrelic.WorkflowIssuesFilterPredicateArgs(\n            attribute=\"accumulations.tag.team\",\n            operator=\"EXACTLY_MATCHES\",\n            values=[\"growth\"],\n        )],\n    ),\n    destinations=[newrelic.WorkflowDestinationArgs(\n        channel_id=newrelic_notification_channel[\"some_channel\"][\"id\"],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.Workflow(\"foo\", new()\n    {\n        MutingRulesHandling = \"NOTIFY_ALL_ISSUES\",\n        IssuesFilter = new NewRelic.Inputs.WorkflowIssuesFilterArgs\n        {\n            Name = \"filter-name\",\n            Type = \"FILTER\",\n            Predicates = new[]\n            {\n                new NewRelic.Inputs.WorkflowIssuesFilterPredicateArgs\n                {\n                    Attribute = \"accumulations.tag.team\",\n                    Operator = \"EXACTLY_MATCHES\",\n                    Values = new[]\n                    {\n                        \"growth\",\n                    },\n                },\n            },\n        },\n        Destinations = new[]\n        {\n            new NewRelic.Inputs.WorkflowDestinationArgs\n            {\n                ChannelId = newrelic_notification_channel.Some_channel.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewWorkflow(ctx, \"foo\", \u0026newrelic.WorkflowArgs{\n\t\t\tMutingRulesHandling: pulumi.String(\"NOTIFY_ALL_ISSUES\"),\n\t\t\tIssuesFilter: \u0026newrelic.WorkflowIssuesFilterArgs{\n\t\t\t\tName: pulumi.String(\"filter-name\"),\n\t\t\t\tType: pulumi.String(\"FILTER\"),\n\t\t\t\tPredicates: newrelic.WorkflowIssuesFilterPredicateArray{\n\t\t\t\t\t\u0026newrelic.WorkflowIssuesFilterPredicateArgs{\n\t\t\t\t\t\tAttribute: pulumi.String(\"accumulations.tag.team\"),\n\t\t\t\t\t\tOperator:  pulumi.String(\"EXACTLY_MATCHES\"),\n\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"growth\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDestinations: newrelic.WorkflowDestinationArray{\n\t\t\t\t\u0026newrelic.WorkflowDestinationArgs{\n\t\t\t\t\tChannelId: pulumi.Any(newrelic_notification_channel.Some_channel.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.Workflow;\nimport com.pulumi.newrelic.WorkflowArgs;\nimport com.pulumi.newrelic.inputs.WorkflowIssuesFilterArgs;\nimport com.pulumi.newrelic.inputs.WorkflowDestinationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Workflow(\"foo\", WorkflowArgs.builder()        \n            .mutingRulesHandling(\"NOTIFY_ALL_ISSUES\")\n            .issuesFilter(WorkflowIssuesFilterArgs.builder()\n                .name(\"filter-name\")\n                .type(\"FILTER\")\n                .predicates(WorkflowIssuesFilterPredicateArgs.builder()\n                    .attribute(\"accumulations.tag.team\")\n                    .operator(\"EXACTLY_MATCHES\")\n                    .values(\"growth\")\n                    .build())\n                .build())\n            .destinations(WorkflowDestinationArgs.builder()\n                .channelId(newrelic_notification_channel.some_channel().id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:Workflow\n    properties:\n      mutingRulesHandling: NOTIFY_ALL_ISSUES\n      issuesFilter:\n        name: filter-name\n        type: FILTER\n        predicates:\n          - attribute: accumulations.tag.team\n            operator: EXACTLY_MATCHES\n            values:\n              - growth\n      destinations:\n        - channelId: ${newrelic_notification_channel.some_channel.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Policy-Based Workflow Example\n\nThis scenario describes one of most common ways of using workflows by defining a set of policies the workflow handles\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\n// Create a policy to track\nconst my_policy = new newrelic.AlertPolicy(\"my-policy\", {});\n// Create a reusable notification destination\nconst webhook_destination = new newrelic.NotificationDestination(\"webhook-destination\", {\n    type: \"WEBHOOK\",\n    properties: [{\n        key: \"url\",\n        value: \"https://example.com\",\n    }],\n    authBasic: {\n        user: \"username\",\n        password: \"password\",\n    },\n});\n// Create a notification channel to use in the workflow\nconst webhook_channel = new newrelic.NotificationChannel(\"webhook-channel\", {\n    type: \"WEBHOOK\",\n    destinationId: webhook_destination.id,\n    product: \"IINT\",\n    properties: [{\n        key: \"payload\",\n        value: \"{}\",\n        label: \"Payload Template\",\n    }],\n});\n// A workflow that matches issues that include incidents triggered by the policy\nconst workflow_example = new newrelic.Workflow(\"workflow-example\", {\n    mutingRulesHandling: \"NOTIFY_ALL_ISSUES\",\n    issuesFilter: {\n        name: \"Filter-name\",\n        type: \"FILTER\",\n        predicates: [{\n            attribute: \"labels.policyIds\",\n            operator: \"EXACTLY_MATCHES\",\n            values: [my_policy.id],\n        }],\n    },\n    destinations: [{\n        channelId: webhook_channel.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\n# Create a policy to track\nmy_policy = newrelic.AlertPolicy(\"my-policy\")\n# Create a reusable notification destination\nwebhook_destination = newrelic.NotificationDestination(\"webhook-destination\",\n    type=\"WEBHOOK\",\n    properties=[newrelic.NotificationDestinationPropertyArgs(\n        key=\"url\",\n        value=\"https://example.com\",\n    )],\n    auth_basic=newrelic.NotificationDestinationAuthBasicArgs(\n        user=\"username\",\n        password=\"password\",\n    ))\n# Create a notification channel to use in the workflow\nwebhook_channel = newrelic.NotificationChannel(\"webhook-channel\",\n    type=\"WEBHOOK\",\n    destination_id=webhook_destination.id,\n    product=\"IINT\",\n    properties=[newrelic.NotificationChannelPropertyArgs(\n        key=\"payload\",\n        value=\"{}\",\n        label=\"Payload Template\",\n    )])\n# A workflow that matches issues that include incidents triggered by the policy\nworkflow_example = newrelic.Workflow(\"workflow-example\",\n    muting_rules_handling=\"NOTIFY_ALL_ISSUES\",\n    issues_filter=newrelic.WorkflowIssuesFilterArgs(\n        name=\"Filter-name\",\n        type=\"FILTER\",\n        predicates=[newrelic.WorkflowIssuesFilterPredicateArgs(\n            attribute=\"labels.policyIds\",\n            operator=\"EXACTLY_MATCHES\",\n            values=[my_policy.id],\n        )],\n    ),\n    destinations=[newrelic.WorkflowDestinationArgs(\n        channel_id=webhook_channel.id,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a policy to track\n    var my_policy = new NewRelic.AlertPolicy(\"my-policy\");\n\n    // Create a reusable notification destination\n    var webhook_destination = new NewRelic.NotificationDestination(\"webhook-destination\", new()\n    {\n        Type = \"WEBHOOK\",\n        Properties = new[]\n        {\n            new NewRelic.Inputs.NotificationDestinationPropertyArgs\n            {\n                Key = \"url\",\n                Value = \"https://example.com\",\n            },\n        },\n        AuthBasic = new NewRelic.Inputs.NotificationDestinationAuthBasicArgs\n        {\n            User = \"username\",\n            Password = \"password\",\n        },\n    });\n\n    // Create a notification channel to use in the workflow\n    var webhook_channel = new NewRelic.NotificationChannel(\"webhook-channel\", new()\n    {\n        Type = \"WEBHOOK\",\n        DestinationId = webhook_destination.Id,\n        Product = \"IINT\",\n        Properties = new[]\n        {\n            new NewRelic.Inputs.NotificationChannelPropertyArgs\n            {\n                Key = \"payload\",\n                Value = \"{}\",\n                Label = \"Payload Template\",\n            },\n        },\n    });\n\n    // A workflow that matches issues that include incidents triggered by the policy\n    var workflow_example = new NewRelic.Workflow(\"workflow-example\", new()\n    {\n        MutingRulesHandling = \"NOTIFY_ALL_ISSUES\",\n        IssuesFilter = new NewRelic.Inputs.WorkflowIssuesFilterArgs\n        {\n            Name = \"Filter-name\",\n            Type = \"FILTER\",\n            Predicates = new[]\n            {\n                new NewRelic.Inputs.WorkflowIssuesFilterPredicateArgs\n                {\n                    Attribute = \"labels.policyIds\",\n                    Operator = \"EXACTLY_MATCHES\",\n                    Values = new[]\n                    {\n                        my_policy.Id,\n                    },\n                },\n            },\n        },\n        Destinations = new[]\n        {\n            new NewRelic.Inputs.WorkflowDestinationArgs\n            {\n                ChannelId = webhook_channel.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a policy to track\n\t\t_, err := newrelic.NewAlertPolicy(ctx, \"my-policy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a reusable notification destination\n\t\t_, err = newrelic.NewNotificationDestination(ctx, \"webhook-destination\", \u0026newrelic.NotificationDestinationArgs{\n\t\t\tType: pulumi.String(\"WEBHOOK\"),\n\t\t\tProperties: newrelic.NotificationDestinationPropertyArray{\n\t\t\t\t\u0026newrelic.NotificationDestinationPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"url\"),\n\t\t\t\t\tValue: pulumi.String(\"https://example.com\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAuthBasic: \u0026newrelic.NotificationDestinationAuthBasicArgs{\n\t\t\t\tUser:     pulumi.String(\"username\"),\n\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a notification channel to use in the workflow\n\t\t_, err = newrelic.NewNotificationChannel(ctx, \"webhook-channel\", \u0026newrelic.NotificationChannelArgs{\n\t\t\tType:          pulumi.String(\"WEBHOOK\"),\n\t\t\tDestinationId: webhook_destination.ID(),\n\t\t\tProduct:       pulumi.String(\"IINT\"),\n\t\t\tProperties: newrelic.NotificationChannelPropertyArray{\n\t\t\t\t\u0026newrelic.NotificationChannelPropertyArgs{\n\t\t\t\t\tKey:   pulumi.String(\"payload\"),\n\t\t\t\t\tValue: pulumi.String(\"{}\"),\n\t\t\t\t\tLabel: pulumi.String(\"Payload Template\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// A workflow that matches issues that include incidents triggered by the policy\n\t\t_, err = newrelic.NewWorkflow(ctx, \"workflow-example\", \u0026newrelic.WorkflowArgs{\n\t\t\tMutingRulesHandling: pulumi.String(\"NOTIFY_ALL_ISSUES\"),\n\t\t\tIssuesFilter: \u0026newrelic.WorkflowIssuesFilterArgs{\n\t\t\t\tName: pulumi.String(\"Filter-name\"),\n\t\t\t\tType: pulumi.String(\"FILTER\"),\n\t\t\t\tPredicates: newrelic.WorkflowIssuesFilterPredicateArray{\n\t\t\t\t\t\u0026newrelic.WorkflowIssuesFilterPredicateArgs{\n\t\t\t\t\t\tAttribute: pulumi.String(\"labels.policyIds\"),\n\t\t\t\t\t\tOperator:  pulumi.String(\"EXACTLY_MATCHES\"),\n\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\tmy_policy.ID(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDestinations: newrelic.WorkflowDestinationArray{\n\t\t\t\t\u0026newrelic.WorkflowDestinationArgs{\n\t\t\t\t\tChannelId: webhook_channel.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.NotificationDestination;\nimport com.pulumi.newrelic.NotificationDestinationArgs;\nimport com.pulumi.newrelic.inputs.NotificationDestinationPropertyArgs;\nimport com.pulumi.newrelic.inputs.NotificationDestinationAuthBasicArgs;\nimport com.pulumi.newrelic.NotificationChannel;\nimport com.pulumi.newrelic.NotificationChannelArgs;\nimport com.pulumi.newrelic.inputs.NotificationChannelPropertyArgs;\nimport com.pulumi.newrelic.Workflow;\nimport com.pulumi.newrelic.WorkflowArgs;\nimport com.pulumi.newrelic.inputs.WorkflowIssuesFilterArgs;\nimport com.pulumi.newrelic.inputs.WorkflowDestinationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_policy = new AlertPolicy(\"my-policy\");\n\n        var webhook_destination = new NotificationDestination(\"webhook-destination\", NotificationDestinationArgs.builder()        \n            .type(\"WEBHOOK\")\n            .properties(NotificationDestinationPropertyArgs.builder()\n                .key(\"url\")\n                .value(\"https://example.com\")\n                .build())\n            .authBasic(NotificationDestinationAuthBasicArgs.builder()\n                .user(\"username\")\n                .password(\"password\")\n                .build())\n            .build());\n\n        var webhook_channel = new NotificationChannel(\"webhook-channel\", NotificationChannelArgs.builder()        \n            .type(\"WEBHOOK\")\n            .destinationId(webhook_destination.id())\n            .product(\"IINT\")\n            .properties(NotificationChannelPropertyArgs.builder()\n                .key(\"payload\")\n                .value(\"{}\")\n                .label(\"Payload Template\")\n                .build())\n            .build());\n\n        var workflow_example = new Workflow(\"workflow-example\", WorkflowArgs.builder()        \n            .mutingRulesHandling(\"NOTIFY_ALL_ISSUES\")\n            .issuesFilter(WorkflowIssuesFilterArgs.builder()\n                .name(\"Filter-name\")\n                .type(\"FILTER\")\n                .predicates(WorkflowIssuesFilterPredicateArgs.builder()\n                    .attribute(\"labels.policyIds\")\n                    .operator(\"EXACTLY_MATCHES\")\n                    .values(my_policy.id())\n                    .build())\n                .build())\n            .destinations(WorkflowDestinationArgs.builder()\n                .channelId(webhook_channel.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a policy to track\n  my-policy:\n    type: newrelic:AlertPolicy\n  # Create a reusable notification destination\n  webhook-destination:\n    type: newrelic:NotificationDestination\n    properties:\n      type: WEBHOOK\n      properties:\n        - key: url\n          value: https://example.com\n      authBasic:\n        user: username\n        password: password\n  # Create a notification channel to use in the workflow\n  webhook-channel:\n    type: newrelic:NotificationChannel\n    properties:\n      type: WEBHOOK\n      destinationId: ${[\"webhook-destination\"].id}\n      product: IINT # Please note the product used!\n      properties:\n        - key: payload\n          value: '{}'\n          label: Payload Template\n  # A workflow that matches issues that include incidents triggered by the policy\n  workflow-example:\n    type: newrelic:Workflow\n    properties:\n      mutingRulesHandling: NOTIFY_ALL_ISSUES\n      issuesFilter:\n        name: Filter-name\n        type: FILTER\n        predicates:\n          - attribute: labels.policyIds\n            operator: EXACTLY_MATCHES\n            values:\n              - ${[\"my-policy\"].id}\n      destinations:\n        - channelId: ${[\"webhook-channel\"].id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### An example of a workflow with enrichments\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst workflow_example = new newrelic.Workflow(\"workflow-example\", {\n    mutingRulesHandling: \"NOTIFY_ALL_ISSUES\",\n    issuesFilter: {\n        name: \"Filter-name\",\n        type: \"FILTER\",\n        predicates: [{\n            attribute: \"accumulations.tag.team\",\n            operator: \"EXACTLY_MATCHES\",\n            values: [\"my_team\"],\n        }],\n    },\n    enrichments: {\n        nrqls: [{\n            name: \"Log Count\",\n            configurations: [{\n                query: \"SELECT count(*) FROM Log WHERE message like '%error%' since 10 minutes ago\",\n            }],\n        }],\n    },\n    destinations: [{\n        channelId: newrelic_notification_channel[\"webhook-channel\"].id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nworkflow_example = newrelic.Workflow(\"workflow-example\",\n    muting_rules_handling=\"NOTIFY_ALL_ISSUES\",\n    issues_filter=newrelic.WorkflowIssuesFilterArgs(\n        name=\"Filter-name\",\n        type=\"FILTER\",\n        predicates=[newrelic.WorkflowIssuesFilterPredicateArgs(\n            attribute=\"accumulations.tag.team\",\n            operator=\"EXACTLY_MATCHES\",\n            values=[\"my_team\"],\n        )],\n    ),\n    enrichments=newrelic.WorkflowEnrichmentsArgs(\n        nrqls=[newrelic.WorkflowEnrichmentsNrqlArgs(\n            name=\"Log Count\",\n            configurations=[newrelic.WorkflowEnrichmentsNrqlConfigurationArgs(\n                query=\"SELECT count(*) FROM Log WHERE message like '%error%' since 10 minutes ago\",\n            )],\n        )],\n    ),\n    destinations=[newrelic.WorkflowDestinationArgs(\n        channel_id=newrelic_notification_channel[\"webhook-channel\"][\"id\"],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var workflow_example = new NewRelic.Workflow(\"workflow-example\", new()\n    {\n        MutingRulesHandling = \"NOTIFY_ALL_ISSUES\",\n        IssuesFilter = new NewRelic.Inputs.WorkflowIssuesFilterArgs\n        {\n            Name = \"Filter-name\",\n            Type = \"FILTER\",\n            Predicates = new[]\n            {\n                new NewRelic.Inputs.WorkflowIssuesFilterPredicateArgs\n                {\n                    Attribute = \"accumulations.tag.team\",\n                    Operator = \"EXACTLY_MATCHES\",\n                    Values = new[]\n                    {\n                        \"my_team\",\n                    },\n                },\n            },\n        },\n        Enrichments = new NewRelic.Inputs.WorkflowEnrichmentsArgs\n        {\n            Nrqls = new[]\n            {\n                new NewRelic.Inputs.WorkflowEnrichmentsNrqlArgs\n                {\n                    Name = \"Log Count\",\n                    Configurations = new[]\n                    {\n                        new NewRelic.Inputs.WorkflowEnrichmentsNrqlConfigurationArgs\n                        {\n                            Query = \"SELECT count(*) FROM Log WHERE message like '%error%' since 10 minutes ago\",\n                        },\n                    },\n                },\n            },\n        },\n        Destinations = new[]\n        {\n            new NewRelic.Inputs.WorkflowDestinationArgs\n            {\n                ChannelId = newrelic_notification_channel.Webhook_channel.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewWorkflow(ctx, \"workflow-example\", \u0026newrelic.WorkflowArgs{\n\t\t\tMutingRulesHandling: pulumi.String(\"NOTIFY_ALL_ISSUES\"),\n\t\t\tIssuesFilter: \u0026newrelic.WorkflowIssuesFilterArgs{\n\t\t\t\tName: pulumi.String(\"Filter-name\"),\n\t\t\t\tType: pulumi.String(\"FILTER\"),\n\t\t\t\tPredicates: newrelic.WorkflowIssuesFilterPredicateArray{\n\t\t\t\t\t\u0026newrelic.WorkflowIssuesFilterPredicateArgs{\n\t\t\t\t\t\tAttribute: pulumi.String(\"accumulations.tag.team\"),\n\t\t\t\t\t\tOperator:  pulumi.String(\"EXACTLY_MATCHES\"),\n\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"my_team\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tEnrichments: \u0026newrelic.WorkflowEnrichmentsArgs{\n\t\t\t\tNrqls: newrelic.WorkflowEnrichmentsNrqlArray{\n\t\t\t\t\t\u0026newrelic.WorkflowEnrichmentsNrqlArgs{\n\t\t\t\t\t\tName: pulumi.String(\"Log Count\"),\n\t\t\t\t\t\tConfigurations: newrelic.WorkflowEnrichmentsNrqlConfigurationArray{\n\t\t\t\t\t\t\t\u0026newrelic.WorkflowEnrichmentsNrqlConfigurationArgs{\n\t\t\t\t\t\t\t\tQuery: pulumi.String(\"SELECT count(*) FROM Log WHERE message like '%error%' since 10 minutes ago\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDestinations: newrelic.WorkflowDestinationArray{\n\t\t\t\t\u0026newrelic.WorkflowDestinationArgs{\n\t\t\t\t\tChannelId: pulumi.Any(newrelic_notification_channel.WebhookChannel.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.Workflow;\nimport com.pulumi.newrelic.WorkflowArgs;\nimport com.pulumi.newrelic.inputs.WorkflowIssuesFilterArgs;\nimport com.pulumi.newrelic.inputs.WorkflowEnrichmentsArgs;\nimport com.pulumi.newrelic.inputs.WorkflowDestinationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var workflow_example = new Workflow(\"workflow-example\", WorkflowArgs.builder()        \n            .mutingRulesHandling(\"NOTIFY_ALL_ISSUES\")\n            .issuesFilter(WorkflowIssuesFilterArgs.builder()\n                .name(\"Filter-name\")\n                .type(\"FILTER\")\n                .predicates(WorkflowIssuesFilterPredicateArgs.builder()\n                    .attribute(\"accumulations.tag.team\")\n                    .operator(\"EXACTLY_MATCHES\")\n                    .values(\"my_team\")\n                    .build())\n                .build())\n            .enrichments(WorkflowEnrichmentsArgs.builder()\n                .nrqls(WorkflowEnrichmentsNrqlArgs.builder()\n                    .name(\"Log Count\")\n                    .configurations(WorkflowEnrichmentsNrqlConfigurationArgs.builder()\n                        .query(\"SELECT count(*) FROM Log WHERE message like '%error%' since 10 minutes ago\")\n                        .build())\n                    .build())\n                .build())\n            .destinations(WorkflowDestinationArgs.builder()\n                .channelId(newrelic_notification_channel.webhook-channel().id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  workflow-example:\n    type: newrelic:Workflow\n    properties:\n      mutingRulesHandling: NOTIFY_ALL_ISSUES\n      issuesFilter:\n        name: Filter-name\n        type: FILTER\n        predicates:\n          - attribute: accumulations.tag.team\n            operator: EXACTLY_MATCHES\n            values:\n              - my_team\n      enrichments:\n        nrqls:\n          - name: Log Count\n            configurations:\n              - query: SELECT count(*) FROM Log WHERE message like '%error%' since 10 minutes ago\n      destinations:\n        - channelId: ${newrelic_notification_channel\"webhook-channel\"[%!s(MISSING)].id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### An example of a workflow with notification triggers\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst workflow_example = new newrelic.Workflow(\"workflow-example\", {\n    mutingRulesHandling: \"NOTIFY_ALL_ISSUES\",\n    issuesFilter: {\n        name: \"Filter-name\",\n        type: \"FILTER\",\n        predicates: [{\n            attribute: \"accumulations.tag.team\",\n            operator: \"EXACTLY_MATCHES\",\n            values: [\"my_team\"],\n        }],\n    },\n    destinations: [{\n        channelId: newrelic_notification_channel[\"webhook-channel\"].id,\n        notificationTriggers: [\"ACTIVATED\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nworkflow_example = newrelic.Workflow(\"workflow-example\",\n    muting_rules_handling=\"NOTIFY_ALL_ISSUES\",\n    issues_filter=newrelic.WorkflowIssuesFilterArgs(\n        name=\"Filter-name\",\n        type=\"FILTER\",\n        predicates=[newrelic.WorkflowIssuesFilterPredicateArgs(\n            attribute=\"accumulations.tag.team\",\n            operator=\"EXACTLY_MATCHES\",\n            values=[\"my_team\"],\n        )],\n    ),\n    destinations=[newrelic.WorkflowDestinationArgs(\n        channel_id=newrelic_notification_channel[\"webhook-channel\"][\"id\"],\n        notification_triggers=[\"ACTIVATED\"],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var workflow_example = new NewRelic.Workflow(\"workflow-example\", new()\n    {\n        MutingRulesHandling = \"NOTIFY_ALL_ISSUES\",\n        IssuesFilter = new NewRelic.Inputs.WorkflowIssuesFilterArgs\n        {\n            Name = \"Filter-name\",\n            Type = \"FILTER\",\n            Predicates = new[]\n            {\n                new NewRelic.Inputs.WorkflowIssuesFilterPredicateArgs\n                {\n                    Attribute = \"accumulations.tag.team\",\n                    Operator = \"EXACTLY_MATCHES\",\n                    Values = new[]\n                    {\n                        \"my_team\",\n                    },\n                },\n            },\n        },\n        Destinations = new[]\n        {\n            new NewRelic.Inputs.WorkflowDestinationArgs\n            {\n                ChannelId = newrelic_notification_channel.Webhook_channel.Id,\n                NotificationTriggers = new[]\n                {\n                    \"ACTIVATED\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.NewWorkflow(ctx, \"workflow-example\", \u0026newrelic.WorkflowArgs{\n\t\t\tMutingRulesHandling: pulumi.String(\"NOTIFY_ALL_ISSUES\"),\n\t\t\tIssuesFilter: \u0026newrelic.WorkflowIssuesFilterArgs{\n\t\t\t\tName: pulumi.String(\"Filter-name\"),\n\t\t\t\tType: pulumi.String(\"FILTER\"),\n\t\t\t\tPredicates: newrelic.WorkflowIssuesFilterPredicateArray{\n\t\t\t\t\t\u0026newrelic.WorkflowIssuesFilterPredicateArgs{\n\t\t\t\t\t\tAttribute: pulumi.String(\"accumulations.tag.team\"),\n\t\t\t\t\t\tOperator:  pulumi.String(\"EXACTLY_MATCHES\"),\n\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"my_team\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDestinations: newrelic.WorkflowDestinationArray{\n\t\t\t\t\u0026newrelic.WorkflowDestinationArgs{\n\t\t\t\t\tChannelId: pulumi.Any(newrelic_notification_channel.WebhookChannel.Id),\n\t\t\t\t\tNotificationTriggers: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"ACTIVATED\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.Workflow;\nimport com.pulumi.newrelic.WorkflowArgs;\nimport com.pulumi.newrelic.inputs.WorkflowIssuesFilterArgs;\nimport com.pulumi.newrelic.inputs.WorkflowDestinationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var workflow_example = new Workflow(\"workflow-example\", WorkflowArgs.builder()        \n            .mutingRulesHandling(\"NOTIFY_ALL_ISSUES\")\n            .issuesFilter(WorkflowIssuesFilterArgs.builder()\n                .name(\"Filter-name\")\n                .type(\"FILTER\")\n                .predicates(WorkflowIssuesFilterPredicateArgs.builder()\n                    .attribute(\"accumulations.tag.team\")\n                    .operator(\"EXACTLY_MATCHES\")\n                    .values(\"my_team\")\n                    .build())\n                .build())\n            .destinations(WorkflowDestinationArgs.builder()\n                .channelId(newrelic_notification_channel.webhook-channel().id())\n                .notificationTriggers(\"ACTIVATED\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  workflow-example:\n    type: newrelic:Workflow\n    properties:\n      mutingRulesHandling: NOTIFY_ALL_ISSUES\n      issuesFilter:\n        name: Filter-name\n        type: FILTER\n        predicates:\n          - attribute: accumulations.tag.team\n            operator: EXACTLY_MATCHES\n            values:\n              - my_team\n      destinations:\n        - channelId: ${newrelic_notification_channel\"webhook-channel\"[%!s(MISSING)].id}\n          notificationTriggers:\n            - ACTIVATED\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Additional Information\n\nMore details about the workflows can be found [here](https://docs.newrelic.com/docs/alerts-applied-intelligence/applied-intelligence/incident-workflows/incident-workflows/).\n\n## v3.3 changes\n\nIn version v3.3 we renamed the following arguments:\n\n- `workflow_enabled` changed to `enabled`.\n- `destination_configuration` changed to `destination`.\n- `predicates` changed to `predicate`.\n- Enrichment's `configurations` changed to `configuration`.\n\n## Import\n\nWorkflows can be imported using the `id`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:index/workflow:Workflow foo \u003cid\u003e\n```\n\nYou can find the workflow ID from the workflow table by clicking on ... at the end of the row and choosing `Copy workflow id to clipboard`.\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.\n"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/WorkflowDestination:WorkflowDestination"
                    },
                    "description": "Notification configuration. See Nested destination blocks below for details.\n"
                },
                "destinationsEnabled": {
                    "type": "boolean",
                    "description": "**DEPRECATED** Whether destinations are enabled. Please use `enabled` instead:\nthese two are different flags, but they are functionally identical. Defaults to true.\n",
                    "deprecationMessage": "Please use 'enabled' instead"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether workflow is enabled. Defaults to true.\n"
                },
                "enrichments": {
                    "$ref": "#/types/newrelic:index/WorkflowEnrichments:WorkflowEnrichments",
                    "description": "Workflow's enrichments. See Nested enrichments blocks below for details.\n"
                },
                "enrichmentsEnabled": {
                    "type": "boolean",
                    "description": "Whether enrichments are enabled. Defaults to true.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "Workflow entity GUID\n"
                },
                "issuesFilter": {
                    "$ref": "#/types/newrelic:index/WorkflowIssuesFilter:WorkflowIssuesFilter",
                    "description": "A filter used to identify issues handled by this workflow. See Nested issues_filter blocks below for details.\n"
                },
                "lastRun": {
                    "type": "string",
                    "description": "The last time notification was sent for this workflow.\n"
                },
                "mutingRulesHandling": {
                    "type": "string",
                    "description": "How to handle muted issues. See Muting Rules below for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workflow.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The id of the workflow.\n"
                }
            },
            "required": [
                "accountId",
                "destinations",
                "guid",
                "issuesFilter",
                "lastRun",
                "mutingRulesHandling",
                "name",
                "workflowId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.\n",
                    "willReplaceOnChanges": true
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/WorkflowDestination:WorkflowDestination"
                    },
                    "description": "Notification configuration. See Nested destination blocks below for details.\n"
                },
                "destinationsEnabled": {
                    "type": "boolean",
                    "description": "**DEPRECATED** Whether destinations are enabled. Please use `enabled` instead:\nthese two are different flags, but they are functionally identical. Defaults to true.\n",
                    "deprecationMessage": "Please use 'enabled' instead"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether workflow is enabled. Defaults to true.\n"
                },
                "enrichments": {
                    "$ref": "#/types/newrelic:index/WorkflowEnrichments:WorkflowEnrichments",
                    "description": "Workflow's enrichments. See Nested enrichments blocks below for details.\n"
                },
                "enrichmentsEnabled": {
                    "type": "boolean",
                    "description": "Whether enrichments are enabled. Defaults to true.\n"
                },
                "issuesFilter": {
                    "$ref": "#/types/newrelic:index/WorkflowIssuesFilter:WorkflowIssuesFilter",
                    "description": "A filter used to identify issues handled by this workflow. See Nested issues_filter blocks below for details.\n"
                },
                "mutingRulesHandling": {
                    "type": "string",
                    "description": "How to handle muted issues. See Muting Rules below for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workflow.\n"
                }
            },
            "requiredInputs": [
                "destinations",
                "issuesFilter",
                "mutingRulesHandling"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Workflow resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.\n",
                        "willReplaceOnChanges": true
                    },
                    "destinations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/WorkflowDestination:WorkflowDestination"
                        },
                        "description": "Notification configuration. See Nested destination blocks below for details.\n"
                    },
                    "destinationsEnabled": {
                        "type": "boolean",
                        "description": "**DEPRECATED** Whether destinations are enabled. Please use `enabled` instead:\nthese two are different flags, but they are functionally identical. Defaults to true.\n",
                        "deprecationMessage": "Please use 'enabled' instead"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether workflow is enabled. Defaults to true.\n"
                    },
                    "enrichments": {
                        "$ref": "#/types/newrelic:index/WorkflowEnrichments:WorkflowEnrichments",
                        "description": "Workflow's enrichments. See Nested enrichments blocks below for details.\n"
                    },
                    "enrichmentsEnabled": {
                        "type": "boolean",
                        "description": "Whether enrichments are enabled. Defaults to true.\n"
                    },
                    "guid": {
                        "type": "string",
                        "description": "Workflow entity GUID\n"
                    },
                    "issuesFilter": {
                        "$ref": "#/types/newrelic:index/WorkflowIssuesFilter:WorkflowIssuesFilter",
                        "description": "A filter used to identify issues handled by this workflow. See Nested issues_filter blocks below for details.\n"
                    },
                    "lastRun": {
                        "type": "string",
                        "description": "The last time notification was sent for this workflow.\n"
                    },
                    "mutingRulesHandling": {
                        "type": "string",
                        "description": "How to handle muted issues. See Muting Rules below for details.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the workflow.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The id of the workflow.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:insights/event:Event": {
            "description": "Use this resource to create one or more Insights events.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.insights.Event(\"foo\", {events: [{\n    attributes: [\n        {\n            key: \"a_string_attribute\",\n            value: \"a string\",\n        },\n        {\n            key: \"an_integer_attribute\",\n            type: \"int\",\n            value: \"42\",\n        },\n        {\n            key: \"a_float_attribute\",\n            type: \"float\",\n            value: \"101.1\",\n        },\n    ],\n    timestamp: 1232471100,\n    type: \"MyEvent\",\n}]});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.insights.Event(\"foo\", events=[newrelic.insights.EventEventArgs(\n    attributes=[\n        newrelic.insights.EventEventAttributeArgs(\n            key=\"a_string_attribute\",\n            value=\"a string\",\n        ),\n        newrelic.insights.EventEventAttributeArgs(\n            key=\"an_integer_attribute\",\n            type=\"int\",\n            value=\"42\",\n        ),\n        newrelic.insights.EventEventAttributeArgs(\n            key=\"a_float_attribute\",\n            type=\"float\",\n            value=\"101.1\",\n        ),\n    ],\n    timestamp=1232471100,\n    type=\"MyEvent\",\n)])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.Insights.Event(\"foo\", new()\n    {\n        Events = new[]\n        {\n            new NewRelic.Insights.Inputs.EventEventArgs\n            {\n                Attributes = new[]\n                {\n                    new NewRelic.Insights.Inputs.EventEventAttributeArgs\n                    {\n                        Key = \"a_string_attribute\",\n                        Value = \"a string\",\n                    },\n                    new NewRelic.Insights.Inputs.EventEventAttributeArgs\n                    {\n                        Key = \"an_integer_attribute\",\n                        Type = \"int\",\n                        Value = \"42\",\n                    },\n                    new NewRelic.Insights.Inputs.EventEventAttributeArgs\n                    {\n                        Key = \"a_float_attribute\",\n                        Type = \"float\",\n                        Value = \"101.1\",\n                    },\n                },\n                Timestamp = 1232471100,\n                Type = \"MyEvent\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/insights\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := insights.NewEvent(ctx, \"foo\", \u0026insights.EventArgs{\n\t\t\tEvents: insights.EventEventArray{\n\t\t\t\t\u0026insights.EventEventArgs{\n\t\t\t\t\tAttributes: insights.EventEventAttributeArray{\n\t\t\t\t\t\t\u0026insights.EventEventAttributeArgs{\n\t\t\t\t\t\t\tKey:   pulumi.String(\"a_string_attribute\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"a string\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026insights.EventEventAttributeArgs{\n\t\t\t\t\t\t\tKey:   pulumi.String(\"an_integer_attribute\"),\n\t\t\t\t\t\t\tType:  pulumi.String(\"int\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"42\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026insights.EventEventAttributeArgs{\n\t\t\t\t\t\t\tKey:   pulumi.String(\"a_float_attribute\"),\n\t\t\t\t\t\t\tType:  pulumi.String(\"float\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"101.1\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tTimestamp: pulumi.Int(1232471100),\n\t\t\t\t\tType:      pulumi.String(\"MyEvent\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.insights.Event;\nimport com.pulumi.newrelic.insights.EventArgs;\nimport com.pulumi.newrelic.insights.inputs.EventEventArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Event(\"foo\", EventArgs.builder()        \n            .events(EventEventArgs.builder()\n                .attributes(                \n                    EventEventAttributeArgs.builder()\n                        .key(\"a_string_attribute\")\n                        .value(\"a string\")\n                        .build(),\n                    EventEventAttributeArgs.builder()\n                        .key(\"an_integer_attribute\")\n                        .type(\"int\")\n                        .value(42)\n                        .build(),\n                    EventEventAttributeArgs.builder()\n                        .key(\"a_float_attribute\")\n                        .type(\"float\")\n                        .value(101.1)\n                        .build())\n                .timestamp(1232471100)\n                .type(\"MyEvent\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:insights:Event\n    properties:\n      events:\n        - attributes:\n            - key: a_string_attribute\n              value: a string\n            - key: an_integer_attribute\n              type: int\n              value: 42\n            - key: a_float_attribute\n              type: float\n              value: 101.1\n          timestamp: 1.2324711e+09\n          type: MyEvent\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Events\n\nThe `event` mapping supports the following arguments:\n\n  * `type` - (Required) The event's name. Can be a combination of alphanumeric characters, underscores, and colons.\n  * `timestamp` - (Optional) Must be a Unix epoch timestamp. You can define timestamps either in seconds or in milliseconds.\n  * `attribute` - (Required) An attribute to include in your event payload. Multiple attribute blocks can be defined for an event. See Attributes below for details.\n\n### Attributes\n\nThe `attribute` mapping supports the following arguments:\n\n  * `key` - (Required) The name of the attribute.\n  * `value` - (Required) The value of the attribute.\n  * `type` - (Optional) Specify the type for the attribute value. This is useful when passing integer or float values to Insights. Allowed values are `string`, `int`, or `float`. Defaults to `string`.\n",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:insights/EventEvent:EventEvent"
                    },
                    "description": "An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.\n"
                }
            },
            "required": [
                "events"
            ],
            "inputProperties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:insights/EventEvent:EventEvent"
                    },
                    "description": "An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "events"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Event resources.\n",
                "properties": {
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:insights/EventEvent:EventEvent"
                        },
                        "description": "An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "newrelic:plugins/applicationSettings:ApplicationSettings": {
            "description": "\u003e **NOTE:** Applications are not created by this resource, but are created by\na reporting agent.\n\nUse this resource to manage configuration for an application that already\nexists in New Relic.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst app = new newrelic.plugins.ApplicationSettings(\"app\", {\n    appApdexThreshold: 0.7,\n    enableRealUserMonitoring: false,\n    endUserApdexThreshold: 0.8,\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\napp = newrelic.plugins.ApplicationSettings(\"app\",\n    app_apdex_threshold=0.7,\n    enable_real_user_monitoring=False,\n    end_user_apdex_threshold=0.8)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = new NewRelic.Plugins.ApplicationSettings(\"app\", new()\n    {\n        AppApdexThreshold = 0.7,\n        EnableRealUserMonitoring = false,\n        EndUserApdexThreshold = 0.8,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/plugins\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := plugins.NewApplicationSettings(ctx, \"app\", \u0026plugins.ApplicationSettingsArgs{\n\t\t\tAppApdexThreshold:        pulumi.Float64(0.7),\n\t\t\tEnableRealUserMonitoring: pulumi.Bool(false),\n\t\t\tEndUserApdexThreshold:    pulumi.Float64(0.8),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.plugins.ApplicationSettings;\nimport com.pulumi.newrelic.plugins.ApplicationSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var app = new ApplicationSettings(\"app\", ApplicationSettingsArgs.builder()        \n            .appApdexThreshold(\"0.7\")\n            .enableRealUserMonitoring(false)\n            .endUserApdexThreshold(\"0.8\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  app:\n    type: newrelic:plugins:ApplicationSettings\n    properties:\n      appApdexThreshold: '0.7'\n      enableRealUserMonitoring: false\n      endUserApdexThreshold: '0.8'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Notes\n\n\u003e **NOTE:** Applications that have reported data in the last twelve hours\ncannot be deleted.\n\n## Import\n\nApplications can be imported using notation `application_id`, e.g.\n\n```sh\n$ pulumi import newrelic:plugins/applicationSettings:ApplicationSettings main 6789012345\n```\n",
            "properties": {
                "appApdexThreshold": {
                    "type": "number",
                    "description": "The apdex threshold for the New Relic application.\n"
                },
                "enableRealUserMonitoring": {
                    "type": "boolean",
                    "description": "Enable or disable real user monitoring for the New Relic application.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n"
                },
                "endUserApdexThreshold": {
                    "type": "number",
                    "description": "The user's apdex threshold for the New Relic application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application in New Relic APM.\n"
                }
            },
            "required": [
                "appApdexThreshold",
                "enableRealUserMonitoring",
                "endUserApdexThreshold",
                "name"
            ],
            "inputProperties": {
                "appApdexThreshold": {
                    "type": "number",
                    "description": "The apdex threshold for the New Relic application.\n"
                },
                "enableRealUserMonitoring": {
                    "type": "boolean",
                    "description": "Enable or disable real user monitoring for the New Relic application.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n"
                },
                "endUserApdexThreshold": {
                    "type": "number",
                    "description": "The user's apdex threshold for the New Relic application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application in New Relic APM.\n"
                }
            },
            "requiredInputs": [
                "appApdexThreshold",
                "enableRealUserMonitoring",
                "endUserApdexThreshold"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationSettings resources.\n",
                "properties": {
                    "appApdexThreshold": {
                        "type": "number",
                        "description": "The apdex threshold for the New Relic application.\n"
                    },
                    "enableRealUserMonitoring": {
                        "type": "boolean",
                        "description": "Enable or disable real user monitoring for the New Relic application.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n"
                    },
                    "endUserApdexThreshold": {
                        "type": "number",
                        "description": "The user's apdex threshold for the New Relic application.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application in New Relic APM.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:plugins/workload:Workload": {
            "description": "Use this resource to create, update, and delete a New Relic One workload.\n\nA New Relic User API key is required to provision this resource.  Set the `api_key`\nattribute in the `provider` block or the `NEW_RELIC_API_KEY` environment\nvariable with your User API key.\n\n## Example Usage\n\nInclude entities with a certain string on the name.\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.plugins.Workload(\"foo\", {\n    accountId: 12345678,\n    entityGuids: [\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\"],\n    entitySearchQueries: [{\n        query: \"name like '%Example application%'\",\n    }],\n    scopeAccountIds: [12345678],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.plugins.Workload(\"foo\",\n    account_id=12345678,\n    entity_guids=[\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\"],\n    entity_search_queries=[newrelic.plugins.WorkloadEntitySearchQueryArgs(\n        query=\"name like '%Example application%'\",\n    )],\n    scope_account_ids=[12345678])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.Plugins.Workload(\"foo\", new()\n    {\n        AccountId = 12345678,\n        EntityGuids = new[]\n        {\n            \"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\",\n        },\n        EntitySearchQueries = new[]\n        {\n            new NewRelic.Plugins.Inputs.WorkloadEntitySearchQueryArgs\n            {\n                Query = \"name like '%Example application%'\",\n            },\n        },\n        ScopeAccountIds = new[]\n        {\n            12345678,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/plugins\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := plugins.NewWorkload(ctx, \"foo\", \u0026plugins.WorkloadArgs{\n\t\t\tAccountId: pulumi.Int(12345678),\n\t\t\tEntityGuids: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\"),\n\t\t\t},\n\t\t\tEntitySearchQueries: plugins.WorkloadEntitySearchQueryArray{\n\t\t\t\t\u0026plugins.WorkloadEntitySearchQueryArgs{\n\t\t\t\t\tQuery: pulumi.String(\"name like '%Example application%'\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tScopeAccountIds: pulumi.IntArray{\n\t\t\t\tpulumi.Int(12345678),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.plugins.Workload;\nimport com.pulumi.newrelic.plugins.WorkloadArgs;\nimport com.pulumi.newrelic.plugins.inputs.WorkloadEntitySearchQueryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Workload(\"foo\", WorkloadArgs.builder()        \n            .accountId(12345678)\n            .entityGuids(\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\")\n            .entitySearchQueries(WorkloadEntitySearchQueryArgs.builder()\n                .query(\"name like '%Example application%'\")\n                .build())\n            .scopeAccountIds(12345678)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:plugins:Workload\n    properties:\n      accountId: 1.2345678e+07\n      entityGuids:\n        - MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\n      entitySearchQueries:\n        - query: name like '%Example application%'\n      scopeAccountIds:\n        - 1.2345678e+07\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nInclude entities with a set of tags.\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.plugins.Workload(\"foo\", {\n    accountId: 12345678,\n    entityGuids: [\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\"],\n    entitySearchQueries: [{\n        query: \"tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'\",\n    }],\n    scopeAccountIds: [12345678],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.plugins.Workload(\"foo\",\n    account_id=12345678,\n    entity_guids=[\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\"],\n    entity_search_queries=[newrelic.plugins.WorkloadEntitySearchQueryArgs(\n        query=\"tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'\",\n    )],\n    scope_account_ids=[12345678])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.Plugins.Workload(\"foo\", new()\n    {\n        AccountId = 12345678,\n        EntityGuids = new[]\n        {\n            \"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\",\n        },\n        EntitySearchQueries = new[]\n        {\n            new NewRelic.Plugins.Inputs.WorkloadEntitySearchQueryArgs\n            {\n                Query = \"tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'\",\n            },\n        },\n        ScopeAccountIds = new[]\n        {\n            12345678,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/plugins\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := plugins.NewWorkload(ctx, \"foo\", \u0026plugins.WorkloadArgs{\n\t\t\tAccountId: pulumi.Int(12345678),\n\t\t\tEntityGuids: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\"),\n\t\t\t},\n\t\t\tEntitySearchQueries: plugins.WorkloadEntitySearchQueryArray{\n\t\t\t\t\u0026plugins.WorkloadEntitySearchQueryArgs{\n\t\t\t\t\tQuery: pulumi.String(\"tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tScopeAccountIds: pulumi.IntArray{\n\t\t\t\tpulumi.Int(12345678),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.plugins.Workload;\nimport com.pulumi.newrelic.plugins.WorkloadArgs;\nimport com.pulumi.newrelic.plugins.inputs.WorkloadEntitySearchQueryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Workload(\"foo\", WorkloadArgs.builder()        \n            .accountId(12345678)\n            .entityGuids(\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\")\n            .entitySearchQueries(WorkloadEntitySearchQueryArgs.builder()\n                .query(\"tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'\")\n                .build())\n            .scopeAccountIds(12345678)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:plugins:Workload\n    properties:\n      accountId: 1.2345678e+07\n      entityGuids:\n        - MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\n      entitySearchQueries:\n        - query: tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'\n      scopeAccountIds:\n        - 1.2345678e+07\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nInclude entities with a set of tags.\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.plugins.Workload(\"foo\", {\n    accountId: 12345678,\n    entityGuids: [\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\"],\n    entitySearchQueries: [{\n        query: \"tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'\",\n    }],\n    scopeAccountIds: [12345678],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.plugins.Workload(\"foo\",\n    account_id=12345678,\n    entity_guids=[\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\"],\n    entity_search_queries=[newrelic.plugins.WorkloadEntitySearchQueryArgs(\n        query=\"tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'\",\n    )],\n    scope_account_ids=[12345678])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.Plugins.Workload(\"foo\", new()\n    {\n        AccountId = 12345678,\n        EntityGuids = new[]\n        {\n            \"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\",\n        },\n        EntitySearchQueries = new[]\n        {\n            new NewRelic.Plugins.Inputs.WorkloadEntitySearchQueryArgs\n            {\n                Query = \"tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'\",\n            },\n        },\n        ScopeAccountIds = new[]\n        {\n            12345678,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/plugins\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := plugins.NewWorkload(ctx, \"foo\", \u0026plugins.WorkloadArgs{\n\t\t\tAccountId: pulumi.Int(12345678),\n\t\t\tEntityGuids: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\"),\n\t\t\t},\n\t\t\tEntitySearchQueries: plugins.WorkloadEntitySearchQueryArray{\n\t\t\t\t\u0026plugins.WorkloadEntitySearchQueryArgs{\n\t\t\t\t\tQuery: pulumi.String(\"tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tScopeAccountIds: pulumi.IntArray{\n\t\t\t\tpulumi.Int(12345678),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.plugins.Workload;\nimport com.pulumi.newrelic.plugins.WorkloadArgs;\nimport com.pulumi.newrelic.plugins.inputs.WorkloadEntitySearchQueryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Workload(\"foo\", WorkloadArgs.builder()        \n            .accountId(12345678)\n            .entityGuids(\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\")\n            .entitySearchQueries(WorkloadEntitySearchQueryArgs.builder()\n                .query(\"tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'\")\n                .build())\n            .scopeAccountIds(12345678)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:plugins:Workload\n    properties:\n      accountId: 1.2345678e+07\n      entityGuids:\n        - MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\n      entitySearchQueries:\n        - query: tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'\n      scopeAccountIds:\n        - 1.2345678e+07\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nInclude automatic status\n\n\u003e The global status of your workload is a quick indicator of the workload health. You can configure it to be calculated automatically, and you can also set an alert and get a notification whenever the workload stops being operational. Alternatively, you can communicate a certain status of the workload by setting up a static value and a description. [See our docs](https://docs.newrelic.com/docs/workloads/use-workloads/workloads/workload-status)\n\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.plugins.Workload;\nimport com.pulumi.newrelic.plugins.WorkloadArgs;\nimport com.pulumi.newrelic.plugins.inputs.WorkloadEntitySearchQueryArgs;\nimport com.pulumi.newrelic.plugins.inputs.WorkloadStatusConfigAutomaticArgs;\nimport com.pulumi.newrelic.plugins.inputs.WorkloadStatusConfigAutomaticRemainingEntitiesRuleArgs;\nimport com.pulumi.newrelic.plugins.inputs.WorkloadStatusConfigAutomaticRemainingEntitiesRuleRemainingEntitiesRuleRollupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Workload(\"foo\", WorkloadArgs.builder()        \n            .accountId(12345678)\n            .description(\"Description\")\n            .entityGuids(\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\")\n            .entitySearchQueries(WorkloadEntitySearchQueryArgs.builder()\n                .query(\"name like '%Example application%'\")\n                .build())\n            .scopeAccountIds(12345678)\n            .statusConfigAutomatic(WorkloadStatusConfigAutomaticArgs.builder()\n                .enabled(true)\n                .remainingEntitiesRule(WorkloadStatusConfigAutomaticRemainingEntitiesRuleArgs.builder()\n                    .remainingEntitiesRuleRollup(WorkloadStatusConfigAutomaticRemainingEntitiesRuleRemainingEntitiesRuleRollupArgs.builder()\n                        .groupBy(\"ENTITY_TYPE\")\n                        .strategy(\"BEST_STATUS_WINS\")\n                        .thresholdType(\"FIXED\")\n                        .thresholdValue(100)\n                        .build())\n                    .build())\n                .rules(WorkloadStatusConfigAutomaticRuleArgs.builder()\n                    .entityGuids(\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\")\n                    .nrqlQuery(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .rollup(WorkloadStatusConfigAutomaticRuleRollupArgs.builder()\n                        .strategy(\"BEST_STATUS_WINS\")\n                        .thresholdType(\"FIXED\")\n                        .thresholdValue(100)\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:plugins:Workload\n    properties:\n      accountId: 1.2345678e+07\n      description: Description\n      entityGuids:\n        - MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\n      entitySearchQueries:\n        - query: name like '%Example application%'\n      scopeAccountIds:\n        - 1.2345678e+07\n      statusConfigAutomatic:\n        enabled: true\n        remainingEntitiesRule:\n          remainingEntitiesRuleRollup:\n            groupBy: ENTITY_TYPE\n            strategy: BEST_STATUS_WINS\n            thresholdType: FIXED\n            thresholdValue: 100\n        rules:\n          - entityGuids:\n              - MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\n            nrqlQuery:\n              - query: name like '%Example application2%'\n            rollup:\n              strategy: BEST_STATUS_WINS\n              thresholdType: FIXED\n              thresholdValue: 100\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nInclude static status\n\n\u003e You can use this during maintenance tasks or any other time you want to provide a fixed status for your workload. This overrides all automatic rules. [See our docs](https://docs.newrelic.com/docs/workloads/use-workloads/workloads/workload-status#configure-static)\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.plugins.Workload(\"foo\", {\n    accountId: 12345678,\n    description: \"Description\",\n    entityGuids: [\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\"],\n    entitySearchQueries: [{\n        query: \"name like '%Example application%'\",\n    }],\n    scopeAccountIds: [12345678],\n    statusConfigStatic: {\n        description: \"test\",\n        enabled: true,\n        status: \"OPERATIONAL\",\n        summary: \"summary of the status\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.plugins.Workload(\"foo\",\n    account_id=12345678,\n    description=\"Description\",\n    entity_guids=[\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\"],\n    entity_search_queries=[newrelic.plugins.WorkloadEntitySearchQueryArgs(\n        query=\"name like '%Example application%'\",\n    )],\n    scope_account_ids=[12345678],\n    status_config_static=newrelic.plugins.WorkloadStatusConfigStaticArgs(\n        description=\"test\",\n        enabled=True,\n        status=\"OPERATIONAL\",\n        summary=\"summary of the status\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.Plugins.Workload(\"foo\", new()\n    {\n        AccountId = 12345678,\n        Description = \"Description\",\n        EntityGuids = new[]\n        {\n            \"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\",\n        },\n        EntitySearchQueries = new[]\n        {\n            new NewRelic.Plugins.Inputs.WorkloadEntitySearchQueryArgs\n            {\n                Query = \"name like '%Example application%'\",\n            },\n        },\n        ScopeAccountIds = new[]\n        {\n            12345678,\n        },\n        StatusConfigStatic = new NewRelic.Plugins.Inputs.WorkloadStatusConfigStaticArgs\n        {\n            Description = \"test\",\n            Enabled = true,\n            Status = \"OPERATIONAL\",\n            Summary = \"summary of the status\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/plugins\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := plugins.NewWorkload(ctx, \"foo\", \u0026plugins.WorkloadArgs{\n\t\t\tAccountId:   pulumi.Int(12345678),\n\t\t\tDescription: pulumi.String(\"Description\"),\n\t\t\tEntityGuids: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\"),\n\t\t\t},\n\t\t\tEntitySearchQueries: plugins.WorkloadEntitySearchQueryArray{\n\t\t\t\t\u0026plugins.WorkloadEntitySearchQueryArgs{\n\t\t\t\t\tQuery: pulumi.String(\"name like '%Example application%'\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tScopeAccountIds: pulumi.IntArray{\n\t\t\t\tpulumi.Int(12345678),\n\t\t\t},\n\t\t\tStatusConfigStatic: \u0026plugins.WorkloadStatusConfigStaticArgs{\n\t\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\t\tStatus:      pulumi.String(\"OPERATIONAL\"),\n\t\t\t\tSummary:     pulumi.String(\"summary of the status\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.plugins.Workload;\nimport com.pulumi.newrelic.plugins.WorkloadArgs;\nimport com.pulumi.newrelic.plugins.inputs.WorkloadEntitySearchQueryArgs;\nimport com.pulumi.newrelic.plugins.inputs.WorkloadStatusConfigStaticArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Workload(\"foo\", WorkloadArgs.builder()        \n            .accountId(12345678)\n            .description(\"Description\")\n            .entityGuids(\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\")\n            .entitySearchQueries(WorkloadEntitySearchQueryArgs.builder()\n                .query(\"name like '%Example application%'\")\n                .build())\n            .scopeAccountIds(12345678)\n            .statusConfigStatic(WorkloadStatusConfigStaticArgs.builder()\n                .description(\"test\")\n                .enabled(true)\n                .status(\"OPERATIONAL\")\n                .summary(\"summary of the status\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:plugins:Workload\n    properties:\n      accountId: 1.2345678e+07\n      description: Description\n      entityGuids:\n        - MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\n      entitySearchQueries:\n        - query: name like '%Example application%'\n      scopeAccountIds:\n        - 1.2345678e+07\n      statusConfigStatic:\n        description: test\n        enabled: true\n        status: OPERATIONAL\n        summary: summary of the status\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNew Relic workloads can be imported using a concatenated string of the format\n\n `\u003caccount_id\u003e:\u003cworkload_id\u003e:\u003cguid\u003e`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:plugins/workload:Workload foo 12345678:1456:MjUyMDUyOHxBUE18QVBRTElDQVRJT058MjE1MDM3Nzk1\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID where you want to create the workload.\n"
                },
                "compositeEntitySearchQuery": {
                    "type": "string",
                    "description": "The composite query used to compose a dynamic workload.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Relevant information about the workload.\n"
                },
                "entityGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of entity GUIDs manually assigned to this workload. At least one of either `entity_guids` or `entity_search_query` is required.\n"
                },
                "entitySearchQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:plugins/WorkloadEntitySearchQuery:WorkloadEntitySearchQuery"
                    },
                    "description": "A list of search queries that define a dynamic workload. At least one of either `entity_guids` or `entity_search_query` is required. See Nested entity_search_query blocks below for details.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The unique entity identifier of the workload in New Relic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The workload's name.\n"
                },
                "permalink": {
                    "type": "string",
                    "description": "The URL of the workload.\n"
                },
                "scopeAccountIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of account IDs that will be used to get entities from.\n"
                },
                "statusConfigAutomatic": {
                    "$ref": "#/types/newrelic:plugins/WorkloadStatusConfigAutomatic:WorkloadStatusConfigAutomatic",
                    "description": "An input object used to represent an automatic status configuration.See Nested status_config_automatic blocks below for details.\n"
                },
                "statusConfigStatic": {
                    "$ref": "#/types/newrelic:plugins/WorkloadStatusConfigStatic:WorkloadStatusConfigStatic",
                    "description": "A list of static status configurations. You can only configure one static status for a workload.See Nested status_config_static blocks below for details.\n"
                },
                "workloadId": {
                    "type": "integer",
                    "description": "The unique entity identifier of the workload.\n"
                }
            },
            "required": [
                "accountId",
                "compositeEntitySearchQuery",
                "entityGuids",
                "guid",
                "name",
                "permalink",
                "scopeAccountIds",
                "workloadId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID where you want to create the workload.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Relevant information about the workload.\n"
                },
                "entityGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of entity GUIDs manually assigned to this workload. At least one of either `entity_guids` or `entity_search_query` is required.\n"
                },
                "entitySearchQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:plugins/WorkloadEntitySearchQuery:WorkloadEntitySearchQuery"
                    },
                    "description": "A list of search queries that define a dynamic workload. At least one of either `entity_guids` or `entity_search_query` is required. See Nested entity_search_query blocks below for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The workload's name.\n"
                },
                "scopeAccountIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of account IDs that will be used to get entities from.\n"
                },
                "statusConfigAutomatic": {
                    "$ref": "#/types/newrelic:plugins/WorkloadStatusConfigAutomatic:WorkloadStatusConfigAutomatic",
                    "description": "An input object used to represent an automatic status configuration.See Nested status_config_automatic blocks below for details.\n"
                },
                "statusConfigStatic": {
                    "$ref": "#/types/newrelic:plugins/WorkloadStatusConfigStatic:WorkloadStatusConfigStatic",
                    "description": "A list of static status configurations. You can only configure one static status for a workload.See Nested status_config_static blocks below for details.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Workload resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID where you want to create the workload.\n"
                    },
                    "compositeEntitySearchQuery": {
                        "type": "string",
                        "description": "The composite query used to compose a dynamic workload.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Relevant information about the workload.\n"
                    },
                    "entityGuids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of entity GUIDs manually assigned to this workload. At least one of either `entity_guids` or `entity_search_query` is required.\n"
                    },
                    "entitySearchQueries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:plugins/WorkloadEntitySearchQuery:WorkloadEntitySearchQuery"
                        },
                        "description": "A list of search queries that define a dynamic workload. At least one of either `entity_guids` or `entity_search_query` is required. See Nested entity_search_query blocks below for details.\n"
                    },
                    "guid": {
                        "type": "string",
                        "description": "The unique entity identifier of the workload in New Relic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The workload's name.\n"
                    },
                    "permalink": {
                        "type": "string",
                        "description": "The URL of the workload.\n"
                    },
                    "scopeAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of account IDs that will be used to get entities from.\n"
                    },
                    "statusConfigAutomatic": {
                        "$ref": "#/types/newrelic:plugins/WorkloadStatusConfigAutomatic:WorkloadStatusConfigAutomatic",
                        "description": "An input object used to represent an automatic status configuration.See Nested status_config_automatic blocks below for details.\n"
                    },
                    "statusConfigStatic": {
                        "$ref": "#/types/newrelic:plugins/WorkloadStatusConfigStatic:WorkloadStatusConfigStatic",
                        "description": "A list of static status configurations. You can only configure one static status for a workload.See Nested status_config_static blocks below for details.\n"
                    },
                    "workloadId": {
                        "type": "integer",
                        "description": "The unique entity identifier of the workload.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/alertCondition:AlertCondition": {
            "description": "Use this resource to create and manage synthetics alert conditions in New Relic.\n\n\u003e **WARNING:** The `newrelic.synthetics.AlertCondition` resource is deprecated and will be removed in the next major release. The resource newrelic.NrqlAlertCondition would be a preferred alternative to configure alert conditions - in most cases, feature parity can be achieved with a NRQL query.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.AlertCondition(\"foo\", {\n    policyId: newrelic_alert_policy.foo.id,\n    monitorId: newrelic_synthetics_monitor.foo.id,\n    runbookUrl: \"https://www.example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.synthetics.AlertCondition(\"foo\",\n    policy_id=newrelic_alert_policy[\"foo\"][\"id\"],\n    monitor_id=newrelic_synthetics_monitor[\"foo\"][\"id\"],\n    runbook_url=\"https://www.example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.Synthetics.AlertCondition(\"foo\", new()\n    {\n        PolicyId = newrelic_alert_policy.Foo.Id,\n        MonitorId = newrelic_synthetics_monitor.Foo.Id,\n        RunbookUrl = \"https://www.example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.NewAlertCondition(ctx, \"foo\", \u0026synthetics.AlertConditionArgs{\n\t\t\tPolicyId:   pulumi.Any(newrelic_alert_policy.Foo.Id),\n\t\t\tMonitorId:  pulumi.Any(newrelic_synthetics_monitor.Foo.Id),\n\t\t\tRunbookUrl: pulumi.String(\"https://www.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.AlertCondition;\nimport com.pulumi.newrelic.synthetics.AlertConditionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AlertCondition(\"foo\", AlertConditionArgs.builder()        \n            .policyId(newrelic_alert_policy.foo().id())\n            .monitorId(newrelic_synthetics_monitor.foo().id())\n            .runbookUrl(\"https://www.example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:synthetics:AlertCondition\n    properties:\n      policyId: ${newrelic_alert_policy.foo.id}\n      monitorId: ${newrelic_synthetics_monitor.foo.id}\n      runbookUrl: https://www.example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Tags\n\nManage synthetics alert condition tags with `newrelic.EntityTags`. For up-to-date documentation about the tagging resource, please check newrelic.EntityTags\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooMonitor = new newrelic.synthetics.Monitor(\"fooMonitor\", {\n    status: \"ENABLED\",\n    period: \"EVERY_MINUTE\",\n    uri: \"https://www.one.newrelic.com\",\n    type: \"SIMPLE\",\n    locationsPublics: [\"AP_EAST_1\"],\n    customHeaders: [{\n        name: \"some_name\",\n        value: \"some_value\",\n    }],\n    treatRedirectAsFailure: true,\n    validationString: \"success\",\n    bypassHeadRequest: true,\n    verifySsl: true,\n    tags: [{\n        key: \"some_key\",\n        values: [\"some_value\"],\n    }],\n});\nconst fooAlertCondition = new newrelic.synthetics.AlertCondition(\"fooAlertCondition\", {\n    policyId: fooAlertPolicy.id,\n    monitorId: fooMonitor.id,\n    runbookUrl: \"https://www.example.com\",\n});\nconst myConditionEntityTags = new newrelic.EntityTags(\"myConditionEntityTags\", {\n    guid: fooAlertCondition.entityGuid,\n    tags: [\n        {\n            key: \"my-key\",\n            values: [\n                \"my-value\",\n                \"my-other-value\",\n            ],\n        },\n        {\n            key: \"my-key-2\",\n            values: [\"my-value-2\"],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_monitor = newrelic.synthetics.Monitor(\"fooMonitor\",\n    status=\"ENABLED\",\n    period=\"EVERY_MINUTE\",\n    uri=\"https://www.one.newrelic.com\",\n    type=\"SIMPLE\",\n    locations_publics=[\"AP_EAST_1\"],\n    custom_headers=[newrelic.synthetics.MonitorCustomHeaderArgs(\n        name=\"some_name\",\n        value=\"some_value\",\n    )],\n    treat_redirect_as_failure=True,\n    validation_string=\"success\",\n    bypass_head_request=True,\n    verify_ssl=True,\n    tags=[newrelic.synthetics.MonitorTagArgs(\n        key=\"some_key\",\n        values=[\"some_value\"],\n    )])\nfoo_alert_condition = newrelic.synthetics.AlertCondition(\"fooAlertCondition\",\n    policy_id=foo_alert_policy.id,\n    monitor_id=foo_monitor.id,\n    runbook_url=\"https://www.example.com\")\nmy_condition_entity_tags = newrelic.EntityTags(\"myConditionEntityTags\",\n    guid=foo_alert_condition.entity_guid,\n    tags=[\n        newrelic.EntityTagsTagArgs(\n            key=\"my-key\",\n            values=[\n                \"my-value\",\n                \"my-other-value\",\n            ],\n        ),\n        newrelic.EntityTagsTagArgs(\n            key=\"my-key-2\",\n            values=[\"my-value-2\"],\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\");\n\n    var fooMonitor = new NewRelic.Synthetics.Monitor(\"fooMonitor\", new()\n    {\n        Status = \"ENABLED\",\n        Period = \"EVERY_MINUTE\",\n        Uri = \"https://www.one.newrelic.com\",\n        Type = \"SIMPLE\",\n        LocationsPublics = new[]\n        {\n            \"AP_EAST_1\",\n        },\n        CustomHeaders = new[]\n        {\n            new NewRelic.Synthetics.Inputs.MonitorCustomHeaderArgs\n            {\n                Name = \"some_name\",\n                Value = \"some_value\",\n            },\n        },\n        TreatRedirectAsFailure = true,\n        ValidationString = \"success\",\n        BypassHeadRequest = true,\n        VerifySsl = true,\n        Tags = new[]\n        {\n            new NewRelic.Synthetics.Inputs.MonitorTagArgs\n            {\n                Key = \"some_key\",\n                Values = new[]\n                {\n                    \"some_value\",\n                },\n            },\n        },\n    });\n\n    var fooAlertCondition = new NewRelic.Synthetics.AlertCondition(\"fooAlertCondition\", new()\n    {\n        PolicyId = fooAlertPolicy.Id,\n        MonitorId = fooMonitor.Id,\n        RunbookUrl = \"https://www.example.com\",\n    });\n\n    var myConditionEntityTags = new NewRelic.EntityTags(\"myConditionEntityTags\", new()\n    {\n        Guid = fooAlertCondition.EntityGuid,\n        Tags = new[]\n        {\n            new NewRelic.Inputs.EntityTagsTagArgs\n            {\n                Key = \"my-key\",\n                Values = new[]\n                {\n                    \"my-value\",\n                    \"my-other-value\",\n                },\n            },\n            new NewRelic.Inputs.EntityTagsTagArgs\n            {\n                Key = \"my-key-2\",\n                Values = new[]\n                {\n                    \"my-value-2\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooMonitor, err := synthetics.NewMonitor(ctx, \"fooMonitor\", \u0026synthetics.MonitorArgs{\n\t\t\tStatus: pulumi.String(\"ENABLED\"),\n\t\t\tPeriod: pulumi.String(\"EVERY_MINUTE\"),\n\t\t\tUri:    pulumi.String(\"https://www.one.newrelic.com\"),\n\t\t\tType:   pulumi.String(\"SIMPLE\"),\n\t\t\tLocationsPublics: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"AP_EAST_1\"),\n\t\t\t},\n\t\t\tCustomHeaders: synthetics.MonitorCustomHeaderArray{\n\t\t\t\t\u0026synthetics.MonitorCustomHeaderArgs{\n\t\t\t\t\tName:  pulumi.String(\"some_name\"),\n\t\t\t\t\tValue: pulumi.String(\"some_value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTreatRedirectAsFailure: pulumi.Bool(true),\n\t\t\tValidationString:       pulumi.String(\"success\"),\n\t\t\tBypassHeadRequest:      pulumi.Bool(true),\n\t\t\tVerifySsl:              pulumi.Bool(true),\n\t\t\tTags: synthetics.MonitorTagArray{\n\t\t\t\t\u0026synthetics.MonitorTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"some_key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"some_value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooAlertCondition, err := synthetics.NewAlertCondition(ctx, \"fooAlertCondition\", \u0026synthetics.AlertConditionArgs{\n\t\t\tPolicyId:   fooAlertPolicy.ID(),\n\t\t\tMonitorId:  fooMonitor.ID(),\n\t\t\tRunbookUrl: pulumi.String(\"https://www.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewEntityTags(ctx, \"myConditionEntityTags\", \u0026newrelic.EntityTagsArgs{\n\t\t\tGuid: fooAlertCondition.EntityGuid,\n\t\t\tTags: newrelic.EntityTagsTagArray{\n\t\t\t\t\u0026newrelic.EntityTagsTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"my-key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"my-value\"),\n\t\t\t\t\t\tpulumi.String(\"my-other-value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.EntityTagsTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"my-key-2\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"my-value-2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.synthetics.Monitor;\nimport com.pulumi.newrelic.synthetics.MonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.MonitorCustomHeaderArgs;\nimport com.pulumi.newrelic.synthetics.inputs.MonitorTagArgs;\nimport com.pulumi.newrelic.synthetics.AlertCondition;\nimport com.pulumi.newrelic.synthetics.AlertConditionArgs;\nimport com.pulumi.newrelic.EntityTags;\nimport com.pulumi.newrelic.EntityTagsArgs;\nimport com.pulumi.newrelic.inputs.EntityTagsTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooAlertPolicy = new AlertPolicy(\"fooAlertPolicy\");\n\n        var fooMonitor = new Monitor(\"fooMonitor\", MonitorArgs.builder()        \n            .status(\"ENABLED\")\n            .period(\"EVERY_MINUTE\")\n            .uri(\"https://www.one.newrelic.com\")\n            .type(\"SIMPLE\")\n            .locationsPublics(\"AP_EAST_1\")\n            .customHeaders(MonitorCustomHeaderArgs.builder()\n                .name(\"some_name\")\n                .value(\"some_value\")\n                .build())\n            .treatRedirectAsFailure(true)\n            .validationString(\"success\")\n            .bypassHeadRequest(true)\n            .verifySsl(true)\n            .tags(MonitorTagArgs.builder()\n                .key(\"some_key\")\n                .values(\"some_value\")\n                .build())\n            .build());\n\n        var fooAlertCondition = new AlertCondition(\"fooAlertCondition\", AlertConditionArgs.builder()        \n            .policyId(fooAlertPolicy.id())\n            .monitorId(fooMonitor.id())\n            .runbookUrl(\"https://www.example.com\")\n            .build());\n\n        var myConditionEntityTags = new EntityTags(\"myConditionEntityTags\", EntityTagsArgs.builder()        \n            .guid(fooAlertCondition.entityGuid())\n            .tags(            \n                EntityTagsTagArgs.builder()\n                    .key(\"my-key\")\n                    .values(                    \n                        \"my-value\",\n                        \"my-other-value\")\n                    .build(),\n                EntityTagsTagArgs.builder()\n                    .key(\"my-key-2\")\n                    .values(\"my-value-2\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooAlertPolicy:\n    type: newrelic:AlertPolicy\n  fooMonitor:\n    type: newrelic:synthetics:Monitor\n    properties:\n      status: ENABLED\n      period: EVERY_MINUTE\n      uri: https://www.one.newrelic.com\n      type: SIMPLE\n      locationsPublics:\n        - AP_EAST_1\n      customHeaders:\n        - name: some_name\n          value: some_value\n      treatRedirectAsFailure: true\n      validationString: success\n      bypassHeadRequest: true\n      verifySsl: true\n      tags:\n        - key: some_key\n          values:\n            - some_value\n  fooAlertCondition:\n    type: newrelic:synthetics:AlertCondition\n    properties:\n      policyId: ${fooAlertPolicy.id}\n      monitorId: ${fooMonitor.id}\n      runbookUrl: https://www.example.com\n  myConditionEntityTags:\n    type: newrelic:EntityTags\n    properties:\n      guid: ${fooAlertCondition.entityGuid}\n      tags:\n        - key: my-key\n          values:\n            - my-value\n            - my-other-value\n        - key: my-key-2\n          values:\n            - my-value-2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSynthetics alert conditions can be imported using a composite ID of `\u003cpolicy_id\u003e:\u003ccondition_id\u003e`, e.g.\n\n```sh\n$ pulumi import newrelic:synthetics/alertCondition:AlertCondition main 12345:67890\n```\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Set whether to enable the alert condition. Defaults to `true`.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n"
                },
                "entityGuid": {
                    "type": "string",
                    "description": "The unique entity identifier of the condition in New Relic.\n"
                },
                "monitorId": {
                    "type": "string",
                    "description": "The GUID of the Synthetics monitor to be referenced in the alert condition.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of this condition.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                }
            },
            "required": [
                "entityGuid",
                "monitorId",
                "name",
                "policyId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Set whether to enable the alert condition. Defaults to `true`.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n"
                },
                "monitorId": {
                    "type": "string",
                    "description": "The GUID of the Synthetics monitor to be referenced in the alert condition.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of this condition.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n",
                    "willReplaceOnChanges": true
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                }
            },
            "requiredInputs": [
                "monitorId",
                "policyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertCondition resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Set whether to enable the alert condition. Defaults to `true`.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n"
                    },
                    "entityGuid": {
                        "type": "string",
                        "description": "The unique entity identifier of the condition in New Relic.\n"
                    },
                    "monitorId": {
                        "type": "string",
                        "description": "The GUID of the Synthetics monitor to be referenced in the alert condition.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of this condition.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the policy where this condition should be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "runbookUrl": {
                        "type": "string",
                        "description": "Runbook URL to display in notifications.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/brokenLinksMonitor:BrokenLinksMonitor": {
            "description": "Use this resource to create, update, and delete a Synthetics Broken Links monitor in New Relic.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst monitor = new newrelic.synthetics.BrokenLinksMonitor(\"monitor\", {\n    locationsPublics: [\"AP_SOUTH_1\"],\n    period: \"EVERY_6_HOURS\",\n    status: \"ENABLED\",\n    tags: [{\n        key: \"some_key\",\n        values: [\"some_value\"],\n    }],\n    uri: \"https://www.one.example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nmonitor = newrelic.synthetics.BrokenLinksMonitor(\"monitor\",\n    locations_publics=[\"AP_SOUTH_1\"],\n    period=\"EVERY_6_HOURS\",\n    status=\"ENABLED\",\n    tags=[newrelic.synthetics.BrokenLinksMonitorTagArgs(\n        key=\"some_key\",\n        values=[\"some_value\"],\n    )],\n    uri=\"https://www.one.example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var monitor = new NewRelic.Synthetics.BrokenLinksMonitor(\"monitor\", new()\n    {\n        LocationsPublics = new[]\n        {\n            \"AP_SOUTH_1\",\n        },\n        Period = \"EVERY_6_HOURS\",\n        Status = \"ENABLED\",\n        Tags = new[]\n        {\n            new NewRelic.Synthetics.Inputs.BrokenLinksMonitorTagArgs\n            {\n                Key = \"some_key\",\n                Values = new[]\n                {\n                    \"some_value\",\n                },\n            },\n        },\n        Uri = \"https://www.one.example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.NewBrokenLinksMonitor(ctx, \"monitor\", \u0026synthetics.BrokenLinksMonitorArgs{\n\t\t\tLocationsPublics: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"AP_SOUTH_1\"),\n\t\t\t},\n\t\t\tPeriod: pulumi.String(\"EVERY_6_HOURS\"),\n\t\t\tStatus: pulumi.String(\"ENABLED\"),\n\t\t\tTags: synthetics.BrokenLinksMonitorTagArray{\n\t\t\t\t\u0026synthetics.BrokenLinksMonitorTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"some_key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"some_value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tUri: pulumi.String(\"https://www.one.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.BrokenLinksMonitor;\nimport com.pulumi.newrelic.synthetics.BrokenLinksMonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.BrokenLinksMonitorTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var monitor = new BrokenLinksMonitor(\"monitor\", BrokenLinksMonitorArgs.builder()        \n            .locationsPublics(\"AP_SOUTH_1\")\n            .period(\"EVERY_6_HOURS\")\n            .status(\"ENABLED\")\n            .tags(BrokenLinksMonitorTagArgs.builder()\n                .key(\"some_key\")\n                .values(\"some_value\")\n                .build())\n            .uri(\"https://www.one.example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  monitor:\n    type: newrelic:synthetics:BrokenLinksMonitor\n    properties:\n      locationsPublics:\n        - AP_SOUTH_1\n      period: EVERY_6_HOURS\n      status: ENABLED\n      tags:\n        - key: some_key\n          values:\n            - some_value\n      uri: https://www.one.example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\nSee additional examples.\n\n## Additional Examples\n\n### Create a monitor with a private location\n\nThe below example shows how you can define a private location and attach it to a monitor.\n\n\u003e **NOTE:** It can take up to 10 minutes for a private location to become available.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst location = new newrelic.synthetics.PrivateLocation(\"location\", {\n    description: \"Test Description\",\n    verifiedScriptExecution: false,\n});\nconst monitor = new newrelic.synthetics.BrokenLinksMonitor(\"monitor\", {\n    uri: \"https://www.one.example.com\",\n    locationsPrivates: [location.id],\n    period: \"EVERY_6_HOURS\",\n    status: \"ENABLED\",\n    tags: [{\n        key: \"some_key\",\n        values: [\"some_value\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nlocation = newrelic.synthetics.PrivateLocation(\"location\",\n    description=\"Test Description\",\n    verified_script_execution=False)\nmonitor = newrelic.synthetics.BrokenLinksMonitor(\"monitor\",\n    uri=\"https://www.one.example.com\",\n    locations_privates=[location.id],\n    period=\"EVERY_6_HOURS\",\n    status=\"ENABLED\",\n    tags=[newrelic.synthetics.BrokenLinksMonitorTagArgs(\n        key=\"some_key\",\n        values=[\"some_value\"],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var location = new NewRelic.Synthetics.PrivateLocation(\"location\", new()\n    {\n        Description = \"Test Description\",\n        VerifiedScriptExecution = false,\n    });\n\n    var monitor = new NewRelic.Synthetics.BrokenLinksMonitor(\"monitor\", new()\n    {\n        Uri = \"https://www.one.example.com\",\n        LocationsPrivates = new[]\n        {\n            location.Id,\n        },\n        Period = \"EVERY_6_HOURS\",\n        Status = \"ENABLED\",\n        Tags = new[]\n        {\n            new NewRelic.Synthetics.Inputs.BrokenLinksMonitorTagArgs\n            {\n                Key = \"some_key\",\n                Values = new[]\n                {\n                    \"some_value\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlocation, err := synthetics.NewPrivateLocation(ctx, \"location\", \u0026synthetics.PrivateLocationArgs{\n\t\t\tDescription:             pulumi.String(\"Test Description\"),\n\t\t\tVerifiedScriptExecution: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = synthetics.NewBrokenLinksMonitor(ctx, \"monitor\", \u0026synthetics.BrokenLinksMonitorArgs{\n\t\t\tUri: pulumi.String(\"https://www.one.example.com\"),\n\t\t\tLocationsPrivates: pulumi.StringArray{\n\t\t\t\tlocation.ID(),\n\t\t\t},\n\t\t\tPeriod: pulumi.String(\"EVERY_6_HOURS\"),\n\t\t\tStatus: pulumi.String(\"ENABLED\"),\n\t\t\tTags: synthetics.BrokenLinksMonitorTagArray{\n\t\t\t\t\u0026synthetics.BrokenLinksMonitorTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"some_key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"some_value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.PrivateLocation;\nimport com.pulumi.newrelic.synthetics.PrivateLocationArgs;\nimport com.pulumi.newrelic.synthetics.BrokenLinksMonitor;\nimport com.pulumi.newrelic.synthetics.BrokenLinksMonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.BrokenLinksMonitorTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var location = new PrivateLocation(\"location\", PrivateLocationArgs.builder()        \n            .description(\"Test Description\")\n            .verifiedScriptExecution(false)\n            .build());\n\n        var monitor = new BrokenLinksMonitor(\"monitor\", BrokenLinksMonitorArgs.builder()        \n            .uri(\"https://www.one.example.com\")\n            .locationsPrivates(location.id())\n            .period(\"EVERY_6_HOURS\")\n            .status(\"ENABLED\")\n            .tags(BrokenLinksMonitorTagArgs.builder()\n                .key(\"some_key\")\n                .values(\"some_value\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  location:\n    type: newrelic:synthetics:PrivateLocation\n    properties:\n      description: Test Description\n      verifiedScriptExecution: false\n  monitor:\n    type: newrelic:synthetics:BrokenLinksMonitor\n    properties:\n      uri: https://www.one.example.com\n      locationsPrivates:\n        - ${location.id}\n      period: EVERY_6_HOURS\n      status: ENABLED\n      tags:\n        - key: some_key\n          values:\n            - some_value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSynthetics broken links monitor scripts can be imported using the `guid`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:synthetics/brokenLinksMonitor:BrokenLinksMonitor monitor \u003cguid\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account in which the Synthetics monitor will be created.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The unique entity identifier of the monitor in New Relic.\n"
                },
                "locationsPrivates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either `locations_public` or `locations_private` is required.\n"
                },
                "locationsPublics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locations_public` or `location_private` is required.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the monitor.\n"
                },
                "period": {
                    "type": "string",
                    "description": "The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.\n"
                },
                "periodInMinutes": {
                    "type": "integer",
                    "description": "The interval in minutes at which Synthetic monitor should run.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The monitor status (i.e. ENABLED, MUTED, DISABLED). Note: The 'MUTED' status is now deprecated, and support for this\nvalue will soon be removed from the Terraform Provider in an upcoming release. It is highly recommended for users to\nrefrain from using this value and shift to alternatives.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/BrokenLinksMonitorTag:BrokenLinksMonitorTag"
                    },
                    "description": "The tags that will be associated with the monitor. See Nested tag blocks below for details\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The URI the monitor runs against.\n"
                }
            },
            "required": [
                "accountId",
                "guid",
                "name",
                "period",
                "periodInMinutes",
                "status",
                "uri"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account in which the Synthetics monitor will be created.\n",
                    "willReplaceOnChanges": true
                },
                "locationsPrivates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either `locations_public` or `locations_private` is required.\n"
                },
                "locationsPublics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locations_public` or `location_private` is required.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the monitor.\n"
                },
                "period": {
                    "type": "string",
                    "description": "The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The monitor status (i.e. ENABLED, MUTED, DISABLED). Note: The 'MUTED' status is now deprecated, and support for this\nvalue will soon be removed from the Terraform Provider in an upcoming release. It is highly recommended for users to\nrefrain from using this value and shift to alternatives.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/BrokenLinksMonitorTag:BrokenLinksMonitorTag"
                    },
                    "description": "The tags that will be associated with the monitor. See Nested tag blocks below for details\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The URI the monitor runs against.\n"
                }
            },
            "requiredInputs": [
                "period",
                "status",
                "uri"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BrokenLinksMonitor resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account in which the Synthetics monitor will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "guid": {
                        "type": "string",
                        "description": "The unique entity identifier of the monitor in New Relic.\n"
                    },
                    "locationsPrivates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either `locations_public` or `locations_private` is required.\n"
                    },
                    "locationsPublics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locations_public` or `location_private` is required.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the monitor.\n"
                    },
                    "period": {
                        "type": "string",
                        "description": "The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.\n"
                    },
                    "periodInMinutes": {
                        "type": "integer",
                        "description": "The interval in minutes at which Synthetic monitor should run.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The monitor status (i.e. ENABLED, MUTED, DISABLED). Note: The 'MUTED' status is now deprecated, and support for this\nvalue will soon be removed from the Terraform Provider in an upcoming release. It is highly recommended for users to\nrefrain from using this value and shift to alternatives.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:synthetics/BrokenLinksMonitorTag:BrokenLinksMonitorTag"
                        },
                        "description": "The tags that will be associated with the monitor. See Nested tag blocks below for details\n"
                    },
                    "uri": {
                        "type": "string",
                        "description": "The URI the monitor runs against.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/certCheckMonitor:CertCheckMonitor": {
            "description": "Use this resource to create, update, and delete a Synthetics Certificate Check monitor in New Relic.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst cert_check_monitor = new newrelic.synthetics.CertCheckMonitor(\"cert-check-monitor\", {\n    certificateExpiration: 10,\n    domain: \"www.example.com\",\n    locationsPublics: [\"AP_SOUTH_1\"],\n    period: \"EVERY_6_HOURS\",\n    status: \"ENABLED\",\n    tags: [{\n        key: \"some_key\",\n        values: [\"some_value\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\ncert_check_monitor = newrelic.synthetics.CertCheckMonitor(\"cert-check-monitor\",\n    certificate_expiration=10,\n    domain=\"www.example.com\",\n    locations_publics=[\"AP_SOUTH_1\"],\n    period=\"EVERY_6_HOURS\",\n    status=\"ENABLED\",\n    tags=[newrelic.synthetics.CertCheckMonitorTagArgs(\n        key=\"some_key\",\n        values=[\"some_value\"],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var cert_check_monitor = new NewRelic.Synthetics.CertCheckMonitor(\"cert-check-monitor\", new()\n    {\n        CertificateExpiration = 10,\n        Domain = \"www.example.com\",\n        LocationsPublics = new[]\n        {\n            \"AP_SOUTH_1\",\n        },\n        Period = \"EVERY_6_HOURS\",\n        Status = \"ENABLED\",\n        Tags = new[]\n        {\n            new NewRelic.Synthetics.Inputs.CertCheckMonitorTagArgs\n            {\n                Key = \"some_key\",\n                Values = new[]\n                {\n                    \"some_value\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.NewCertCheckMonitor(ctx, \"cert-check-monitor\", \u0026synthetics.CertCheckMonitorArgs{\n\t\t\tCertificateExpiration: pulumi.Int(10),\n\t\t\tDomain:                pulumi.String(\"www.example.com\"),\n\t\t\tLocationsPublics: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"AP_SOUTH_1\"),\n\t\t\t},\n\t\t\tPeriod: pulumi.String(\"EVERY_6_HOURS\"),\n\t\t\tStatus: pulumi.String(\"ENABLED\"),\n\t\t\tTags: synthetics.CertCheckMonitorTagArray{\n\t\t\t\t\u0026synthetics.CertCheckMonitorTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"some_key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"some_value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.CertCheckMonitor;\nimport com.pulumi.newrelic.synthetics.CertCheckMonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.CertCheckMonitorTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var cert_check_monitor = new CertCheckMonitor(\"cert-check-monitor\", CertCheckMonitorArgs.builder()        \n            .certificateExpiration(\"10\")\n            .domain(\"www.example.com\")\n            .locationsPublics(\"AP_SOUTH_1\")\n            .period(\"EVERY_6_HOURS\")\n            .status(\"ENABLED\")\n            .tags(CertCheckMonitorTagArgs.builder()\n                .key(\"some_key\")\n                .values(\"some_value\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cert-check-monitor:\n    type: newrelic:synthetics:CertCheckMonitor\n    properties:\n      certificateExpiration: '10'\n      domain: www.example.com\n      locationsPublics:\n        - AP_SOUTH_1\n      period: EVERY_6_HOURS\n      status: ENABLED\n      tags:\n        - key: some_key\n          values:\n            - some_value\n```\n\u003c!--End PulumiCodeChooser --\u003e\nSee additional examples.\n\n## Additional Examples\n\n### Create a monitor with a private location\n\nThe below example shows how you can define a private location and attach it to a monitor. \n\n\u003e **NOTE:** It can take up to 10 minutes for a private location to become available.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst location = new newrelic.synthetics.PrivateLocation(\"location\", {\n    description: \"Test Description\",\n    verifiedScriptExecution: false,\n});\nconst monitor = new newrelic.synthetics.CertCheckMonitor(\"monitor\", {\n    domain: \"https://www.one.example.com\",\n    locationsPrivates: [location.id],\n    period: \"EVERY_6_HOURS\",\n    status: \"ENABLED\",\n    tags: [{\n        key: \"some_key\",\n        values: [\"some_value\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nlocation = newrelic.synthetics.PrivateLocation(\"location\",\n    description=\"Test Description\",\n    verified_script_execution=False)\nmonitor = newrelic.synthetics.CertCheckMonitor(\"monitor\",\n    domain=\"https://www.one.example.com\",\n    locations_privates=[location.id],\n    period=\"EVERY_6_HOURS\",\n    status=\"ENABLED\",\n    tags=[newrelic.synthetics.CertCheckMonitorTagArgs(\n        key=\"some_key\",\n        values=[\"some_value\"],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var location = new NewRelic.Synthetics.PrivateLocation(\"location\", new()\n    {\n        Description = \"Test Description\",\n        VerifiedScriptExecution = false,\n    });\n\n    var monitor = new NewRelic.Synthetics.CertCheckMonitor(\"monitor\", new()\n    {\n        Domain = \"https://www.one.example.com\",\n        LocationsPrivates = new[]\n        {\n            location.Id,\n        },\n        Period = \"EVERY_6_HOURS\",\n        Status = \"ENABLED\",\n        Tags = new[]\n        {\n            new NewRelic.Synthetics.Inputs.CertCheckMonitorTagArgs\n            {\n                Key = \"some_key\",\n                Values = new[]\n                {\n                    \"some_value\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlocation, err := synthetics.NewPrivateLocation(ctx, \"location\", \u0026synthetics.PrivateLocationArgs{\n\t\t\tDescription:             pulumi.String(\"Test Description\"),\n\t\t\tVerifiedScriptExecution: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = synthetics.NewCertCheckMonitor(ctx, \"monitor\", \u0026synthetics.CertCheckMonitorArgs{\n\t\t\tDomain: pulumi.String(\"https://www.one.example.com\"),\n\t\t\tLocationsPrivates: pulumi.StringArray{\n\t\t\t\tlocation.ID(),\n\t\t\t},\n\t\t\tPeriod: pulumi.String(\"EVERY_6_HOURS\"),\n\t\t\tStatus: pulumi.String(\"ENABLED\"),\n\t\t\tTags: synthetics.CertCheckMonitorTagArray{\n\t\t\t\t\u0026synthetics.CertCheckMonitorTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"some_key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"some_value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.PrivateLocation;\nimport com.pulumi.newrelic.synthetics.PrivateLocationArgs;\nimport com.pulumi.newrelic.synthetics.CertCheckMonitor;\nimport com.pulumi.newrelic.synthetics.CertCheckMonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.CertCheckMonitorTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var location = new PrivateLocation(\"location\", PrivateLocationArgs.builder()        \n            .description(\"Test Description\")\n            .verifiedScriptExecution(false)\n            .build());\n\n        var monitor = new CertCheckMonitor(\"monitor\", CertCheckMonitorArgs.builder()        \n            .domain(\"https://www.one.example.com\")\n            .locationsPrivates(location.id())\n            .period(\"EVERY_6_HOURS\")\n            .status(\"ENABLED\")\n            .tags(CertCheckMonitorTagArgs.builder()\n                .key(\"some_key\")\n                .values(\"some_value\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  location:\n    type: newrelic:synthetics:PrivateLocation\n    properties:\n      description: Test Description\n      verifiedScriptExecution: false\n  monitor:\n    type: newrelic:synthetics:CertCheckMonitor\n    properties:\n      domain: https://www.one.example.com\n      locationsPrivates:\n        - ${location.id}\n      period: EVERY_6_HOURS\n      status: ENABLED\n      tags:\n        - key: some_key\n          values:\n            - some_value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSynthetics certificate check monitor scripts can be imported using the `guid`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:synthetics/certCheckMonitor:CertCheckMonitor monitor \u003cguid\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account in which the Synthetics monitor will be created.\n"
                },
                "certificateExpiration": {
                    "type": "integer",
                    "description": "The desired number of remaining days until the certificate expires to trigger a monitor failure.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the host that will have its certificate checked.\n"
                },
                "locationsPrivates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either `locations_public` or `locations_private` is required.\n"
                },
                "locationsPublics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locations_public` or `location_private` is required.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the monitor.\n"
                },
                "period": {
                    "type": "string",
                    "description": "The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.\n"
                },
                "periodInMinutes": {
                    "type": "integer",
                    "description": "The interval in minutes at which Synthetic monitor should run.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The monitor status (i.e. ENABLED, MUTED, DISABLED). Note: The 'MUTED' status is now deprecated, and support for this\nvalue will soon be removed from the Terraform Provider in an upcoming release. It is highly recommended for users to\nrefrain from using this value and shift to alternatives.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/CertCheckMonitorTag:CertCheckMonitorTag"
                    },
                    "description": "The tags that will be associated with the monitor. See Nested tag blocks below for details\n"
                }
            },
            "required": [
                "accountId",
                "certificateExpiration",
                "domain",
                "name",
                "period",
                "periodInMinutes",
                "status"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account in which the Synthetics monitor will be created.\n"
                },
                "certificateExpiration": {
                    "type": "integer",
                    "description": "The desired number of remaining days until the certificate expires to trigger a monitor failure.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the host that will have its certificate checked.\n"
                },
                "locationsPrivates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either `locations_public` or `locations_private` is required.\n"
                },
                "locationsPublics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locations_public` or `location_private` is required.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the monitor.\n"
                },
                "period": {
                    "type": "string",
                    "description": "The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The monitor status (i.e. ENABLED, MUTED, DISABLED). Note: The 'MUTED' status is now deprecated, and support for this\nvalue will soon be removed from the Terraform Provider in an upcoming release. It is highly recommended for users to\nrefrain from using this value and shift to alternatives.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/CertCheckMonitorTag:CertCheckMonitorTag"
                    },
                    "description": "The tags that will be associated with the monitor. See Nested tag blocks below for details\n"
                }
            },
            "requiredInputs": [
                "certificateExpiration",
                "domain",
                "period",
                "status"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CertCheckMonitor resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account in which the Synthetics monitor will be created.\n"
                    },
                    "certificateExpiration": {
                        "type": "integer",
                        "description": "The desired number of remaining days until the certificate expires to trigger a monitor failure.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain of the host that will have its certificate checked.\n"
                    },
                    "locationsPrivates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either `locations_public` or `locations_private` is required.\n"
                    },
                    "locationsPublics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locations_public` or `location_private` is required.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the monitor.\n"
                    },
                    "period": {
                        "type": "string",
                        "description": "The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.\n"
                    },
                    "periodInMinutes": {
                        "type": "integer",
                        "description": "The interval in minutes at which Synthetic monitor should run.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The monitor status (i.e. ENABLED, MUTED, DISABLED). Note: The 'MUTED' status is now deprecated, and support for this\nvalue will soon be removed from the Terraform Provider in an upcoming release. It is highly recommended for users to\nrefrain from using this value and shift to alternatives.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:synthetics/CertCheckMonitorTag:CertCheckMonitorTag"
                        },
                        "description": "The tags that will be associated with the monitor. See Nested tag blocks below for details\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/monitor:Monitor": {
            "description": "Use this resource to create, update, and delete a Simple or Browser Synthetics Monitor in New Relic.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst monitor = new newrelic.synthetics.Monitor(\"monitor\", {\n    bypassHeadRequest: true,\n    customHeaders: [{\n        name: \"some_name\",\n        value: \"some_value\",\n    }],\n    locationsPublics: [\"AP_SOUTH_1\"],\n    period: \"EVERY_MINUTE\",\n    status: \"ENABLED\",\n    tags: [{\n        key: \"some_key\",\n        values: [\"some_value\"],\n    }],\n    treatRedirectAsFailure: true,\n    type: \"SIMPLE\",\n    uri: \"https://www.one.newrelic.com\",\n    validationString: \"success\",\n    verifySsl: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nmonitor = newrelic.synthetics.Monitor(\"monitor\",\n    bypass_head_request=True,\n    custom_headers=[newrelic.synthetics.MonitorCustomHeaderArgs(\n        name=\"some_name\",\n        value=\"some_value\",\n    )],\n    locations_publics=[\"AP_SOUTH_1\"],\n    period=\"EVERY_MINUTE\",\n    status=\"ENABLED\",\n    tags=[newrelic.synthetics.MonitorTagArgs(\n        key=\"some_key\",\n        values=[\"some_value\"],\n    )],\n    treat_redirect_as_failure=True,\n    type=\"SIMPLE\",\n    uri=\"https://www.one.newrelic.com\",\n    validation_string=\"success\",\n    verify_ssl=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var monitor = new NewRelic.Synthetics.Monitor(\"monitor\", new()\n    {\n        BypassHeadRequest = true,\n        CustomHeaders = new[]\n        {\n            new NewRelic.Synthetics.Inputs.MonitorCustomHeaderArgs\n            {\n                Name = \"some_name\",\n                Value = \"some_value\",\n            },\n        },\n        LocationsPublics = new[]\n        {\n            \"AP_SOUTH_1\",\n        },\n        Period = \"EVERY_MINUTE\",\n        Status = \"ENABLED\",\n        Tags = new[]\n        {\n            new NewRelic.Synthetics.Inputs.MonitorTagArgs\n            {\n                Key = \"some_key\",\n                Values = new[]\n                {\n                    \"some_value\",\n                },\n            },\n        },\n        TreatRedirectAsFailure = true,\n        Type = \"SIMPLE\",\n        Uri = \"https://www.one.newrelic.com\",\n        ValidationString = \"success\",\n        VerifySsl = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.NewMonitor(ctx, \"monitor\", \u0026synthetics.MonitorArgs{\n\t\t\tBypassHeadRequest: pulumi.Bool(true),\n\t\t\tCustomHeaders: synthetics.MonitorCustomHeaderArray{\n\t\t\t\t\u0026synthetics.MonitorCustomHeaderArgs{\n\t\t\t\t\tName:  pulumi.String(\"some_name\"),\n\t\t\t\t\tValue: pulumi.String(\"some_value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tLocationsPublics: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"AP_SOUTH_1\"),\n\t\t\t},\n\t\t\tPeriod: pulumi.String(\"EVERY_MINUTE\"),\n\t\t\tStatus: pulumi.String(\"ENABLED\"),\n\t\t\tTags: synthetics.MonitorTagArray{\n\t\t\t\t\u0026synthetics.MonitorTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"some_key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"some_value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTreatRedirectAsFailure: pulumi.Bool(true),\n\t\t\tType:                   pulumi.String(\"SIMPLE\"),\n\t\t\tUri:                    pulumi.String(\"https://www.one.newrelic.com\"),\n\t\t\tValidationString:       pulumi.String(\"success\"),\n\t\t\tVerifySsl:              pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.Monitor;\nimport com.pulumi.newrelic.synthetics.MonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.MonitorCustomHeaderArgs;\nimport com.pulumi.newrelic.synthetics.inputs.MonitorTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var monitor = new Monitor(\"monitor\", MonitorArgs.builder()        \n            .bypassHeadRequest(true)\n            .customHeaders(MonitorCustomHeaderArgs.builder()\n                .name(\"some_name\")\n                .value(\"some_value\")\n                .build())\n            .locationsPublics(\"AP_SOUTH_1\")\n            .period(\"EVERY_MINUTE\")\n            .status(\"ENABLED\")\n            .tags(MonitorTagArgs.builder()\n                .key(\"some_key\")\n                .values(\"some_value\")\n                .build())\n            .treatRedirectAsFailure(true)\n            .type(\"SIMPLE\")\n            .uri(\"https://www.one.newrelic.com\")\n            .validationString(\"success\")\n            .verifySsl(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  monitor:\n    type: newrelic:synthetics:Monitor\n    properties:\n      bypassHeadRequest: true\n      customHeaders:\n        - name: some_name\n          value: some_value\n      locationsPublics:\n        - AP_SOUTH_1\n      period: EVERY_MINUTE\n      status: ENABLED\n      tags:\n        - key: some_key\n          values:\n            - some_value\n      treatRedirectAsFailure: true\n      type: SIMPLE\n      uri: https://www.one.newrelic.com\n      validationString: success\n      verifySsl: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n##### Type: `SIMPLE BROWSER`\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst monitor = new newrelic.synthetics.Monitor(\"monitor\", {\n    customHeaders: [{\n        name: \"some_name\",\n        value: \"some_value\",\n    }],\n    enableScreenshotOnFailureAndScript: true,\n    locationsPublics: [\"AP_SOUTH_1\"],\n    period: \"EVERY_MINUTE\",\n    status: \"ENABLED\",\n    tags: [{\n        key: \"some_key\",\n        values: [\"some_value\"],\n    }],\n    type: \"BROWSER\",\n    uri: \"https://www.one.newrelic.com\",\n    validationString: \"success\",\n    verifySsl: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nmonitor = newrelic.synthetics.Monitor(\"monitor\",\n    custom_headers=[newrelic.synthetics.MonitorCustomHeaderArgs(\n        name=\"some_name\",\n        value=\"some_value\",\n    )],\n    enable_screenshot_on_failure_and_script=True,\n    locations_publics=[\"AP_SOUTH_1\"],\n    period=\"EVERY_MINUTE\",\n    status=\"ENABLED\",\n    tags=[newrelic.synthetics.MonitorTagArgs(\n        key=\"some_key\",\n        values=[\"some_value\"],\n    )],\n    type=\"BROWSER\",\n    uri=\"https://www.one.newrelic.com\",\n    validation_string=\"success\",\n    verify_ssl=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var monitor = new NewRelic.Synthetics.Monitor(\"monitor\", new()\n    {\n        CustomHeaders = new[]\n        {\n            new NewRelic.Synthetics.Inputs.MonitorCustomHeaderArgs\n            {\n                Name = \"some_name\",\n                Value = \"some_value\",\n            },\n        },\n        EnableScreenshotOnFailureAndScript = true,\n        LocationsPublics = new[]\n        {\n            \"AP_SOUTH_1\",\n        },\n        Period = \"EVERY_MINUTE\",\n        Status = \"ENABLED\",\n        Tags = new[]\n        {\n            new NewRelic.Synthetics.Inputs.MonitorTagArgs\n            {\n                Key = \"some_key\",\n                Values = new[]\n                {\n                    \"some_value\",\n                },\n            },\n        },\n        Type = \"BROWSER\",\n        Uri = \"https://www.one.newrelic.com\",\n        ValidationString = \"success\",\n        VerifySsl = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.NewMonitor(ctx, \"monitor\", \u0026synthetics.MonitorArgs{\n\t\t\tCustomHeaders: synthetics.MonitorCustomHeaderArray{\n\t\t\t\t\u0026synthetics.MonitorCustomHeaderArgs{\n\t\t\t\t\tName:  pulumi.String(\"some_name\"),\n\t\t\t\t\tValue: pulumi.String(\"some_value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEnableScreenshotOnFailureAndScript: pulumi.Bool(true),\n\t\t\tLocationsPublics: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"AP_SOUTH_1\"),\n\t\t\t},\n\t\t\tPeriod: pulumi.String(\"EVERY_MINUTE\"),\n\t\t\tStatus: pulumi.String(\"ENABLED\"),\n\t\t\tTags: synthetics.MonitorTagArray{\n\t\t\t\t\u0026synthetics.MonitorTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"some_key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"some_value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tType:             pulumi.String(\"BROWSER\"),\n\t\t\tUri:              pulumi.String(\"https://www.one.newrelic.com\"),\n\t\t\tValidationString: pulumi.String(\"success\"),\n\t\t\tVerifySsl:        pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.Monitor;\nimport com.pulumi.newrelic.synthetics.MonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.MonitorCustomHeaderArgs;\nimport com.pulumi.newrelic.synthetics.inputs.MonitorTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var monitor = new Monitor(\"monitor\", MonitorArgs.builder()        \n            .customHeaders(MonitorCustomHeaderArgs.builder()\n                .name(\"some_name\")\n                .value(\"some_value\")\n                .build())\n            .enableScreenshotOnFailureAndScript(true)\n            .locationsPublics(\"AP_SOUTH_1\")\n            .period(\"EVERY_MINUTE\")\n            .status(\"ENABLED\")\n            .tags(MonitorTagArgs.builder()\n                .key(\"some_key\")\n                .values(\"some_value\")\n                .build())\n            .type(\"BROWSER\")\n            .uri(\"https://www.one.newrelic.com\")\n            .validationString(\"success\")\n            .verifySsl(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  monitor:\n    type: newrelic:synthetics:Monitor\n    properties:\n      customHeaders:\n        - name: some_name\n          value: some_value\n      enableScreenshotOnFailureAndScript: true\n      locationsPublics:\n        - AP_SOUTH_1\n      period: EVERY_MINUTE\n      status: ENABLED\n      tags:\n        - key: some_key\n          values:\n            - some_value\n      type: BROWSER\n      uri: https://www.one.newrelic.com\n      validationString: success\n      verifySsl: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\nSee additional examples.\n\n## Additional Examples\n\n### Create a monitor with a private location\n\nThe below example shows how you can define a private location and attach it to a monitor.\n\n\u003e **NOTE:** It can take up to 10 minutes for a private location to become available.\n\n##### Type: `SIMPLE`\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst location = new newrelic.synthetics.PrivateLocation(\"location\", {\n    description: \"Example private location\",\n    verifiedScriptExecution: false,\n});\nconst monitor = new newrelic.synthetics.Monitor(\"monitor\", {\n    status: \"ENABLED\",\n    period: \"EVERY_MINUTE\",\n    uri: \"https://www.one.newrelic.com\",\n    type: \"SIMPLE\",\n    locationsPrivates: [location.id],\n    customHeaders: [{\n        name: \"some_name\",\n        value: \"some_value\",\n    }],\n    treatRedirectAsFailure: true,\n    validationString: \"success\",\n    bypassHeadRequest: true,\n    verifySsl: true,\n    tags: [{\n        key: \"some_key\",\n        values: [\"some_value\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nlocation = newrelic.synthetics.PrivateLocation(\"location\",\n    description=\"Example private location\",\n    verified_script_execution=False)\nmonitor = newrelic.synthetics.Monitor(\"monitor\",\n    status=\"ENABLED\",\n    period=\"EVERY_MINUTE\",\n    uri=\"https://www.one.newrelic.com\",\n    type=\"SIMPLE\",\n    locations_privates=[location.id],\n    custom_headers=[newrelic.synthetics.MonitorCustomHeaderArgs(\n        name=\"some_name\",\n        value=\"some_value\",\n    )],\n    treat_redirect_as_failure=True,\n    validation_string=\"success\",\n    bypass_head_request=True,\n    verify_ssl=True,\n    tags=[newrelic.synthetics.MonitorTagArgs(\n        key=\"some_key\",\n        values=[\"some_value\"],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var location = new NewRelic.Synthetics.PrivateLocation(\"location\", new()\n    {\n        Description = \"Example private location\",\n        VerifiedScriptExecution = false,\n    });\n\n    var monitor = new NewRelic.Synthetics.Monitor(\"monitor\", new()\n    {\n        Status = \"ENABLED\",\n        Period = \"EVERY_MINUTE\",\n        Uri = \"https://www.one.newrelic.com\",\n        Type = \"SIMPLE\",\n        LocationsPrivates = new[]\n        {\n            location.Id,\n        },\n        CustomHeaders = new[]\n        {\n            new NewRelic.Synthetics.Inputs.MonitorCustomHeaderArgs\n            {\n                Name = \"some_name\",\n                Value = \"some_value\",\n            },\n        },\n        TreatRedirectAsFailure = true,\n        ValidationString = \"success\",\n        BypassHeadRequest = true,\n        VerifySsl = true,\n        Tags = new[]\n        {\n            new NewRelic.Synthetics.Inputs.MonitorTagArgs\n            {\n                Key = \"some_key\",\n                Values = new[]\n                {\n                    \"some_value\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlocation, err := synthetics.NewPrivateLocation(ctx, \"location\", \u0026synthetics.PrivateLocationArgs{\n\t\t\tDescription:             pulumi.String(\"Example private location\"),\n\t\t\tVerifiedScriptExecution: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = synthetics.NewMonitor(ctx, \"monitor\", \u0026synthetics.MonitorArgs{\n\t\t\tStatus: pulumi.String(\"ENABLED\"),\n\t\t\tPeriod: pulumi.String(\"EVERY_MINUTE\"),\n\t\t\tUri:    pulumi.String(\"https://www.one.newrelic.com\"),\n\t\t\tType:   pulumi.String(\"SIMPLE\"),\n\t\t\tLocationsPrivates: pulumi.StringArray{\n\t\t\t\tlocation.ID(),\n\t\t\t},\n\t\t\tCustomHeaders: synthetics.MonitorCustomHeaderArray{\n\t\t\t\t\u0026synthetics.MonitorCustomHeaderArgs{\n\t\t\t\t\tName:  pulumi.String(\"some_name\"),\n\t\t\t\t\tValue: pulumi.String(\"some_value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTreatRedirectAsFailure: pulumi.Bool(true),\n\t\t\tValidationString:       pulumi.String(\"success\"),\n\t\t\tBypassHeadRequest:      pulumi.Bool(true),\n\t\t\tVerifySsl:              pulumi.Bool(true),\n\t\t\tTags: synthetics.MonitorTagArray{\n\t\t\t\t\u0026synthetics.MonitorTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"some_key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"some_value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.PrivateLocation;\nimport com.pulumi.newrelic.synthetics.PrivateLocationArgs;\nimport com.pulumi.newrelic.synthetics.Monitor;\nimport com.pulumi.newrelic.synthetics.MonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.MonitorCustomHeaderArgs;\nimport com.pulumi.newrelic.synthetics.inputs.MonitorTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var location = new PrivateLocation(\"location\", PrivateLocationArgs.builder()        \n            .description(\"Example private location\")\n            .verifiedScriptExecution(false)\n            .build());\n\n        var monitor = new Monitor(\"monitor\", MonitorArgs.builder()        \n            .status(\"ENABLED\")\n            .period(\"EVERY_MINUTE\")\n            .uri(\"https://www.one.newrelic.com\")\n            .type(\"SIMPLE\")\n            .locationsPrivates(location.id())\n            .customHeaders(MonitorCustomHeaderArgs.builder()\n                .name(\"some_name\")\n                .value(\"some_value\")\n                .build())\n            .treatRedirectAsFailure(true)\n            .validationString(\"success\")\n            .bypassHeadRequest(true)\n            .verifySsl(true)\n            .tags(MonitorTagArgs.builder()\n                .key(\"some_key\")\n                .values(\"some_value\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  location:\n    type: newrelic:synthetics:PrivateLocation\n    properties:\n      description: Example private location\n      verifiedScriptExecution: false\n  monitor:\n    type: newrelic:synthetics:Monitor\n    properties:\n      status: ENABLED\n      period: EVERY_MINUTE\n      uri: https://www.one.newrelic.com\n      type: SIMPLE\n      locationsPrivates:\n        - ${location.id}\n      customHeaders:\n        - name: some_name\n          value: some_value\n      treatRedirectAsFailure: true\n      validationString: success\n      bypassHeadRequest: true\n      verifySsl: true\n      tags:\n        - key: some_key\n          values:\n            - some_value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n##### Type: `BROWSER`\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst location = new newrelic.synthetics.PrivateLocation(\"location\", {\n    description: \"Example private location\",\n    verifiedScriptExecution: false,\n});\nconst monitor = new newrelic.synthetics.Monitor(\"monitor\", {\n    status: \"ENABLED\",\n    type: \"BROWSER\",\n    uri: \"https://www.one.newrelic.com\",\n    period: \"EVERY_MINUTE\",\n    locationsPrivates: [location.id],\n    customHeaders: [{\n        name: \"some_name\",\n        value: \"some_value\",\n    }],\n    enableScreenshotOnFailureAndScript: true,\n    validationString: \"success\",\n    verifySsl: true,\n    runtimeTypeVersion: \"100\",\n    runtimeType: \"CHROME_BROWSER\",\n    scriptLanguage: \"JAVASCRIPT\",\n    tags: [{\n        key: \"some_key\",\n        values: [\"some_value\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nlocation = newrelic.synthetics.PrivateLocation(\"location\",\n    description=\"Example private location\",\n    verified_script_execution=False)\nmonitor = newrelic.synthetics.Monitor(\"monitor\",\n    status=\"ENABLED\",\n    type=\"BROWSER\",\n    uri=\"https://www.one.newrelic.com\",\n    period=\"EVERY_MINUTE\",\n    locations_privates=[location.id],\n    custom_headers=[newrelic.synthetics.MonitorCustomHeaderArgs(\n        name=\"some_name\",\n        value=\"some_value\",\n    )],\n    enable_screenshot_on_failure_and_script=True,\n    validation_string=\"success\",\n    verify_ssl=True,\n    runtime_type_version=\"100\",\n    runtime_type=\"CHROME_BROWSER\",\n    script_language=\"JAVASCRIPT\",\n    tags=[newrelic.synthetics.MonitorTagArgs(\n        key=\"some_key\",\n        values=[\"some_value\"],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var location = new NewRelic.Synthetics.PrivateLocation(\"location\", new()\n    {\n        Description = \"Example private location\",\n        VerifiedScriptExecution = false,\n    });\n\n    var monitor = new NewRelic.Synthetics.Monitor(\"monitor\", new()\n    {\n        Status = \"ENABLED\",\n        Type = \"BROWSER\",\n        Uri = \"https://www.one.newrelic.com\",\n        Period = \"EVERY_MINUTE\",\n        LocationsPrivates = new[]\n        {\n            location.Id,\n        },\n        CustomHeaders = new[]\n        {\n            new NewRelic.Synthetics.Inputs.MonitorCustomHeaderArgs\n            {\n                Name = \"some_name\",\n                Value = \"some_value\",\n            },\n        },\n        EnableScreenshotOnFailureAndScript = true,\n        ValidationString = \"success\",\n        VerifySsl = true,\n        RuntimeTypeVersion = \"100\",\n        RuntimeType = \"CHROME_BROWSER\",\n        ScriptLanguage = \"JAVASCRIPT\",\n        Tags = new[]\n        {\n            new NewRelic.Synthetics.Inputs.MonitorTagArgs\n            {\n                Key = \"some_key\",\n                Values = new[]\n                {\n                    \"some_value\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlocation, err := synthetics.NewPrivateLocation(ctx, \"location\", \u0026synthetics.PrivateLocationArgs{\n\t\t\tDescription:             pulumi.String(\"Example private location\"),\n\t\t\tVerifiedScriptExecution: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = synthetics.NewMonitor(ctx, \"monitor\", \u0026synthetics.MonitorArgs{\n\t\t\tStatus: pulumi.String(\"ENABLED\"),\n\t\t\tType:   pulumi.String(\"BROWSER\"),\n\t\t\tUri:    pulumi.String(\"https://www.one.newrelic.com\"),\n\t\t\tPeriod: pulumi.String(\"EVERY_MINUTE\"),\n\t\t\tLocationsPrivates: pulumi.StringArray{\n\t\t\t\tlocation.ID(),\n\t\t\t},\n\t\t\tCustomHeaders: synthetics.MonitorCustomHeaderArray{\n\t\t\t\t\u0026synthetics.MonitorCustomHeaderArgs{\n\t\t\t\t\tName:  pulumi.String(\"some_name\"),\n\t\t\t\t\tValue: pulumi.String(\"some_value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEnableScreenshotOnFailureAndScript: pulumi.Bool(true),\n\t\t\tValidationString:                   pulumi.String(\"success\"),\n\t\t\tVerifySsl:                          pulumi.Bool(true),\n\t\t\tRuntimeTypeVersion:                 pulumi.String(\"100\"),\n\t\t\tRuntimeType:                        pulumi.String(\"CHROME_BROWSER\"),\n\t\t\tScriptLanguage:                     pulumi.String(\"JAVASCRIPT\"),\n\t\t\tTags: synthetics.MonitorTagArray{\n\t\t\t\t\u0026synthetics.MonitorTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"some_key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"some_value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.PrivateLocation;\nimport com.pulumi.newrelic.synthetics.PrivateLocationArgs;\nimport com.pulumi.newrelic.synthetics.Monitor;\nimport com.pulumi.newrelic.synthetics.MonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.MonitorCustomHeaderArgs;\nimport com.pulumi.newrelic.synthetics.inputs.MonitorTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var location = new PrivateLocation(\"location\", PrivateLocationArgs.builder()        \n            .description(\"Example private location\")\n            .verifiedScriptExecution(false)\n            .build());\n\n        var monitor = new Monitor(\"monitor\", MonitorArgs.builder()        \n            .status(\"ENABLED\")\n            .type(\"BROWSER\")\n            .uri(\"https://www.one.newrelic.com\")\n            .period(\"EVERY_MINUTE\")\n            .locationsPrivates(location.id())\n            .customHeaders(MonitorCustomHeaderArgs.builder()\n                .name(\"some_name\")\n                .value(\"some_value\")\n                .build())\n            .enableScreenshotOnFailureAndScript(true)\n            .validationString(\"success\")\n            .verifySsl(true)\n            .runtimeTypeVersion(\"100\")\n            .runtimeType(\"CHROME_BROWSER\")\n            .scriptLanguage(\"JAVASCRIPT\")\n            .tags(MonitorTagArgs.builder()\n                .key(\"some_key\")\n                .values(\"some_value\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  location:\n    type: newrelic:synthetics:PrivateLocation\n    properties:\n      description: Example private location\n      verifiedScriptExecution: false\n  monitor:\n    type: newrelic:synthetics:Monitor\n    properties:\n      status: ENABLED\n      type: BROWSER\n      uri: https://www.one.newrelic.com\n      period: EVERY_MINUTE\n      locationsPrivates:\n        - ${location.id}\n      customHeaders:\n        - name: some_name\n          value: some_value\n      enableScreenshotOnFailureAndScript: true\n      validationString: success\n      verifySsl: true\n      runtimeTypeVersion: '100'\n      runtimeType: CHROME_BROWSER\n      scriptLanguage: JAVASCRIPT\n      tags:\n        - key: some_key\n          values:\n            - some_value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSynthetics monitor can be imported using the `guid`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:synthetics/monitor:Monitor monitor \u003cguid\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account in which the Synthetics monitor will be created.\n"
                },
                "bypassHeadRequest": {
                    "type": "boolean",
                    "description": "Monitor should skip default HEAD request and instead use GET verb in check.\n\nThe `BROWSER` monitor type supports the following additional arguments:\n"
                },
                "customHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/MonitorCustomHeader:MonitorCustomHeader"
                    },
                    "description": "Custom headers to use in monitor job. See Nested custom_header blocks below for details.\n"
                },
                "deviceOrientation": {
                    "type": "string",
                    "description": "Device emulation orientation field. Valid values are `LANDSCAPE` and `PORTRAIT`.\n"
                },
                "deviceType": {
                    "type": "string",
                    "description": "Device emulation type field. Valid values are `MOBILE` and `TABLET`.\n"
                },
                "enableScreenshotOnFailureAndScript": {
                    "type": "boolean",
                    "description": "Capture a screenshot during job execution.\n"
                },
                "locationsPrivates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either `locations_public` or `locations_private` is required.\n"
                },
                "locationsPublics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locations_public` or `location_private` is required.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable identifier for the monitor.\n"
                },
                "period": {
                    "type": "string",
                    "description": "The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.\n"
                },
                "periodInMinutes": {
                    "type": "integer",
                    "description": "The interval in minutes at which Synthetic monitor should run.\n"
                },
                "runtimeType": {
                    "type": "string",
                    "description": "The runtime type that the monitor will run.\n"
                },
                "runtimeTypeVersion": {
                    "type": "string",
                    "description": "The runtime type that the monitor will run.\n"
                },
                "scriptLanguage": {
                    "type": "string",
                    "description": "The programing language that should execute the script.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The monitor status (i.e. ENABLED, MUTED, DISABLED). Note: The 'MUTED' status is now deprecated, and support for this\nvalue will soon be removed from the Terraform Provider in an upcoming release. It is highly recommended for users to\nrefrain from using this value and shift to alternatives.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/MonitorTag:MonitorTag"
                    },
                    "description": "The tags that will be associated with the monitor. See Nested tag blocks below for details.\n\nThe `SIMPLE` monitor type supports the following additional arguments:\n"
                },
                "treatRedirectAsFailure": {
                    "type": "boolean",
                    "description": "Categorize redirects during a monitor job as a failure.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The monitor type. Valid values are `SIMPLE` and `BROWSER`.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The URI the monitor runs against.\n"
                },
                "validationString": {
                    "type": "string",
                    "description": "Validation text for monitor to search for at given URI.\n"
                },
                "verifySsl": {
                    "type": "boolean",
                    "description": "Monitor should validate SSL certificate chain.\n"
                }
            },
            "required": [
                "accountId",
                "name",
                "period",
                "periodInMinutes",
                "status",
                "type"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account in which the Synthetics monitor will be created.\n"
                },
                "bypassHeadRequest": {
                    "type": "boolean",
                    "description": "Monitor should skip default HEAD request and instead use GET verb in check.\n\nThe `BROWSER` monitor type supports the following additional arguments:\n"
                },
                "customHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/MonitorCustomHeader:MonitorCustomHeader"
                    },
                    "description": "Custom headers to use in monitor job. See Nested custom_header blocks below for details.\n"
                },
                "deviceOrientation": {
                    "type": "string",
                    "description": "Device emulation orientation field. Valid values are `LANDSCAPE` and `PORTRAIT`.\n"
                },
                "deviceType": {
                    "type": "string",
                    "description": "Device emulation type field. Valid values are `MOBILE` and `TABLET`.\n"
                },
                "enableScreenshotOnFailureAndScript": {
                    "type": "boolean",
                    "description": "Capture a screenshot during job execution.\n"
                },
                "locationsPrivates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either `locations_public` or `locations_private` is required.\n"
                },
                "locationsPublics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locations_public` or `location_private` is required.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable identifier for the monitor.\n"
                },
                "period": {
                    "type": "string",
                    "description": "The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.\n"
                },
                "runtimeType": {
                    "type": "string",
                    "description": "The runtime type that the monitor will run.\n"
                },
                "runtimeTypeVersion": {
                    "type": "string",
                    "description": "The runtime type that the monitor will run.\n"
                },
                "scriptLanguage": {
                    "type": "string",
                    "description": "The programing language that should execute the script.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The monitor status (i.e. ENABLED, MUTED, DISABLED). Note: The 'MUTED' status is now deprecated, and support for this\nvalue will soon be removed from the Terraform Provider in an upcoming release. It is highly recommended for users to\nrefrain from using this value and shift to alternatives.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/MonitorTag:MonitorTag"
                    },
                    "description": "The tags that will be associated with the monitor. See Nested tag blocks below for details.\n\nThe `SIMPLE` monitor type supports the following additional arguments:\n"
                },
                "treatRedirectAsFailure": {
                    "type": "boolean",
                    "description": "Categorize redirects during a monitor job as a failure.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The monitor type. Valid values are `SIMPLE` and `BROWSER`.\n",
                    "willReplaceOnChanges": true
                },
                "uri": {
                    "type": "string",
                    "description": "The URI the monitor runs against.\n"
                },
                "validationString": {
                    "type": "string",
                    "description": "Validation text for monitor to search for at given URI.\n"
                },
                "verifySsl": {
                    "type": "boolean",
                    "description": "Monitor should validate SSL certificate chain.\n"
                }
            },
            "requiredInputs": [
                "status",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Monitor resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account in which the Synthetics monitor will be created.\n"
                    },
                    "bypassHeadRequest": {
                        "type": "boolean",
                        "description": "Monitor should skip default HEAD request and instead use GET verb in check.\n\nThe `BROWSER` monitor type supports the following additional arguments:\n"
                    },
                    "customHeaders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:synthetics/MonitorCustomHeader:MonitorCustomHeader"
                        },
                        "description": "Custom headers to use in monitor job. See Nested custom_header blocks below for details.\n"
                    },
                    "deviceOrientation": {
                        "type": "string",
                        "description": "Device emulation orientation field. Valid values are `LANDSCAPE` and `PORTRAIT`.\n"
                    },
                    "deviceType": {
                        "type": "string",
                        "description": "Device emulation type field. Valid values are `MOBILE` and `TABLET`.\n"
                    },
                    "enableScreenshotOnFailureAndScript": {
                        "type": "boolean",
                        "description": "Capture a screenshot during job execution.\n"
                    },
                    "locationsPrivates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either `locations_public` or `locations_private` is required.\n"
                    },
                    "locationsPublics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locations_public` or `location_private` is required.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human-readable identifier for the monitor.\n"
                    },
                    "period": {
                        "type": "string",
                        "description": "The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.\n"
                    },
                    "periodInMinutes": {
                        "type": "integer",
                        "description": "The interval in minutes at which Synthetic monitor should run.\n"
                    },
                    "runtimeType": {
                        "type": "string",
                        "description": "The runtime type that the monitor will run.\n"
                    },
                    "runtimeTypeVersion": {
                        "type": "string",
                        "description": "The runtime type that the monitor will run.\n"
                    },
                    "scriptLanguage": {
                        "type": "string",
                        "description": "The programing language that should execute the script.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The monitor status (i.e. ENABLED, MUTED, DISABLED). Note: The 'MUTED' status is now deprecated, and support for this\nvalue will soon be removed from the Terraform Provider in an upcoming release. It is highly recommended for users to\nrefrain from using this value and shift to alternatives.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:synthetics/MonitorTag:MonitorTag"
                        },
                        "description": "The tags that will be associated with the monitor. See Nested tag blocks below for details.\n\nThe `SIMPLE` monitor type supports the following additional arguments:\n"
                    },
                    "treatRedirectAsFailure": {
                        "type": "boolean",
                        "description": "Categorize redirects during a monitor job as a failure.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The monitor type. Valid values are `SIMPLE` and `BROWSER`.\n",
                        "willReplaceOnChanges": true
                    },
                    "uri": {
                        "type": "string",
                        "description": "The URI the monitor runs against.\n"
                    },
                    "validationString": {
                        "type": "string",
                        "description": "Validation text for monitor to search for at given URI.\n"
                    },
                    "verifySsl": {
                        "type": "boolean",
                        "description": "Monitor should validate SSL certificate chain.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/multiLocationAlertCondition:MultiLocationAlertCondition": {
            "description": "Use this resource to create, update, and delete a New Relic Synthetics Location Alerts.\n\n\u003e **NOTE:** This is a legacy resource. The newrelic.NrqlAlertCondition resource is preferred for configuring alerts conditions. In most cases feature parity can be achieved with a NRQL query. This condition type may be deprecated in the future.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst policy = new newrelic.AlertPolicy(\"policy\", {});\nconst monitor = new newrelic.synthetics.Monitor(\"monitor\", {\n    locationsPublics: [\"US_WEST_1\"],\n    period: \"EVERY_10_MINUTES\",\n    status: \"DISABLED\",\n    type: \"SIMPLE\",\n    uri: \"https://www.one.newrelic.com\",\n});\nconst example = new newrelic.synthetics.MultiLocationAlertCondition(\"example\", {\n    policyId: policy.id,\n    runbookUrl: \"https://example.com\",\n    enabled: true,\n    violationTimeLimitSeconds: 3600,\n    entities: [monitor.id],\n    critical: {\n        threshold: 2,\n    },\n    warning: {\n        threshold: 1,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\npolicy = newrelic.AlertPolicy(\"policy\")\nmonitor = newrelic.synthetics.Monitor(\"monitor\",\n    locations_publics=[\"US_WEST_1\"],\n    period=\"EVERY_10_MINUTES\",\n    status=\"DISABLED\",\n    type=\"SIMPLE\",\n    uri=\"https://www.one.newrelic.com\")\nexample = newrelic.synthetics.MultiLocationAlertCondition(\"example\",\n    policy_id=policy.id,\n    runbook_url=\"https://example.com\",\n    enabled=True,\n    violation_time_limit_seconds=3600,\n    entities=[monitor.id],\n    critical=newrelic.synthetics.MultiLocationAlertConditionCriticalArgs(\n        threshold=2,\n    ),\n    warning=newrelic.synthetics.MultiLocationAlertConditionWarningArgs(\n        threshold=1,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var policy = new NewRelic.AlertPolicy(\"policy\");\n\n    var monitor = new NewRelic.Synthetics.Monitor(\"monitor\", new()\n    {\n        LocationsPublics = new[]\n        {\n            \"US_WEST_1\",\n        },\n        Period = \"EVERY_10_MINUTES\",\n        Status = \"DISABLED\",\n        Type = \"SIMPLE\",\n        Uri = \"https://www.one.newrelic.com\",\n    });\n\n    var example = new NewRelic.Synthetics.MultiLocationAlertCondition(\"example\", new()\n    {\n        PolicyId = policy.Id,\n        RunbookUrl = \"https://example.com\",\n        Enabled = true,\n        ViolationTimeLimitSeconds = 3600,\n        Entities = new[]\n        {\n            monitor.Id,\n        },\n        Critical = new NewRelic.Synthetics.Inputs.MultiLocationAlertConditionCriticalArgs\n        {\n            Threshold = 2,\n        },\n        Warning = new NewRelic.Synthetics.Inputs.MultiLocationAlertConditionWarningArgs\n        {\n            Threshold = 1,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpolicy, err := newrelic.NewAlertPolicy(ctx, \"policy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmonitor, err := synthetics.NewMonitor(ctx, \"monitor\", \u0026synthetics.MonitorArgs{\n\t\t\tLocationsPublics: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"US_WEST_1\"),\n\t\t\t},\n\t\t\tPeriod: pulumi.String(\"EVERY_10_MINUTES\"),\n\t\t\tStatus: pulumi.String(\"DISABLED\"),\n\t\t\tType:   pulumi.String(\"SIMPLE\"),\n\t\t\tUri:    pulumi.String(\"https://www.one.newrelic.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = synthetics.NewMultiLocationAlertCondition(ctx, \"example\", \u0026synthetics.MultiLocationAlertConditionArgs{\n\t\t\tPolicyId:                  policy.ID(),\n\t\t\tRunbookUrl:                pulumi.String(\"https://example.com\"),\n\t\t\tEnabled:                   pulumi.Bool(true),\n\t\t\tViolationTimeLimitSeconds: pulumi.Int(3600),\n\t\t\tEntities: pulumi.StringArray{\n\t\t\t\tmonitor.ID(),\n\t\t\t},\n\t\t\tCritical: \u0026synthetics.MultiLocationAlertConditionCriticalArgs{\n\t\t\t\tThreshold: pulumi.Int(2),\n\t\t\t},\n\t\t\tWarning: \u0026synthetics.MultiLocationAlertConditionWarningArgs{\n\t\t\t\tThreshold: pulumi.Int(1),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.synthetics.Monitor;\nimport com.pulumi.newrelic.synthetics.MonitorArgs;\nimport com.pulumi.newrelic.synthetics.MultiLocationAlertCondition;\nimport com.pulumi.newrelic.synthetics.MultiLocationAlertConditionArgs;\nimport com.pulumi.newrelic.synthetics.inputs.MultiLocationAlertConditionCriticalArgs;\nimport com.pulumi.newrelic.synthetics.inputs.MultiLocationAlertConditionWarningArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var policy = new AlertPolicy(\"policy\");\n\n        var monitor = new Monitor(\"monitor\", MonitorArgs.builder()        \n            .locationsPublics(\"US_WEST_1\")\n            .period(\"EVERY_10_MINUTES\")\n            .status(\"DISABLED\")\n            .type(\"SIMPLE\")\n            .uri(\"https://www.one.newrelic.com\")\n            .build());\n\n        var example = new MultiLocationAlertCondition(\"example\", MultiLocationAlertConditionArgs.builder()        \n            .policyId(policy.id())\n            .runbookUrl(\"https://example.com\")\n            .enabled(true)\n            .violationTimeLimitSeconds(3600)\n            .entities(monitor.id())\n            .critical(MultiLocationAlertConditionCriticalArgs.builder()\n                .threshold(2)\n                .build())\n            .warning(MultiLocationAlertConditionWarningArgs.builder()\n                .threshold(1)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  policy:\n    type: newrelic:AlertPolicy\n  monitor:\n    type: newrelic:synthetics:Monitor\n    properties:\n      locationsPublics:\n        - US_WEST_1\n      period: EVERY_10_MINUTES\n      status: DISABLED\n      type: SIMPLE\n      uri: https://www.one.newrelic.com\n  example:\n    type: newrelic:synthetics:MultiLocationAlertCondition\n    properties:\n      policyId: ${policy.id}\n      runbookUrl: https://example.com\n      enabled: true\n      violationTimeLimitSeconds: 3600\n      entities:\n        - ${monitor.id}\n      critical:\n        threshold: 2\n      warning:\n        threshold: 1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n## Tags\n\nManage synthetics multilocation alert condition tags with `newrelic.EntityTags`. For up-to-date documentation about the tagging resource, please check newrelic.EntityTags\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooMonitor = new newrelic.synthetics.Monitor(\"fooMonitor\", {\n    status: \"ENABLED\",\n    period: \"EVERY_MINUTE\",\n    uri: \"https://www.one.newrelic.com\",\n    type: \"SIMPLE\",\n    locationsPublics: [\"AP_EAST_1\"],\n    customHeaders: [{\n        name: \"some_name\",\n        value: \"some_value\",\n    }],\n    treatRedirectAsFailure: true,\n    validationString: \"success\",\n    bypassHeadRequest: true,\n    verifySsl: true,\n    tags: [{\n        key: \"some_key\",\n        values: [\"some_value\"],\n    }],\n});\nconst fooMultiLocationAlertCondition = new newrelic.synthetics.MultiLocationAlertCondition(\"fooMultiLocationAlertCondition\", {\n    policyId: fooAlertPolicy.id,\n    runbookUrl: \"https://example.com\",\n    enabled: true,\n    violationTimeLimitSeconds: 3600,\n    entities: [fooMonitor.id],\n    critical: {\n        threshold: 2,\n    },\n    warning: {\n        threshold: 1,\n    },\n});\nconst myConditionEntityTags = new newrelic.EntityTags(\"myConditionEntityTags\", {\n    guid: fooMultiLocationAlertCondition.entityGuid,\n    tags: [\n        {\n            key: \"my-key\",\n            values: [\n                \"my-value\",\n                \"my-other-value\",\n            ],\n        },\n        {\n            key: \"my-key-2\",\n            values: [\"my-value-2\"],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_monitor = newrelic.synthetics.Monitor(\"fooMonitor\",\n    status=\"ENABLED\",\n    period=\"EVERY_MINUTE\",\n    uri=\"https://www.one.newrelic.com\",\n    type=\"SIMPLE\",\n    locations_publics=[\"AP_EAST_1\"],\n    custom_headers=[newrelic.synthetics.MonitorCustomHeaderArgs(\n        name=\"some_name\",\n        value=\"some_value\",\n    )],\n    treat_redirect_as_failure=True,\n    validation_string=\"success\",\n    bypass_head_request=True,\n    verify_ssl=True,\n    tags=[newrelic.synthetics.MonitorTagArgs(\n        key=\"some_key\",\n        values=[\"some_value\"],\n    )])\nfoo_multi_location_alert_condition = newrelic.synthetics.MultiLocationAlertCondition(\"fooMultiLocationAlertCondition\",\n    policy_id=foo_alert_policy.id,\n    runbook_url=\"https://example.com\",\n    enabled=True,\n    violation_time_limit_seconds=3600,\n    entities=[foo_monitor.id],\n    critical=newrelic.synthetics.MultiLocationAlertConditionCriticalArgs(\n        threshold=2,\n    ),\n    warning=newrelic.synthetics.MultiLocationAlertConditionWarningArgs(\n        threshold=1,\n    ))\nmy_condition_entity_tags = newrelic.EntityTags(\"myConditionEntityTags\",\n    guid=foo_multi_location_alert_condition.entity_guid,\n    tags=[\n        newrelic.EntityTagsTagArgs(\n            key=\"my-key\",\n            values=[\n                \"my-value\",\n                \"my-other-value\",\n            ],\n        ),\n        newrelic.EntityTagsTagArgs(\n            key=\"my-key-2\",\n            values=[\"my-value-2\"],\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\");\n\n    var fooMonitor = new NewRelic.Synthetics.Monitor(\"fooMonitor\", new()\n    {\n        Status = \"ENABLED\",\n        Period = \"EVERY_MINUTE\",\n        Uri = \"https://www.one.newrelic.com\",\n        Type = \"SIMPLE\",\n        LocationsPublics = new[]\n        {\n            \"AP_EAST_1\",\n        },\n        CustomHeaders = new[]\n        {\n            new NewRelic.Synthetics.Inputs.MonitorCustomHeaderArgs\n            {\n                Name = \"some_name\",\n                Value = \"some_value\",\n            },\n        },\n        TreatRedirectAsFailure = true,\n        ValidationString = \"success\",\n        BypassHeadRequest = true,\n        VerifySsl = true,\n        Tags = new[]\n        {\n            new NewRelic.Synthetics.Inputs.MonitorTagArgs\n            {\n                Key = \"some_key\",\n                Values = new[]\n                {\n                    \"some_value\",\n                },\n            },\n        },\n    });\n\n    var fooMultiLocationAlertCondition = new NewRelic.Synthetics.MultiLocationAlertCondition(\"fooMultiLocationAlertCondition\", new()\n    {\n        PolicyId = fooAlertPolicy.Id,\n        RunbookUrl = \"https://example.com\",\n        Enabled = true,\n        ViolationTimeLimitSeconds = 3600,\n        Entities = new[]\n        {\n            fooMonitor.Id,\n        },\n        Critical = new NewRelic.Synthetics.Inputs.MultiLocationAlertConditionCriticalArgs\n        {\n            Threshold = 2,\n        },\n        Warning = new NewRelic.Synthetics.Inputs.MultiLocationAlertConditionWarningArgs\n        {\n            Threshold = 1,\n        },\n    });\n\n    var myConditionEntityTags = new NewRelic.EntityTags(\"myConditionEntityTags\", new()\n    {\n        Guid = fooMultiLocationAlertCondition.EntityGuid,\n        Tags = new[]\n        {\n            new NewRelic.Inputs.EntityTagsTagArgs\n            {\n                Key = \"my-key\",\n                Values = new[]\n                {\n                    \"my-value\",\n                    \"my-other-value\",\n                },\n            },\n            new NewRelic.Inputs.EntityTagsTagArgs\n            {\n                Key = \"my-key-2\",\n                Values = new[]\n                {\n                    \"my-value-2\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooMonitor, err := synthetics.NewMonitor(ctx, \"fooMonitor\", \u0026synthetics.MonitorArgs{\n\t\t\tStatus: pulumi.String(\"ENABLED\"),\n\t\t\tPeriod: pulumi.String(\"EVERY_MINUTE\"),\n\t\t\tUri:    pulumi.String(\"https://www.one.newrelic.com\"),\n\t\t\tType:   pulumi.String(\"SIMPLE\"),\n\t\t\tLocationsPublics: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"AP_EAST_1\"),\n\t\t\t},\n\t\t\tCustomHeaders: synthetics.MonitorCustomHeaderArray{\n\t\t\t\t\u0026synthetics.MonitorCustomHeaderArgs{\n\t\t\t\t\tName:  pulumi.String(\"some_name\"),\n\t\t\t\t\tValue: pulumi.String(\"some_value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTreatRedirectAsFailure: pulumi.Bool(true),\n\t\t\tValidationString:       pulumi.String(\"success\"),\n\t\t\tBypassHeadRequest:      pulumi.Bool(true),\n\t\t\tVerifySsl:              pulumi.Bool(true),\n\t\t\tTags: synthetics.MonitorTagArray{\n\t\t\t\t\u0026synthetics.MonitorTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"some_key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"some_value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooMultiLocationAlertCondition, err := synthetics.NewMultiLocationAlertCondition(ctx, \"fooMultiLocationAlertCondition\", \u0026synthetics.MultiLocationAlertConditionArgs{\n\t\t\tPolicyId:                  fooAlertPolicy.ID(),\n\t\t\tRunbookUrl:                pulumi.String(\"https://example.com\"),\n\t\t\tEnabled:                   pulumi.Bool(true),\n\t\t\tViolationTimeLimitSeconds: pulumi.Int(3600),\n\t\t\tEntities: pulumi.StringArray{\n\t\t\t\tfooMonitor.ID(),\n\t\t\t},\n\t\t\tCritical: \u0026synthetics.MultiLocationAlertConditionCriticalArgs{\n\t\t\t\tThreshold: pulumi.Int(2),\n\t\t\t},\n\t\t\tWarning: \u0026synthetics.MultiLocationAlertConditionWarningArgs{\n\t\t\t\tThreshold: pulumi.Int(1),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewEntityTags(ctx, \"myConditionEntityTags\", \u0026newrelic.EntityTagsArgs{\n\t\t\tGuid: fooMultiLocationAlertCondition.EntityGuid,\n\t\t\tTags: newrelic.EntityTagsTagArray{\n\t\t\t\t\u0026newrelic.EntityTagsTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"my-key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"my-value\"),\n\t\t\t\t\t\tpulumi.String(\"my-other-value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026newrelic.EntityTagsTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"my-key-2\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"my-value-2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.synthetics.Monitor;\nimport com.pulumi.newrelic.synthetics.MonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.MonitorCustomHeaderArgs;\nimport com.pulumi.newrelic.synthetics.inputs.MonitorTagArgs;\nimport com.pulumi.newrelic.synthetics.MultiLocationAlertCondition;\nimport com.pulumi.newrelic.synthetics.MultiLocationAlertConditionArgs;\nimport com.pulumi.newrelic.synthetics.inputs.MultiLocationAlertConditionCriticalArgs;\nimport com.pulumi.newrelic.synthetics.inputs.MultiLocationAlertConditionWarningArgs;\nimport com.pulumi.newrelic.EntityTags;\nimport com.pulumi.newrelic.EntityTagsArgs;\nimport com.pulumi.newrelic.inputs.EntityTagsTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooAlertPolicy = new AlertPolicy(\"fooAlertPolicy\");\n\n        var fooMonitor = new Monitor(\"fooMonitor\", MonitorArgs.builder()        \n            .status(\"ENABLED\")\n            .period(\"EVERY_MINUTE\")\n            .uri(\"https://www.one.newrelic.com\")\n            .type(\"SIMPLE\")\n            .locationsPublics(\"AP_EAST_1\")\n            .customHeaders(MonitorCustomHeaderArgs.builder()\n                .name(\"some_name\")\n                .value(\"some_value\")\n                .build())\n            .treatRedirectAsFailure(true)\n            .validationString(\"success\")\n            .bypassHeadRequest(true)\n            .verifySsl(true)\n            .tags(MonitorTagArgs.builder()\n                .key(\"some_key\")\n                .values(\"some_value\")\n                .build())\n            .build());\n\n        var fooMultiLocationAlertCondition = new MultiLocationAlertCondition(\"fooMultiLocationAlertCondition\", MultiLocationAlertConditionArgs.builder()        \n            .policyId(fooAlertPolicy.id())\n            .runbookUrl(\"https://example.com\")\n            .enabled(true)\n            .violationTimeLimitSeconds(3600)\n            .entities(fooMonitor.id())\n            .critical(MultiLocationAlertConditionCriticalArgs.builder()\n                .threshold(2)\n                .build())\n            .warning(MultiLocationAlertConditionWarningArgs.builder()\n                .threshold(1)\n                .build())\n            .build());\n\n        var myConditionEntityTags = new EntityTags(\"myConditionEntityTags\", EntityTagsArgs.builder()        \n            .guid(fooMultiLocationAlertCondition.entityGuid())\n            .tags(            \n                EntityTagsTagArgs.builder()\n                    .key(\"my-key\")\n                    .values(                    \n                        \"my-value\",\n                        \"my-other-value\")\n                    .build(),\n                EntityTagsTagArgs.builder()\n                    .key(\"my-key-2\")\n                    .values(\"my-value-2\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooAlertPolicy:\n    type: newrelic:AlertPolicy\n  fooMonitor:\n    type: newrelic:synthetics:Monitor\n    properties:\n      status: ENABLED\n      period: EVERY_MINUTE\n      uri: https://www.one.newrelic.com\n      type: SIMPLE\n      locationsPublics:\n        - AP_EAST_1\n      customHeaders:\n        - name: some_name\n          value: some_value\n      treatRedirectAsFailure: true\n      validationString: success\n      bypassHeadRequest: true\n      verifySsl: true\n      tags:\n        - key: some_key\n          values:\n            - some_value\n  fooMultiLocationAlertCondition:\n    type: newrelic:synthetics:MultiLocationAlertCondition\n    properties:\n      policyId: ${fooAlertPolicy.id}\n      runbookUrl: https://example.com\n      enabled: true\n      violationTimeLimitSeconds: 3600\n      entities:\n        - ${fooMonitor.id}\n      critical:\n        threshold: 2\n      warning:\n        threshold: 1\n  myConditionEntityTags:\n    type: newrelic:EntityTags\n    properties:\n      guid: ${fooMultiLocationAlertCondition.entityGuid}\n      tags:\n        - key: my-key\n          values:\n            - my-value\n            - my-other-value\n        - key: my-key-2\n          values:\n            - my-value-2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNew Relic Synthetics MultiLocation Conditions can be imported using a concatenated string of the format\n\n `\u003cpolicy_id\u003e:\u003ccondition_id\u003e`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:synthetics/multiLocationAlertCondition:MultiLocationAlertCondition example 12345678:1456\n```\n\n",
            "properties": {
                "critical": {
                    "$ref": "#/types/newrelic:synthetics/MultiLocationAlertConditionCritical:MultiLocationAlertConditionCritical",
                    "description": "A condition term with the priority set to critical.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Set whether to enable the alert condition.  Defaults to true.\n"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Monitor GUID's of the Synthetics monitors to alert on.\n"
                },
                "entityGuid": {
                    "type": "string",
                    "description": "The unique entity identifier of the condition in New Relic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition will be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "violationTimeLimitSeconds": {
                    "type": "integer",
                    "description": "The maximum number of seconds a violation can remain open before being closed by the system. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days), both inclusive. Defaults to 259200 seconds (3 days) if this argument is not specified in the configuration, in accordance with the characteristics of this field in NerdGraph, as specified in the [docs](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/rest-api-alerts/alerts-conditions-api-field-names/#violation_time_limit_seconds).\n"
                },
                "warning": {
                    "$ref": "#/types/newrelic:synthetics/MultiLocationAlertConditionWarning:MultiLocationAlertConditionWarning",
                    "description": "A condition term with the priority set to warning.\n\n\n\u003e **WARNING:** This resource will use the account ID linked to your API key. At the moment it is not possible to dynamically set the account ID.\n"
                }
            },
            "required": [
                "critical",
                "entities",
                "entityGuid",
                "name",
                "policyId"
            ],
            "inputProperties": {
                "critical": {
                    "$ref": "#/types/newrelic:synthetics/MultiLocationAlertConditionCritical:MultiLocationAlertConditionCritical",
                    "description": "A condition term with the priority set to critical.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Set whether to enable the alert condition.  Defaults to true.\n"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Monitor GUID's of the Synthetics monitors to alert on.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition will be used.\n",
                    "willReplaceOnChanges": true
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "violationTimeLimitSeconds": {
                    "type": "integer",
                    "description": "The maximum number of seconds a violation can remain open before being closed by the system. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days), both inclusive. Defaults to 259200 seconds (3 days) if this argument is not specified in the configuration, in accordance with the characteristics of this field in NerdGraph, as specified in the [docs](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/rest-api-alerts/alerts-conditions-api-field-names/#violation_time_limit_seconds).\n"
                },
                "warning": {
                    "$ref": "#/types/newrelic:synthetics/MultiLocationAlertConditionWarning:MultiLocationAlertConditionWarning",
                    "description": "A condition term with the priority set to warning.\n\n\n\u003e **WARNING:** This resource will use the account ID linked to your API key. At the moment it is not possible to dynamically set the account ID.\n"
                }
            },
            "requiredInputs": [
                "critical",
                "entities",
                "policyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MultiLocationAlertCondition resources.\n",
                "properties": {
                    "critical": {
                        "$ref": "#/types/newrelic:synthetics/MultiLocationAlertConditionCritical:MultiLocationAlertConditionCritical",
                        "description": "A condition term with the priority set to critical.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Set whether to enable the alert condition.  Defaults to true.\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Monitor GUID's of the Synthetics monitors to alert on.\n"
                    },
                    "entityGuid": {
                        "type": "string",
                        "description": "The unique entity identifier of the condition in New Relic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the condition.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the policy where this condition will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "runbookUrl": {
                        "type": "string",
                        "description": "Runbook URL to display in notifications.\n"
                    },
                    "violationTimeLimitSeconds": {
                        "type": "integer",
                        "description": "The maximum number of seconds a violation can remain open before being closed by the system. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days), both inclusive. Defaults to 259200 seconds (3 days) if this argument is not specified in the configuration, in accordance with the characteristics of this field in NerdGraph, as specified in the [docs](https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/rest-api-alerts/alerts-conditions-api-field-names/#violation_time_limit_seconds).\n"
                    },
                    "warning": {
                        "$ref": "#/types/newrelic:synthetics/MultiLocationAlertConditionWarning:MultiLocationAlertConditionWarning",
                        "description": "A condition term with the priority set to warning.\n\n\n\u003e **WARNING:** This resource will use the account ID linked to your API key. At the moment it is not possible to dynamically set the account ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/privateLocation:PrivateLocation": {
            "description": "Use this resource to create and manage New Relic Synthetic private location.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst location = new newrelic.synthetics.PrivateLocation(\"location\", {description: \"The private location description\"});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nlocation = newrelic.synthetics.PrivateLocation(\"location\", description=\"The private location description\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var location = new NewRelic.Synthetics.PrivateLocation(\"location\", new()\n    {\n        Description = \"The private location description\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.NewPrivateLocation(ctx, \"location\", \u0026synthetics.PrivateLocationArgs{\n\t\t\tDescription: pulumi.String(\"The private location description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.PrivateLocation;\nimport com.pulumi.newrelic.synthetics.PrivateLocationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var location = new PrivateLocation(\"location\", PrivateLocationArgs.builder()        \n            .description(\"The private location description\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  location:\n    type: newrelic:synthetics:PrivateLocation\n    properties:\n      description: The private location description\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nA Synthetics private location can be imported using the `guid`\n\n```sh\n$ pulumi import newrelic:synthetics/privateLocation:PrivateLocation location GUID\n```\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account in which the private location will be created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The private location description.\n"
                },
                "domainId": {
                    "type": "string",
                    "description": "The private location globally unique identifier.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The unique client identifier for the private location in New Relic. Same as `id`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The private locations key.\n"
                },
                "locationId": {
                    "type": "string",
                    "description": "An alternate identifier based on name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the private location.\n"
                },
                "verifiedScriptExecution": {
                    "type": "boolean",
                    "description": "The private location requires a password to edit if value is true. Defaults to `false`\n"
                }
            },
            "required": [
                "accountId",
                "description",
                "domainId",
                "guid",
                "key",
                "locationId",
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account in which the private location will be created.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The private location description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the private location.\n",
                    "willReplaceOnChanges": true
                },
                "verifiedScriptExecution": {
                    "type": "boolean",
                    "description": "The private location requires a password to edit if value is true. Defaults to `false`\n"
                }
            },
            "requiredInputs": [
                "description"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrivateLocation resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account in which the private location will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The private location description.\n"
                    },
                    "domainId": {
                        "type": "string",
                        "description": "The private location globally unique identifier.\n"
                    },
                    "guid": {
                        "type": "string",
                        "description": "The unique client identifier for the private location in New Relic. Same as `id`.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The private locations key.\n"
                    },
                    "locationId": {
                        "type": "string",
                        "description": "An alternate identifier based on name.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the private location.\n",
                        "willReplaceOnChanges": true
                    },
                    "verifiedScriptExecution": {
                        "type": "boolean",
                        "description": "The private location requires a password to edit if value is true. Defaults to `false`\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/scriptMonitor:ScriptMonitor": {
            "description": "Use this resource to create update, and delete a Script API or Script Browser Synthetics Monitor in New Relic.\n\n## Example Usage\n\n##### Type: `SCRIPT_API`\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst monitor = new newrelic.synthetics.ScriptMonitor(\"monitor\", {\n    locationsPublics: [\n        \"AP_SOUTH_1\",\n        \"AP_EAST_1\",\n    ],\n    period: \"EVERY_6_HOURS\",\n    runtimeType: \"NODE_API\",\n    runtimeTypeVersion: \"16.10\",\n    script: \"console.log('it works!')\",\n    scriptLanguage: \"JAVASCRIPT\",\n    status: \"ENABLED\",\n    tags: [{\n        key: \"some_key\",\n        values: [\"some_value\"],\n    }],\n    type: \"SCRIPT_API\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nmonitor = newrelic.synthetics.ScriptMonitor(\"monitor\",\n    locations_publics=[\n        \"AP_SOUTH_1\",\n        \"AP_EAST_1\",\n    ],\n    period=\"EVERY_6_HOURS\",\n    runtime_type=\"NODE_API\",\n    runtime_type_version=\"16.10\",\n    script=\"console.log('it works!')\",\n    script_language=\"JAVASCRIPT\",\n    status=\"ENABLED\",\n    tags=[newrelic.synthetics.ScriptMonitorTagArgs(\n        key=\"some_key\",\n        values=[\"some_value\"],\n    )],\n    type=\"SCRIPT_API\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var monitor = new NewRelic.Synthetics.ScriptMonitor(\"monitor\", new()\n    {\n        LocationsPublics = new[]\n        {\n            \"AP_SOUTH_1\",\n            \"AP_EAST_1\",\n        },\n        Period = \"EVERY_6_HOURS\",\n        RuntimeType = \"NODE_API\",\n        RuntimeTypeVersion = \"16.10\",\n        Script = \"console.log('it works!')\",\n        ScriptLanguage = \"JAVASCRIPT\",\n        Status = \"ENABLED\",\n        Tags = new[]\n        {\n            new NewRelic.Synthetics.Inputs.ScriptMonitorTagArgs\n            {\n                Key = \"some_key\",\n                Values = new[]\n                {\n                    \"some_value\",\n                },\n            },\n        },\n        Type = \"SCRIPT_API\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.NewScriptMonitor(ctx, \"monitor\", \u0026synthetics.ScriptMonitorArgs{\n\t\t\tLocationsPublics: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"AP_SOUTH_1\"),\n\t\t\t\tpulumi.String(\"AP_EAST_1\"),\n\t\t\t},\n\t\t\tPeriod:             pulumi.String(\"EVERY_6_HOURS\"),\n\t\t\tRuntimeType:        pulumi.String(\"NODE_API\"),\n\t\t\tRuntimeTypeVersion: pulumi.String(\"16.10\"),\n\t\t\tScript:             pulumi.String(\"console.log('it works!')\"),\n\t\t\tScriptLanguage:     pulumi.String(\"JAVASCRIPT\"),\n\t\t\tStatus:             pulumi.String(\"ENABLED\"),\n\t\t\tTags: synthetics.ScriptMonitorTagArray{\n\t\t\t\t\u0026synthetics.ScriptMonitorTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"some_key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"some_value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"SCRIPT_API\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.ScriptMonitor;\nimport com.pulumi.newrelic.synthetics.ScriptMonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.ScriptMonitorTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var monitor = new ScriptMonitor(\"monitor\", ScriptMonitorArgs.builder()        \n            .locationsPublics(            \n                \"AP_SOUTH_1\",\n                \"AP_EAST_1\")\n            .period(\"EVERY_6_HOURS\")\n            .runtimeType(\"NODE_API\")\n            .runtimeTypeVersion(\"16.10\")\n            .script(\"console.log('it works!')\")\n            .scriptLanguage(\"JAVASCRIPT\")\n            .status(\"ENABLED\")\n            .tags(ScriptMonitorTagArgs.builder()\n                .key(\"some_key\")\n                .values(\"some_value\")\n                .build())\n            .type(\"SCRIPT_API\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  monitor:\n    type: newrelic:synthetics:ScriptMonitor\n    properties:\n      locationsPublics:\n        - AP_SOUTH_1\n        - AP_EAST_1\n      period: EVERY_6_HOURS\n      runtimeType: NODE_API\n      runtimeTypeVersion: '16.10'\n      script: console.log('it works!')\n      scriptLanguage: JAVASCRIPT\n      status: ENABLED\n      tags:\n        - key: some_key\n          values:\n            - some_value\n      type: SCRIPT_API\n```\n\u003c!--End PulumiCodeChooser --\u003e\n##### Type: `SCRIPT_BROWSER`\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst monitor = new newrelic.synthetics.ScriptMonitor(\"monitor\", {\n    enableScreenshotOnFailureAndScript: false,\n    locationsPublics: [\n        \"AP_SOUTH_1\",\n        \"AP_EAST_1\",\n    ],\n    period: \"EVERY_HOUR\",\n    runtimeType: \"CHROME_BROWSER\",\n    runtimeTypeVersion: \"100\",\n    script: \"$browser.get('https://one.newrelic.com')\",\n    scriptLanguage: \"JAVASCRIPT\",\n    status: \"ENABLED\",\n    tags: [{\n        key: \"some_key\",\n        values: [\"some_value\"],\n    }],\n    type: \"SCRIPT_BROWSER\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nmonitor = newrelic.synthetics.ScriptMonitor(\"monitor\",\n    enable_screenshot_on_failure_and_script=False,\n    locations_publics=[\n        \"AP_SOUTH_1\",\n        \"AP_EAST_1\",\n    ],\n    period=\"EVERY_HOUR\",\n    runtime_type=\"CHROME_BROWSER\",\n    runtime_type_version=\"100\",\n    script=\"$browser.get('https://one.newrelic.com')\",\n    script_language=\"JAVASCRIPT\",\n    status=\"ENABLED\",\n    tags=[newrelic.synthetics.ScriptMonitorTagArgs(\n        key=\"some_key\",\n        values=[\"some_value\"],\n    )],\n    type=\"SCRIPT_BROWSER\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var monitor = new NewRelic.Synthetics.ScriptMonitor(\"monitor\", new()\n    {\n        EnableScreenshotOnFailureAndScript = false,\n        LocationsPublics = new[]\n        {\n            \"AP_SOUTH_1\",\n            \"AP_EAST_1\",\n        },\n        Period = \"EVERY_HOUR\",\n        RuntimeType = \"CHROME_BROWSER\",\n        RuntimeTypeVersion = \"100\",\n        Script = \"$browser.get('https://one.newrelic.com')\",\n        ScriptLanguage = \"JAVASCRIPT\",\n        Status = \"ENABLED\",\n        Tags = new[]\n        {\n            new NewRelic.Synthetics.Inputs.ScriptMonitorTagArgs\n            {\n                Key = \"some_key\",\n                Values = new[]\n                {\n                    \"some_value\",\n                },\n            },\n        },\n        Type = \"SCRIPT_BROWSER\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.NewScriptMonitor(ctx, \"monitor\", \u0026synthetics.ScriptMonitorArgs{\n\t\t\tEnableScreenshotOnFailureAndScript: pulumi.Bool(false),\n\t\t\tLocationsPublics: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"AP_SOUTH_1\"),\n\t\t\t\tpulumi.String(\"AP_EAST_1\"),\n\t\t\t},\n\t\t\tPeriod:             pulumi.String(\"EVERY_HOUR\"),\n\t\t\tRuntimeType:        pulumi.String(\"CHROME_BROWSER\"),\n\t\t\tRuntimeTypeVersion: pulumi.String(\"100\"),\n\t\t\tScript:             pulumi.String(\"$browser.get('https://one.newrelic.com')\"),\n\t\t\tScriptLanguage:     pulumi.String(\"JAVASCRIPT\"),\n\t\t\tStatus:             pulumi.String(\"ENABLED\"),\n\t\t\tTags: synthetics.ScriptMonitorTagArray{\n\t\t\t\t\u0026synthetics.ScriptMonitorTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"some_key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"some_value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"SCRIPT_BROWSER\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.ScriptMonitor;\nimport com.pulumi.newrelic.synthetics.ScriptMonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.ScriptMonitorTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var monitor = new ScriptMonitor(\"monitor\", ScriptMonitorArgs.builder()        \n            .enableScreenshotOnFailureAndScript(false)\n            .locationsPublics(            \n                \"AP_SOUTH_1\",\n                \"AP_EAST_1\")\n            .period(\"EVERY_HOUR\")\n            .runtimeType(\"CHROME_BROWSER\")\n            .runtimeTypeVersion(\"100\")\n            .script(\"$browser.get('https://one.newrelic.com')\")\n            .scriptLanguage(\"JAVASCRIPT\")\n            .status(\"ENABLED\")\n            .tags(ScriptMonitorTagArgs.builder()\n                .key(\"some_key\")\n                .values(\"some_value\")\n                .build())\n            .type(\"SCRIPT_BROWSER\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  monitor:\n    type: newrelic:synthetics:ScriptMonitor\n    properties:\n      enableScreenshotOnFailureAndScript: false\n      locationsPublics:\n        - AP_SOUTH_1\n        - AP_EAST_1\n      period: EVERY_HOUR\n      runtimeType: CHROME_BROWSER\n      runtimeTypeVersion: '100'\n      script: $browser.get('https://one.newrelic.com')\n      scriptLanguage: JAVASCRIPT\n      status: ENABLED\n      tags:\n        - key: some_key\n          values:\n            - some_value\n      type: SCRIPT_BROWSER\n```\n\u003c!--End PulumiCodeChooser --\u003e\nSee additional examples.\n\n## Additional Examples\n\n### Create a monitor with a private location\n\nThe below example shows how you can define a private location and attach it to a monitor.\n\n\u003e **NOTE:** It can take up to 10 minutes for a private location to become available.\n\n##### Type: `SCRIPT_API`\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst location = new newrelic.synthetics.PrivateLocation(\"location\", {\n    description: \"Example private location\",\n    verifiedScriptExecution: true,\n});\nconst monitor = new newrelic.synthetics.ScriptMonitor(\"monitor\", {\n    status: \"ENABLED\",\n    type: \"SCRIPT_API\",\n    locationPrivates: [{\n        guid: location.id,\n        vsePassword: \"secret\",\n    }],\n    period: \"EVERY_6_HOURS\",\n    script: \"console.log('terraform integration test updated')\",\n    scriptLanguage: \"JAVASCRIPT\",\n    runtimeType: \"NODE_API\",\n    runtimeTypeVersion: \"16.10\",\n    tags: [{\n        key: \"some_key\",\n        values: [\"some_value\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nlocation = newrelic.synthetics.PrivateLocation(\"location\",\n    description=\"Example private location\",\n    verified_script_execution=True)\nmonitor = newrelic.synthetics.ScriptMonitor(\"monitor\",\n    status=\"ENABLED\",\n    type=\"SCRIPT_API\",\n    location_privates=[newrelic.synthetics.ScriptMonitorLocationPrivateArgs(\n        guid=location.id,\n        vse_password=\"secret\",\n    )],\n    period=\"EVERY_6_HOURS\",\n    script=\"console.log('terraform integration test updated')\",\n    script_language=\"JAVASCRIPT\",\n    runtime_type=\"NODE_API\",\n    runtime_type_version=\"16.10\",\n    tags=[newrelic.synthetics.ScriptMonitorTagArgs(\n        key=\"some_key\",\n        values=[\"some_value\"],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var location = new NewRelic.Synthetics.PrivateLocation(\"location\", new()\n    {\n        Description = \"Example private location\",\n        VerifiedScriptExecution = true,\n    });\n\n    var monitor = new NewRelic.Synthetics.ScriptMonitor(\"monitor\", new()\n    {\n        Status = \"ENABLED\",\n        Type = \"SCRIPT_API\",\n        LocationPrivates = new[]\n        {\n            new NewRelic.Synthetics.Inputs.ScriptMonitorLocationPrivateArgs\n            {\n                Guid = location.Id,\n                VsePassword = \"secret\",\n            },\n        },\n        Period = \"EVERY_6_HOURS\",\n        Script = \"console.log('terraform integration test updated')\",\n        ScriptLanguage = \"JAVASCRIPT\",\n        RuntimeType = \"NODE_API\",\n        RuntimeTypeVersion = \"16.10\",\n        Tags = new[]\n        {\n            new NewRelic.Synthetics.Inputs.ScriptMonitorTagArgs\n            {\n                Key = \"some_key\",\n                Values = new[]\n                {\n                    \"some_value\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlocation, err := synthetics.NewPrivateLocation(ctx, \"location\", \u0026synthetics.PrivateLocationArgs{\n\t\t\tDescription:             pulumi.String(\"Example private location\"),\n\t\t\tVerifiedScriptExecution: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = synthetics.NewScriptMonitor(ctx, \"monitor\", \u0026synthetics.ScriptMonitorArgs{\n\t\t\tStatus: pulumi.String(\"ENABLED\"),\n\t\t\tType:   pulumi.String(\"SCRIPT_API\"),\n\t\t\tLocationPrivates: synthetics.ScriptMonitorLocationPrivateArray{\n\t\t\t\t\u0026synthetics.ScriptMonitorLocationPrivateArgs{\n\t\t\t\t\tGuid:        location.ID(),\n\t\t\t\t\tVsePassword: pulumi.String(\"secret\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPeriod:             pulumi.String(\"EVERY_6_HOURS\"),\n\t\t\tScript:             pulumi.String(\"console.log('terraform integration test updated')\"),\n\t\t\tScriptLanguage:     pulumi.String(\"JAVASCRIPT\"),\n\t\t\tRuntimeType:        pulumi.String(\"NODE_API\"),\n\t\t\tRuntimeTypeVersion: pulumi.String(\"16.10\"),\n\t\t\tTags: synthetics.ScriptMonitorTagArray{\n\t\t\t\t\u0026synthetics.ScriptMonitorTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"some_key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"some_value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.PrivateLocation;\nimport com.pulumi.newrelic.synthetics.PrivateLocationArgs;\nimport com.pulumi.newrelic.synthetics.ScriptMonitor;\nimport com.pulumi.newrelic.synthetics.ScriptMonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.ScriptMonitorLocationPrivateArgs;\nimport com.pulumi.newrelic.synthetics.inputs.ScriptMonitorTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var location = new PrivateLocation(\"location\", PrivateLocationArgs.builder()        \n            .description(\"Example private location\")\n            .verifiedScriptExecution(true)\n            .build());\n\n        var monitor = new ScriptMonitor(\"monitor\", ScriptMonitorArgs.builder()        \n            .status(\"ENABLED\")\n            .type(\"SCRIPT_API\")\n            .locationPrivates(ScriptMonitorLocationPrivateArgs.builder()\n                .guid(location.id())\n                .vsePassword(\"secret\")\n                .build())\n            .period(\"EVERY_6_HOURS\")\n            .script(\"console.log('terraform integration test updated')\")\n            .scriptLanguage(\"JAVASCRIPT\")\n            .runtimeType(\"NODE_API\")\n            .runtimeTypeVersion(\"16.10\")\n            .tags(ScriptMonitorTagArgs.builder()\n                .key(\"some_key\")\n                .values(\"some_value\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  location:\n    type: newrelic:synthetics:PrivateLocation\n    properties:\n      description: Example private location\n      verifiedScriptExecution: true\n  monitor:\n    type: newrelic:synthetics:ScriptMonitor\n    properties:\n      status: ENABLED\n      type: SCRIPT_API\n      locationPrivates:\n        - guid: ${location.id}\n          vsePassword: secret\n      period: EVERY_6_HOURS\n      script: console.log('terraform integration test updated')\n      scriptLanguage: JAVASCRIPT\n      runtimeType: NODE_API\n      runtimeTypeVersion: '16.10'\n      tags:\n        - key: some_key\n          values:\n            - some_value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n##### Type: `SCRIPT_BROWSER`\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst location = new newrelic.synthetics.PrivateLocation(\"location\", {\n    description: \"Test Description\",\n    verifiedScriptExecution: true,\n});\nconst monitor = new newrelic.synthetics.ScriptMonitor(\"monitor\", {\n    status: \"ENABLED\",\n    type: \"SCRIPT_BROWSER\",\n    period: \"EVERY_HOUR\",\n    script: \"$browser.get('https://one.newrelic.com')\",\n    enableScreenshotOnFailureAndScript: false,\n    locationPrivates: [{\n        guid: location.id,\n        vsePassword: \"secret\",\n    }],\n    runtimeTypeVersion: \"100\",\n    runtimeType: \"CHROME_BROWSER\",\n    scriptLanguage: \"JAVASCRIPT\",\n    tags: [{\n        key: \"some_key\",\n        values: [\"some_value\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nlocation = newrelic.synthetics.PrivateLocation(\"location\",\n    description=\"Test Description\",\n    verified_script_execution=True)\nmonitor = newrelic.synthetics.ScriptMonitor(\"monitor\",\n    status=\"ENABLED\",\n    type=\"SCRIPT_BROWSER\",\n    period=\"EVERY_HOUR\",\n    script=\"$browser.get('https://one.newrelic.com')\",\n    enable_screenshot_on_failure_and_script=False,\n    location_privates=[newrelic.synthetics.ScriptMonitorLocationPrivateArgs(\n        guid=location.id,\n        vse_password=\"secret\",\n    )],\n    runtime_type_version=\"100\",\n    runtime_type=\"CHROME_BROWSER\",\n    script_language=\"JAVASCRIPT\",\n    tags=[newrelic.synthetics.ScriptMonitorTagArgs(\n        key=\"some_key\",\n        values=[\"some_value\"],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var location = new NewRelic.Synthetics.PrivateLocation(\"location\", new()\n    {\n        Description = \"Test Description\",\n        VerifiedScriptExecution = true,\n    });\n\n    var monitor = new NewRelic.Synthetics.ScriptMonitor(\"monitor\", new()\n    {\n        Status = \"ENABLED\",\n        Type = \"SCRIPT_BROWSER\",\n        Period = \"EVERY_HOUR\",\n        Script = \"$browser.get('https://one.newrelic.com')\",\n        EnableScreenshotOnFailureAndScript = false,\n        LocationPrivates = new[]\n        {\n            new NewRelic.Synthetics.Inputs.ScriptMonitorLocationPrivateArgs\n            {\n                Guid = location.Id,\n                VsePassword = \"secret\",\n            },\n        },\n        RuntimeTypeVersion = \"100\",\n        RuntimeType = \"CHROME_BROWSER\",\n        ScriptLanguage = \"JAVASCRIPT\",\n        Tags = new[]\n        {\n            new NewRelic.Synthetics.Inputs.ScriptMonitorTagArgs\n            {\n                Key = \"some_key\",\n                Values = new[]\n                {\n                    \"some_value\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlocation, err := synthetics.NewPrivateLocation(ctx, \"location\", \u0026synthetics.PrivateLocationArgs{\n\t\t\tDescription:             pulumi.String(\"Test Description\"),\n\t\t\tVerifiedScriptExecution: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = synthetics.NewScriptMonitor(ctx, \"monitor\", \u0026synthetics.ScriptMonitorArgs{\n\t\t\tStatus:                             pulumi.String(\"ENABLED\"),\n\t\t\tType:                               pulumi.String(\"SCRIPT_BROWSER\"),\n\t\t\tPeriod:                             pulumi.String(\"EVERY_HOUR\"),\n\t\t\tScript:                             pulumi.String(\"$browser.get('https://one.newrelic.com')\"),\n\t\t\tEnableScreenshotOnFailureAndScript: pulumi.Bool(false),\n\t\t\tLocationPrivates: synthetics.ScriptMonitorLocationPrivateArray{\n\t\t\t\t\u0026synthetics.ScriptMonitorLocationPrivateArgs{\n\t\t\t\t\tGuid:        location.ID(),\n\t\t\t\t\tVsePassword: pulumi.String(\"secret\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRuntimeTypeVersion: pulumi.String(\"100\"),\n\t\t\tRuntimeType:        pulumi.String(\"CHROME_BROWSER\"),\n\t\t\tScriptLanguage:     pulumi.String(\"JAVASCRIPT\"),\n\t\t\tTags: synthetics.ScriptMonitorTagArray{\n\t\t\t\t\u0026synthetics.ScriptMonitorTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"some_key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"some_value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.PrivateLocation;\nimport com.pulumi.newrelic.synthetics.PrivateLocationArgs;\nimport com.pulumi.newrelic.synthetics.ScriptMonitor;\nimport com.pulumi.newrelic.synthetics.ScriptMonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.ScriptMonitorLocationPrivateArgs;\nimport com.pulumi.newrelic.synthetics.inputs.ScriptMonitorTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var location = new PrivateLocation(\"location\", PrivateLocationArgs.builder()        \n            .description(\"Test Description\")\n            .verifiedScriptExecution(true)\n            .build());\n\n        var monitor = new ScriptMonitor(\"monitor\", ScriptMonitorArgs.builder()        \n            .status(\"ENABLED\")\n            .type(\"SCRIPT_BROWSER\")\n            .period(\"EVERY_HOUR\")\n            .script(\"$browser.get('https://one.newrelic.com')\")\n            .enableScreenshotOnFailureAndScript(false)\n            .locationPrivates(ScriptMonitorLocationPrivateArgs.builder()\n                .guid(location.id())\n                .vsePassword(\"secret\")\n                .build())\n            .runtimeTypeVersion(\"100\")\n            .runtimeType(\"CHROME_BROWSER\")\n            .scriptLanguage(\"JAVASCRIPT\")\n            .tags(ScriptMonitorTagArgs.builder()\n                .key(\"some_key\")\n                .values(\"some_value\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  location:\n    type: newrelic:synthetics:PrivateLocation\n    properties:\n      description: Test Description\n      verifiedScriptExecution: true\n  monitor:\n    type: newrelic:synthetics:ScriptMonitor\n    properties:\n      status: ENABLED\n      type: SCRIPT_BROWSER\n      period: EVERY_HOUR\n      script: $browser.get('https://one.newrelic.com')\n      enableScreenshotOnFailureAndScript: false\n      locationPrivates:\n        - guid: ${location.id}\n          vsePassword: secret\n      runtimeTypeVersion: '100'\n      runtimeType: CHROME_BROWSER\n      scriptLanguage: JAVASCRIPT\n      tags:\n        - key: some_key\n          values:\n            - some_value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSynthetics monitor scripts can be imported using the `guid`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:synthetics/scriptMonitor:ScriptMonitor monitor \u003cguid\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account in which the Synthetics monitor will be created.\n"
                },
                "deviceOrientation": {
                    "type": "string",
                    "description": "Device emulation orientation field. Valid values are `LANDSCAPE` and `PORTRAIT`.\n"
                },
                "deviceType": {
                    "type": "string",
                    "description": "Device emulation type field. Valid values are `MOBILE` and `TABLET`.\n"
                },
                "enableScreenshotOnFailureAndScript": {
                    "type": "boolean",
                    "description": "Capture a screenshot during job execution.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The unique identifier for the Synthetics private location in New Relic.\n"
                },
                "locationPrivates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/ScriptMonitorLocationPrivate:ScriptMonitorLocationPrivate"
                    },
                    "description": "The location the monitor will run from. See Nested location_private blocks below for details. **At least one of either** `locations_public` **or** `location_private` **is required**.\n"
                },
                "locationsPublics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The location the monitor will run from. Check out [this page](https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/) for a list of valid public locations. The `AWS_` prefix is not needed, as the provider uses NerdGraph. **At least one of either** `locations_public` **or** `location_private` **is required**.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the monitor.\n"
                },
                "period": {
                    "type": "string",
                    "description": "The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.\n"
                },
                "periodInMinutes": {
                    "type": "integer",
                    "description": "The interval in minutes at which Synthetic monitor should run.\n"
                },
                "runtimeType": {
                    "type": "string",
                    "description": "The runtime that the monitor will use to run jobs.\n"
                },
                "runtimeTypeVersion": {
                    "type": "string",
                    "description": "The specific version of the runtime type selected.\n"
                },
                "script": {
                    "type": "string",
                    "description": "The script that the monitor runs.\n"
                },
                "scriptLanguage": {
                    "type": "string",
                    "description": "The programing language that should execute the script.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The monitor status (i.e. ENABLED, MUTED, DISABLED). Note: The 'MUTED' status is now deprecated, and support for this\nvalue will soon be removed from the Terraform Provider in an upcoming release. It is highly recommended for users to\nrefrain from using this value and shift to alternatives.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/ScriptMonitorTag:ScriptMonitorTag"
                    },
                    "description": "The tags that will be associated with the monitor. See Nested tag blocks below for details.\n\nThe `SCRIPTED_BROWSER` monitor type supports the following additional argument:\n"
                },
                "type": {
                    "type": "string",
                    "description": "The plaintext representing the monitor script. Valid values are SCRIPT_BROWSER or SCRIPT_API\n"
                }
            },
            "required": [
                "accountId",
                "guid",
                "name",
                "period",
                "periodInMinutes",
                "status",
                "type"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account in which the Synthetics monitor will be created.\n",
                    "willReplaceOnChanges": true
                },
                "deviceOrientation": {
                    "type": "string",
                    "description": "Device emulation orientation field. Valid values are `LANDSCAPE` and `PORTRAIT`.\n"
                },
                "deviceType": {
                    "type": "string",
                    "description": "Device emulation type field. Valid values are `MOBILE` and `TABLET`.\n"
                },
                "enableScreenshotOnFailureAndScript": {
                    "type": "boolean",
                    "description": "Capture a screenshot during job execution.\n"
                },
                "locationPrivates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/ScriptMonitorLocationPrivate:ScriptMonitorLocationPrivate"
                    },
                    "description": "The location the monitor will run from. See Nested location_private blocks below for details. **At least one of either** `locations_public` **or** `location_private` **is required**.\n"
                },
                "locationsPublics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The location the monitor will run from. Check out [this page](https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/) for a list of valid public locations. The `AWS_` prefix is not needed, as the provider uses NerdGraph. **At least one of either** `locations_public` **or** `location_private` **is required**.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the monitor.\n"
                },
                "period": {
                    "type": "string",
                    "description": "The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.\n"
                },
                "runtimeType": {
                    "type": "string",
                    "description": "The runtime that the monitor will use to run jobs.\n"
                },
                "runtimeTypeVersion": {
                    "type": "string",
                    "description": "The specific version of the runtime type selected.\n"
                },
                "script": {
                    "type": "string",
                    "description": "The script that the monitor runs.\n"
                },
                "scriptLanguage": {
                    "type": "string",
                    "description": "The programing language that should execute the script.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The monitor status (i.e. ENABLED, MUTED, DISABLED). Note: The 'MUTED' status is now deprecated, and support for this\nvalue will soon be removed from the Terraform Provider in an upcoming release. It is highly recommended for users to\nrefrain from using this value and shift to alternatives.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/ScriptMonitorTag:ScriptMonitorTag"
                    },
                    "description": "The tags that will be associated with the monitor. See Nested tag blocks below for details.\n\nThe `SCRIPTED_BROWSER` monitor type supports the following additional argument:\n"
                },
                "type": {
                    "type": "string",
                    "description": "The plaintext representing the monitor script. Valid values are SCRIPT_BROWSER or SCRIPT_API\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "period",
                "status",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScriptMonitor resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account in which the Synthetics monitor will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "deviceOrientation": {
                        "type": "string",
                        "description": "Device emulation orientation field. Valid values are `LANDSCAPE` and `PORTRAIT`.\n"
                    },
                    "deviceType": {
                        "type": "string",
                        "description": "Device emulation type field. Valid values are `MOBILE` and `TABLET`.\n"
                    },
                    "enableScreenshotOnFailureAndScript": {
                        "type": "boolean",
                        "description": "Capture a screenshot during job execution.\n"
                    },
                    "guid": {
                        "type": "string",
                        "description": "The unique identifier for the Synthetics private location in New Relic.\n"
                    },
                    "locationPrivates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:synthetics/ScriptMonitorLocationPrivate:ScriptMonitorLocationPrivate"
                        },
                        "description": "The location the monitor will run from. See Nested location_private blocks below for details. **At least one of either** `locations_public` **or** `location_private` **is required**.\n"
                    },
                    "locationsPublics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The location the monitor will run from. Check out [this page](https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/) for a list of valid public locations. The `AWS_` prefix is not needed, as the provider uses NerdGraph. **At least one of either** `locations_public` **or** `location_private` **is required**.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the monitor.\n"
                    },
                    "period": {
                        "type": "string",
                        "description": "The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.\n"
                    },
                    "periodInMinutes": {
                        "type": "integer",
                        "description": "The interval in minutes at which Synthetic monitor should run.\n"
                    },
                    "runtimeType": {
                        "type": "string",
                        "description": "The runtime that the monitor will use to run jobs.\n"
                    },
                    "runtimeTypeVersion": {
                        "type": "string",
                        "description": "The specific version of the runtime type selected.\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "The script that the monitor runs.\n"
                    },
                    "scriptLanguage": {
                        "type": "string",
                        "description": "The programing language that should execute the script.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The monitor status (i.e. ENABLED, MUTED, DISABLED). Note: The 'MUTED' status is now deprecated, and support for this\nvalue will soon be removed from the Terraform Provider in an upcoming release. It is highly recommended for users to\nrefrain from using this value and shift to alternatives.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:synthetics/ScriptMonitorTag:ScriptMonitorTag"
                        },
                        "description": "The tags that will be associated with the monitor. See Nested tag blocks below for details.\n\nThe `SCRIPTED_BROWSER` monitor type supports the following additional argument:\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The plaintext representing the monitor script. Valid values are SCRIPT_BROWSER or SCRIPT_API\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/secureCredential:SecureCredential": {
            "description": "Use this resource to create and manage New Relic Synthetic secure credentials.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.SecureCredential(\"foo\", {\n    description: \"My description\",\n    key: \"MY_KEY\",\n    value: \"My value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.synthetics.SecureCredential(\"foo\",\n    description=\"My description\",\n    key=\"MY_KEY\",\n    value=\"My value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new NewRelic.Synthetics.SecureCredential(\"foo\", new()\n    {\n        Description = \"My description\",\n        Key = \"MY_KEY\",\n        Value = \"My value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.NewSecureCredential(ctx, \"foo\", \u0026synthetics.SecureCredentialArgs{\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tKey:         pulumi.String(\"MY_KEY\"),\n\t\t\tValue:       pulumi.String(\"My value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.SecureCredential;\nimport com.pulumi.newrelic.synthetics.SecureCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new SecureCredential(\"foo\", SecureCredentialArgs.builder()        \n            .description(\"My description\")\n            .key(\"MY_KEY\")\n            .value(\"My value\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:synthetics:SecureCredential\n    properties:\n      description: My description\n      key: MY_KEY\n      value: My value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nA Synthetics secure credential can be imported using its `key`:\n\n```sh\n$ pulumi import newrelic:synthetics/secureCredential:SecureCredential foo MY_KEY\n```\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the secure credential will be created. Defaults to the account associated with the API key used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The secure credential's description.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.\n"
                },
                "lastUpdated": {
                    "type": "string",
                    "description": "The time the secure credential was last updated.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The secure credential's value.\n",
                    "secret": true
                }
            },
            "required": [
                "accountId",
                "key",
                "lastUpdated",
                "value"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the secure credential will be created. Defaults to the account associated with the API key used.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The secure credential's description.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.\n",
                    "willReplaceOnChanges": true
                },
                "lastUpdated": {
                    "type": "string",
                    "description": "The time the secure credential was last updated.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The secure credential's value.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecureCredential resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Determines the New Relic account where the secure credential will be created. Defaults to the account associated with the API key used.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The secure credential's description.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.\n",
                        "willReplaceOnChanges": true
                    },
                    "lastUpdated": {
                        "type": "string",
                        "description": "The time the secure credential was last updated.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The secure credential's value.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/stepMonitor:StepMonitor": {
            "description": "Use this resource to create, update, and delete a Synthetics Step monitor in New Relic.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst monitor = new newrelic.synthetics.StepMonitor(\"monitor\", {\n    enableScreenshotOnFailureAndScript: true,\n    locationsPublics: [\n        \"US_EAST_1\",\n        \"US_EAST_2\",\n    ],\n    period: \"EVERY_6_HOURS\",\n    status: \"ENABLED\",\n    steps: [{\n        ordinal: 0,\n        type: \"NAVIGATE\",\n        values: [\"https://www.newrelic.com\"],\n    }],\n    tags: [{\n        key: \"some_key\",\n        values: [\"some_value\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nmonitor = newrelic.synthetics.StepMonitor(\"monitor\",\n    enable_screenshot_on_failure_and_script=True,\n    locations_publics=[\n        \"US_EAST_1\",\n        \"US_EAST_2\",\n    ],\n    period=\"EVERY_6_HOURS\",\n    status=\"ENABLED\",\n    steps=[newrelic.synthetics.StepMonitorStepArgs(\n        ordinal=0,\n        type=\"NAVIGATE\",\n        values=[\"https://www.newrelic.com\"],\n    )],\n    tags=[newrelic.synthetics.StepMonitorTagArgs(\n        key=\"some_key\",\n        values=[\"some_value\"],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var monitor = new NewRelic.Synthetics.StepMonitor(\"monitor\", new()\n    {\n        EnableScreenshotOnFailureAndScript = true,\n        LocationsPublics = new[]\n        {\n            \"US_EAST_1\",\n            \"US_EAST_2\",\n        },\n        Period = \"EVERY_6_HOURS\",\n        Status = \"ENABLED\",\n        Steps = new[]\n        {\n            new NewRelic.Synthetics.Inputs.StepMonitorStepArgs\n            {\n                Ordinal = 0,\n                Type = \"NAVIGATE\",\n                Values = new[]\n                {\n                    \"https://www.newrelic.com\",\n                },\n            },\n        },\n        Tags = new[]\n        {\n            new NewRelic.Synthetics.Inputs.StepMonitorTagArgs\n            {\n                Key = \"some_key\",\n                Values = new[]\n                {\n                    \"some_value\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.NewStepMonitor(ctx, \"monitor\", \u0026synthetics.StepMonitorArgs{\n\t\t\tEnableScreenshotOnFailureAndScript: pulumi.Bool(true),\n\t\t\tLocationsPublics: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"US_EAST_1\"),\n\t\t\t\tpulumi.String(\"US_EAST_2\"),\n\t\t\t},\n\t\t\tPeriod: pulumi.String(\"EVERY_6_HOURS\"),\n\t\t\tStatus: pulumi.String(\"ENABLED\"),\n\t\t\tSteps: synthetics.StepMonitorStepArray{\n\t\t\t\t\u0026synthetics.StepMonitorStepArgs{\n\t\t\t\t\tOrdinal: pulumi.Int(0),\n\t\t\t\t\tType:    pulumi.String(\"NAVIGATE\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"https://www.newrelic.com\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: synthetics.StepMonitorTagArray{\n\t\t\t\t\u0026synthetics.StepMonitorTagArgs{\n\t\t\t\t\tKey: pulumi.String(\"some_key\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"some_value\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.StepMonitor;\nimport com.pulumi.newrelic.synthetics.StepMonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.StepMonitorStepArgs;\nimport com.pulumi.newrelic.synthetics.inputs.StepMonitorTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var monitor = new StepMonitor(\"monitor\", StepMonitorArgs.builder()        \n            .enableScreenshotOnFailureAndScript(true)\n            .locationsPublics(            \n                \"US_EAST_1\",\n                \"US_EAST_2\")\n            .period(\"EVERY_6_HOURS\")\n            .status(\"ENABLED\")\n            .steps(StepMonitorStepArgs.builder()\n                .ordinal(0)\n                .type(\"NAVIGATE\")\n                .values(\"https://www.newrelic.com\")\n                .build())\n            .tags(StepMonitorTagArgs.builder()\n                .key(\"some_key\")\n                .values(\"some_value\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  monitor:\n    type: newrelic:synthetics:StepMonitor\n    properties:\n      enableScreenshotOnFailureAndScript: true\n      locationsPublics:\n        - US_EAST_1\n        - US_EAST_2\n      period: EVERY_6_HOURS\n      status: ENABLED\n      steps:\n        - ordinal: 0\n          type: NAVIGATE\n          values:\n            - https://www.newrelic.com\n      tags:\n        - key: some_key\n          values:\n            - some_value\n```\n\u003c!--End PulumiCodeChooser --\u003e\nSee additional examples.\n\n## Additional Examples\n\n### Create a monitor with a private location\n\nThe below example shows how you can define a private location and attach it to a monitor.\n\n\u003e **NOTE:** It can take up to 10 minutes for a private location to become available.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.PrivateLocation;\nimport com.pulumi.newrelic.synthetics.PrivateLocationArgs;\nimport com.pulumi.newrelic.synthetics.StepMonitor;\nimport com.pulumi.newrelic.synthetics.StepMonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.StepMonitorLocationPrivateArgs;\nimport com.pulumi.newrelic.synthetics.inputs.StepMonitorStepArgs;\nimport com.pulumi.newrelic.synthetics.inputs.StepMonitorTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var location = new PrivateLocation(\"location\", PrivateLocationArgs.builder()        \n            .description(\"Test Description\")\n            .verifiedScriptExecution(true)\n            .build());\n\n        var bar = new StepMonitor(\"bar\", StepMonitorArgs.builder()        \n            .uri(\"https://www.one.example.com\")\n            .locationPrivates(StepMonitorLocationPrivateArgs.builder()\n                .guid(location.id())\n                .vsePassword(\"secret\")\n                .build())\n            .period(\"EVERY_6_HOURS\")\n            .status(\"ENABLED\")\n            .steps(StepMonitorStepArgs.builder()\n                .ordinal(0)\n                .type(\"NAVIGATE\")\n                .values(\"https://google.com\")\n                .build())\n            .tags(StepMonitorTagArgs.builder()\n                .key(\"some_key\")\n                .values(\"some_value\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  location:\n    type: newrelic:synthetics:PrivateLocation\n    properties:\n      description: Test Description\n      verifiedScriptExecution: true\n  bar:\n    type: newrelic:synthetics:StepMonitor\n    properties:\n      uri: https://www.one.example.com\n      locationPrivates:\n        - guid: ${location.id}\n          vsePassword: secret\n      period: EVERY_6_HOURS\n      status: ENABLED\n      steps:\n        - ordinal: 0\n          type: NAVIGATE\n          values:\n            - https://google.com\n      tags:\n        - key: some_key\n          values:\n            - some_value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSynthetics step monitor scripts can be imported using the `guid`, e.g.\n\nbash\n\n```sh\n$ pulumi import newrelic:synthetics/stepMonitor:StepMonitor monitor \u003cguid\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account in which the Synthetics monitor will be created.\n"
                },
                "enableScreenshotOnFailureAndScript": {
                    "type": "boolean",
                    "description": "Capture a screenshot during job execution.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The unique identifier for the Synthetics private location in New Relic.\n"
                },
                "locationPrivates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/StepMonitorLocationPrivate:StepMonitorLocationPrivate"
                    },
                    "description": "The location the monitor will run from. At least one of `locations_public` or `location_private` is required. See Nested locations_private blocks below for details.\n"
                },
                "locationsPublics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locations_public` or `location_private` is required.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the monitor.\n"
                },
                "period": {
                    "type": "string",
                    "description": "The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.\n"
                },
                "periodInMinutes": {
                    "type": "integer",
                    "description": "The interval in minutes at which Synthetic monitor should run.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The monitor status (i.e. ENABLED, MUTED, DISABLED). Note: The 'MUTED' status is now deprecated, and support for this\nvalue will soon be removed from the Terraform Provider in an upcoming release. It is highly recommended for users to\nrefrain from using this value and shift to alternatives.\n"
                },
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/StepMonitorStep:StepMonitorStep"
                    },
                    "description": "The steps that make up the script the monitor will run. See Nested steps blocks below for details.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/StepMonitorTag:StepMonitorTag"
                    },
                    "description": "The tags that will be associated with the monitor. See Nested tag blocks below for details.\n"
                }
            },
            "required": [
                "accountId",
                "guid",
                "name",
                "period",
                "periodInMinutes",
                "status",
                "steps"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account in which the Synthetics monitor will be created.\n",
                    "willReplaceOnChanges": true
                },
                "enableScreenshotOnFailureAndScript": {
                    "type": "boolean",
                    "description": "Capture a screenshot during job execution.\n"
                },
                "locationPrivates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/StepMonitorLocationPrivate:StepMonitorLocationPrivate"
                    },
                    "description": "The location the monitor will run from. At least one of `locations_public` or `location_private` is required. See Nested locations_private blocks below for details.\n"
                },
                "locationsPublics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locations_public` or `location_private` is required.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the monitor.\n"
                },
                "period": {
                    "type": "string",
                    "description": "The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The monitor status (i.e. ENABLED, MUTED, DISABLED). Note: The 'MUTED' status is now deprecated, and support for this\nvalue will soon be removed from the Terraform Provider in an upcoming release. It is highly recommended for users to\nrefrain from using this value and shift to alternatives.\n"
                },
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/StepMonitorStep:StepMonitorStep"
                    },
                    "description": "The steps that make up the script the monitor will run. See Nested steps blocks below for details.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/StepMonitorTag:StepMonitorTag"
                    },
                    "description": "The tags that will be associated with the monitor. See Nested tag blocks below for details.\n"
                }
            },
            "requiredInputs": [
                "period",
                "status",
                "steps"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StepMonitor resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account in which the Synthetics monitor will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableScreenshotOnFailureAndScript": {
                        "type": "boolean",
                        "description": "Capture a screenshot during job execution.\n"
                    },
                    "guid": {
                        "type": "string",
                        "description": "The unique identifier for the Synthetics private location in New Relic.\n"
                    },
                    "locationPrivates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:synthetics/StepMonitorLocationPrivate:StepMonitorLocationPrivate"
                        },
                        "description": "The location the monitor will run from. At least one of `locations_public` or `location_private` is required. See Nested locations_private blocks below for details.\n"
                    },
                    "locationsPublics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don't need the `AWS_` prefix as the provider uses NerdGraph. At least one of either `locations_public` or `location_private` is required.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the monitor.\n"
                    },
                    "period": {
                        "type": "string",
                        "description": "The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.\n"
                    },
                    "periodInMinutes": {
                        "type": "integer",
                        "description": "The interval in minutes at which Synthetic monitor should run.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The monitor status (i.e. ENABLED, MUTED, DISABLED). Note: The 'MUTED' status is now deprecated, and support for this\nvalue will soon be removed from the Terraform Provider in an upcoming release. It is highly recommended for users to\nrefrain from using this value and shift to alternatives.\n"
                    },
                    "steps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:synthetics/StepMonitorStep:StepMonitorStep"
                        },
                        "description": "The steps that make up the script the monitor will run. See Nested steps blocks below for details.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:synthetics/StepMonitorTag:StepMonitorTag"
                        },
                        "description": "The tags that will be associated with the monitor. See Nested tag blocks below for details.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "newrelic:index/getAccount:getAccount": {
            "description": "Use this data source to get information about a specific account in New Relic.\nAccounts can be located by ID or name.  At most one of the two attributes can\nbe provided. If neither are provided, the provider's `account_id` will be used.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst acc = newrelic.getAccount({\n    scope: \"global\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nacc = newrelic.get_account(scope=\"global\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var acc = NewRelic.GetAccount.Invoke(new()\n    {\n        Scope = \"global\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.GetAccount(ctx, \u0026newrelic.GetAccountArgs{\n\t\t\tScope: pulumi.StringRef(\"global\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var acc = NewrelicFunctions.getAccount(GetAccountArgs.builder()\n            .scope(\"global\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  acc:\n    fn::invoke:\n      Function: newrelic:getAccount\n      Arguments:\n        scope: global\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccount.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account ID in New Relic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The account name in New Relic.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of the account in New Relic.  Valid values are \"global\" and \"in_region\".  Defaults to \"in_region\".\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccount.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "newrelic:index/getAlertChannel:getAlertChannel": {
            "description": "Use this data source to get information about a specific alert channel in New Relic that already exists.\n\n\u003e **WARNING:** The `newrelic.AlertChannel` data source is deprecated and will be removed in the next major release.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetAlertChannelArgs;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.AlertPolicyChannel;\nimport com.pulumi.newrelic.AlertPolicyChannelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooAlertChannel = NewrelicFunctions.getAlertChannel(GetAlertChannelArgs.builder()\n            .name(\"foo@example.com\")\n            .build());\n\n        var fooAlertPolicy = new AlertPolicy(\"fooAlertPolicy\");\n\n        var fooAlertPolicyChannel = new AlertPolicyChannel(\"fooAlertPolicyChannel\", AlertPolicyChannelArgs.builder()        \n            .policyId(fooAlertPolicy.id())\n            .channelId(fooAlertChannel.applyValue(getAlertChannelResult -\u003e getAlertChannelResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Resource\n  fooAlertPolicy:\n    type: newrelic:AlertPolicy\n  # Using the data source and resource together\n  fooAlertPolicyChannel:\n    type: newrelic:AlertPolicyChannel\n    properties:\n      policyId: ${fooAlertPolicy.id}\n      channelId: ${fooAlertChannel.id}\nvariables:\n  fooAlertChannel:\n    fn::invoke:\n      Function: newrelic:getAlertChannel\n      Arguments:\n        name: foo@example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAlertChannel.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on.  This allows you to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the alert channel in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAlertChannel.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "config": {
                        "$ref": "#/types/newrelic:index/getAlertChannelConfig:getAlertChannelConfig",
                        "description": "Alert channel configuration.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "policyIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of policy IDs associated with the alert channel.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Alert channel type, either: `email`, `opsgenie`, `pagerduty`, `slack`, `victorops`, or `webhook`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "config",
                    "name",
                    "policyIds",
                    "type",
                    "id"
                ]
            }
        },
        "newrelic:index/getAlertPolicy:getAlertPolicy": {
            "description": "Use this data source to get information about a specific alert policy in New Relic that already exists.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetAlertChannelArgs;\nimport com.pulumi.newrelic.inputs.GetAlertPolicyArgs;\nimport com.pulumi.newrelic.AlertPolicyChannel;\nimport com.pulumi.newrelic.AlertPolicyChannelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooAlertChannel = NewrelicFunctions.getAlertChannel(GetAlertChannelArgs.builder()\n            .name(\"foo@example.com\")\n            .build());\n\n        final var fooAlertPolicy = NewrelicFunctions.getAlertPolicy(GetAlertPolicyArgs.builder()\n            .name(\"foo policy\")\n            .build());\n\n        var fooAlertPolicyChannel = new AlertPolicyChannel(\"fooAlertPolicyChannel\", AlertPolicyChannelArgs.builder()        \n            .policyId(fooAlertPolicy.applyValue(getAlertPolicyResult -\u003e getAlertPolicyResult.id()))\n            .channelId(fooAlertChannel.applyValue(getAlertChannelResult -\u003e getAlertChannelResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooAlertPolicyChannel:\n    type: newrelic:AlertPolicyChannel\n    properties:\n      policyId: ${fooAlertPolicy.id}\n      channelId: ${fooAlertChannel.id}\nvariables:\n  fooAlertChannel:\n    fn::invoke:\n      Function: newrelic:getAlertChannel\n      Arguments:\n        name: foo@example.com\n  fooAlertPolicy:\n    fn::invoke:\n      Function: newrelic:getAlertPolicy\n      Arguments:\n        name: foo policy\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAlertPolicy.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on.  This allows you to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "incidentPreference": {
                        "type": "string",
                        "description": "The rollup strategy for the policy, which can have one of the following values:\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the alert policy in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAlertPolicy.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The time the policy was created.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "incidentPreference": {
                        "type": "string",
                        "description": "The rollup strategy for the policy, which can have one of the following values:\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The time the policy was last updated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "createdAt",
                    "name",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "newrelic:index/getApplication:getApplication": {
            "description": "#### DEPRECATED! Use at your own risk. Use the `newrelic.getEntity` data source instead. This feature may be removed in the next major release\n\nUse this data source to get information about a specific application in New Relic that already exists.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst app = newrelic.getApplication({\n    name: \"my-app\",\n});\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooAlertCondition = new newrelic.AlertCondition(\"fooAlertCondition\", {\n    policyId: fooAlertPolicy.id,\n    type: \"apm_app_metric\",\n    entities: [app.then(app =\u003e app.id)],\n    metric: \"apdex\",\n    runbookUrl: \"https://www.example.com\",\n    terms: [{\n        duration: 5,\n        operator: \"below\",\n        priority: \"critical\",\n        threshold: 0.75,\n        timeFunction: \"all\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\napp = newrelic.get_application(name=\"my-app\")\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_alert_condition = newrelic.AlertCondition(\"fooAlertCondition\",\n    policy_id=foo_alert_policy.id,\n    type=\"apm_app_metric\",\n    entities=[app.id],\n    metric=\"apdex\",\n    runbook_url=\"https://www.example.com\",\n    terms=[newrelic.AlertConditionTermArgs(\n        duration=5,\n        operator=\"below\",\n        priority=\"critical\",\n        threshold=0.75,\n        time_function=\"all\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = NewRelic.GetApplication.Invoke(new()\n    {\n        Name = \"my-app\",\n    });\n\n    var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\");\n\n    var fooAlertCondition = new NewRelic.AlertCondition(\"fooAlertCondition\", new()\n    {\n        PolicyId = fooAlertPolicy.Id,\n        Type = \"apm_app_metric\",\n        Entities = new[]\n        {\n            app.Apply(getApplicationResult =\u003e getApplicationResult.Id),\n        },\n        Metric = \"apdex\",\n        RunbookUrl = \"https://www.example.com\",\n        Terms = new[]\n        {\n            new NewRelic.Inputs.AlertConditionTermArgs\n            {\n                Duration = 5,\n                Operator = \"below\",\n                Priority = \"critical\",\n                Threshold = 0.75,\n                TimeFunction = \"all\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tapp, err := newrelic.GetApplication(ctx, \u0026newrelic.GetApplicationArgs{\n\t\t\tName: \"my-app\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewAlertCondition(ctx, \"fooAlertCondition\", \u0026newrelic.AlertConditionArgs{\n\t\t\tPolicyId: fooAlertPolicy.ID(),\n\t\t\tType:     pulumi.String(\"apm_app_metric\"),\n\t\t\tEntities: pulumi.IntArray{\n\t\t\t\t*pulumi.String(app.Id),\n\t\t\t},\n\t\t\tMetric:     pulumi.String(\"apdex\"),\n\t\t\tRunbookUrl: pulumi.String(\"https://www.example.com\"),\n\t\t\tTerms: newrelic.AlertConditionTermArray{\n\t\t\t\t\u0026newrelic.AlertConditionTermArgs{\n\t\t\t\t\tDuration:     pulumi.Int(5),\n\t\t\t\t\tOperator:     pulumi.String(\"below\"),\n\t\t\t\t\tPriority:     pulumi.String(\"critical\"),\n\t\t\t\t\tThreshold:    pulumi.Float64(0.75),\n\t\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetApplicationArgs;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.AlertCondition;\nimport com.pulumi.newrelic.AlertConditionArgs;\nimport com.pulumi.newrelic.inputs.AlertConditionTermArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var app = NewrelicFunctions.getApplication(GetApplicationArgs.builder()\n            .name(\"my-app\")\n            .build());\n\n        var fooAlertPolicy = new AlertPolicy(\"fooAlertPolicy\");\n\n        var fooAlertCondition = new AlertCondition(\"fooAlertCondition\", AlertConditionArgs.builder()        \n            .policyId(fooAlertPolicy.id())\n            .type(\"apm_app_metric\")\n            .entities(app.applyValue(getApplicationResult -\u003e getApplicationResult.id()))\n            .metric(\"apdex\")\n            .runbookUrl(\"https://www.example.com\")\n            .terms(AlertConditionTermArgs.builder()\n                .duration(5)\n                .operator(\"below\")\n                .priority(\"critical\")\n                .threshold(\"0.75\")\n                .timeFunction(\"all\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooAlertPolicy:\n    type: newrelic:AlertPolicy\n  fooAlertCondition:\n    type: newrelic:AlertCondition\n    properties:\n      policyId: ${fooAlertPolicy.id}\n      type: apm_app_metric\n      entities:\n        - ${app.id}\n      metric: apdex\n      runbookUrl: https://www.example.com\n      terms:\n        - duration: 5\n          operator: below\n          priority: critical\n          threshold: '0.75'\n          timeFunction: all\nvariables:\n  app:\n    fn::invoke:\n      Function: newrelic:getApplication\n      Arguments:\n        name: my-app\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getApplication.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the application in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApplication.\n",
                "properties": {
                    "hostIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of host IDs associated with the application.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of instance IDs associated with the application.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "hostIds",
                    "instanceIds",
                    "name",
                    "id"
                ]
            }
        },
        "newrelic:index/getAuthenticationDomain:getAuthenticationDomain": {
            "description": "Use this data source to fetch the ID of an authentication domain belonging to your account, matching the specified name.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooAuthenticationDomain = newrelic.getAuthenticationDomain({\n    name: \"Test Authentication Domain\",\n});\nexport const foo = fooAuthenticationDomain.then(fooAuthenticationDomain =\u003e fooAuthenticationDomain.id);\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_authentication_domain = newrelic.get_authentication_domain(name=\"Test Authentication Domain\")\npulumi.export(\"foo\", foo_authentication_domain.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooAuthenticationDomain = NewRelic.GetAuthenticationDomain.Invoke(new()\n    {\n        Name = \"Test Authentication Domain\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"foo\"] = fooAuthenticationDomain.Apply(getAuthenticationDomainResult =\u003e getAuthenticationDomainResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooAuthenticationDomain, err := newrelic.GetAuthenticationDomain(ctx, \u0026newrelic.GetAuthenticationDomainArgs{\n\t\t\tName: \"Test Authentication Domain\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"foo\", fooAuthenticationDomain.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetAuthenticationDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooAuthenticationDomain = NewrelicFunctions.getAuthenticationDomain(GetAuthenticationDomainArgs.builder()\n            .name(\"Test Authentication Domain\")\n            .build());\n\n        ctx.export(\"foo\", fooAuthenticationDomain.applyValue(getAuthenticationDomainResult -\u003e getAuthenticationDomainResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  fooAuthenticationDomain:\n    fn::invoke:\n      Function: newrelic:getAuthenticationDomain\n      Arguments:\n        name: Test Authentication Domain\noutputs:\n  foo: ${fooAuthenticationDomain.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAuthenticationDomain.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the authentication domain to be searched for. An error is thrown, if no authentication domain is found with the specified name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAuthenticationDomain.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the matching authentication domain fetched.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name"
                ]
            }
        },
        "newrelic:index/getCloudAccount:getCloudAccount": {
            "description": "Use this data source to get information about a specific cloud account linked to New Relic.\nAccounts can be located by a combination of New Relic Account ID, name and cloud provider (aws, gcp, azure, etc). Name and cloud provider are required attributes. If no account_id is specified on the resource the provider level account_id will be used. \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst account = newrelic.getCloudAccount({\n    accountId: 12345,\n    cloudProvider: \"aws\",\n    name: \"my aws account\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\naccount = newrelic.get_cloud_account(account_id=12345,\n    cloud_provider=\"aws\",\n    name=\"my aws account\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var account = NewRelic.GetCloudAccount.Invoke(new()\n    {\n        AccountId = 12345,\n        CloudProvider = \"aws\",\n        Name = \"my aws account\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.GetCloudAccount(ctx, \u0026newrelic.GetCloudAccountArgs{\n\t\t\tAccountId:     pulumi.IntRef(12345),\n\t\t\tCloudProvider: \"aws\",\n\t\t\tName:          \"my aws account\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetCloudAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var account = NewrelicFunctions.getCloudAccount(GetCloudAccountArgs.builder()\n            .accountId(12345)\n            .cloudProvider(\"aws\")\n            .name(\"my aws account\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  account:\n    fn::invoke:\n      Function: newrelic:getCloudAccount\n      Arguments:\n        accountId: 12345\n        cloudProvider: aws\n        name: my aws account\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudAccount.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account ID in New Relic.\n"
                    },
                    "cloudProvider": {
                        "type": "string",
                        "description": "The cloud provider of the account (aws, gcp, azure, etc)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cloud account name in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudProvider",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCloudAccount.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "cloudProvider": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cloudProvider",
                    "name",
                    "id"
                ]
            }
        },
        "newrelic:index/getEntity:getEntity": {
            "description": "Use this data source to get information about a specific entity in New Relic One that already exists.\n\n### Example: Filter By Account ID\n\nThe default behaviour of this data source is to retrieve entities matching the specified parameters (such as `name`, `domain`, `type`) from NerdGraph with the credentials specified in the configuration of the provider (account ID and API Key), filter them by the account ID specified in the configuration of the provider, and return the first match. \n\nThis would mean, if no entity with the specified search parameters is found associated with the account ID in the configuration of the provider, i.e. `NEW_RELIC_ACCOUNT_ID`, an error is thrown, stating that no matching entity has been found.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst app = newrelic.getEntity({\n    domain: \"APM\",\n    name: \"my-app\",\n    type: \"APPLICATION\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\napp = newrelic.get_entity(domain=\"APM\",\n    name=\"my-app\",\n    type=\"APPLICATION\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = NewRelic.GetEntity.Invoke(new()\n    {\n        Domain = \"APM\",\n        Name = \"my-app\",\n        Type = \"APPLICATION\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.GetEntity(ctx, \u0026newrelic.GetEntityArgs{\n\t\t\tDomain: pulumi.StringRef(\"APM\"),\n\t\t\tName:   \"my-app\",\n\t\t\tType:   pulumi.StringRef(\"APPLICATION\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetEntityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var app = NewrelicFunctions.getEntity(GetEntityArgs.builder()\n            .domain(\"APM\")\n            .name(\"my-app\")\n            .type(\"APPLICATION\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  app:\n    fn::invoke:\n      Function: newrelic:getEntity\n      Arguments:\n        domain: APM\n        name: my-app\n        type: APPLICATION\n```\n\u003c!--End PulumiCodeChooser --\u003e\nHowever, in order to cater to scenarios in which it could be necessary to retrieve an entity belonging to a subaccount using the account ID and API Key of the parent account (for instance, when entities with identical names are present in both the parent account and subaccounts, since matching entities from subaccounts too are returned by NerdGraph), the `account_id` attribute of this data source may be availed. This ensures that the account ID in the configuration of the provider, used to filter entities returned by the API is now overridden by the `account_id` specified in the configuration; i.e., in the below example, the data source would now return an entity matching the specified `name`, belonging to the account with the ID `account_id`.\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst app = newrelic.getEntity({\n    accountId: 654321,\n    domain: \"APM\",\n    name: \"my-app\",\n    type: \"APPLICATION\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\napp = newrelic.get_entity(account_id=654321,\n    domain=\"APM\",\n    name=\"my-app\",\n    type=\"APPLICATION\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = NewRelic.GetEntity.Invoke(new()\n    {\n        AccountId = 654321,\n        Domain = \"APM\",\n        Name = \"my-app\",\n        Type = \"APPLICATION\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.GetEntity(ctx, \u0026newrelic.GetEntityArgs{\n\t\t\tAccountId: pulumi.IntRef(654321),\n\t\t\tDomain:    pulumi.StringRef(\"APM\"),\n\t\t\tName:      \"my-app\",\n\t\t\tType:      pulumi.StringRef(\"APPLICATION\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetEntityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var app = NewrelicFunctions.getEntity(GetEntityArgs.builder()\n            .accountId(654321)\n            .domain(\"APM\")\n            .name(\"my-app\")\n            .type(\"APPLICATION\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  app:\n    fn::invoke:\n      Function: newrelic:getEntity\n      Arguments:\n        accountId: 654321\n        domain: APM\n        name: my-app\n        type: APPLICATION\n```\n\u003c!--End PulumiCodeChooser --\u003e\nThe following example explains a use case along the lines of the aforementioned; using the `account_id` argument in the data source to allow the filtering criteria to be the `account_id` specified (of the subaccount), and not the account ID in the provider configuration. \n\nIn simpler terms, when entities are queried from the parent account, entities with matching names are returned from subaccounts too, hence, specifying the `account_id` of the subaccount in the configuration allows the entity returned to belong to the subaccount with `account_id`.\n### Query for an OTEL entity\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst app = newrelic.getEntity({\n    domain: \"EXT\",\n    name: \"my-otel-app\",\n    tags: [{\n        key: \"accountID\",\n        value: \"12345\",\n    }],\n    type: \"SERVICE\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\napp = newrelic.get_entity(domain=\"EXT\",\n    name=\"my-otel-app\",\n    tags=[newrelic.GetEntityTagArgs(\n        key=\"accountID\",\n        value=\"12345\",\n    )],\n    type=\"SERVICE\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = NewRelic.GetEntity.Invoke(new()\n    {\n        Domain = \"EXT\",\n        Name = \"my-otel-app\",\n        Tags = new[]\n        {\n            new NewRelic.Inputs.GetEntityTagInputArgs\n            {\n                Key = \"accountID\",\n                Value = \"12345\",\n            },\n        },\n        Type = \"SERVICE\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.GetEntity(ctx, \u0026newrelic.GetEntityArgs{\n\t\t\tDomain: pulumi.StringRef(\"EXT\"),\n\t\t\tName:   \"my-otel-app\",\n\t\t\tTags: []newrelic.GetEntityTag{\n\t\t\t\t{\n\t\t\t\t\tKey:   \"accountID\",\n\t\t\t\t\tValue: \"12345\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.StringRef(\"SERVICE\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetEntityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var app = NewrelicFunctions.getEntity(GetEntityArgs.builder()\n            .domain(\"EXT\")\n            .name(\"my-otel-app\")\n            .tags(GetEntityTagArgs.builder()\n                .key(\"accountID\")\n                .value(\"12345\")\n                .build())\n            .type(\"SERVICE\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  app:\n    fn::invoke:\n      Function: newrelic:getEntity\n      Arguments:\n        domain: EXT\n        name: my-otel-app\n        tags:\n          - key: accountID\n            value: '12345'\n        type: SERVICE\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Query for an entity by type (AWS Lambda entity in this example)\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst app = newrelic.getEntity({\n    name: \"my_lambda_trace\",\n    type: \"AWSLAMBDAFUNCTION\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\napp = newrelic.get_entity(name=\"my_lambda_trace\",\n    type=\"AWSLAMBDAFUNCTION\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = NewRelic.GetEntity.Invoke(new()\n    {\n        Name = \"my_lambda_trace\",\n        Type = \"AWSLAMBDAFUNCTION\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.GetEntity(ctx, \u0026newrelic.GetEntityArgs{\n\t\t\tName: \"my_lambda_trace\",\n\t\t\tType: pulumi.StringRef(\"AWSLAMBDAFUNCTION\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetEntityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var app = NewrelicFunctions.getEntity(GetEntityArgs.builder()\n            .name(\"my_lambda_trace\")\n            .type(\"AWSLAMBDAFUNCTION\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  app:\n    fn::invoke:\n      Function: newrelic:getEntity\n      Arguments:\n        name: my_lambda_trace\n        type: AWSLAMBDAFUNCTION\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEntity.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID the entity to be returned would be associated with, i.e. if specified, the data source would filter matching entities received by `account_id` and return the first match. If not, matching entities are filtered by the account ID specified in the configuration of the provider. See the **Example: Filter By Account ID** section above for more details.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The entity's domain. Valid values are APM, BROWSER, INFRA, MOBILE, SYNTH, and EXT. If not specified, all domains are searched.\n"
                    },
                    "ignoreCase": {
                        "type": "boolean",
                        "description": "Ignore case of the `name` when searching for the entity. Defaults to false.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the entity in New Relic One.  The first entity matching this name for the given search parameters will be returned.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/getEntityTag:getEntityTag"
                        },
                        "description": "A tag applied to the entity. See Nested tag blocks below for details.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The entity's type. Valid values are APPLICATION, DASHBOARD, HOST, MONITOR, WORKLOAD, AWSLAMBDAFUNCTION, SERVICE_LEVEL, and KEY_TRANSACTION. Note: Other entity types may also be queryable as the list of entity types may fluctuate over time.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEntity.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "applicationId": {
                        "type": "integer",
                        "description": "The domain-specific application ID of the entity. Only returned for APM and Browser applications.\n"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "guid": {
                        "type": "string",
                        "description": "The unique GUID of the entity.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ignoreCase": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "servingApmApplicationId": {
                        "type": "integer",
                        "description": "The browser-specific ID of the backing APM entity. Only returned for Browser applications.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/getEntityTag:getEntityTag"
                        }
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "applicationId",
                    "domain",
                    "guid",
                    "name",
                    "servingApmApplicationId",
                    "type",
                    "id"
                ]
            }
        },
        "newrelic:index/getGroup:getGroup": {
            "description": "The `newrelic.Group` data source helps search for a group by its name and retrieve the ID of the matching group and other associated attributes.\n\n## Example Usage\n\nThe below example illustrates fetching the ID of a group (and IDs of users who belong to the group, if any) using the required arguments.\n    \n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooAuthenticationDomain = newrelic.getAuthenticationDomain({\n    name: \"Test Authentication Domain\",\n});\nconst fooGroup = fooAuthenticationDomain.then(fooAuthenticationDomain =\u003e newrelic.getGroup({\n    authenticationDomainId: fooAuthenticationDomain.id,\n    name: \"Test Group\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_authentication_domain = newrelic.get_authentication_domain(name=\"Test Authentication Domain\")\nfoo_group = newrelic.get_group(authentication_domain_id=foo_authentication_domain.id,\n    name=\"Test Group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooAuthenticationDomain = NewRelic.GetAuthenticationDomain.Invoke(new()\n    {\n        Name = \"Test Authentication Domain\",\n    });\n\n    var fooGroup = NewRelic.GetGroup.Invoke(new()\n    {\n        AuthenticationDomainId = fooAuthenticationDomain.Apply(getAuthenticationDomainResult =\u003e getAuthenticationDomainResult.Id),\n        Name = \"Test Group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooAuthenticationDomain, err := newrelic.GetAuthenticationDomain(ctx, \u0026newrelic.GetAuthenticationDomainArgs{\n\t\t\tName: \"Test Authentication Domain\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.LookupGroup(ctx, \u0026newrelic.LookupGroupArgs{\n\t\t\tAuthenticationDomainId: fooAuthenticationDomain.Id,\n\t\t\tName:                   \"Test Group\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetAuthenticationDomainArgs;\nimport com.pulumi.newrelic.inputs.GetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooAuthenticationDomain = NewrelicFunctions.getAuthenticationDomain(GetAuthenticationDomainArgs.builder()\n            .name(\"Test Authentication Domain\")\n            .build());\n\n        final var fooGroup = NewrelicFunctions.getGroup(GetGroupArgs.builder()\n            .authenticationDomainId(fooAuthenticationDomain.applyValue(getAuthenticationDomainResult -\u003e getAuthenticationDomainResult.id()))\n            .name(\"Test Group\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  fooAuthenticationDomain:\n    fn::invoke:\n      Function: newrelic:getAuthenticationDomain\n      Arguments:\n        name: Test Authentication Domain\n  fooGroup:\n    fn::invoke:\n      Function: newrelic:getGroup\n      Arguments:\n        authenticationDomainId: ${fooAuthenticationDomain.id}\n        name: Test Group\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "authenticationDomainId": {
                        "type": "string",
                        "description": "The ID of the authentication domain the group to be searched for belongs to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the group to search for.\n\n\u003e **NOTE** The ID of an authentication domain can be retrieved using its name, via the data source `newrelic.getAuthenticationDomain`, as shown in the example above. Head over to the documentation of this data source for more details and examples.\n"
                    }
                },
                "type": "object",
                "required": [
                    "authenticationDomainId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "authenticationDomainId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the fetched matching group.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of users who belong to the group. In the absence of any users in the group, the value of this attribute would be an empty list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "authenticationDomainId",
                    "id",
                    "name",
                    "userIds"
                ]
            }
        },
        "newrelic:index/getKeyTransaction:getKeyTransaction": {
            "description": "Use this data source to get information about a specific key transaction in New Relic that already exists.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst txn = newrelic.getKeyTransaction({\n    name: \"txn\",\n});\nconst fooAlertPolicy = new newrelic.AlertPolicy(\"fooAlertPolicy\", {});\nconst fooAlertCondition = new newrelic.AlertCondition(\"fooAlertCondition\", {\n    policyId: fooAlertPolicy.id,\n    type: \"apm_kt_metric\",\n    entities: [txn.then(txn =\u003e txn.id)],\n    metric: \"error_percentage\",\n    runbookUrl: \"https://www.example.com\",\n    terms: [{\n        duration: 5,\n        operator: \"below\",\n        priority: \"critical\",\n        threshold: 0.75,\n        timeFunction: \"all\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\ntxn = newrelic.get_key_transaction(name=\"txn\")\nfoo_alert_policy = newrelic.AlertPolicy(\"fooAlertPolicy\")\nfoo_alert_condition = newrelic.AlertCondition(\"fooAlertCondition\",\n    policy_id=foo_alert_policy.id,\n    type=\"apm_kt_metric\",\n    entities=[txn.id],\n    metric=\"error_percentage\",\n    runbook_url=\"https://www.example.com\",\n    terms=[newrelic.AlertConditionTermArgs(\n        duration=5,\n        operator=\"below\",\n        priority=\"critical\",\n        threshold=0.75,\n        time_function=\"all\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var txn = NewRelic.GetKeyTransaction.Invoke(new()\n    {\n        Name = \"txn\",\n    });\n\n    var fooAlertPolicy = new NewRelic.AlertPolicy(\"fooAlertPolicy\");\n\n    var fooAlertCondition = new NewRelic.AlertCondition(\"fooAlertCondition\", new()\n    {\n        PolicyId = fooAlertPolicy.Id,\n        Type = \"apm_kt_metric\",\n        Entities = new[]\n        {\n            txn.Apply(getKeyTransactionResult =\u003e getKeyTransactionResult.Id),\n        },\n        Metric = \"error_percentage\",\n        RunbookUrl = \"https://www.example.com\",\n        Terms = new[]\n        {\n            new NewRelic.Inputs.AlertConditionTermArgs\n            {\n                Duration = 5,\n                Operator = \"below\",\n                Priority = \"critical\",\n                Threshold = 0.75,\n                TimeFunction = \"all\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttxn, err := newrelic.GetKeyTransaction(ctx, \u0026newrelic.GetKeyTransactionArgs{\n\t\t\tName: \"txn\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooAlertPolicy, err := newrelic.NewAlertPolicy(ctx, \"fooAlertPolicy\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewAlertCondition(ctx, \"fooAlertCondition\", \u0026newrelic.AlertConditionArgs{\n\t\t\tPolicyId: fooAlertPolicy.ID(),\n\t\t\tType:     pulumi.String(\"apm_kt_metric\"),\n\t\t\tEntities: pulumi.IntArray{\n\t\t\t\t*pulumi.String(txn.Id),\n\t\t\t},\n\t\t\tMetric:     pulumi.String(\"error_percentage\"),\n\t\t\tRunbookUrl: pulumi.String(\"https://www.example.com\"),\n\t\t\tTerms: newrelic.AlertConditionTermArray{\n\t\t\t\t\u0026newrelic.AlertConditionTermArgs{\n\t\t\t\t\tDuration:     pulumi.Int(5),\n\t\t\t\t\tOperator:     pulumi.String(\"below\"),\n\t\t\t\t\tPriority:     pulumi.String(\"critical\"),\n\t\t\t\t\tThreshold:    pulumi.Float64(0.75),\n\t\t\t\t\tTimeFunction: pulumi.String(\"all\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetKeyTransactionArgs;\nimport com.pulumi.newrelic.AlertPolicy;\nimport com.pulumi.newrelic.AlertCondition;\nimport com.pulumi.newrelic.AlertConditionArgs;\nimport com.pulumi.newrelic.inputs.AlertConditionTermArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var txn = NewrelicFunctions.getKeyTransaction(GetKeyTransactionArgs.builder()\n            .name(\"txn\")\n            .build());\n\n        var fooAlertPolicy = new AlertPolicy(\"fooAlertPolicy\");\n\n        var fooAlertCondition = new AlertCondition(\"fooAlertCondition\", AlertConditionArgs.builder()        \n            .policyId(fooAlertPolicy.id())\n            .type(\"apm_kt_metric\")\n            .entities(txn.applyValue(getKeyTransactionResult -\u003e getKeyTransactionResult.id()))\n            .metric(\"error_percentage\")\n            .runbookUrl(\"https://www.example.com\")\n            .terms(AlertConditionTermArgs.builder()\n                .duration(5)\n                .operator(\"below\")\n                .priority(\"critical\")\n                .threshold(\"0.75\")\n                .timeFunction(\"all\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooAlertPolicy:\n    type: newrelic:AlertPolicy\n  fooAlertCondition:\n    type: newrelic:AlertCondition\n    properties:\n      policyId: ${fooAlertPolicy.id}\n      type: apm_kt_metric\n      entities:\n        - ${txn.id}\n      metric: error_percentage\n      runbookUrl: https://www.example.com\n      terms:\n        - duration: 5\n          operator: below\n          priority: critical\n          threshold: '0.75'\n          timeFunction: all\nvariables:\n  txn:\n    fn::invoke:\n      Function: newrelic:getKeyTransaction\n      Arguments:\n        name: txn\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKeyTransaction.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the key transaction in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKeyTransaction.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "newrelic:index/getNotificationDestination:getNotificationDestination": {
            "inputs": {
                "description": "A collection of arguments for invoking getNotificationDestination.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on.  This allows you to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the notification destination in New Relic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the notification destination.\n\nOptional:\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNotificationDestination.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "An indication whether the notification destination is active or not.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the notification destination.\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/getNotificationDestinationProperty:getNotificationDestinationProperty"
                        },
                        "description": "A nested block that describes a notification destination property.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the notification destination.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The notification destination type, either: `EMAIL`, `SERVICE_NOW`, `WEBHOOK`, `JIRA`, `MOBILE_PUSH`, `EVENT_BRIDGE`, `PAGERDUTY_ACCOUNT_INTEGRATION` or `PAGERDUTY_SERVICE_INTEGRATION`, `SLACK` and `SLACK_COLLABORATION`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "active",
                    "properties",
                    "status",
                    "type"
                ]
            }
        },
        "newrelic:index/getObfuscationExpression:getObfuscationExpression": {
            "description": "Use this data source to get information about a specific Obfuscation Expression in New Relic that already exists.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst expression = newrelic.getObfuscationExpression({\n    accountId: 123456,\n    name: \"The expression\",\n});\nconst rule = new newrelic.ObfuscationRule(\"rule\", {\n    description: \"description of the rule\",\n    filter: \"hostStatus=running\",\n    enabled: true,\n    actions: [{\n        attributes: [\"message\"],\n        expressionId: expression.then(expression =\u003e expression.id),\n        method: \"MASK\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nexpression = newrelic.get_obfuscation_expression(account_id=123456,\n    name=\"The expression\")\nrule = newrelic.ObfuscationRule(\"rule\",\n    description=\"description of the rule\",\n    filter=\"hostStatus=running\",\n    enabled=True,\n    actions=[newrelic.ObfuscationRuleActionArgs(\n        attributes=[\"message\"],\n        expression_id=expression.id,\n        method=\"MASK\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var expression = NewRelic.GetObfuscationExpression.Invoke(new()\n    {\n        AccountId = 123456,\n        Name = \"The expression\",\n    });\n\n    var rule = new NewRelic.ObfuscationRule(\"rule\", new()\n    {\n        Description = \"description of the rule\",\n        Filter = \"hostStatus=running\",\n        Enabled = true,\n        Actions = new[]\n        {\n            new NewRelic.Inputs.ObfuscationRuleActionArgs\n            {\n                Attributes = new[]\n                {\n                    \"message\",\n                },\n                ExpressionId = expression.Apply(getObfuscationExpressionResult =\u003e getObfuscationExpressionResult.Id),\n                Method = \"MASK\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texpression, err := newrelic.LookupObfuscationExpression(ctx, \u0026newrelic.LookupObfuscationExpressionArgs{\n\t\t\tAccountId: pulumi.IntRef(123456),\n\t\t\tName:      \"The expression\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewObfuscationRule(ctx, \"rule\", \u0026newrelic.ObfuscationRuleArgs{\n\t\t\tDescription: pulumi.String(\"description of the rule\"),\n\t\t\tFilter:      pulumi.String(\"hostStatus=running\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tActions: newrelic.ObfuscationRuleActionArray{\n\t\t\t\t\u0026newrelic.ObfuscationRuleActionArgs{\n\t\t\t\t\tAttributes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"message\"),\n\t\t\t\t\t},\n\t\t\t\t\tExpressionId: *pulumi.String(expression.Id),\n\t\t\t\t\tMethod:       pulumi.String(\"MASK\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetObfuscationExpressionArgs;\nimport com.pulumi.newrelic.ObfuscationRule;\nimport com.pulumi.newrelic.ObfuscationRuleArgs;\nimport com.pulumi.newrelic.inputs.ObfuscationRuleActionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var expression = NewrelicFunctions.getObfuscationExpression(GetObfuscationExpressionArgs.builder()\n            .accountId(123456)\n            .name(\"The expression\")\n            .build());\n\n        var rule = new ObfuscationRule(\"rule\", ObfuscationRuleArgs.builder()        \n            .description(\"description of the rule\")\n            .filter(\"hostStatus=running\")\n            .enabled(true)\n            .actions(ObfuscationRuleActionArgs.builder()\n                .attributes(\"message\")\n                .expressionId(expression.applyValue(getObfuscationExpressionResult -\u003e getObfuscationExpressionResult.id()))\n                .method(\"MASK\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  rule:\n    type: newrelic:ObfuscationRule\n    properties:\n      description: description of the rule\n      filter: hostStatus=running\n      enabled: true\n      # Reference the obfuscation expression data source in the obfuscation rule resource\n      actions:\n        - attributes:\n            - message\n          expressionId: ${expression.id}\n          method: MASK\nvariables:\n  expression:\n    fn::invoke:\n      Function: newrelic:getObfuscationExpression\n      Arguments:\n        accountId: 123456\n        name: The expression\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getObfuscationExpression.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account id associated with the obfuscation expression. If left empty will default to account ID specified in provider level configuration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of expression.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getObfuscationExpression.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "newrelic:index/getServiceLevelAlertHelper:getServiceLevelAlertHelper": {
            "description": "Use this data source to obtain the necessary fields to set up alerts on your service levels. It can be used for a `custom` alert_type in order to set up an alert with custom tolerated budget consumption and custom evaluation period or for recommended ones like `fast_burn` or `slow_burn`. For more information check [the documentation](https://docs.newrelic.com/docs/service-level-management/alerts-slm/).\n\n## Example Usage\n\nFirstly set up your service level objective, we recommend using local variables for the `target` and `time_window.rolling.count`, as they are also necessary for the helper.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooTarget = 99.9;\nconst fooPeriod = 28;\nconst foo = new newrelic.ServiceLevel(\"foo\", {\n    guid: \"MXxBUE18QVBQTElDQVRJT058MQ\",\n    description: \"Proportion of requests that are served faster than a threshold.\",\n    events: {\n        accountId: 12345678,\n        validEvents: {\n            from: \"Transaction\",\n            where: \"appName = 'Example application' AND (transactionType='Web')\",\n        },\n        badEvents: {\n            from: \"Transaction\",\n            where: \"appName = 'Example application' AND (transactionType= 'Web') AND duration \u003e 0.1\",\n        },\n    },\n    objective: {\n        target: fooTarget,\n        timeWindow: {\n            rolling: {\n                count: fooPeriod,\n                unit: \"DAY\",\n            },\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_target = 99.9\nfoo_period = 28\nfoo = newrelic.ServiceLevel(\"foo\",\n    guid=\"MXxBUE18QVBQTElDQVRJT058MQ\",\n    description=\"Proportion of requests that are served faster than a threshold.\",\n    events=newrelic.ServiceLevelEventsArgs(\n        account_id=12345678,\n        valid_events=newrelic.ServiceLevelEventsValidEventsArgs(\n            from_=\"Transaction\",\n            where=\"appName = 'Example application' AND (transactionType='Web')\",\n        ),\n        bad_events=newrelic.ServiceLevelEventsBadEventsArgs(\n            from_=\"Transaction\",\n            where=\"appName = 'Example application' AND (transactionType= 'Web') AND duration \u003e 0.1\",\n        ),\n    ),\n    objective=newrelic.ServiceLevelObjectiveArgs(\n        target=foo_target,\n        time_window=newrelic.ServiceLevelObjectiveTimeWindowArgs(\n            rolling=newrelic.ServiceLevelObjectiveTimeWindowRollingArgs(\n                count=foo_period,\n                unit=\"DAY\",\n            ),\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooTarget = 99.9;\n\n    var fooPeriod = 28;\n\n    var foo = new NewRelic.ServiceLevel(\"foo\", new()\n    {\n        Guid = \"MXxBUE18QVBQTElDQVRJT058MQ\",\n        Description = \"Proportion of requests that are served faster than a threshold.\",\n        Events = new NewRelic.Inputs.ServiceLevelEventsArgs\n        {\n            AccountId = 12345678,\n            ValidEvents = new NewRelic.Inputs.ServiceLevelEventsValidEventsArgs\n            {\n                From = \"Transaction\",\n                Where = \"appName = 'Example application' AND (transactionType='Web')\",\n            },\n            BadEvents = new NewRelic.Inputs.ServiceLevelEventsBadEventsArgs\n            {\n                From = \"Transaction\",\n                Where = \"appName = 'Example application' AND (transactionType= 'Web') AND duration \u003e 0.1\",\n            },\n        },\n        Objective = new NewRelic.Inputs.ServiceLevelObjectiveArgs\n        {\n            Target = fooTarget,\n            TimeWindow = new NewRelic.Inputs.ServiceLevelObjectiveTimeWindowArgs\n            {\n                Rolling = new NewRelic.Inputs.ServiceLevelObjectiveTimeWindowRollingArgs\n                {\n                    Count = fooPeriod,\n                    Unit = \"DAY\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooTarget := 99.9\n\t\tfooPeriod := 28\n\t\t_, err := newrelic.NewServiceLevel(ctx, \"foo\", \u0026newrelic.ServiceLevelArgs{\n\t\t\tGuid:        pulumi.String(\"MXxBUE18QVBQTElDQVRJT058MQ\"),\n\t\t\tDescription: pulumi.String(\"Proportion of requests that are served faster than a threshold.\"),\n\t\t\tEvents: \u0026newrelic.ServiceLevelEventsArgs{\n\t\t\t\tAccountId: pulumi.Int(12345678),\n\t\t\t\tValidEvents: \u0026newrelic.ServiceLevelEventsValidEventsArgs{\n\t\t\t\t\tFrom:  pulumi.String(\"Transaction\"),\n\t\t\t\t\tWhere: pulumi.String(\"appName = 'Example application' AND (transactionType='Web')\"),\n\t\t\t\t},\n\t\t\t\tBadEvents: \u0026newrelic.ServiceLevelEventsBadEventsArgs{\n\t\t\t\t\tFrom:  pulumi.String(\"Transaction\"),\n\t\t\t\t\tWhere: pulumi.String(\"appName = 'Example application' AND (transactionType= 'Web') AND duration \u003e 0.1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tObjective: \u0026newrelic.ServiceLevelObjectiveArgs{\n\t\t\t\tTarget: pulumi.Float64(fooTarget),\n\t\t\t\tTimeWindow: \u0026newrelic.ServiceLevelObjectiveTimeWindowArgs{\n\t\t\t\t\tRolling: \u0026newrelic.ServiceLevelObjectiveTimeWindowRollingArgs{\n\t\t\t\t\t\tCount: pulumi.Float64(fooPeriod),\n\t\t\t\t\t\tUnit:  pulumi.String(\"DAY\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.ServiceLevel;\nimport com.pulumi.newrelic.ServiceLevelArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelEventsArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelEventsValidEventsArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelEventsBadEventsArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelObjectiveArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelObjectiveTimeWindowArgs;\nimport com.pulumi.newrelic.inputs.ServiceLevelObjectiveTimeWindowRollingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooTarget = 99.9;\n\n        final var fooPeriod = 28;\n\n        var foo = new ServiceLevel(\"foo\", ServiceLevelArgs.builder()        \n            .guid(\"MXxBUE18QVBQTElDQVRJT058MQ\")\n            .description(\"Proportion of requests that are served faster than a threshold.\")\n            .events(ServiceLevelEventsArgs.builder()\n                .accountId(12345678)\n                .validEvents(ServiceLevelEventsValidEventsArgs.builder()\n                    .from(\"Transaction\")\n                    .where(\"appName = 'Example application' AND (transactionType='Web')\")\n                    .build())\n                .badEvents(ServiceLevelEventsBadEventsArgs.builder()\n                    .from(\"Transaction\")\n                    .where(\"appName = 'Example application' AND (transactionType= 'Web') AND duration \u003e 0.1\")\n                    .build())\n                .build())\n            .objective(ServiceLevelObjectiveArgs.builder()\n                .target(fooTarget)\n                .timeWindow(ServiceLevelObjectiveTimeWindowArgs.builder()\n                    .rolling(ServiceLevelObjectiveTimeWindowRollingArgs.builder()\n                        .count(fooPeriod)\n                        .unit(\"DAY\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:ServiceLevel\n    properties:\n      guid: MXxBUE18QVBQTElDQVRJT058MQ\n      description: Proportion of requests that are served faster than a threshold.\n      events:\n        accountId: 1.2345678e+07\n        validEvents:\n          from: Transaction\n          where: appName = 'Example application' AND (transactionType='Web')\n        badEvents:\n          from: Transaction\n          where: appName = 'Example application' AND (transactionType= 'Web') AND duration \u003e 0.1\n      objective:\n        target: ${fooTarget}\n        timeWindow:\n          rolling:\n            count: ${fooPeriod}\n            unit: DAY\nvariables:\n  fooTarget: 99.9\n  fooPeriod: 28\n```\n\u003c!--End PulumiCodeChooser --\u003e\nThen use the helper to obtain the necessary fields to set up an alert on that Service Level.\nNote that the Service Level was set up using bad events, that's why `is_bad_events` is set to `true`.\nIf the Service Level was configured with good events that would be unnecessary as the field defaults to `false`.\n\nHere is an example of a `slow_burn` alert.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooSlowBurn = newrelic.getServiceLevelAlertHelper({\n    alertType: \"slow_burn\",\n    sliGuid: newrelic_service_level.foo.sli_guid,\n    sloTarget: local.foo_target,\n    sloPeriod: local.foo_period,\n    isBadEvents: true,\n});\nconst yourCondition = new newrelic.NrqlAlertCondition(\"yourCondition\", {\n    accountId: 12345678,\n    policyId: 67890,\n    type: \"static\",\n    enabled: true,\n    violationTimeLimitSeconds: 259200,\n    nrql: {\n        query: fooSlowBurn.then(fooSlowBurn =\u003e fooSlowBurn.nrql),\n    },\n    critical: {\n        operator: \"above_or_equals\",\n        threshold: fooSlowBurn.then(fooSlowBurn =\u003e fooSlowBurn.threshold),\n        thresholdDuration: 900,\n        thresholdOccurrences: \"at_least_once\",\n    },\n    fillOption: \"none\",\n    aggregationWindow: fooSlowBurn.then(fooSlowBurn =\u003e fooSlowBurn.evaluationPeriod),\n    aggregationMethod: \"event_flow\",\n    aggregationDelay: \"120\",\n    slideBy: 900,\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_slow_burn = newrelic.get_service_level_alert_helper(alert_type=\"slow_burn\",\n    sli_guid=newrelic_service_level[\"foo\"][\"sli_guid\"],\n    slo_target=local[\"foo_target\"],\n    slo_period=local[\"foo_period\"],\n    is_bad_events=True)\nyour_condition = newrelic.NrqlAlertCondition(\"yourCondition\",\n    account_id=12345678,\n    policy_id=67890,\n    type=\"static\",\n    enabled=True,\n    violation_time_limit_seconds=259200,\n    nrql=newrelic.NrqlAlertConditionNrqlArgs(\n        query=foo_slow_burn.nrql,\n    ),\n    critical=newrelic.NrqlAlertConditionCriticalArgs(\n        operator=\"above_or_equals\",\n        threshold=foo_slow_burn.threshold,\n        threshold_duration=900,\n        threshold_occurrences=\"at_least_once\",\n    ),\n    fill_option=\"none\",\n    aggregation_window=foo_slow_burn.evaluation_period,\n    aggregation_method=\"event_flow\",\n    aggregation_delay=\"120\",\n    slide_by=900)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooSlowBurn = NewRelic.GetServiceLevelAlertHelper.Invoke(new()\n    {\n        AlertType = \"slow_burn\",\n        SliGuid = newrelic_service_level.Foo.Sli_guid,\n        SloTarget = local.Foo_target,\n        SloPeriod = local.Foo_period,\n        IsBadEvents = true,\n    });\n\n    var yourCondition = new NewRelic.NrqlAlertCondition(\"yourCondition\", new()\n    {\n        AccountId = 12345678,\n        PolicyId = 67890,\n        Type = \"static\",\n        Enabled = true,\n        ViolationTimeLimitSeconds = 259200,\n        Nrql = new NewRelic.Inputs.NrqlAlertConditionNrqlArgs\n        {\n            Query = fooSlowBurn.Apply(getServiceLevelAlertHelperResult =\u003e getServiceLevelAlertHelperResult.Nrql),\n        },\n        Critical = new NewRelic.Inputs.NrqlAlertConditionCriticalArgs\n        {\n            Operator = \"above_or_equals\",\n            Threshold = fooSlowBurn.Apply(getServiceLevelAlertHelperResult =\u003e getServiceLevelAlertHelperResult.Threshold),\n            ThresholdDuration = 900,\n            ThresholdOccurrences = \"at_least_once\",\n        },\n        FillOption = \"none\",\n        AggregationWindow = fooSlowBurn.Apply(getServiceLevelAlertHelperResult =\u003e getServiceLevelAlertHelperResult.EvaluationPeriod),\n        AggregationMethod = \"event_flow\",\n        AggregationDelay = \"120\",\n        SlideBy = 900,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooSlowBurn, err := newrelic.GetServiceLevelAlertHelper(ctx, \u0026newrelic.GetServiceLevelAlertHelperArgs{\n\t\t\tAlertType:   \"slow_burn\",\n\t\t\tSliGuid:     newrelic_service_level.Foo.Sli_guid,\n\t\t\tSloTarget:   local.Foo_target,\n\t\t\tSloPeriod:   local.Foo_period,\n\t\t\tIsBadEvents: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewNrqlAlertCondition(ctx, \"yourCondition\", \u0026newrelic.NrqlAlertConditionArgs{\n\t\t\tAccountId:                 pulumi.Int(12345678),\n\t\t\tPolicyId:                  pulumi.Int(67890),\n\t\t\tType:                      pulumi.String(\"static\"),\n\t\t\tEnabled:                   pulumi.Bool(true),\n\t\t\tViolationTimeLimitSeconds: pulumi.Int(259200),\n\t\t\tNrql: \u0026newrelic.NrqlAlertConditionNrqlArgs{\n\t\t\t\tQuery: *pulumi.String(fooSlowBurn.Nrql),\n\t\t\t},\n\t\t\tCritical: \u0026newrelic.NrqlAlertConditionCriticalArgs{\n\t\t\t\tOperator:             pulumi.String(\"above_or_equals\"),\n\t\t\t\tThreshold:            *pulumi.Float64(fooSlowBurn.Threshold),\n\t\t\t\tThresholdDuration:    pulumi.Int(900),\n\t\t\t\tThresholdOccurrences: pulumi.String(\"at_least_once\"),\n\t\t\t},\n\t\t\tFillOption:        pulumi.String(\"none\"),\n\t\t\tAggregationWindow: *pulumi.Int(fooSlowBurn.EvaluationPeriod),\n\t\t\tAggregationMethod: pulumi.String(\"event_flow\"),\n\t\t\tAggregationDelay:  pulumi.String(\"120\"),\n\t\t\tSlideBy:           pulumi.Int(900),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetServiceLevelAlertHelperArgs;\nimport com.pulumi.newrelic.NrqlAlertCondition;\nimport com.pulumi.newrelic.NrqlAlertConditionArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionNrqlArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionCriticalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooSlowBurn = NewrelicFunctions.getServiceLevelAlertHelper(GetServiceLevelAlertHelperArgs.builder()\n            .alertType(\"slow_burn\")\n            .sliGuid(newrelic_service_level.foo().sli_guid())\n            .sloTarget(local.foo_target())\n            .sloPeriod(local.foo_period())\n            .isBadEvents(true)\n            .build());\n\n        var yourCondition = new NrqlAlertCondition(\"yourCondition\", NrqlAlertConditionArgs.builder()        \n            .accountId(12345678)\n            .policyId(67890)\n            .type(\"static\")\n            .enabled(true)\n            .violationTimeLimitSeconds(259200)\n            .nrql(NrqlAlertConditionNrqlArgs.builder()\n                .query(fooSlowBurn.applyValue(getServiceLevelAlertHelperResult -\u003e getServiceLevelAlertHelperResult.nrql()))\n                .build())\n            .critical(NrqlAlertConditionCriticalArgs.builder()\n                .operator(\"above_or_equals\")\n                .threshold(fooSlowBurn.applyValue(getServiceLevelAlertHelperResult -\u003e getServiceLevelAlertHelperResult.threshold()))\n                .thresholdDuration(900)\n                .thresholdOccurrences(\"at_least_once\")\n                .build())\n            .fillOption(\"none\")\n            .aggregationWindow(fooSlowBurn.applyValue(getServiceLevelAlertHelperResult -\u003e getServiceLevelAlertHelperResult.evaluationPeriod()))\n            .aggregationMethod(\"event_flow\")\n            .aggregationDelay(120)\n            .slideBy(900)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  yourCondition:\n    type: newrelic:NrqlAlertCondition\n    properties:\n      accountId: 1.2345678e+07\n      policyId: 67890\n      type: static\n      enabled: true\n      violationTimeLimitSeconds: 259200\n      nrql:\n        query: ${fooSlowBurn.nrql}\n      critical:\n        operator: above_or_equals\n        threshold: ${fooSlowBurn.threshold}\n        thresholdDuration: 900\n        thresholdOccurrences: at_least_once\n      fillOption: none\n      aggregationWindow: ${fooSlowBurn.evaluationPeriod}\n      aggregationMethod: event_flow\n      aggregationDelay: 120\n      slideBy: 900\nvariables:\n  fooSlowBurn:\n    fn::invoke:\n      Function: newrelic:getServiceLevelAlertHelper\n      Arguments:\n        alertType: slow_burn\n        sliGuid: ${newrelic_service_level.foo.sli_guid}\n        sloTarget: ${local.foo_target}\n        sloPeriod: ${local.foo_period}\n        isBadEvents: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nHere is an example of a custom alert:\n\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst fooCustom = newrelic.getServiceLevelAlertHelper({\n    alertType: \"custom\",\n    sliGuid: newrelic_service_level.foo.sli_guid,\n    sloTarget: local.foo_target,\n    sloPeriod: local.foo_period,\n    customToleratedBudgetConsumption: 4,\n    customEvaluationPeriod: 5400,\n    isBadEvents: true,\n});\nconst yourCondition = new newrelic.NrqlAlertCondition(\"yourCondition\", {\n    accountId: 12345678,\n    policyId: 67890,\n    type: \"static\",\n    enabled: true,\n    violationTimeLimitSeconds: 259200,\n    nrql: {\n        query: fooCustom.then(fooCustom =\u003e fooCustom.nrql),\n    },\n    critical: {\n        operator: \"above_or_equals\",\n        threshold: fooCustom.then(fooCustom =\u003e fooCustom.threshold),\n        thresholdDuration: 900,\n        thresholdOccurrences: \"at_least_once\",\n    },\n    fillOption: \"none\",\n    aggregationWindow: fooCustom.then(fooCustom =\u003e fooCustom.evaluationPeriod),\n    aggregationMethod: \"event_flow\",\n    aggregationDelay: \"120\",\n    slideBy: 60,\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo_custom = newrelic.get_service_level_alert_helper(alert_type=\"custom\",\n    sli_guid=newrelic_service_level[\"foo\"][\"sli_guid\"],\n    slo_target=local[\"foo_target\"],\n    slo_period=local[\"foo_period\"],\n    custom_tolerated_budget_consumption=4,\n    custom_evaluation_period=5400,\n    is_bad_events=True)\nyour_condition = newrelic.NrqlAlertCondition(\"yourCondition\",\n    account_id=12345678,\n    policy_id=67890,\n    type=\"static\",\n    enabled=True,\n    violation_time_limit_seconds=259200,\n    nrql=newrelic.NrqlAlertConditionNrqlArgs(\n        query=foo_custom.nrql,\n    ),\n    critical=newrelic.NrqlAlertConditionCriticalArgs(\n        operator=\"above_or_equals\",\n        threshold=foo_custom.threshold,\n        threshold_duration=900,\n        threshold_occurrences=\"at_least_once\",\n    ),\n    fill_option=\"none\",\n    aggregation_window=foo_custom.evaluation_period,\n    aggregation_method=\"event_flow\",\n    aggregation_delay=\"120\",\n    slide_by=60)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooCustom = NewRelic.GetServiceLevelAlertHelper.Invoke(new()\n    {\n        AlertType = \"custom\",\n        SliGuid = newrelic_service_level.Foo.Sli_guid,\n        SloTarget = local.Foo_target,\n        SloPeriod = local.Foo_period,\n        CustomToleratedBudgetConsumption = 4,\n        CustomEvaluationPeriod = 5400,\n        IsBadEvents = true,\n    });\n\n    var yourCondition = new NewRelic.NrqlAlertCondition(\"yourCondition\", new()\n    {\n        AccountId = 12345678,\n        PolicyId = 67890,\n        Type = \"static\",\n        Enabled = true,\n        ViolationTimeLimitSeconds = 259200,\n        Nrql = new NewRelic.Inputs.NrqlAlertConditionNrqlArgs\n        {\n            Query = fooCustom.Apply(getServiceLevelAlertHelperResult =\u003e getServiceLevelAlertHelperResult.Nrql),\n        },\n        Critical = new NewRelic.Inputs.NrqlAlertConditionCriticalArgs\n        {\n            Operator = \"above_or_equals\",\n            Threshold = fooCustom.Apply(getServiceLevelAlertHelperResult =\u003e getServiceLevelAlertHelperResult.Threshold),\n            ThresholdDuration = 900,\n            ThresholdOccurrences = \"at_least_once\",\n        },\n        FillOption = \"none\",\n        AggregationWindow = fooCustom.Apply(getServiceLevelAlertHelperResult =\u003e getServiceLevelAlertHelperResult.EvaluationPeriod),\n        AggregationMethod = \"event_flow\",\n        AggregationDelay = \"120\",\n        SlideBy = 60,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooCustom, err := newrelic.GetServiceLevelAlertHelper(ctx, \u0026newrelic.GetServiceLevelAlertHelperArgs{\n\t\t\tAlertType:                        \"custom\",\n\t\t\tSliGuid:                          newrelic_service_level.Foo.Sli_guid,\n\t\t\tSloTarget:                        local.Foo_target,\n\t\t\tSloPeriod:                        local.Foo_period,\n\t\t\tCustomToleratedBudgetConsumption: pulumi.Float64Ref(4),\n\t\t\tCustomEvaluationPeriod:           pulumi.IntRef(5400),\n\t\t\tIsBadEvents:                      pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.NewNrqlAlertCondition(ctx, \"yourCondition\", \u0026newrelic.NrqlAlertConditionArgs{\n\t\t\tAccountId:                 pulumi.Int(12345678),\n\t\t\tPolicyId:                  pulumi.Int(67890),\n\t\t\tType:                      pulumi.String(\"static\"),\n\t\t\tEnabled:                   pulumi.Bool(true),\n\t\t\tViolationTimeLimitSeconds: pulumi.Int(259200),\n\t\t\tNrql: \u0026newrelic.NrqlAlertConditionNrqlArgs{\n\t\t\t\tQuery: *pulumi.String(fooCustom.Nrql),\n\t\t\t},\n\t\t\tCritical: \u0026newrelic.NrqlAlertConditionCriticalArgs{\n\t\t\t\tOperator:             pulumi.String(\"above_or_equals\"),\n\t\t\t\tThreshold:            *pulumi.Float64(fooCustom.Threshold),\n\t\t\t\tThresholdDuration:    pulumi.Int(900),\n\t\t\t\tThresholdOccurrences: pulumi.String(\"at_least_once\"),\n\t\t\t},\n\t\t\tFillOption:        pulumi.String(\"none\"),\n\t\t\tAggregationWindow: *pulumi.Int(fooCustom.EvaluationPeriod),\n\t\t\tAggregationMethod: pulumi.String(\"event_flow\"),\n\t\t\tAggregationDelay:  pulumi.String(\"120\"),\n\t\t\tSlideBy:           pulumi.Int(60),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetServiceLevelAlertHelperArgs;\nimport com.pulumi.newrelic.NrqlAlertCondition;\nimport com.pulumi.newrelic.NrqlAlertConditionArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionNrqlArgs;\nimport com.pulumi.newrelic.inputs.NrqlAlertConditionCriticalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooCustom = NewrelicFunctions.getServiceLevelAlertHelper(GetServiceLevelAlertHelperArgs.builder()\n            .alertType(\"custom\")\n            .sliGuid(newrelic_service_level.foo().sli_guid())\n            .sloTarget(local.foo_target())\n            .sloPeriod(local.foo_period())\n            .customToleratedBudgetConsumption(4)\n            .customEvaluationPeriod(5400)\n            .isBadEvents(true)\n            .build());\n\n        var yourCondition = new NrqlAlertCondition(\"yourCondition\", NrqlAlertConditionArgs.builder()        \n            .accountId(12345678)\n            .policyId(67890)\n            .type(\"static\")\n            .enabled(true)\n            .violationTimeLimitSeconds(259200)\n            .nrql(NrqlAlertConditionNrqlArgs.builder()\n                .query(fooCustom.applyValue(getServiceLevelAlertHelperResult -\u003e getServiceLevelAlertHelperResult.nrql()))\n                .build())\n            .critical(NrqlAlertConditionCriticalArgs.builder()\n                .operator(\"above_or_equals\")\n                .threshold(fooCustom.applyValue(getServiceLevelAlertHelperResult -\u003e getServiceLevelAlertHelperResult.threshold()))\n                .thresholdDuration(900)\n                .thresholdOccurrences(\"at_least_once\")\n                .build())\n            .fillOption(\"none\")\n            .aggregationWindow(fooCustom.applyValue(getServiceLevelAlertHelperResult -\u003e getServiceLevelAlertHelperResult.evaluationPeriod()))\n            .aggregationMethod(\"event_flow\")\n            .aggregationDelay(120)\n            .slideBy(60)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  yourCondition:\n    type: newrelic:NrqlAlertCondition\n    properties:\n      accountId: 1.2345678e+07\n      policyId: 67890\n      type: static\n      enabled: true\n      violationTimeLimitSeconds: 259200\n      nrql:\n        query: ${fooCustom.nrql}\n      critical:\n        operator: above_or_equals\n        threshold: ${fooCustom.threshold}\n        thresholdDuration: 900\n        thresholdOccurrences: at_least_once\n      fillOption: none\n      aggregationWindow: ${fooCustom.evaluationPeriod}\n      aggregationMethod: event_flow\n      aggregationDelay: 120\n      slideBy: 60\nvariables:\n  fooCustom:\n    fn::invoke:\n      Function: newrelic:getServiceLevelAlertHelper\n      Arguments:\n        alertType: custom\n        sliGuid: ${newrelic_service_level.foo.sli_guid}\n        sloTarget: ${local.foo_target}\n        sloPeriod: ${local.foo_period}\n        customToleratedBudgetConsumption: 4\n        customEvaluationPeriod: 5400\n        isBadEvents: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceLevelAlertHelper.\n",
                "properties": {
                    "alertType": {
                        "type": "string",
                        "description": "The type of alert we want to set. Valid values are:\n"
                    },
                    "customEvaluationPeriod": {
                        "type": "integer",
                        "description": "Aggregation window taken into consideration in seconds. Mandatory if `alert_type` is `custom`.\n"
                    },
                    "customToleratedBudgetConsumption": {
                        "type": "number",
                        "description": "How much budget you tolerate to consume during the custom evaluation period, valid values between `0` and `100`. Mandatory if `alert_type` is `custom`.\n"
                    },
                    "isBadEvents": {
                        "type": "boolean",
                        "description": "If the SLI is defined using bad events. Defaults to `false`\n"
                    },
                    "sliGuid": {
                        "type": "string",
                        "description": "The guid of the sli we want to set the alert on.\n"
                    },
                    "sloPeriod": {
                        "type": "integer",
                        "description": "The time window of the Service Level Objective in days. Valid values are `1`, `7` and `28`.\n"
                    },
                    "sloTarget": {
                        "type": "number",
                        "description": "The target of the Service Level Objective, valid values between `0` and `100`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "alertType",
                    "sliGuid",
                    "sloPeriod",
                    "sloTarget"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceLevelAlertHelper.\n",
                "properties": {
                    "alertType": {
                        "type": "string"
                    },
                    "customEvaluationPeriod": {
                        "type": "integer"
                    },
                    "customToleratedBudgetConsumption": {
                        "type": "number"
                    },
                    "evaluationPeriod": {
                        "type": "integer",
                        "description": "(Computed) For non `custom` alert_type, this is the recommended for that type of alert. For `custom` alert_type it has the same value as `custom_evaluation_period`.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isBadEvents": {
                        "type": "boolean"
                    },
                    "nrql": {
                        "type": "string",
                        "description": "(Computed) The nrql query for the selected type of alert.\n"
                    },
                    "sliGuid": {
                        "type": "string"
                    },
                    "sloPeriod": {
                        "type": "integer"
                    },
                    "sloTarget": {
                        "type": "number"
                    },
                    "threshold": {
                        "type": "number",
                        "description": "(Computed) The computed threshold given the provided arguments.\n"
                    },
                    "toleratedBudgetConsumption": {
                        "type": "number",
                        "description": "(Computed) For non `custom` alert_type, this is the recommended for that type of alert. For `custom` alert_type it has the same value as `custom_tolerated_budget_consumption`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "alertType",
                    "evaluationPeriod",
                    "nrql",
                    "sliGuid",
                    "sloPeriod",
                    "sloTarget",
                    "threshold",
                    "toleratedBudgetConsumption",
                    "id"
                ]
            }
        },
        "newrelic:index/getTestGrokPattern:getTestGrokPattern": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = newrelic.getTestGrokPattern({\n    grok: \"%%{IP:host_ip}\",\n    logLines: [\n        \"host_ip: 43.3.120.2\",\n        \"bytes_received: 2048\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.get_test_grok_pattern(grok=\"%%{IP:host_ip}\",\n    log_lines=[\n        \"host_ip: 43.3.120.2\",\n        \"bytes_received: 2048\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = NewRelic.GetTestGrokPattern.Invoke(new()\n    {\n        Grok = \"%%{IP:host_ip}\",\n        LogLines = new[]\n        {\n            \"host_ip: 43.3.120.2\",\n            \"bytes_received: 2048\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := newrelic.GetTestGrokPattern(ctx, \u0026newrelic.GetTestGrokPatternArgs{\n\t\t\tGrok: \"%%{IP:host_ip}\",\n\t\t\tLogLines: []string{\n\t\t\t\t\"host_ip: 43.3.120.2\",\n\t\t\t\t\"bytes_received: 2048\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetTestGrokPatternArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = NewrelicFunctions.getTestGrokPattern(GetTestGrokPatternArgs.builder()\n            .grok(\"%%{IP:host_ip}\")\n            .logLines(            \n                \"host_ip: 43.3.120.2\",\n                \"bytes_received: 2048\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: newrelic:getTestGrokPattern\n      Arguments:\n        grok: '%%{IP:host_ip}'\n        logLines:\n          - 'host_ip: 43.3.120.2'\n          - 'bytes_received: 2048'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTestGrokPattern.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on.  This allows you to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "grok": {
                        "type": "string",
                        "description": "The Grok pattern to test.\n"
                    },
                    "logLines": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The log lines to test the Grok pattern against.\n"
                    }
                },
                "type": "object",
                "required": [
                    "grok",
                    "logLines"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTestGrokPattern.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "grok": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "logLines": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "testGroks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/getTestGrokPatternTestGrok:getTestGrokPatternTestGrok"
                        },
                        "description": "Nested attribute containing information about the test of Grok pattern against a list of log lines.\n"
                    }
                },
                "type": "object",
                "required": [
                    "grok",
                    "logLines",
                    "testGroks",
                    "id"
                ]
            }
        },
        "newrelic:index/getUser:getUser": {
            "description": "The `newrelic.User` data source helps search for a user by their name and/or email ID, and accordingly, fetch the ID of the matching user.\n\n## Example Usage\n\nThe below example illustrates fetching a the ID of a user (and other arguments) using the ID of the authentication domain the user belongs to, as well as a name and/or email ID, which can be used as criteria to search for a user who matches these specified parameters.\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = newrelic.getAuthenticationDomain({\n    name: \"Test Authentication Domain\",\n});\nconst userOne = foo.then(foo =\u003e newrelic.getUser({\n    authenticationDomainId: foo.id,\n    name: \"Test User\",\n}));\nconst userTwo = foo.then(foo =\u003e newrelic.getUser({\n    authenticationDomainId: foo.id,\n    emailId: \"test_user@random.com\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.get_authentication_domain(name=\"Test Authentication Domain\")\nuser_one = newrelic.get_user(authentication_domain_id=foo.id,\n    name=\"Test User\")\nuser_two = newrelic.get_user(authentication_domain_id=foo.id,\n    email_id=\"test_user@random.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = NewRelic.GetAuthenticationDomain.Invoke(new()\n    {\n        Name = \"Test Authentication Domain\",\n    });\n\n    var userOne = NewRelic.GetUser.Invoke(new()\n    {\n        AuthenticationDomainId = foo.Apply(getAuthenticationDomainResult =\u003e getAuthenticationDomainResult.Id),\n        Name = \"Test User\",\n    });\n\n    var userTwo = NewRelic.GetUser.Invoke(new()\n    {\n        AuthenticationDomainId = foo.Apply(getAuthenticationDomainResult =\u003e getAuthenticationDomainResult.Id),\n        EmailId = \"test_user@random.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := newrelic.GetAuthenticationDomain(ctx, \u0026newrelic.GetAuthenticationDomainArgs{\n\t\t\tName: \"Test Authentication Domain\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.LookupUser(ctx, \u0026newrelic.LookupUserArgs{\n\t\t\tAuthenticationDomainId: foo.Id,\n\t\t\tName:                   pulumi.StringRef(\"Test User\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = newrelic.LookupUser(ctx, \u0026newrelic.LookupUserArgs{\n\t\t\tAuthenticationDomainId: foo.Id,\n\t\t\tEmailId:                pulumi.StringRef(\"test_user@random.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.NewrelicFunctions;\nimport com.pulumi.newrelic.inputs.GetAuthenticationDomainArgs;\nimport com.pulumi.newrelic.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = NewrelicFunctions.getAuthenticationDomain(GetAuthenticationDomainArgs.builder()\n            .name(\"Test Authentication Domain\")\n            .build());\n\n        final var userOne = NewrelicFunctions.getUser(GetUserArgs.builder()\n            .authenticationDomainId(foo.applyValue(getAuthenticationDomainResult -\u003e getAuthenticationDomainResult.id()))\n            .name(\"Test User\")\n            .build());\n\n        final var userTwo = NewrelicFunctions.getUser(GetUserArgs.builder()\n            .authenticationDomainId(foo.applyValue(getAuthenticationDomainResult -\u003e getAuthenticationDomainResult.id()))\n            .emailId(\"test_user@random.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: newrelic:getAuthenticationDomain\n      Arguments:\n        name: Test Authentication Domain\n  userOne:\n    fn::invoke:\n      Function: newrelic:getUser\n      Arguments:\n        authenticationDomainId: ${foo.id}\n        name: Test User\n  userTwo:\n    fn::invoke:\n      Function: newrelic:getUser\n      Arguments:\n        authenticationDomainId: ${foo.id}\n        emailId: test_user@random.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "authenticationDomainId": {
                        "type": "string",
                        "description": "The ID of the authentication domain the user to be searched for belongs to.\n"
                    },
                    "emailId": {
                        "type": "string",
                        "description": "The email ID of the user to search for.\n\nIt should be noted that either `name` or `email_id` must be specified in order to retrieve a matching user.\n\n\u003e **NOTE** If the `name` specified in the configuration matches the names of multiple users in the account, the data source will return the first match from the list of all matching users retrieved from the API. However, when using the `email_id` argument as the search criterion, only the user with the specified email ID will be returned, as each user has a unique email ID and multiple users cannot have the same email ID.\n\n\u003e **NOTE** The ID of an authentication domain can be retrieved using its name, via the data source `newrelic.getAuthenticationDomain`, as shown in the example above. Head over to the documentation of this data source for more details and examples.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user to search for.\n"
                    }
                },
                "type": "object",
                "required": [
                    "authenticationDomainId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "authenticationDomainId": {
                        "type": "string"
                    },
                    "emailId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the matching user fetched.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "authenticationDomainId",
                    "emailId",
                    "id",
                    "name"
                ]
            }
        },
        "newrelic:synthetics/getPrivateLocation:getPrivateLocation": {
            "description": "Use this data source to get information about a specific Synthetics monitor private location in New Relic that already exists.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst example = newrelic.synthetics.getPrivateLocation({\n    accountId: 123456,\n    name: \"My private location\",\n});\nconst foo = new newrelic.synthetics.Monitor(\"foo\", {locationsPrivates: [example.then(example =\u003e example.id)]});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nexample = newrelic.synthetics.get_private_location(account_id=123456,\n    name=\"My private location\")\nfoo = newrelic.synthetics.Monitor(\"foo\", locations_privates=[example.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = NewRelic.Synthetics.GetPrivateLocation.Invoke(new()\n    {\n        AccountId = 123456,\n        Name = \"My private location\",\n    });\n\n    var foo = new NewRelic.Synthetics.Monitor(\"foo\", new()\n    {\n        LocationsPrivates = new[]\n        {\n            example.Apply(getPrivateLocationResult =\u003e getPrivateLocationResult.Id),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := synthetics.LookupPrivateLocation(ctx, \u0026synthetics.LookupPrivateLocationArgs{\n\t\t\tAccountId: pulumi.IntRef(123456),\n\t\t\tName:      \"My private location\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = synthetics.NewMonitor(ctx, \"foo\", \u0026synthetics.MonitorArgs{\n\t\t\tLocationsPrivates: pulumi.StringArray{\n\t\t\t\t*pulumi.String(example.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.SyntheticsFunctions;\nimport com.pulumi.newrelic.synthetics.inputs.GetPrivateLocationArgs;\nimport com.pulumi.newrelic.synthetics.Monitor;\nimport com.pulumi.newrelic.synthetics.MonitorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = SyntheticsFunctions.getPrivateLocation(GetPrivateLocationArgs.builder()\n            .accountId(123456)\n            .name(\"My private location\")\n            .build());\n\n        var foo = new Monitor(\"foo\", MonitorArgs.builder()        \n            .locationsPrivates(example.applyValue(getPrivateLocationResult -\u003e getPrivateLocationResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:synthetics:Monitor\n    properties:\n      # Reference the private location data source in the monitor resource\n      locationsPrivates:\n        - ${example.id}\nvariables:\n  example:\n    fn::invoke:\n      Function: newrelic:synthetics:getPrivateLocation\n      Arguments:\n        accountId: 123456\n        name: My private location\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst example = newrelic.synthetics.getPrivateLocation({\n    accountId: 123456,\n    name: \"My private location\",\n});\nconst foo = new newrelic.synthetics.StepMonitor(\"foo\", {locationPrivates: [{\n    guid: example.then(example =\u003e example.id),\n}]});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nexample = newrelic.synthetics.get_private_location(account_id=123456,\n    name=\"My private location\")\nfoo = newrelic.synthetics.StepMonitor(\"foo\", location_privates=[newrelic.synthetics.StepMonitorLocationPrivateArgs(\n    guid=example.id,\n)])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = NewRelic.Synthetics.GetPrivateLocation.Invoke(new()\n    {\n        AccountId = 123456,\n        Name = \"My private location\",\n    });\n\n    var foo = new NewRelic.Synthetics.StepMonitor(\"foo\", new()\n    {\n        LocationPrivates = new[]\n        {\n            new NewRelic.Synthetics.Inputs.StepMonitorLocationPrivateArgs\n            {\n                Guid = example.Apply(getPrivateLocationResult =\u003e getPrivateLocationResult.Id),\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := synthetics.LookupPrivateLocation(ctx, \u0026synthetics.LookupPrivateLocationArgs{\n\t\t\tAccountId: pulumi.IntRef(123456),\n\t\t\tName:      \"My private location\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = synthetics.NewStepMonitor(ctx, \"foo\", \u0026synthetics.StepMonitorArgs{\n\t\t\tLocationPrivates: synthetics.StepMonitorLocationPrivateArray{\n\t\t\t\t\u0026synthetics.StepMonitorLocationPrivateArgs{\n\t\t\t\t\tGuid: *pulumi.String(example.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.SyntheticsFunctions;\nimport com.pulumi.newrelic.synthetics.inputs.GetPrivateLocationArgs;\nimport com.pulumi.newrelic.synthetics.StepMonitor;\nimport com.pulumi.newrelic.synthetics.StepMonitorArgs;\nimport com.pulumi.newrelic.synthetics.inputs.StepMonitorLocationPrivateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = SyntheticsFunctions.getPrivateLocation(GetPrivateLocationArgs.builder()\n            .accountId(123456)\n            .name(\"My private location\")\n            .build());\n\n        var foo = new StepMonitor(\"foo\", StepMonitorArgs.builder()        \n            .locationPrivates(StepMonitorLocationPrivateArgs.builder()\n                .guid(example.applyValue(getPrivateLocationResult -\u003e getPrivateLocationResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: newrelic:synthetics:StepMonitor\n    properties:\n      # Reference the private location data source in the monitor resource\n      locationPrivates:\n        - guid: ${example.id}\nvariables:\n  example:\n    fn::invoke:\n      Function: newrelic:synthetics:getPrivateLocation\n      Arguments:\n        accountId: 123456\n        name: My private location\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPrivateLocation.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID of the associated private location. If left empty will default to account ID specified in provider level configuration.\n"
                    },
                    "keys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The key of the private location.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Synthetics monitor private location.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrivateLocation.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The key of the private location.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "keys",
                    "name",
                    "id"
                ]
            }
        },
        "newrelic:synthetics/getSecureCredential:getSecureCredential": {
            "description": "Use this data source to get information about a specific Synthetics secure credential in New Relic that already exists.\n\nNote that the secure credential's value is not returned as an attribute for security reasons.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = newrelic.synthetics.getSecureCredential({\n    key: \"MY_KEY\",\n});\n```\n```python\nimport pulumi\nimport pulumi_newrelic as newrelic\n\nfoo = newrelic.synthetics.get_secure_credential(key=\"MY_KEY\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing NewRelic = Pulumi.NewRelic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = NewRelic.Synthetics.GetSecureCredential.Invoke(new()\n    {\n        Key = \"MY_KEY\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-newrelic/sdk/v5/go/newrelic/synthetics\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := synthetics.LookupSecureCredential(ctx, \u0026synthetics.LookupSecureCredentialArgs{\n\t\t\tKey: \"MY_KEY\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.newrelic.synthetics.SyntheticsFunctions;\nimport com.pulumi.newrelic.synthetics.inputs.GetSecureCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = SyntheticsFunctions.getSecureCredential(GetSecureCredentialArgs.builder()\n            .key(\"MY_KEY\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: newrelic:synthetics:getSecureCredential\n      Arguments:\n        key: MY_KEY\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecureCredential.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account in New Relic associated with the secure credential. Defaults to the account associated with the API key used.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "key"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecureCredential.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string",
                        "description": "The secure credential's description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "key": {
                        "type": "string"
                    },
                    "lastUpdated": {
                        "type": "string",
                        "description": "The time the secure credential was last updated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "description",
                    "key",
                    "lastUpdated",
                    "id"
                ]
            }
        }
    }
}