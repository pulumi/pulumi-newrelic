{
    "name": "newrelic",
    "description": "A Pulumi package for creating and managing New Relic resources.",
    "keywords": [
        "pulumi",
        "new relic"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`newrelic` Terraform Provider](https://github.com/newrelic/terraform-provider-newrelic).",
    "repository": "https://github.com/pulumi/pulumi-newrelic",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "cloud": "Cloud",
                "index": "index",
                "insights": "Insights",
                "newrelic": "NewRelic",
                "plugins": "Plugins",
                "synthetics": "Synthetics"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-newrelic/sdk/v4/go/newrelic"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing New Relic resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/newrelic/terraform-provider-newrelic)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-newrelic` repo](https://github.com/pulumi/pulumi-newrelic/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`newrelic/terraform-provider-newrelic` repo](https://github.com/newrelic/terraform-provider-newrelic/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/newrelic/terraform-provider-newrelic)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-newrelic` repo](https://github.com/pulumi/pulumi-newrelic/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`newrelic/terraform-provider-newrelic` repo](https://github.com/newrelic/terraform-provider-newrelic/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "accountId": {
                "type": "integer",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_ACCOUNT_ID"
                    ]
                }
            },
            "adminApiKey": {
                "type": "string"
            },
            "apiKey": {
                "type": "string"
            },
            "apiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "cacertFile": {
                "type": "string"
            },
            "infrastructureApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "insecureSkipVerify": {
                "type": "boolean"
            },
            "insightsInsertKey": {
                "type": "string"
            },
            "insightsInsertUrl": {
                "type": "string"
            },
            "insightsQueryUrl": {
                "type": "string"
            },
            "nerdgraphApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "region": {
                "type": "string",
                "description": "The data center for which your New Relic account is configured. Only one region per provider block is permitted.\n",
                "default": "US",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_REGION"
                    ]
                }
            },
            "syntheticsApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            }
        },
        "defaults": [
            "accountId",
            "region"
        ]
    },
    "types": {
        "newrelic:cloud/AwsGovcloudIntegrationsAlb:AwsGovcloudIntegrationsAlb": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n* `s3`\n* `sqs`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n* `emr`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancerPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n* `api Gateway`\n* `auto scaling`\n* `ebs`\n* `ec2`\n* `elastic search`\n* `elb`\n* `iam`\n* `lambda`\n* `rds`\n* `redshift`\n* `route53`\n* `sns`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsApiGateway:AwsGovcloudIntegrationsApiGateway": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stagePrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each name or prefix for the Stages that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n* `api Gateway`\n* `auto scaling`\n* `ebs`\n* `ec2`\n* `elastic search`\n* `elb`\n* `iam`\n* `lambda`\n* `rds`\n* `redshift`\n* `route53`\n* `sns`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsAutoScaling:AwsGovcloudIntegrationsAutoScaling": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsAwsDirectConnect:AwsGovcloudIntegrationsAwsDirectConnect": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsAwsStates:AwsGovcloudIntegrationsAwsStates": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsCloudtrail:AwsGovcloudIntegrationsCloudtrail": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsDynamoDb:AwsGovcloudIntegrationsDynamoDb": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n* `s3`\n* `sqs`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n* `emr`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n* `api Gateway`\n* `auto scaling`\n* `ebs`\n* `ec2`\n* `elastic search`\n* `elb`\n* `iam`\n* `lambda`\n* `rds`\n* `redshift`\n* `route53`\n* `sns`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsEbs:AwsGovcloudIntegrationsEbs": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n* `s3`\n* `sqs`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n* `api Gateway`\n* `auto scaling`\n* `ebs`\n* `ec2`\n* `elastic search`\n* `elb`\n* `iam`\n* `lambda`\n* `rds`\n* `redshift`\n* `route53`\n* `sns`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsEc2:AwsGovcloudIntegrationsEc2": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchIpAddresses": {
                    "type": "boolean",
                    "description": "Specify if IP addresses of ec2 instance should be collected\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n* `api Gateway`\n* `auto scaling`\n* `ebs`\n* `ec2`\n* `elastic search`\n* `elb`\n* `iam`\n* `lambda`\n* `rds`\n* `redshift`\n* `route53`\n* `sns`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsElasticSearch:AwsGovcloudIntegrationsElasticSearch": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchNodes": {
                    "type": "boolean",
                    "description": "Specify if metrics should be collected for nodes. Turning it on will increase the number of API calls made to CloudWatch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n* `api Gateway`\n* `auto scaling`\n* `ebs`\n* `ec2`\n* `elastic search`\n* `elb`\n* `iam`\n* `lambda`\n* `rds`\n* `redshift`\n* `route53`\n* `sns`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsElb:AwsGovcloudIntegrationsElb": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n* `s3`\n* `sqs`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n* `emr`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsEmr:AwsGovcloudIntegrationsEmr": {
            "properties": {
                "awsRegions": {
                    "type": "string",
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n* `emr`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n* `api Gateway`\n* `auto scaling`\n* `ebs`\n* `ec2`\n* `elastic search`\n* `elb`\n* `iam`\n* `lambda`\n* `rds`\n* `redshift`\n* `route53`\n* `sns`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsIam:AwsGovcloudIntegrationsIam": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n* `api Gateway`\n* `auto scaling`\n* `ebs`\n* `ec2`\n* `elastic search`\n* `elb`\n* `iam`\n* `lambda`\n* `rds`\n* `redshift`\n* `route53`\n* `sns`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsLambda:AwsGovcloudIntegrationsLambda": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n* `emr`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n* `api Gateway`\n* `auto scaling`\n* `ebs`\n* `ec2`\n* `elastic search`\n* `elb`\n* `iam`\n* `lambda`\n* `rds`\n* `redshift`\n* `route53`\n* `sns`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsRds:AwsGovcloudIntegrationsRds": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n* `emr`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n* `api Gateway`\n* `auto scaling`\n* `ebs`\n* `ec2`\n* `elastic search`\n* `elb`\n* `iam`\n* `lambda`\n* `rds`\n* `redshift`\n* `route53`\n* `sns`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsRedShift:AwsGovcloudIntegrationsRedShift": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n* `api Gateway`\n* `auto scaling`\n* `ebs`\n* `ec2`\n* `elastic search`\n* `elb`\n* `iam`\n* `lambda`\n* `rds`\n* `redshift`\n* `route53`\n* `sns`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsRoute53:AwsGovcloudIntegrationsRoute53": {
            "properties": {
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n* `s3`\n* `sqs`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsS3:AwsGovcloudIntegrationsS3": {
            "properties": {
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n* `s3`\n* `sqs`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n* `emr`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n* `api Gateway`\n* `auto scaling`\n* `ebs`\n* `ec2`\n* `elastic search`\n* `elb`\n* `iam`\n* `lambda`\n* `rds`\n* `redshift`\n* `route53`\n* `sns`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsSns:AwsGovcloudIntegrationsSns": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n* `s3`\n* `sqs`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsGovcloudIntegrationsSqs:AwsGovcloudIntegrationsSqs": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `direct connect`\n* `aws states`\n* `cloudtrail`\n* `dynamoDB`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchExtendedInventory": {
                    "type": "boolean",
                    "description": "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n* `s3`\n* `sqs`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n* `emr`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queuePrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n* `api Gateway`\n* `auto scaling`\n* `ebs`\n* `ec2`\n* `elastic search`\n* `elb`\n* `iam`\n* `lambda`\n* `rds`\n* `redshift`\n* `route53`\n* `sns`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsBilling:AwsIntegrationsBilling": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsCloudtrail:AwsIntegrationsCloudtrail": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `vpc`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsHealth:AwsIntegrationsHealth": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsTrustedAdvisor:AwsIntegrationsTrustedAdvisor": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsVpc:AwsIntegrationsVpc": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `vpc`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchNatGateway": {
                    "type": "boolean",
                    "description": "Specify if NAT gateway should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchVpn": {
                    "type": "boolean",
                    "description": "Specify if VPN should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagKey": {
                    "type": "string",
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n* `x_ray`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AwsIntegrationsXRay:AwsIntegrationsXRay": {
            "properties": {
                "awsRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each AWS region that includes the resources that you want to monitor.\n* `vpc`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsApiManagement:AzureIntegrationsApiManagement": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsAppGateway:AzureIntegrationsAppGateway": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsAppService:AzureIntegrationsAppService": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsContainers:AzureIntegrationsContainers": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsCosmosDb:AzureIntegrationsCosmosDb": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsCostManagement:AzureIntegrationsCostManagement": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsDataFactory:AzureIntegrationsDataFactory": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsEventHub:AzureIntegrationsEventHub": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsExpressRoute:AzureIntegrationsExpressRoute": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsFirewalls:AzureIntegrationsFirewalls": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsFrontDoor:AzureIntegrationsFrontDoor": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsFunctions:AzureIntegrationsFunctions": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsKeyVault:AzureIntegrationsKeyVault": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsLoadBalancer:AzureIntegrationsLoadBalancer": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsLogicApps:AzureIntegrationsLogicApps": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsMachineLearning:AzureIntegrationsMachineLearning": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsMariaDb:AzureIntegrationsMariaDb": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsMysql:AzureIntegrationsMysql": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsPostgresql:AzureIntegrationsPostgresql": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsPowerBiDedicated:AzureIntegrationsPowerBiDedicated": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsRedisCache:AzureIntegrationsRedisCache": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsServiceBus:AzureIntegrationsServiceBus": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsSql:AzureIntegrationsSql": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsSqlManaged:AzureIntegrationsSqlManaged": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsStorage:AzureIntegrationsStorage": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsVirtualMachine:AzureIntegrationsVirtualMachine": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsVirtualNetworks:AzureIntegrationsVirtualNetworks": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsVms:AzureIntegrationsVms": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/AzureIntegrationsVpnGateway:AzureIntegrationsVpnGateway": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsAppEngine:GcpIntegrationsAppEngine": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsBigQuery:GcpIntegrationsBigQuery": {
            "properties": {
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsBigTable:GcpIntegrationsBigTable": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsComposer:GcpIntegrationsComposer": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsDataFlow:GcpIntegrationsDataFlow": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsDataProc:GcpIntegrationsDataProc": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsDataStore:GcpIntegrationsDataStore": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsFireBaseDatabase:GcpIntegrationsFireBaseDatabase": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsFireBaseHosting:GcpIntegrationsFireBaseHosting": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsFireBaseStorage:GcpIntegrationsFireBaseStorage": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsFireStore:GcpIntegrationsFireStore": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsFunctions:GcpIntegrationsFunctions": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsInterconnect:GcpIntegrationsInterconnect": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsKubernetes:GcpIntegrationsKubernetes": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsLoadBalancing:GcpIntegrationsLoadBalancing": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsMemCache:GcpIntegrationsMemCache": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsPubSub:GcpIntegrationsPubSub": {
            "properties": {
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsRedis:GcpIntegrationsRedis": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsRouter:GcpIntegrationsRouter": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsRun:GcpIntegrationsRun": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsSpanner:GcpIntegrationsSpanner": {
            "properties": {
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsSql:GcpIntegrationsSql": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsStorage:GcpIntegrationsStorage": {
            "properties": {
                "fetchTags": {
                    "type": "boolean",
                    "description": "Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsVirtualMachines:GcpIntegrationsVirtualMachines": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:cloud/GcpIntegrationsVpcAccess:GcpIntegrationsVpcAccess": {
            "properties": {
                "metricsPollingInterval": {
                    "type": "integer",
                    "description": "The data polling interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:index/AlertChannelConfig:AlertChannelConfig": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The API key for integrating with OpsGenie.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "authPassword": {
                    "type": "string",
                    "description": "Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "authType": {
                    "type": "string",
                    "description": "Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "authUsername": {
                    "type": "string",
                    "description": "Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "baseUrl": {
                    "type": "string",
                    "description": "The base URL of the webhook destination.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "channel": {
                    "type": "string",
                    "description": "The Slack channel to send notifications to.\n* `opsgenie`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "headersString": {
                    "type": "string",
                    "description": "Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "includeJsonAttachment": {
                    "type": "string",
                    "description": "`true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.\n* `webhook`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "key": {
                    "type": "string",
                    "description": "The key for integrating with VictorOps.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "payload": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value pairs that represents the webhook payload.  Must provide `payload_type` if setting this argument.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "payloadString": {
                    "type": "string",
                    "description": "Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "payloadType": {
                    "type": "string",
                    "description": "Can either be `application/json` or `application/x-www-form-urlencoded`. The `payload_type` argument is _required_ if `payload` is set.\n* `pagerduty`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "recipients": {
                    "type": "string",
                    "description": "A set of recipients for targeting notifications.  Multiple values are comma separated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "routeKey": {
                    "type": "string",
                    "description": "The route key for integrating with VictorOps.\n* `slack`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "serviceKey": {
                    "type": "string",
                    "description": "Specifies the service key for integrating with Pagerduty.\n* `victorops`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "string",
                    "description": "A set of tags for targeting notifications. Multiple values are comma separated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "teams": {
                    "type": "string",
                    "description": "A set of teams for targeting notifications. Multiple values are comma separated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "[Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "newrelic:index/AlertConditionTerm:AlertConditionTerm": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFunction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration",
                "threshold",
                "timeFunction"
            ]
        },
        "newrelic:index/AlertMutingRuleCondition:AlertMutingRuleCondition": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/AlertMutingRuleConditionCondition:AlertMutingRuleConditionCondition"
                    },
                    "description": "The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "description": "The operator used to combine all the MutingRuleConditions within the group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions",
                "operator"
            ]
        },
        "newrelic:index/AlertMutingRuleConditionCondition:AlertMutingRuleConditionCondition": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "The attribute on a violation. Valid values are   `accountId`, `conditionId`, `conditionName`, `conditionRunbookUrl`, `conditionType`, `entity.guid`, `nrqlEventType`, `nrqlQuery`, `policyId`, `policyName`, `product`, `tags.\u003cNAME\u003e`, `targetId`, `targetName`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "description": "The operator used to compare the attribute's value with the supplied value(s). Valid values are `ANY`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `IN`, `IS_BLANK`, `IS_NOT_BLANK`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_IN`, `NOT_STARTS_WITH`, `STARTS_WITH`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The value(s) to compare against the attribute's value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "operator",
                "values"
            ]
        },
        "newrelic:index/AlertMutingRuleSchedule:AlertMutingRuleSchedule": {
            "properties": {
                "endRepeat": {
                    "type": "string",
                    "description": "The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeat_count`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endTime": {
                    "type": "string",
                    "description": "The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repeat": {
                    "type": "string",
                    "description": "The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repeatCount": {
                    "type": "integer",
                    "description": "The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `end_repeat`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "string",
                    "description": "The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeZone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weeklyRepeatDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "timeZone"
            ]
        },
        "newrelic:index/DashboardFilter:DashboardFilter": {
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "eventTypes"
            ]
        },
        "newrelic:index/DashboardWidget:DashboardWidget": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "column": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compareWiths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/DashboardWidgetCompareWith:DashboardWidgetCompareWith"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "drilldownDashboardId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "duration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endTime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "entityIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "facet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/DashboardWidgetMetric:DashboardWidgetMetric"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nrql": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orderBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rawMetricName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdRed": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdYellow": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "visualization": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "column",
                "row",
                "title",
                "visualization"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "rawMetricName",
                        "row",
                        "title",
                        "visualization",
                        "widgetId"
                    ]
                }
            }
        },
        "newrelic:index/DashboardWidgetCompareWith:DashboardWidgetCompareWith": {
            "properties": {
                "offsetDuration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "presentation": {
                    "$ref": "#/types/newrelic:index/DashboardWidgetCompareWithPresentation:DashboardWidgetCompareWithPresentation",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "offsetDuration",
                "presentation"
            ]
        },
        "newrelic:index/DashboardWidgetCompareWithPresentation:DashboardWidgetCompareWithPresentation": {
            "properties": {
                "color": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "color",
                "name"
            ]
        },
        "newrelic:index/DashboardWidgetMetric:DashboardWidgetMetric": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scope": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "units": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "newrelic:index/EntityTagsTag:EntityTagsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The tag key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tag values.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "values"
            ]
        },
        "newrelic:index/InfraAlertConditionCritical:InfraAlertConditionCritical": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFunction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration"
            ]
        },
        "newrelic:index/InfraAlertConditionWarning:InfraAlertConditionWarning": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFunction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration"
            ]
        },
        "newrelic:index/NrqlAlertConditionCritical:NrqlAlertConditionCritical": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "**DEPRECATED:** Use `threshold_duration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).\n",
                    "deprecationMessage": "use `threshold_duration` attribute instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "description": "Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "description": "The value which will trigger a violation. Must be `0` or greater.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdDuration": {
                    "type": "integer",
                    "description": "The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregation_window` (which has a default of 60 seconds).\n\u003cbr\u003eFor _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).\n\u003cbr\u003eFor _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).\n\u003cbr\u003eFor _static_ NRQL alert conditions with the `single_value` value function, the value must be within 60-7200 seconds (inclusive).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdOccurrences": {
                    "type": "string",
                    "description": "The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `at_least_once` (case insensitive).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFunction": {
                    "type": "string",
                    "description": "**DEPRECATED:** Use `threshold_occurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.\n",
                    "deprecationMessage": "use `threshold_occurrences` attribute instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "threshold"
            ]
        },
        "newrelic:index/NrqlAlertConditionNrql:NrqlAlertConditionNrql": {
            "properties": {
                "evaluationOffset": {
                    "type": "integer",
                    "description": "Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated in one-minute time windows. The start time depends on this value. It's recommended to set this to 3 minutes. An offset of less than 3 minutes will trigger violations sooner, but you may see more false positives and negatives due to data latency. With `evaluation_offset` set to 3 minutes, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`.\u003cbr\u003e\n\u003csmall\u003e\\***Note**: One of `evaluation_offset` _or_ `since_value` must be set, but not both.\u003c/small\u003e\n",
                    "deprecationMessage": "use `aggregation_method` attribute instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "The NRQL query to execute for the condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sinceValue": {
                    "type": "string",
                    "description": "**DEPRECATED:** Use `evaluation_offset` instead. The value to be used in the `SINCE \u003cX\u003e minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive). \u003cbr\u003e\n\u003csmall\u003e\\***Note**: One of `evaluation_offset` _or_ `since_value` must be set, but not both.\u003c/small\u003e\n",
                    "deprecationMessage": "use `aggregation_method` attribute instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query"
            ]
        },
        "newrelic:index/NrqlAlertConditionTerm:NrqlAlertConditionTerm": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "**DEPRECATED:** Use `threshold_duration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).\n",
                    "deprecationMessage": "use `threshold_duration` attribute instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "description": "Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "description": "`critical` or `warning`. Defaults to `critical`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "description": "The value which will trigger a violation. Must be `0` or greater.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdDuration": {
                    "type": "integer",
                    "description": "The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregation_window` (which has a default of 60 seconds).\n\u003cbr\u003eFor _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).\n\u003cbr\u003eFor _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).\n\u003cbr\u003eFor _static_ NRQL alert conditions with the `single_value` value function, the value must be within 60-7200 seconds (inclusive).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdOccurrences": {
                    "type": "string",
                    "description": "The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `at_least_once` (case insensitive).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFunction": {
                    "type": "string",
                    "description": "**DEPRECATED:** Use `threshold_occurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.\n",
                    "deprecationMessage": "use `threshold_occurrences` attribute instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "threshold"
            ]
        },
        "newrelic:index/NrqlAlertConditionWarning:NrqlAlertConditionWarning": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "**DEPRECATED:** Use `threshold_duration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).\n",
                    "deprecationMessage": "use `threshold_duration` attribute instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "description": "Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "description": "The value which will trigger a violation. Must be `0` or greater.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdDuration": {
                    "type": "integer",
                    "description": "The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregation_window` (which has a default of 60 seconds).\n\u003cbr\u003eFor _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).\n\u003cbr\u003eFor _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).\n\u003cbr\u003eFor _static_ NRQL alert conditions with the `single_value` value function, the value must be within 60-7200 seconds (inclusive).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdOccurrences": {
                    "type": "string",
                    "description": "The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `at_least_once` (case insensitive).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFunction": {
                    "type": "string",
                    "description": "**DEPRECATED:** Use `threshold_occurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.\n",
                    "deprecationMessage": "use `threshold_occurrences` attribute instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "threshold"
            ]
        },
        "newrelic:index/OneDashboardPage:OneDashboardPage": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Brief text describing the dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "guid": {
                    "type": "string",
                    "description": "The unique entity identifier of the dashboard page in New Relic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetAreas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetArea:OneDashboardPageWidgetArea"
                    },
                    "description": "(Optional) A nested block that describes an Area widget.  See Nested widget blocks below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetBars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBar:OneDashboardPageWidgetBar"
                    },
                    "description": "(Optional) A nested block that describes a Bar widget.  See Nested widget blocks below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetBillboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBillboard:OneDashboardPageWidgetBillboard"
                    },
                    "description": "(Optional) A nested block that describes a Billboard widget.  See Nested widget blocks below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetBullets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBullet:OneDashboardPageWidgetBullet"
                    },
                    "description": "(Optional) A nested block that describes a Bullet widget.  See Nested widget blocks below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetFunnels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetFunnel:OneDashboardPageWidgetFunnel"
                    },
                    "description": "(Optional) A nested block that describes a Funnel widget.  See Nested widget blocks below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetHeatmaps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHeatmap:OneDashboardPageWidgetHeatmap"
                    },
                    "description": "(Optional) A nested block that describes a Heatmap widget.  See Nested widget blocks below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetHistograms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHistogram:OneDashboardPageWidgetHistogram"
                    },
                    "description": "(Optional) A nested block that describes a Histogram widget.  See Nested widget blocks below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetJsons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetJson:OneDashboardPageWidgetJson"
                    },
                    "description": "(Optional) A nested block that describes a JSON widget.  See Nested widget blocks below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetLines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLine:OneDashboardPageWidgetLine"
                    },
                    "description": "(Optional) A nested block that describes a Line widget.  See Nested widget blocks below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetMarkdowns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetMarkdown:OneDashboardPageWidgetMarkdown"
                    },
                    "description": "(Optional) A nested block that describes a Markdown widget.  See Nested widget blocks below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetPies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetPy:OneDashboardPageWidgetPy"
                    },
                    "description": "(Optional) A nested block that describes a Pie widget.  See Nested widget blocks below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetStackedBars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetStackedBar:OneDashboardPageWidgetStackedBar"
                    },
                    "description": "(Optional) A nested block that describes a Stacked Bar widget. See Nested widget blocks below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetTables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetTable:OneDashboardPageWidgetTable"
                    },
                    "description": "(Optional) A nested block that describes a Table widget.  See Nested widget blocks below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "guid",
                        "name"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetArea:OneDashboardPageWidgetArea": {
            "properties": {
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetAreaNrqlQuery:OneDashboardPageWidgetAreaNrqlQuery"
                    },
                    "description": "(Required) A nested block that describes a NRQL Query. See Nested nrql\\_query blocks below for details.\n* `linked_entity_guids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.\n* `filter_current_dashboard`: (Optional) Use this item to filter the current dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "(Required) A title for the widget.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetAreaNrqlQuery:OneDashboardPageWidgetAreaNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetBar:OneDashboardPageWidgetBar": {
            "properties": {
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterCurrentDashboard": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkedEntityGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBarNrqlQuery:OneDashboardPageWidgetBarNrqlQuery"
                    },
                    "description": "(Required) A nested block that describes a NRQL Query. See Nested nrql\\_query blocks below for details.\n* `linked_entity_guids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.\n* `filter_current_dashboard`: (Optional) Use this item to filter the current dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "(Required) A title for the widget.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "linkedEntityGuids",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetBarNrqlQuery:OneDashboardPageWidgetBarNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetBillboard:OneDashboardPageWidgetBillboard": {
            "properties": {
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "critical": {
                    "type": "string",
                    "description": "(Optional) Threshold above which the displayed value will be styled with a red color.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBillboardNrqlQuery:OneDashboardPageWidgetBillboardNrqlQuery"
                    },
                    "description": "(Required) A nested block that describes a NRQL Query. See Nested nrql\\_query blocks below for details.\n* `linked_entity_guids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.\n* `filter_current_dashboard`: (Optional) Use this item to filter the current dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "(Required) A title for the widget.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "warning": {
                    "type": "string",
                    "description": "(Optional) Threshold above which the displayed value will be styled with a yellow color.\n* `widget_bullet`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetBillboardNrqlQuery:OneDashboardPageWidgetBillboardNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetBullet:OneDashboardPageWidgetBullet": {
            "properties": {
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limit": {
                    "type": "number",
                    "description": "(Required) Visualization limit for the widget.\n* `widget_funnel`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetBulletNrqlQuery:OneDashboardPageWidgetBulletNrqlQuery"
                    },
                    "description": "(Required) A nested block that describes a NRQL Query. See Nested nrql\\_query blocks below for details.\n* `linked_entity_guids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.\n* `filter_current_dashboard`: (Optional) Use this item to filter the current dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "(Required) A title for the widget.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "column",
                "limit",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "limit",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetBulletNrqlQuery:OneDashboardPageWidgetBulletNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetFunnel:OneDashboardPageWidgetFunnel": {
            "properties": {
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetFunnelNrqlQuery:OneDashboardPageWidgetFunnelNrqlQuery"
                    },
                    "description": "(Required) A nested block that describes a NRQL Query. See Nested nrql\\_query blocks below for details.\n* `linked_entity_guids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.\n* `filter_current_dashboard`: (Optional) Use this item to filter the current dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "(Required) A title for the widget.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetFunnelNrqlQuery:OneDashboardPageWidgetFunnelNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetHeatmap:OneDashboardPageWidgetHeatmap": {
            "properties": {
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHeatmapNrqlQuery:OneDashboardPageWidgetHeatmapNrqlQuery"
                    },
                    "description": "(Required) A nested block that describes a NRQL Query. See Nested nrql\\_query blocks below for details.\n* `linked_entity_guids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.\n* `filter_current_dashboard`: (Optional) Use this item to filter the current dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "(Required) A title for the widget.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetHeatmapNrqlQuery:OneDashboardPageWidgetHeatmapNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetHistogram:OneDashboardPageWidgetHistogram": {
            "properties": {
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetHistogramNrqlQuery:OneDashboardPageWidgetHistogramNrqlQuery"
                    },
                    "description": "(Required) A nested block that describes a NRQL Query. See Nested nrql\\_query blocks below for details.\n* `linked_entity_guids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.\n* `filter_current_dashboard`: (Optional) Use this item to filter the current dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "(Required) A title for the widget.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetHistogramNrqlQuery:OneDashboardPageWidgetHistogramNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetJson:OneDashboardPageWidgetJson": {
            "properties": {
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetJsonNrqlQuery:OneDashboardPageWidgetJsonNrqlQuery"
                    },
                    "description": "(Required) A nested block that describes a NRQL Query. See Nested nrql\\_query blocks below for details.\n* `linked_entity_guids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.\n* `filter_current_dashboard`: (Optional) Use this item to filter the current dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "(Required) A title for the widget.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetJsonNrqlQuery:OneDashboardPageWidgetJsonNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetLine:OneDashboardPageWidgetLine": {
            "properties": {
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetLineNrqlQuery:OneDashboardPageWidgetLineNrqlQuery"
                    },
                    "description": "(Required) A nested block that describes a NRQL Query. See Nested nrql\\_query blocks below for details.\n* `linked_entity_guids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.\n* `filter_current_dashboard`: (Optional) Use this item to filter the current dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "(Required) A title for the widget.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetLineNrqlQuery:OneDashboardPageWidgetLineNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetMarkdown:OneDashboardPageWidgetMarkdown": {
            "properties": {
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "text": {
                    "type": "string",
                    "description": "(Required) The markdown source to be rendered in the widget.\n* `widget_stacked_bar`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "(Required) A title for the widget.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "column",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetPy:OneDashboardPageWidgetPy": {
            "properties": {
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterCurrentDashboard": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkedEntityGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetPyNrqlQuery:OneDashboardPageWidgetPyNrqlQuery"
                    },
                    "description": "(Required) A nested block that describes a NRQL Query. See Nested nrql\\_query blocks below for details.\n* `linked_entity_guids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.\n* `filter_current_dashboard`: (Optional) Use this item to filter the current dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "(Required) A title for the widget.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "linkedEntityGuids",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetPyNrqlQuery:OneDashboardPageWidgetPyNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetStackedBar:OneDashboardPageWidgetStackedBar": {
            "properties": {
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetStackedBarNrqlQuery:OneDashboardPageWidgetStackedBarNrqlQuery"
                    },
                    "description": "(Required) A nested block that describes a NRQL Query. See Nested nrql\\_query blocks below for details.\n* `linked_entity_guids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.\n* `filter_current_dashboard`: (Optional) Use this item to filter the current dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "(Required) A title for the widget.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetStackedBarNrqlQuery:OneDashboardPageWidgetStackedBarNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetTable:OneDashboardPageWidgetTable": {
            "properties": {
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterCurrentDashboard": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreTimeRange": {
                    "type": "boolean",
                    "description": "(Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkedEntityGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nrqlQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPageWidgetTableNrqlQuery:OneDashboardPageWidgetTableNrqlQuery"
                    },
                    "description": "(Required) A nested block that describes a NRQL Query. See Nested nrql\\_query blocks below for details.\n* `linked_entity_guids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.\n* `filter_current_dashboard`: (Optional) Use this item to filter the current dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "(Required) A title for the widget.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "column",
                "nrqlQueries",
                "row",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "id",
                        "linkedEntityGuids",
                        "nrqlQueries",
                        "row",
                        "title"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardPageWidgetTableNrqlQuery:OneDashboardPageWidgetTableNrqlQuery": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "(Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "query"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardRawPage:OneDashboardRawPage": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Brief text describing the dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "guid": {
                    "type": "string",
                    "description": "The unique entity identifier of the dashboard page in New Relic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardRawPageWidget:OneDashboardRawPageWidget"
                    },
                    "description": "(Optional) A nested block that describes a widget. See Nested widget blocks below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "guid",
                        "name"
                    ]
                }
            }
        },
        "newrelic:index/OneDashboardRawPageWidget:OneDashboardRawPageWidget": {
            "properties": {
                "column": {
                    "type": "integer",
                    "description": "(Required) Column position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configuration": {
                    "type": "string",
                    "description": "(Required) The configuration of the widget.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "height": {
                    "type": "integer",
                    "description": "(Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkedEntityGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) Related entity GUIDs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "row": {
                    "type": "integer",
                    "description": "(Required) Row position of widget from top left, starting at `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "(Required) A title for the widget.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "visualizationId": {
                    "type": "string",
                    "description": "(Required) The visualization ID of the widget\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "width": {
                    "type": "integer",
                    "description": "(Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "column",
                "configuration",
                "row",
                "title",
                "visualizationId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "column",
                        "configuration",
                        "id",
                        "row",
                        "title",
                        "visualizationId"
                    ]
                }
            }
        },
        "newrelic:index/ServiceLevelEvents:ServiceLevelEvents": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,\nand that contains the NRDB data for the SLI/SLO calculations.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "badEvents": {
                    "$ref": "#/types/newrelic:index/ServiceLevelEventsBadEvents:ServiceLevelEventsBadEvents",
                    "description": "The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "goodEvents": {
                    "$ref": "#/types/newrelic:index/ServiceLevelEventsGoodEvents:ServiceLevelEventsGoodEvents",
                    "description": "The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validEvents": {
                    "$ref": "#/types/newrelic:index/ServiceLevelEventsValidEvents:ServiceLevelEventsValidEvents",
                    "description": "The definition of valid requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "validEvents"
            ]
        },
        "newrelic:index/ServiceLevelEventsBadEvents:ServiceLevelEventsBadEvents": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "The event type where NRDB data will be fetched from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "where": {
                    "type": "string",
                    "description": "A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).\na particular entity and were successful).\na particular entity and returned an error).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "from"
            ]
        },
        "newrelic:index/ServiceLevelEventsGoodEvents:ServiceLevelEventsGoodEvents": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "The event type where NRDB data will be fetched from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "where": {
                    "type": "string",
                    "description": "A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).\na particular entity and were successful).\na particular entity and returned an error).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "from"
            ]
        },
        "newrelic:index/ServiceLevelEventsValidEvents:ServiceLevelEventsValidEvents": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "The event type where NRDB data will be fetched from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "where": {
                    "type": "string",
                    "description": "A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).\na particular entity and were successful).\na particular entity and returned an error).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "from"
            ]
        },
        "newrelic:index/ServiceLevelObjective:ServiceLevelObjective": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the SLI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "A short name for the SLI that will help anyone understand what it is about.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "number",
                    "description": "The target of the objective, valid values between `0` and `100`. Up to 5 decimals accepted.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeWindow": {
                    "$ref": "#/types/newrelic:index/ServiceLevelObjectiveTimeWindow:ServiceLevelObjectiveTimeWindow",
                    "description": "Time window is the period of the objective.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "target",
                "timeWindow"
            ]
        },
        "newrelic:index/ServiceLevelObjectiveTimeWindow:ServiceLevelObjectiveTimeWindow": {
            "properties": {
                "rolling": {
                    "$ref": "#/types/newrelic:index/ServiceLevelObjectiveTimeWindowRolling:ServiceLevelObjectiveTimeWindowRolling",
                    "description": "Rolling window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rolling"
            ]
        },
        "newrelic:index/ServiceLevelObjectiveTimeWindowRolling:ServiceLevelObjectiveTimeWindowRolling": {
            "properties": {
                "count": {
                    "type": "integer",
                    "description": "Valid values are `1`, `7` and `28`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unit": {
                    "type": "string",
                    "description": "The only supported value is `DAY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "count",
                "unit"
            ]
        },
        "newrelic:index/getAlertChannelConfig:getAlertChannelConfig": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUsername": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "baseUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "channel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeJsonAttachment": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "payload": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "payloadString": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "payloadType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipients": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teams": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "newrelic:index/getEntityTag:getEntityTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "newrelic:insights/EventEvent:EventEvent": {
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:insights/EventEventAttribute:EventEventAttribute"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "timestamp": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "attributes",
                "type"
            ]
        },
        "newrelic:insights/EventEventAttribute:EventEventAttribute": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "newrelic:plugins/AlertConditionTerm:AlertConditionTerm": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFunction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration",
                "threshold",
                "timeFunction"
            ]
        },
        "newrelic:plugins/WorkloadEntitySearchQuery:WorkloadEntitySearchQuery": {
            "properties": {
                "query": {
                    "type": "string",
                    "description": "The query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query"
            ]
        },
        "newrelic:synthetics/MonitorScriptLocation:MonitorScriptLocation": {
            "properties": {
                "hmac": {
                    "type": "string",
                    "description": "The monitor script authentication code for the location. Use one of either `hmac` or `vse_password`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The monitor script location name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vsePassword": {
                    "type": "string",
                    "description": "The password for the location used to calculate the HMAC. Use one of either `hmac` or `vse_password`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "newrelic:synthetics/MultiLocationAlertConditionCritical:MultiLocationAlertConditionCritical": {
            "properties": {
                "threshold": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "threshold"
            ]
        },
        "newrelic:synthetics/MultiLocationAlertConditionWarning:MultiLocationAlertConditionWarning": {
            "properties": {
                "threshold": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "threshold"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the newrelic package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accountId": {
                "type": "integer"
            },
            "adminApiKey": {
                "type": "string"
            },
            "apiKey": {
                "type": "string"
            },
            "apiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "cacertFile": {
                "type": "string"
            },
            "infrastructureApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "insecureSkipVerify": {
                "type": "boolean"
            },
            "insightsInsertKey": {
                "type": "string"
            },
            "insightsInsertUrl": {
                "type": "string"
            },
            "insightsQueryUrl": {
                "type": "string"
            },
            "nerdgraphApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "region": {
                "type": "string",
                "description": "The data center for which your New Relic account is configured. Only one region per provider block is permitted.\n"
            },
            "syntheticsApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            }
        },
        "inputProperties": {
            "accountId": {
                "type": "integer",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_ACCOUNT_ID"
                    ]
                }
            },
            "adminApiKey": {
                "type": "string"
            },
            "apiKey": {
                "type": "string"
            },
            "apiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "cacertFile": {
                "type": "string"
            },
            "infrastructureApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "insecureSkipVerify": {
                "type": "boolean"
            },
            "insightsInsertKey": {
                "type": "string"
            },
            "insightsInsertUrl": {
                "type": "string"
            },
            "insightsQueryUrl": {
                "type": "string"
            },
            "nerdgraphApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            },
            "region": {
                "type": "string",
                "description": "The data center for which your New Relic account is configured. Only one region per provider block is permitted.\n",
                "default": "US",
                "defaultInfo": {
                    "environment": [
                        "NEW_RELIC_REGION"
                    ]
                }
            },
            "syntheticsApiUrl": {
                "type": "string",
                "deprecationMessage": "New Relic internal use only. API URLs are now configured based on the configured region."
            }
        }
    },
    "resources": {
        "newrelic:cloud/awsGovcloudIntegrations:AwsGovcloudIntegrations": {
            "description": "\n\n## Import\n\nIntegrate AWSGovCloud accounts can be imported using the `id`, e.g. bash\n\n```sh\n $ pulumi import newrelic:cloud/awsGovcloudIntegrations:AwsGovcloudIntegrations foo \u003cid\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on. This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "alb": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAlb:AwsGovcloudIntegrationsAlb",
                    "description": "Application load balancer AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "apiGateway": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsApiGateway:AwsGovcloudIntegrationsApiGateway",
                    "description": "Api Gateway AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "autoScaling": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAutoScaling:AwsGovcloudIntegrationsAutoScaling",
                    "description": "Autoscaling AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "awsDirectConnect": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAwsDirectConnect:AwsGovcloudIntegrationsAwsDirectConnect",
                    "description": "Aws Direct Connect AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "awsStates": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAwsStates:AwsGovcloudIntegrationsAwsStates",
                    "description": "Aws States AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "cloudtrail": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsCloudtrail:AwsGovcloudIntegrationsCloudtrail",
                    "description": "Cloudtrail AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "dynamoDb": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsDynamoDb:AwsGovcloudIntegrationsDynamoDb",
                    "description": "Dynamo DB AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "ebs": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEbs:AwsGovcloudIntegrationsEbs",
                    "description": "Elastic Beanstalk AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "ec2": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEc2:AwsGovcloudIntegrationsEc2",
                    "description": "EC2 AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "elasticSearch": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsElasticSearch:AwsGovcloudIntegrationsElasticSearch",
                    "description": "Elastic search AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "elb": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsElb:AwsGovcloudIntegrationsElb",
                    "description": "Elb AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "emr": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEmr:AwsGovcloudIntegrationsEmr",
                    "description": "Emr AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "iam": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsIam:AwsGovcloudIntegrationsIam",
                    "description": "IAM AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "lambda": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsLambda:AwsGovcloudIntegrationsLambda",
                    "description": "Lambda AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "linkedAccountId": {
                    "type": "integer",
                    "description": "The access key of the AwsGovCloud.\n"
                },
                "rds": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRds:AwsGovcloudIntegrationsRds",
                    "description": "RDS AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "redShift": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRedShift:AwsGovcloudIntegrationsRedShift",
                    "description": "Redshift AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "route53": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRoute53:AwsGovcloudIntegrationsRoute53",
                    "description": "Route53 AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "s3": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsS3:AwsGovcloudIntegrationsS3",
                    "description": "The s3 integration\n"
                },
                "sns": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsSns:AwsGovcloudIntegrationsSns",
                    "description": "SNS AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "sqs": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsSqs:AwsGovcloudIntegrationsSqs",
                    "description": "SQS AwsGovCloud integration.See Integration blocks below for details.\n"
                }
            },
            "required": [
                "accountId",
                "linkedAccountId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on. This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "alb": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAlb:AwsGovcloudIntegrationsAlb",
                    "description": "Application load balancer AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "apiGateway": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsApiGateway:AwsGovcloudIntegrationsApiGateway",
                    "description": "Api Gateway AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "autoScaling": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAutoScaling:AwsGovcloudIntegrationsAutoScaling",
                    "description": "Autoscaling AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "awsDirectConnect": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAwsDirectConnect:AwsGovcloudIntegrationsAwsDirectConnect",
                    "description": "Aws Direct Connect AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "awsStates": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAwsStates:AwsGovcloudIntegrationsAwsStates",
                    "description": "Aws States AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "cloudtrail": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsCloudtrail:AwsGovcloudIntegrationsCloudtrail",
                    "description": "Cloudtrail AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "dynamoDb": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsDynamoDb:AwsGovcloudIntegrationsDynamoDb",
                    "description": "Dynamo DB AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "ebs": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEbs:AwsGovcloudIntegrationsEbs",
                    "description": "Elastic Beanstalk AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "ec2": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEc2:AwsGovcloudIntegrationsEc2",
                    "description": "EC2 AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "elasticSearch": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsElasticSearch:AwsGovcloudIntegrationsElasticSearch",
                    "description": "Elastic search AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "elb": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsElb:AwsGovcloudIntegrationsElb",
                    "description": "Elb AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "emr": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEmr:AwsGovcloudIntegrationsEmr",
                    "description": "Emr AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "iam": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsIam:AwsGovcloudIntegrationsIam",
                    "description": "IAM AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "lambda": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsLambda:AwsGovcloudIntegrationsLambda",
                    "description": "Lambda AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "linkedAccountId": {
                    "type": "integer",
                    "description": "The access key of the AwsGovCloud.\n"
                },
                "rds": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRds:AwsGovcloudIntegrationsRds",
                    "description": "RDS AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "redShift": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRedShift:AwsGovcloudIntegrationsRedShift",
                    "description": "Redshift AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "route53": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRoute53:AwsGovcloudIntegrationsRoute53",
                    "description": "Route53 AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "s3": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsS3:AwsGovcloudIntegrationsS3",
                    "description": "The s3 integration\n"
                },
                "sns": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsSns:AwsGovcloudIntegrationsSns",
                    "description": "SNS AwsGovCloud integration.See Integration blocks below for details.\n"
                },
                "sqs": {
                    "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsSqs:AwsGovcloudIntegrationsSqs",
                    "description": "SQS AwsGovCloud integration.See Integration blocks below for details.\n"
                }
            },
            "requiredInputs": [
                "linkedAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsGovcloudIntegrations resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on. This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "alb": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAlb:AwsGovcloudIntegrationsAlb",
                        "description": "Application load balancer AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "apiGateway": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsApiGateway:AwsGovcloudIntegrationsApiGateway",
                        "description": "Api Gateway AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "autoScaling": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAutoScaling:AwsGovcloudIntegrationsAutoScaling",
                        "description": "Autoscaling AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "awsDirectConnect": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAwsDirectConnect:AwsGovcloudIntegrationsAwsDirectConnect",
                        "description": "Aws Direct Connect AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "awsStates": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsAwsStates:AwsGovcloudIntegrationsAwsStates",
                        "description": "Aws States AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "cloudtrail": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsCloudtrail:AwsGovcloudIntegrationsCloudtrail",
                        "description": "Cloudtrail AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "dynamoDb": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsDynamoDb:AwsGovcloudIntegrationsDynamoDb",
                        "description": "Dynamo DB AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "ebs": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEbs:AwsGovcloudIntegrationsEbs",
                        "description": "Elastic Beanstalk AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "ec2": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEc2:AwsGovcloudIntegrationsEc2",
                        "description": "EC2 AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "elasticSearch": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsElasticSearch:AwsGovcloudIntegrationsElasticSearch",
                        "description": "Elastic search AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "elb": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsElb:AwsGovcloudIntegrationsElb",
                        "description": "Elb AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "emr": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsEmr:AwsGovcloudIntegrationsEmr",
                        "description": "Emr AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "iam": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsIam:AwsGovcloudIntegrationsIam",
                        "description": "IAM AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "lambda": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsLambda:AwsGovcloudIntegrationsLambda",
                        "description": "Lambda AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "linkedAccountId": {
                        "type": "integer",
                        "description": "The access key of the AwsGovCloud.\n"
                    },
                    "rds": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRds:AwsGovcloudIntegrationsRds",
                        "description": "RDS AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "redShift": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRedShift:AwsGovcloudIntegrationsRedShift",
                        "description": "Redshift AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "route53": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsRoute53:AwsGovcloudIntegrationsRoute53",
                        "description": "Route53 AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "s3": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsS3:AwsGovcloudIntegrationsS3",
                        "description": "The s3 integration\n"
                    },
                    "sns": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsSns:AwsGovcloudIntegrationsSns",
                        "description": "SNS AwsGovCloud integration.See Integration blocks below for details.\n"
                    },
                    "sqs": {
                        "$ref": "#/types/newrelic:cloud/AwsGovcloudIntegrationsSqs:AwsGovcloudIntegrationsSqs",
                        "description": "SQS AwsGovCloud integration.See Integration blocks below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:cloud/awsGovcloudLinkAccount:AwsGovcloudLinkAccount": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.cloud.AwsGovcloudLinkAccount(\"foo\", {\n    accessKeyId: \"access-key-id of aws govcloud account\",\n    accountId: Number.parseFloat(\"The New Relic account ID where you want to link the AWS GovCloud account\"),\n    awsAccountId: \"aws govcloud account id\",\n    metricCollectionMode: \"PULL\",\n    secretAccessKey: \"secret access key of the aws govcloud account\",\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLinked AWSGovCloud accounts can be imported using the `id`, e.g. bash\n\n```sh\n $ pulumi import newrelic:cloud/awsGovcloudLinkAccount:AwsGovcloudLinkAccount foo \u003cid\u003e\n```\n\n ",
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The access key of the AwsGovCloud.\n"
                },
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on. This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "awsAccountId": {
                    "type": "string",
                    "description": "The AwsGovCloud account ID.\n"
                },
                "metricCollectionMode": {
                    "type": "string",
                    "description": "How metrics will be collected. Use `PUSH` for a metric stream or `PULL` to integrate with individual services.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- The linked account name\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The secret key of the AwsGovCloud.\n"
                }
            },
            "required": [
                "accessKeyId",
                "accountId",
                "awsAccountId",
                "name",
                "secretAccessKey"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The access key of the AwsGovCloud.\n"
                },
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on. This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "awsAccountId": {
                    "type": "string",
                    "description": "The AwsGovCloud account ID.\n"
                },
                "metricCollectionMode": {
                    "type": "string",
                    "description": "How metrics will be collected. Use `PUSH` for a metric stream or `PULL` to integrate with individual services.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- The linked account name\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The secret key of the AwsGovCloud.\n"
                }
            },
            "requiredInputs": [
                "accessKeyId",
                "awsAccountId",
                "secretAccessKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsGovcloudLinkAccount resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "The access key of the AwsGovCloud.\n"
                    },
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on. This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "awsAccountId": {
                        "type": "string",
                        "description": "The AwsGovCloud account ID.\n"
                    },
                    "metricCollectionMode": {
                        "type": "string",
                        "description": "How metrics will be collected. Use `PUSH` for a metric stream or `PULL` to integrate with individual services.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- The linked account name\n"
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "description": "The secret key of the AwsGovCloud.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:cloud/awsIntegrations:AwsIntegrations": {
            "description": "\n\n\n## Import\n\nLinked AWS account integrations can be imported using the `id`, e.g. bash\n\n```sh\n $ pulumi import newrelic:cloud/awsIntegrations:AwsIntegrations foo \u003cid\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "billing": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsBilling:AwsIntegrationsBilling",
                    "description": "Billing integration. See Integration blocks below for details.\n"
                },
                "cloudtrail": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsCloudtrail:AwsIntegrationsCloudtrail",
                    "description": "Cloudtrail integration. See Integration blocks below for details.\n"
                },
                "health": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsHealth:AwsIntegrationsHealth",
                    "description": "Health integration. See Integration blocks below for details.\n"
                },
                "linkedAccountId": {
                    "type": "integer",
                    "description": "The ID of the linked AWS account in New Relic.\n"
                },
                "trustedAdvisor": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsTrustedAdvisor:AwsIntegrationsTrustedAdvisor",
                    "description": "Trusted Advisor integration. See Integration blocks below for details.\n"
                },
                "vpc": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsVpc:AwsIntegrationsVpc",
                    "description": "VPC integration. See Integration blocks below for details.\n"
                },
                "xRay": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsXRay:AwsIntegrationsXRay",
                    "description": "X-Ray integration. See Integration blocks below for details.\n"
                }
            },
            "required": [
                "accountId",
                "linkedAccountId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "billing": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsBilling:AwsIntegrationsBilling",
                    "description": "Billing integration. See Integration blocks below for details.\n"
                },
                "cloudtrail": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsCloudtrail:AwsIntegrationsCloudtrail",
                    "description": "Cloudtrail integration. See Integration blocks below for details.\n"
                },
                "health": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsHealth:AwsIntegrationsHealth",
                    "description": "Health integration. See Integration blocks below for details.\n"
                },
                "linkedAccountId": {
                    "type": "integer",
                    "description": "The ID of the linked AWS account in New Relic.\n"
                },
                "trustedAdvisor": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsTrustedAdvisor:AwsIntegrationsTrustedAdvisor",
                    "description": "Trusted Advisor integration. See Integration blocks below for details.\n"
                },
                "vpc": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsVpc:AwsIntegrationsVpc",
                    "description": "VPC integration. See Integration blocks below for details.\n"
                },
                "xRay": {
                    "$ref": "#/types/newrelic:cloud/AwsIntegrationsXRay:AwsIntegrationsXRay",
                    "description": "X-Ray integration. See Integration blocks below for details.\n"
                }
            },
            "requiredInputs": [
                "linkedAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsIntegrations resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "billing": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsBilling:AwsIntegrationsBilling",
                        "description": "Billing integration. See Integration blocks below for details.\n"
                    },
                    "cloudtrail": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsCloudtrail:AwsIntegrationsCloudtrail",
                        "description": "Cloudtrail integration. See Integration blocks below for details.\n"
                    },
                    "health": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsHealth:AwsIntegrationsHealth",
                        "description": "Health integration. See Integration blocks below for details.\n"
                    },
                    "linkedAccountId": {
                        "type": "integer",
                        "description": "The ID of the linked AWS account in New Relic.\n"
                    },
                    "trustedAdvisor": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsTrustedAdvisor:AwsIntegrationsTrustedAdvisor",
                        "description": "Trusted Advisor integration. See Integration blocks below for details.\n"
                    },
                    "vpc": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsVpc:AwsIntegrationsVpc",
                        "description": "VPC integration. See Integration blocks below for details.\n"
                    },
                    "xRay": {
                        "$ref": "#/types/newrelic:cloud/AwsIntegrationsXRay:AwsIntegrationsXRay",
                        "description": "X-Ray integration. See Integration blocks below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:cloud/awsLinkAccount:AwsLinkAccount": {
            "description": "\n\n\n## Import\n\nLinked AWS accounts can be imported using the `id`, e.g. bash\n\n```sh\n $ pulumi import newrelic:cloud/awsLinkAccount:AwsLinkAccount foo \u003cid\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "arn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the IAM role.\n"
                },
                "metricCollectionMode": {
                    "type": "string",
                    "description": "How metrics will be collected. Use `PUSH` for a metric stream or `PULL` to integrate with individual services.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- The linked account name\n"
                }
            },
            "required": [
                "accountId",
                "arn",
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "arn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the IAM role.\n"
                },
                "metricCollectionMode": {
                    "type": "string",
                    "description": "How metrics will be collected. Use `PUSH` for a metric stream or `PULL` to integrate with individual services.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- The linked account name\n"
                }
            },
            "requiredInputs": [
                "arn"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsLinkAccount resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "arn": {
                        "type": "string",
                        "description": "The Amazon Resource Name (ARN) of the IAM role.\n"
                    },
                    "metricCollectionMode": {
                        "type": "string",
                        "description": "How metrics will be collected. Use `PUSH` for a metric stream or `PULL` to integrate with individual services.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- The linked account name\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:cloud/azureIntegrations:AzureIntegrations": {
            "description": "\n\n\n## Import\n\nLinked Azure accounts can be imported using `id`, you can find the `id` of existing Azure linked accounts in Azure dashboard under Infrastructure in NewRelic. bash\n\n```sh\n $ pulumi import newrelic:cloud/azureIntegrations:AzureIntegrations foo \u003cid\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "apiManagement": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsApiManagement:AzureIntegrationsApiManagement",
                    "description": "Azure API Management. See Integration blocks below for details.\n"
                },
                "appGateway": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsAppGateway:AzureIntegrationsAppGateway",
                    "description": "Azure App Gateway. See Integration blocks below for details.\n"
                },
                "appService": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsAppService:AzureIntegrationsAppService",
                    "description": "Azure App Service. See Integration blocks below for details.\n"
                },
                "containers": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsContainers:AzureIntegrationsContainers",
                    "description": "Azure Containers. See Integration blocks below for details.\n"
                },
                "cosmosDb": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsCosmosDb:AzureIntegrationsCosmosDb",
                    "description": "Azure CosmosDB. See Integration blocks below for details.\n"
                },
                "costManagement": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsCostManagement:AzureIntegrationsCostManagement",
                    "description": "Azure Cost Management. See Integration blocks below for details.\n"
                },
                "dataFactory": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsDataFactory:AzureIntegrationsDataFactory",
                    "description": "for Azure Data Factory. See Integration blocks below for details.\n"
                },
                "eventHub": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsEventHub:AzureIntegrationsEventHub",
                    "description": "for Azure Event Hub. See Integration blocks below for details.\n"
                },
                "expressRoute": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsExpressRoute:AzureIntegrationsExpressRoute",
                    "description": "for Azure Express Route. See Integration blocks below for details.\n"
                },
                "firewalls": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsFirewalls:AzureIntegrationsFirewalls",
                    "description": "for Azure Firewalls. See Integration blocks below for details.\n"
                },
                "frontDoor": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsFrontDoor:AzureIntegrationsFrontDoor",
                    "description": "for Azure Front Door. See Integration blocks below for details.\n"
                },
                "functions": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsFunctions:AzureIntegrationsFunctions",
                    "description": "for Azure Functions. See Integration blocks below for details.\n"
                },
                "keyVault": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsKeyVault:AzureIntegrationsKeyVault",
                    "description": "for Azure Key Vault. See Integration blocks below for details.\n"
                },
                "linkedAccountId": {
                    "type": "integer",
                    "description": "The ID of the linked Azure account in New Relic.\n"
                },
                "loadBalancer": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsLoadBalancer:AzureIntegrationsLoadBalancer",
                    "description": "for Azure Load Balancer. See Integration blocks below for details.\n"
                },
                "logicApps": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsLogicApps:AzureIntegrationsLogicApps",
                    "description": "for Azure Logic Apps. See Integration blocks below for details.\n"
                },
                "machineLearning": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsMachineLearning:AzureIntegrationsMachineLearning",
                    "description": "for Azure Machine Learning. See Integration blocks below for details.\n"
                },
                "mariaDb": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsMariaDb:AzureIntegrationsMariaDb",
                    "description": "for Azure MariaDB. See Integration blocks below for details.\n"
                },
                "mysql": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsMysql:AzureIntegrationsMysql",
                    "description": "for Azure MySQL. See Integration blocks below for details.\n"
                },
                "postgresql": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsPostgresql:AzureIntegrationsPostgresql",
                    "description": "for Azure PostgreSQL. See Integration blocks below for details.\n"
                },
                "powerBiDedicated": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsPowerBiDedicated:AzureIntegrationsPowerBiDedicated",
                    "description": "for Azure Power BI Dedicated. See Integration blocks below for details.\n"
                },
                "redisCache": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsRedisCache:AzureIntegrationsRedisCache",
                    "description": "for Azure Redis Cache. See Integration blocks below for details.\n"
                },
                "serviceBus": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsServiceBus:AzureIntegrationsServiceBus",
                    "description": "for Azure Service Bus. See Integration blocks below for details.\n"
                },
                "sql": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsSql:AzureIntegrationsSql",
                    "description": "for Azure SQL. See Integration blocks below for details.\n"
                },
                "sqlManaged": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsSqlManaged:AzureIntegrationsSqlManaged",
                    "description": "for SQL Managed. See Integration blocks below for details.\n"
                },
                "storage": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsStorage:AzureIntegrationsStorage",
                    "description": "for Azure Storage. See Integration blocks below for details.\n"
                },
                "virtualMachine": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsVirtualMachine:AzureIntegrationsVirtualMachine",
                    "description": "for Azure Virtual machine. See Integration blocks below for details.\n"
                },
                "virtualNetworks": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsVirtualNetworks:AzureIntegrationsVirtualNetworks",
                    "description": "The Azure virtual networks\n"
                },
                "vms": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsVms:AzureIntegrationsVms",
                    "description": "for Azure VMs. See Integration blocks below for details.\n"
                },
                "vpnGateway": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsVpnGateway:AzureIntegrationsVpnGateway",
                    "description": "for Azure VPN Gateway. See Integration blocks below for details.\n"
                }
            },
            "required": [
                "accountId",
                "linkedAccountId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "apiManagement": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsApiManagement:AzureIntegrationsApiManagement",
                    "description": "Azure API Management. See Integration blocks below for details.\n"
                },
                "appGateway": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsAppGateway:AzureIntegrationsAppGateway",
                    "description": "Azure App Gateway. See Integration blocks below for details.\n"
                },
                "appService": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsAppService:AzureIntegrationsAppService",
                    "description": "Azure App Service. See Integration blocks below for details.\n"
                },
                "containers": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsContainers:AzureIntegrationsContainers",
                    "description": "Azure Containers. See Integration blocks below for details.\n"
                },
                "cosmosDb": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsCosmosDb:AzureIntegrationsCosmosDb",
                    "description": "Azure CosmosDB. See Integration blocks below for details.\n"
                },
                "costManagement": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsCostManagement:AzureIntegrationsCostManagement",
                    "description": "Azure Cost Management. See Integration blocks below for details.\n"
                },
                "dataFactory": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsDataFactory:AzureIntegrationsDataFactory",
                    "description": "for Azure Data Factory. See Integration blocks below for details.\n"
                },
                "eventHub": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsEventHub:AzureIntegrationsEventHub",
                    "description": "for Azure Event Hub. See Integration blocks below for details.\n"
                },
                "expressRoute": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsExpressRoute:AzureIntegrationsExpressRoute",
                    "description": "for Azure Express Route. See Integration blocks below for details.\n"
                },
                "firewalls": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsFirewalls:AzureIntegrationsFirewalls",
                    "description": "for Azure Firewalls. See Integration blocks below for details.\n"
                },
                "frontDoor": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsFrontDoor:AzureIntegrationsFrontDoor",
                    "description": "for Azure Front Door. See Integration blocks below for details.\n"
                },
                "functions": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsFunctions:AzureIntegrationsFunctions",
                    "description": "for Azure Functions. See Integration blocks below for details.\n"
                },
                "keyVault": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsKeyVault:AzureIntegrationsKeyVault",
                    "description": "for Azure Key Vault. See Integration blocks below for details.\n"
                },
                "linkedAccountId": {
                    "type": "integer",
                    "description": "The ID of the linked Azure account in New Relic.\n"
                },
                "loadBalancer": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsLoadBalancer:AzureIntegrationsLoadBalancer",
                    "description": "for Azure Load Balancer. See Integration blocks below for details.\n"
                },
                "logicApps": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsLogicApps:AzureIntegrationsLogicApps",
                    "description": "for Azure Logic Apps. See Integration blocks below for details.\n"
                },
                "machineLearning": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsMachineLearning:AzureIntegrationsMachineLearning",
                    "description": "for Azure Machine Learning. See Integration blocks below for details.\n"
                },
                "mariaDb": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsMariaDb:AzureIntegrationsMariaDb",
                    "description": "for Azure MariaDB. See Integration blocks below for details.\n"
                },
                "mysql": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsMysql:AzureIntegrationsMysql",
                    "description": "for Azure MySQL. See Integration blocks below for details.\n"
                },
                "postgresql": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsPostgresql:AzureIntegrationsPostgresql",
                    "description": "for Azure PostgreSQL. See Integration blocks below for details.\n"
                },
                "powerBiDedicated": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsPowerBiDedicated:AzureIntegrationsPowerBiDedicated",
                    "description": "for Azure Power BI Dedicated. See Integration blocks below for details.\n"
                },
                "redisCache": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsRedisCache:AzureIntegrationsRedisCache",
                    "description": "for Azure Redis Cache. See Integration blocks below for details.\n"
                },
                "serviceBus": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsServiceBus:AzureIntegrationsServiceBus",
                    "description": "for Azure Service Bus. See Integration blocks below for details.\n"
                },
                "sql": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsSql:AzureIntegrationsSql",
                    "description": "for Azure SQL. See Integration blocks below for details.\n"
                },
                "sqlManaged": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsSqlManaged:AzureIntegrationsSqlManaged",
                    "description": "for SQL Managed. See Integration blocks below for details.\n"
                },
                "storage": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsStorage:AzureIntegrationsStorage",
                    "description": "for Azure Storage. See Integration blocks below for details.\n"
                },
                "virtualMachine": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsVirtualMachine:AzureIntegrationsVirtualMachine",
                    "description": "for Azure Virtual machine. See Integration blocks below for details.\n"
                },
                "virtualNetworks": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsVirtualNetworks:AzureIntegrationsVirtualNetworks",
                    "description": "The Azure virtual networks\n"
                },
                "vms": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsVms:AzureIntegrationsVms",
                    "description": "for Azure VMs. See Integration blocks below for details.\n"
                },
                "vpnGateway": {
                    "$ref": "#/types/newrelic:cloud/AzureIntegrationsVpnGateway:AzureIntegrationsVpnGateway",
                    "description": "for Azure VPN Gateway. See Integration blocks below for details.\n"
                }
            },
            "requiredInputs": [
                "linkedAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureIntegrations resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "apiManagement": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsApiManagement:AzureIntegrationsApiManagement",
                        "description": "Azure API Management. See Integration blocks below for details.\n"
                    },
                    "appGateway": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsAppGateway:AzureIntegrationsAppGateway",
                        "description": "Azure App Gateway. See Integration blocks below for details.\n"
                    },
                    "appService": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsAppService:AzureIntegrationsAppService",
                        "description": "Azure App Service. See Integration blocks below for details.\n"
                    },
                    "containers": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsContainers:AzureIntegrationsContainers",
                        "description": "Azure Containers. See Integration blocks below for details.\n"
                    },
                    "cosmosDb": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsCosmosDb:AzureIntegrationsCosmosDb",
                        "description": "Azure CosmosDB. See Integration blocks below for details.\n"
                    },
                    "costManagement": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsCostManagement:AzureIntegrationsCostManagement",
                        "description": "Azure Cost Management. See Integration blocks below for details.\n"
                    },
                    "dataFactory": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsDataFactory:AzureIntegrationsDataFactory",
                        "description": "for Azure Data Factory. See Integration blocks below for details.\n"
                    },
                    "eventHub": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsEventHub:AzureIntegrationsEventHub",
                        "description": "for Azure Event Hub. See Integration blocks below for details.\n"
                    },
                    "expressRoute": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsExpressRoute:AzureIntegrationsExpressRoute",
                        "description": "for Azure Express Route. See Integration blocks below for details.\n"
                    },
                    "firewalls": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsFirewalls:AzureIntegrationsFirewalls",
                        "description": "for Azure Firewalls. See Integration blocks below for details.\n"
                    },
                    "frontDoor": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsFrontDoor:AzureIntegrationsFrontDoor",
                        "description": "for Azure Front Door. See Integration blocks below for details.\n"
                    },
                    "functions": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsFunctions:AzureIntegrationsFunctions",
                        "description": "for Azure Functions. See Integration blocks below for details.\n"
                    },
                    "keyVault": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsKeyVault:AzureIntegrationsKeyVault",
                        "description": "for Azure Key Vault. See Integration blocks below for details.\n"
                    },
                    "linkedAccountId": {
                        "type": "integer",
                        "description": "The ID of the linked Azure account in New Relic.\n"
                    },
                    "loadBalancer": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsLoadBalancer:AzureIntegrationsLoadBalancer",
                        "description": "for Azure Load Balancer. See Integration blocks below for details.\n"
                    },
                    "logicApps": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsLogicApps:AzureIntegrationsLogicApps",
                        "description": "for Azure Logic Apps. See Integration blocks below for details.\n"
                    },
                    "machineLearning": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsMachineLearning:AzureIntegrationsMachineLearning",
                        "description": "for Azure Machine Learning. See Integration blocks below for details.\n"
                    },
                    "mariaDb": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsMariaDb:AzureIntegrationsMariaDb",
                        "description": "for Azure MariaDB. See Integration blocks below for details.\n"
                    },
                    "mysql": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsMysql:AzureIntegrationsMysql",
                        "description": "for Azure MySQL. See Integration blocks below for details.\n"
                    },
                    "postgresql": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsPostgresql:AzureIntegrationsPostgresql",
                        "description": "for Azure PostgreSQL. See Integration blocks below for details.\n"
                    },
                    "powerBiDedicated": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsPowerBiDedicated:AzureIntegrationsPowerBiDedicated",
                        "description": "for Azure Power BI Dedicated. See Integration blocks below for details.\n"
                    },
                    "redisCache": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsRedisCache:AzureIntegrationsRedisCache",
                        "description": "for Azure Redis Cache. See Integration blocks below for details.\n"
                    },
                    "serviceBus": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsServiceBus:AzureIntegrationsServiceBus",
                        "description": "for Azure Service Bus. See Integration blocks below for details.\n"
                    },
                    "sql": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsSql:AzureIntegrationsSql",
                        "description": "for Azure SQL. See Integration blocks below for details.\n"
                    },
                    "sqlManaged": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsSqlManaged:AzureIntegrationsSqlManaged",
                        "description": "for SQL Managed. See Integration blocks below for details.\n"
                    },
                    "storage": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsStorage:AzureIntegrationsStorage",
                        "description": "for Azure Storage. See Integration blocks below for details.\n"
                    },
                    "virtualMachine": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsVirtualMachine:AzureIntegrationsVirtualMachine",
                        "description": "for Azure Virtual machine. See Integration blocks below for details.\n"
                    },
                    "virtualNetworks": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsVirtualNetworks:AzureIntegrationsVirtualNetworks",
                        "description": "The Azure virtual networks\n"
                    },
                    "vms": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsVms:AzureIntegrationsVms",
                        "description": "for Azure VMs. See Integration blocks below for details.\n"
                    },
                    "vpnGateway": {
                        "$ref": "#/types/newrelic:cloud/AzureIntegrationsVpnGateway:AzureIntegrationsVpnGateway",
                        "description": "for Azure VPN Gateway. See Integration blocks below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:cloud/azureLinkAccount:AzureLinkAccount": {
            "description": "\n\n\n## Import\n\nLinked Azure accounts can be imported using `id`, you can find the `id` of existing Azure linked accounts in Azure dashboard under Infrastructure in NewRelic bash\n\n```sh\n $ pulumi import newrelic:cloud/azureLinkAccount:AzureLinkAccount foo \u003cid\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "- Account ID of the New Relic.\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "- Application ID of the App.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "- Secret Value of the client.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- The name of the application in New Relic APM.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "- Subscription ID of the Azure cloud account.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "- Tenant ID of the Azure cloud account.\n"
                }
            },
            "required": [
                "accountId",
                "applicationId",
                "clientSecret",
                "name",
                "subscriptionId",
                "tenantId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "- Account ID of the New Relic.\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "- Application ID of the App.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "- Secret Value of the client.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- The name of the application in New Relic APM.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "- Subscription ID of the Azure cloud account.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "- Tenant ID of the Azure cloud account.\n"
                }
            },
            "requiredInputs": [
                "applicationId",
                "clientSecret",
                "subscriptionId",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureLinkAccount resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "- Account ID of the New Relic.\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "- Application ID of the App.\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "- Secret Value of the client.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- The name of the application in New Relic APM.\n"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "- Subscription ID of the Azure cloud account.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "- Tenant ID of the Azure cloud account.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:cloud/gcpIntegrations:GcpIntegrations": {
            "description": "\n\n\n## Import\n\nLinked GCP account integrations can be imported using the `id`, e.g. bash\n\n```sh\n $ pulumi import newrelic:cloud/gcpIntegrations:GcpIntegrations foo \u003cid\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "appEngine": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsAppEngine:GcpIntegrationsAppEngine",
                    "description": "App Engine integration. See Integration blocks below for details.\n"
                },
                "bigQuery": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsBigQuery:GcpIntegrationsBigQuery",
                    "description": "Biq Query integration. See Integration blocks below for details.\n"
                },
                "bigTable": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsBigTable:GcpIntegrationsBigTable",
                    "description": "Big Table. See Integration blocks below for details.\n"
                },
                "composer": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsComposer:GcpIntegrationsComposer",
                    "description": "Composer integration. See Integration blocks below for details.\n"
                },
                "dataFlow": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataFlow:GcpIntegrationsDataFlow",
                    "description": "Data Flow integration. See Integration blocks below for details.\n"
                },
                "dataProc": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataProc:GcpIntegrationsDataProc",
                    "description": "Data Proc integration. See Integration blocks below for details.\n"
                },
                "dataStore": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataStore:GcpIntegrationsDataStore",
                    "description": "Data Store integration. See Integration blocks below for details.\n"
                },
                "fireBaseDatabase": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseDatabase:GcpIntegrationsFireBaseDatabase",
                    "description": "Fire Base Database integration. See Integration blocks below for details.\n"
                },
                "fireBaseHosting": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseHosting:GcpIntegrationsFireBaseHosting",
                    "description": "Fire Base Hosting integration. See Integration blocks below for details.\n"
                },
                "fireBaseStorage": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseStorage:GcpIntegrationsFireBaseStorage",
                    "description": "Fire Base Storage integration. See Integration blocks below for details.\n"
                },
                "fireStore": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireStore:GcpIntegrationsFireStore",
                    "description": "Fire Store integration. See Integration blocks below for details.\n"
                },
                "functions": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFunctions:GcpIntegrationsFunctions",
                    "description": "Functions integration. See Integration blocks below for details.\n"
                },
                "interconnect": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsInterconnect:GcpIntegrationsInterconnect",
                    "description": "Interconnect integration. See Integration blocks below for details.\n"
                },
                "kubernetes": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsKubernetes:GcpIntegrationsKubernetes",
                    "description": "Kubernetes integration. See Integration blocks below for details.\n"
                },
                "linkedAccountId": {
                    "type": "integer",
                    "description": "The ID of the linked GCP account in New Relic.\n"
                },
                "loadBalancing": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsLoadBalancing:GcpIntegrationsLoadBalancing",
                    "description": "GCP big table service\n"
                },
                "memCache": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsMemCache:GcpIntegrationsMemCache",
                    "description": "Mem cache integration. See Integration blocks below for details.\n"
                },
                "pubSub": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsPubSub:GcpIntegrationsPubSub",
                    "description": "Pub/Sub integration. See Integration blocks below for details.\n"
                },
                "redis": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsRedis:GcpIntegrationsRedis",
                    "description": "Redis integration. See Integration blocks below for details.\n"
                },
                "router": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsRouter:GcpIntegrationsRouter",
                    "description": "Router integration. See Integration blocks below for details.\n"
                },
                "run": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsRun:GcpIntegrationsRun",
                    "description": "Run integration. See Integration blocks below for details.\n"
                },
                "spanner": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsSpanner:GcpIntegrationsSpanner",
                    "description": "Spanner integration. See Integration blocks below for details.\n"
                },
                "sql": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsSql:GcpIntegrationsSql",
                    "description": "SQL integration. See Integration blocks below for details.\n"
                },
                "storage": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsStorage:GcpIntegrationsStorage",
                    "description": "Storage integration. See Integration blocks below for details.\n"
                },
                "virtualMachines": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsVirtualMachines:GcpIntegrationsVirtualMachines",
                    "description": "Virtual machines integration. See Integration blocks below for details.\n"
                },
                "vpcAccess": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsVpcAccess:GcpIntegrationsVpcAccess",
                    "description": "VPC Access integration. See Integration blocks below for details.\n"
                }
            },
            "required": [
                "accountId",
                "linkedAccountId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "appEngine": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsAppEngine:GcpIntegrationsAppEngine",
                    "description": "App Engine integration. See Integration blocks below for details.\n"
                },
                "bigQuery": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsBigQuery:GcpIntegrationsBigQuery",
                    "description": "Biq Query integration. See Integration blocks below for details.\n"
                },
                "bigTable": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsBigTable:GcpIntegrationsBigTable",
                    "description": "Big Table. See Integration blocks below for details.\n"
                },
                "composer": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsComposer:GcpIntegrationsComposer",
                    "description": "Composer integration. See Integration blocks below for details.\n"
                },
                "dataFlow": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataFlow:GcpIntegrationsDataFlow",
                    "description": "Data Flow integration. See Integration blocks below for details.\n"
                },
                "dataProc": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataProc:GcpIntegrationsDataProc",
                    "description": "Data Proc integration. See Integration blocks below for details.\n"
                },
                "dataStore": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataStore:GcpIntegrationsDataStore",
                    "description": "Data Store integration. See Integration blocks below for details.\n"
                },
                "fireBaseDatabase": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseDatabase:GcpIntegrationsFireBaseDatabase",
                    "description": "Fire Base Database integration. See Integration blocks below for details.\n"
                },
                "fireBaseHosting": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseHosting:GcpIntegrationsFireBaseHosting",
                    "description": "Fire Base Hosting integration. See Integration blocks below for details.\n"
                },
                "fireBaseStorage": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseStorage:GcpIntegrationsFireBaseStorage",
                    "description": "Fire Base Storage integration. See Integration blocks below for details.\n"
                },
                "fireStore": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireStore:GcpIntegrationsFireStore",
                    "description": "Fire Store integration. See Integration blocks below for details.\n"
                },
                "functions": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsFunctions:GcpIntegrationsFunctions",
                    "description": "Functions integration. See Integration blocks below for details.\n"
                },
                "interconnect": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsInterconnect:GcpIntegrationsInterconnect",
                    "description": "Interconnect integration. See Integration blocks below for details.\n"
                },
                "kubernetes": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsKubernetes:GcpIntegrationsKubernetes",
                    "description": "Kubernetes integration. See Integration blocks below for details.\n"
                },
                "linkedAccountId": {
                    "type": "integer",
                    "description": "The ID of the linked GCP account in New Relic.\n"
                },
                "loadBalancing": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsLoadBalancing:GcpIntegrationsLoadBalancing",
                    "description": "GCP big table service\n"
                },
                "memCache": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsMemCache:GcpIntegrationsMemCache",
                    "description": "Mem cache integration. See Integration blocks below for details.\n"
                },
                "pubSub": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsPubSub:GcpIntegrationsPubSub",
                    "description": "Pub/Sub integration. See Integration blocks below for details.\n"
                },
                "redis": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsRedis:GcpIntegrationsRedis",
                    "description": "Redis integration. See Integration blocks below for details.\n"
                },
                "router": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsRouter:GcpIntegrationsRouter",
                    "description": "Router integration. See Integration blocks below for details.\n"
                },
                "run": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsRun:GcpIntegrationsRun",
                    "description": "Run integration. See Integration blocks below for details.\n"
                },
                "spanner": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsSpanner:GcpIntegrationsSpanner",
                    "description": "Spanner integration. See Integration blocks below for details.\n"
                },
                "sql": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsSql:GcpIntegrationsSql",
                    "description": "SQL integration. See Integration blocks below for details.\n"
                },
                "storage": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsStorage:GcpIntegrationsStorage",
                    "description": "Storage integration. See Integration blocks below for details.\n"
                },
                "virtualMachines": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsVirtualMachines:GcpIntegrationsVirtualMachines",
                    "description": "Virtual machines integration. See Integration blocks below for details.\n"
                },
                "vpcAccess": {
                    "$ref": "#/types/newrelic:cloud/GcpIntegrationsVpcAccess:GcpIntegrationsVpcAccess",
                    "description": "VPC Access integration. See Integration blocks below for details.\n"
                }
            },
            "requiredInputs": [
                "linkedAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpIntegrations resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "appEngine": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsAppEngine:GcpIntegrationsAppEngine",
                        "description": "App Engine integration. See Integration blocks below for details.\n"
                    },
                    "bigQuery": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsBigQuery:GcpIntegrationsBigQuery",
                        "description": "Biq Query integration. See Integration blocks below for details.\n"
                    },
                    "bigTable": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsBigTable:GcpIntegrationsBigTable",
                        "description": "Big Table. See Integration blocks below for details.\n"
                    },
                    "composer": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsComposer:GcpIntegrationsComposer",
                        "description": "Composer integration. See Integration blocks below for details.\n"
                    },
                    "dataFlow": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataFlow:GcpIntegrationsDataFlow",
                        "description": "Data Flow integration. See Integration blocks below for details.\n"
                    },
                    "dataProc": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataProc:GcpIntegrationsDataProc",
                        "description": "Data Proc integration. See Integration blocks below for details.\n"
                    },
                    "dataStore": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsDataStore:GcpIntegrationsDataStore",
                        "description": "Data Store integration. See Integration blocks below for details.\n"
                    },
                    "fireBaseDatabase": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseDatabase:GcpIntegrationsFireBaseDatabase",
                        "description": "Fire Base Database integration. See Integration blocks below for details.\n"
                    },
                    "fireBaseHosting": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseHosting:GcpIntegrationsFireBaseHosting",
                        "description": "Fire Base Hosting integration. See Integration blocks below for details.\n"
                    },
                    "fireBaseStorage": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireBaseStorage:GcpIntegrationsFireBaseStorage",
                        "description": "Fire Base Storage integration. See Integration blocks below for details.\n"
                    },
                    "fireStore": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsFireStore:GcpIntegrationsFireStore",
                        "description": "Fire Store integration. See Integration blocks below for details.\n"
                    },
                    "functions": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsFunctions:GcpIntegrationsFunctions",
                        "description": "Functions integration. See Integration blocks below for details.\n"
                    },
                    "interconnect": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsInterconnect:GcpIntegrationsInterconnect",
                        "description": "Interconnect integration. See Integration blocks below for details.\n"
                    },
                    "kubernetes": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsKubernetes:GcpIntegrationsKubernetes",
                        "description": "Kubernetes integration. See Integration blocks below for details.\n"
                    },
                    "linkedAccountId": {
                        "type": "integer",
                        "description": "The ID of the linked GCP account in New Relic.\n"
                    },
                    "loadBalancing": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsLoadBalancing:GcpIntegrationsLoadBalancing",
                        "description": "GCP big table service\n"
                    },
                    "memCache": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsMemCache:GcpIntegrationsMemCache",
                        "description": "Mem cache integration. See Integration blocks below for details.\n"
                    },
                    "pubSub": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsPubSub:GcpIntegrationsPubSub",
                        "description": "Pub/Sub integration. See Integration blocks below for details.\n"
                    },
                    "redis": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsRedis:GcpIntegrationsRedis",
                        "description": "Redis integration. See Integration blocks below for details.\n"
                    },
                    "router": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsRouter:GcpIntegrationsRouter",
                        "description": "Router integration. See Integration blocks below for details.\n"
                    },
                    "run": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsRun:GcpIntegrationsRun",
                        "description": "Run integration. See Integration blocks below for details.\n"
                    },
                    "spanner": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsSpanner:GcpIntegrationsSpanner",
                        "description": "Spanner integration. See Integration blocks below for details.\n"
                    },
                    "sql": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsSql:GcpIntegrationsSql",
                        "description": "SQL integration. See Integration blocks below for details.\n"
                    },
                    "storage": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsStorage:GcpIntegrationsStorage",
                        "description": "Storage integration. See Integration blocks below for details.\n"
                    },
                    "virtualMachines": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsVirtualMachines:GcpIntegrationsVirtualMachines",
                        "description": "Virtual machines integration. See Integration blocks below for details.\n"
                    },
                    "vpcAccess": {
                        "$ref": "#/types/newrelic:cloud/GcpIntegrationsVpcAccess:GcpIntegrationsVpcAccess",
                        "description": "VPC Access integration. See Integration blocks below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:cloud/gcpLinkAccount:GcpLinkAccount": {
            "description": "\n\n\n## Import\n\nLinked GCP accounts can be imported using `id`, you can find the `id` of an existing GCP linked accounts in GCP dashboard under Infrastructure in Newrelic Console. bash\n\n```sh\n $ pulumi import newrelic:cloud/gcpLinkAccount:GcpLinkAccount newrelic_cloud_gcp_link_account.foo \u003cid\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "- Account ID of the New Relic account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- The name of the GCP account in New Relic.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "- Project ID of the GCP account.\n"
                }
            },
            "required": [
                "accountId",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "- Account ID of the New Relic account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "- The name of the GCP account in New Relic.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "- Project ID of the GCP account.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpLinkAccount resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "- Account ID of the New Relic account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- The name of the GCP account in New Relic.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "- Project ID of the GCP account.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/alertChannel:AlertChannel": {
            "description": "Use this resource to create and manage New Relic alert channels.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Email\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertChannel(\"foo\", {\n    config: {\n        includeJsonAttachment: \"true\",\n        recipients: \"foo@example.com\",\n    },\n    type: \"email\",\n});\n```\n{{% /example %}}\n{{% /examples %}}\n## Additional Examples\n\n##### Slack\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertChannel(\"foo\", {\n    config: {\n        channel: \"example-alerts-channel\",\n        url: \"https://hooks.slack.com/services/XXXXXXX/XXXXXXX/XXXXXXXXXX\",\n    },\n    type: \"slack\",\n});\n```\n\n### OpsGenie\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertChannel(\"foo\", {\n    config: {\n        apiKey: \"abc123\",\n        recipients: \"user1@domain.com, user2@domain.com\",\n        tags: \"tag1, tag2\",\n        teams: \"team1, team2\",\n    },\n    type: \"opsgenie\",\n});\n```\n\n### PagerDuty\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertChannel(\"foo\", {\n    config: {\n        serviceKey: \"abc123\",\n    },\n    type: \"pagerduty\",\n});\n```\n\n### VictorOps\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertChannel(\"foo\", {\n    config: {\n        key: \"abc123\",\n        routeKey: \"/example\",\n    },\n    type: \"victorops\",\n});\n```\n\n### Webhook with complex payload\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertChannel(\"foo\", {\n    config: {\n        baseUrl: \"http://www.test.com\",\n        payloadString: `{\n  \"my_custom_values\": {\n    \"condition_name\": \"$CONDITION_NAME\",\n    \"policy_name\": \"$POLICY_NAME\"\n  }\n}\n`,\n        payloadType: \"application/json\",\n    },\n    type: \"webhook\",\n});\n```\n\n\n## Import\n\nAlert channels can be imported using the `id`, e.g. bash\n\n```sh\n $ pulumi import newrelic:index/alertChannel:AlertChannel main \u003cid\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the alert channel will be created. Defaults to the account associated with the API key used.\n"
                },
                "config": {
                    "$ref": "#/types/newrelic:index/AlertChannelConfig:AlertChannelConfig",
                    "description": "A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See Nested config blocks below for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the channel.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.\n"
                }
            },
            "required": [
                "accountId",
                "name",
                "type"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the alert channel will be created. Defaults to the account associated with the API key used.\n"
                },
                "config": {
                    "$ref": "#/types/newrelic:index/AlertChannelConfig:AlertChannelConfig",
                    "description": "A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See Nested config blocks below for details.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the channel.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertChannel resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Determines the New Relic account where the alert channel will be created. Defaults to the account associated with the API key used.\n"
                    },
                    "config": {
                        "$ref": "#/types/newrelic:index/AlertChannelConfig:AlertChannelConfig",
                        "description": "A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See Nested config blocks below for details.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the channel.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/alertCondition:AlertCondition": {
            "description": "Use this resource to create and manage alert conditions for APM, Browser, and Mobile in New Relic.\n\n\u003e **NOTE:** The newrelic.NrqlAlertCondition resource is preferred for configuring alerts conditions. In most cases feature parity can be achieved with a NRQL query. Other condition types may be deprecated in the future and receive fewer product updates.\n\n## Terms\n\nThe `term` mapping supports the following arguments:\n\n  * `duration` - (Required) In minutes, must be in the range of `5` to `120`, inclusive.\n  * `operator` - (Optional) `above`, `below`, or `equal`.  Defaults to `equal`.\n  * `priority` - (Optional) `critical` or `warning`.  Defaults to `critical`. Terms must include at least one `critical` priority term\n  * `threshold` - (Required) Must be 0 or greater.\n  * `time_function` - (Required) `all` or `any`.\n\n\n## Import\n\nAlert conditions can be imported using notation `alert_policy_id:alert_condition_id`, e.g.\n\n```sh\n $ pulumi import newrelic:index/alertCondition:AlertCondition main 123456:6789012345\n```\n\n ",
            "properties": {
                "conditionScope": {
                    "type": "string",
                    "description": "`application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the condition is enabled or not. Defaults to true.\n"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The instance IDs associated with this condition.\n"
                },
                "gcMetric": {
                    "type": "string",
                    "description": "A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n* `apm_app_metric`\n* `apdex`\n* `error_percentage`\n* `response_time_background`\n* `response_time_web`\n* `throughput_background`\n* `throughput_web`\n* `user_defined`\n* `apm_jvm_metric`\n* `cpu_utilization_time`\n* `deadlocked_threads`\n* `gc_cpu_time`\n* `heap_memory_usage`\n* `apm_kt_metric`\n* `apdex`\n* `error_count`\n* `error_percentage`\n* `response_time`\n* `throughput`\n* `browser_metric`\n* `ajax_response_time`\n* `ajax_throughput`\n* `dom_processing`\n* `end_user_apdex`\n* `network`\n* `page_rendering`\n* `page_view_throughput`\n* `page_views_with_js_errors`\n* `request_queuing`\n* `total_page_load`\n* `user_defined`\n* `web_application`\n* `mobile_metric`\n* `database`\n* `images`\n* `json`\n* `mobile_crash_rate`\n* `network_error_percentage`\n* `network`\n* `status_error_percentage`\n* `user_defined`\n* `view_loading`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition. Must be between 1 and 64 characters, inclusive.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/AlertConditionTerm:AlertConditionTerm"
                    },
                    "description": "A list of terms for this condition. See Terms below for details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `browser_metric`, `mobile_metric`\n"
                },
                "userDefinedMetric": {
                    "type": "string",
                    "description": "A custom metric to be evaluated.\n"
                },
                "userDefinedValueFunction": {
                    "type": "string",
                    "description": "One of: `average`, `min`, `max`, `total`, or `sample_size`.\n"
                },
                "violationCloseTimer": {
                    "type": "integer",
                    "description": "Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n"
                }
            },
            "required": [
                "entities",
                "metric",
                "name",
                "policyId",
                "terms",
                "type"
            ],
            "inputProperties": {
                "conditionScope": {
                    "type": "string",
                    "description": "`application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the condition is enabled or not. Defaults to true.\n"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The instance IDs associated with this condition.\n"
                },
                "gcMetric": {
                    "type": "string",
                    "description": "A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n* `apm_app_metric`\n* `apdex`\n* `error_percentage`\n* `response_time_background`\n* `response_time_web`\n* `throughput_background`\n* `throughput_web`\n* `user_defined`\n* `apm_jvm_metric`\n* `cpu_utilization_time`\n* `deadlocked_threads`\n* `gc_cpu_time`\n* `heap_memory_usage`\n* `apm_kt_metric`\n* `apdex`\n* `error_count`\n* `error_percentage`\n* `response_time`\n* `throughput`\n* `browser_metric`\n* `ajax_response_time`\n* `ajax_throughput`\n* `dom_processing`\n* `end_user_apdex`\n* `network`\n* `page_rendering`\n* `page_view_throughput`\n* `page_views_with_js_errors`\n* `request_queuing`\n* `total_page_load`\n* `user_defined`\n* `web_application`\n* `mobile_metric`\n* `database`\n* `images`\n* `json`\n* `mobile_crash_rate`\n* `network_error_percentage`\n* `network`\n* `status_error_percentage`\n* `user_defined`\n* `view_loading`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition. Must be between 1 and 64 characters, inclusive.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n",
                    "willReplaceOnChanges": true
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/AlertConditionTerm:AlertConditionTerm"
                    },
                    "description": "A list of terms for this condition. See Terms below for details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `browser_metric`, `mobile_metric`\n"
                },
                "userDefinedMetric": {
                    "type": "string",
                    "description": "A custom metric to be evaluated.\n"
                },
                "userDefinedValueFunction": {
                    "type": "string",
                    "description": "One of: `average`, `min`, `max`, `total`, or `sample_size`.\n"
                },
                "violationCloseTimer": {
                    "type": "integer",
                    "description": "Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n"
                }
            },
            "requiredInputs": [
                "entities",
                "metric",
                "policyId",
                "terms",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertCondition resources.\n",
                "properties": {
                    "conditionScope": {
                        "type": "string",
                        "description": "`application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the condition is enabled or not. Defaults to true.\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The instance IDs associated with this condition.\n"
                    },
                    "gcMetric": {
                        "type": "string",
                        "description": "A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n"
                    },
                    "metric": {
                        "type": "string",
                        "description": "The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n* `apm_app_metric`\n* `apdex`\n* `error_percentage`\n* `response_time_background`\n* `response_time_web`\n* `throughput_background`\n* `throughput_web`\n* `user_defined`\n* `apm_jvm_metric`\n* `cpu_utilization_time`\n* `deadlocked_threads`\n* `gc_cpu_time`\n* `heap_memory_usage`\n* `apm_kt_metric`\n* `apdex`\n* `error_count`\n* `error_percentage`\n* `response_time`\n* `throughput`\n* `browser_metric`\n* `ajax_response_time`\n* `ajax_throughput`\n* `dom_processing`\n* `end_user_apdex`\n* `network`\n* `page_rendering`\n* `page_view_throughput`\n* `page_views_with_js_errors`\n* `request_queuing`\n* `total_page_load`\n* `user_defined`\n* `web_application`\n* `mobile_metric`\n* `database`\n* `images`\n* `json`\n* `mobile_crash_rate`\n* `network_error_percentage`\n* `network`\n* `status_error_percentage`\n* `user_defined`\n* `view_loading`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the condition. Must be between 1 and 64 characters, inclusive.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the policy where this condition should be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "runbookUrl": {
                        "type": "string",
                        "description": "Runbook URL to display in notifications.\n"
                    },
                    "terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/AlertConditionTerm:AlertConditionTerm"
                        },
                        "description": "A list of terms for this condition. See Terms below for details.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `browser_metric`, `mobile_metric`\n"
                    },
                    "userDefinedMetric": {
                        "type": "string",
                        "description": "A custom metric to be evaluated.\n"
                    },
                    "userDefinedValueFunction": {
                        "type": "string",
                        "description": "One of: `average`, `min`, `max`, `total`, or `sample_size`.\n"
                    },
                    "violationCloseTimer": {
                        "type": "integer",
                        "description": "Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/alertMutingRule:AlertMutingRule": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertMutingRule(\"foo\", {\n    condition: {\n        conditions: [\n            {\n                attribute: \"product\",\n                operator: \"EQUALS\",\n                values: [\"APM\"],\n            },\n            {\n                attribute: \"targetId\",\n                operator: \"EQUALS\",\n                values: [\"Muted\"],\n            },\n        ],\n        operator: \"AND\",\n    },\n    description: \"muting rule test.\",\n    enabled: true,\n    schedule: {\n        endTime: \"2021-01-28T16:30:00\",\n        repeat: \"WEEKLY\",\n        repeatCount: 42,\n        startTime: \"2021-01-28T15:30:00\",\n        timeZone: \"America/Los_Angeles\",\n        weeklyRepeatDays: [\n            \"MONDAY\",\n            \"WEDNESDAY\",\n            \"FRIDAY\",\n        ],\n    },\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAlert conditions can be imported using a composite ID of `\u003caccount_id\u003e:\u003cmuting_rule_id\u003e`, e.g.\n\n```sh\n $ pulumi import newrelic:index/alertMutingRule:AlertMutingRule foo 538291:6789035\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account id of the MutingRule.\n"
                },
                "condition": {
                    "$ref": "#/types/newrelic:index/AlertMutingRuleCondition:AlertMutingRuleCondition",
                    "description": "The condition that defines which violations to target. See Nested condition blocks below for details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the MutingRule.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the MutingRule is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the MutingRule.\n"
                },
                "schedule": {
                    "$ref": "#/types/newrelic:index/AlertMutingRuleSchedule:AlertMutingRuleSchedule",
                    "description": "Specify a schedule for enabling the MutingRule. See Schedule below for details\n"
                }
            },
            "required": [
                "accountId",
                "condition",
                "enabled",
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The account id of the MutingRule.\n"
                },
                "condition": {
                    "$ref": "#/types/newrelic:index/AlertMutingRuleCondition:AlertMutingRuleCondition",
                    "description": "The condition that defines which violations to target. See Nested condition blocks below for details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the MutingRule.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the MutingRule is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the MutingRule.\n"
                },
                "schedule": {
                    "$ref": "#/types/newrelic:index/AlertMutingRuleSchedule:AlertMutingRuleSchedule",
                    "description": "Specify a schedule for enabling the MutingRule. See Schedule below for details\n"
                }
            },
            "requiredInputs": [
                "condition",
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertMutingRule resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account id of the MutingRule.\n"
                    },
                    "condition": {
                        "$ref": "#/types/newrelic:index/AlertMutingRuleCondition:AlertMutingRuleCondition",
                        "description": "The condition that defines which violations to target. See Nested condition blocks below for details.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the MutingRule.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the MutingRule is enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the MutingRule.\n"
                    },
                    "schedule": {
                        "$ref": "#/types/newrelic:index/AlertMutingRuleSchedule:AlertMutingRuleSchedule",
                        "description": "Specify a schedule for enabling the MutingRule. See Schedule below for details\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/alertPolicy:AlertPolicy": {
            "description": "Use this resource to create and manage New Relic alert policies.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Basic Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertPolicy(\"foo\", {\n    incidentPreference: \"PER_POLICY\", // PER_POLICY is default\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAlert policies can be imported using a composite ID of `\u003cid\u003e:\u003caccount_id\u003e`, where `account_id` is the account number scoped to the alert policy resource. Example import\n\n```sh\n $ pulumi import newrelic:index/alertPolicy:AlertPolicy foo 23423556:4593020\n```\n\n Please note that channel IDs (`channel_ids`) _cannot_ be imported due channels being a separate resource. However, to add channels to an imported alert policy, you can import the policy, add the `channel_ids` attribute with the associated channel IDs, then run `terraform apply`. This will result in the original alert policy being destroyed and a new alert policy being created along with the channels being added to the policy. ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "channelIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result in a new alert policy resource being created and the old one being destroyed. Also note that channel IDs _cannot_ be imported.\n"
                },
                "incidentPreference": {
                    "type": "string",
                    "description": "The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the policy.\n"
                }
            },
            "required": [
                "accountId",
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "channelIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result in a new alert policy resource being created and the old one being destroyed. Also note that channel IDs _cannot_ be imported.\n",
                    "willReplaceOnChanges": true
                },
                "incidentPreference": {
                    "type": "string",
                    "description": "The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the policy.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertPolicy resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID to operate on.  This allows the user to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "channelIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result in a new alert policy resource being created and the old one being destroyed. Also note that channel IDs _cannot_ be imported.\n",
                        "willReplaceOnChanges": true
                    },
                    "incidentPreference": {
                        "type": "string",
                        "description": "The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/alertPolicyChannel:AlertPolicyChannel": {
            "description": "Use this resource to map alert policies to alert channels in New Relic.\n\n\n## Import\n\nAlert policy channels can be imported using the following notation`\u003cpolicyID\u003e:\u003cchannelID\u003e:\u003cchannelID\u003e`, e.g.\n\n```sh\n $ pulumi import newrelic:index/alertPolicyChannel:AlertPolicyChannel foo 123456:3462754:2938324\n```\n\n When importing `newrelic_alert_policy_channel` resource, the attribute `channel_ids`\\* will be set in your Terraform state. You can import multiple channels as long as those channel IDs are included as part of the import ID hash. ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the alert policy channel will be created. Defaults to the account associated with the API key used.\n"
                },
                "channelIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid drift in your state.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy.\n"
                }
            },
            "required": [
                "accountId",
                "channelIds",
                "policyId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the alert policy channel will be created. Defaults to the account associated with the API key used.\n"
                },
                "channelIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid drift in your state.\n",
                    "willReplaceOnChanges": true
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "channelIds",
                "policyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertPolicyChannel resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Determines the New Relic account where the alert policy channel will be created. Defaults to the account associated with the API key used.\n"
                    },
                    "channelIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid drift in your state.\n",
                        "willReplaceOnChanges": true
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the policy.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/apiAccessKey:ApiAccessKey": {
            "description": "Use this resource to programmatically create and manage the following types of keys:\n- [User API keys](https://docs.newrelic.com/docs/apis/get-started/intro-apis/types-new-relic-api-keys#user-api-key)\n- License (or ingest) keys, including:\n    - General [license key](https://docs.newrelic.com/docs/accounts/install-new-relic/account-setup/license-key) used for APM\n    - [Browser license key](https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/copy-browser-monitoring-license-key-app-id)\n\nPlease visit the New Relic article ['Use NerdGraph to manage license keys and User API keys'](https://docs.newrelic.com/docs/apis/nerdgraph/examples/use-nerdgraph-manage-license-keys-user-keys)\nfor more information.\n\n\u003e **IMPORTANT!**\nPlease be very careful when updating existing `newrelic.ApiAccessKey` resources as only `newrelic_api_access_key.name`\nand `newrelic_api_access_key.notes` are updatable. All other resource attributes will force a resource recreation which will\ninvalidate the previous API key(s).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foobar = new newrelic.ApiAccessKey(\"foobar\", {\n    accountId: 1234567,\n    ingestType: \"LICENSE\",\n    keyType: \"INGEST\",\n    notes: \"To be used with service X\",\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nExisting API access keys can be imported using a composite ID of `\u003capi_access_key_id\u003e:\u003ckey_type\u003e`. `\u003ckey_type\u003e` will be either `INGEST` or `USER`. For example\n\n```sh\n $ pulumi import newrelic:index/apiAccessKey:ApiAccessKey foobar \"1234567:INGEST\"\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID of the account you wish to create the API access key.\n"
                },
                "ingestType": {
                    "type": "string",
                    "description": "Required if `key_type = INGEST`. Valid options are `BROWSER` or `LICENSE`, case-sensitive.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The actual API key. This attribute is masked and not be visible in your terminal, CI, etc.\n"
                },
                "keyType": {
                    "type": "string",
                    "description": "What type of API key to create. Valid options are `INGEST` or `USER`, case-sensitive.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the key.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Any notes about this ingest key.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "Required if `key_type = USER`. The New Relic user ID yous wish to create the API access key for in an account.\n"
                }
            },
            "required": [
                "accountId",
                "ingestType",
                "key",
                "keyType",
                "name",
                "notes",
                "userId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID of the account you wish to create the API access key.\n",
                    "willReplaceOnChanges": true
                },
                "ingestType": {
                    "type": "string",
                    "description": "Required if `key_type = INGEST`. Valid options are `BROWSER` or `LICENSE`, case-sensitive.\n",
                    "willReplaceOnChanges": true
                },
                "keyType": {
                    "type": "string",
                    "description": "What type of API key to create. Valid options are `INGEST` or `USER`, case-sensitive.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the key.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Any notes about this ingest key.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "Required if `key_type = USER`. The New Relic user ID yous wish to create the API access key for in an account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountId",
                "keyType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiAccessKey resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID of the account you wish to create the API access key.\n",
                        "willReplaceOnChanges": true
                    },
                    "ingestType": {
                        "type": "string",
                        "description": "Required if `key_type = INGEST`. Valid options are `BROWSER` or `LICENSE`, case-sensitive.\n",
                        "willReplaceOnChanges": true
                    },
                    "key": {
                        "type": "string",
                        "description": "The actual API key. This attribute is masked and not be visible in your terminal, CI, etc.\n"
                    },
                    "keyType": {
                        "type": "string",
                        "description": "What type of API key to create. Valid options are `INGEST` or `USER`, case-sensitive.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the key.\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "Any notes about this ingest key.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "Required if `key_type = USER`. The New Relic user ID yous wish to create the API access key for in an account.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/dashboard:Dashboard": {
            "description": "New Relic legacy Dashboards reached end of life Wednesday July 28, 2021.\n\n**This resource has been removed.**\n\nFor more information, [click here](https://discuss.newrelic.com/t/important-insights-dashboard-api-end-of-life/149357)\n",
            "properties": {
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL for viewing the dashboard.\n"
                },
                "editable": {
                    "type": "string",
                    "description": "Determines who can edit the dashboard in an account. Valid values are all, editable_by_all, editable_by_owner, or\nread_only. Defaults to editable_by_all.\n"
                },
                "filter": {
                    "$ref": "#/types/newrelic:index/DashboardFilter:DashboardFilter",
                    "description": "A nested block that describes a dashboard filter. Exactly one nested filter block is allowed.\n"
                },
                "gridColumnCount": {
                    "type": "integer",
                    "description": "New Relic One supports a 3 column grid or a 12 column grid. New Relic Insights supports a 3 column grid.\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon for the dashboard.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the dashboard.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Determines who can see the dashboard in an account. Valid values are all or owner. Defaults to all.\n"
                },
                "widgets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/DashboardWidget:DashboardWidget"
                    },
                    "description": "A nested block that describes a visualization. Up to 300 widget blocks are allowed in a dashboard definition.\n"
                }
            },
            "required": [
                "dashboardUrl",
                "title"
            ],
            "inputProperties": {
                "editable": {
                    "type": "string",
                    "description": "Determines who can edit the dashboard in an account. Valid values are all, editable_by_all, editable_by_owner, or\nread_only. Defaults to editable_by_all.\n"
                },
                "filter": {
                    "$ref": "#/types/newrelic:index/DashboardFilter:DashboardFilter",
                    "description": "A nested block that describes a dashboard filter. Exactly one nested filter block is allowed.\n"
                },
                "gridColumnCount": {
                    "type": "integer",
                    "description": "New Relic One supports a 3 column grid or a 12 column grid. New Relic Insights supports a 3 column grid.\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon for the dashboard.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the dashboard.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Determines who can see the dashboard in an account. Valid values are all or owner. Defaults to all.\n"
                },
                "widgets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/DashboardWidget:DashboardWidget"
                    },
                    "description": "A nested block that describes a visualization. Up to 300 widget blocks are allowed in a dashboard definition.\n"
                }
            },
            "requiredInputs": [
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "dashboardUrl": {
                        "type": "string",
                        "description": "The URL for viewing the dashboard.\n"
                    },
                    "editable": {
                        "type": "string",
                        "description": "Determines who can edit the dashboard in an account. Valid values are all, editable_by_all, editable_by_owner, or\nread_only. Defaults to editable_by_all.\n"
                    },
                    "filter": {
                        "$ref": "#/types/newrelic:index/DashboardFilter:DashboardFilter",
                        "description": "A nested block that describes a dashboard filter. Exactly one nested filter block is allowed.\n"
                    },
                    "gridColumnCount": {
                        "type": "integer",
                        "description": "New Relic One supports a 3 column grid or a 12 column grid. New Relic Insights supports a 3 column grid.\n"
                    },
                    "icon": {
                        "type": "string",
                        "description": "The icon for the dashboard.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the dashboard.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Determines who can see the dashboard in an account. Valid values are all or owner. Defaults to all.\n"
                    },
                    "widgets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/DashboardWidget:DashboardWidget"
                        },
                        "description": "A nested block that describes a visualization. Up to 300 widget blocks are allowed in a dashboard definition.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/entityTags:EntityTags": {
            "description": "Use this resource to create, update, and delete tags for a New Relic One entity.\n\n\n## Import\n\nNew Relic One entity tags can be imported using a concatenated string of the format\n\n`\u003cguid\u003e`, e.g. bash\n\n```sh\n $ pulumi import newrelic:index/entityTags:EntityTags foo MjUyMDUyOHxBUE18QVBRTElDQVRJT058MjE1MDM3Nzk1\n```\n\n ",
            "properties": {
                "guid": {
                    "type": "string",
                    "description": "The guid of the entity to tag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/EntityTagsTag:EntityTagsTag"
                    },
                    "description": "A nested block that describes an entity tag. See Nested tag blocks below for details.\n"
                }
            },
            "required": [
                "guid",
                "tags"
            ],
            "inputProperties": {
                "guid": {
                    "type": "string",
                    "description": "The guid of the entity to tag.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/EntityTagsTag:EntityTagsTag"
                    },
                    "description": "A nested block that describes an entity tag. See Nested tag blocks below for details.\n"
                }
            },
            "requiredInputs": [
                "guid",
                "tags"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EntityTags resources.\n",
                "properties": {
                    "guid": {
                        "type": "string",
                        "description": "The guid of the entity to tag.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/EntityTagsTag:EntityTagsTag"
                        },
                        "description": "A nested block that describes an entity tag. See Nested tag blocks below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/eventsToMetricsRule:EventsToMetricsRule": {
            "description": "Use this resource to create, update, and delete New Relic Events to Metrics rules.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.EventsToMetricsRule(\"foo\", {\n    accountId: 12345,\n    description: \"Example description\",\n    nrql: \"SELECT uniqueCount(account_id) AS ``Transaction.account_id`` FROM Transaction FACET appName, name\",\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNew Relic Events to Metrics rules can be imported using a concatenated string of the format\n\n`\u003caccount_id\u003e:\u003crule_id\u003e`, e.g. bash\n\n```sh\n $ pulumi import newrelic:index/eventsToMetricsRule:EventsToMetricsRule foo 12345:34567\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Account with the event and where the metrics will be put.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Provides additional information about the rule.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "True means this rule is enabled. False means the rule is currently not creating metrics.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule. This must be unique within an account.\n"
                },
                "nrql": {
                    "type": "string",
                    "description": "Explains how to create metrics from events.\n"
                },
                "ruleId": {
                    "type": "string",
                    "description": "The id, uniquely identifying the rule.\n"
                }
            },
            "required": [
                "accountId",
                "name",
                "nrql",
                "ruleId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Account with the event and where the metrics will be put.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Provides additional information about the rule.\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "True means this rule is enabled. False means the rule is currently not creating metrics.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule. This must be unique within an account.\n",
                    "willReplaceOnChanges": true
                },
                "nrql": {
                    "type": "string",
                    "description": "Explains how to create metrics from events.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "nrql"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EventsToMetricsRule resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Account with the event and where the metrics will be put.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Provides additional information about the rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "True means this rule is enabled. False means the rule is currently not creating metrics.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the rule. This must be unique within an account.\n",
                        "willReplaceOnChanges": true
                    },
                    "nrql": {
                        "type": "string",
                        "description": "Explains how to create metrics from events.\n",
                        "willReplaceOnChanges": true
                    },
                    "ruleId": {
                        "type": "string",
                        "description": "The id, uniquely identifying the rule.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/infraAlertCondition:InfraAlertCondition": {
            "description": "Use this resource to create and manage Infrastructure alert conditions in New Relic.\n\n\u003e **NOTE:** The newrelic.NrqlAlertCondition resource is preferred for configuring alerts conditions. In most cases feature parity can be achieved with a NRQL query. Other condition types may be deprecated in the future and receive fewer product updates.\n\n## Thresholds\n\nThe `critical` and `warning` threshold mapping supports the following arguments:\n\n  * `duration` - (Required) Identifies the number of minutes the threshold must be passed or met for the alert to trigger. Threshold durations must be between 1 and 60 minutes (inclusive).\n  * `value` - (Optional) Threshold value, computed against the `comparison` operator. Supported by `infra_metric` and `infra_process_running` alert condition types.\n  * `time_function` - (Optional) Indicates if the condition needs to be sustained or to just break the threshold once; `all` or `any`. Supported by the `infra_metric` alert condition type.\n\n\n## Import\n\nInfrastructure alert conditions can be imported using a composite ID of `\u003cpolicy_id\u003e:\u003ccondition_id\u003e`, e.g.\n\n```sh\n $ pulumi import newrelic:index/infraAlertCondition:InfraAlertCondition main 12345:67890\n```\n\n ",
            "properties": {
                "comparison": {
                    "type": "string",
                    "description": "The operator used to evaluate the threshold value.  Valid values are `above`, `below`, and `equal`.  Supported by the `infra_metric` and `infra_process_running` condition types.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "The timestamp the alert condition was created.\n"
                },
                "critical": {
                    "$ref": "#/types/newrelic:index/InfraAlertConditionCritical:InfraAlertConditionCritical",
                    "description": "Identifies the threshold parameters for opening a critical alert violation. See Thresholds below for details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Infrastructure alert condition.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the condition is turned on or off.  Valid values are `true` and `false`.  Defaults to `true`.\n"
                },
                "event": {
                    "type": "string",
                    "description": "The metric event; for example, `SystemSample` or `StorageSample`.  Supported by the `infra_metric` condition type.\n"
                },
                "integrationProvider": {
                    "type": "string",
                    "description": "For alerts on integrations, use this instead of `event`.  Supported by the `infra_metric` condition type.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Infrastructure alert condition's name.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the alert policy where this condition should be used.\n"
                },
                "processWhere": {
                    "type": "string",
                    "description": "Any filters applied to processes; for example: `commandName = 'java'`.  Required by the `infra_process_running` condition type.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "select": {
                    "type": "string",
                    "description": "The attribute name to identify the metric being targeted; for example, `cpuPercent`, `diskFreePercent`, or `memoryResidentSizeBytes`.  The underlying API will automatically populate this value for Infrastructure integrations (for example `diskFreePercent`), so make sure to explicitly include this value to avoid diff issues.  Supported by the `infra_metric` condition type.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Infrastructure alert condition.  Valid values are  `infra_process_running`, `infra_metric`, and `infra_host_not_reporting`.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "The timestamp the alert condition was last updated.\n"
                },
                "violationCloseTimer": {
                    "type": "integer",
                    "description": "Determines how much time will pass (in hours) before a violation is automatically closed. Valid values are `1 2 4 8 12 24 48 72`. Defaults to 24. If `0` is provided, default of `24` is used and will have configuration drift during the apply phase until a valid value is provided.\n"
                },
                "warning": {
                    "$ref": "#/types/newrelic:index/InfraAlertConditionWarning:InfraAlertConditionWarning",
                    "description": "Identifies the threshold parameters for opening a warning alert violation. See Thresholds below for details.\n"
                },
                "where": {
                    "type": "string",
                    "description": "If applicable, this identifies any Infrastructure host filters used; for example: `hostname LIKE '%cassandra%'`.\n"
                }
            },
            "required": [
                "createdAt",
                "event",
                "name",
                "policyId",
                "type",
                "updatedAt"
            ],
            "inputProperties": {
                "comparison": {
                    "type": "string",
                    "description": "The operator used to evaluate the threshold value.  Valid values are `above`, `below`, and `equal`.  Supported by the `infra_metric` and `infra_process_running` condition types.\n"
                },
                "critical": {
                    "$ref": "#/types/newrelic:index/InfraAlertConditionCritical:InfraAlertConditionCritical",
                    "description": "Identifies the threshold parameters for opening a critical alert violation. See Thresholds below for details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Infrastructure alert condition.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the condition is turned on or off.  Valid values are `true` and `false`.  Defaults to `true`.\n"
                },
                "event": {
                    "type": "string",
                    "description": "The metric event; for example, `SystemSample` or `StorageSample`.  Supported by the `infra_metric` condition type.\n"
                },
                "integrationProvider": {
                    "type": "string",
                    "description": "For alerts on integrations, use this instead of `event`.  Supported by the `infra_metric` condition type.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Infrastructure alert condition's name.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the alert policy where this condition should be used.\n",
                    "willReplaceOnChanges": true
                },
                "processWhere": {
                    "type": "string",
                    "description": "Any filters applied to processes; for example: `commandName = 'java'`.  Required by the `infra_process_running` condition type.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "select": {
                    "type": "string",
                    "description": "The attribute name to identify the metric being targeted; for example, `cpuPercent`, `diskFreePercent`, or `memoryResidentSizeBytes`.  The underlying API will automatically populate this value for Infrastructure integrations (for example `diskFreePercent`), so make sure to explicitly include this value to avoid diff issues.  Supported by the `infra_metric` condition type.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Infrastructure alert condition.  Valid values are  `infra_process_running`, `infra_metric`, and `infra_host_not_reporting`.\n",
                    "willReplaceOnChanges": true
                },
                "violationCloseTimer": {
                    "type": "integer",
                    "description": "Determines how much time will pass (in hours) before a violation is automatically closed. Valid values are `1 2 4 8 12 24 48 72`. Defaults to 24. If `0` is provided, default of `24` is used and will have configuration drift during the apply phase until a valid value is provided.\n"
                },
                "warning": {
                    "$ref": "#/types/newrelic:index/InfraAlertConditionWarning:InfraAlertConditionWarning",
                    "description": "Identifies the threshold parameters for opening a warning alert violation. See Thresholds below for details.\n",
                    "willReplaceOnChanges": true
                },
                "where": {
                    "type": "string",
                    "description": "If applicable, this identifies any Infrastructure host filters used; for example: `hostname LIKE '%cassandra%'`.\n"
                }
            },
            "requiredInputs": [
                "policyId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InfraAlertCondition resources.\n",
                "properties": {
                    "comparison": {
                        "type": "string",
                        "description": "The operator used to evaluate the threshold value.  Valid values are `above`, `below`, and `equal`.  Supported by the `infra_metric` and `infra_process_running` condition types.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "The timestamp the alert condition was created.\n"
                    },
                    "critical": {
                        "$ref": "#/types/newrelic:index/InfraAlertConditionCritical:InfraAlertConditionCritical",
                        "description": "Identifies the threshold parameters for opening a critical alert violation. See Thresholds below for details.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Infrastructure alert condition.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the condition is turned on or off.  Valid values are `true` and `false`.  Defaults to `true`.\n"
                    },
                    "event": {
                        "type": "string",
                        "description": "The metric event; for example, `SystemSample` or `StorageSample`.  Supported by the `infra_metric` condition type.\n"
                    },
                    "integrationProvider": {
                        "type": "string",
                        "description": "For alerts on integrations, use this instead of `event`.  Supported by the `infra_metric` condition type.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Infrastructure alert condition's name.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the alert policy where this condition should be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "processWhere": {
                        "type": "string",
                        "description": "Any filters applied to processes; for example: `commandName = 'java'`.  Required by the `infra_process_running` condition type.\n"
                    },
                    "runbookUrl": {
                        "type": "string",
                        "description": "Runbook URL to display in notifications.\n"
                    },
                    "select": {
                        "type": "string",
                        "description": "The attribute name to identify the metric being targeted; for example, `cpuPercent`, `diskFreePercent`, or `memoryResidentSizeBytes`.  The underlying API will automatically populate this value for Infrastructure integrations (for example `diskFreePercent`), so make sure to explicitly include this value to avoid diff issues.  Supported by the `infra_metric` condition type.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of Infrastructure alert condition.  Valid values are  `infra_process_running`, `infra_metric`, and `infra_host_not_reporting`.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "The timestamp the alert condition was last updated.\n"
                    },
                    "violationCloseTimer": {
                        "type": "integer",
                        "description": "Determines how much time will pass (in hours) before a violation is automatically closed. Valid values are `1 2 4 8 12 24 48 72`. Defaults to 24. If `0` is provided, default of `24` is used and will have configuration drift during the apply phase until a valid value is provided.\n"
                    },
                    "warning": {
                        "$ref": "#/types/newrelic:index/InfraAlertConditionWarning:InfraAlertConditionWarning",
                        "description": "Identifies the threshold parameters for opening a warning alert violation. See Thresholds below for details.\n",
                        "willReplaceOnChanges": true
                    },
                    "where": {
                        "type": "string",
                        "description": "If applicable, this identifies any Infrastructure host filters used; for example: `hostname LIKE '%cassandra%'`.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/nrqlAlertCondition:NrqlAlertCondition": {
            "description": "Use this resource to create and manage NRQL alert conditions in New Relic.\n\n{{% examples %}}\n## Example Usage\n{{% /examples %}}\n## NRQL\n\nThe `nrql` block supports the following arguments:\n\n- `query` - (Required) The NRQL query to execute for the condition.\n- `evaluation_offset` - (Optional) **DEPRECATED:** Use `aggregation_method` instead. Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated based on their `aggregation_window` size. The start time depends on this value. It's recommended to set this to 3 windows. An offset of less than 3 windows will trigger violations sooner, but you may see more false positives and negatives due to data latency. With `evaluation_offset` set to 3 windows and an `aggregation_window` of 60 seconds, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`. `evaluation_offset` cannot be set with `aggregation_method`, `aggregation_delay`, or `aggregation_timer`.\u003cbr\u003e\n- `since_value` - (Optional)  **DEPRECATED:** Use `aggregation_method` instead. The value to be used in the `SINCE \u003cX\u003e minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive). \u003cbr\u003e\n\n## Terms\n\n\u003e **NOTE:** The direct use of the `term` has been deprecated, and users should use `critical` and `warning` instead.  What follows now applies to the named priority attributes for `critical` and `warning`, but for those attributes the priority is not allowed.\n\nNRQL alert conditions support up to two terms. At least one `term` must have `priority` set to `critical` and the second optional `term` must have `priority` set to `warning`.\n\nThe `term` block supports the following arguments:\n\n- `operator` - (Optional) Valid values are `above`, `above_or_equals`, `below`, `below_or_equals`, `equals`, or `not_equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `baseline`, the only valid option here is `above`.\n- `priority` - (Optional) `critical` or `warning`. Defaults to `critical`.\n- `threshold` - (Required) The value which will trigger a violation.\n\u003cbr\u003eFor _baseline_ NRQL alert conditions, the value must be in the range [1, 1000]. The value is the number of standard deviations from the baseline that the metric must exceed in order to create a violation.\n- `threshold_duration` - (Optional) The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregation_window` (which has a default of 60 seconds).\n\u003cbr\u003eFor _baseline_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).\n\u003cbr\u003eFor _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).\n\u003cbr\u003eFor _static_ NRQL alert conditions with the `single_value` value function, the value must be within 60-7200 seconds (inclusive).\n\n- `threshold_occurrences` - (Optional) The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `at_least_once` (case insensitive).\n- `duration` - (Optional) **DEPRECATED:** Use `threshold_duration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).\n- `time_function` - (Optional) **DEPRECATED:** Use `threshold_occurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.\n\n\n## Import\n\nNRQL alert conditions can be imported using a composite ID of `\u003cpolicy_id\u003e:\u003ccondition_id\u003e:\u003cconditionType\u003e`, e.g. // For `baseline` conditions\n\n```sh\n $ pulumi import newrelic:index/nrqlAlertCondition:NrqlAlertCondition foo 538291:6789035:baseline\n```\n\n // For `static` conditions\n\n```sh\n $ pulumi import newrelic:index/nrqlAlertCondition:NrqlAlertCondition foo 538291:6789035:static\n```\n\n \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD ======= \u003e\u003e\u003e\u003e\u003e\u003e\u003e v2.46.1 Users can find the actual values for `policy_id` and `condition_id` from the New Relic One UI under respective policy and condition. ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID of the account you wish to create the condition. Defaults to the account ID set in your environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "aggregationDelay": {
                    "type": "string",
                    "description": "How long we wait for data that belongs in each aggregation window. Depending on your data, a longer delay may increase accuracy but delay notifications. Use `aggregation_delay` with the `event_flow` and `cadence` methods. The maximum delay is 1200 seconds (20 minutes) when using `event_flow` and 3600 seconds (60 minutes) when using `cadence`. In both cases, the minimum delay is 0 seconds and the default is 120 seconds. `aggregation_delay` cannot be set with `nrql.evaluation_offset`.\n"
                },
                "aggregationMethod": {
                    "type": "string",
                    "description": "Determines when we consider an aggregation window to be complete so that we can evaluate the signal for violations. Possible values are `cadence`, `event_flow` or `event_timer`. Default is `event_flow`. `aggregation_method` cannot be set with `nrql.evaluation_offset`.\n"
                },
                "aggregationTimer": {
                    "type": "string",
                    "description": "How long we wait after each data point arrives to make sure we've processed the whole batch. Use `aggregation_timer` with the `event_timer` method. The timer value can range from 0 seconds to 1200 seconds (20 minutes); the default is 60 seconds. `aggregation_timer` cannot be set with `nrql.evaluation_offset`.\n"
                },
                "aggregationWindow": {
                    "type": "integer",
                    "description": "The duration of the time window used to evaluate the NRQL query, in seconds. The value must be at least 30 seconds, and no more than 15 minutes (900 seconds). Default is 60 seconds.\n"
                },
                "baselineDirection": {
                    "type": "string",
                    "description": "The baseline direction of a _baseline_ NRQL alert condition. Valid values are: `lower_only`, `upper_and_lower`, `upper_only` (case insensitive).\n"
                },
                "closeViolationsOnExpiration": {
                    "type": "boolean",
                    "description": "Whether to close all open violations when the signal expires.\n"
                },
                "critical": {
                    "$ref": "#/types/newrelic:index/NrqlAlertConditionCritical:NrqlAlertConditionCritical",
                    "description": "A list containing the `critical` threshold values. See Terms below for details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the NRQL alert condition.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the alert condition. Valid values are `true` and `false`. Defaults to `true`.\n"
                },
                "entityGuid": {
                    "type": "string",
                    "description": "The unique entity identifier of the NRQL Condition in New Relic.\n"
                },
                "expirationDuration": {
                    "type": "integer",
                    "description": "The amount of time (in seconds) to wait before considering the signal expired.\n"
                },
                "fillOption": {
                    "type": "string",
                    "description": "Which strategy to use when filling gaps in the signal. Possible values are `none`, `last_value` or `static`. If `static`, the `fill_value` field will be used for filling gaps in the signal.\n"
                },
                "fillValue": {
                    "type": "number",
                    "description": "This value will be used for filling gaps in the signal.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition.\n"
                },
                "nrql": {
                    "$ref": "#/types/newrelic:index/NrqlAlertConditionNrql:NrqlAlertConditionNrql",
                    "description": "A NRQL query. See NRQL below for details.\n"
                },
                "openViolationOnExpiration": {
                    "type": "boolean",
                    "description": "Whether to create a new violation to capture that the signal expired.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "slideBy": {
                    "type": "integer",
                    "description": "Gathers data in overlapping time windows to smooth the chart line, making it easier to spot trends. The `slide_by` value is specified in seconds and must be smaller than and a factor of the `aggregation_window`. `slide_by` cannot be used with `static` NRQL conditions using the `sum` `value_function`.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/NrqlAlertConditionTerm:NrqlAlertConditionTerm"
                    },
                    "description": "**DEPRECATED** Use `critical`, and `warning` instead.  A list of terms for this condition. See Terms below for details.\n",
                    "deprecationMessage": "use `critical` and `warning` attributes instead"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the condition. Valid values are `static`, `baseline`, or `outlier`. Defaults to `static`.\n"
                },
                "valueFunction": {
                    "type": "string",
                    "description": "Possible values are `single_value`, `sum` (case insensitive).\n",
                    "deprecationMessage": "'value_function' is deprecated.  Remove this field and condition will evaluate as 'single_value' by default.  To replicate 'sum' behavior, use 'slide_by'."
                },
                "violationTimeLimit": {
                    "type": "string",
                    "description": "**DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).\u003cbr\u003e\n\u003csmall\u003e\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.\u003c/small\u003e\n",
                    "deprecationMessage": "use `violation_time_limit_seconds` attribute instead"
                },
                "violationTimeLimitSeconds": {
                    "type": "integer",
                    "description": "Sets a time limit, in seconds, that will automatically force-close a long-lasting violation after the time limit you select. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days) (inclusive). \u003cbr\u003e\n\u003csmall\u003e\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.\u003c/small\u003e\n"
                },
                "warning": {
                    "$ref": "#/types/newrelic:index/NrqlAlertConditionWarning:NrqlAlertConditionWarning",
                    "description": "A list containing the `warning` threshold values. See Terms below for details.\n"
                }
            },
            "required": [
                "accountId",
                "aggregationWindow",
                "entityGuid",
                "name",
                "nrql",
                "policyId",
                "violationTimeLimit"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID of the account you wish to create the condition. Defaults to the account ID set in your environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                },
                "aggregationDelay": {
                    "type": "string",
                    "description": "How long we wait for data that belongs in each aggregation window. Depending on your data, a longer delay may increase accuracy but delay notifications. Use `aggregation_delay` with the `event_flow` and `cadence` methods. The maximum delay is 1200 seconds (20 minutes) when using `event_flow` and 3600 seconds (60 minutes) when using `cadence`. In both cases, the minimum delay is 0 seconds and the default is 120 seconds. `aggregation_delay` cannot be set with `nrql.evaluation_offset`.\n"
                },
                "aggregationMethod": {
                    "type": "string",
                    "description": "Determines when we consider an aggregation window to be complete so that we can evaluate the signal for violations. Possible values are `cadence`, `event_flow` or `event_timer`. Default is `event_flow`. `aggregation_method` cannot be set with `nrql.evaluation_offset`.\n"
                },
                "aggregationTimer": {
                    "type": "string",
                    "description": "How long we wait after each data point arrives to make sure we've processed the whole batch. Use `aggregation_timer` with the `event_timer` method. The timer value can range from 0 seconds to 1200 seconds (20 minutes); the default is 60 seconds. `aggregation_timer` cannot be set with `nrql.evaluation_offset`.\n"
                },
                "aggregationWindow": {
                    "type": "integer",
                    "description": "The duration of the time window used to evaluate the NRQL query, in seconds. The value must be at least 30 seconds, and no more than 15 minutes (900 seconds). Default is 60 seconds.\n"
                },
                "baselineDirection": {
                    "type": "string",
                    "description": "The baseline direction of a _baseline_ NRQL alert condition. Valid values are: `lower_only`, `upper_and_lower`, `upper_only` (case insensitive).\n"
                },
                "closeViolationsOnExpiration": {
                    "type": "boolean",
                    "description": "Whether to close all open violations when the signal expires.\n"
                },
                "critical": {
                    "$ref": "#/types/newrelic:index/NrqlAlertConditionCritical:NrqlAlertConditionCritical",
                    "description": "A list containing the `critical` threshold values. See Terms below for details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the NRQL alert condition.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the alert condition. Valid values are `true` and `false`. Defaults to `true`.\n"
                },
                "expirationDuration": {
                    "type": "integer",
                    "description": "The amount of time (in seconds) to wait before considering the signal expired.\n"
                },
                "fillOption": {
                    "type": "string",
                    "description": "Which strategy to use when filling gaps in the signal. Possible values are `none`, `last_value` or `static`. If `static`, the `fill_value` field will be used for filling gaps in the signal.\n"
                },
                "fillValue": {
                    "type": "number",
                    "description": "This value will be used for filling gaps in the signal.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition.\n"
                },
                "nrql": {
                    "$ref": "#/types/newrelic:index/NrqlAlertConditionNrql:NrqlAlertConditionNrql",
                    "description": "A NRQL query. See NRQL below for details.\n"
                },
                "openViolationOnExpiration": {
                    "type": "boolean",
                    "description": "Whether to create a new violation to capture that the signal expired.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n",
                    "willReplaceOnChanges": true
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "slideBy": {
                    "type": "integer",
                    "description": "Gathers data in overlapping time windows to smooth the chart line, making it easier to spot trends. The `slide_by` value is specified in seconds and must be smaller than and a factor of the `aggregation_window`. `slide_by` cannot be used with `static` NRQL conditions using the `sum` `value_function`.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/NrqlAlertConditionTerm:NrqlAlertConditionTerm"
                    },
                    "description": "**DEPRECATED** Use `critical`, and `warning` instead.  A list of terms for this condition. See Terms below for details.\n",
                    "deprecationMessage": "use `critical` and `warning` attributes instead"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the condition. Valid values are `static`, `baseline`, or `outlier`. Defaults to `static`.\n",
                    "willReplaceOnChanges": true
                },
                "valueFunction": {
                    "type": "string",
                    "description": "Possible values are `single_value`, `sum` (case insensitive).\n",
                    "deprecationMessage": "'value_function' is deprecated.  Remove this field and condition will evaluate as 'single_value' by default.  To replicate 'sum' behavior, use 'slide_by'."
                },
                "violationTimeLimit": {
                    "type": "string",
                    "description": "**DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).\u003cbr\u003e\n\u003csmall\u003e\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.\u003c/small\u003e\n",
                    "deprecationMessage": "use `violation_time_limit_seconds` attribute instead"
                },
                "violationTimeLimitSeconds": {
                    "type": "integer",
                    "description": "Sets a time limit, in seconds, that will automatically force-close a long-lasting violation after the time limit you select. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days) (inclusive). \u003cbr\u003e\n\u003csmall\u003e\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.\u003c/small\u003e\n"
                },
                "warning": {
                    "$ref": "#/types/newrelic:index/NrqlAlertConditionWarning:NrqlAlertConditionWarning",
                    "description": "A list containing the `warning` threshold values. See Terms below for details.\n"
                }
            },
            "requiredInputs": [
                "nrql",
                "policyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NrqlAlertCondition resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID of the account you wish to create the condition. Defaults to the account ID set in your environment variable `NEW_RELIC_ACCOUNT_ID`.\n"
                    },
                    "aggregationDelay": {
                        "type": "string",
                        "description": "How long we wait for data that belongs in each aggregation window. Depending on your data, a longer delay may increase accuracy but delay notifications. Use `aggregation_delay` with the `event_flow` and `cadence` methods. The maximum delay is 1200 seconds (20 minutes) when using `event_flow` and 3600 seconds (60 minutes) when using `cadence`. In both cases, the minimum delay is 0 seconds and the default is 120 seconds. `aggregation_delay` cannot be set with `nrql.evaluation_offset`.\n"
                    },
                    "aggregationMethod": {
                        "type": "string",
                        "description": "Determines when we consider an aggregation window to be complete so that we can evaluate the signal for violations. Possible values are `cadence`, `event_flow` or `event_timer`. Default is `event_flow`. `aggregation_method` cannot be set with `nrql.evaluation_offset`.\n"
                    },
                    "aggregationTimer": {
                        "type": "string",
                        "description": "How long we wait after each data point arrives to make sure we've processed the whole batch. Use `aggregation_timer` with the `event_timer` method. The timer value can range from 0 seconds to 1200 seconds (20 minutes); the default is 60 seconds. `aggregation_timer` cannot be set with `nrql.evaluation_offset`.\n"
                    },
                    "aggregationWindow": {
                        "type": "integer",
                        "description": "The duration of the time window used to evaluate the NRQL query, in seconds. The value must be at least 30 seconds, and no more than 15 minutes (900 seconds). Default is 60 seconds.\n"
                    },
                    "baselineDirection": {
                        "type": "string",
                        "description": "The baseline direction of a _baseline_ NRQL alert condition. Valid values are: `lower_only`, `upper_and_lower`, `upper_only` (case insensitive).\n"
                    },
                    "closeViolationsOnExpiration": {
                        "type": "boolean",
                        "description": "Whether to close all open violations when the signal expires.\n"
                    },
                    "critical": {
                        "$ref": "#/types/newrelic:index/NrqlAlertConditionCritical:NrqlAlertConditionCritical",
                        "description": "A list containing the `critical` threshold values. See Terms below for details.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the NRQL alert condition.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether to enable the alert condition. Valid values are `true` and `false`. Defaults to `true`.\n"
                    },
                    "entityGuid": {
                        "type": "string",
                        "description": "The unique entity identifier of the NRQL Condition in New Relic.\n"
                    },
                    "expirationDuration": {
                        "type": "integer",
                        "description": "The amount of time (in seconds) to wait before considering the signal expired.\n"
                    },
                    "fillOption": {
                        "type": "string",
                        "description": "Which strategy to use when filling gaps in the signal. Possible values are `none`, `last_value` or `static`. If `static`, the `fill_value` field will be used for filling gaps in the signal.\n"
                    },
                    "fillValue": {
                        "type": "number",
                        "description": "This value will be used for filling gaps in the signal.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the condition.\n"
                    },
                    "nrql": {
                        "$ref": "#/types/newrelic:index/NrqlAlertConditionNrql:NrqlAlertConditionNrql",
                        "description": "A NRQL query. See NRQL below for details.\n"
                    },
                    "openViolationOnExpiration": {
                        "type": "boolean",
                        "description": "Whether to create a new violation to capture that the signal expired.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the policy where this condition should be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "runbookUrl": {
                        "type": "string",
                        "description": "Runbook URL to display in notifications.\n"
                    },
                    "slideBy": {
                        "type": "integer",
                        "description": "Gathers data in overlapping time windows to smooth the chart line, making it easier to spot trends. The `slide_by` value is specified in seconds and must be smaller than and a factor of the `aggregation_window`. `slide_by` cannot be used with `static` NRQL conditions using the `sum` `value_function`.\n"
                    },
                    "terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/NrqlAlertConditionTerm:NrqlAlertConditionTerm"
                        },
                        "description": "**DEPRECATED** Use `critical`, and `warning` instead.  A list of terms for this condition. See Terms below for details.\n",
                        "deprecationMessage": "use `critical` and `warning` attributes instead"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the condition. Valid values are `static`, `baseline`, or `outlier`. Defaults to `static`.\n",
                        "willReplaceOnChanges": true
                    },
                    "valueFunction": {
                        "type": "string",
                        "description": "Possible values are `single_value`, `sum` (case insensitive).\n",
                        "deprecationMessage": "'value_function' is deprecated.  Remove this field and condition will evaluate as 'single_value' by default.  To replicate 'sum' behavior, use 'slide_by'."
                    },
                    "violationTimeLimit": {
                        "type": "string",
                        "description": "**DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).\u003cbr\u003e\n\u003csmall\u003e\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.\u003c/small\u003e\n",
                        "deprecationMessage": "use `violation_time_limit_seconds` attribute instead"
                    },
                    "violationTimeLimitSeconds": {
                        "type": "integer",
                        "description": "Sets a time limit, in seconds, that will automatically force-close a long-lasting violation after the time limit you select. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days) (inclusive). \u003cbr\u003e\n\u003csmall\u003e\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.\u003c/small\u003e\n"
                    },
                    "warning": {
                        "$ref": "#/types/newrelic:index/NrqlAlertConditionWarning:NrqlAlertConditionWarning",
                        "description": "A list containing the `warning` threshold values. See Terms below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/nrqlDropRule:NrqlDropRule": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.NrqlDropRule(\"foo\", {\n    accountId: 12345,\n    action: \"drop_data\",\n    description: \"Drops all data for MyCustomEvent that comes from the LoadGeneratingApp in the dev environment, because there is too much and we don’t look at it.\",\n    nrql: \"SELECT * FROM MyCustomEvent WHERE appName='LoadGeneratingApp' AND environment='development'\",\n});\nconst bar = new newrelic.NrqlDropRule(\"bar\", {\n    accountId: 12345,\n    action: \"drop_attributes\",\n    description: \"Removes the user name and email fields from MyCustomEvent\",\n    nrql: \"SELECT userEmail, userName FROM MyCustomEvent\",\n});\nconst baz = new newrelic.NrqlDropRule(\"baz\", {\n    accountId: 12345,\n    action: \"drop_attributes_from_metric_aggregates\",\n    description: \"Removes containerId from metric aggregates to reduce metric cardinality.\",\n    nrql: \"SELECT containerId FROM Metric\",\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNew Relic NRQL drop rules can be imported using a concatenated string of the format\n\n`\u003caccount_id\u003e:\u003crule_id\u003e`, e.g. bash\n\n```sh\n $ pulumi import newrelic:index/nrqlDropRule:NrqlDropRule foo 12345:34567\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Account where the drop rule will be put. Defaults to the account associated with the API key used.\n"
                },
                "action": {
                    "type": "string",
                    "description": "An action type specifying how to apply the NRQL string (either `drop_data`, `drop_attributes`, or ` drop_attributes_from_metric_aggregates`).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the drop rule.\n"
                },
                "nrql": {
                    "type": "string",
                    "description": "A NRQL string that specifies what data types to drop.\n"
                },
                "ruleId": {
                    "type": "string",
                    "description": "The id, uniquely identifying the rule.\n"
                }
            },
            "required": [
                "accountId",
                "action",
                "nrql",
                "ruleId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Account where the drop rule will be put. Defaults to the account associated with the API key used.\n"
                },
                "action": {
                    "type": "string",
                    "description": "An action type specifying how to apply the NRQL string (either `drop_data`, `drop_attributes`, or ` drop_attributes_from_metric_aggregates`).\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the drop rule.\n",
                    "willReplaceOnChanges": true
                },
                "nrql": {
                    "type": "string",
                    "description": "A NRQL string that specifies what data types to drop.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "action",
                "nrql"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NrqlDropRule resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Account where the drop rule will be put. Defaults to the account associated with the API key used.\n"
                    },
                    "action": {
                        "type": "string",
                        "description": "An action type specifying how to apply the NRQL string (either `drop_data`, `drop_attributes`, or ` drop_attributes_from_metric_aggregates`).\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the drop rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "nrql": {
                        "type": "string",
                        "description": "A NRQL string that specifies what data types to drop.\n",
                        "willReplaceOnChanges": true
                    },
                    "ruleId": {
                        "type": "string",
                        "description": "The id, uniquely identifying the rule.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/oneDashboard:OneDashboard": {
            "description": "{{% examples %}}\n## Example Usage\n{{% /examples %}}\n## Additional Examples\n\n\n## Import\n\nNew Relic dashboards can be imported using their GUID, e.g.\n\n```sh\n $ pulumi import newrelic:index/oneDashboard:OneDashboard my_dashboard \u003cDashboard GUID\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Brief text describing the dashboard.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The unique entity identifier of the dashboard page in New Relic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the dashboard.\n"
                },
                "pages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPage:OneDashboardPage"
                    },
                    "description": "A nested block that describes a page. See Nested page blocks below for details.\n"
                },
                "permalink": {
                    "type": "string",
                    "description": "The URL for viewing the dashboard.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`.  Defaults to `public_read_only`.\n"
                }
            },
            "required": [
                "accountId",
                "guid",
                "name",
                "pages",
                "permalink"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Brief text describing the dashboard.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the dashboard.\n"
                },
                "pages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardPage:OneDashboardPage"
                    },
                    "description": "A nested block that describes a page. See Nested page blocks below for details.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`.  Defaults to `public_read_only`.\n"
                }
            },
            "requiredInputs": [
                "pages"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OneDashboard resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Brief text describing the dashboard.\n"
                    },
                    "guid": {
                        "type": "string",
                        "description": "The unique entity identifier of the dashboard page in New Relic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the dashboard.\n"
                    },
                    "pages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/OneDashboardPage:OneDashboardPage"
                        },
                        "description": "A nested block that describes a page. See Nested page blocks below for details.\n"
                    },
                    "permalink": {
                        "type": "string",
                        "description": "The URL for viewing the dashboard.\n"
                    },
                    "permissions": {
                        "type": "string",
                        "description": "Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`.  Defaults to `public_read_only`.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/oneDashboardRaw:OneDashboardRaw": {
            "description": "{{% examples %}}\n## Example Usage\n{{% /examples %}}",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Brief text describing the dashboard.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The unique entity identifier of the dashboard page in New Relic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the dashboard.\n"
                },
                "pages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardRawPage:OneDashboardRawPage"
                    },
                    "description": "A nested block that describes a page. See Nested page blocks below for details.\n"
                },
                "permalink": {
                    "type": "string",
                    "description": "The URL for viewing the dashboard.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`. Defaults to `public_read_only`.\n"
                }
            },
            "required": [
                "accountId",
                "guid",
                "name",
                "pages",
                "permalink"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Brief text describing the dashboard.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the dashboard.\n"
                },
                "pages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:index/OneDashboardRawPage:OneDashboardRawPage"
                    },
                    "description": "A nested block that describes a page. See Nested page blocks below for details.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`. Defaults to `public_read_only`.\n"
                }
            },
            "requiredInputs": [
                "pages"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OneDashboardRaw resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Brief text describing the dashboard.\n"
                    },
                    "guid": {
                        "type": "string",
                        "description": "The unique entity identifier of the dashboard page in New Relic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the dashboard.\n"
                    },
                    "pages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:index/OneDashboardRawPage:OneDashboardRawPage"
                        },
                        "description": "A nested block that describes a page. See Nested page blocks below for details.\n"
                    },
                    "permalink": {
                        "type": "string",
                        "description": "The URL for viewing the dashboard.\n"
                    },
                    "permissions": {
                        "type": "string",
                        "description": "Determines who can see the dashboard in an account. Valid values are `private`, `public_read_only`, or `public_read_write`. Defaults to `public_read_only`.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:index/serviceLevel:ServiceLevel": {
            "description": "Use this resource to create, update, and delete New Relic Service Level Indicators and Objectives.\n\nA New Relic User API key is required to provision this resource.  Set the `api_key`\nattribute in the `provider` block or the `NEW_RELIC_API_KEY` environment\nvariable with your User API key.\n\nImportant:\n- Only roles that provide [permissions](https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/new-relic-one-user-model-understand-user-structure/) to create events to metric rules can create SLI/SLOs.\n- Only [Full users](https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/new-relic-one-user-model-understand-user-structure/#user-type) can view SLI/SLOs.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.ServiceLevel(\"foo\", {\n    description: \"Proportion of requests that are served faster than a threshold.\",\n    events: {\n        accountId: 12345678,\n        goodEvents: {\n            from: \"Transaction\",\n            where: \"appName = 'Example application' AND (transactionType= 'Web') AND duration \u003c 0.1\",\n        },\n        validEvents: {\n            from: \"Transaction\",\n            where: \"appName = 'Example application' AND (transactionType='Web')\",\n        },\n    },\n    guid: \"MXxBUE18QVBQTElDQVRJT058MQ\",\n    objective: {\n        target: 99,\n        timeWindow: {\n            rolling: {\n                count: 7,\n                unit: \"DAY\",\n            },\n        },\n    },\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNew Relic Service Levels can be imported using a concatenated string of the format\n\n`\u003caccount_id\u003e:\u003csli_id\u003e:\u003cguid\u003e`, where the `guid` is the entity the SLI relates to. Examplebash\n\n```sh\n $ pulumi import newrelic:index/serviceLevel:ServiceLevel foo 12345678:4321:MXxBUE18QVBQTElDQVRJT058MQ\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the SLI.\n"
                },
                "events": {
                    "$ref": "#/types/newrelic:index/ServiceLevelEvents:ServiceLevelEvents",
                    "description": "The events that define the NRDB data for the SLI/SLO calculations.\nSee Events below for details.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The GUID of the entity (e.g, APM Service, Browser application, Workload, etc.) that you want to relate this SLI to. Note that changing the GUID will force a new resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A short name for the SLI that will help anyone understand what it is about.\n"
                },
                "objective": {
                    "$ref": "#/types/newrelic:index/ServiceLevelObjective:ServiceLevelObjective",
                    "description": "The objective of the SLI, only one can be defined.\nSee Objective below for details.\n"
                },
                "sliGuid": {
                    "type": "string",
                    "description": "The unique entity identifier of the Service Level Indicator in New Relic.\n"
                },
                "sliId": {
                    "type": "string",
                    "description": "The unique entity identifier of the Service Level Indicator.\n"
                }
            },
            "required": [
                "events",
                "guid",
                "name",
                "objective",
                "sliGuid",
                "sliId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the SLI.\n"
                },
                "events": {
                    "$ref": "#/types/newrelic:index/ServiceLevelEvents:ServiceLevelEvents",
                    "description": "The events that define the NRDB data for the SLI/SLO calculations.\nSee Events below for details.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The GUID of the entity (e.g, APM Service, Browser application, Workload, etc.) that you want to relate this SLI to. Note that changing the GUID will force a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "A short name for the SLI that will help anyone understand what it is about.\n"
                },
                "objective": {
                    "$ref": "#/types/newrelic:index/ServiceLevelObjective:ServiceLevelObjective",
                    "description": "The objective of the SLI, only one can be defined.\nSee Objective below for details.\n"
                }
            },
            "requiredInputs": [
                "events",
                "guid",
                "objective"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceLevel resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the SLI.\n"
                    },
                    "events": {
                        "$ref": "#/types/newrelic:index/ServiceLevelEvents:ServiceLevelEvents",
                        "description": "The events that define the NRDB data for the SLI/SLO calculations.\nSee Events below for details.\n"
                    },
                    "guid": {
                        "type": "string",
                        "description": "The GUID of the entity (e.g, APM Service, Browser application, Workload, etc.) that you want to relate this SLI to. Note that changing the GUID will force a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "A short name for the SLI that will help anyone understand what it is about.\n"
                    },
                    "objective": {
                        "$ref": "#/types/newrelic:index/ServiceLevelObjective:ServiceLevelObjective",
                        "description": "The objective of the SLI, only one can be defined.\nSee Objective below for details.\n"
                    },
                    "sliGuid": {
                        "type": "string",
                        "description": "The unique entity identifier of the Service Level Indicator in New Relic.\n"
                    },
                    "sliId": {
                        "type": "string",
                        "description": "The unique entity identifier of the Service Level Indicator.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:insights/event:Event": {
            "description": "Use this resource to create one or more Insights events.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.insights.Event(\"foo\", {\n    events: [{\n        attributes: [\n            {\n                key: \"a_string_attribute\",\n                value: \"a string\",\n            },\n            {\n                key: \"an_integer_attribute\",\n                type: \"int\",\n                value: \"42\",\n            },\n            {\n                key: \"a_float_attribute\",\n                type: \"float\",\n                value: \"101.1\",\n            },\n        ],\n        timestamp: 1232471100,\n        type: \"MyEvent\",\n    }],\n});\n```\n{{% /example %}}\n{{% /examples %}}\n## Events\n\nThe `event` mapping supports the following arguments:\n\n  * `type` - (Required) The event's name. Can be a combination of alphanumeric characters, underscores, and colons.\n  * `timestamp` - (Optional) Must be a Unix epoch timestamp. You can define timestamps either in seconds or in milliseconds.\n  * `attribute` - (Required) An attribute to include in your event payload. Multiple attribute blocks can be defined for an event. See Attributes below for details.\n\n### Attributes\n\nThe `attribute` mapping supports the following arguments:\n\n  * `key` - (Required) The name of the attribute.\n  * `value` - (Required) The value of the attribute.\n  * `type` - (Optional) Specify the type for the attribute value. This is useful when passing integer or float values to Insights. Allowed values are `string`, `int`, or `float`. Defaults to `string`.\n",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:insights/EventEvent:EventEvent"
                    },
                    "description": "An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.\n"
                }
            },
            "required": [
                "events"
            ],
            "inputProperties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:insights/EventEvent:EventEvent"
                    },
                    "description": "An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "events"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Event resources.\n",
                "properties": {
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:insights/EventEvent:EventEvent"
                        },
                        "description": "An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "newrelic:plugins/alertCondition:AlertCondition": {
            "description": "New Relic Plugins reached end of life Wednesday June 16, 2021.\n\n**This resource has been removed.**\n\nFor more information, [click here](https://discuss.newrelic.com/t/new-relic-plugin-eol-wednesday-june-16th-2021/127267)\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not this condition is enabled.\n"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The plugin component IDs to target.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The plugin metric to evaluate.\n"
                },
                "metricDescription": {
                    "type": "string",
                    "description": "The metric description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition. Must be between 1 and 64 characters, inclusive.\n"
                },
                "pluginGuid": {
                    "type": "string",
                    "description": "The GUID of the plugin which produces the metric.\n"
                },
                "pluginId": {
                    "type": "string",
                    "description": "The ID of the installed plugin instance which produces the metric.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:plugins/AlertConditionTerm:AlertConditionTerm"
                    }
                },
                "valueFunction": {
                    "type": "string",
                    "description": "The value function to apply to the metric data. One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.\n"
                }
            },
            "required": [
                "entities",
                "metric",
                "metricDescription",
                "name",
                "pluginGuid",
                "pluginId",
                "policyId",
                "terms",
                "valueFunction"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not this condition is enabled.\n"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The plugin component IDs to target.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The plugin metric to evaluate.\n"
                },
                "metricDescription": {
                    "type": "string",
                    "description": "The metric description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition. Must be between 1 and 64 characters, inclusive.\n"
                },
                "pluginGuid": {
                    "type": "string",
                    "description": "The GUID of the plugin which produces the metric.\n"
                },
                "pluginId": {
                    "type": "string",
                    "description": "The ID of the installed plugin instance which produces the metric.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n",
                    "willReplaceOnChanges": true
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:plugins/AlertConditionTerm:AlertConditionTerm"
                    }
                },
                "valueFunction": {
                    "type": "string",
                    "description": "The value function to apply to the metric data. One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.\n"
                }
            },
            "requiredInputs": [
                "entities",
                "metric",
                "metricDescription",
                "pluginGuid",
                "pluginId",
                "policyId",
                "terms",
                "valueFunction"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertCondition resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether or not this condition is enabled.\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The plugin component IDs to target.\n"
                    },
                    "metric": {
                        "type": "string",
                        "description": "The plugin metric to evaluate.\n"
                    },
                    "metricDescription": {
                        "type": "string",
                        "description": "The metric description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the condition. Must be between 1 and 64 characters, inclusive.\n"
                    },
                    "pluginGuid": {
                        "type": "string",
                        "description": "The GUID of the plugin which produces the metric.\n"
                    },
                    "pluginId": {
                        "type": "string",
                        "description": "The ID of the installed plugin instance which produces the metric.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the policy where this condition should be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "runbookUrl": {
                        "type": "string",
                        "description": "Runbook URL to display in notifications.\n"
                    },
                    "terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:plugins/AlertConditionTerm:AlertConditionTerm"
                        }
                    },
                    "valueFunction": {
                        "type": "string",
                        "description": "The value function to apply to the metric data. One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:plugins/applicationSettings:ApplicationSettings": {
            "description": "\u003e **NOTE:** Applications are not created by this resource, but are created by\na reporting agent.\n\nUse this resource to manage configuration for an application that already\nexists in New Relic.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst app = new newrelic.plugins.ApplicationSettings(\"app\", {\n    appApdexThreshold: 0.7,\n    enableRealUserMonitoring: false,\n    endUserApdexThreshold: 0.8,\n});\n```\n{{% /example %}}\n{{% /examples %}}\n## Notes\n\n\u003e **NOTE:** Applications that have reported data in the last twelve hours\ncannot be deleted.\n\n\n## Import\n\nApplications can be imported using notation `application_id`, e.g.\n\n```sh\n $ pulumi import newrelic:plugins/applicationSettings:ApplicationSettings main 6789012345\n```\n\n ",
            "properties": {
                "appApdexThreshold": {
                    "type": "number",
                    "description": "The appex threshold for the New Relic application.\n"
                },
                "enableRealUserMonitoring": {
                    "type": "boolean",
                    "description": "Enable or disable real user monitoring for the New Relic application.\n"
                },
                "endUserApdexThreshold": {
                    "type": "number",
                    "description": "The user's apdex threshold for the New Relic application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application in New Relic APM.\n"
                }
            },
            "required": [
                "appApdexThreshold",
                "enableRealUserMonitoring",
                "endUserApdexThreshold",
                "name"
            ],
            "inputProperties": {
                "appApdexThreshold": {
                    "type": "number",
                    "description": "The appex threshold for the New Relic application.\n"
                },
                "enableRealUserMonitoring": {
                    "type": "boolean",
                    "description": "Enable or disable real user monitoring for the New Relic application.\n"
                },
                "endUserApdexThreshold": {
                    "type": "number",
                    "description": "The user's apdex threshold for the New Relic application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application in New Relic APM.\n"
                }
            },
            "requiredInputs": [
                "appApdexThreshold",
                "enableRealUserMonitoring",
                "endUserApdexThreshold"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationSettings resources.\n",
                "properties": {
                    "appApdexThreshold": {
                        "type": "number",
                        "description": "The appex threshold for the New Relic application.\n"
                    },
                    "enableRealUserMonitoring": {
                        "type": "boolean",
                        "description": "Enable or disable real user monitoring for the New Relic application.\n"
                    },
                    "endUserApdexThreshold": {
                        "type": "number",
                        "description": "The user's apdex threshold for the New Relic application.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application in New Relic APM.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:plugins/workload:Workload": {
            "description": "Use this resource to create, update, and delete a New Relic One workload.\n\nA New Relic User API key is required to provision this resource.  Set the `api_key`\nattribute in the `provider` block or the `NEW_RELIC_API_KEY` environment\nvariable with your User API key.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nInclude entities with a certain string on the name.\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.plugins.Workload(\"foo\", {\n    accountId: 12345678,\n    entityGuids: [\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\"],\n    entitySearchQueries: [{\n        query: \"name like '%Example application%'\",\n    }],\n    scopeAccountIds: [12345678],\n});\n```\n\nInclude entities with a set of tags.\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.plugins.Workload(\"foo\", {\n    accountId: 12345678,\n    entityGuids: [\"MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1\"],\n    entitySearchQueries: [{\n        query: \"tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'\",\n    }],\n    scopeAccountIds: [12345678],\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNew Relic One workloads can be imported using a concatenated string of the format\n\n`\u003caccount_id\u003e:\u003cworkload_id\u003e:\u003cguid\u003e`, e.g. bash\n\n```sh\n $ pulumi import newrelic:plugins/workload:Workload foo 12345678:1456:MjUyMDUyOHxBUE18QVBRTElDQVRJT058MjE1MDM3Nzk1\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID where you want to create the workload.\n"
                },
                "compositeEntitySearchQuery": {
                    "type": "string",
                    "description": "The composite query used to compose a dynamic workload.\n"
                },
                "entityGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of entity GUIDs manually assigned to this workload.\n"
                },
                "entitySearchQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:plugins/WorkloadEntitySearchQuery:WorkloadEntitySearchQuery"
                    },
                    "description": "A list of search queries that define a dynamic workload.  See Nested entity_search_query blocks below for details.\n"
                },
                "guid": {
                    "type": "string",
                    "description": "The unique entity identifier of the workload in New Relic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The workload's name.\n"
                },
                "permalink": {
                    "type": "string",
                    "description": "The URL of the workload.\n"
                },
                "scopeAccountIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of account IDs that will be used to get entities from.\n"
                },
                "workloadId": {
                    "type": "integer",
                    "description": "The unique entity identifier of the workload.\n"
                }
            },
            "required": [
                "accountId",
                "compositeEntitySearchQuery",
                "entityGuids",
                "guid",
                "name",
                "permalink",
                "scopeAccountIds",
                "workloadId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "integer",
                    "description": "The New Relic account ID where you want to create the workload.\n"
                },
                "entityGuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of entity GUIDs manually assigned to this workload.\n"
                },
                "entitySearchQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:plugins/WorkloadEntitySearchQuery:WorkloadEntitySearchQuery"
                    },
                    "description": "A list of search queries that define a dynamic workload.  See Nested entity_search_query blocks below for details.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The workload's name.\n"
                },
                "scopeAccountIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of account IDs that will be used to get entities from.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Workload resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID where you want to create the workload.\n"
                    },
                    "compositeEntitySearchQuery": {
                        "type": "string",
                        "description": "The composite query used to compose a dynamic workload.\n"
                    },
                    "entityGuids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of entity GUIDs manually assigned to this workload.\n"
                    },
                    "entitySearchQueries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:plugins/WorkloadEntitySearchQuery:WorkloadEntitySearchQuery"
                        },
                        "description": "A list of search queries that define a dynamic workload.  See Nested entity_search_query blocks below for details.\n",
                        "willReplaceOnChanges": true
                    },
                    "guid": {
                        "type": "string",
                        "description": "The unique entity identifier of the workload in New Relic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The workload's name.\n"
                    },
                    "permalink": {
                        "type": "string",
                        "description": "The URL of the workload.\n"
                    },
                    "scopeAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of account IDs that will be used to get entities from.\n"
                    },
                    "workloadId": {
                        "type": "integer",
                        "description": "The unique entity identifier of the workload.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/alertCondition:AlertCondition": {
            "description": "Use this resource to create and manage synthetics alert conditions in New Relic.\n\n\u003e **NOTE:** The newrelic.NrqlAlertCondition resource is preferred for configuring alerts conditions. In most cases feature parity can be achieved with a NRQL query. Other condition types may be deprecated in the future and receive fewer product updates.\n\n\n## Import\n\nSynthetics alert conditions can be imported using a composite ID of `\u003cpolicy_id\u003e:\u003ccondition_id\u003e`, e.g.\n\n```sh\n $ pulumi import newrelic:synthetics/alertCondition:AlertCondition main 12345:67890\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Set whether to enable the alert condition. Defaults to `true`.\n"
                },
                "monitorId": {
                    "type": "string",
                    "description": "The ID of the Synthetics monitor to be referenced in the alert condition.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of this condition.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                }
            },
            "required": [
                "monitorId",
                "name",
                "policyId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Set whether to enable the alert condition. Defaults to `true`.\n"
                },
                "monitorId": {
                    "type": "string",
                    "description": "The ID of the Synthetics monitor to be referenced in the alert condition.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of this condition.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition should be used.\n",
                    "willReplaceOnChanges": true
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                }
            },
            "requiredInputs": [
                "monitorId",
                "policyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertCondition resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Set whether to enable the alert condition. Defaults to `true`.\n"
                    },
                    "monitorId": {
                        "type": "string",
                        "description": "The ID of the Synthetics monitor to be referenced in the alert condition.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of this condition.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the policy where this condition should be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "runbookUrl": {
                        "type": "string",
                        "description": "Runbook URL to display in notifications.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/monitor:Monitor": {
            "description": "Use this resource to create, update, and delete a synthetics monitor in New Relic.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n##### Type: `SIMPLE`\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.Monitor(\"foo\", {\n    frequency: 5,\n    locations: [\n        \"AWS_US_EAST_1\",\n        \"AWS_US_EAST_2\",\n    ],\n    status: \"ENABLED\",\n    type: \"SIMPLE\",\n    uri: \"https://example.com\", // Required for type \"SIMPLE\" and \"BROWSER\"\n    validationString: \"add example validation check here\", // Optional for type \"SIMPLE\" and \"BROWSER\"\n    verifySsl: true, // Optional for type \"SIMPLE\" and \"BROWSER\"\n});\n```\n\n##### Type: `BROWSER`\n{{% /example %}}\n{{% /examples %}}\n## Additional Examples\n\nType: `BROWSER`\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.Monitor(\"foo\", {\n    bypassHeadRequest: true, // Note: optional for type \"BROWSER\" only\n    frequency: 5,\n    locations: [\"AWS_US_EAST_1\"],\n    status: \"ENABLED\",\n    treatRedirectAsFailure: true, // Note: optional for type \"BROWSER\" only\n    type: \"BROWSER\",\n    uri: \"https://example.com\", // required for type \"SIMPLE\" and \"BROWSER\"\n    validationString: \"add example validation check here\", // optional for type \"SIMPLE\" and \"BROWSER\"\n    verifySsl: true, // optional for type \"SIMPLE\" and \"BROWSER\"\n});\n```\n\n##### Type: `SCRIPT_BROWSER`\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.Monitor(\"foo\", {\n    frequency: 5,\n    locations: [\"AWS_US_EAST_1\"],\n    status: \"ENABLED\",\n    type: \"SCRIPT_BROWSER\",\n});\n```\n\n##### Type: `SCRIPT_API`\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.Monitor(\"foo\", {\n    frequency: 5,\n    locations: [\"AWS_US_EAST_1\"],\n    status: \"ENABLED\",\n    type: \"SCRIPT_API\",\n});\n```\n\n\n## Import\n\nSynthetics monitors can be imported using the `id`, e.g. bash\n\n```sh\n $ pulumi import newrelic:synthetics/monitor:Monitor main \u003cid\u003e\n```\n\n ",
            "properties": {
                "bypassHeadRequest": {
                    "type": "boolean",
                    "description": "Bypass HEAD request.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "The interval (in minutes) at which this monitor should run.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The locations in which this monitor should be run.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of this monitor.\n"
                },
                "slaThreshold": {
                    "type": "number",
                    "description": "The base threshold for the SLA report.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The monitor status (i.e. `ENABLED`, `MUTED`, `DISABLED`).\n"
                },
                "treatRedirectAsFailure": {
                    "type": "boolean",
                    "description": "Fail the monitor check if redirected.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The monitor type. Valid values are `SIMPLE`, `BROWSER`, `SCRIPT_BROWSER`, and `SCRIPT_API`.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The URI for the monitor to hit.\n"
                },
                "validationString": {
                    "type": "string",
                    "description": "The string to validate against in the response.\n"
                },
                "verifySsl": {
                    "type": "boolean",
                    "description": "Verify SSL.\n"
                }
            },
            "required": [
                "frequency",
                "locations",
                "name",
                "status",
                "type"
            ],
            "inputProperties": {
                "bypassHeadRequest": {
                    "type": "boolean",
                    "description": "Bypass HEAD request.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "The interval (in minutes) at which this monitor should run.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The locations in which this monitor should be run.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of this monitor.\n"
                },
                "slaThreshold": {
                    "type": "number",
                    "description": "The base threshold for the SLA report.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The monitor status (i.e. `ENABLED`, `MUTED`, `DISABLED`).\n"
                },
                "treatRedirectAsFailure": {
                    "type": "boolean",
                    "description": "Fail the monitor check if redirected.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The monitor type. Valid values are `SIMPLE`, `BROWSER`, `SCRIPT_BROWSER`, and `SCRIPT_API`.\n",
                    "willReplaceOnChanges": true
                },
                "uri": {
                    "type": "string",
                    "description": "The URI for the monitor to hit.\n"
                },
                "validationString": {
                    "type": "string",
                    "description": "The string to validate against in the response.\n"
                },
                "verifySsl": {
                    "type": "boolean",
                    "description": "Verify SSL.\n"
                }
            },
            "requiredInputs": [
                "frequency",
                "locations",
                "status",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Monitor resources.\n",
                "properties": {
                    "bypassHeadRequest": {
                        "type": "boolean",
                        "description": "Bypass HEAD request.\n"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "The interval (in minutes) at which this monitor should run.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The locations in which this monitor should be run.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of this monitor.\n"
                    },
                    "slaThreshold": {
                        "type": "number",
                        "description": "The base threshold for the SLA report.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The monitor status (i.e. `ENABLED`, `MUTED`, `DISABLED`).\n"
                    },
                    "treatRedirectAsFailure": {
                        "type": "boolean",
                        "description": "Fail the monitor check if redirected.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The monitor type. Valid values are `SIMPLE`, `BROWSER`, `SCRIPT_BROWSER`, and `SCRIPT_API`.\n",
                        "willReplaceOnChanges": true
                    },
                    "uri": {
                        "type": "string",
                        "description": "The URI for the monitor to hit.\n"
                    },
                    "validationString": {
                        "type": "string",
                        "description": "The string to validate against in the response.\n"
                    },
                    "verifySsl": {
                        "type": "boolean",
                        "description": "Verify SSL.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/monitorScript:MonitorScript": {
            "description": "Use this resource to update a synthetics monitor script in New Relic.\n\n\n## Import\n\nSynthetics monitor scripts can be imported using the `id`, e.g. bash\n\n```sh\n $ pulumi import newrelic:synthetics/monitorScript:MonitorScript main \u003cid\u003e\n```\n\n ",
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/MonitorScriptLocation:MonitorScriptLocation"
                    },
                    "description": "A nested block that describes a monitor script location. See Nested location blocks below for details\n"
                },
                "monitorId": {
                    "type": "string",
                    "description": "The ID of the monitor to attach the script to.\n"
                },
                "text": {
                    "type": "string",
                    "description": "The plaintext representing the monitor script.\n"
                }
            },
            "required": [
                "monitorId",
                "text"
            ],
            "inputProperties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/newrelic:synthetics/MonitorScriptLocation:MonitorScriptLocation"
                    },
                    "description": "A nested block that describes a monitor script location. See Nested location blocks below for details\n"
                },
                "monitorId": {
                    "type": "string",
                    "description": "The ID of the monitor to attach the script to.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The plaintext representing the monitor script.\n"
                }
            },
            "requiredInputs": [
                "monitorId",
                "text"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitorScript resources.\n",
                "properties": {
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/newrelic:synthetics/MonitorScriptLocation:MonitorScriptLocation"
                        },
                        "description": "A nested block that describes a monitor script location. See Nested location blocks below for details\n"
                    },
                    "monitorId": {
                        "type": "string",
                        "description": "The ID of the monitor to attach the script to.\n",
                        "willReplaceOnChanges": true
                    },
                    "text": {
                        "type": "string",
                        "description": "The plaintext representing the monitor script.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/multiLocationAlertCondition:MultiLocationAlertCondition": {
            "description": "Use this resource to create, update, and delete a New Relic Synthetics Location Alerts.\n\n\u003e **NOTE:** The newrelic.NrqlAlertCondition resource is preferred for configuring alerts conditions. In most cases feature parity can be achieved with a NRQL query. Other condition types may be deprecated in the future and receive fewer product updates.\n\n\n## Import\n\nNew Relic Synthetics MultiLocation Conditions can be imported using a concatenated string of the format\n\n`\u003cpolicy_id\u003e:\u003ccondition_id\u003e`, e.g. bash\n\n```sh\n $ pulumi import newrelic:synthetics/multiLocationAlertCondition:MultiLocationAlertCondition example 12345678:1456\n```\n\n ",
            "properties": {
                "critical": {
                    "$ref": "#/types/newrelic:synthetics/MultiLocationAlertConditionCritical:MultiLocationAlertConditionCritical",
                    "description": "A condition term with the priority set to critical.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Set whether to enable the alert condition.  Defaults to true.\n"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The GUIDs of the Synthetics monitors to alert on.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition will be used.\n"
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "violationTimeLimitSeconds": {
                    "type": "integer",
                    "description": "The maximum number of seconds a violation can remain open before being closed by the system. Must be one of: 0, 3600, 7200, 14400, 28800, 43200, 86400.\n"
                },
                "warning": {
                    "$ref": "#/types/newrelic:synthetics/MultiLocationAlertConditionWarning:MultiLocationAlertConditionWarning",
                    "description": "A condition term with the priority set to warning.\n"
                }
            },
            "required": [
                "critical",
                "entities",
                "name",
                "policyId",
                "violationTimeLimitSeconds"
            ],
            "inputProperties": {
                "critical": {
                    "$ref": "#/types/newrelic:synthetics/MultiLocationAlertConditionCritical:MultiLocationAlertConditionCritical",
                    "description": "A condition term with the priority set to critical.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Set whether to enable the alert condition.  Defaults to true.\n"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The GUIDs of the Synthetics monitors to alert on.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The title of the condition.\n"
                },
                "policyId": {
                    "type": "integer",
                    "description": "The ID of the policy where this condition will be used.\n",
                    "willReplaceOnChanges": true
                },
                "runbookUrl": {
                    "type": "string",
                    "description": "Runbook URL to display in notifications.\n"
                },
                "violationTimeLimitSeconds": {
                    "type": "integer",
                    "description": "The maximum number of seconds a violation can remain open before being closed by the system. Must be one of: 0, 3600, 7200, 14400, 28800, 43200, 86400.\n"
                },
                "warning": {
                    "$ref": "#/types/newrelic:synthetics/MultiLocationAlertConditionWarning:MultiLocationAlertConditionWarning",
                    "description": "A condition term with the priority set to warning.\n"
                }
            },
            "requiredInputs": [
                "critical",
                "entities",
                "policyId",
                "violationTimeLimitSeconds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MultiLocationAlertCondition resources.\n",
                "properties": {
                    "critical": {
                        "$ref": "#/types/newrelic:synthetics/MultiLocationAlertConditionCritical:MultiLocationAlertConditionCritical",
                        "description": "A condition term with the priority set to critical.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Set whether to enable the alert condition.  Defaults to true.\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The GUIDs of the Synthetics monitors to alert on.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the condition.\n"
                    },
                    "policyId": {
                        "type": "integer",
                        "description": "The ID of the policy where this condition will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "runbookUrl": {
                        "type": "string",
                        "description": "Runbook URL to display in notifications.\n"
                    },
                    "violationTimeLimitSeconds": {
                        "type": "integer",
                        "description": "The maximum number of seconds a violation can remain open before being closed by the system. Must be one of: 0, 3600, 7200, 14400, 28800, 43200, 86400.\n"
                    },
                    "warning": {
                        "$ref": "#/types/newrelic:synthetics/MultiLocationAlertConditionWarning:MultiLocationAlertConditionWarning",
                        "description": "A condition term with the priority set to warning.\n"
                    }
                },
                "type": "object"
            }
        },
        "newrelic:synthetics/secureCredential:SecureCredential": {
            "description": "Use this resource to create and manage New Relic Synthetic secure credentials.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.SecureCredential(\"foo\", {\n    description: \"My description\",\n    key: \"MY_KEY\",\n    value: \"My value\",\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA Synthetics secure credential can be imported using its `key`\n\n```sh\n $ pulumi import newrelic:synthetics/secureCredential:SecureCredential foo MY_KEY\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The time the secure credential was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The secure credential's description.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.\n"
                },
                "lastUpdated": {
                    "type": "string",
                    "description": "The time the secure credential was last updated.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The secure credential's value.\n"
                }
            },
            "required": [
                "createdAt",
                "key",
                "lastUpdated",
                "value"
            ],
            "inputProperties": {
                "createdAt": {
                    "type": "string",
                    "description": "The time the secure credential was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The secure credential's description.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.\n",
                    "willReplaceOnChanges": true
                },
                "lastUpdated": {
                    "type": "string",
                    "description": "The time the secure credential was last updated.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The secure credential's value.\n"
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecureCredential resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The time the secure credential was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The secure credential's description.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.\n",
                        "willReplaceOnChanges": true
                    },
                    "lastUpdated": {
                        "type": "string",
                        "description": "The time the secure credential was last updated.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The secure credential's value.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "newrelic:index/getAccount:getAccount": {
            "description": "Use this data source to get information about a specific account in New Relic.\nAccounts can be located by ID or name.  Exactly one of the two attributes is\nrequired.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst acc = pulumi.output(newrelic.getAccount({\n    scope: \"global\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAccount.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account ID in New Relic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The account name in New Relic.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of the account in New Relic.  Valid values are \"global\" and \"in_region\".  Defaults to \"in_region\".\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccount.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "newrelic:index/getAlertChannel:getAlertChannel": {
            "description": "Use this data source to get information about a specific alert channel in New Relic that already exists.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAlertChannel.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the alert channel in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAlertChannel.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/newrelic:index/getAlertChannelConfig:getAlertChannelConfig",
                        "description": "Alert channel configuration.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "policyIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of policy IDs associated with the alert channel.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Alert channel type, either: `email`, `opsgenie`, `pagerduty`, `slack`, `victorops`, or `webhook`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "name",
                    "policyIds",
                    "type",
                    "id"
                ]
            }
        },
        "newrelic:index/getAlertPolicy:getAlertPolicy": {
            "description": "Use this data source to get information about a specific alert policy in New Relic that already exists.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAlertPolicy.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "incidentPreference": {
                        "type": "string",
                        "description": "The rollup strategy for the policy. Options include: PER_POLICY, PER_CONDITION, or PER_CONDITION_AND_TARGET. The default is PER_POLICY.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the alert policy in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAlertPolicy.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The time the policy was created.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "incidentPreference": {
                        "type": "string",
                        "description": "The rollup strategy for the policy. Options include: PER_POLICY, PER_CONDITION, or PER_CONDITION_AND_TARGET. The default is PER_POLICY.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The time the policy was last updated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "createdAt",
                    "name",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "newrelic:index/getApplication:getApplication": {
            "description": "#### DEPRECATED! Use at your own risk. Use the `newrelic.getEntity` data source instead. This feature may be removed in the next major release\n\nUse this data source to get information about a specific application in New Relic that already exists.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getApplication.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the application in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApplication.\n",
                "properties": {
                    "hostIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of host IDs associated with the application.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of instance IDs associated with the application.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "hostIds",
                    "instanceIds",
                    "name",
                    "id"
                ]
            }
        },
        "newrelic:index/getCloudAccount:getCloudAccount": {
            "description": "Use this data source to get information about a specific cloud account linked to New Relic.\nAccounts can be located by a combination of New Relic Account ID, name and cloud provider (aws, gcp, azure, etc). Name and cloud provider are required attributes. If no account_id is specified on the resource the provider level account_id will be used. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst account = pulumi.output(newrelic.getCloudAccount({\n    accountId: 12345,\n    cloudProvider: \"aws\",\n    name: \"my aws account\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudAccount.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The account ID in New Relic.\n"
                    },
                    "cloudProvider": {
                        "type": "string",
                        "description": "The cloud provider of the account (aws, gcp, azure, etc)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cloud account name in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudProvider",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCloudAccount.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "cloudProvider": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cloudProvider",
                    "name",
                    "id"
                ]
            }
        },
        "newrelic:index/getEntity:getEntity": {
            "description": "Use this data source to get information about a specific entity in New Relic One that already exists.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEntity.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The entity's domain. Valid values are APM, BROWSER, INFRA, MOBILE, SYNTH, and VIZ. If not specified, all domains are searched.\n"
                    },
                    "ignoreCase": {
                        "type": "boolean",
                        "description": "Ignore case of the `name` when searching for the entity. Defaults to false.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the entity in New Relic One.  The first entity matching this name for the given search parameters will be returned.\n"
                    },
                    "tag": {
                        "$ref": "#/types/newrelic:index/getEntityTag:getEntityTag"
                    },
                    "type": {
                        "type": "string",
                        "description": "The entity's type. Valid values are APPLICATION, DASHBOARD, HOST, MONITOR, and WORKLOAD.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEntity.\n",
                "properties": {
                    "accountId": {
                        "type": "integer",
                        "description": "The New Relic account ID associated with this entity.\n"
                    },
                    "applicationId": {
                        "type": "integer",
                        "description": "The domain-specific application ID of the entity. Only returned for APM and Browser applications.\n"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "guid": {
                        "type": "string",
                        "description": "The unique GUID of the entity.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ignoreCase": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "servingApmApplicationId": {
                        "type": "integer"
                    },
                    "tag": {
                        "$ref": "#/types/newrelic:index/getEntityTag:getEntityTag"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "applicationId",
                    "domain",
                    "guid",
                    "name",
                    "servingApmApplicationId",
                    "type",
                    "id"
                ]
            }
        },
        "newrelic:index/getKeyTransaction:getKeyTransaction": {
            "description": "Use this data source to get information about a specific key transaction in New Relic that already exists.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKeyTransaction.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the key transaction in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKeyTransaction.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "newrelic:plugins/getPlugin:getPlugin": {
            "description": "New Relic Plugins reached end of life Wednesday June 16, 2021.\n\n**This data source has been removed.**\n\nFor more information, [click here](https://discuss.newrelic.com/t/new-relic-plugin-eol-wednesday-june-16th-2021/127267)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlugin.\n",
                "properties": {
                    "guid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "guid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlugin.\n",
                "properties": {
                    "guid": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "guid",
                    "id"
                ]
            }
        },
        "newrelic:plugins/getPluginComponent:getPluginComponent": {
            "description": "New Relic Plugins reached end of life Wednesday June 16, 2021.\n\n**This data source has been removed.**\n\nFor more information, [click here](https://discuss.newrelic.com/t/new-relic-plugin-eol-wednesday-june-16th-2021/127267)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPluginComponent.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "pluginId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "pluginId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPluginComponent.\n",
                "properties": {
                    "healthStatus": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "pluginId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "healthStatus",
                    "id",
                    "name",
                    "pluginId"
                ]
            }
        },
        "newrelic:synthetics/getMonitor:getMonitor": {
            "description": "Use this data source to get information about a specific synthetics monitor in New Relic that already exists. This can be used to set up a Synthetics alert condition.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMonitor.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the synthetics monitor in New Relic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMonitor.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "monitorId": {
                        "type": "string",
                        "description": "The ID of the synthetics monitor.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "monitorId",
                    "name",
                    "id"
                ]
            }
        },
        "newrelic:synthetics/getMonitorLocation:getMonitorLocation": {
            "description": "Use this data source to get information about a specific Synthetics monitor location in New Relic that already exists.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMonitorLocation.\n",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "The label of the Synthetics monitor location.\n"
                    }
                },
                "type": "object",
                "required": [
                    "label"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMonitorLocation.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description of the Synthetics monitor location.\n"
                    },
                    "highSecurityMode": {
                        "type": "boolean",
                        "description": "Represents if high security mode is enabled for the location. A value of true means that high security mode is enabled, and a value of false means it is disabled.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "label": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Synthetics monitor location.\n"
                    },
                    "private": {
                        "type": "boolean",
                        "description": "Represents if this location is a private location. A value of true means that the location is private, and a value of false means it is public.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "highSecurityMode",
                    "label",
                    "name",
                    "private",
                    "id"
                ]
            }
        },
        "newrelic:synthetics/getSecureCredential:getSecureCredential": {
            "description": "Use this data source to get information about a specific Synthetics secure credential in New Relic that already exists.\n\nNote that the secure credential's value is not returned as an attribute for security reasons.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = pulumi.output(newrelic.synthetics.getSecureCredential({\n    key: \"MY_KEY\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSecureCredential.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.\n"
                    }
                },
                "type": "object",
                "required": [
                    "key"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecureCredential.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The time the secure credential was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The secure credential's description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "key": {
                        "type": "string"
                    },
                    "lastUpdated": {
                        "type": "string",
                        "description": "The time the secure credential was last updated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "key",
                    "lastUpdated",
                    "id"
                ]
            }
        }
    }
}